{
	"info": {
		"_postman_id": "e8ed80ac-9081-4c84-8c7a-64ceef54ddf0",
		"name": "finan_57_verify_to_sent_reminder",
		"description": "### Testsuite: verify to sent invoice to buyer by schedule in reminder\n\n###### Testcase:\n\n1. Login with owner account\n2. Get data\n    1. Invoice / Get list invoice => get invoice A with description don't include 'hasReminder' & finan_status != overdue|paid & invoice B with description include current_day\n    2. Invoice / Get invoice detail of A => get data to edit\n    3. Invoice / Edit invoice => edit invoice A with description to \\[API\\]\\[Edit\\] hasReminder tomorrow_date\n    4. Reminder / Get list reminder => get all reminder of invoice A\n3. Create reminder for invoice A\n    \n    1. ~~unhappy case: remind_date < current~~\n        \n    2. unhappy case: remind_date = tomorrow\n4. Check data\n    1. Invoice / Get invoice detail of B => sent_at update the same with description of invoice\n    2. Reminder / Get list reminder => update data correctly\n\n###### Note:\n\n- sent_at sẽ dc update theo giá trị mới nhất => check reminder\n- Khi tạo reminder tạm thời set vào 1g sáng của ngày set\n- reminder_day => system will sent email at cut_off_time OR start of this reminder_day",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "282640"
	},
	"item": [
		{
			"name": "authen",
			"item": [
				{
					"name": "verify_email_or_phone_number",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/**",
									" * currently, manual to create account pwd & use charles to get it",
									" * default pwd created: 21112007 (prod with default account & no need pwd)",
									" */",
									"",
									"let email = pm.environment.get(\"SER-email\");",
									"let phone_number = pm.environment.get(\"SER-phone_number\");",
									"",
									"console.log(\"--- Start Testsuite 57 ---\");",
									"let testcase = 1;",
									"",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let isPhone = true;",
									"",
									"let payload;",
									"if(isPhone){",
									"    console.log(\"login with phone_number: \" + phone_number);",
									"    payload = {",
									"        \"phone_number\": phone_number",
									"    }",
									"} else {",
									"    console.log(\"login with email: \" + email);",
									"    payload = {",
									"        \"email\": email",
									"    }",
									"}",
									"",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));",
									"pm.environment.set(\"C-testcase\",testcase);",
									"pm.environment.set(\"C-isPhone\",isPhone);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    let jsData = pm.response.json();",
									"",
									"    if(jsData.data.is_existed && jsData.data.has_password){",
									"        postman.setNextRequest(\"login_with_pwd\");",
									"    } else if(jsData.data.is_existed) {",
									"        console.log(\"This account doesn't create pwd, please manual create!!!\");",
									"        postman.setNextRequest(null);",
									"    } else {",
									"        console.log(\"Error:\", JSON.stringify(jsData));",
									"        console.log(\"THIS ACCOUNT IS NOT EXISTED IN SYSTEM, WILL MANUAL CREATE IT\");",
									"        postman.setNextRequest(null);",
									"    }",
									"} else {",
									"    console.log(\"Error, end test\");",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finan_base_url}}/finan-user/api/v1/auth/account/verify",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-user",
								"api",
								"v1",
								"auth",
								"account",
								"verify"
							]
						}
					},
					"response": []
				},
				{
					"name": "login_with_pwd",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// let crypto = require('crypto-js');",
									"",
									"// const algorithm = \"aes-256-gcm\";",
									"// const IV_LEN = 12;",
									"// const AUTH_TAG_LEN = 16;",
									"// const SECRET_KEY = \"7dQ0HwRI5okvwAK0WzxaW6ABFncjeu1E\";",
									"",
									"// function encrypt(message) {",
									"//   const iv = Buffer.from(crypto.randomBytes(IV_LEN));",
									"//   const cipher = crypto.createCipheriv(algorithm, SECRET_KEY, iv, {",
									"//     authTagLength: AUTH_TAG_LEN,",
									"//   });",
									"//   const encryptedData = Buffer.concat([cipher.update(message), cipher.final()]);",
									"//   const authTag = cipher.getAuthTag();",
									"//   const raw = Buffer.concat([iv, encryptedData, authTag]).toString(\"hex\");",
									"//   return raw;",
									"// }",
									"",
									"// const pwd = \"21112007\";",
									"// // var superSecretEncrypted = CryptoJS.AES.encrypt(pwd, SECRET_KEY);",
									"",
									"// let pwd_enc = encrypt(pwd);",
									"// console.log(\"pwd_enc: \" + pwd_enc);",
									"",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"let isPhone = pm.environment.get(\"C-isPhone\");",
									"",
									"let verify_payload = JSON.parse(pm.environment.get(\"C-payload\"));",
									"",
									"let payload;",
									"let version = pm.environment.get(\"x-current-version\");",
									"if(isPhone){",
									"    payload = {",
									"        \"phone_number\": verify_payload.phone_number,",
									"        \"pwd\": pm.environment.get(\"pwd\"),",
									"        \"platform\": \"gtapp\",",
									"        \"device_id\": \"C9102FC6-466C-4980-B795-A91A2FD7F97F\",",
									"        \"app_version\": version,",
									"        \"device_name\": \"iPhone\"",
									"    }",
									"} else {",
									"    payload = {",
									"        \"email\": verify_payload.email,",
									"        \"pwd\": pm.environment.get(\"pwd\"),",
									"        \"platform\": \"gtapp\",",
									"        \"device_id\": \"C9102FC6-466C-4980-B795-A91A2FD7F97F\",",
									"        \"app_version\": version,",
									"        \"device_name\": \"iPhone\"",
									"    }",
									"}",
									"console.log(\"debug: \", payload);",
									"",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    let jsData = pm.response.json();",
									"    // debug",
									"    // console.log(JSON.stringify(jsData));",
									"",
									"    let business_id = null;",
									"    try{",
									"        business_id = jsData.data.business_info.list_business[0].business_id;",
									"    } catch{",
									"        console.log(\"This is new user, must create business_id\");",
									"    }",
									"",
									"    let userToken = jsData.data.token;",
									"    pm.environment.set(\"C-userToken\",userToken);",
									"",
									"    if(business_id == null){",
									"        console.log(\"This user don't have store, please check & use another account\");",
									"        ",
									"        postman.setNextRequest(null);",
									"    } else {",
									"        let userRefreshToken = jsData.data.refresh_token;",
									"",
									"        let userInfo = {",
									"            \"role_name\":jsData.data.business_info.current_role.role_name,",
									"            \"is_owner\":jsData.data.business_info.current_role.is_owner,",
									"            \"user_name\":jsData.data.business_info.list_business[0].user_name,",
									"            \"business_id\":business_id",
									"        }",
									"",
									"        // show log",
									"        // console.log(\"userToken:\",userToken);",
									"        // console.log(\"userRefreshToken:\",userRefreshToken);",
									"        console.log(\"userInfo:\",JSON.stringify(userInfo));",
									"",
									"        pm.environment.set(\"C-userRefreshToken\",userRefreshToken);",
									"        pm.environment.set(\"C-userInfo\",userInfo);",
									"        pm.environment.set(\"C-business_id\",business_id); // business_id",
									"",
									"        let testcase = pm.environment.get(\"C-testcase\");",
									"        testcase++;",
									"        pm.environment.set(\"C-testcase\",testcase);",
									"        postman.setNextRequest(\"get_branch_id\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get Token, end test\");",
									"",
									"    // debug",
									"    let jsData = pm.response.json();",
									"    console.log(\"data:\",JSON.stringify(jsData));",
									"",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finan_base_url}}/finan-user/api/v1/auth/account/login",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-user",
								"api",
								"v1",
								"auth",
								"account",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_branch_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let branch_id = null;",
									"    try {",
									"        branch_id = jsData.data.id;",
									"    } catch {",
									"        console.log(\"Can't get branch_id\");",
									"    }",
									"",
									"    pm.test(\"Got branch_id\", function () {",
									"        pm.expect(branch_id != null).to.be.true;",
									"    });",
									"",
									"    if(branch_id != null){",
									"        pm.environment.set(\"C-business_id\",branch_id);",
									"        postman.setNextRequest(\"get_list_invoice\"); // get_list_invoice",
									"    } else {",
									"        postman.setNextRequest(null);",
									"    }",
									"} else {",
									"    console.log(\"Can't get Token, end test\", jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{finan_base_url}}/finan-business/api/v1/branch/detail/{{C-business_id}}",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-business",
								"api",
								"v1",
								"branch",
								"detail",
								"{{C-business_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "invoice",
			"item": [
				{
					"name": "get_list_invoice",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = JSON.parse(responseBody);",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let total_pages = jsData.meta.total_pages;",
									"    let page = pm.environment.get(\"C-page\");",
									"",
									"    let check_invoice = pm.environment.get(\"C-check_invoice\");",
									"    if(!check_invoice) check_invoice = null;",
									"",
									"    let create_reminder_invoice = pm.environment.get(\"C-create_reminder_invoice\");",
									"    if(!create_reminder_invoice) create_reminder_invoice = null;",
									"",
									"    let today = new Date();",
									"    let check_date = today.getFullYear()+'-'+String((today.getMonth()+1)).padStart(2, '0')+'-'+String(today.getDate()).padStart(2, '0');",
									"    for(let item in jsData.data){",
									"        // lấy invoice check",
									"        if(check_invoice == null){",
									"            if(jsData.data[item].description.includes(\"hasReminder\") && jsData.data[item].description.includes(check_date)){",
									"                check_invoice = jsData.data[item];",
									"                console.log(\"Got check_invoice:\",check_invoice);",
									"                pm.environment.set(\"C-check_invoice\",check_invoice);",
									"            }",
									"        }",
									"",
									"        // lấy invoice tạo reminder",
									"        if(create_reminder_invoice == null){",
									"            if(!jsData.data[item].description.includes(\"hasReminder\") && jsData.data[item].final_status != \"overdue\" && jsData.data[item].final_status != \"fully_paid\" && jsData.data[item].status != \"draft\"){ // && jsData.data[item].status != \"draft\"",
									"                create_reminder_invoice = jsData.data[item];",
									"                console.log(\"Got create_reminder_invoice:\",create_reminder_invoice);",
									"                pm.environment.set(\"C-create_reminder_invoice\",create_reminder_invoice);",
									"            }",
									"        }",
									"    }",
									"",
									"    let isGotAll = false;",
									"    if(check_invoice != null && create_reminder_invoice != null){",
									"        isGotAll = true;",
									"    }",
									"",
									"    if(page >= total_pages || isGotAll){",
									"        // must clear page & page_size",
									"        pm.environment.unset(\"C-page\");",
									"        pm.environment.unset(\"C-page_size\");",
									"",
									"        switch(testcase){",
									"            case 2:",
									"                pm.test(\"Got all expected invoices!\", function () {",
									"                    pm.expect(isGotAll).to.be.true;",
									"                });",
									"",
									"                if(create_reminder_invoice != null){",
									"                    postman.setNextRequest(\"get_invoice_detail\"); // get_invoice_detail",
									"                } else {",
									"                    console.log(\"MISSING INVOICE TO CREATE REMINDER, END TEST\");",
									"                }",
									"                break;",
									"            case 4:",
									"                let invoice_obj = pm.environment.get(\"C-invoice_obj\");",
									"                console.log(\"invoice_id: \" + invoice_obj.invoice_id);",
									"",
									"                pm.test(\"Total invoice increase 1: \" + list_invoice.length, function () {",
									"                    pm.expect(list_invoice.length == old_list_invoice.length + 1).to.be.true;",
									"                });",
									"",
									"                let isFound = false;",
									"                for(let i in list_invoice){",
									"                    // console.log(\"list_invoice[i].invoice_id: \" + list_invoice[i].invoice_id);",
									"                    if(list_invoice[i].invoice_id == invoice_obj.invoice_id){",
									"                        isFound = true;",
									"                        pm.test(\"entry_code of invoice correctly! \" + invoice_obj.entry_code, function () {",
									"                            pm.expect(invoice_obj.entry_code == list_invoice[i].entry_code).to.be.true;",
									"                        });",
									"",
									"                        pm.test(\"sub_total_amount of invoice correctly! \" + invoice_obj.sub_total_amount, function () {",
									"                            pm.expect(invoice_obj.sub_total_amount == list_invoice[i].sub_total_amount).to.be.true;",
									"                        });",
									"",
									"                        pm.test(\"contact_id of invoice correctly! \" + invoice_obj.contact_id, function () {",
									"                            pm.expect(invoice_obj.contact_id == list_invoice[i].contact_id).to.be.true;",
									"                        });",
									"",
									"                        // pm.test(\"email of invoice correctly! \" + invoice_obj.email, function () {",
									"                        //     pm.expect(invoice_obj.email == list_invoice[i].email).to.be.true;",
									"                        // });",
									"",
									"                        pm.test(\"created_order_at of invoice correctly! \" + invoice_obj.created_order_at, function () {",
									"                            pm.expect(invoice_obj.created_order_at.substring(0,19) == list_invoice[i].value_at.substring(0,19)).to.be.true;",
									"                        });",
									"",
									"                        pm.test(\"due_at of invoice correctly! \" + invoice_obj.due_at, function () {",
									"                            pm.expect(invoice_obj.due_at.substring(0,19) == list_invoice[i].due_at.substring(0,19)).to.be.true;",
									"                        });",
									"",
									"                        pm.test(\"description of invoice correctly! \" + invoice_obj.description, function () {",
									"                            pm.expect(invoice_obj.description == list_invoice[i].description).to.be.true;",
									"                        });",
									"",
									"                        pm.test(\"tax_type of invoice correctly! \" + invoice_obj.tax_type, function () {",
									"                            pm.expect(invoice_obj.tax_type == list_invoice[i].tax_type).to.be.true;",
									"                        });",
									"",
									"                        // pm.test(\"taxes of invoice correctly! \" + invoice_obj.taxes, function () {",
									"                        //     pm.expect(JSON.stringify(invoice_obj.taxes) == JSON.stringify(list_invoice[i].taxes)).to.be.true;",
									"                        // });",
									"",
									"                        pm.test(\"payment_menthod of invoice correctly! \" + invoice_obj.payment_menthod, function () {",
									"                            pm.expect(JSON.stringify(invoice_obj.payment_menthod) == JSON.stringify(list_invoice[i].payment_menthod)).to.be.true;",
									"                        });",
									"",
									"                        pm.test(\"status of invoice correctly! \" + invoice_obj.status, function () {",
									"                            pm.expect(invoice_obj.status == list_invoice[i].status).to.be.true;",
									"                        });",
									"",
									"                        // final_status",
									"                        if(testcase == 6){",
									"                            let ranTimeCase = pm.environment.get(\"C-ranTimeCase\");",
									"                            if(ranTimeCase == 2 || ranTimeCase == 3){",
									"                                pm.test(\"final_status of invoice is unsent\", function () {",
									"                                    pm.expect(\"unsent\" == list_invoice[i].final_status).to.be.true;",
									"                                });",
									"                            } else {",
									"                                pm.test(\"final_status of invoice is unsent\", function () {",
									"                                    pm.expect(\"overdue\" == list_invoice[i].final_status).to.be.true;",
									"                                });",
									"                            }",
									"                        } else {",
									"                            pm.test(\"final_status of invoice correctly! \" + invoice_obj.status, function () {",
									"                                pm.expect(invoice_obj.status == list_invoice[i].final_status).to.be.true;",
									"                            });",
									"                        }",
									"",
									"                        // pm.test(\"discounts of invoice correctly! \" + invoice_obj.discounts, function () {",
									"                        //     pm.expect(JSON.stringify(invoice_obj.discounts) == JSON.stringify(list_invoice[i].discounts)).to.be.true;",
									"                        // });",
									"                        break;",
									"                    }",
									"                }",
									"",
									"                pm.test(\"Found new invoice\", function () {",
									"                    pm.expect(isFound).to.be.true;",
									"                });",
									"",
									"                // xoá old_list_invoice cũ",
									"                pm.environment.unset(\"C-old_list_invoice\");",
									"",
									"                postman.setNextRequest(\"get_invoice_detail\"); // get_invoice_detail",
									"                break;",
									"            default:",
									"                console.log(\"Missing flow, end test\");",
									"                postman.setNextRequest(null);",
									"                break;",
									"        }",
									"    } else {",
									"        page++;",
									"        pm.environment.set(\"C-page\",page);",
									"",
									"        console.log(\"view next page (\" + page + \") to get more product\");",
									"        postman.setNextRequest(\"get_list_invoice\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get list product, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let page = pm.environment.get(\"C-page\");",
									"",
									"if(!page){",
									"    page = 1;",
									"    pm.environment.set(\"C-page\",page);",
									"",
									"    let page_size = 200;",
									"    pm.environment.set(\"C-page_size\",page_size);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{finan_base_url}}/finan-ledger/api/v1/invoice/list?branch_id={{C-business_id}}&page={{C-page}}&page_size={{C-page_size}}",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"invoice",
								"list"
							],
							"query": [
								{
									"key": "branch_id",
									"value": "{{C-business_id}}"
								},
								{
									"key": "page",
									"value": "{{C-page}}"
								},
								{
									"key": "page_size",
									"value": "{{C-page_size}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get_invoice_detail",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let invoice_obj;",
									"switch(testcase){",
									"    case 2:",
									"        invoice_obj = pm.environment.get(\"C-create_reminder_invoice\");",
									"        break;",
									"    case 4:",
									"        invoice_obj = pm.environment.get(\"C-check_invoice\");",
									"        break;",
									"    default:",
									"        console.log(\"Missing flow\");",
									"        break;",
									"}",
									"let invoice_id = invoice_obj.id;",
									"console.log(\"view detail invoice: \", invoice_obj);",
									"",
									"pm.environment.set(\"C-invoice_id\",invoice_id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    // console.log(\"Debug: \",jsData);",
									"    ",
									"    switch(testcase){",
									"        case 2:",
									"            let create_reminder_invoice = pm.environment.get(\"C-create_reminder_invoice\");",
									"            if(\"entry_discounts\" in jsData.data){",
									"                create_reminder_invoice.entry_discounts = jsData.data.entry_discounts;",
									"            }",
									"            if(\"entry_items\" in jsData.data){",
									"                create_reminder_invoice.entry_items = jsData.data.entry_items;",
									"            }",
									"            if(\"entry_taxes\" in jsData.data){",
									"                create_reminder_invoice.entry_taxes = jsData.data.entry_taxes;",
									"            }",
									"            pm.environment.set(\"C-create_reminder_invoice\",create_reminder_invoice);",
									"            // console.log(\"Debug: \",create_reminder_invoice);",
									"",
									"            postman.setNextRequest(\"edit_invoice\"); // edit_invoice",
									"            break;",
									"        case 4:",
									"            let check_invoice = pm.environment.get(\"C-check_invoice\");",
									"",
									"            pm.test(\"sent_at != null (sent for buyer)\", function () {",
									"                console.log(\"sent_at: \" + jsData.data.sent_at);",
									"                console.log(\"description: \" + jsData.data.description);",
									"                pm.expect(jsData.data.sent_at != null).to.be.true;",
									"            });",
									"",
									"            postman.setNextRequest(\"get_list_reminder_of_invoice\"); // get_list_reminder_of_invoice",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }    ",
									"} else {",
									"    console.log(\"Can't get invoice detail, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{finan_base_url}}/finan-ledger/api/v1/invoice/detail/{{C-invoice_id}}?branch_id={{C-business_id}}",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"invoice",
								"detail",
								"{{C-invoice_id}}"
							],
							"query": [
								{
									"key": "branch_id",
									"value": "{{C-business_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "edit_invoice",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let create_reminder_invoice = pm.environment.get(\"C-create_reminder_invoice\");",
									"",
									"let today = new Date();",
									"let next_date_stp = Math.floor(today.getTime()/1000) + 24*60*60;",
									"let next_date = new Date(next_date_stp*1000);",
									"let setDate = next_date.getFullYear()+'-'+String((next_date.getMonth()+1)).padStart(2, '0')+'-'+String(next_date.getDate()).padStart(2, '0');",
									"",
									"let discounts = [], taxes = [], items = [];",
									"",
									"if(\"entry_discounts\" in create_reminder_invoice){",
									"    for(let i in create_reminder_invoice.entry_discounts){",
									"        discounts[discounts.length] = {",
									"            \"is_rate\":create_reminder_invoice.entry_discounts[i].is_rate,",
									"            \"value\":create_reminder_invoice.entry_discounts[i].value",
									"        }",
									"    }",
									"}",
									"",
									"if(\"entry_items\" in create_reminder_invoice){",
									"    for(let i in create_reminder_invoice.entry_items){",
									"        let taxes_i = [];",
									"        for(let j in create_reminder_invoice.entry_items[i].entry_item_taxes){",
									"            taxes_i[taxes_i.length] = {",
									"                \"id\":create_reminder_invoice.entry_items[i].entry_item_taxes[j].id,",
									"                \"tax_id\":create_reminder_invoice.entry_items[i].entry_item_taxes[j].tax.id",
									"            }",
									"        }",
									"        items[items.length] = {",
									"            \"account_id\":create_reminder_invoice.entry_items[i].income_account_id,",
									"            \"amount\":create_reminder_invoice.entry_items[i].amount,",
									"            \"name\":create_reminder_invoice.entry_items[i].name,",
									"            \"product_id\":create_reminder_invoice.entry_items[i].product_id,",
									"            \"quantity\":create_reminder_invoice.entry_items[i].quantity,",
									"            \"taxes\":taxes_i",
									"        }",
									"    }",
									"}",
									"",
									"if(\"entry_taxes\" in create_reminder_invoice){",
									"    for(let i in create_reminder_invoice.entry_taxes){",
									"        taxes[taxes.length] = {",
									"            \"id\":create_reminder_invoice.entry_taxes[i].id,",
									"            \"tax_id\":create_reminder_invoice.entry_taxes[i].tax.id",
									"        }",
									"    }",
									"}",
									"",
									"let description = \"[API][Edit] hasReminder \" + setDate;",
									"let payload = {",
									"    \"account_credit\":create_reminder_invoice.account_id,",
									"    \"sub_total_amount\":create_reminder_invoice.sub_total_amount,",
									"    \"branch_id\":create_reminder_invoice.branch_id,",
									"    \"contact_id\":create_reminder_invoice.contact_id,",
									"    \"email\":create_reminder_invoice.email,",
									"    \"created_order_at\":create_reminder_invoice.value_at,",
									"    \"due_at\":create_reminder_invoice.due_at,",
									"    \"currency\":create_reminder_invoice.currency,",
									"    \"description\": description,",
									"    \"discounts\": discounts,",
									"    \"displays_id\": \"\",",
									"    \"tax_type\":create_reminder_invoice.tax_type,",
									"    \"taxes\": taxes,",
									"    \"payment_config\":create_reminder_invoice.payment_config,",
									"    \"entry_code\":create_reminder_invoice.entry_code,",
									"    \"items\": items,",
									"    \"status\":create_reminder_invoice.status,",
									"    \"payment_account_id\":create_reminder_invoice.payment_account_id",
									"}",
									"",
									"console.log(\"payload: \",payload);",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));",
									"pm.environment.set(\"C-invoice_obj\",payload);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ====================================== parser cURL",
									"function parseCURL(request_api){",
									"    let curl = \"\";",
									"    if(request_api.method == \"PUT\"){",
									"        curl = \"curl --location --request PUT \";",
									"    } else {",
									"        curl = \"curl --location \";",
									"    }",
									"    curl += \"'\" + request_api.url.protocol + \"://\"",
									"    // host",
									"    for(let i in request_api.url.host){",
									"        if(i >= request_api.url.host.length - 1){",
									"            curl += request_api.url.host[i] + \"/\";",
									"        } else {",
									"            curl += request_api.url.host[i] + \".\";",
									"        }",
									"    }",
									"    // path",
									"    for(let i in request_api.url.path){",
									"        if(i >= request_api.url.path.length - 1){",
									"            curl += request_api.url.path[i];",
									"        } else {",
									"            curl += request_api.url.path[i] + \"/\";",
									"        }",
									"    }",
									"    // query (if have)",
									"    if(\"query\" in request_api.url){",
									"        curl += \"? \";",
									"        for(let i in request_api.url.query){",
									"            if(i >= request_api.url.query.length - 1){",
									"                curl += request_api.url.query[i].key + \"=\" + request_api.url.query[i].value + \"' \";",
									"            } else {",
									"                curl += request_api.url.query[i].key + \"=\" + request_api.url.query[i].value + \"&\";",
									"            }",
									"        }",
									"    } else {",
									"        curl += \"' \";",
									"    }",
									"    // header",
									"    for(let i in request_api.header){",
									"        if(i >= request_api.header.length - 1){",
									"            curl += \"--header '\" + request_api.header[i].key + \": \" + request_api.header[i].value + \"'\";",
									"        } else {",
									"            curl += \"--header '\" + request_api.header[i].key + \": \" + request_api.header[i].value + \"' \";",
									"        }",
									"    }",
									"    switch(request_api.method){",
									"        case \"POST\":",
									"            curl += \" --data '\" + request_api.body.raw + \"'\"",
									"            break;",
									"        case \"PUT\":",
									"            curl += \" --data-raw '\" + request_api.body.raw + \"'\"",
									"            break;",
									"        default:",
									"            break;",
									"    }",
									"    console.log(curl);",
									"    return curl;",
									"}",
									"const request_api = pm.request.toJSON();",
									"parseCURL(request_api);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    // let testcase = pm.environment.get(\"C-testcase\");",
									"    ",
									"    postman.setNextRequest(\"get_list_reminder_of_invoice\"); // get_list_reminder_of_invoice",
									"} else {",
									"    console.log(\"Can't edit invoice, end test\");",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finan_base_url}}​/finan-ledger/api/v1/invoice/update/{{C-invoice_id}}",
							"host": [
								"{{finan_base_url}}​"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"invoice",
								"update",
								"{{C-invoice_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "reminder",
			"item": [
				{
					"name": "get_list_reminder_of_invoice",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let invoice_obj;",
									"switch(testcase){",
									"    case 2:",
									"        invoice_obj = pm.environment.get(\"C-create_reminder_invoice\");",
									"        break;",
									"    case 4:",
									"        invoice_obj = pm.environment.get(\"C-check_invoice\");",
									"        break;",
									"    default:",
									"        break;",
									"}",
									"let invoice_id = invoice_obj.id;",
									"// console.log(\"view detail invoice: \", invoice_obj);",
									"pm.environment.set(\"C-invoice_id\",invoice_id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"",
									"    console.log(\"current: \",jsData);",
									"    let total_reminder = null;",
									"    try {",
									"        total_reminder = jsData.data.length;",
									"    } catch {",
									"        console.log(\"Missing data\");",
									"    }",
									"",
									"    switch(testcase){",
									"        case 2:",
									"            pm.test(\"Got total reminder \" + total_reminder, function () {",
									"                pm.expect(total_reminder != null).to.be.true;",
									"            });",
									"            pm.environment.set(\"C-total_reminder\",total_reminder);",
									"",
									"            testcase++;",
									"            pm.environment.set(\"C-testcase\",testcase);",
									"            postman.setNextRequest(\"create_reminder\"); // create_reminder",
									"            break;",
									"        case 4:",
									"            // status update to sent",
									"",
									"            console.log(\"------------ End Testsuite 57 ---------------\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get list reminder of invoice, end test\", jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "authority",
								"value": "api.finan.dev"
							},
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "accept-language",
								"value": "en-US,en;q=0.9,vi-VN;q=0.8,vi;q=0.7"
							},
							{
								"key": "authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkZXZpY2VfaWQiOiIwMTZkODY2ZC0xMzRhLTQ4YjYtOGI5Ny01ZDFhNDliMTFhYmIiLCJidXNpbmVzc19pZCI6IjdiMGVlOTc2LTk1MDctNDk0OS04MWQzLWVjZTNlZWY1YTY3OSIsInBlcm1pc3Npb25fa2V5cyI6InNob3Bfb3duZXIiLCJyZWZyZXNoX3Rva2VuX2lkIjoiMGVlMTQ4MTAtODk3NS00YjkxLWFlYTgtYTQ0MGZiYTM2NWI2Iiwic2VjdXJpdHlfcm9sZXMiOjAsImFwcF92ZXJzaW9uIjoiIiwidXNlcl9pZCI6IjkxMTZhNDQyLTQzMjktNDMyZi1hNDhhLTliYmQ5ZTNlMjQ5YSIsImV4cCI6MTcxNDAxOTkyNywiaXNzIjoicHJvX3dlYiIsInN1YiI6IjkxMTZhNDQyLTQzMjktNDMyZi1hNDhhLTliYmQ5ZTNlMjQ5YXwwMTZkODY2ZC0xMzRhLTQ4YjYtOGI5Ny01ZDFhNDliMTFhYmJ8MDE2ZDg2NmQtMTM0YS00OGI2LThiOTctNWQxYTQ5YjExYWJiIn0._oXPpBSEwnm8pBdiTSedHmsjr5HavpBu-pxaOMuOf60"
							}
						],
						"url": {
							"raw": "https://api.finan.dev/finan-ledger/api/v1/reminder/list?entry_id={{C-invoice_id}}&branch_id={{C-business_id}}",
							"protocol": "https",
							"host": [
								"api",
								"finan",
								"dev"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"reminder",
								"list"
							],
							"query": [
								{
									"key": "entry_id",
									"value": "{{C-invoice_id}}"
								},
								{
									"key": "branch_id",
									"value": "{{C-business_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "create_reminder",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let today = new Date();",
									"let next_date_stp = Math.floor(today.getTime()/1000) + 24*60*60;",
									"let next_date = new Date(next_date_stp*1000);",
									"let sent_date = next_date.getFullYear()+'-'+String((next_date.getMonth()+1)).padStart(2, '0')+'-'+String(next_date.getDate()).padStart(2, '0');",
									"",
									"let sent_at = next_date.toISOString();",
									"let payload = {",
									"    branch_id:pm.environment.get(\"C-business_id\"),",
									"    entry_id:pm.environment.get(\"C-invoice_id\"),",
									"    sent_at:sent_at",
									"}",
									"",
									"console.log(\"payload: \",payload);",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));",
									"pm.environment.set(\"C-reminder_obj\",payload);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let check_invoice = pm.environment.get(\"C-check_invoice\");",
									"    console.log(\"debug: \",jsData);",
									"",
									"    if(!check_invoice){",
									"        console.log(\"------------ End Testsuite 57 ---------------\");",
									"        postman.setNextRequest(null);",
									"    } else {",
									"        testcase++;",
									"        pm.environment.set(\"C-testcase\",testcase);",
									"        postman.setNextRequest(\"get_invoice_detail\"); //get_invoice_detail",
									"    }",
									"} else {",
									"    console.log(\"Can't create reminder, end test\", jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finan_base_url}}/finan-ledger/api/v1/reminder/create",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"reminder",
								"create"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}