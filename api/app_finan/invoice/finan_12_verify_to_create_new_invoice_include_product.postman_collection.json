{
	"info": {
		"_postman_id": "ba80f19a-265f-48d8-815a-80c87a07e1b7",
		"name": "finan_12_verify_to_create_new_invoice_include_product",
		"description": "### Testsuite: Verify to create new invoice include product\n\n###### Steps:\n\n1. Login with owner account\n2. Get data\n    1. contact / get list contact => \\[GET ONLY\\] get all list & random 1 on them\n    2. contact / get dept amount => get dept amount of this random contact\n    3. account / get list account => \\[GET ONLY\\] save internal_account_obj (credit_account, discount_account)\n    4. account cash_n_bank / get list bank account => use to create invoice with payment method bank_transfer (PENDING)\n    5. product / get list product => \\[GET ONLY\\] save all products (link with coa)\n    6. tax / get list tax => \\[GET ONLY\\] get a tax (the same with coa-tax)\n    7. posting / get list posting => get all with type (debit/credit)\n    8. report / get report account receivable - card unpaid (lifetime) => get list respective with every option(s)\n    9. report / get report account receivable - card paid (start - end) => get total\n    10. report / get report account receivable - customer => get data with 5 options (due, less, between, over and total)\n    11. report / get report account receivable - invoice => the same customer with more 3 data (due_date, create_date, contact_id)\n    12. home / todo / invoice overdue => get data\n    13. home / receivable account / receivable & payable => get data\n    14. invoice / get list invoice => get invoice matching with finan_status & status to edit\n3. Create ACTIVE invoice\n    1. Unhappy case: items = \\[\\]\n    2. Unhappy case: missing customer\n    3. Unhappy case: customer with email is wrong format\n    4. Unhappy case: missing amount\n    5. Unhappy case: amount < 0\n    6. Unhappy case: missing entry_code (free rule)\n    7. Unhappy case: entry_code is existed\n    8. Unhappy case: due_date < create_date\n    9. Unhappy case: tax_type = \"\"\n    10. Unhappy case: status = \"\"\n    11. Unhappy case: payment_menthod = \"\"\n    12. Happy case: successful\n4. Check data\n    \n    1. invoice / list invoice => new invoice with correct data\n    2. invoice / invoice detail => had invoice with correct data\n    3. buyer invoice / buyer view invoice detail => check data correctly\n    4. contact / contact detail => debt_amount updated\n    5. account / account detail => update correctly (check all account relation with this invoice)\n    6. posting / list posting => have new correctly record(s) & data correctly\n    7. report / get report account receivable - card unpaid => update correctly\n    8. report / get report account receivable - card paid => nothing happen\n    9. report / get report account receivable - customer => update correctly\n    10. report / get report account receivable - invoice => update correctly\n    11. home-report / todo / get invoice due => update correctly\n        \n    12. home-report / receivable account / get account receivable => update correctly\n        \n5. Create DRAFT invoice\n    1. Unhappy case: items = \\[\\]\n    2. Unhappy case: missing customer\n    3. Unhappy case: customer with email is wrong format\n    4. Unhappy case: missing amount\n    5. Unhappy case: amount < 0\n    6. Unhappy case: missing entry_code (free rule)\n    7. Unhappy case: entry_code is existed\n    8. Unhappy case: due_date < create_date\n    9. Unhappy case: tax_type = \"\"\n    10. Unhappy case: status = \"\"\n    11. Unhappy case: payment_menthod = \"\"\n    12. Happy case: successful\n6. Check data\n    1. invoice / list invoice => new invoice with correct data\n    2. invoice / invoice detail => had invoice with correct data\n    3. buyer invoice / buyer view invoice detail => 404\n    4. contact / contact detail => nothing happen\n    5. account / account detail => nothing happen\n    6. posting / list posting => nothing happen\n    7. report / get report account receivable - card unpaid => nothing happen\n    8. report / get report account receivable - card paid => nothing happen\n    9. report / get report account receivable - customer => nothing happen\n    10. report / get report account receivable - invoice => nothing happen\n    11. home-report / todo / get invoice due => Nothing happen\n    12. home-report / receivable account / get account receivable => Nothing happen\n\n###### Note:",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "282640"
	},
	"item": [
		{
			"name": "authen",
			"item": [
				{
					"name": "verify_email_or_phone_number",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/**",
									" * currently, manual to create account pwd & use charles to get it",
									" * default pwd created: 21112007 (prod with default account & no need pwd)",
									" */",
									"",
									"let email = pm.environment.get(\"SER-email\");",
									"let phone_number = pm.environment.get(\"SER-phone_number\");",
									"",
									"console.log(\"--- Start Testsuite 12 ---\");",
									"let testcase = 1;",
									"",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let isPhone = true;",
									"",
									"let payload;",
									"if(isPhone){",
									"    console.log(\"login with phone_number: \" + phone_number);",
									"    payload = {",
									"        \"phone_number\": phone_number",
									"    }",
									"} else {",
									"    console.log(\"login with email: \" + email);",
									"    payload = {",
									"        \"email\": email",
									"    }",
									"}",
									"",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));",
									"pm.environment.set(\"C-testcase\",testcase);",
									"pm.environment.set(\"C-isPhone\",isPhone);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    let jsData = pm.response.json();",
									"",
									"    if(jsData.data.is_existed && jsData.data.has_password){",
									"        postman.setNextRequest(\"login_with_pwd\");",
									"    } else if(jsData.data.is_existed) {",
									"        console.log(\"This account doesn't create pwd, please manual create!!!\");",
									"        postman.setNextRequest(null);",
									"    } else {",
									"        console.log(\"Error:\", JSON.stringify(jsData));",
									"        console.log(\"THIS ACCOUNT IS NOT EXISTED IN SYSTEM, WILL MANUAL CREATE IT\");",
									"        postman.setNextRequest(null);",
									"    }",
									"} else {",
									"    console.log(\"Error, end test\");",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finan_base_url}}/finan-user/api/v1/auth/account/verify",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-user",
								"api",
								"v1",
								"auth",
								"account",
								"verify"
							]
						}
					},
					"response": []
				},
				{
					"name": "login_with_pwd",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// let crypto = require('crypto-js');",
									"",
									"// const algorithm = \"aes-256-gcm\";",
									"// const IV_LEN = 12;",
									"// const AUTH_TAG_LEN = 16;",
									"// const SECRET_KEY = \"7dQ0HwRI5okvwAK0WzxaW6ABFncjeu1E\";",
									"",
									"// function encrypt(message) {",
									"//   const iv = Buffer.from(crypto.randomBytes(IV_LEN));",
									"//   const cipher = crypto.createCipheriv(algorithm, SECRET_KEY, iv, {",
									"//     authTagLength: AUTH_TAG_LEN,",
									"//   });",
									"//   const encryptedData = Buffer.concat([cipher.update(message), cipher.final()]);",
									"//   const authTag = cipher.getAuthTag();",
									"//   const raw = Buffer.concat([iv, encryptedData, authTag]).toString(\"hex\");",
									"//   return raw;",
									"// }",
									"",
									"// const pwd = \"21112007\";",
									"// // var superSecretEncrypted = CryptoJS.AES.encrypt(pwd, SECRET_KEY);",
									"",
									"// let pwd_enc = encrypt(pwd);",
									"// console.log(\"pwd_enc: \" + pwd_enc);",
									"",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"let isPhone = pm.environment.get(\"C-isPhone\");",
									"",
									"let verify_payload = JSON.parse(pm.environment.get(\"C-payload\"));",
									"",
									"let payload;",
									"let version = pm.environment.get(\"x-current-version\");",
									"if(isPhone){",
									"    payload = {",
									"        \"phone_number\": verify_payload.phone_number,",
									"        \"pwd\": pm.environment.get(\"pwd\"),",
									"        \"platform\": \"gtapp\",",
									"        \"device_id\": \"C9102FC6-466C-4980-B795-A91A2FD7F97F\",",
									"        \"app_version\": version,",
									"        \"device_name\": \"iPhone\"",
									"    }",
									"} else {",
									"    payload = {",
									"        \"email\": verify_payload.email,",
									"        \"pwd\": pm.environment.get(\"pwd\"),",
									"        \"platform\": \"gtapp\",",
									"        \"device_id\": \"C9102FC6-466C-4980-B795-A91A2FD7F97F\",",
									"        \"app_version\": version,",
									"        \"device_name\": \"iPhone\"",
									"    }",
									"}",
									"console.log(\"debug: \", payload);",
									"",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    let jsData = pm.response.json();",
									"    // debug",
									"    // console.log(JSON.stringify(jsData));",
									"",
									"    let business_id = null;",
									"    try{",
									"        business_id = jsData.data.business_info.list_business[0].business_id;",
									"    } catch{",
									"        console.log(\"This is new user, must create business_id\");",
									"    }",
									"",
									"    let userToken = jsData.data.token;",
									"    pm.environment.set(\"C-userToken\",userToken);",
									"",
									"    if(business_id == null){",
									"        console.log(\"This user don't have store, please check & use another account\");",
									"        ",
									"        postman.setNextRequest(null);",
									"    } else {",
									"        let userRefreshToken = jsData.data.refresh_token;",
									"",
									"        let userInfo = {",
									"            \"role_name\":jsData.data.business_info.current_role.role_name,",
									"            \"is_owner\":jsData.data.business_info.current_role.is_owner,",
									"            \"user_name\":jsData.data.business_info.list_business[0].user_name,",
									"            \"business_id\":business_id",
									"        }",
									"",
									"        // show log",
									"        // console.log(\"userToken:\",userToken);",
									"        // console.log(\"userRefreshToken:\",userRefreshToken);",
									"        console.log(\"userInfo:\",JSON.stringify(userInfo));",
									"",
									"        pm.environment.set(\"C-userRefreshToken\",userRefreshToken);",
									"        pm.environment.set(\"C-userInfo\",userInfo);",
									"        pm.environment.set(\"C-business_id\",business_id); // business_id",
									"",
									"        let testcase = pm.environment.get(\"C-testcase\");",
									"        testcase++;",
									"        pm.environment.set(\"C-testcase\",testcase);",
									"        postman.setNextRequest(\"get_branch_id\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get Token, end test\");",
									"",
									"    // debug",
									"    let jsData = pm.response.json();",
									"    console.log(\"data:\",JSON.stringify(jsData));",
									"",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finan_base_url}}/finan-user/api/v1/auth/account/login",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-user",
								"api",
								"v1",
								"auth",
								"account",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_branch_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let branch_id = null;",
									"    try {",
									"        branch_id = jsData.data.id;",
									"    } catch {",
									"        console.log(\"Can't get branch_id\");",
									"    }",
									"",
									"    pm.test(\"Got branch_id\", function () {",
									"        pm.expect(branch_id != null).to.be.true;",
									"    });",
									"",
									"    if(branch_id != null){",
									"        pm.environment.set(\"C-business_id\",branch_id);",
									"        postman.setNextRequest(\"get_list_contact\"); // get_list_contact",
									"    } else {",
									"        postman.setNextRequest(null);",
									"    }",
									"} else {",
									"    console.log(\"Can't get Token, end test\", jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{finan_base_url}}/finan-business/api/v1/branch/detail/{{C-business_id}}",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-business",
								"api",
								"v1",
								"branch",
								"detail",
								"{{C-business_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "contact",
			"item": [
				{
					"name": "get_list_contact",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    let jsData = JSON.parse(responseBody);",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let total_pages = jsData.meta.total_pages;",
									"    let page = pm.environment.get(\"C-page\");",
									"",
									"    let list_contact = pm.environment.get(\"C-list_contact\");",
									"    if(!list_contact){",
									"        list_contact = [];",
									"    }",
									"",
									"    for(let item in jsData.data){",
									"        if(jsData.data[item].debt_amount == null){",
									"            list_contact[list_contact.length] = {",
									"                \"contact_id\":jsData.data[item].id,",
									"                \"name\":jsData.data[item].name,",
									"                \"phone_number\":jsData.data[item].phone_number,",
									"                \"is_expired\":jsData.data[item].is_expired,",
									"                \"debt_amount\":0,",
									"                \"option\":jsData.data[item].option,",
									"                \"customer_point\":jsData.data[item].customer_point,",
									"                \"state\":jsData.data[item].state,",
									"                \"last_order\":jsData.data[item].last_order",
									"            }",
									"        } else {",
									"            list_contact[list_contact.length] = {",
									"                \"contact_id\":jsData.data[item].id,",
									"                \"name\":jsData.data[item].name,",
									"                \"phone_number\":jsData.data[item].phone_number,",
									"                \"is_expired\":jsData.data[item].is_expired,",
									"                \"debt_amount\":jsData.data[item].debt_amount,",
									"                \"option\":jsData.data[item].option,",
									"                \"customer_point\":jsData.data[item].customer_point,",
									"                \"state\":jsData.data[item].state,",
									"                \"last_order\":jsData.data[item].last_order",
									"            }",
									"        }",
									"    }",
									"    pm.environment.set(\"C-list_contact\",list_contact);",
									"",
									"    if(page >= total_pages){",
									"        // must clear page & page_size",
									"        pm.environment.unset(\"C-page\");",
									"        pm.environment.unset(\"C-page_size\");",
									"",
									"        pm.test(\"Got all contact! \" + list_contact.length, function () {",
									"            pm.environment.set(\"C-list_contact\",list_contact);",
									"            pm.expect(list_contact.length > 0).to.be.true;",
									"        });",
									"",
									"        // console.log(\"list_contact: \", list_contact);",
									"",
									"        postman.setNextRequest(\"get_debt_amount\"); // get_debt_amount",
									"    } else {",
									"        page++;",
									"        pm.environment.set(\"C-page\",page);",
									"",
									"        console.log(\"view next page (\" + page + \") to get more contact\");",
									"        postman.setNextRequest(\"seller_view_list_contact\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get list contact, end test\");",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let page = pm.environment.get(\"C-page\");",
									"",
									"if(!page){",
									"    page = 1;",
									"    pm.environment.set(\"C-page\",page);",
									"",
									"    let page_size = 50;",
									"    pm.environment.set(\"C-page_size\",page_size);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{finan_base_url}}/finan-business/api/v1/contact/get-list?type=&search=&business_id={{C-business_id}}&page={{C-page}}&page_size={{C-page_size}}&sort=&option=&state=waiting_confirm,delivering&is_active=true",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-business",
								"api",
								"v1",
								"contact",
								"get-list"
							],
							"query": [
								{
									"key": "type",
									"value": ""
								},
								{
									"key": "search",
									"value": ""
								},
								{
									"key": "business_id",
									"value": "{{C-business_id}}"
								},
								{
									"key": "page",
									"value": "{{C-page}}"
								},
								{
									"key": "page_size",
									"value": "{{C-page_size}}"
								},
								{
									"key": "sort",
									"value": ""
								},
								{
									"key": "option",
									"value": ""
								},
								{
									"key": "state",
									"value": "waiting_confirm,delivering"
								},
								{
									"key": "is_active",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get_debt_amount",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// random number between min and max",
									"function getRandomInt(min, max) {",
									"  \treturn Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"switch(testcase) {",
									"    case 2:",
									"        let list_contact = pm.environment.get(\"C-list_contact\");",
									"        let ranCon = getRandomInt(0,list_contact.length - 1);",
									"",
									"        console.log(\"Will create processing order with contact: \" + JSON.stringify(list_contact[ranCon]));",
									"        let contact_id = list_contact[ranCon].contact_id;",
									"        pm.environment.set(\"C-ranCon\",ranCon);",
									"        pm.environment.set(\"C-contact_id\",contact_id);",
									"        break;",
									"    case 4:",
									"        break;",
									"    default:",
									"        console.log(\"Missing flow\");",
									"        break;",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    const jsData = pm.response.json();",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    // console.log(\"Debug: \" + JSON.stringify(jsData));",
									"",
									"    let contact_obj, invoice_obj;",
									"    switch(testcase){",
									"        case 2:",
									"            let list_contact = pm.environment.get(\"C-list_contact\");",
									"            let ranCon = pm.environment.get(\"C-ranCon\");",
									"            pm.test(\"debt_amount correctly & got it \" + list_contact[ranCon].debt_amount, function () {",
									"                pm.expect(list_contact[ranCon].debt_amount == jsData.data.debt_amount).to.be.true;",
									"            });",
									"",
									"            pm.environment.set(\"C-contact_obj\",list_contact[ranCon]);",
									"            console.log(\"will create invoice with contact: \", list_contact[ranCon]);",
									"            pm.environment.unset(\"C-list_contact\");",
									"",
									"            postman.setNextRequest(\"get_list_internal_account\"); // get_list_internal_account",
									"            break;",
									"        case 4:",
									"            contact_obj = pm.environment.get(\"C-contact_obj\");",
									"            invoice_obj = pm.environment.get(\"C-invoice_obj\");",
									"            // pm.test(\"debt_amount is increase \" + invoice_obj.sub_total_amount, function () {",
									"            //     console.log(\"Old debt: \" + contact_obj.debt_amount);",
									"            //     console.log(\"New debt: \" + jsData.data.debt_amount);",
									"            //     pm.expect(contact_obj.debt_amount + invoice_obj.sub_total_amount == jsData.data.debt_amount).to.be.true;",
									"            // });",
									"",
									"            postman.setNextRequest(\"get_list_posting\"); // ",
									"            break;",
									"        case 6:",
									"            contact_obj = pm.environment.get(\"C-contact_obj\");",
									"            pm.test(\"debt_amount is nothing happen\", function () {",
									"                pm.expect(contact_obj.debt_amount == jsData.data.debt_amount).to.be.true;",
									"            });",
									"",
									"            postman.setNextRequest(\"get_list_posting\"); // ",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get contact's dept amount, end test\");",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{finan_base_url}}/finan-business/api/v1/contact/get-debt-amount?contact_id={{C-contact_id}}",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-business",
								"api",
								"v1",
								"contact",
								"get-debt-amount"
							],
							"query": [
								{
									"key": "contact_id",
									"value": "{{C-contact_id}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "account coa",
			"item": [
				{
					"name": "get_list_internal_account",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let coa = [];",
									"    try {",
									"        for(let i in jsData.data){",
									"            let sub_group_i = [];",
									"            for(let j in jsData.data[i].sub_group){",
									"                let accounts_j = [];",
									"                for(let k in jsData.data[i].sub_group[j].accounts){",
									"                    accounts_j[accounts_j.length] = {",
									"                        \"account_name\":jsData.data[i].sub_group[j].accounts[k].name,",
									"                        \"account_id\":jsData.data[i].sub_group[j].accounts[k].id,",
									"                        \"group_name\":jsData.data[i].sub_group[j].accounts[k].group_name,",
									"                        \"sub_group_name\":jsData.data[i].sub_group[j].accounts[k].sub_name,",
									"                        \"branch_id\":jsData.data[i].sub_group[j].accounts[k].branch_id,",
									"                        \"displays_id\":jsData.data[i].sub_group[j].accounts[k].displays_id,",
									"                        \"account_source\":jsData.data[i].sub_group[j].accounts[k].account_source,",
									"                        \"account_type\":jsData.data[i].sub_group[j].accounts[k].account_type,",
									"                        \"account_code\":jsData.data[i].sub_group[j].accounts[k].account_code,",
									"                        \"coa_type\":jsData.data[i].sub_group[j].accounts[k].coa_type,",
									"                        \"sub_coa_deepest\":jsData.data[i].sub_group[j].accounts[k].sub_coa_deepest,",
									"                        \"name_en\":jsData.data[i].sub_group[j].accounts[k].name_en,",
									"                        \"status\":jsData.data[i].sub_group[j].accounts[k].status,",
									"                        \"parent_id\":jsData.data[i].sub_group[j].accounts[k].parent_id,",
									"                        \"description\":jsData.data[i].sub_group[j].accounts[k].description,",
									"                        \"open_amount\":jsData.data[i].sub_group[j].accounts[k].open_amount,",
									"                        \"currency\":jsData.data[i].sub_group[j].accounts[k].currency",
									"                        // \"opening_at\":jsData.data[i].sub_group[j].accounts[k].opening_at",
									"                        // \"closing_at\":jsData.data[i].sub_group[j].accounts[k].closing_at",
									"                    }",
									"",
									"                    if(jsData.data[i].sub_group[j].accounts[k].key == \"account_receivable\"){",
									"                        pm.environment.set(\"C-account_receivable\",jsData.data[i].sub_group[j].accounts[k]);",
									"                    } else if (jsData.data[i].sub_group[j].accounts[k].key == \"discount\") {",
									"                        pm.environment.set(\"C-discount\",jsData.data[i].sub_group[j].accounts[k]);",
									"                    }",
									"                }",
									"",
									"                sub_group_i[sub_group_i.length] = {",
									"                    \"sub_group_name\":jsData.data[i].sub_group[j].name,",
									"                    \"sub_group_id\":jsData.data[i].sub_group[j].id,",
									"                    \"sub_group_description\":jsData.data[i].sub_group[j].description,",
									"                    \"accounts\":accounts_j",
									"                }",
									"            }",
									"",
									"            coa[coa.length] = {",
									"                \"group_name\":jsData.data[i].name,",
									"                \"value\":jsData.data[i].value,",
									"                \"index\":jsData.data[i].index,",
									"                \"sub_group\":sub_group_i",
									"            }",
									"        }",
									"    } catch {",
									"        console.log(\"can't get all account in coa\");",
									"    }",
									"",
									"",
									"    pm.test(\"Got coa of this user's business\", function () {",
									"        pm.expect(coa.length > 0).to.be.true;",
									"    });",
									"",
									"    if(coa.length > 0){",
									"        // console.log(\"coa: \", coa);",
									"        pm.environment.set(\"C-coa\",coa);",
									"        let list_internal_account = [];",
									"",
									"        /**",
									"         * lấy những account_id sẽ bị ảnh hưởng bởi invoice để lưu thành array => PENDING (wait confirm with PO, DEV BE-FE)",
									"         */ ",
									"",
									"        pm.environment.set(\"C-list_internal_account\",list_internal_account);",
									"        postman.setNextRequest(\"get_list_payment_account\"); // get_list_payment_account",
									"    } else {",
									"        console.log(\"Can't get list internal account, end test \");",
									"        postman.setNextRequest(null);",
									"    }",
									"} else {",
									"    console.log(\"Can't get list internal account, end test \", jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{finan_base_url}}​/finan-ledger/api/v1/account/list?branch_id={{C-business_id}}&coa_type=",
							"host": [
								"{{finan_base_url}}​"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"account",
								"list"
							],
							"query": [
								{
									"key": "branch_id",
									"value": "{{C-business_id}}"
								},
								{
									"key": "coa_type",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get_internal_account_detail",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let list_internal_account = pm.environment.get(\"C-list_internal_account\");",
									"let pos = pm.environment.get(\"C-pos\");",
									"if(!pos){",
									"    pos = 0;",
									"    pm.environment.set(\"C-pos\",pos);",
									"}",
									"",
									"let internal_account_id = list_internal_account[pos].account_id;",
									"console.log(\"view detail account: \" + account_id);",
									"",
									"pm.environment.set(\"C-internal_account_id\",internal_account_id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    const jsData = pm.response.json();",
									"    // let testcase = pm.environment.get(\"C-testcase\");",
									"    console.log(\"Debug: \" + JSON.stringify(jsData));",
									"",
									"    let list_internal_account = pm.environment.get(\"C-list_internal_account\");",
									"    let pos = pm.environment.get(\"C-pos\");",
									"",
									"    if(pos >= list_internal_account.length - 1){",
									"        pm.environment.unset(\"C-pos\");",
									"",
									"        postman.setNextRequest(\"get_list_tax\"); // get_list_tax",
									"    } else {",
									"        pos++;",
									"        pm.environment.set(\"C-pos\",pos);",
									"",
									"        postman.setNextRequest(\"get_internal_account_detail\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get internal account detail, end test\");",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{finan_base_url}}​​/finan-ledger/api/v1/account/detail/{{C-internal_account_id}}",
							"host": [
								"{{finan_base_url}}​​"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"account",
								"detail",
								"{{C-internal_account_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "account cash_n_bank",
			"item": [
				{
					"name": "get_list_payment_account",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"",
									"    let list_bank_account = [];",
									"    for(let j in jsData.data.accounts){",
									"        if(jsData.data.accounts[j].provider_id != \"\"){ // remove va bank account out list",
									"            list_bank_account[list_bank_account.length] = {",
									"                \"account_id\":jsData.data.accounts[j].id,",
									"                \"account_name\":jsData.data.accounts[j].name,",
									"                \"status\":jsData.data.accounts[j].status,",
									"                \"external_account_id\":jsData.data.accounts[j].external_account_id,",
									"                \"provider_id\":jsData.data.accounts[j].provider_id",
									"            }",
									"        }",
									"    }",
									"",
									"    switch(testcase){",
									"        case 2:",
									"            pm.test(\"Got list bank account\", function () {",
									"                pm.expect(list_bank_account.length > 0).to.be.true;",
									"            });",
									"",
									"            pm.environment.set(\"C-list_bank_account\",list_bank_account);",
									"",
									"            postman.setNextRequest(\"get_list_product\"); // get_list_product",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get list payment account, end test\", jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"url": {
							"raw": "{{finan_base_url}}/finan-ledger/api/v1/account/list-by-key?branch_id={{C-business_id}}&key=cash_and_bank&option=bank",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"account",
								"list-by-key"
							],
							"query": [
								{
									"key": "branch_id",
									"value": "{{C-business_id}}"
								},
								{
									"key": "key",
									"value": "cash_and_bank"
								},
								{
									"key": "option",
									"value": "bank"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "product",
			"item": [
				{
					"name": "get_list_product",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let page = pm.environment.get(\"C-page\");",
									"",
									"if(!page){",
									"    page = 1;",
									"    pm.environment.set(\"C-page\",page);",
									"",
									"    let page_size = 50;",
									"    pm.environment.set(\"C-page_size\",page_size);",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = JSON.parse(responseBody);",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let total_pages = jsData.meta.total_pages;",
									"    let page = pm.environment.get(\"C-page\");",
									"",
									"    let list_product = pm.environment.get(\"C-list_product\");",
									"    if(!list_product){",
									"        list_product = [];",
									"    }",
									"",
									"    for(let item in jsData.data){",
									"        if(jsData.data[item].income_account_id != 0 && jsData.data[item].income_taxes.length > 0){",
									"            list_product[list_product.length] = {",
									"                \"product_id\":jsData.data[item].id,",
									"                \"name\":jsData.data[item].name,",
									"                \"price\":jsData.data[item].price,",
									"                \"sku_code\":jsData.data[item].sku_code,",
									"                \"income_account_id\":jsData.data[item].income_account_id,",
									"                \"expense_account_id\":jsData.data[item].expense_account_id,",
									"                \"income_taxes\":jsData.data[item].income_taxes,",
									"                \"expense_taxes\":jsData.data[item].expense_taxes",
									"            }",
									"        }",
									"    }",
									"    pm.environment.set(\"C-list_product\",list_product);",
									"",
									"    if(page >= total_pages){",
									"        // must clear page & page_size",
									"        pm.environment.unset(\"C-page\");",
									"        pm.environment.unset(\"C-page_size\");",
									"",
									"        pm.test(\"Got all valid product! \" + list_product.length, function () {",
									"            pm.expect(list_product.length > 0).to.be.true;",
									"        });",
									"",
									"        // console.log(\"list_product: \", list_product);",
									"",
									"        postman.setNextRequest(\"get_list_tax\"); // get_list_tax",
									"    } else {",
									"        page++;",
									"        pm.environment.set(\"C-page\",page);",
									"",
									"        console.log(\"view next page (\" + page + \") to get more product\");",
									"        postman.setNextRequest(\"get_list_product\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get list product, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{finan_base_url}}/finan-ledger/api/v1/product/list?branch_id={{C-business_id}}&page={{C-page}}&page_size={{C-page_size}}&search=&sort=",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"product",
								"list"
							],
							"query": [
								{
									"key": "branch_id",
									"value": "{{C-business_id}}"
								},
								{
									"key": "page",
									"value": "{{C-page}}"
								},
								{
									"key": "page_size",
									"value": "{{C-page_size}}"
								},
								{
									"key": "search",
									"value": ""
								},
								{
									"key": "sort",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "tax",
			"item": [
				{
					"name": "get_list_tax",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = JSON.parse(responseBody);",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let total_pages = jsData.meta.total_pages;",
									"    let page = pm.environment.get(\"C-page\");",
									"",
									"    let list_tax = pm.environment.get(\"C-list_tax\");",
									"    if(!list_tax){",
									"        list_tax = [];",
									"    }",
									"",
									"    for(let item in jsData.data){",
									"        if(jsData.data[item].description.includes(\"[API]\") && jsData.data[item].rate > 0 && jsData.data[item].rate < 100){",
									"            list_tax[list_tax.length] = {",
									"                \"tax_id\":jsData.data[item].id,",
									"                \"name\":jsData.data[item].name,",
									"                \"rate\":jsData.data[item].rate,",
									"                \"account_id\":jsData.data[item].account_id,",
									"                \"description\":jsData.data[item].description",
									"            }",
									"        }",
									"    }",
									"    pm.environment.set(\"C-list_tax\",list_tax);",
									"",
									"    if(page >= total_pages){",
									"        // must clear page & page_size",
									"        pm.environment.unset(\"C-page\");",
									"        pm.environment.unset(\"C-page_size\");",
									"",
									"        pm.test(\"Got all tax! \" + list_tax.length, function () {",
									"            pm.expect(list_tax.length > 0).to.be.true;",
									"        });",
									"",
									"        // console.log(\"list_tax: \", list_tax);",
									"",
									"        postman.setNextRequest(\"get_list_posting\"); // get_list_posting",
									"    } else {",
									"        page++;",
									"        pm.environment.set(\"C-page\",page);",
									"",
									"        console.log(\"view next page (\" + page + \") to get more tax\");",
									"        postman.setNextRequest(\"get_list_tax\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get list tax, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let page = pm.environment.get(\"C-page\");",
									"",
									"if(!page){",
									"    page = 1;",
									"    pm.environment.set(\"C-page\",page);",
									"",
									"    let page_size = 50;",
									"    pm.environment.set(\"C-page_size\",page_size);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{finan_base_url}}/finan-ledger/api/v1/tax/list?branch_id={{C-business_id}}&page={{C-page}}&page_size={{C-page_size}}&option=&status=",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"tax",
								"list"
							],
							"query": [
								{
									"key": "branch_id",
									"value": "{{C-business_id}}"
								},
								{
									"key": "page",
									"value": "{{C-page}}"
								},
								{
									"key": "page_size",
									"value": "{{C-page_size}}"
								},
								{
									"key": "option",
									"value": ""
								},
								{
									"key": "status",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "invoice",
			"item": [
				{
					"name": "get_list_invoice",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/**",
									" * NOTE:",
									" * testcase == 2: get total only",
									" * testcase == 4: get all record & check (after apply sort, can get only 1st page)",
									" */",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = JSON.parse(responseBody);",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let total_pages = jsData.meta.total_pages;",
									"    let total_records = jsData.meta.total_rows;",
									"    let page = pm.environment.get(\"C-page\");",
									"",
									"    let list_invoice, old_total_invoice;",
									"    switch(testcase){",
									"        case 2:",
									"            pm.environment.unset(\"C-page\");",
									"            pm.environment.unset(\"C-page_size\");",
									"            pm.test(\"Got total invoice! \" + total_records, function () {",
									"                pm.environment.set(\"C-total_invoice\",total_records);",
									"                pm.expect(total_records > 0).to.be.true;",
									"            });",
									"",
									"            for(let i in jsData.data){",
									"                if(jsData.data[i].status == \"active\"){",
									"                    pm.environment.set(\"C-existed_entry_code\",jsData.data[i].entry_code);",
									"                    break;",
									"                }",
									"            }",
									"",
									"            testcase++;",
									"            // testcase = 5;",
									"            pm.environment.set(\"C-testcase\",testcase);",
									"            postman.setNextRequest(\"create_invoice\"); // create_invoice",
									"            break;",
									"        case 4: case 6:",
									"            list_invoice = pm.environment.get(\"C-list_invoice\");",
									"            if(!list_invoice){",
									"                list_invoice = [];",
									"            }",
									"",
									"            for(let item in jsData.data){",
									"                list_invoice[list_invoice.length] = {",
									"                    \"invoice_id\":jsData.data[item].id,",
									"                    \"created_at\":jsData.data[item].created_at,",
									"                    \"entry_code\":jsData.data[item].entry_code,",
									"                    \"system_code\":jsData.data[item].system_code,",
									"                    \"status\":jsData.data[item].status,",
									"                    \"payment_status\":jsData.data[item].payment_status,",
									"                    \"sub_total_amount\":jsData.data[item].sub_total_amount,",
									"                    \"paid_amount\":jsData.data[item].paid_amount,",
									"                    \"currency\":jsData.data[item].currency,",
									"                    \"contact_id\":jsData.data[item].contact_id,",
									"                    \"entry_type\":jsData.data[item].entry_type,",
									"                    \"description\":jsData.data[item].description,",
									"                    \"value_at\":jsData.data[item].value_at,",
									"                    \"due_at\":jsData.data[item].due_at,",
									"                    \"send_at\":jsData.data[item].send_at,",
									"                    \"account_id\":jsData.data[item].account_id,",
									"                    \"tax_type\":jsData.data[item].tax_type,",
									"                    \"final_status\":jsData.data[item].final_status,",
									"                    \"entry_items\":jsData.data[item].entry_items",
									"                }",
									"            }",
									"            pm.environment.set(\"C-list_invoice\",list_invoice);",
									"",
									"            if(page >= total_pages){",
									"                // must clear page & page_size",
									"                pm.environment.unset(\"C-page\");",
									"                pm.environment.unset(\"C-page_size\");",
									"",
									"                let invoice_obj = pm.environment.get(\"C-invoice_obj\");",
									"                // console.log(\"invoice_obj: \", invoice_obj);",
									"                old_total_invoice = pm.environment.get(\"C-total_invoice\");",
									"",
									"                pm.test(\"Total invoice increase 1\", function () {",
									"                    pm.expect(list_invoice.length == old_total_invoice + 1).to.be.true;",
									"                });",
									"",
									"                let isFound = false;",
									"                for(let i in list_invoice){",
									"                    if(list_invoice[i].invoice_id == invoice_obj.invoice_id){",
									"                        isFound = true;",
									"                        pm.test(\"entry_code of invoice correctly! \" + invoice_obj.entry_code, function () {",
									"                            pm.expect(invoice_obj.entry_code == list_invoice[i].entry_code).to.be.true;",
									"                        });",
									"",
									"                        if(invoice_obj.tax_type != \"price_including_tax\"){ // check sau cho case này",
									"                            pm.test(\"sub_total_amount of invoice correctly! \" + invoice_obj.sub_total_amount, function () {",
									"                                pm.expect(invoice_obj.sub_total_amount == list_invoice[i].sub_total_amount).to.be.true;",
									"                            });",
									"                        }",
									"",
									"                        pm.test(\"contact_id of invoice correctly! \" + invoice_obj.contact_id, function () {",
									"                            pm.expect(invoice_obj.contact_id == list_invoice[i].contact_id).to.be.true;",
									"                        });",
									"",
									"                        // pm.test(\"email of invoice correctly! \" + invoice_obj.email, function () {",
									"                        //     pm.expect(invoice_obj.email == list_invoice[i].email).to.be.true;",
									"                        // });",
									"",
									"                        pm.test(\"created_order_at of invoice correctly! \" + invoice_obj.created_order_at, function () {",
									"                            pm.expect(invoice_obj.created_order_at.substring(0,19) == list_invoice[i].value_at.substring(0,19)).to.be.true;",
									"                        });",
									"",
									"                        pm.test(\"due_at of invoice correctly! \" + invoice_obj.due_at, function () {",
									"                            pm.expect(invoice_obj.due_at.substring(0,19) == list_invoice[i].due_at.substring(0,19)).to.be.true;",
									"                        });",
									"",
									"                        pm.test(\"description of invoice correctly! \" + invoice_obj.description, function () {",
									"                            pm.expect(invoice_obj.description == list_invoice[i].description).to.be.true;",
									"                        });",
									"",
									"                        pm.test(\"tax_type of invoice correctly! \" + invoice_obj.tax_type, function () {",
									"                            pm.expect(invoice_obj.tax_type == list_invoice[i].tax_type).to.be.true;",
									"                        });",
									"",
									"                        // pm.test(\"taxes of invoice correctly! \" + invoice_obj.taxes, function () {",
									"                        //     pm.expect(JSON.stringify(invoice_obj.taxes) == JSON.stringify(list_invoice[i].taxes)).to.be.true;",
									"                        // });",
									"",
									"                        // pm.test(\"payment_config of invoice correctly! \" + invoice_obj.payment_config, function () {",
									"                        //     pm.expect(JSON.stringify(invoice_obj.payment_config) == JSON.stringify(list_invoice[i].payment_config)).to.be.true;",
									"                        // });",
									"",
									"                        pm.test(\"status of invoice correctly! \" + invoice_obj.status, function () {",
									"                            pm.expect(invoice_obj.status == list_invoice[i].status).to.be.true;",
									"                        });",
									"",
									"                        // final_status",
									"                        if(testcase == 4){",
									"                            let ranTimeCase = pm.environment.get(\"C-ranTimeCase\");",
									"                            console.log(\"act: \" + list_invoice[i].final_status);",
									"                            if(ranTimeCase == 2 || ranTimeCase == 3){",
									"                                pm.test(\"final_status of invoice is unsent\", function () {",
									"                                    pm.expect(\"unsent\" == list_invoice[i].final_status).to.be.true;",
									"                                });",
									"                            } else {",
									"                                pm.test(\"final_status of invoice is unsent\", function () {",
									"                                    pm.expect(\"overdue\" == list_invoice[i].final_status).to.be.true;",
									"                                });",
									"                            }",
									"                        } else {",
									"                            pm.test(\"final_status of invoice correctly! \" + invoice_obj.status, function () {",
									"                                pm.expect(invoice_obj.status == list_invoice[i].final_status).to.be.true;",
									"                            });",
									"                        }",
									"",
									"                        // pm.test(\"discounts of invoice correctly! \" + invoice_obj.discounts, function () {",
									"                        //     pm.expect(JSON.stringify(invoice_obj.discounts) == JSON.stringify(list_invoice[i].discounts)).to.be.true;",
									"                        // });",
									"                        break;",
									"                    }",
									"                }",
									"",
									"                pm.test(\"Found new product\", function () {",
									"                    pm.expect(isFound).to.be.true;",
									"                });",
									"",
									"                // update total records",
									"                pm.environment.set(\"C-total_invoice\",total_records);",
									"                pm.environment.unset(\"C-list_invoice\");",
									"",
									"                postman.setNextRequest(\"get_invoice_detail\"); // get_invoice_detail",
									"            } else {",
									"                page++;",
									"                pm.environment.set(\"C-page\",page);",
									"",
									"                console.log(\"view next page (\" + page + \") to get more product\");",
									"                postman.setNextRequest(\"get_list_invoice\");",
									"            }",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow\");",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get list product, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let page = pm.environment.get(\"C-page\");",
									"",
									"if(!page){",
									"    page = 1;",
									"    pm.environment.set(\"C-page\",page);",
									"",
									"    let page_size = 300;",
									"    pm.environment.set(\"C-page_size\",page_size);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{finan_base_url}}/finan-ledger/api/v1/invoice/list?branch_id={{C-business_id}}&page={{C-page}}&page_size={{C-page_size}}",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"invoice",
								"list"
							],
							"query": [
								{
									"key": "branch_id",
									"value": "{{C-business_id}}"
								},
								{
									"key": "page",
									"value": "{{C-page}}"
								},
								{
									"key": "page_size",
									"value": "{{C-page_size}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get_invoice_detail",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let invoice_obj = pm.environment.get(\"C-invoice_obj\");",
									"let invoice_id = invoice_obj.invoice_id;",
									"console.log(\"view detail invoice: \" + invoice_id);",
									"",
									"pm.environment.set(\"C-invoice_id\",invoice_id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    console.log(\"Debug: \" + JSON.stringify(jsData));",
									"",
									"    let invoice_obj = pm.environment.get(\"C-invoice_obj\");",
									"    for(let i in invoice_obj.items){",
									"        for(let j in jsData.data.entry_items){",
									"            if(invoice_obj.items[i].product_id == jsData.data.entry_items[j].product_id){",
									"                invoice_obj.items[i].item_id = jsData.data.entry_items[j].id;",
									"                break;",
									"            }",
									"        }",
									"    }",
									"    pm.environment.set(\"C-invoice_obj\",invoice_obj);",
									"    ",
									"    pm.test(\"entry_code of invoice correctly! \" + invoice_obj.entry_code, function () {",
									"        pm.expect(invoice_obj.entry_code == jsData.data.entry_code).to.be.true;",
									"    });",
									"",
									"    if(invoice_obj.tax_type != \"price_including_tax\"){ // check sau cho case này",
									"        pm.test(\"sub_total_amount of invoice correctly! \" + invoice_obj.sub_total_amount, function () {",
									"            pm.expect(invoice_obj.sub_total_amount == jsData.data.sub_total_amount).to.be.true;",
									"        });",
									"    }",
									"",
									"    pm.test(\"contact_id of invoice correctly! \" + invoice_obj.contact_id, function () {",
									"        pm.expect(invoice_obj.contact_id == jsData.data.contact_id).to.be.true;",
									"    });",
									"",
									"    pm.test(\"email of invoice correctly! \" + invoice_obj.email, function () {",
									"        pm.expect(invoice_obj.email == jsData.data.email).to.be.true;",
									"    });",
									"",
									"    pm.test(\"created_order_at of invoice correctly! \" + invoice_obj.created_order_at, function () {",
									"        pm.expect(invoice_obj.created_order_at.substring(0,19) == jsData.data.value_at.substring(0,19)).to.be.true;",
									"    });",
									"",
									"    pm.test(\"due_at of invoice correctly! \" + invoice_obj.due_at, function () {",
									"        pm.expect(invoice_obj.due_at.substring(0,19) == jsData.data.due_at.substring(0,19)).to.be.true;",
									"    });",
									"",
									"    pm.test(\"description of invoice correctly! \" + invoice_obj.description, function () {",
									"        pm.expect(invoice_obj.description == jsData.data.description).to.be.true;",
									"    });",
									"",
									"    pm.test(\"tax_type of invoice correctly! \" + invoice_obj.tax_type, function () {",
									"        pm.expect(invoice_obj.tax_type == jsData.data.tax_type).to.be.true;",
									"    });",
									"",
									"    // pm.test(\"taxes of invoice correctly! \" + invoice_obj.taxes, function () {",
									"    //     pm.expect(JSON.stringify(invoice_obj.taxes) == JSON.stringify(jsData.data.taxes)).to.be.true;",
									"    // });",
									"",
									"    pm.test(\"payment_config of invoice correctly! \" + invoice_obj.payment_config, function () {",
									"        pm.expect(JSON.stringify(invoice_obj.payment_config) == JSON.stringify(jsData.data.payment_config)).to.be.true;",
									"    });",
									"",
									"    pm.test(\"status of invoice correctly! \" + invoice_obj.status, function () {",
									"        pm.expect(invoice_obj.status == jsData.data.status).to.be.true;",
									"    });",
									"",
									"    // final_status",
									"    if(testcase == 4){",
									"        let ranTimeCase = pm.environment.get(\"C-ranTimeCase\");",
									"        if(ranTimeCase == 2 || ranTimeCase == 3){",
									"            pm.test(\"final_status of invoice is unsent\", function () {",
									"                pm.expect(\"unsent\" == jsData.data.final_status).to.be.true;",
									"            });",
									"        } else {",
									"            pm.test(\"final_status of invoice is unsent\", function () {",
									"                pm.expect(\"overdue\" == jsData.data.final_status).to.be.true;",
									"            });",
									"        }",
									"    } else {",
									"        pm.test(\"final_status of invoice correctly! \" + invoice_obj.status, function () {",
									"            pm.expect(invoice_obj.status == jsData.data.final_status).to.be.true;",
									"        });",
									"    }",
									"",
									"    // pm.test(\"discounts of invoice correctly! \" + invoice_obj.discounts, function () {",
									"    //     pm.expect(JSON.stringify(invoice_obj.discounts) == JSON.stringify(jsData.data.discounts)).to.be.true;",
									"    // });",
									"",
									"    postman.setNextRequest(\"buyer_view_invoice\"); // buyer_view_invoice",
									"} else {",
									"    console.log(\"Can't get internal contact detail, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{finan_base_url}}/finan-ledger/api/v1/invoice/detail/{{C-invoice_id}}?branch_id={{C-business_id}}",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"invoice",
								"detail",
								"{{C-invoice_id}}"
							],
							"query": [
								{
									"key": "branch_id",
									"value": "{{C-business_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "create_invoice",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/**",
									" * Note: should refactor for happy case:",
									" * - Calculate all discount, tax the same include_tax case",
									" * - Refactor discounts in items is array matching with data (after support more 1 discount)",
									" */",
									"",
									"/**",
									" *  =============================  func randNotDupe(min, max, total)",
									" * total: số lượng random, ko dc nhỏ hơn max-min+1",
									" * return: array",
									" */",
									"function randNotDupe(min, max, total){",
									"  let arrNum = []; // new empty array",
									"  let n, p;",
									"  for (let i = 0; i < total; i++) {",
									"    do {",
									"      n = Math.floor(Math.random() * (max - min + 1)) + min;",
									"      p = arrNum.includes(n);",
									"      if(!p){",
									"        arrNum.push(n);",
									"      }",
									"    }",
									"    while(p);",
									"  }",
									"  return arrNum;",
									"}",
									"",
									"// ============================= random number between min and max",
									"function getRandomInt(min, max) {",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"",
									"// ============================= random characters",
									"function randomChars(length) {",
									"    var result           = '';",
									"    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
									"    var charactersLength = characters.length;",
									"    for ( var i = 0; i < length; i++ ) {",
									"      result += characters.charAt(Math.floor(Math.random() * charactersLength));",
									"   }",
									"   return result;",
									"}",
									"",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"let case_ = pm.environment.get(\"C-case_\");",
									"if(!case_){",
									"    case_ = 12;",
									"    pm.environment.set(\"C-case_\",case_);",
									"}",
									"console.log(\"Testcase: \" + testcase + \".\" + case_);",
									"",
									"let today = new Date();",
									"let d30_stp = Math.floor(today.getTime()/1000) + 30*24*60*60;",
									"let d30 = new Date(d30_stp*1000);",
									"",
									"let current_timestamp = Math.floor(today.getTime()/1000);",
									"let past_date, past_due_date;",
									"",
									"let last_date_stp = Math.floor(today.getTime()/1000) - 24*60*60;",
									"let last_date = new Date(last_date_stp*1000);",
									"",
									"let next_date_stp = Math.floor(today.getTime()/1000) + 24*60*60;",
									"let next_date = new Date(next_date_stp*1000);",
									"",
									"let tax_types = [\"price_excluding_tax\", \"price_including_tax\", \"tax_not_applicable\"];",
									"let tax_type;",
									"let list_tax = pm.environment.get(\"C-list_tax\");",
									"console.log(\"list_tax: \" + list_tax.length);",
									"",
									"let list_product = pm.environment.get(\"C-list_product\");",
									"console.log(\"list_product: \" + list_product.length);",
									"let discounts = [];",
									"let amount = 0, created_order_at, due_at, description, email; // amount chỉ có với invoice without product, amount = subtotal",
									"",
									"let branch_id, contact_id;",
									"let payment_method_list = [\"bank_transfer\",\"domestic_card\",\"credit_card\",\"ewallet_momo\",\"ewallet_zalopay\",\"ewallet_viettel\",\"ewallet_galaxypay\"];",
									"// khi chọn bank_transfer, phải gửi kèm payment_account_id (tài khoản sẽ nhận tiền khi buyer quét QR thanh toán)",
									"let entry_code, payment_config = [];",
									"let status;",
									"let items = [];",
									"let radProductPos = getRandomInt(0,list_product.length - 1);",
									"let default_item = [{",
									"    \"account_id\": list_product[radProductPos].income_account_id,",
									"    \"amount\": list_product[radProductPos].price,",
									"    \"currency\": \"\",",
									"    \"name\": list_product[radProductPos].name,",
									"    \"note\": \"[API] note for product \" + list_product[radProductPos].name,",
									"    \"quantity\": 1,",
									"    \"product_id\": list_product[radProductPos].product_id,",
									"    \"taxes\": []",
									"}];",
									"",
									"let payment_account_id;",
									"let list_bank_account = pm.environment.get(\"C-list_bank_account\");",
									"switch(case_){",
									"    case 1:",
									"        console.log(\"Unhappy case: items = []\");",
									"        items = [];",
									"        contact_id = pm.environment.get(\"C-contact_id\");",
									"        email = \"\";",
									"        amount = getRandomInt(50,500) * 1000;",
									"        branch_id = pm.environment.get(\"C-business_id\");",
									"        created_order_at = today.toISOString();",
									"        due_at = d30.toISOString();",
									"        entry_code = \"HD-\" + randomChars(6);",
									"        description = \"[API] Note for invoice \" + entry_code;",
									"        discounts = [];",
									"        tax_type = tax_types[getRandomInt(0,tax_types.length - 1)];",
									"        payment_config = [payment_method_list[getRandomInt(0,payment_method_list.length - 1)]];",
									"        if(testcase == 5){",
									"            status = \"draft\";",
									"        } else {",
									"            status = \"active\";",
									"        }",
									"        break;",
									"    case 2:",
									"        console.log(\"Unhappy case: missing customer\");",
									"        items = default_item;",
									"        contact_id = \"\";",
									"        email = \"\";",
									"        amount = default_item[0].amount;",
									"        branch_id = pm.environment.get(\"C-business_id\");",
									"        created_order_at = today.toISOString();",
									"        due_at = d30.toISOString();",
									"        entry_code = \"HD-\" + randomChars(6);",
									"        description = \"[API] Note for invoice \" + entry_code;",
									"        discounts = [];",
									"        tax_type = tax_types[getRandomInt(0,tax_types.length - 1)];",
									"        payment_config = [payment_method_list[getRandomInt(0,payment_method_list.length - 1)]];",
									"        if(testcase == 5){",
									"            status = \"draft\";",
									"        } else {",
									"            status = \"active\";",
									"        }",
									"        break;",
									"    case 3:",
									"        console.log(\"Unhappy case: customer with email is wrong format\");",
									"        items = default_item;",
									"        contact_id = pm.environment.get(\"C-contact_id\");",
									"        email = randomChars(10) + \"@ahjhj\";",
									"        amount = default_item[0].amount;",
									"        branch_id = pm.environment.get(\"C-business_id\");",
									"        created_order_at = today.toISOString();",
									"        due_at = d30.toISOString();",
									"        entry_code = \"HD-\" + randomChars(6);",
									"        description = \"[API] Note for invoice \" + entry_code;",
									"        discounts = [];",
									"        tax_type = tax_types[getRandomInt(0,tax_types.length - 1)];",
									"        payment_config = [payment_method_list[getRandomInt(0,payment_method_list.length - 1)]];",
									"        if(testcase == 5){",
									"            status = \"draft\";",
									"        } else {",
									"            status = \"active\";",
									"        }",
									"        break;",
									"    case 4:",
									"        console.log(\"Unhappy case: missing amount\");",
									"        items = default_item;",
									"        contact_id = pm.environment.get(\"C-contact_id\");",
									"        email = \"\";",
									"        amount = \"\";",
									"        branch_id = pm.environment.get(\"C-business_id\");",
									"        created_order_at = today.toISOString();",
									"        due_at = d30.toISOString();",
									"        entry_code = \"HD-\" + randomChars(6);",
									"        description = \"[API] Note for invoice \" + entry_code;",
									"        discounts = [];",
									"        tax_type = tax_types[getRandomInt(0,tax_types.length - 1)];",
									"        payment_config = [payment_method_list[getRandomInt(0,payment_method_list.length - 1)]];",
									"        if(testcase == 5){",
									"            status = \"draft\";",
									"        } else {",
									"            status = \"active\";",
									"        }",
									"        break;",
									"    case 5:",
									"        console.log(\"Unhappy case: amount < 0\");",
									"        items = default_item;",
									"        contact_id = pm.environment.get(\"C-contact_id\");",
									"        email = \"\";",
									"        amount = -default_item[0].amount;",
									"        branch_id = pm.environment.get(\"C-business_id\");",
									"        created_order_at = today.toISOString();",
									"        due_at = d30.toISOString();",
									"        entry_code = \"HD-\" + randomChars(6);",
									"        description = \"[API] Note for invoice \" + entry_code;",
									"        discounts = [];",
									"        tax_type = tax_types[getRandomInt(0,tax_types.length - 1)];",
									"        payment_config = [payment_method_list[getRandomInt(0,payment_method_list.length - 1)]];",
									"        if(testcase == 5){",
									"            status = \"draft\";",
									"        } else {",
									"            status = \"active\";",
									"        }",
									"        break;",
									"    case 6:",
									"        console.log(\"Unhappy case: entry_code = ''\");",
									"        items = default_item;",
									"        contact_id = pm.environment.get(\"C-contact_id\");",
									"        email = \"\";",
									"        amount = default_item[0].amount;",
									"        branch_id = pm.environment.get(\"C-business_id\");",
									"        created_order_at = today.toISOString();",
									"        due_at = d30.toISOString();",
									"        entry_code = \"\";",
									"        description = \"[API] Note for invoice \" + entry_code;",
									"        discounts = [];",
									"        tax_type = tax_types[getRandomInt(0,tax_types.length - 1)];",
									"        payment_config = [payment_method_list[getRandomInt(0,payment_method_list.length - 1)]];",
									"        if(testcase == 5){",
									"            status = \"draft\";",
									"        } else {",
									"            status = \"active\";",
									"        }",
									"        break;",
									"    case 7:",
									"        console.log(\"Unhappy case: entry_code is existed\");",
									"        items = default_item;",
									"        contact_id = pm.environment.get(\"C-contact_id\");",
									"        email = \"\";",
									"        amount = default_item[0].amount;",
									"        branch_id = pm.environment.get(\"C-business_id\");",
									"        created_order_at = today.toISOString();",
									"        due_at = d30.toISOString();",
									"        entry_code = pm.environment.get(\"C-existed_entry_code\");",
									"        description = \"[API] Note for invoice \" + entry_code;",
									"        discounts = [];",
									"        tax_type = tax_types[getRandomInt(0,tax_types.length - 1)];",
									"        payment_config = [payment_method_list[getRandomInt(0,payment_method_list.length - 1)]];",
									"        if(testcase == 5){",
									"            status = \"draft\";",
									"        } else {",
									"            status = \"active\";",
									"        }",
									"        break;",
									"    case 8:",
									"        console.log(\"Unhappy case: due_date < create_date\");",
									"        items = default_item;",
									"        contact_id = pm.environment.get(\"C-contact_id\");",
									"        email = \"\";",
									"        amount = default_item[0].amount;",
									"        branch_id = pm.environment.get(\"C-business_id\");",
									"        created_order_at = today.toISOString();",
									"        due_at = last_date.toISOString();",
									"        entry_code = \"HD-\" + randomChars(6);",
									"        description = \"[API] Note for invoice \" + entry_code;",
									"        discounts = [];",
									"        tax_type = tax_types[getRandomInt(0,tax_types.length - 1)];",
									"        payment_config = [payment_method_list[getRandomInt(0,payment_method_list.length - 1)]];",
									"        if(testcase == 5){",
									"            status = \"draft\";",
									"        } else {",
									"            status = \"active\";",
									"        }",
									"        break;",
									"    case 9:",
									"        console.log(\"Unhappy case: tax_type = ''\");",
									"        items = default_item;",
									"        contact_id = pm.environment.get(\"C-contact_id\");",
									"        email = \"\";",
									"        amount = default_item[0].amount;",
									"        branch_id = pm.environment.get(\"C-business_id\");",
									"        created_order_at = today.toISOString();",
									"        due_at = d30.toISOString();",
									"        entry_code = \"HD-\" + randomChars(6);",
									"        description = \"[API] Note for invoice \" + entry_code;",
									"        discounts = [];",
									"        tax_type = \"\";",
									"        payment_config = [payment_method_list[getRandomInt(0,payment_method_list.length - 1)]];",
									"        if(testcase == 5){",
									"            status = \"draft\";",
									"        } else {",
									"            status = \"active\";",
									"        }",
									"        break;",
									"    case 10:",
									"        console.log(\"Unhappy case: status = ''\");",
									"        items = default_item;",
									"        contact_id = pm.environment.get(\"C-contact_id\");",
									"        email = \"\";",
									"        amount = default_item[0].amount;",
									"        branch_id = pm.environment.get(\"C-business_id\");",
									"        created_order_at = today.toISOString();",
									"        due_at = d30.toISOString();",
									"        entry_code = \"HD-\" + randomChars(6);",
									"        description = \"[API] Note for invoice \" + entry_code;",
									"        discounts = [];",
									"        tax_type = tax_types[getRandomInt(0,tax_types.length - 1)];",
									"        payment_config = [payment_method_list[getRandomInt(0,payment_method_list.length - 1)]];",
									"        status = \"\";",
									"        break;",
									"    case 11:",
									"        console.log(\"Unhappy case: payment_config = []\");",
									"        items = default_item;",
									"        contact_id = pm.environment.get(\"C-contact_id\");",
									"        email = \"\";",
									"        amount = default_item[0].amount;",
									"        branch_id = pm.environment.get(\"C-business_id\");",
									"        created_order_at = today.toISOString();",
									"        due_at = last_date.toISOString();",
									"        entry_code = \"HD-\" + randomChars(6);",
									"        description = \"[API] Note for invoice \" + entry_code;",
									"        discounts = [];",
									"        tax_type = tax_types[getRandomInt(0,tax_types.length - 1)];",
									"        payment_config = [];",
									"        if(testcase == 5){",
									"            status = \"draft\";",
									"        } else {",
									"            status = \"active\";",
									"        }",
									"        break;",
									"    case 12:",
									"        console.log(\"Happy case: \");",
									"        contact_id = pm.environment.get(\"C-contact_id\");",
									"        email = \"chau.lth@finan.me\";",
									"",
									"        branch_id = pm.environment.get(\"C-business_id\");",
									"        entry_code = \"HD-\" + randomChars(6);",
									"        description = \"[API] Note for invoice \" + entry_code;",
									"        if(testcase == 5){",
									"            status = \"draft\";",
									"        } else if (testcase == 3){",
									"            status = \"active\";",
									"        } else {",
									"            console.log(\"Missing testcase\");",
									"        }",
									"        /**",
									"         * happy case:",
									"         * - random thời điểm tạo (trước, hiện tại, sau) => khi nào tax apply history sẽ thêm case trước và sau thời điểm effect để check mức thuế => 1 phần FE sẽ check",
									"         * - random tax_type: không thuế, chưa bao gồm thuế, đã bao gồm thuế",
									"         * - random số sản phẩm tạo 1~3",
									"         *    - random số lượng sản phẩm 1~3",
									"         *    - random chỉnh/không chỉnh giá sản phẩm",
									"         * - random số lượng discount",
									"         *    - random isRate",
									"         *    - random amount",
									"         * Công thức tính: https://sobanhang.larksuite.com/wiki/K42mwQN7hifMjxktLQVuu2Kqszg",
									"         */",
									"        let ranTimeCase = getRandomInt(1,5);",
									"        pm.environment.set(\"C-ranTimeCase\",ranTimeCase);",
									"        console.log(\"ranTimeCase: \" + ranTimeCase);",
									"         switch(ranTimeCase){",
									"            case 1:",
									"                // due_at + 31d < current < due_at + 61d",
									"                past_date = new Date((current_timestamp - 61*24*60*60)*1000);",
									"                past_due_date = new Date((current_timestamp - 31*24*60*60)*1000);",
									"                created_order_at = past_date.toISOString();",
									"                due_at = past_due_date.toISOString();",
									"                break;",
									"            case 2:",
									"                // created_order_at == current",
									"                created_order_at = today.toISOString();",
									"                due_at = d30.toISOString();",
									"                break;",
									"            case 3:",
									"                // created_order_at > current",
									"                created_order_at = next_date.toISOString();",
									"                due_at = d30.toISOString();",
									"                break;",
									"            case 4:",
									"                // due_at + 61d < current",
									"                past_date = new Date((current_timestamp - 91*24*60*60)*1000);",
									"                past_due_date = new Date((current_timestamp - 61*24*60*60)*1000);",
									"                created_order_at = past_date.toISOString();",
									"                due_at = past_due_date.toISOString();",
									"                break;",
									"            default:",
									"                // due_at < current",
									"                let ranPastDay = getRandomInt(1,29);",
									"                past_date = new Date((current_timestamp - (ranPastDay+30)*24*60*60)*1000);",
									"                past_due_date = new Date((current_timestamp - ranPastDay*24*60*60)*1000);",
									"                created_order_at = past_date.toISOString();",
									"                due_at = past_due_date.toISOString();",
									"                break;",
									"        }",
									"        ",
									"        // product / item",
									"        let randTotalProduct = getRandomInt(1,3);",
									"        let ranListPDPos = randNotDupe(0,list_product.length - 1,randTotalProduct);",
									"",
									"        // discount => tạm thời chỉ chọn 1 hoặc 0, dev chưa handle 2+ discount",
									"        let randTotalDC = getRandomInt(0,1);",
									"        switch(getRandomInt(1,3)){ // getRandomInt(1,3)",
									"            case 1:",
									"                tax_type = tax_types[0];",
									"                /**",
									"                 * price_excluding_tax",
									"                 * 1. Giảm giá trước (tỉ trọng product amount theo giá fix hoặc %)",
									"                 * 2. Tính thuế trên giá đã giàm",
									"                 */",
									"                for(let i in ranListPDPos){",
									"                    let randTotalTax_i = getRandomInt(0,1);",
									"                    let randListPos_i = randNotDupe(0,list_tax.length - 1,randTotalTax_i);",
									"                    let taxes_i = [];",
									"                    let quantity_i = getRandomInt(1,3);",
									"",
									"                    // amount của tax chỉ là tượng trưng, server sẽ tự tính lại dựa vào tax_id (cthuc hiện tại đang sai vì chưa discount)",
									"                    for(let j in randListPos_i){",
									"                        taxes_i[taxes_i.length] = {",
									"                            \"account_id\": list_tax[randListPos_i[j]].account_id,",
									"                            \"rate\": list_tax[randListPos_i[j]].rate,",
									"                            \"amount\": Math.ceil(quantity_i*list_product[ranListPDPos[i]].price*list_tax[randListPos_i[j]].rate/100),",
									"                            \"name\": list_tax[randListPos_i[j]].name,",
									"                            \"tax_id\": list_tax[randListPos_i[j]].tax_id",
									"                        };",
									"                    }",
									"",
									"                    items[items.length] = {",
									"                        \"account_id\": list_product[ranListPDPos[i]].income_account_id,",
									"                        \"amount\": list_product[ranListPDPos[i]].price,",
									"                        \"currency\": \"\",",
									"                        \"name\": list_product[ranListPDPos[i]].name,",
									"                        \"note\": \"[API] note for product \" + list_product[ranListPDPos[i]].name,",
									"                        \"quantity\":quantity_i,",
									"                        \"product_id\": list_product[ranListPDPos[i]].product_id,",
									"                        \"taxes\": taxes_i",
									"                    }",
									"                }",
									"",
									"                for(let i in items){",
									"                    amount += items[i].amount*items[i].quantity;",
									"                }",
									"",
									"                // discounts",
									"                for(let i = 0; i < randTotalDC; i++){",
									"                    if(getRandomInt(0,1)){",
									"                        discounts[discounts.length] = {",
									"                            \"currency\": \"\",",
									"                            \"is_rate\": true,",
									"                            \"value\": getRandomInt(10,800) / 10",
									"                        }",
									"                        // discount_amount_i = amount*discount_amount_i/100;",
									"                    } else {",
									"                        discounts[discounts.length] = {",
									"                            \"currency\": \"\",",
									"                            \"is_rate\": false,",
									"                            \"value\": Math.ceil(amount / getRandomInt(2,10))",
									"                        }",
									"                    }",
									"                }",
									"                break;",
									"            case 3:",
									"                /**",
									"                 * price_including_tax",
									"                 * 1. Tách thuế ra khỏi product amount (sau khi đã *quantity)",
									"                 * 2.a. Tính discount theo tỉ trọng product amount (nếu là số fix)",
									"                 * 2.b. Tính discount theo product amount (nếu là %)",
									"                 * 3. Giảm discount",
									"                 * 4. Tính lại thuế trên giá đã giảm",
									"                 */ ",
									"                tax_type = tax_types[1];",
									"",
									"                // set giá item bao gồm thuế",
									"                for(let i in ranListPDPos){",
									"                    let randTotalTax_i = getRandomInt(0,2);",
									"                    let randListPos_i = randNotDupe(0,list_tax.length - 1,randTotalTax_i);",
									"                    let taxes_i = [];",
									"                    let quantity_i = getRandomInt(1,3);",
									"",
									"                    for(let j in randListPos_i){",
									"                        taxes_i[taxes_i.length] = {",
									"                            \"account_id\": list_tax[randListPos_i[j]].account_id,",
									"                            \"rate\": list_tax[randListPos_i[j]].rate,",
									"                            \"amount\": 0, // quantity_i*list_product[ranListPDPos[i]].price*list_tax[randListPos_i[j]].rate/100",
									"                            \"name\": list_tax[randListPos_i[j]].name,",
									"                            \"tax_id\": list_tax[randListPos_i[j]].tax_id",
									"                        };",
									"                    }",
									"",
									"                    items[items.length] = {",
									"                        \"account_id\": list_product[ranListPDPos[i]].income_account_id,",
									"                        \"amount\": list_product[ranListPDPos[i]].price,",
									"                        \"currency\": \"\",",
									"                        \"name\": list_product[ranListPDPos[i]].name,",
									"                        \"note\": \"[API] note for product \" + list_product[ranListPDPos[i]].name,",
									"                        \"quantity\":quantity_i,",
									"                        \"product_id\": list_product[ranListPDPos[i]].product_id,",
									"                        \"taxes\": taxes_i",
									"                    }",
									"                }",
									"",
									"                // let amount_items = [];",
									"                for(let i in items){",
									"                    amount += items[i].amount*items[i].quantity;",
									"                    // amount_items[i] = {",
									"                    //     \"product_id\":items[i].product_id,",
									"                    //     \"amount\":items[i].amount*items[i].quantity",
									"                    // }",
									"                }",
									"",
									"                // set giá discount",
									"                for(let i = 0; i < randTotalDC; i++){",
									"                    if(getRandomInt(0,1)){ //getRandomInt(0,1)",
									"                        discounts[discounts.length] = {",
									"                            \"currency\": \"\",",
									"                            \"is_rate\": true,",
									"                            \"value\": getRandomInt(10,800) / 10",
									"                        }",
									"                    } else {",
									"                        discounts[discounts.length] = {",
									"                            \"currency\": \"\",",
									"                            \"is_rate\": false,",
									"                            \"value\": Math.ceil(amount / getRandomInt(2,10))",
									"                        }",
									"                    }",
									"                }",
									"",
									"                // clear amount",
									"                amount = 0;",
									"",
									"                // tính lại thuế",
									"                let total_net_amount = 0;",
									"                for(let i in items){",
									"                    // tổng rate thuế theo item",
									"                    let total_tax_rate_i = 0;",
									"                    for(let j in items[i].taxes){",
									"                        total_tax_rate_i += items[i].taxes[j].rate;",
									"                    }",
									"                    items[i].total_tax_rate_i = total_tax_rate_i;",
									"",
									"                    // giá chưa thuế",
									"                    let item_net_amount_i = Math.ceil(items[i].amount*items[i].quantity/(1+items[i].total_tax_rate_i/100));",
									"                    items[i].item_net_amount = item_net_amount_i;",
									"",
									"                    total_net_amount += item_net_amount_i;",
									"                }",
									"                for(let i in items){",
									"                    // giảm giá",
									"                    let item_total_discount_i = 0;",
									"                    for(let k in discounts){",
									"                        if(discounts[k].is_rate){",
									"                            item_total_discount_i += Math.ceil(items[i].item_net_amount*discounts[k].value/100);",
									"                        } else {",
									"                            item_total_discount_i += discounts[k].value*items[i].item_net_amount/total_net_amount;",
									"                        }",
									"                    }",
									"                    items[i].item_total_discount = item_total_discount_i;",
									"",
									"                    // giá sau discount",
									"                    let item_net_amount_after_discount_i = items[i].item_net_amount - items[i].item_total_discount;",
									"                    items[i].item_net_amount_after_discount = item_net_amount_after_discount_i;",
									"                    amount += item_net_amount_after_discount_i;",
									"",
									"                    // tính lại thuế",
									"                    for(let j in items[i].taxes){",
									"                        items[i].taxes[j].amount = Math.ceil(items[i].item_net_amount_after_discount*items[i].taxes[j].rate/100);",
									"                        amount += items[i].taxes[j].amount;",
									"                    }",
									"                }",
									"                break;",
									"            case 2:",
									"            default:",
									"                tax_type = tax_types[2];",
									"                /**",
									"                 * tax_not_applicable",
									"                 * 1. Giảm giá (tỉ trọng product amount theo giá fix hoặc %)",
									"                 */",
									"                for(let i in ranListPDPos){",
									"                    let randTotalTax_i = getRandomInt(0,2);",
									"                    let randListPos_i = randNotDupe(0,list_tax.length - 1,randTotalTax_i);",
									"                    let taxes_i = [];",
									"                    let quantity_i = getRandomInt(1,3);",
									"",
									"                    // truyền hay không truyền tax đều được",
									"                    for(let j in randListPos_i){",
									"                        taxes_i[taxes_i.length] = {",
									"                            \"account_id\": list_tax[randListPos_i[j]].account_id,",
									"                            \"rate\": list_tax[randListPos_i[j]].rate,",
									"                            \"amount\": Math.ceil(quantity_i*list_product[ranListPDPos[i]].price*list_tax[randListPos_i[j]].rate/100),",
									"                            \"name\": list_tax[randListPos_i[j]].name,",
									"                            \"tax_id\": list_tax[randListPos_i[j]].tax_id",
									"                        };",
									"                    }",
									"",
									"                    items[items.length] = {",
									"                        \"account_id\": list_product[ranListPDPos[i]].income_account_id,",
									"                        \"amount\": list_product[ranListPDPos[i]].price,",
									"                        \"currency\": \"\",",
									"                        \"name\": list_product[ranListPDPos[i]].name,",
									"                        \"note\": \"[API] note for product \" + list_product[ranListPDPos[i]].name,",
									"                        \"quantity\":quantity_i,",
									"                        \"product_id\": list_product[ranListPDPos[i]].product_id,",
									"                        \"taxes\": taxes_i",
									"                    }",
									"                }",
									"",
									"                for(let i in items){",
									"                    amount += items[i].amount*items[i].quantity;",
									"                }",
									"",
									"                // discounts",
									"                for(let i = 0; i < randTotalDC; i++){",
									"                    if(getRandomInt(0,1)){",
									"                        discounts[discounts.length] = {",
									"                            \"currency\": \"\",",
									"                            \"is_rate\": true,",
									"                            \"value\": getRandomInt(10,800) / 10",
									"                        }",
									"                    } else {",
									"                        discounts[discounts.length] = {",
									"                            \"currency\": \"\",",
									"                            \"is_rate\": false,",
									"                            \"value\": Math.ceil(amount / getRandomInt(2,10))",
									"                        }",
									"                    }",
									"                }",
									"                break;",
									"        }",
									"",
									"        // payment_config",
									"        let randTotalPM = getRandomInt(1,payment_method_list.length - 1);",
									"        let randListPMPos = randNotDupe(0,payment_method_list.length - 1,randTotalPM);",
									"        for(let i in randListPMPos){",
									"            payment_config[payment_config.length] = payment_method_list[randListPMPos[i]];",
									"        }",
									"",
									"        payment_account_id = list_bank_account[getRandomInt(0,list_bank_account.length - 1)].account_id;",
									"        break;",
									"    default:",
									"        console.log(\"Missing flow\");",
									"        break;",
									"}",
									"",
									"let payload = {",
									"    \"sub_total_amount\": amount,",
									"    \"branch_id\": branch_id,",
									"    \"contact_id\": contact_id,",
									"    \"email\":email,",
									"    \"created_order_at\": created_order_at,",
									"    \"due_at\":due_at,",
									"    \"currency\": \"\",",
									"    \"description\": description,",
									"    \"discounts\": discounts,",
									"    \"displays_id\": \"\",",
									"    \"tax_type\":tax_type,",
									"    \"payment_config\":payment_config,",
									"    \"entry_code\":entry_code,",
									"    \"items\": items,",
									"    \"status\": status,",
									"    \"payment_account_id\":payment_account_id",
									"}",
									"",
									"console.log(\"payload: \",payload);",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));",
									"pm.environment.set(\"C-invoice_obj\",payload);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ====================================== parser cURL",
									"function parseCURL(request_api){",
									"    let curl = \"\";",
									"    if(request_api.method == \"PUT\"){",
									"        curl = \"curl --location --request PUT \";",
									"    } else {",
									"        curl = \"curl --location \";",
									"    }",
									"    curl += \"'\" + request_api.url.protocol + \"://\"",
									"    // host",
									"    for(let i in request_api.url.host){",
									"        if(i >= request_api.url.host.length - 1){",
									"            curl += request_api.url.host[i] + \"/\";",
									"        } else {",
									"            curl += request_api.url.host[i] + \".\";",
									"        }",
									"    }",
									"    // path",
									"    for(let i in request_api.url.path){",
									"        if(i >= request_api.url.path.length - 1){",
									"            curl += request_api.url.path[i];",
									"        } else {",
									"            curl += request_api.url.path[i] + \"/\";",
									"        }",
									"    }",
									"    // query (if have)",
									"    if(\"query\" in request_api.url){",
									"        curl += \"? \";",
									"        for(let i in request_api.url.query){",
									"            if(i >= request_api.url.query.length - 1){",
									"                curl += request_api.url.query[i].key + \"=\" + request_api.url.query[i].value + \"' \";",
									"            } else {",
									"                curl += request_api.url.query[i].key + \"=\" + request_api.url.query[i].value + \"&\";",
									"            }",
									"        }",
									"    } else {",
									"        curl += \"' \";",
									"    }",
									"    // header",
									"    for(let i in request_api.header){",
									"        if(i >= request_api.header.length - 1){",
									"            curl += \"--header '\" + request_api.header[i].key + \": \" + request_api.header[i].value + \"'\";",
									"        } else {",
									"            curl += \"--header '\" + request_api.header[i].key + \": \" + request_api.header[i].value + \"' \";",
									"        }",
									"    }",
									"    switch(request_api.method){",
									"        case \"POST\":",
									"            curl += \" --data '\" + request_api.body.raw + \"'\"",
									"            break;",
									"        case \"PUT\":",
									"            curl += \" --data-raw '\" + request_api.body.raw + \"'\"",
									"            break;",
									"        default:",
									"            break;",
									"    }",
									"    console.log(curl);",
									"    return curl;",
									"}",
									"const request_api = pm.request.toJSON();",
									"parseCURL(request_api);",
									"",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"let case_ = pm.environment.get(\"C-case_\");",
									"",
									"let jsData = pm.response.json();",
									"switch(case_){",
									"    case 1: case 2: case 3: case 4: case 5:",
									"    case 6: case 7: case 8: case 9: case 10:",
									"    case 11:",
									"        pm.test(\"Status code is 400\", function () {",
									"            pm.response.to.have.status(400);",
									"        });",
									"",
									"        console.log(\"Error: \", jsData);",
									"",
									"        // case_ = 12;",
									"        case_++;",
									"        pm.environment.set(\"C-case_\",case_);",
									"        postman.setNextRequest(\"create_invoice\"); // create_invoice",
									"        break;",
									"    case 12:",
									"        console.log(\"debug: \" + JSON.stringify(jsData));",
									"        pm.test(\"Status code is 200\", function () {",
									"            pm.response.to.have.status(200);",
									"        });",
									"",
									"        pm.environment.unset(\"C-case_\");",
									"        let invoice_obj = pm.environment.get(\"C-invoice_obj\");",
									"",
									"        // update invoice_id for invoice_obj",
									"        try {",
									"            invoice_obj.invoice_id = jsData.data.id;",
									"            invoice_obj.system_code = jsData.data.system_code;",
									"        } catch {",
									"            console.log(\"Missing invoice id\");",
									"        }",
									"",
									"        pm.test(\"entry_code of invoice correctly! \" + invoice_obj.entry_code, function () {",
									"            pm.expect(invoice_obj.entry_code == jsData.data.entry_code).to.be.true;",
									"        });",
									"",
									"        let sub_total_amount = invoice_obj.sub_total_amount;",
									"",
									"        // let amount_obj = [];",
									"        // for(let i in invoice_obj.items){",
									"        //     amount_obj[amount_obj.length] = {",
									"        //         \"product_id\":invoice_obj.items[i].product_id,",
									"        //         \"account_id\":invoice_obj.items[i].account_id,",
									"        //         \"quantity\":invoice_obj.items[i].quantity,",
									"        //         \"amount\":invoice_obj.items[i].amount,",
									"        //         \"sub_total\":invoice_obj.items[i].amount*invoice_obj.items[i].quantity",
									"        //     }",
									"        // }",
									"",
									"        // discount_amount",
									"        // total_tax_amount",
									"        let discount_amount = 0;",
									"        let list_tax = pm.environment.get(\"C-list_tax\");",
									"        let total_tax_amount = 0;",
									"        switch(invoice_obj.tax_type){",
									"            case \"price_excluding_tax\":",
									"                // check discount",
									"                for(let i in invoice_obj.discounts){",
									"                    if(invoice_obj.discounts[i].is_rate){",
									"                        discount_amount += invoice_obj.discounts[i].value*sub_total_amount/100;",
									"                    } else {",
									"                        discount_amount += invoice_obj.discounts[i].value;",
									"                    }",
									"                }",
									"",
									"                pm.test(\"discount_amount of invoice correctly! \" + discount_amount.toFixed(2), function () {",
									"                    console.log(\"act: \" + jsData.data.discount_amount.toFixed(2));",
									"                    pm.expect(discount_amount.toFixed(2) == jsData.data.discount_amount.toFixed(2)).to.be.true;",
									"                });",
									"                invoice_obj.discount_amount = discount_amount.toFixed(2);",
									"",
									"                // calculate tax",
									"                for(let i in invoice_obj.items){",
									"                    let discount_i = 0;",
									"                    for(let j in invoice_obj.discounts){",
									"                        if(invoice_obj.discounts[j].is_rate){",
									"                            discount_i += Math.ceil(invoice_obj.discounts[j].value*(invoice_obj.items[i].amount*invoice_obj.items[i].quantity)/100);",
									"                        } else {",
									"                            discount_i += Math.ceil(invoice_obj.discounts[j].value*(invoice_obj.items[i].amount*invoice_obj.items[i].quantity)/sub_total_amount);",
									"                        }",
									"                    }",
									"                    invoice_obj.items[i].discount_amount = discount_i;",
									"",
									"                    for(let k in invoice_obj.items[i].taxes){",
									"                        for(let j in list_tax){",
									"                            if(invoice_obj.items[i].taxes[k].tax_id == list_tax[j].tax_id){",
									"                                total_tax_amount += Math.ceil(list_tax[j].rate*(invoice_obj.items[i].amount*invoice_obj.items[i].quantity-invoice_obj.items[i].discount_amount)/100);",
									"                                break;",
									"                            }",
									"                        }",
									"                    }",
									"                }",
									"                break;",
									"            case \"price_including_tax\":",
									"                sub_total_amount = 0;",
									"                // discount",
									"                for(let i in invoice_obj.items){",
									"                    sub_total_amount += invoice_obj.items[i].item_net_amount;",
									"                    discount_amount += invoice_obj.items[i].item_total_discount;",
									"",
									"                    // tax",
									"                    for(let j in invoice_obj.items[i].taxes){",
									"                        total_tax_amount += invoice_obj.items[i].taxes[j].amount;",
									"                    }",
									"                }",
									"",
									"                pm.test(\"discount_amount of invoice correctly! \" + discount_amount.toFixed(2), function () {",
									"                    console.log(\"act: \" + jsData.data.discount_amount.toFixed(2));",
									"                    pm.expect(discount_amount.toFixed(2) == jsData.data.discount_amount.toFixed(2)).to.be.true;",
									"                });",
									"                invoice_obj.discount_amount = discount_amount.toFixed(2);",
									"                break;",
									"            case \"tax_not_applicable\":",
									"                console.log(\"Don't have tax with type tax_not_applicable\");",
									"                // check discount",
									"                for(let i in invoice_obj.discounts){",
									"                    if(invoice_obj.discounts[i].is_rate){",
									"                        discount_amount += Math.ceil(invoice_obj.discounts[i].value*sub_total_amount/100);",
									"                    } else {",
									"                        discount_amount += invoice_obj.discounts[i].value;",
									"                    }",
									"                }",
									"",
									"                pm.test(\"discount_amount of invoice correctly! \" + discount_amount.toFixed(2), function () {",
									"                    console.log(\"act: \" + jsData.data.discount_amount.toFixed(2));",
									"                    pm.expect(discount_amount.toFixed(2) == jsData.data.discount_amount.toFixed(2)).to.be.true;",
									"                });",
									"                invoice_obj.discount_amount = discount_amount;",
									"                break;",
									"            default:",
									"                pm.test(\"Missing tax type, please check \" + invoice_obj.tax_type, function () {",
									"                    pm.expect(true).to.be.false;",
									"                });",
									"                break;",
									"        }",
									"",
									"        if(invoice_obj.tax_type != \"price_including_tax\"){ // check sau cho case này",
									"            pm.test(\"sub_total_amount of invoice correctly! \" + sub_total_amount, function () {",
									"                console.log(\"act: \" + jsData.data.sub_total_amount);",
									"                pm.expect(sub_total_amount == jsData.data.sub_total_amount).to.be.true;",
									"            });",
									"        }",
									"        ",
									"        pm.test(\"total_tax_amount of invoice correctly! \" + total_tax_amount.toFixed(2), function () {",
									"            console.log(\"act: \" + jsData.data.total_tax_amount.toFixed(2));",
									"            pm.expect(total_tax_amount.toFixed(2) == jsData.data.total_tax_amount.toFixed(2)).to.be.true;",
									"        });",
									"        invoice_obj.total_tax_amount = total_tax_amount;",
									"",
									"        // total_amount",
									"        let total_amount = (sub_total_amount + total_tax_amount - discount_amount).toFixed(2);",
									"",
									"        pm.test(\"total_amount of invoice correctly! \" + total_amount, function () {",
									"            console.log(\"act: \" + jsData.data.total_amount.toFixed(2));",
									"            pm.expect(total_amount == jsData.data.total_amount.toFixed(2)).to.be.true;",
									"        });",
									"        invoice_obj.total_amount = parseFloat(total_amount);",
									"",
									"        pm.test(\"contact_id of invoice correctly! \" + invoice_obj.contact_id, function () {",
									"            pm.expect(invoice_obj.contact_id == jsData.data.contact_id).to.be.true;",
									"        });",
									"",
									"        pm.test(\"email of invoice correctly! \" + invoice_obj.email, function () {",
									"            pm.expect(invoice_obj.email == jsData.data.email).to.be.true;",
									"        });",
									"",
									"        pm.test(\"created_order_at of invoice correctly! \" + invoice_obj.created_order_at, function () {",
									"            pm.expect(invoice_obj.created_order_at.substring(0,19) == jsData.data.value_at.substring(0,19)).to.be.true;",
									"        });",
									"",
									"        pm.test(\"due_at of invoice correctly! \" + invoice_obj.due_at, function () {",
									"            pm.expect(invoice_obj.due_at.substring(0,19) == jsData.data.due_at.substring(0,19)).to.be.true;",
									"        });",
									"",
									"        pm.test(\"description of invoice correctly! \" + invoice_obj.description, function () {",
									"            pm.expect(invoice_obj.description == jsData.data.description).to.be.true;",
									"        });",
									"",
									"        pm.test(\"tax_type of invoice correctly! \" + invoice_obj.tax_type, function () {",
									"            pm.expect(invoice_obj.tax_type == jsData.data.tax_type).to.be.true;",
									"        });",
									"",
									"        // pm.test(\"taxes of invoice correctly! \" + invoice_obj.taxes, function () {",
									"        //     pm.expect(JSON.stringify(invoice_obj.taxes) == JSON.stringify(jsData.data.taxes)).to.be.true;",
									"        // });",
									"",
									"        pm.test(\"payment_config of invoice correctly! \" + invoice_obj.payment_config, function () {",
									"            pm.expect(JSON.stringify(invoice_obj.payment_config) == JSON.stringify(jsData.data.payment_config)).to.be.true;",
									"        });",
									"",
									"        pm.test(\"status of invoice correctly! \" + invoice_obj.status, function () {",
									"            pm.expect(invoice_obj.status == jsData.data.status).to.be.true;",
									"        });",
									"",
									"        // pm.test(\"discounts of invoice correctly! \" + invoice_obj.discounts, function () {",
									"        //     pm.expect(JSON.stringify(invoice_obj.discounts) == JSON.stringify(jsData.data.discounts)).to.be.true;",
									"        // });",
									"",
									"        testcase++;",
									"        pm.environment.set(\"C-testcase\",testcase);",
									"        pm.environment.set(\"C-invoice_obj\",invoice_obj);",
									"        postman.setNextRequest(\"get_list_invoice\"); // get_list_invoice",
									"        break;",
									"    default:",
									"        console.log(\"missing flow, end test\");",
									"        postman.setNextRequest(null);",
									"        break;",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finan_base_url}}/finan-ledger/api/v1/invoice/create",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"invoice",
								"create"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "buyer view",
			"item": [
				{
					"name": "buyer_view_invoice",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let invoice_obj = pm.environment.get(\"C-invoice_obj\");",
									"let system_code = invoice_obj.system_code;",
									"console.log(\"view detail invoice: \" + system_code);",
									"",
									"pm.environment.set(\"C-system_code\",system_code);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    console.log(\"Debug: \" + JSON.stringify(jsData));",
									"",
									"    let invoice_obj = pm.environment.get(\"C-invoice_obj\");",
									"    for(let i in invoice_obj.items){",
									"        for(let j in jsData.data.entry_items){",
									"            if(invoice_obj.items[i].product_id == jsData.data.entry_items[j].product_id){",
									"                invoice_obj.items[i].item_id = jsData.data.entry_items[j].id;",
									"                break;",
									"            }",
									"        }",
									"    }",
									"    pm.environment.set(\"C-invoice_obj\",invoice_obj);",
									"    ",
									"    pm.test(\"entry_code of invoice correctly! \" + invoice_obj.entry_code, function () {",
									"        pm.expect(invoice_obj.entry_code == jsData.data.entry_code).to.be.true;",
									"    });",
									"    ",
									"    if(invoice_obj.tax_type != \"price_including_tax\"){ // check sau cho case này",
									"        pm.test(\"sub_total_amount of invoice correctly! \" + invoice_obj.sub_total_amount, function () {",
									"            pm.expect(invoice_obj.sub_total_amount == jsData.data.sub_total_amount).to.be.true;",
									"        });",
									"    }",
									"",
									"    pm.test(\"contact_id of invoice correctly! \" + invoice_obj.contact_id, function () {",
									"        pm.expect(invoice_obj.contact_id == jsData.data.contact_id).to.be.true;",
									"    });",
									"",
									"    pm.test(\"email of invoice correctly! \" + invoice_obj.email, function () {",
									"        pm.expect(invoice_obj.email == jsData.data.email).to.be.true;",
									"    });",
									"",
									"    pm.test(\"created_order_at of invoice correctly! \" + invoice_obj.created_order_at, function () {",
									"        pm.expect(invoice_obj.created_order_at.substring(0,19) == jsData.data.value_at.substring(0,19)).to.be.true;",
									"    });",
									"",
									"    pm.test(\"due_at of invoice correctly! \" + invoice_obj.due_at, function () {",
									"        pm.expect(invoice_obj.due_at.substring(0,19) == jsData.data.due_at.substring(0,19)).to.be.true;",
									"    });",
									"",
									"    pm.test(\"description of invoice correctly! \" + invoice_obj.description, function () {",
									"        pm.expect(invoice_obj.description == jsData.data.description).to.be.true;",
									"    });",
									"",
									"    pm.test(\"tax_type of invoice correctly! \" + invoice_obj.tax_type, function () {",
									"        pm.expect(invoice_obj.tax_type == jsData.data.tax_type).to.be.true;",
									"    });",
									"",
									"    // pm.test(\"taxes of invoice correctly! \" + invoice_obj.taxes, function () {",
									"    //     pm.expect(JSON.stringify(invoice_obj.taxes) == JSON.stringify(jsData.data.taxes)).to.be.true;",
									"    // });",
									"",
									"    pm.test(\"payment_config of invoice correctly! \" + invoice_obj.payment_config, function () {",
									"        pm.expect(JSON.stringify(invoice_obj.payment_config) == JSON.stringify(jsData.data.payment_config)).to.be.true;",
									"    });",
									"",
									"    pm.test(\"status of invoice correctly! \" + invoice_obj.status, function () {",
									"        pm.expect(invoice_obj.status == jsData.data.status).to.be.true;",
									"    });",
									"",
									"    // final_status",
									"    if(testcase == 4){",
									"        let ranTimeCase = pm.environment.get(\"C-ranTimeCase\");",
									"        if(ranTimeCase == 2 || ranTimeCase == 3){",
									"            pm.test(\"final_status of invoice is unsent\", function () {",
									"                pm.expect(\"unsent\" == jsData.data.final_status).to.be.true;",
									"            });",
									"        } else {",
									"            pm.test(\"final_status of invoice is unsent\", function () {",
									"                pm.expect(\"overdue\" == jsData.data.final_status).to.be.true;",
									"            });",
									"        }",
									"    } else {",
									"        pm.test(\"final_status of invoice correctly! \" + invoice_obj.status, function () {",
									"            pm.expect(invoice_obj.status == jsData.data.final_status).to.be.true;",
									"        });",
									"    }",
									"",
									"    // pm.test(\"discounts of invoice correctly! \" + invoice_obj.discounts, function () {",
									"    //     pm.expect(JSON.stringify(invoice_obj.discounts) == JSON.stringify(jsData.data.discounts)).to.be.true;",
									"    // });",
									"",
									"    postman.setNextRequest(\"get_debt_amount\"); // get_report_cash_flow, get_list_posting, get_debt_amount",
									"} else {",
									"    console.log(\"Can't get internal contact detail, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{finan_base_url}}/finan-ledger/api/v1/{{C-business_id}}/invoice/{{C-system_code}}",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"{{C-business_id}}",
								"invoice",
								"{{C-system_code}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "posting",
			"item": [
				{
					"name": "get_list_posting",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let page = pm.environment.get(\"C-page\");",
									"",
									"if(!page){",
									"    page = 1;",
									"    pm.environment.set(\"C-page\",page);",
									"",
									"    let page_size = 500;",
									"    pm.environment.set(\"C-page_size\",page_size);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = JSON.parse(responseBody);",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let total_pages = jsData.meta.total_pages;",
									"    let page = pm.environment.get(\"C-page\");",
									"",
									"    let list_posting, old_list_posting;",
									"    switch(testcase){",
									"        case 2:",
									"            list_posting = pm.environment.get(\"C-list_posting\");",
									"            if(!list_posting){",
									"                list_posting = [];",
									"            }",
									"            break;",
									"        case 4: case 6:",
									"            old_list_posting = pm.environment.get(\"C-old_list_posting\");",
									"            if(!old_list_posting){",
									"                old_list_posting = pm.environment.get(\"C-list_posting\");",
									"                pm.environment.unset(\"C-list_posting\");",
									"                pm.environment.set(\"C-old_list_posting\",old_list_posting);",
									"            }",
									"",
									"            list_posting = pm.environment.get(\"C-list_posting\");",
									"            if(!list_posting){",
									"                list_posting = [];",
									"            }",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow\");",
									"            break;",
									"    }",
									"",
									"    for(let item in jsData.data){",
									"        list_posting[list_posting.length] = {",
									"            \"posting_id\":jsData.data[item].id,",
									"            \"account_id\":jsData.data[item].account_id,",
									"            \"amount\":jsData.data[item].amount,",
									"            \"branch_id\":jsData.data[item].branch_id,",
									"            \"created_at\":jsData.data[item].created_at,",
									"            \"currency\":jsData.data[item].currency,",
									"            \"deleted_at\":jsData.data[item].deleted_at,",
									"            \"is_credit\":jsData.data[item].is_credit,",
									"            \"is_final_status\":jsData.data[item].is_final_status,",
									"            \"object_id_ref\":jsData.data[item].object_id_ref,",
									"            \"object_id\":jsData.data[item].object_id,",
									"            \"object_type\":jsData.data[item].object_type,",
									"            // \"value_at\":jsData.data[item].value_at,",
									"            \"short_desc\":jsData.data[item].short_desc",
									"        }",
									"    }",
									"    pm.environment.set(\"C-list_posting\",list_posting);",
									"",
									"    if(page >= total_pages){",
									"        // must clear page & page_size",
									"        pm.environment.unset(\"C-page\");",
									"        pm.environment.unset(\"C-page_size\");",
									"",
									"        switch(testcase){",
									"            case 2:",
									"                pm.test(\"Got all posting! \" + list_posting.length, function () {",
									"                    pm.expect(list_posting.length > 0).to.be.true;",
									"                });",
									"",
									"                postman.setNextRequest(\"get_report_account_receivable_unpaid\"); // get_report_account_receivable_unpaid",
									"                break;",
									"            case 4:",
									"                // xử lý cho invoice",
									"                let invoice_obj = pm.environment.get(\"C-invoice_obj\");",
									"                console.log(\"invoice_obj: \",invoice_obj);",
									"                let account_discount = pm.environment.get(\"C-discount\");",
									"                let account_receivable = pm.environment.get(\"C-account_receivable\");",
									"                let list_expected_posting = [];",
									"                switch(invoice_obj.tax_type){",
									"                    case \"price_excluding_tax\":",
									"                        // sub_total_amount",
									"                        list_expected_posting[0] = {",
									"                            \"object_type\":\"invoice\",",
									"                            \"object_id\":invoice_obj.invoice_id,",
									"                            \"object_id_ref\":\"00000000-0000-0000-0000-000000000000\",",
									"                            \"account_id\":account_receivable.id,",
									"                            \"is_credit\":false,",
									"                            \"amount\":invoice_obj.total_amount,",
									"                            \"type\":\"account_receivable\"",
									"                        }",
									"                        // discount list (fix or %) => discount trên sub_total (nếu sau khi + tax thì phải update lại)",
									"                        for(let i in invoice_obj.discounts){",
									"                            if(invoice_obj.discounts[i].is_rate){",
									"                                for(let j in invoice_obj.items){",
									"                                    list_expected_posting[list_expected_posting.length] = {",
									"                                        \"object_type\":\"invoice\",",
									"                                        \"object_id\":invoice_obj.invoice_id,",
									"                                        \"object_id_ref\":invoice_obj.items[j].item_id,",
									"                                        \"account_id\":account_discount.id,",
									"                                        \"is_credit\":false,",
									"                                        \"amount\":(invoice_obj.items[j].amount*invoice_obj.items[j].quantity*invoice_obj.discounts[i].value/100).toFixed(2),",
									"                                        \"type\":\"discount_rate\"",
									"                                    }",
									"                                }",
									"                            } else {",
									"                                for(let j in invoice_obj.items){",
									"                                    list_expected_posting[list_expected_posting.length] = {",
									"                                        \"object_type\":\"invoice\",",
									"                                        \"object_id\":invoice_obj.invoice_id,",
									"                                        \"object_id_ref\":invoice_obj.items[j].item_id,",
									"                                        \"account_id\":account_discount.id,",
									"                                        \"is_credit\":false,",
									"                                        \"amount\":(invoice_obj.items[j].amount*invoice_obj.items[j].quantity*invoice_obj.discounts[i].value/invoice_obj.sub_total_amount).toFixed(2),",
									"                                        \"type\":\"discount_fix\"",
									"                                    }",
									"                                }",
									"                            }",
									"                        }",
									"                        // items(quantity, amount)",
									"                        for(let item in invoice_obj.items){",
									"                            list_expected_posting[list_expected_posting.length] = {",
									"                                \"object_type\":\"invoice\",",
									"                                \"object_id\":invoice_obj.invoice_id,",
									"                                \"object_id_ref\":invoice_obj.items[item].item_id,",
									"                                \"account_id\":invoice_obj.items[item].account_id,",
									"                                \"is_credit\":true,",
									"                                \"amount\":(invoice_obj.items[item].amount*invoice_obj.items[item].quantity).toFixed(2),",
									"                                \"type\":\"item\",",
									"                                \"name\":invoice_obj.items[item].name",
									"                            }",
									"                            // tax => tính trên sub_total của từng item (amount, quantity)",
									"                            for(let j in invoice_obj.items[item].taxes){",
									"                                list_expected_posting[list_expected_posting.length] = {",
									"                                    \"object_type\":\"invoice\",",
									"                                    \"object_id\":invoice_obj.invoice_id,",
									"                                    \"object_id_ref\":invoice_obj.items[item].item_id,",
									"                                    \"account_id\":invoice_obj.items[item].taxes[j].account_id,",
									"                                    \"is_credit\":true,",
									"                                    \"amount\":((invoice_obj.items[item].amount*invoice_obj.items[item].quantity - invoice_obj.items[item].discount_amount)*invoice_obj.items[item].taxes[j].rate/100).toFixed(2),",
									"                                    \"type\":\"item_tax\",",
									"                                    \"name\":invoice_obj.items[item].name,",
									"                                    \"tax_name\":invoice_obj.items[item].taxes[j].name",
									"                                }",
									"                            }",
									"                        }",
									"                        break;",
									"                    case \"price_including_tax\":",
									"                        // sub_total_amount",
									"                        list_expected_posting[0] = {",
									"                            \"object_type\":\"invoice\",",
									"                            \"object_id\":invoice_obj.invoice_id,",
									"                            \"object_id_ref\":\"00000000-0000-0000-0000-000000000000\",",
									"                            \"account_id\":account_receivable.id,",
									"                            \"is_credit\":false,",
									"                            \"amount\":invoice_obj.total_amount,",
									"                            \"type\":\"account_receivable\"",
									"                        }",
									"                        /**",
									"                         * discount list (fix or %) => discount trên sub_total (nếu sau khi + tax thì phải update lại)",
									"                         * invoice_obj.items[].item_total_discount => if discount is array that will update later",
									"                        */",
									"                        for(let i in invoice_obj.items){",
									"                            if(invoice_obj.discounts.length > 0){ // cần handle vòng loop nếu cần support nhiều hơn 1 discount",
									"                                list_expected_posting[list_expected_posting.length] = {",
									"                                    \"object_type\":\"invoice\",",
									"                                    \"object_id\":invoice_obj.invoice_id,",
									"                                    \"object_id_ref\":invoice_obj.items[i].item_id,",
									"                                    \"account_id\":account_discount.id,",
									"                                    \"is_credit\":false,",
									"                                    \"amount\":invoice_obj.items[i].item_total_discount,",
									"                                    \"type\":\"discount\"",
									"                                }",
									"                            }",
									"",
									"                            // items",
									"                            list_expected_posting[list_expected_posting.length] = {",
									"                                \"object_type\":\"invoice\",",
									"                                \"object_id\":invoice_obj.invoice_id,",
									"                                \"object_id_ref\":invoice_obj.items[i].item_id,",
									"                                \"account_id\":invoice_obj.items[i].account_id,",
									"                                \"is_credit\":true,",
									"                                \"amount\":invoice_obj.items[i].item_net_amount,",
									"                                \"type\":\"item\",",
									"                                \"name\":invoice_obj.items[i].name",
									"                            }",
									"",
									"                            // tax => tính trên sub_total của từng item (amount, quantity)",
									"                            for(let j in invoice_obj.items[i].taxes){",
									"                                list_expected_posting[list_expected_posting.length] = {",
									"                                    \"object_type\":\"invoice\",",
									"                                    \"object_id\":invoice_obj.invoice_id,",
									"                                    \"object_id_ref\":invoice_obj.items[i].item_id,",
									"                                    \"account_id\":invoice_obj.items[i].taxes[j].account_id,",
									"                                    \"is_credit\":true,",
									"                                    \"amount\":invoice_obj.items[i].taxes[j].amount,",
									"                                    \"type\":\"item_tax\",",
									"                                    \"name\":invoice_obj.items[i].name,",
									"                                    \"tax_name\":invoice_obj.items[i].taxes[j].name",
									"                                }",
									"                            }",
									"                        }",
									"                        break;",
									"                    case \"tax_not_applicable\":",
									"                        // sub_total_amount",
									"                        list_expected_posting[0] = {",
									"                            \"object_type\":\"invoice\",",
									"                            \"object_id\":invoice_obj.invoice_id,",
									"                            \"object_id_ref\":\"00000000-0000-0000-0000-000000000000\",",
									"                            \"account_id\":account_receivable.id,",
									"                            \"is_credit\":false,",
									"                            \"amount\":invoice_obj.total_amount,",
									"                            \"type\":\"account_receivable\"",
									"                        }",
									"                        // discount list (fix or %)",
									"                        for(let i in invoice_obj.discounts){",
									"                            if(invoice_obj.discounts[i].is_rate){",
									"                                for(let j in invoice_obj.items){",
									"                                    list_expected_posting[list_expected_posting.length] = {",
									"                                        \"object_type\":\"invoice\",",
									"                                        \"object_id\":invoice_obj.invoice_id,",
									"                                        \"object_id_ref\":invoice_obj.items[j].item_id,",
									"                                        \"account_id\":account_discount.id,",
									"                                        \"is_credit\":false,",
									"                                        \"amount\":invoice_obj.items[j].amount*invoice_obj.items[j].quantity*invoice_obj.discounts[i].value/100,",
									"                                        \"type\":\"discount_rate\"",
									"                                    }",
									"                                }",
									"                            } else {",
									"                                for(let j in invoice_obj.items){",
									"                                    list_expected_posting[list_expected_posting.length] = {",
									"                                        \"object_type\":\"invoice\",",
									"                                        \"object_id\":invoice_obj.invoice_id,",
									"                                        \"object_id_ref\":invoice_obj.items[j].item_id,",
									"                                        \"account_id\":account_discount.id,",
									"                                        \"is_credit\":false,",
									"                                        \"amount\":invoice_obj.items[j].amount*invoice_obj.items[j].quantity*invoice_obj.discounts[i].value/invoice_obj.sub_total_amount,",
									"                                        \"type\":\"discount_fix\"",
									"                                    }",
									"                                }",
									"                            }",
									"                        }",
									"                        // items(quantity, amount)",
									"                        for(let item in invoice_obj.items){",
									"                            list_expected_posting[list_expected_posting.length] = {",
									"                                \"object_type\":\"invoice\",",
									"                                \"object_id\":invoice_obj.invoice_id,",
									"                                \"object_id_ref\":invoice_obj.items[item].item_id,",
									"                                \"account_id\":invoice_obj.items[item].account_id,",
									"                                \"is_credit\":true,",
									"                                \"amount\":invoice_obj.items[item].amount*invoice_obj.items[item].quantity,",
									"                                \"type\":\"item\",",
									"                                \"name\":invoice_obj.items[item].name",
									"                            }",
									"                        }",
									"                        break;",
									"                    default:",
									"                        console.log(\"Missing tax_type\");",
									"                        break;",
									"                }",
									"                console.log(\"list_expected_posting: \" + JSON.stringify(list_expected_posting));",
									"",
									"                // xử lý cho act posting",
									"                let list_actual_posting = [];",
									"                for(let i in list_posting){",
									"                    if(list_posting[i].object_type == \"invoice\" && list_posting[i].object_id == invoice_obj.invoice_id){",
									"                        list_actual_posting[list_actual_posting.length] = {",
									"                            \"object_type\":list_posting[i].object_type,",
									"                            \"object_id\":list_posting[i].object_id,",
									"                            \"object_id_ref\":list_posting[i].object_id_ref,",
									"                            \"account_id\":list_posting[i].account_id,",
									"                            \"is_credit\":list_posting[i].is_credit,",
									"                            \"amount\":list_posting[i].amount",
									"                        }",
									"                    }",
									"                }",
									"                console.log(\"list_actual_posting: \" + JSON.stringify(list_actual_posting));",
									"",
									"                let count_record = list_expected_posting.length;",
									"                pm.test(\"Have \" + count_record + \" new records\", function () {",
									"                    console.log(\"old: \" + old_list_posting.length);",
									"                    console.log(\"new: \" + list_posting.length);",
									"                    pm.expect(list_posting.length == old_list_posting.length + count_record).to.be.true;",
									"                });",
									"                ",
									"                let count = 0;",
									"                let foundAll = false;",
									"",
									"                let credit_amount = 0, debit_amount = 0;",
									"                for(let i in list_actual_posting){",
									"                    if(list_actual_posting[i].is_credit){",
									"                        credit_amount += list_actual_posting[i].amount;",
									"                        // item amount & tax amount",
									"                        for(let j in list_expected_posting){",
									"                            if(list_expected_posting[j].is_credit){",
									"                                if(list_actual_posting[i].account_id == list_expected_posting[j].account_id && list_actual_posting[i].object_id_ref == list_expected_posting[j].object_id_ref){",
									"                                    count++;",
									"                                    if(\"tax_name\" in list_expected_posting[j]){",
									"                                        pm.test(\"Found tax \" + list_expected_posting[j].tax_name + \" in posting\", function () {",
									"                                            pm.expect(true).to.be.true;",
									"                                        });",
									"                                        pm.test(\"--- amount correctly \" + list_expected_posting[j].amount, function () {",
									"                                            console.log(\"act amount: \" + list_actual_posting[i].amount);",
									"                                            pm.expect(list_expected_posting[j].amount == list_actual_posting[i].amount).to.be.true;",
									"                                        });",
									"                                    } else {",
									"                                        pm.test(\"Found product \" + list_expected_posting[j].name + \" in posting\", function () {",
									"                                            pm.expect(true).to.be.true;",
									"                                        });",
									"                                        pm.test(\"--- amount correctly \" + list_expected_posting[j].amount, function () {",
									"                                            console.log(\"act amount: \" + list_actual_posting[i].amount);",
									"                                            pm.expect(list_expected_posting[j].amount == list_actual_posting[i].amount).to.be.true;",
									"                                        });",
									"                                    }",
									"                                    break;",
									"                                }",
									"                            }",
									"                        }",
									"                    } else {",
									"                        debit_amount += list_actual_posting[i].amount;",
									"                        for(let j in list_expected_posting){",
									"                            if(!list_expected_posting[j].is_credit){",
									"                                if(list_actual_posting[i].account_id == list_expected_posting[j].account_id && list_actual_posting[i].object_id_ref == list_expected_posting[j].object_id_ref){",
									"                                    count++;",
									"                                    switch(list_expected_posting[j].type){",
									"                                        case \"account_receivable\":",
									"                                            pm.test(\"Found product account_receivable in posting\", function () {",
									"                                                pm.expect(true).to.be.true;",
									"                                            });",
									"                                            pm.test(\"--- amount correctly \" + list_expected_posting[j].amount, function () {",
									"                                                console.log(\"act amount: \" + list_actual_posting[i].amount);",
									"                                                pm.expect(list_expected_posting[j].amount == list_actual_posting[i].amount).to.be.true;",
									"                                            });",
									"                                            break;",
									"                                        case \"discount_rate\":",
									"                                            pm.test(\"Found product discount_rate in posting\", function () {",
									"                                                pm.expect(true).to.be.true;",
									"                                            });",
									"                                            pm.test(\"--- amount correctly \" + list_expected_posting[j].amount, function () {",
									"                                                console.log(\"act amount: \" + list_actual_posting[i].amount);",
									"                                                pm.expect(list_expected_posting[j].amount == list_actual_posting[i].amount).to.be.true;",
									"                                            });",
									"                                            break;",
									"                                        case \"discount_fix\":",
									"                                            pm.test(\"Found product discount_fix in posting\", function () {",
									"                                                pm.expect(true).to.be.true;",
									"                                            });",
									"                                            pm.test(\"--- amount correctly \" + list_expected_posting[j].amount, function () {",
									"                                                console.log(\"act amount: \" + list_actual_posting[i].amount);",
									"                                                pm.expect(list_expected_posting[j].amount == list_actual_posting[i].amount).to.be.true;",
									"                                            });",
									"                                            break;",
									"                                        case \"discount\":",
									"                                            pm.test(\"Found product discount in posting\", function () {",
									"                                                pm.expect(true).to.be.true;",
									"                                            });",
									"                                            pm.test(\"--- amount correctly \" + list_expected_posting[j].amount, function () {",
									"                                                console.log(\"act amount: \" + list_actual_posting[i].amount);",
									"                                                pm.expect(list_expected_posting[j].amount == list_actual_posting[i].amount).to.be.true;",
									"                                            });",
									"                                            break;",
									"                                        default:",
									"                                            pm.test(\"Missing case\", function () {",
									"                                                pm.expect(false).to.be.true;",
									"                                            });",
									"                                            break;",
									"                                    }",
									"                                    break;",
									"                                }",
									"                            }",
									"                        }",
									"                    }",
									"",
									"                    if(count == count_record){",
									"                        foundAll = true;",
									"                        break;",
									"                    }",
									"                }",
									"",
									"                pm.test(\"Found all posting\", function () {",
									"                    pm.expect(foundAll).to.be.true;",
									"                });",
									"",
									"                pm.test(\"total credit_amount == total debit_amount\", function () {",
									"                    console.log(\"debit_amount: \" + debit_amount);",
									"                    console.log(\"credit_amount: \" + credit_amount);",
									"                    pm.expect(debit_amount == credit_amount).to.be.true;",
									"                });",
									"",
									"                // clear old data to update at next testcase",
									"                pm.environment.unset(\"C-old_list_posting\");",
									"",
									"                postman.setNextRequest(\"get_report_account_receivable_unpaid\"); // get_report_account_receivable_unpaid",
									"                break;",
									"            case 6:",
									"                pm.test(\"Nothing happen with total posting \" + old_list_posting.length, function () {",
									"                    console.log(\"act: \" + list_posting.length);",
									"                    pm.expect(list_posting.length == old_list_posting.length).to.be.true;",
									"                });",
									"",
									"                postman.setNextRequest(\"get_report_account_receivable_unpaid\"); // get_report_account_receivable_unpaid",
									"                break;",
									"            default:",
									"                console.log(\"Missing flow, end test\");",
									"                postman.setNextRequest(null);",
									"                break;",
									"        }",
									"    } else {",
									"        page++;",
									"        pm.environment.set(\"C-page\",page);",
									"",
									"        console.log(\"view next page (\" + page + \") to get more posting\");",
									"        postman.setNextRequest(\"get_list_posting\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get list posting, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{finan_base_url}}/finan-ledger/api/v1/posting/list?branch_id={{C-business_id}}&page={{C-page}}&page_size={{C-page_size}}&search=&sort=",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"posting",
								"list"
							],
							"query": [
								{
									"key": "branch_id",
									"value": "{{C-business_id}}"
								},
								{
									"key": "page",
									"value": "{{C-page}}"
								},
								{
									"key": "page_size",
									"value": "{{C-page_size}}"
								},
								{
									"key": "search",
									"value": ""
								},
								{
									"key": "sort",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "report",
			"item": [
				{
					"name": "get_report_account_receivable_paid",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// lấy full tháng hiện tại",
									"let today = new Date();",
									"let firstDay = new Date(today.getFullYear(), today.getMonth(), 1);",
									"let lastDay = new Date(today.getFullYear(), today.getMonth() + 1, 1);",
									"",
									"// lấy full tháng trước",
									"// let firstDay = new Date(today.getFullYear(), today.getMonth() - 1, 1);",
									"// let lastDay = new Date(today.getFullYear(), today.getMonth(), 1);",
									"",
									"// lấy full ngày hiện tại",
									"// let firstDay = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0 ,0, 0);",
									"// let lastDay = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 23, 59 ,59, 0);",
									"",
									"// lấy n ngày đến hiện tại",
									"// let firstDayTimestamp = Math.floor(firstDay.getTime()/1000) - 2*24*60*60;",
									"// let start_day_ago = new Date(firstDayTimestamp*1000);",
									"",
									"let start_time= firstDay.toISOString();",
									"let end_time= lastDay.toISOString();",
									"",
									"pm.environment.set(\"C-start_time\",start_time);",
									"pm.environment.set(\"C-end_time\",end_time);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"branch_id\": {{C-business_id}},\n    \"current_period_start\": \"{{C-start_time}}\",\n    \"current_period_end\": \"{{C-end_time}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finan_base_url}}/finan-ledger/api/v1/report/account-receivable-card-paid",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"report",
								"account-receivable-card-paid"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_report_account_receivable_unpaid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let unpaid_account_receivable = null;",
									"    try {",
									"        unpaid_account_receivable = jsData.data.unpaid_amount_lifetime_categories;",
									"    } catch {",
									"        console.log(\"Can't get data\");",
									"    }",
									"",
									"    switch(testcase){",
									"        case 2:",
									"            pm.test(\"Got unpaid_account_receivable data\", function () {",
									"                pm.environment.set(\"C-unpaid_account_receivable\",unpaid_account_receivable);",
									"                pm.expect(unpaid_account_receivable != null).to.be.true;",
									"            });",
									"",
									"            postman.setNextRequest(\"get_report_account_receivable_customer\"); //get_report_account_receivable_customer",
									"            break;",
									"        case 4:",
									"            let invoice_obj = pm.environment.get(\"C-invoice_obj\");",
									"            let old_data = pm.environment.get(\"C-unpaid_account_receivable\");",
									"            let total_amount = parseFloat(invoice_obj.total_amount);",
									"            console.log(\"total_amount: \" + (total_amount + old_data.unpaid_total));",
									"",
									"            // unpaid_total",
									"            pm.test(\"Total unpaid increase \" + total_amount, function () {",
									"                console.log(\"old: \" + old_data.unpaid_total);",
									"                console.log(\"new: \" + unpaid_account_receivable.unpaid_total);",
									"                pm.expect(unpaid_account_receivable.unpaid_total == total_amount + old_data.unpaid_total).to.be.true;",
									"            });",
									"",
									"            let due_date = new Date(invoice_obj.due_at);",
									"            let due_date_timestamp = Math.floor(due_date.getTime()/1000);",
									"            let today = new Date();",
									"            let today_timestamp = Math.floor(today.getTime()/1000);",
									"            let due_type;",
									"            console.log(\"debug: \" + (due_date_timestamp - today_timestamp));",
									"            if(due_date_timestamp > today_timestamp){",
									"                due_type = \"undue\";",
									"            } else {",
									"                if(today_timestamp - due_date_timestamp > 60*24*60*60){",
									"                    due_type = \"overdue_over\";",
									"                } else if (today_timestamp - due_date_timestamp > 30*24*60*60){",
									"                    due_type = \"overdue_between\";",
									"                } else {",
									"                    due_type = \"overdue_less\";",
									"                }",
									"            }",
									"            pm.environment.set(\"C-due_type\",due_type);",
									"",
									"            console.log(\"old: \",old_data);",
									"            console.log(\"new: \",unpaid_account_receivable);",
									"            switch(due_type){",
									"                case \"undue\":",
									"                    // unpaid_due",
									"                    pm.test(\"unpaid_due increase \" + total_amount, function () {",
									"                        console.log(\"old: \" + old_data.unpaid_due);",
									"                        console.log(\"expected: \" + (total_amount + old_data.unpaid_due));",
									"                        console.log(\"new: \" + unpaid_account_receivable.unpaid_due);",
									"                        pm.expect(unpaid_account_receivable.unpaid_due == total_amount + old_data.unpaid_due).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_less",
									"                    pm.test(\"nothing happen unpaid_overdue_less\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_less == old_data.unpaid_overdue_less).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_between",
									"                    pm.test(\"nothing happen unpaid_overdue_between\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_between == old_data.unpaid_overdue_between).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_over",
									"                    pm.test(\"nothing happen unpaid_overdue_over\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_over == old_data.unpaid_overdue_over).to.be.true;",
									"                    });",
									"                    break;",
									"                case \"overdue_less\":",
									"                    // unpaid_due",
									"                    pm.test(\"nothing happen unpaid_due\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_due == old_data.unpaid_due).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_less",
									"                    pm.test(\"unpaid_overdue_less increase \" + total_amount, function () {",
									"                        console.log(\"old: \" + old_data.unpaid_overdue_less);",
									"                        // console.log(\"expected: \" + (total_amount + old_data.unpaid_overdue_less));",
									"                        console.log(\"new: \" + unpaid_account_receivable.unpaid_overdue_less);",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_less == total_amount + old_data.unpaid_overdue_less).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_between",
									"                    pm.test(\"nothing happen unpaid_overdue_between\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_between == old_data.unpaid_overdue_between).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_over",
									"                    pm.test(\"nothing happen unpaid_overdue_over\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_over == old_data.unpaid_overdue_over).to.be.true;",
									"                    });",
									"                    break;",
									"                case \"overdue_between\":",
									"                    // unpaid_due",
									"                    pm.test(\"nothing happen unpaid_due\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_due == old_data.unpaid_due).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_less",
									"                    pm.test(\"nothing happen unpaid_overdue_less\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_less == old_data.unpaid_overdue_less).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_between",
									"                    pm.test(\"unpaid_overdue_between increase \" + total_amount, function () {",
									"                        console.log(\"old: \" + old_data.unpaid_overdue_between);",
									"                        console.log(\"new: \" + unpaid_account_receivable.unpaid_overdue_between);",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_between == total_amount + old_data.unpaid_overdue_between).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_over",
									"                    pm.test(\"nothing happen unpaid_overdue_over\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_over == old_data.unpaid_overdue_over).to.be.true;",
									"                    });",
									"                    break;",
									"                case \"overdue_over\":",
									"                    // unpaid_due",
									"                    pm.test(\"nothing happen unpaid_due\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_due == old_data.unpaid_due).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_less",
									"                    pm.test(\"nothing happen unpaid_overdue_less\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_less == old_data.unpaid_overdue_less).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_between",
									"                    pm.test(\"unpaid_overdue_between increase\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_between == old_data.unpaid_overdue_between).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_over",
									"                    pm.test(\"unpaid_overdue_over increase \" + total_amount, function () {",
									"                        console.log(\"old: \" + old_data.unpaid_overdue_over);",
									"                        console.log(\"new: \" + unpaid_account_receivable.unpaid_overdue_over);",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_over == total_amount + old_data.unpaid_overdue_over).to.be.true;",
									"                    });",
									"                    break;",
									"                default:",
									"                    pm.test(\"Missing due type\", function () {",
									"                        pm.expect(false).to.be.true;",
									"                    });",
									"                    break;",
									"            }",
									"",
									"            // update new data",
									"            pm.environment.set(\"C-unpaid_account_receivable\",unpaid_account_receivable);",
									"",
									"            postman.setNextRequest(\"get_report_account_receivable_customer\"); //get_report_account_receivable_customer",
									"            break;",
									"        case 6:",
									"            let old_unpaid_account_receivable = pm.environment.get(\"C-unpaid_account_receivable\");",
									"            pm.test(\"Nothing happen with unpaid_account_receivable\", function () {",
									"                pm.expect(JSON.stringify(unpaid_account_receivable) == JSON.stringify(old_unpaid_account_receivable)).to.be.true;",
									"            });",
									"",
									"            postman.setNextRequest(\"get_report_account_receivable_customer\"); //get_report_account_receivable_customer",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get report account receivable unpaid, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"branch_id\": {{C-business_id}},\n    \"due_days\": 30\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finan_base_url}}/finan-ledger/api/v1/report/account-receivable-card-unpaid",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"report",
								"account-receivable-card-unpaid"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_report_account_receivable_customer",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let page = pm.environment.get(\"C-page\");",
									"",
									"if(!page){",
									"    page = 1;",
									"    pm.environment.set(\"C-page\",page);",
									"",
									"    let page_size = 100;",
									"    pm.environment.set(\"C-page_size\",page_size);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = JSON.parse(responseBody);",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let total_pages = jsData.meta.total_pages;",
									"    let page = pm.environment.get(\"C-page\");",
									"",
									"    let list_report_customer, old_list_report_customer;",
									"    switch(testcase){",
									"        case 2:",
									"            list_report_customer = pm.environment.get(\"C-list_report_customer\");",
									"            if(!list_report_customer){",
									"                list_report_customer = [];",
									"            }",
									"            break;",
									"        case 4: case 6:",
									"            old_list_report_customer = pm.environment.get(\"C-old_list_report_customer\");",
									"            if(!old_list_report_customer){",
									"                old_list_report_customer = pm.environment.get(\"C-list_report_customer\");",
									"                pm.environment.unset(\"C-list_report_customer\");",
									"                pm.environment.set(\"C-old_list_report_customer\",old_list_report_customer);",
									"            }",
									"",
									"            list_report_customer = pm.environment.get(\"C-list_report_customer\");",
									"            if(!list_report_customer){",
									"                list_report_customer = [];",
									"            }",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow\");",
									"            break;",
									"    }",
									"",
									"    for(let item in jsData.data){",
									"        list_report_customer[list_report_customer.length] = {",
									"            \"contact_id\":jsData.data[item].contact_id,",
									"            \"unpaid_total\":jsData.data[item].unpaid_total,",
									"            \"unpaid_due\":jsData.data[item].unpaid_due,",
									"            \"unpaid_overdue_less\":jsData.data[item].unpaid_overdue_less,",
									"            \"unpaid_overdue_between\":jsData.data[item].unpaid_overdue_between,",
									"            \"unpaid_overdue_over\":jsData.data[item].unpaid_overdue_over,",
									"            \"full_count\":jsData.data[item].full_count,",
									"            \"contact_name\":jsData.data[item].contact_info.contact_name,",
									"            \"contact_phone\":jsData.data[item].contact_info.contact_phone",
									"        }",
									"    }",
									"    pm.environment.set(\"C-list_report_customer\",list_report_customer);",
									"",
									"    if(page >= total_pages){",
									"        // must clear page & page_size",
									"        pm.environment.unset(\"C-page\");",
									"        pm.environment.unset(\"C-page_size\");",
									"",
									"        let contact_id = pm.environment.get(\"C-contact_id\");",
									"        let invoice_obj = pm.environment.get(\"C-invoice_obj\");",
									"        let total_amount;",
									"        let isFound = false, hasRecord = false;",
									"        switch(testcase){",
									"            case 2:",
									"                pm.test(\"Got all record! \" + list_report_customer.length, function () {",
									"                    pm.expect(list_report_customer.length > 0).to.be.true;",
									"                });",
									"",
									"                postman.setNextRequest(\"get_report_account_receivable_invoice\"); // get_report_account_receivable_invoice",
									"                break;",
									"            case 4:",
									"                total_amount = parseFloat(invoice_obj.total_amount);",
									"                let record_obj = null;",
									"                let inList = false;",
									"                for(let i in old_list_report_customer){",
									"                    if(old_list_report_customer[i].contact_id == contact_id){",
									"                        inList = true;",
									"                        record_obj = old_list_report_customer[i];",
									"                        break;",
									"                    }",
									"                }",
									"",
									"                if(inList){",
									"                    pm.test(\"Nothing happen with total record\", function () {",
									"                        pm.expect(list_report_customer.length == old_list_report_customer.length).to.be.true;",
									"                    });",
									"                } else {",
									"                    pm.test(\"Total record increase 1\", function () {",
									"                        pm.expect(list_report_customer.length == old_list_report_customer.length + 1).to.be.true;",
									"                    });",
									"                    record_obj = {",
									"                        \"contact_id\":invoice_obj.contact_id,",
									"                        \"unpaid_total\":0,",
									"                        \"unpaid_due\":0,",
									"                        \"unpaid_overdue_less\":0,",
									"                        \"unpaid_overdue_between\":0,",
									"                        \"unpaid_overdue_over\":0,",
									"                        \"full_count\":0,",
									"                        \"contact_name\":null,",
									"                        \"contact_phone\":null",
									"                    }",
									"                }",
									"",
									"                let due_type = pm.environment.get(\"C-due_type\");",
									"                for(let i in list_report_customer){",
									"                    if(list_report_customer[i].contact_id == contact_id){",
									"                        isFound = true;",
									"                        console.log(\"Found \" + list_report_customer[i].contact_name + ' - ' + list_report_customer[i].contact_phone);",
									"                        ",
									"                        pm.test(\"unpaid_total increase \" + total_amount, function () {",
									"                            console.log(\"old: \" + record_obj.unpaid_total);",
									"                            console.log(\"expected: \" + (record_obj.unpaid_total + total_amount));",
									"                            console.log(\"new: \" + list_report_customer[i].unpaid_total);",
									"                            pm.expect(list_report_customer[i].unpaid_total.toFixed(2) == (record_obj.unpaid_total + total_amount).toFixed(2)).to.be.true;",
									"                        });",
									"",
									"                        switch(due_type){",
									"                            case \"undue\":",
									"                                // unpaid_due",
									"                                pm.test(\"unpaid_due increase \" + total_amount, function () {",
									"                                    console.log(\"old: \" + record_obj.unpaid_due);",
									"                                    console.log(\"new: \" + list_report_customer[i].unpaid_due);",
									"                                    pm.expect(list_report_customer[i].unpaid_due.toFixed(2) == (record_obj.unpaid_due + total_amount).toFixed(2)).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_less",
									"                                pm.test(\"nothing happen unpaid_overdue_less\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_less == record_obj.unpaid_overdue_less).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_between",
									"                                pm.test(\"nothing happen unpaid_overdue_between\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_between == record_obj.unpaid_overdue_between).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_over",
									"                                pm.test(\"nothing happen unpaid_overdue_over\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_over == record_obj.unpaid_overdue_over).to.be.true;",
									"                                });",
									"                                break;",
									"                            case \"overdue_less\":",
									"                                // unpaid_due",
									"                                pm.test(\"nothing happen unpaid_due\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_due == record_obj.unpaid_due).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_less",
									"                                pm.test(\"unpaid_overdue_less increase \" + total_amount, function () {",
									"                                    console.log(\"old: \" + record_obj.unpaid_overdue_less);",
									"                                    console.log(\"new: \" + list_report_customer[i].unpaid_overdue_less);",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_less.toFixed(2) == (total_amount + record_obj.unpaid_overdue_less).toFixed(2)).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_between",
									"                                pm.test(\"nothing happen unpaid_overdue_between\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_between == record_obj.unpaid_overdue_between).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_over",
									"                                pm.test(\"nothing happen unpaid_overdue_over\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_over == record_obj.unpaid_overdue_over).to.be.true;",
									"                                });",
									"                                break;",
									"                            case \"overdue_between\":",
									"                                // unpaid_due",
									"                                pm.test(\"nothing happen unpaid_due\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_due == record_obj.unpaid_due).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_less",
									"                                pm.test(\"nothing happen unpaid_overdue_less\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_less == record_obj.unpaid_overdue_less).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_between",
									"                                pm.test(\"unpaid_overdue_between increase \" + total_amount, function () {",
									"                                    console.log(\"old: \" + record_obj.unpaid_overdue_between);",
									"                                    console.log(\"new: \" + list_report_customer[i].unpaid_overdue_between);",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_between.toFixed(2) == (total_amount + record_obj.unpaid_overdue_between).toFixed(2)).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_over",
									"                                pm.test(\"nothing happen unpaid_overdue_over\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_over == record_obj.unpaid_overdue_over).to.be.true;",
									"                                });",
									"                                break;",
									"                            case \"overdue_over\":",
									"                                // unpaid_due",
									"                                pm.test(\"nothing happen unpaid_due\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_due == record_obj.unpaid_due).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_less",
									"                                pm.test(\"nothing happen unpaid_overdue_less\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_less == record_obj.unpaid_overdue_less).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_between",
									"                                pm.test(\"unpaid_overdue_between increase\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_between == record_obj.unpaid_overdue_between).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_over",
									"                                pm.test(\"unpaid_overdue_over increase \" + total_amount, function () {",
									"                                    console.log(\"old: \" + record_obj.unpaid_overdue_over);",
									"                                    console.log(\"new: \" + list_report_customer[i].unpaid_overdue_over);",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_over.toFixed(2) == (total_amount + record_obj.unpaid_overdue_over).toFixed(2)).to.be.true;",
									"                                });",
									"                                break;",
									"                            default:",
									"                                pm.test(\"Missing due type\", function () {",
									"                                    pm.expect(false).to.be.true;",
									"                                });",
									"                                break;",
									"                        }",
									"                        break;",
									"                    }",
									"                }",
									"",
									"                pm.test(\"Found new product\", function () {",
									"                    pm.expect(isFound).to.be.true;",
									"                });",
									"",
									"                // clear old data to update at next case",
									"                pm.environment.unset(\"C-old_list_report_customer\");",
									"",
									"                postman.setNextRequest(\"get_report_account_receivable_invoice\"); // get_report_account_receivable_invoice",
									"                break;",
									"            case 6:",
									"               pm.test(\"Nothing happen with total record: \" + list_report_customer.length, function () {",
									"                    // should check contact_id data",
									"                    pm.expect(list_report_customer.length == old_list_report_customer.length).to.be.true;",
									"                });",
									"",
									"                loop:",
									"                for(let j in old_list_report_customer){",
									"                    if(old_list_report_customer[j].contact_id == contact_id){",
									"                        for(let i in list_report_customer){",
									"                            if(list_report_customer[i].contact_id == contact_id){",
									"                                pm.test(\"Nothing happen with data\", function () {",
									"                                    pm.expect(JSON.stringify(list_report_customer[i]) == JSON.stringify(old_list_report_customer[j])).to.be.true;",
									"                                });",
									"                                isFound = true;",
									"                                hasRecord = true;",
									"                                break loop;",
									"                            }",
									"                        }",
									"                        break;",
									"                    }",
									"                }",
									"",
									"                if(!isFound){",
									"                    for(let i in list_report_customer){",
									"                        if(list_report_customer[i].contact_id == contact_id){",
									"                            hasRecord = true;",
									"                            break;",
									"                        }",
									"                    }",
									"                }",
									"",
									"                // console.log(\"hasRecord: \" + hasRecord);",
									"                // console.log(\"isFound: \" + isFound);",
									"                if(hasRecord){",
									"                    pm.test(\"Found data record\", function () {",
									"                        pm.expect(isFound).to.be.true;",
									"                    });",
									"                } else {",
									"                    pm.test(\"Checked data record\", function () {",
									"                        pm.expect(isFound).to.be.false;",
									"                    });",
									"                }",
									"",
									"                postman.setNextRequest(\"get_report_account_receivable_invoice\"); // get_report_account_receivable_invoice",
									"                break;",
									"            default:",
									"                console.log(\"Missing flow, end test\");",
									"                postman.setNextRequest(null);",
									"                break;",
									"        }",
									"    } else {",
									"        page++;",
									"        pm.environment.set(\"C-page\",page);",
									"",
									"        console.log(\"view next page (\" + page + \") to get more product\");",
									"        postman.setNextRequest(\"get_report_account_receivable_customer\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get list product, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"branch_id\": {{C-business_id}},\n    \"due_days\": 30,\n    \"page\": {{C-page}},\n    \"page_size\": {{C-page_size}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finan_base_url}}/finan-ledger/api/v1/report/account-receivable-customer-unpaid",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"report",
								"account-receivable-customer-unpaid"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_report_account_receivable_invoice",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let page = pm.environment.get(\"C-page\");",
									"",
									"if(!page){",
									"    page = 1;",
									"    pm.environment.set(\"C-page\",page);",
									"",
									"    let page_size = 300;",
									"    pm.environment.set(\"C-page_size\",page_size);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = JSON.parse(responseBody);",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let total_pages = jsData.meta.total_pages;",
									"    let page = pm.environment.get(\"C-page\");",
									"",
									"    let list_report_invoice, old_list_report_invoice;",
									"    switch(testcase){",
									"        case 2:",
									"            list_report_invoice = pm.environment.get(\"C-list_report_invoice\");",
									"            if(!list_report_invoice){",
									"                list_report_invoice = [];",
									"            }",
									"            break;",
									"        case 4: case 6:",
									"            old_list_report_invoice = pm.environment.get(\"C-old_list_report_invoice\");",
									"            if(!old_list_report_invoice){",
									"                old_list_report_invoice = pm.environment.get(\"C-list_report_invoice\");",
									"                pm.environment.unset(\"C-list_report_invoice\");",
									"                pm.environment.set(\"C-old_list_report_invoice\",old_list_report_invoice);",
									"            }",
									"",
									"            list_report_invoice = pm.environment.get(\"C-list_report_invoice\");",
									"            if(!list_report_invoice){",
									"                list_report_invoice = [];",
									"            }",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow\");",
									"            break;",
									"    }",
									"",
									"    for(let item in jsData.data){",
									"        list_report_invoice[list_report_invoice.length] = {",
									"            \"invoice_id\":jsData.data[item].id,",
									"            \"entry_code\":jsData.data[item].entry_code,",
									"            \"contact_id\":jsData.data[item].contact_id,",
									"            \"contact_name\":jsData.data[item].contact_info.contact_name,",
									"            \"contact_phone\":jsData.data[item].contact_info.contact_phone,",
									"            \"invoice_created_date\":jsData.data[item].invoice_created_date,",
									"            \"invoice_due_date\":jsData.data[item].invoice_due_date,",
									"            \"unpaid_total\":jsData.data[item].unpaid_total,",
									"            \"unpaid_due\":jsData.data[item].unpaid_due,",
									"            \"unpaid_overdue_less\":jsData.data[item].unpaid_overdue_less,",
									"            \"unpaid_overdue_between\":jsData.data[item].unpaid_overdue_between,",
									"            \"unpaid_overdue_over\":jsData.data[item].unpaid_overdue_over",
									"        }",
									"    }",
									"    pm.environment.set(\"C-list_report_invoice\",list_report_invoice);",
									"    console.log(\"debug list_report_invoice: \" + list_report_invoice.length);",
									"",
									"    if(page >= total_pages){",
									"        // must clear page & page_size",
									"        pm.environment.unset(\"C-page\");",
									"        pm.environment.unset(\"C-page_size\");",
									"",
									"        switch(testcase){",
									"            case 2:",
									"                pm.test(\"Got all record! \" + list_report_invoice.length, function () {",
									"                    pm.expect(list_report_invoice.length > 0).to.be.true;",
									"                });",
									"",
									"                postman.setNextRequest(\"report_invoice_overdue\"); // report_invoice_overdue",
									"                break;",
									"            case 4:",
									"                let invoice_obj = pm.environment.get(\"C-invoice_obj\");",
									"",
									"                pm.test(\"Total record increase 1\", function () {",
									"                    console.log(\"old: \" + list_report_invoice.length);",
									"                    console.log(\"new: \" + old_list_report_invoice.length);",
									"                    pm.expect(list_report_invoice.length == old_list_report_invoice.length + 1).to.be.true;",
									"                });",
									"",
									"                let isFound = false;",
									"                let due_type = pm.environment.get(\"C-due_type\");",
									"                for(let i in list_report_invoice){",
									"                    if(list_report_invoice[i].invoice_id == invoice_obj.invoice_id){",
									"                        isFound = true;",
									"                        console.log(\"Found \" + list_report_invoice[i].entry_code + ' of ' + list_report_invoice[i].contact_name);",
									"                        ",
									"                        pm.test(\"unpaid_total correctly \" + invoice_obj.total_amount, function () {",
									"                            pm.expect(list_report_invoice[i].unpaid_total == invoice_obj.total_amount).to.be.true;",
									"                        });",
									"",
									"                        pm.test(\"invoice_created_date correctly \" + invoice_obj.created_order_at, function () {",
									"                            pm.expect(list_report_invoice[i].invoice_created_date == invoice_obj.created_order_at).to.be.true;",
									"                        });",
									"",
									"                        pm.test(\"invoice_due_date correctly \" + invoice_obj.due_at, function () {",
									"                            pm.expect(list_report_invoice[i].invoice_due_date == invoice_obj.due_at).to.be.true;",
									"                        });",
									"",
									"                        switch(due_type){",
									"                            case \"undue\":",
									"                                // unpaid_due",
									"                                pm.test(\"unpaid_due > 0 \" + list_report_invoice[i].unpaid_due, function () {",
									"                                    pm.expect(list_report_invoice[i].unpaid_due > 0).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_less",
									"                                pm.test(\"unpaid_overdue_less == 0\", function () {",
									"                                    pm.expect(list_report_invoice[i].unpaid_overdue_less == 0).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_between",
									"                                pm.test(\"unpaid_overdue_between == 0\", function () {",
									"                                    pm.expect(list_report_invoice[i].unpaid_overdue_between == 0).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_over",
									"                                pm.test(\"unpaid_overdue_over == 0\", function () {",
									"                                    pm.expect(list_report_invoice[i].unpaid_overdue_over == 0).to.be.true;",
									"                                });",
									"                                break;",
									"                            case \"overdue_less\":",
									"                                // unpaid_due",
									"                                pm.test(\"unpaid_due == 0\", function () {",
									"                                    pm.expect(list_report_invoice[i].unpaid_due == 0).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_less",
									"                                pm.test(\"unpaid_overdue_less > 0 \" + list_report_invoice[i].unpaid_overdue_less, function () {",
									"                                    pm.expect(list_report_invoice[i].unpaid_overdue_less > 0).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_between",
									"                                pm.test(\"unpaid_overdue_between == 0\", function () {",
									"                                    pm.expect(list_report_invoice[i].unpaid_overdue_between == 0).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_over",
									"                                pm.test(\"unpaid_overdue_over == 0\", function () {",
									"                                    pm.expect(list_report_invoice[i].unpaid_overdue_over == 0).to.be.true;",
									"                                });",
									"                                break;",
									"                            case \"overdue_between\":",
									"                                // unpaid_due",
									"                                pm.test(\"unpaid_due == 0\", function () {",
									"                                    pm.expect(list_report_invoice[i].unpaid_due == 0).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_less",
									"                                pm.test(\"unpaid_overdue_less == 0\", function () {",
									"                                    pm.expect(list_report_invoice[i].unpaid_overdue_less == 0).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_between",
									"                                pm.test(\"unpaid_overdue_between > 0 \" + list_report_invoice[i].unpaid_overdue_between, function () {",
									"                                    pm.expect(list_report_invoice[i].unpaid_overdue_between > 0).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_over",
									"                                pm.test(\"unpaid_overdue_over == 0\", function () {",
									"                                    pm.expect(list_report_invoice[i].unpaid_overdue_over == 0).to.be.true;",
									"                                });",
									"                                break;",
									"                            case \"overdue_over\":",
									"                                // unpaid_due",
									"                                pm.test(\"unpaid_due == 0\", function () {",
									"                                    pm.expect(list_report_invoice[i].unpaid_due == 0).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_less",
									"                                pm.test(\"unpaid_overdue_less == 0\", function () {",
									"                                    pm.expect(list_report_invoice[i].unpaid_overdue_less == 0).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_between",
									"                                pm.test(\"unpaid_overdue_between == 0\", function () {",
									"                                    pm.expect(list_report_invoice[i].unpaid_overdue_between == 0).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_over",
									"                                pm.test(\"unpaid_overdue_over > 0 \" + list_report_invoice[i].unpaid_overdue_over, function () {",
									"                                    pm.expect(list_report_invoice[i].unpaid_overdue_over > 0).to.be.true;",
									"                                });",
									"                                break;",
									"                            default:",
									"                                pm.test(\"Missing due type\", function () {",
									"                                    pm.expect(false).to.be.true;",
									"                                });",
									"                                break;",
									"                        }",
									"                        break;",
									"                    }",
									"                }",
									"",
									"                pm.test(\"Found new invoice\", function () {",
									"                    pm.expect(isFound).to.be.true;",
									"                });",
									"",
									"                // clear old data to update at next testcase",
									"                pm.environment.unset(\"C-old_list_report_invoice\");",
									"",
									"                postman.setNextRequest(\"report_invoice_overdue\"); // report_invoice_overdue",
									"                break;",
									"            case 6:",
									"                // check data",
									"                pm.test(\"Nothing happen with total record: \" + list_report_invoice.length, function () {",
									"                    pm.expect(list_report_invoice.length == old_list_report_invoice.length).to.be.true;",
									"                });",
									"",
									"                postman.setNextRequest(\"report_invoice_overdue\"); // report_invoice_overdue",
									"                break;",
									"            default:",
									"                console.log(\"Missing flow, end test\");",
									"                postman.setNextRequest(null);",
									"                break;",
									"        }",
									"    } else {",
									"        page++;",
									"        pm.environment.set(\"C-page\",page);",
									"",
									"        console.log(\"view next page (\" + page + \") to get more product\");",
									"        postman.setNextRequest(\"get_report_account_receivable_invoice\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get list product, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"branch_id\": {{C-business_id}},\n    \"due_days\": 30,\n    \"page\": {{C-page}},\n    \"page_size\": {{C-page_size}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finan_base_url}}/finan-ledger/api/v1/report/account-receivable-invoice-unpaid",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"report",
								"account-receivable-invoice-unpaid"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "home-report",
			"item": [
				{
					"name": "todo",
					"item": [
						{
							"name": "report_invoice_overdue",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"/**",
											" * Nếu invoice dc tạo ra là overdue => tăng lên 1, ngược lại thì ko tăng",
											" */",
											"",
											"let testcase = pm.environment.get(\"C-testcase\");",
											"console.log(\"Testcase: \" + testcase);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsData = pm.response.json();",
											"if(pm.response.code == 200){",
											"    let testcase = pm.environment.get(\"C-testcase\");",
											"    let total_number_overdue_invoice = null;",
											"    try {",
											"        total_number_overdue_invoice = jsData.data.total_number_overdue_invoice;",
											"    } catch {",
											"        console.log(\"Can't get data\");",
											"    }",
											"",
											"    let old_total_number_overdue_invoice = pm.environment.get(\"C-total_number_overdue_invoice\");",
											"    switch(testcase){",
											"        case 2:",
											"            pm.test(\"Got total_number_overdue_invoice \" + total_number_overdue_invoice, function () {",
											"                pm.environment.set(\"C-total_number_overdue_invoice\",total_number_overdue_invoice);",
											"                pm.expect(total_number_overdue_invoice != null).to.be.true;",
											"            });",
											"",
											"            postman.setNextRequest(\"report_account_receivable_payable_lifetime\"); //report_account_receivable_payable_lifetime",
											"            break;",
											"        case 4:",
											"            let ranTimeCase = pm.environment.get(\"C-ranTimeCase\");",
											"            ",
											"            if(ranTimeCase == 2 || ranTimeCase == 3){",
											"                pm.test(\"Nothing happen with total_number_overdue_invoice!\", function () {",
											"                    pm.expect(total_number_overdue_invoice == old_total_number_overdue_invoice).to.be.true;",
											"                });",
											"            } else {",
											"                pm.test(\"total_number_overdue_invoice increase 1\", function () {",
											"                    pm.expect(total_number_overdue_invoice == old_total_number_overdue_invoice + 1).to.be.true;",
											"                });",
											"            }",
											"",
											"            // cần lưu lại total vì có thay đổi",
											"            pm.environment.set(\"C-total_number_overdue_invoice\",total_number_overdue_invoice);",
											"",
											"            postman.setNextRequest(\"report_account_receivable_payable_lifetime\"); // report_account_receivable_payable_lifetime",
											"            break;",
											"        case 6:",
											"            pm.test(\"Nothing happen with total_number_overdue_invoice!\", function () {",
											"                pm.expect(total_number_overdue_invoice == old_total_number_overdue_invoice).to.be.true;",
											"            });",
											"",
											"            postman.setNextRequest(\"report_account_receivable_payable_lifetime\"); // report_account_receivable_payable_lifetime",
											"            break;",
											"        default:",
											"            console.log(\"Missing flow, end test\");",
											"            postman.setNextRequest(null);",
											"            break;",
											"    }",
											"} else {",
											"    console.log(\"Can't get report account receivable unpaid, end test\",jsData);",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-location-timezone",
										"value": "UTC+07:00",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{C-userToken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"branch_id\": {{C-business_id}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{finan_base_url}}/finan-ledger/api/v1/report/to-do-overdue-invoice-lifetime",
									"host": [
										"{{finan_base_url}}"
									],
									"path": [
										"finan-ledger",
										"api",
										"v1",
										"report",
										"to-do-overdue-invoice-lifetime"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "receivable_account",
					"item": [
						{
							"name": "report_account_receivable_payable_lifetime",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let testcase = pm.environment.get(\"C-testcase\");",
											"console.log(\"Testcase: \" + testcase);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsData = pm.response.json();",
											"if(pm.response.code == 200){",
											"    let testcase = pm.environment.get(\"C-testcase\");",
											"    let account_receivable_payable = null;",
											"    try {",
											"        account_receivable_payable = jsData.data;",
											"    } catch {",
											"        console.log(\"Can't get data\");",
											"    }",
											"",
											"    let old_account_receivable_payable = pm.environment.get(\"C-account_receivable_payable\");",
											"    switch(testcase){",
											"        case 2:",
											"            pm.test(\"Got account_receivable_payable\", function () {",
											"                console.log(\"account_receivable_payable: \",account_receivable_payable);",
											"                pm.environment.set(\"C-account_receivable_payable\",account_receivable_payable);",
											"                pm.expect(account_receivable_payable != null).to.be.true;",
											"            });",
											"",
											"            postman.setNextRequest(\"get_list_invoice\"); // get_list_invoice",
											"            break;",
											"        case 4:",
											"            let invoice_obj = pm.environment.get(\"C-invoice_obj\");",
											"            let total_amount = parseFloat(invoice_obj.total_amount);",
											"            pm.test(\"account_receivable_payable.total_unpaid increase \" + total_amount, function () {",
											"                console.log(\"act: \" + jsData.data.total_unpaid);",
											"                console.log(\"old: \" + old_account_receivable_payable.total_unpaid);",
											"                pm.expect(account_receivable_payable.total_unpaid == old_account_receivable_payable.total_unpaid + total_amount).to.be.true;",
											"            });",
											"",
											"            pm.test(\"nothing happen with account_receivable_payable.total_payable\", function () {",
											"                console.log(\"act: \" + jsData.data.total_payable);",
											"                pm.expect(account_receivable_payable.total_payable == old_account_receivable_payable.total_payable).to.be.true;",
											"            });",
											"",
											"            // có thay đổi nên cần lưu lại",
											"            pm.environment.set(\"C-account_receivable_payable\",account_receivable_payable);",
											"",
											"            testcase++;",
											"            pm.environment.set(\"C-testcase\",testcase);",
											"            postman.setNextRequest(\"create_invoice\"); // create_invoice",
											"            break;",
											"        case 6:",
											"            pm.test(\"Nothing happen with account_receivable_payable\", function () {",
											"                console.log(\"account_receivable_payable: \",account_receivable_payable);",
											"                pm.expect(JSON.stringify(account_receivable_payable) == JSON.stringify(old_account_receivable_payable)).to.be.true;",
											"            });",
											"",
											"            console.log(\"--- End Testsuite 12 ---\");",
											"            postman.setNextRequest(null);",
											"            break;",
											"        default:",
											"            console.log(\"Missing flow, end test\");",
											"            postman.setNextRequest(null);",
											"            break;",
											"    }",
											"} else {",
											"    console.log(\"Can't get report account receivable unpaid, end test\",jsData);",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-location-timezone",
										"value": "UTC+07:00",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{C-userToken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"branch_id\": {{C-business_id}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{finan_base_url}}/finan-ledger/api/v1/report/account-receivable-payable-lifetime",
									"host": [
										"{{finan_base_url}}"
									],
									"path": [
										"finan-ledger",
										"api",
										"v1",
										"report",
										"account-receivable-payable-lifetime"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	]
}