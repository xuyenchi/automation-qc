{
	"info": {
		"_postman_id": "524b6343-9302-4fa8-b2ea-60c5cda2763f",
		"name": "finan_10_verify_to_delete_invoice",
		"description": "### Testsuite: Verify to delete invoice\n\n###### Testcase:\n\n1. Login with owner account\n2. Get data\n    \n    1. invoice / get list invoice => get total invoice, choice invoice need delete\n        \n    2. transaction / get list transaction => get all transaction link with invoice, include:\n        \n        1. manual transactions\n            \n        2. qr bank_transfer / va transactions\n            \n    3. payment / get list payment => get all payment link with invoice\n        \n    4. posting / get list posting => get all posting with:\n        \n        1. type \"invoice\" & respective invoice_id\n            \n        2. type \"transaction\" & respective transaction_id => add type manual/bank\n            \n    5. contact / get list contact => get contact respective with invoice 2.a\n        \n    6. contact / get dept amount => get dept amount of this contact\n        \n    7. account coa / get list account => link account name respective with list posting\n        \n    8. account cash_n_bank / get list bank account => get all account link with transaction & respective total_balance_amount\n        \n    9. report / get report account receivable - card unpaid (lifetime) => get list respective with every option(s)\n        \n    10. report / get report account receivable - card paid (start - end) => get total\n        \n    11. report / get report account receivable - customer => get data with 5 options (due, less, between, over and total)\n        \n    12. report / get report account receivable - invoice => the same customer with more 3 data (due_date, create_date, contact_id)\n        \n    13. home / todo / invoice overdue => get data\n        \n    14. home / todo / uncategory tnx => get data\n        \n    15. home / receivable account / receivable & payable => get data\n        \n    16. home/ cash flow / cash flow period => get data\n        \n    17. home / profit n loss / profit loss period => get data\n        \n    18. home / account receivable / receivable payable => get data\n        \n    19. reminder / get list reminder => get all reminder link with invoice (active or all)\n        \n3. Delete invoice\n    \n4. Check data\n    \n    1. invoice / list invoice => decrease 1\n    2. invoice / invoice detail => display error 404\n    3. buyer view / buyer view invoice detail => display error 404\n    4. ~~contact / contact detail => debt_amount updated~~\n    5. account cash_n_bank/ account detail => update correctly (check all account relation with this invoice)\n    6. transaction / get list transaction => decrease all transaction link with this invoice (expect bank_transfer transaction)\n    7. reminder / get list reminder => decrease all reminder link with this invoice\n    8. payment / get list payment => decrease all payment link with this invoice (expect bank_transfer transaction)\n    9. posting / list posting => remove all posting respective with (invoice, transaction) (expect bank_transfer transaction)\n    10. report / get report account receivable - card unpaid => update correctly\n    11. report / get report account receivable - card paid => nothing happen\n    12. report / get report account receivable - customer => update correctly\n    13. report / get report account receivable - invoice => update correctly\n    14. home / todo / get invoice due => update correctly\n    15. home / todo / guncategory tnx => update correctly\n    16. home / receivable account / get account receivable => update correctly\n    17. home/ cash flow / cash flow period => update data\n    18. home / profit n loss / profit loss period => update data\n    19. home / account receivable / receivable payable => update data\n\n###### Note:\n\n- Reminder, payment, transaction => can get detail to check is_delete\n- Hiện tại dept amount của KH lấy từ SBH nên chưa xử lý data này",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "282640"
	},
	"item": [
		{
			"name": "authen",
			"item": [
				{
					"name": "verify_email_or_phone_number",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/**",
									" * currently, manual to create account pwd & use charles to get it",
									" * default pwd created: 21112007 (prod with default account & no need pwd)",
									" */",
									"",
									"let email = pm.environment.get(\"SER-email\");",
									"let phone_number = pm.environment.get(\"SER-phone_number\");",
									"",
									"console.log(\"--- Start Testsuite 10 ---\");",
									"let testcase = 1;",
									"",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let isPhone = true;",
									"",
									"let payload;",
									"if(isPhone){",
									"    console.log(\"login with phone_number: \" + phone_number);",
									"    payload = {",
									"        \"phone_number\": phone_number",
									"    }",
									"} else {",
									"    console.log(\"login with email: \" + email);",
									"    payload = {",
									"        \"email\": email",
									"    }",
									"}",
									"",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));",
									"pm.environment.set(\"C-testcase\",testcase);",
									"pm.environment.set(\"C-isPhone\",isPhone);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ====================================== parser cURL with method",
									"function parseCURL(request_api){",
									"    let curl = \"\";",
									"    if(request_api.method == \"PUT\"){",
									"        curl = \"curl --location --request PUT \";",
									"    } else {",
									"        curl = \"curl --location \";",
									"    }",
									"    curl += \"'\" + request_api.url.protocol + \"://\"",
									"    for(let i in request_api.url.host){",
									"        if(i >= request_api.url.host.length - 1){",
									"            curl += request_api.url.host[i] + \"/\";",
									"        } else {",
									"            curl += request_api.url.host[i] + \".\";",
									"        }",
									"    }",
									"    for(let i in request_api.url.path){",
									"        if(i >= request_api.url.path.length - 1){",
									"            curl += request_api.url.path[i] + \"' \";",
									"        } else {",
									"            curl += request_api.url.path[i] + \"/\";",
									"        }",
									"    }",
									"    for(let i in request_api.header){",
									"        if(i >= request_api.header.length - 1){",
									"            curl += \"--header '\" + request_api.header[i].key + \": \" + request_api.header[i].value + \"'\";",
									"        } else {",
									"            curl += \"--header '\" + request_api.header[i].key + \": \" + request_api.header[i].value + \"' \";",
									"        }",
									"    }",
									"    switch(request_api.method){",
									"        case \"POST\":",
									"            curl += \" --data '\" + request_api.body.raw + \"'\"",
									"            break;",
									"        case \"PUT\":",
									"            curl += \" --data-raw '\" + request_api.body.raw + \"'\"",
									"            break;",
									"        default:",
									"            break;",
									"    }",
									"    console.log(curl);",
									"    return curl;",
									"}",
									"const request_api = pm.request.toJSON();",
									"parseCURL(request_api);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    let jsData = pm.response.json();",
									"",
									"    if(jsData.data.is_existed && jsData.data.has_password){",
									"        postman.setNextRequest(\"login_with_pwd\"); // login_with_pwd",
									"    } else if(jsData.data.is_existed) {",
									"        console.log(\"This account doesn't create pwd, please manual create!!!\");",
									"        postman.setNextRequest(null);",
									"    } else {",
									"        console.log(\"Error:\", JSON.stringify(jsData));",
									"        console.log(\"THIS ACCOUNT IS NOT EXISTED IN SYSTEM, WILL MANUAL CREATE IT\");",
									"        postman.setNextRequest(null);",
									"    }",
									"} else {",
									"    console.log(\"Error, end test\");",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finan_base_url}}/finan-user/api/v1/auth/account/verify",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-user",
								"api",
								"v1",
								"auth",
								"account",
								"verify"
							]
						}
					},
					"response": []
				},
				{
					"name": "login_with_pwd",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// let crypto = require('crypto-js');",
									"",
									"// const algorithm = \"aes-256-gcm\";",
									"// const IV_LEN = 12;",
									"// const AUTH_TAG_LEN = 16;",
									"// const SECRET_KEY = \"7dQ0HwRI5okvwAK0WzxaW6ABFncjeu1E\";",
									"",
									"// function encrypt(message) {",
									"//   const iv = Buffer.from(crypto.randomBytes(IV_LEN));",
									"//   const cipher = crypto.createCipheriv(algorithm, SECRET_KEY, iv, {",
									"//     authTagLength: AUTH_TAG_LEN,",
									"//   });",
									"//   const encryptedData = Buffer.concat([cipher.update(message), cipher.final()]);",
									"//   const authTag = cipher.getAuthTag();",
									"//   const raw = Buffer.concat([iv, encryptedData, authTag]).toString(\"hex\");",
									"//   return raw;",
									"// }",
									"",
									"// const pwd = \"21112007\";",
									"// // var superSecretEncrypted = CryptoJS.AES.encrypt(pwd, SECRET_KEY);",
									"",
									"// let pwd_enc = encrypt(pwd);",
									"// console.log(\"pwd_enc: \" + pwd_enc);",
									"",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"let isPhone = pm.environment.get(\"C-isPhone\");",
									"",
									"let verify_payload = JSON.parse(pm.environment.get(\"C-payload\"));",
									"",
									"let payload;",
									"let version = pm.environment.get(\"x-current-version\");",
									"if(isPhone){",
									"    payload = {",
									"        \"phone_number\": verify_payload.phone_number,",
									"        \"pwd\": pm.environment.get(\"pwd\"),",
									"        \"platform\": \"gtapp\",",
									"        \"device_id\": \"C9102FC6-466C-4980-B795-A91A2FD7F97F\",",
									"        \"app_version\": version,",
									"        \"device_name\": \"iPhone\"",
									"    }",
									"} else {",
									"    payload = {",
									"        \"email\": verify_payload.email,",
									"        \"pwd\": pm.environment.get(\"pwd\"),",
									"        \"platform\": \"gtapp\",",
									"        \"device_id\": \"C9102FC6-466C-4980-B795-A91A2FD7F97F\",",
									"        \"app_version\": version,",
									"        \"device_name\": \"iPhone\"",
									"    }",
									"}",
									"console.log(\"debug: \", payload);",
									"",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    let jsData = pm.response.json();",
									"    // debug",
									"    // console.log(JSON.stringify(jsData));",
									"",
									"    let business_id = null;",
									"    try{",
									"        business_id = jsData.data.business_info.list_business[0].business_id;",
									"    } catch{",
									"        console.log(\"This is new user, must create business_id\");",
									"    }",
									"",
									"    let userToken = jsData.data.token;",
									"    pm.environment.set(\"C-userToken\",userToken);",
									"",
									"    if(business_id == null){",
									"        console.log(\"This user don't have store, please check & use another account\");",
									"        ",
									"        postman.setNextRequest(null);",
									"    } else {",
									"        let userRefreshToken = jsData.data.refresh_token;",
									"",
									"        let userInfo = {",
									"            \"role_name\":jsData.data.business_info.current_role.role_name,",
									"            \"is_owner\":jsData.data.business_info.current_role.is_owner,",
									"            \"user_name\":jsData.data.business_info.list_business[0].user_name,",
									"            \"business_id\":business_id",
									"        }",
									"",
									"        // show log",
									"        // console.log(\"userToken:\",userToken);",
									"        // console.log(\"userRefreshToken:\",userRefreshToken);",
									"        console.log(\"userInfo:\",JSON.stringify(userInfo));",
									"",
									"        pm.environment.set(\"C-userRefreshToken\",userRefreshToken);",
									"        pm.environment.set(\"C-userInfo\",userInfo);",
									"        pm.environment.set(\"C-business_id\",business_id); // business_id",
									"",
									"        let testcase = pm.environment.get(\"C-testcase\");",
									"        testcase++;",
									"        pm.environment.set(\"C-testcase\",testcase);",
									"        postman.setNextRequest(\"get_branch_id\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get Token, end test\");",
									"",
									"    // debug",
									"    let jsData = pm.response.json();",
									"    console.log(\"data:\",JSON.stringify(jsData));",
									"",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finan_base_url}}/finan-user/api/v1/auth/account/login",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-user",
								"api",
								"v1",
								"auth",
								"account",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_branch_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let branch_id = null;",
									"    try {",
									"        branch_id = jsData.data.id;",
									"    } catch {",
									"        console.log(\"Can't get branch_id\");",
									"    }",
									"",
									"    pm.test(\"Got branch_id\", function () {",
									"        pm.expect(branch_id != null).to.be.true;",
									"    });",
									"",
									"    if(branch_id != null){",
									"        pm.environment.set(\"C-business_id\",branch_id);",
									"        postman.setNextRequest(\"get_list_invoice\"); // get_list_invoice",
									"    } else {",
									"        postman.setNextRequest(null);",
									"    }",
									"} else {",
									"    console.log(\"Can't get Token, end test\", jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{finan_base_url}}/finan-business/api/v1/branch/detail/{{C-business_id}}",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-business",
								"api",
								"v1",
								"branch",
								"detail",
								"{{C-business_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "invoice",
			"item": [
				{
					"name": "get_list_invoice",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ============================= random number between min and max",
									"function getRandomInt(min, max) {",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = JSON.parse(responseBody);",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let total_pages = jsData.meta.total_pages;",
									"    let page = pm.environment.get(\"C-page\");",
									"",
									"    let list_invoice, old_list_invoice;",
									"    switch(testcase){",
									"        case 2:",
									"            list_invoice = pm.environment.get(\"C-list_invoice\");",
									"            if(!list_invoice){",
									"                list_invoice = [];",
									"            }",
									"            break;",
									"        case 4:",
									"            old_list_invoice = pm.environment.get(\"C-old_list_invoice\");",
									"            if(!old_list_invoice){",
									"                old_list_invoice = pm.environment.get(\"C-list_invoice\");",
									"                pm.environment.unset(\"C-list_invoice\");",
									"                pm.environment.set(\"C-old_list_invoice\",old_list_invoice);",
									"            }",
									"",
									"            list_invoice = pm.environment.get(\"C-list_invoice\");",
									"            if(!list_invoice){",
									"                list_invoice = [];",
									"            }",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow\");",
									"            break;",
									"    }",
									"",
									"    // let today = new Date();",
									"    // let timestamp = Math.floor(today.getTime()/1000);",
									"    // let yesterdate_tmp = timestamp - 24*60*60;",
									"    // let yesterday = new Date(yesterdate_tmp*1000);",
									"    let test_date = new Date(\"2024-03-24\"); // lấy invoice từ 24",
									"    for(let item in jsData.data){",
									"        // console.log(\"Invoice \" + jsData.data[item].entry_code + \" with final_status \" + jsData.data[item].final_status);",
									"        if(new Date(jsData.data[item].created_at) > test_date){",
									"            // console.log(\"Invoice \" + jsData.data[item].entry_code + \" with created_at \" + jsData.data[item].created_at);",
									"            list_invoice[list_invoice.length] = {",
									"                \"invoice_id\":jsData.data[item].id,",
									"                \"created_at\":jsData.data[item].created_at,",
									"                \"entry_code\":jsData.data[item].entry_code,",
									"                \"system_code\":jsData.data[item].system_code,",
									"                \"status\":jsData.data[item].status,",
									"                \"final_status\":jsData.data[item].final_status,",
									"                \"payment_status\":jsData.data[item].payment_status,",
									"                \"sub_total_amount\":jsData.data[item].sub_total_amount,",
									"                \"total_amount\":jsData.data[item].total_amount,",
									"                \"discount_amount\":jsData.data[item].discount_amount,",
									"                \"total_tax_amount\":jsData.data[item].total_tax_amount,",
									"                \"due_amount\":jsData.data[item].due_amount,",
									"                \"paid_amount\":jsData.data[item].paid_amount,",
									"                \"currency\":jsData.data[item].currency,",
									"                \"contact_id\":jsData.data[item].contact_id,",
									"                \"entry_type\":jsData.data[item].entry_type,",
									"                \"description\":jsData.data[item].description,",
									"                \"value_at\":jsData.data[item].value_at,",
									"                \"due_at\":jsData.data[item].due_at,",
									"                \"send_at\":jsData.data[item].send_at,",
									"                \"account_id\":jsData.data[item].account_id,",
									"                \"tax_type\":jsData.data[item].tax_type",
									"            }",
									"        }",
									"    }",
									"    pm.environment.set(\"C-list_invoice\",list_invoice);",
									"",
									"    if(page >= total_pages){",
									"        // must clear page & page_size",
									"        pm.environment.unset(\"C-page\");",
									"        pm.environment.unset(\"C-page_size\");",
									"",
									"        let invoice_delete_obj;",
									"        switch(testcase){",
									"            case 2:",
									"                pm.test(\"Got all invoice! \" + list_invoice.length, function () {",
									"                    pm.expect(list_invoice.length > 0).to.be.true;",
									"                });",
									"",
									"                //",
									"                let delete_invoice_status;",
									"                switch(getRandomInt(1,4)){ // getRandomInt(1,4)",
									"                    case 1:",
									"                        console.log(\"delete draft invoice\");",
									"                        delete_invoice_status = \"draft\";",
									"                        break;",
									"                    case 2:",
									"                        console.log(\"delete unsent invoice\");",
									"                        delete_invoice_status = \"unsent\";",
									"                        break;",
									"                    case 3:",
									"                        console.log(\"delete partial_paid invoice\");",
									"                        delete_invoice_status = \"partial_paid\";",
									"                        break;",
									"                    case 4:",
									"                        console.log(\"delete paid invoice\");",
									"                        delete_invoice_status = \"fully_paid\";",
									"                        break;",
									"                    case 5:",
									"                        console.log(\"delete sent invoice\");",
									"                        delete_invoice_status = \"sent\";",
									"                        break;",
									"                    default:",
									"                        console.log(\"delete overdue invoice\");",
									"                        delete_invoice_status = \"overdue\";",
									"                        break;",
									"                }",
									"",
									"                for(let i in list_invoice){",
									"                    if((list_invoice[i].final_status == delete_invoice_status || list_invoice[i].payment_status == delete_invoice_status)){ // && list_invoice[i].system_code == \"DOIM3J9X\"",
									"                        invoice_delete_obj = list_invoice[i];",
									"                        break;",
									"                    }",
									"                }",
									"",
									"                if(invoice_delete_obj != null){",
									"                    pm.environment.set(\"C-invoice_delete_obj\",invoice_delete_obj);",
									"                    // pm.environment.set(\"C-invoice_id\",invoice_delete_obj.invoice_id);",
									"",
									"                    console.log(\"=============================================\");",
									"                    console.log(\"Will delete invoice: \", invoice_delete_obj);",
									"                    console.log(\"=============================================\");",
									"",
									"                    postman.setNextRequest(\"get_list_transaction\"); // get_list_transaction",
									"                } else {",
									"                    pm.test(\"Can't find invoice with respective status, end test\", function () {",
									"                        pm.expect(true).to.be.false;",
									"                    });",
									"",
									"                    postman.setNextRequest(null);",
									"                }",
									"                break;",
									"            case 4:",
									"                invoice_delete_obj = pm.environment.get(\"C-invoice_delete_obj\");",
									"",
									"                pm.test(\"total invoice decrease 1 - \" + list_invoice.length, function () {",
									"                    pm.expect(list_invoice.length == old_list_invoice.length - 1).to.be.true;",
									"                });",
									"",
									"                let isFound = false;",
									"                for(let i in list_invoice){",
									"                    if(list_invoice[i].invoice_id == invoice_delete_obj.invoice_id){",
									"                        isFound = true;",
									"                        break;",
									"                    }",
									"                }",
									"",
									"                pm.test(\"Removed invoice \" + invoice_delete_obj.invoice_id, function () {",
									"                    pm.expect(isFound).to.be.false;",
									"                });",
									"",
									"                postman.setNextRequest(\"get_invoice_detail\"); // get_invoice_detail",
									"                break;",
									"            default:",
									"                console.log(\"Missing flow, end test\");",
									"                postman.setNextRequest(null);",
									"                break;",
									"        }",
									"    } else {",
									"        page++;",
									"        pm.environment.set(\"C-page\",page);",
									"",
									"        console.log(\"view next page (\" + page + \") to get more product\");",
									"        postman.setNextRequest(\"get_list_invoice\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get list product, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let page = pm.environment.get(\"C-page\");",
									"",
									"if(!page){",
									"    page = 1;",
									"    pm.environment.set(\"C-page\",page);",
									"",
									"    let page_size = 500;",
									"    pm.environment.set(\"C-page_size\",page_size);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{finan_base_url}}/finan-ledger/api/v1/invoice/list?branch_id={{C-business_id}}&page={{C-page}}&page_size={{C-page_size}}",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"invoice",
								"list"
							],
							"query": [
								{
									"key": "branch_id",
									"value": "{{C-business_id}}"
								},
								{
									"key": "page",
									"value": "{{C-page}}"
								},
								{
									"key": "page_size",
									"value": "{{C-page_size}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get_invoice_detail",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 400){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    console.log(\"Debug: \" + JSON.stringify(jsData));",
									"",
									"    postman.setNextRequest(\"buyer_view_invoice\"); // buyer_view_invoice",
									"} else {",
									"    console.log(\"Can view detail of invoice that deleted, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{finan_base_url}}/finan-ledger/api/v1/invoice/detail/{{C-invoice_id}}?branch_id={{C-business_id}}",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"invoice",
								"detail",
								"{{C-invoice_id}}"
							],
							"query": [
								{
									"key": "branch_id",
									"value": "{{C-business_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "delete_invoice",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ====================================== parser cURL",
									"function parseCURL(request_api){",
									"    let curl = \"\";",
									"    if(request_api.method == \"PUT\"){",
									"        curl = \"curl --location --request PUT \";",
									"    } else if(request_api.method == \"DELETE\"){",
									"        curl = \"curl --location --request DELETE \";",
									"    } else {",
									"        curl = \"curl --location \";",
									"    }",
									"    curl += \"'\" + request_api.url.protocol + \"://\"",
									"    // host",
									"    for(let i in request_api.url.host){",
									"        if(i >= request_api.url.host.length - 1){",
									"            curl += request_api.url.host[i] + \"/\";",
									"        } else {",
									"            curl += request_api.url.host[i] + \".\";",
									"        }",
									"    }",
									"    // path",
									"    for(let i in request_api.url.path){",
									"        if(i >= request_api.url.path.length - 1){",
									"            curl += request_api.url.path[i];",
									"        } else {",
									"            curl += request_api.url.path[i] + \"/\";",
									"        }",
									"    }",
									"    // query (if have)",
									"    if(\"query\" in request_api.url){",
									"        curl += \"? \";",
									"        for(let i in request_api.url.query){",
									"            if(i >= request_api.url.query.length - 1){",
									"                curl += request_api.url.query[i].key + \"=\" + request_api.url.query[i].value + \"' \";",
									"            } else {",
									"                curl += request_api.url.query[i].key + \"=\" + request_api.url.query[i].value + \"&\";",
									"            }",
									"        }",
									"    } else {",
									"        curl += \"' \";",
									"    }",
									"    // header",
									"    for(let i in request_api.header){",
									"        if(i >= request_api.header.length - 1){",
									"            curl += \"--header '\" + request_api.header[i].key + \": \" + request_api.header[i].value + \"'\";",
									"        } else {",
									"            curl += \"--header '\" + request_api.header[i].key + \": \" + request_api.header[i].value + \"' \";",
									"        }",
									"    }",
									"    switch(request_api.method){",
									"        case \"POST\":",
									"            curl += \" --data '\" + request_api.body.raw + \"'\"",
									"            break;",
									"        case \"PUT\":",
									"            curl += \" --data-raw '\" + request_api.body.raw + \"'\"",
									"            break;",
									"        case \"DELETE\":",
									"            curl += \" --data '\" + request_api.body.raw + \"'\"",
									"            break;",
									"        default:",
									"            break;",
									"    }",
									"    console.log(curl);",
									"    return curl;",
									"}",
									"const request_api = pm.request.toJSON();",
									"parseCURL(request_api);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    ",
									"    testcase++;",
									"    pm.environment.set(\"C-testcase\",testcase);",
									"    postman.setNextRequest(\"get_list_invoice\"); // get_list_invoice",
									"} else {",
									"    console.log(\"Can't delete invoice, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"branch_id\":{{C-business_id}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finan_base_url}}​/finan-ledger/api/v1/invoice/delete/{{C-invoice_id}}",
							"host": [
								"{{finan_base_url}}​"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"invoice",
								"delete",
								"{{C-invoice_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "buyer view",
			"item": [
				{
					"name": "buyer_view_invoice",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let invoice_delete_obj = pm.environment.get(\"C-invoice_delete_obj\");",
									"let system_code = invoice_delete_obj.system_code;",
									"console.log(\"view detail invoice: \" + system_code);",
									"",
									"pm.environment.set(\"C-system_code\",system_code);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 400){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    console.log(\"Debug: \" + JSON.stringify(jsData));",
									"",
									"    postman.setNextRequest(\"get_list_payment_account\"); // get_list_payment_account",
									"} else {",
									"    console.log(\"Can't get buyer view invoice, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{finan_base_url}}/finan-ledger/api/v1/{{C-business_id}}/invoice/{{C-system_code}}",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"{{C-business_id}}",
								"invoice",
								"{{C-system_code}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "transaction",
			"item": [
				{
					"name": "get_list_transaction",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let page = pm.environment.get(\"C-page\");",
									"",
									"if(!page){",
									"    page = 1;",
									"    pm.environment.set(\"C-page\",page);",
									"",
									"    let page_size = 100;",
									"    pm.environment.set(\"C-page_size\",page_size);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = JSON.parse(responseBody);",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let total_pages = jsData.meta.total_pages;",
									"    let page = pm.environment.get(\"C-page\");",
									"",
									"    let total_tnx = null;",
									"    try {",
									"        total_tnx = jsData.meta.total_rows;",
									"    } catch {",
									"        console.log(\"Can't get total tnx\");",
									"    }",
									"",
									"    let invoice_delete_obj = pm.environment.get(\"C-invoice_delete_obj\");",
									"    let list_delete_tnx, list_tnx;",
									"    switch(testcase){",
									"        case 2:",
									"            list_delete_tnx = pm.environment.get(\"C-list_delete_tnx\");",
									"            if(!list_delete_tnx){",
									"                list_delete_tnx = [];",
									"            }",
									"",
									"            for(let item in jsData.data){",
									"                if(jsData.data[item].object_type == \"invoice\" && jsData.data[item].object_key == invoice_delete_obj.invoice_id){",
									"                    list_delete_tnx[list_delete_tnx.length] = {",
									"                        \"tnx_id\":jsData.data[item].id,",
									"                        \"amount\":jsData.data[item].amount,",
									"                        \"currency\":jsData.data[item].currency,",
									"                        \"contact_id\":jsData.data[item].contact_id,",
									"                        \"payment_method\":jsData.data[item].payment_method,",
									"                        \"txn_type\":jsData.data[item].txn_type,",
									"                        \"description\":jsData.data[item].description,",
									"                        \"value_at\":jsData.data[item].value_at,",
									"                        \"object_type\":jsData.data[item].object_type,",
									"                        \"object_key\":jsData.data[item].object_key,",
									"                        \"account_id\":jsData.data[item].account_id,",
									"                        \"category_id\":jsData.data[item].category_id,",
									"                        \"is_txn_bank\":jsData.data[item].is_txn_bank,",
									"                        \"account_name\":jsData.data[item].account.name,",
									"                        \"category_name\":jsData.data[item].category.name,",
									"                        \"entry\":jsData.data[item].entry",
									"                    }",
									"                }",
									"            }",
									"            pm.environment.set(\"C-list_delete_tnx\",list_delete_tnx);",
									"            break;",
									"        case 4:",
									"            list_tnx = pm.environment.get(\"C-list_tnx\");",
									"            if(!list_tnx){",
									"                list_tnx = [];",
									"            }",
									"",
									"            // console.log(\"Debug 1\");",
									"            for(let item in jsData.data){",
									"                list_tnx[list_tnx.length] = {",
									"                    \"tnx_id\":jsData.data[item].id,",
									"                    \"amount\":jsData.data[item].amount,",
									"                    \"currency\":jsData.data[item].currency,",
									"                    \"contact_id\":jsData.data[item].contact_id,",
									"                    \"payment_method\":jsData.data[item].payment_method,",
									"                    \"txn_type\":jsData.data[item].txn_type,",
									"                    \"description\":jsData.data[item].description,",
									"                    \"value_at\":jsData.data[item].value_at,",
									"                    \"object_type\":jsData.data[item].object_type,",
									"                    \"object_key\":jsData.data[item].object_key,",
									"                    \"account_id\":jsData.data[item].account_id,",
									"                    \"category_id\":jsData.data[item].category_id,",
									"                    \"is_txn_bank\":jsData.data[item].is_txn_bank,",
									"                    \"entry\":jsData.data[item].entry",
									"                }",
									"            }",
									"            // console.log(\"Debug 2\");",
									"            pm.environment.set(\"C-list_tnx\",list_tnx);",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow\");",
									"            break;",
									"    }",
									"",
									"    if(page >= total_pages){",
									"        // must clear page & page_size",
									"        pm.environment.unset(\"C-page\");",
									"        pm.environment.unset(\"C-page_size\");",
									"",
									"        switch(testcase){",
									"            case 2:",
									"                pm.test(\"Got total tnx! \" + total_tnx, function () {",
									"                    pm.expect(total_tnx > 0).to.be.true;",
									"                });",
									"",
									"                pm.test(\"Got total tnx linked with invoice \" + invoice_delete_obj.entry_code, function () {",
									"                    console.log(\"list_delete_tnx: \", list_delete_tnx);",
									"                    pm.expect(list_delete_tnx.length > 0).to.be.true;",
									"                });",
									"                pm.environment.set(\"C-total_tnx\",total_tnx);",
									"",
									"                postman.setNextRequest(\"get_list_posting\"); // get_list_payment, get_list_posting",
									"                break;",
									"            case 4:",
									"                let old_total_tnx = pm.environment.get(\"C-total_tnx\");",
									"                list_delete_tnx = pm.environment.get(\"C-list_delete_tnx\");",
									"",
									"                let uncategorized_income_obj = pm.environment.get(\"C-uncategorized_income_obj\");",
									"                console.log(\"uncategorized_income_obj: \",uncategorized_income_obj);",
									"                let count_bank_tnx = 0, decrease_tnx = 0;",
									"                for(let i in list_delete_tnx){",
									"                    let isFound_i = false;",
									"                    if(list_delete_tnx[i].is_txn_bank){",
									"                        // phải còn tồn tại tnx bank",
									"                        count_bank_tnx++;",
									"                        for(let j in list_tnx){",
									"                            if(list_tnx[j].tnx_id == list_delete_tnx[i].tnx_id){",
									"                                isFound_i = true;",
									"                                // đầu category_id sẽ đổi từ Account Receivable qua Uncategorized Income",
									"                                pm.test(\"category_id update to : \" + uncategorized_income_obj.id + \"(\" + uncategorized_income_obj.name + \")\", function () {",
									"                                    console.log(\"act: \" + list_tnx[j].category_id);",
									"                                    pm.expect(list_tnx[j].category_id == uncategorized_income_obj.id).to.be.true;",
									"                                });",
									"                                break;",
									"                            }",
									"                        }",
									"",
									"                        pm.test(\"Found bank tnx - account_name: \" + list_delete_tnx[i].account_name, function () {",
									"                            pm.expect(isFound_i).to.be.true;",
									"                        });",
									"                    } else {",
									"                        // phải remove tnx manual",
									"                        decrease_tnx++;",
									"                        for(let j in list_tnx){",
									"                            if(list_tnx[j].tnx_id == list_delete_tnx[i].tnx_id){",
									"                                isFound_i = true;",
									"                                break;",
									"                            }",
									"                        }",
									"",
									"                        pm.test(\"removed manual tnx - account_name: \" + list_delete_tnx[i].account_name, function () {",
									"                            pm.expect(isFound_i).to.be.false;",
									"                        });",
									"                    }",
									"                }",
									"",
									"                pm.test(\"Total tnx decrease \" + decrease_tnx, function () {",
									"                    console.log(\"Actual: \" + total_tnx);",
									"                    console.log(\"Expected: \" + (old_total_tnx - decrease_tnx));",
									"                    pm.expect(total_tnx == old_total_tnx - decrease_tnx).to.be.true;",
									"                });",
									"",
									"                pm.test(\"Check all tnx\", function () {",
									"                    pm.expect(list_delete_tnx.length == count_bank_tnx + decrease_tnx).to.be.true;",
									"                });",
									"",
									"                postman.setNextRequest(\"get_list_reminder_of_invoice\"); // get_list_reminder_of_invoice",
									"                break;",
									"            default:",
									"                console.log(\"Missing flow, end test\");",
									"                postman.setNextRequest(null);",
									"                break;",
									"        }",
									"    } else {",
									"        page++;",
									"        pm.environment.set(\"C-page\",page);",
									"",
									"        console.log(\"view next page (\" + page + \") to get more transaction\");",
									"        postman.setNextRequest(\"get_list_transaction\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get list tnx, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{finan_base_url}}/finan-ledger/api/v1/transaction/list?branch_id={{C-business_id}}&page={{C-page}}&page_size={{C-page_size}}&sort",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"transaction",
								"list"
							],
							"query": [
								{
									"key": "branch_id",
									"value": "{{C-business_id}}"
								},
								{
									"key": "page",
									"value": "{{C-page}}"
								},
								{
									"key": "page_size",
									"value": "{{C-page_size}}"
								},
								{
									"key": "sort",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get_transaction_detail",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"let tnx_id = tnx_obj.tnx_id;",
									"console.log(\"view detail tnx: \" + tnx_id);",
									"",
									"pm.environment.set(\"C-tnx_id\",tnx_id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    // let testcase = pm.environment.get(\"C-testcase\");",
									"    console.log(\"Debug: \" + JSON.stringify(jsData));",
									"",
									"    let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"",
									"    pm.test(\"amount of tnx correctly! \" + tnx_obj.amount, function () {",
									"        pm.expect(tnx_obj.amount == jsData.data.amount).to.be.true;",
									"    });",
									"",
									"    pm.test(\"txn_type of tnx correctly! \" + tnx_obj.txn_type, function () {",
									"        pm.expect(tnx_obj.txn_type == jsData.data.txn_type).to.be.true;",
									"    });",
									"",
									"    pm.test(\"description of tnx correctly! \" + tnx_obj.description, function () {",
									"        pm.expect(tnx_obj.description == jsData.data.description).to.be.true;",
									"    });",
									"",
									"    pm.test(\"value_at of tnx correctly! \" + tnx_obj.value_at, function () {",
									"        let act_value_at = new Date(jsData.data.value_at);",
									"        console.log(\"actual value_at: \" + act_value_at.toISOString());",
									"        pm.expect(tnx_obj.value_at == act_value_at.toISOString()).to.be.true;",
									"    });",
									"",
									"    postman.setNextRequest(\"get_list_payment_account\"); // get_list_payment_account",
									"} else {",
									"    console.log(\"Can't get internal contact detail, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{finan_base_url}}/finan-ledger/api/v1/transaction/detail/{{C-tnx_id}}?branch_id={{C-business_id}}",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"transaction",
								"detail",
								"{{C-tnx_id}}"
							],
							"query": [
								{
									"key": "branch_id",
									"value": "{{C-business_id}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.request.headers.add({",
							" key: \"authorization\",",
							" value: \"Bearer \" + pm.environment.get(\"C-userToken\")",
							"});",
							"",
							"pm.request.headers.add({",
							" key: \"Content-Type\",",
							" value: \"application/json\"",
							"});"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "payment",
			"item": []
		},
		{
			"name": "posting",
			"item": [
				{
					"name": "get_list_posting",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let page = pm.environment.get(\"C-page\");",
									"",
									"if(!page){",
									"    page = 1;",
									"    pm.environment.set(\"C-page\",page);",
									"",
									"    let page_size = 500;",
									"    pm.environment.set(\"C-page_size\",page_size);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"/**",
									" * object_type: transaction, invoice",
									" * object_id => id respective with object_type (tnx_id, invoice_id)",
									" * object_id_ref => use for invoice with product/item (product_id, item_id)",
									" * is_credit",
									" * created_at",
									" * value_at",
									" */",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = JSON.parse(responseBody);",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let total_pages, total_posting;",
									"    try {",
									"        total_pages = jsData.meta.total_pages;",
									"        total_posting = jsData.meta.total_rows;",
									"    } catch {",
									"        console.log(\"currently, this branch with null data\");",
									"    }",
									"    let page = pm.environment.get(\"C-page\");",
									"",
									"    let invoice_delete_obj = pm.environment.get(\"C-invoice_delete_obj\");",
									"    let list_delete_tnx = pm.environment.get(\"C-list_delete_tnx\");",
									"    let list_delete_posting, list_act_posting;",
									"    switch(testcase){",
									"        case 2:",
									"            list_delete_posting = pm.environment.get(\"C-list_delete_posting\");",
									"            if(!list_delete_posting){",
									"                list_delete_posting = [];",
									"            }",
									"",
									"            for(let item in jsData.data){",
									"                // lấy tất cả posting link vs invoice",
									"                if(jsData.data[item].object_type == \"invoice\" && jsData.data[item].object_id == invoice_delete_obj.invoice_id){",
									"                    list_delete_posting[list_delete_posting.length] = {",
									"                        \"posting_id\":jsData.data[item].id,",
									"                        \"account_id\":jsData.data[item].account_id,",
									"                        \"amount\":jsData.data[item].amount,",
									"                        \"branch_id\":jsData.data[item].branch_id,",
									"                        \"created_at\":jsData.data[item].created_at,",
									"                        \"currency\":jsData.data[item].currency,",
									"                        \"deleted_at\":jsData.data[item].deleted_at,",
									"                        \"is_credit\":jsData.data[item].is_credit,",
									"                        // \"is_final_status\":jsData.data[item].is_final_status,",
									"                        \"object_id_ref\":jsData.data[item].object_id_ref,",
									"                        \"object_id\":jsData.data[item].object_id,",
									"                        \"object_type\":jsData.data[item].object_type,",
									"                        // \"value_at\":jsData.data[item].value_at,",
									"                        \"short_desc\":jsData.data[item].short_desc,",
									"                        \"c_type\":\"invoice\"",
									"                    }",
									"                }",
									"",
									"                // lấy tất cả posting link với list_delete_tnx (chỉ các tnx có is_txn_bank = false)",
									"                for(let k in list_delete_tnx){",
									"                    if(jsData.data[item].object_type == \"transaction\" && jsData.data[item].object_id == list_delete_tnx[k].tnx_id){",
									"                        if(list_delete_tnx[k].is_txn_bank){",
									"                            list_delete_posting[list_delete_posting.length] = {",
									"                                \"posting_id\":jsData.data[item].id,",
									"                                \"account_id\":jsData.data[item].account_id,",
									"                                \"amount\":jsData.data[item].amount,",
									"                                \"branch_id\":jsData.data[item].branch_id,",
									"                                \"created_at\":jsData.data[item].created_at,",
									"                                \"currency\":jsData.data[item].currency,",
									"                                \"deleted_at\":jsData.data[item].deleted_at,",
									"                                \"is_credit\":jsData.data[item].is_credit,",
									"                                // \"is_final_status\":jsData.data[item].is_final_status,",
									"                                \"object_id_ref\":jsData.data[item].object_id_ref,",
									"                                \"object_id\":jsData.data[item].object_id,",
									"                                \"object_type\":jsData.data[item].object_type,",
									"                                // \"value_at\":jsData.data[item].value_at,",
									"                                \"short_desc\":jsData.data[item].short_desc,",
									"                                \"c_type\":\"bank_tnx\"",
									"                            }",
									"                        } else {",
									"                            list_delete_posting[list_delete_posting.length] = {",
									"                                \"posting_id\":jsData.data[item].id,",
									"                                \"account_id\":jsData.data[item].account_id,",
									"                                \"amount\":jsData.data[item].amount,",
									"                                \"branch_id\":jsData.data[item].branch_id,",
									"                                \"created_at\":jsData.data[item].created_at,",
									"                                \"currency\":jsData.data[item].currency,",
									"                                \"deleted_at\":jsData.data[item].deleted_at,",
									"                                \"is_credit\":jsData.data[item].is_credit,",
									"                                // \"is_final_status\":jsData.data[item].is_final_status,",
									"                                \"object_id_ref\":jsData.data[item].object_id_ref,",
									"                                \"object_id\":jsData.data[item].object_id,",
									"                                \"object_type\":jsData.data[item].object_type,",
									"                                // \"value_at\":jsData.data[item].value_at,",
									"                                \"short_desc\":jsData.data[item].short_desc,",
									"                                \"c_type\":\"manual_tnx\"",
									"                            }",
									"                        }",
									"                        break;",
									"                    }",
									"                }",
									"            }",
									"            pm.environment.set(\"C-list_delete_posting\",list_delete_posting);",
									"            break;",
									"        case 4:",
									"            list_act_posting = pm.environment.get(\"C-list_act_posting\");",
									"            if(!list_act_posting){",
									"                list_act_posting = [];",
									"            }",
									"            ",
									"            for(let item in jsData.data){",
									"                // lấy tất cả posting link vs invoice & delete_tnx",
									"                switch(jsData.data[item].object_type){",
									"                    case \"invoice\":",
									"                        if(jsData.data[item].object_id == invoice_delete_obj.invoice_id){",
									"                            list_act_posting[list_act_posting.length] = jsData.data[item];",
									"                        }",
									"                        break;",
									"                    case \"transaction\":",
									"                        for(let k in list_delete_tnx){",
									"                            if(jsData.data[item].object_id == list_delete_tnx[k].tnx_id){",
									"                                list_act_posting[list_act_posting.length] = jsData.data[item];",
									"                                break;",
									"                            }",
									"                        }",
									"                        break;",
									"                    default:",
									"                        console.log(\"Missing object_type\");",
									"                        break;",
									"                }",
									"            }",
									"            pm.environment.set(\"C-list_act_posting\",list_act_posting);",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow\");",
									"            break;",
									"    }",
									"",
									"    if(page >= total_pages){",
									"        // must clear page & page_size",
									"        pm.environment.unset(\"C-page\");",
									"        pm.environment.unset(\"C-page_size\");",
									"",
									"        switch(testcase){",
									"            case 2:",
									"                pm.test(\"Got total posting! \" + total_posting, function () {",
									"                    pm.environment.set(\"C-total_posting\",total_posting);",
									"                    pm.expect(total_posting > 0).to.be.true;",
									"                });",
									"",
									"                pm.test(\"Got all delete posting! \" + list_delete_posting.length, function () {",
									"                    console.log(\"list_delete_posting: \", list_delete_posting);",
									"                    pm.expect(list_delete_posting.length > 0).to.be.true;",
									"                });",
									"",
									"                postman.setNextRequest(\"get_list_contact\"); // get_list_contact",
									"                break;",
									"            case 4:",
									"                let old_total_posting = pm.environment.get(\"C-total_posting\");",
									"                list_delete_posting = pm.environment.get(\"C-list_delete_posting\");",
									"                let cant_delete_posting = 0;",
									"                for(let i in list_delete_posting){",
									"                    if(list_delete_posting[i].c_type == \"bank_tnx\"){",
									"                        cant_delete_posting++;",
									"                    }",
									"                }",
									"                let decrease_posting = list_delete_posting.length - cant_delete_posting;",
									"                pm.test(\"Total posting decrease \" + decrease_posting, function () {",
									"                    pm.expect(total_posting == old_total_posting - decrease_posting).to.be.true;",
									"                });",
									"",
									"                if(cant_delete_posting == 0){",
									"                    pm.test(\"All posting of invoice are deleted \", function () {",
									"                        pm.expect(list_act_posting.length == 0).to.be.true;",
									"                    });",
									"                } else {",
									"                    let count = 0;",
									"                    let uncategorized_income_obj = pm.environment.get(\"C-uncategorized_income_obj\");",
									"                    for(let i in list_delete_posting){",
									"                        if(list_delete_posting[i].c_type == \"bank_tnx\"){",
									"                            for(let j in list_act_posting){",
									"                                if(list_delete_posting[i].posting_id == list_act_posting[j].id){",
									"                                    count++;",
									"                                    // check account_id, amount (object_id là id của tnx), account_id 1 đầu payment_account (is_credit == true), 1 đầu Uncategorized Income",
									"                                    if(!list_act_posting[j].is_credit){",
									"                                        pm.test(\"account_id correctly! \" + list_delete_posting[i].account_id, function () {",
									"                                            pm.expect(list_delete_posting[i].account_id == list_act_posting[j].account_id).to.be.true;",
									"                                        });",
									"",
									"                                        pm.test(\"amount correctly! \" + list_delete_posting[i].amount, function () {",
									"                                            pm.expect(list_delete_posting[i].amount == list_act_posting[j].amount).to.be.true;",
									"                                        });",
									"                                    } else {",
									"                                        // đổi tất cả đầu debit về Uncategorized Income",
									"                                        pm.test(\"account_id update to Uncategorized Income \" + uncategorized_income_obj.id, function () {",
									"                                            pm.expect(uncategorized_income_obj.id == list_act_posting[j].account_id).to.be.true;",
									"                                        });",
									"",
									"                                        pm.test(\"amount correctly!\", function () {",
									"                                            pm.expect(list_delete_posting[i].amount == list_act_posting[j].amount).to.be.true;",
									"                                        });",
									"                                    }",
									"                                    break;",
									"                                }",
									"                            }",
									"                        }",
									"                    }",
									"",
									"                    pm.test(\"All posting of invoice are checked\", function () {",
									"                        pm.expect(cant_delete_posting == count).to.be.true;",
									"                    });",
									"                }",
									"",
									"                postman.setNextRequest(\"get_report_cash_flow\"); // get_report_cash_flow",
									"                break;",
									"            default:",
									"                console.log(\"Missing flow, end test\");",
									"                postman.setNextRequest(null);",
									"                break;",
									"        }",
									"    } else {",
									"        page++;",
									"        pm.environment.set(\"C-page\",page);",
									"",
									"        console.log(\"view next page (\" + page + \") to get more posting\");",
									"        postman.setNextRequest(\"get_list_posting\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get list posting, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{finan_base_url}}/finan-ledger/api/v1/posting/list?branch_id={{C-business_id}}&page={{C-page}}&page_size={{C-page_size}}&search=&sort=",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"posting",
								"list"
							],
							"query": [
								{
									"key": "branch_id",
									"value": "{{C-business_id}}"
								},
								{
									"key": "page",
									"value": "{{C-page}}"
								},
								{
									"key": "page_size",
									"value": "{{C-page_size}}"
								},
								{
									"key": "search",
									"value": ""
								},
								{
									"key": "sort",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.request.headers.add({",
							" key: \"authorization\",",
							" value: \"Bearer \" + pm.environment.get(\"C-userToken\")",
							"});",
							"",
							"pm.request.headers.add({",
							" key: \"Content-Type\",",
							" value: \"application/json\"",
							"});"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "contact",
			"item": [
				{
					"name": "get_list_contact",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ====================================== parser cURL",
									"function parseCURL(request_api){",
									"    let curl = \"\";",
									"    if(request_api.method == \"PUT\"){",
									"        curl = \"curl --location --request PUT \";",
									"    } else if(request_api.method == \"DELETE\"){",
									"        curl = \"curl --location --request DELETE \";",
									"    } else {",
									"        curl = \"curl --location \";",
									"    }",
									"    curl += \"'\" + request_api.url.protocol + \"://\"",
									"    // host",
									"    for(let i in request_api.url.host){",
									"        if(i >= request_api.url.host.length - 1){",
									"            curl += request_api.url.host[i] + \"/\";",
									"        } else {",
									"            curl += request_api.url.host[i] + \".\";",
									"        }",
									"    }",
									"    // path",
									"    for(let i in request_api.url.path){",
									"        if(i >= request_api.url.path.length - 1){",
									"            curl += request_api.url.path[i];",
									"        } else {",
									"            curl += request_api.url.path[i] + \"/\";",
									"        }",
									"    }",
									"    // query (if have)",
									"    if(\"query\" in request_api.url){",
									"        curl += \"? \";",
									"        for(let i in request_api.url.query){",
									"            if(i >= request_api.url.query.length - 1){",
									"                curl += request_api.url.query[i].key + \"=\" + request_api.url.query[i].value + \"' \";",
									"            } else {",
									"                curl += request_api.url.query[i].key + \"=\" + request_api.url.query[i].value + \"&\";",
									"            }",
									"        }",
									"    } else {",
									"        curl += \"' \";",
									"    }",
									"    // header",
									"    for(let i in request_api.header){",
									"        if(i >= request_api.header.length - 1){",
									"            curl += \"--header '\" + request_api.header[i].key + \": \" + request_api.header[i].value + \"'\";",
									"        } else {",
									"            curl += \"--header '\" + request_api.header[i].key + \": \" + request_api.header[i].value + \"' \";",
									"        }",
									"    }",
									"    switch(request_api.method){",
									"        case \"POST\":",
									"            curl += \" --data '\" + request_api.body.raw + \"'\"",
									"            break;",
									"        case \"PUT\":",
									"            curl += \" --data-raw '\" + request_api.body.raw + \"'\"",
									"            break;",
									"        case \"DELETE\":",
									"            curl += \" --data '\" + request_api.body.raw + \"'\"",
									"            break;",
									"        default:",
									"            break;",
									"    }",
									"    console.log(curl);",
									"    return curl;",
									"}",
									"const request_api = pm.request.toJSON();",
									"parseCURL(request_api);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    let jsData = JSON.parse(responseBody);",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let total_pages = jsData.meta.total_pages;",
									"    let page = pm.environment.get(\"C-page\");",
									"",
									"    let invoice_delete_obj = pm.environment.get(\"C-invoice_delete_obj\");",
									"    let isFound = false;",
									"    let contact_obj = null;",
									"",
									"    for(let item in jsData.data){",
									"        if(jsData.data[item].id == invoice_delete_obj.contact_id){",
									"            isFound = true;",
									"            if(jsData.data[item].debt_amount == null){",
									"                contact_obj = {",
									"                    \"contact_id\":jsData.data[item].id,",
									"                    \"name\":jsData.data[item].name,",
									"                    \"phone_number\":jsData.data[item].phone_number,",
									"                    \"is_expired\":jsData.data[item].is_expired,",
									"                    \"debt_amount\":0,",
									"                    \"option\":jsData.data[item].option,",
									"                    \"customer_point\":jsData.data[item].customer_point,",
									"                    \"state\":jsData.data[item].state,",
									"                    \"last_order\":jsData.data[item].last_order",
									"                }",
									"            } else {",
									"                contact_obj = {",
									"                    \"contact_id\":jsData.data[item].id,",
									"                    \"name\":jsData.data[item].name,",
									"                    \"phone_number\":jsData.data[item].phone_number,",
									"                    \"is_expired\":jsData.data[item].is_expired,",
									"                    \"debt_amount\":jsData.data[item].debt_amount,",
									"                    \"option\":jsData.data[item].option,",
									"                    \"customer_point\":jsData.data[item].customer_point,",
									"                    \"state\":jsData.data[item].state,",
									"                    \"last_order\":jsData.data[item].last_order",
									"                }",
									"            }",
									"            break;",
									"        }",
									"    }",
									"",
									"    if(page >= total_pages || isFound){",
									"        // must clear page & page_size",
									"        pm.environment.unset(\"C-page\");",
									"        pm.environment.unset(\"C-page_size\");",
									"",
									"        switch(testcase){",
									"            case 2:",
									"                pm.test(\"Got contact! \" + contact_obj.phone_number, function () {",
									"                    pm.environment.set(\"C-contact_obj\",contact_obj);",
									"                    pm.expect(contact_obj != null).to.be.true;",
									"                });",
									"",
									"                postman.setNextRequest(\"get_list_internal_account\"); // get_list_internal_account",
									"                break;",
									"            case 4:",
									"                ",
									"                postman.setNextRequest(null);",
									"                break;",
									"            default:",
									"                console.log(\"Missing flow, end test\");",
									"                postman.setNextRequest(null);",
									"                break;",
									"        }",
									"    } else {",
									"        page++;",
									"        pm.environment.set(\"C-page\",page);",
									"",
									"        console.log(\"view next page (\" + page + \") to get more contact\");",
									"        postman.setNextRequest(\"seller_view_list_contact\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get list contact, end test\");",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let page = pm.environment.get(\"C-page\");",
									"",
									"if(!page){",
									"    page = 1;",
									"    pm.environment.set(\"C-page\",page);",
									"",
									"    let page_size = 50;",
									"    pm.environment.set(\"C-page_size\",page_size);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{finan_base_url}}/finan-business/api/v1/contact/get-list?type=&search=&business_id={{C-business_id}}&page={{C-page}}&page_size={{C-page_size}}&sort=&option=&state=waiting_confirm,delivering&is_active=true",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-business",
								"api",
								"v1",
								"contact",
								"get-list"
							],
							"query": [
								{
									"key": "type",
									"value": ""
								},
								{
									"key": "search",
									"value": ""
								},
								{
									"key": "business_id",
									"value": "{{C-business_id}}"
								},
								{
									"key": "page",
									"value": "{{C-page}}"
								},
								{
									"key": "page_size",
									"value": "{{C-page_size}}"
								},
								{
									"key": "sort",
									"value": ""
								},
								{
									"key": "option",
									"value": ""
								},
								{
									"key": "state",
									"value": "waiting_confirm,delivering"
								},
								{
									"key": "is_active",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get_debt_amount",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// random number between min and max",
									"function getRandomInt(min, max) {",
									"  \treturn Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"switch(testcase) {",
									"    case 2:",
									"        let list_contact = pm.environment.get(\"C-list_contact\");",
									"        let ranCon = getRandomInt(0,list_contact.length - 1);",
									"",
									"        console.log(\"Will edit processing order with contact: \" + JSON.stringify(list_contact[ranCon]));",
									"        let contact_id = list_contact[ranCon].contact_id;",
									"        pm.environment.set(\"C-ranCon\",ranCon);",
									"        pm.environment.set(\"C-contact_id\",contact_id);",
									"        break;",
									"    case 4:",
									"        break;",
									"    default:",
									"        console.log(\"Missing flow\");",
									"        break;",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    const jsData = pm.response.json();",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    // console.log(\"Debug: \" + JSON.stringify(jsData));",
									"",
									"    let contact_obj, invoice_obj;",
									"    switch(testcase){",
									"        case 2:",
									"            let list_contact = pm.environment.get(\"C-list_contact\");",
									"            let ranCon = pm.environment.get(\"C-ranCon\");",
									"            pm.test(\"debt_amount correctly & got it \" + list_contact[ranCon].debt_amount, function () {",
									"                pm.expect(list_contact[ranCon].debt_amount == jsData.data.debt_amount).to.be.true;",
									"            });",
									"",
									"            pm.environment.set(\"C-contact_obj\",list_contact[ranCon]);",
									"            console.log(\"will create invoice with contact: \", list_contact[ranCon]);",
									"            pm.environment.unset(\"C-list_contact\");",
									"",
									"            postman.setNextRequest(\"get_list_internal_account\"); // get_list_internal_account",
									"            break;",
									"        case 4:",
									"            contact_obj = pm.environment.get(\"C-contact_obj\");",
									"            pm.test(\"debt_amount is nothing happen\", function () {",
									"                pm.expect(contact_obj.debt_amount == jsData.data.debt_amount).to.be.true;",
									"            });",
									"",
									"            postman.setNextRequest(\"get_list_posting\"); // get_list_posting",
									"            break;",
									"        case 6:",
									"            contact_obj = pm.environment.get(\"C-contact_obj\");",
									"            invoice_obj = pm.environment.get(\"C-invoice_obj\");",
									"            pm.test(\"debt_amount is increase \" + invoice_obj.sub_total_amount, function () {",
									"                console.log(\"Old debt: \" + contact_obj.debt_amount);",
									"                console.log(\"New debt: \" + jsData.data.debt_amount);",
									"                pm.expect(contact_obj.debt_amount + invoice_obj.sub_total_amount == jsData.data.debt_amount).to.be.true;",
									"            });",
									"",
									"            postman.setNextRequest(\"get_list_posting\"); // get_list_posting",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get contact's dept amount, end test\");",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{finan_base_url}}/finan-business/api/v1/contact/get-debt-amount?contact_id={{C-contact_id}}",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-business",
								"api",
								"v1",
								"contact",
								"get-debt-amount"
							],
							"query": [
								{
									"key": "contact_id",
									"value": "{{C-contact_id}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "account coa",
			"item": [
				{
					"name": "get_list_internal_account",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let coa_list = [];",
									"    try {",
									"        for(let i in jsData.data){",
									"            for(let j in jsData.data[i].sub_group){",
									"                for(let k in jsData.data[i].sub_group[j].accounts){",
									"                    coa_list[coa_list.length] = {",
									"                        \"account_name\":jsData.data[i].sub_group[j].accounts[k].name,",
									"                        \"account_id\":jsData.data[i].sub_group[j].accounts[k].id,",
									"                        \"group_name\":jsData.data[i].sub_group[j].accounts[k].group_name,",
									"                        \"sub_group_name\":jsData.data[i].sub_group[j].accounts[k].sub_name,",
									"                        \"branch_id\":jsData.data[i].sub_group[j].accounts[k].branch_id,",
									"                        \"displays_id\":jsData.data[i].sub_group[j].accounts[k].displays_id,",
									"                        \"account_source\":jsData.data[i].sub_group[j].accounts[k].account_source,",
									"                        \"account_type\":jsData.data[i].sub_group[j].accounts[k].account_type,",
									"                        \"account_code\":jsData.data[i].sub_group[j].accounts[k].account_code,",
									"                        \"coa_type\":jsData.data[i].sub_group[j].accounts[k].coa_type,",
									"                        \"sub_coa_deepest\":jsData.data[i].sub_group[j].accounts[k].sub_coa_deepest,",
									"                        \"name_en\":jsData.data[i].sub_group[j].accounts[k].name_en,",
									"                        \"status\":jsData.data[i].sub_group[j].accounts[k].status,",
									"                        \"parent_id\":jsData.data[i].sub_group[j].accounts[k].parent_id,",
									"                        \"description\":jsData.data[i].sub_group[j].accounts[k].description,",
									"                        \"open_amount\":jsData.data[i].sub_group[j].accounts[k].open_amount,",
									"                        \"currency\":jsData.data[i].sub_group[j].accounts[k].currency",
									"                        // \"opening_at\":jsData.data[i].sub_group[j].accounts[k].opening_at",
									"                        // \"closing_at\":jsData.data[i].sub_group[j].accounts[k].closing_at",
									"                    }",
									"",
									"                    if(jsData.data[i].sub_group[j].accounts[k].key == \"uncategorized_income\"){",
									"                        pm.environment.set(\"C-uncategorized_income_obj\",jsData.data[i].sub_group[j].accounts[k]);",
									"                    }",
									"                }",
									"            }",
									"        }",
									"    } catch {",
									"        console.log(\"can't get all account in coa\");",
									"    }",
									"",
									"    pm.test(\"Got coa_list of this user's business\", function () {",
									"        pm.expect(coa_list.length > 0).to.be.true;",
									"    });",
									"",
									"    if(coa_list.length > 0){",
									"        let list_delete_posting = pm.environment.get(\"C-list_delete_posting\");",
									"        for(let i in list_delete_posting){",
									"            for(let j in coa_list){",
									"                if(list_delete_posting[i].account_id == coa_list[j].account_id){",
									"                    list_delete_posting[i].account_name = coa_list[j].account_name;",
									"                    break;",
									"                }",
									"            }",
									"        }",
									"",
									"        pm.environment.set(\"C-list_delete_posting\",list_delete_posting);",
									"        console.log(\"list_delete_posting with account_name: \",list_delete_posting);",
									"        ",
									"        postman.setNextRequest(\"get_list_payment_account\"); // get_list_payment_account",
									"    } else {",
									"        console.log(\"Can't get list internal account, end test \");",
									"        postman.setNextRequest(null);",
									"    }",
									"} else {",
									"    console.log(\"Can't get list internal account, end test \", jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{finan_base_url}}​/finan-ledger/api/v1/account/list?branch_id={{C-business_id}}&coa_type=",
							"host": [
								"{{finan_base_url}}​"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"account",
								"list"
							],
							"query": [
								{
									"key": "branch_id",
									"value": "{{C-business_id}}"
								},
								{
									"key": "coa_type",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get_internal_account_detail",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/**",
									" * Only check credit_account",
									" */",
									"",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let list_internal_account = pm.environment.get(\"C-list_internal_account\");",
									"let pos = pm.environment.get(\"C-pos\");",
									"if(!pos){",
									"    pos = 0;",
									"    pm.environment.set(\"C-pos\",pos);",
									"}",
									"",
									"let internal_account_id = list_internal_account[pos].account_id;",
									"console.log(\"view detail account: \" + account_id);",
									"",
									"pm.environment.set(\"C-internal_account_id\",internal_account_id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    const jsData = pm.response.json();",
									"    // let testcase = pm.environment.get(\"C-testcase\");",
									"    console.log(\"Debug: \" + JSON.stringify(jsData));",
									"",
									"    let list_internal_account = pm.environment.get(\"C-list_internal_account\");",
									"    let pos = pm.environment.get(\"C-pos\");",
									"",
									"    if(pos >= list_internal_account.length - 1){",
									"        pm.environment.unset(\"C-pos\");",
									"",
									"        postman.setNextRequest(\"get_list_tax\"); // get_list_tax",
									"    } else {",
									"        pos++;",
									"        pm.environment.set(\"C-pos\",pos);",
									"",
									"        postman.setNextRequest(\"get_internal_account_detail\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get internal account detail, end test\");",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{finan_base_url}}​​/finan-ledger/api/v1/account/detail/{{C-internal_account_id}}",
							"host": [
								"{{finan_base_url}}​​"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"account",
								"detail",
								"{{C-internal_account_id}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.request.headers.add({",
							" key: \"authorization\",",
							" value: \"Bearer \" + pm.environment.get(\"C-userToken\")",
							"});",
							"",
							"pm.request.headers.add({",
							" key: \"Content-Type\",",
							" value: \"application/json\"",
							"});"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "account cash_n_bank",
			"item": [
				{
					"name": "get_list_payment_account",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let list_delete_tnx = pm.environment.get(\"C-list_delete_tnx\");",
									"    switch(testcase){",
									"        case 2:",
									"            for(let i in list_delete_tnx){",
									"                for(let j in jsData.data.accounts){",
									"                    if(list_delete_tnx[i].account_id == jsData.data.accounts[j].id){",
									"                        // list_delete_tnx[i].open_amount = jsData.data.accounts[j].open_amount;",
									"                        list_delete_tnx[i].total_balance_amount = jsData.data.accounts[j].total_balance_amount;",
									"                        // list_delete_tnx[i].status = jsData.data.accounts[j].status;",
									"                        break;",
									"                    }",
									"                }",
									"            }",
									"            pm.environment.set(\"C-list_delete_tnx\",list_delete_tnx);",
									"            console.log(\"list_delete_tnx after get total_balance_amount: \",list_delete_tnx);",
									"",
									"            postman.setNextRequest(\"get_list_reminder_of_invoice\"); // get_list_reminder_of_invoice",
									"            break;",
									"        case 4:",
									"            // những tnx manual thì thay đổi, còn của bank sẽ giữ nguyên",
									"            let count = 0;",
									"",
									"            let tnx_amount;",
									"            let isFound = false;",
									"            for(let i in list_delete_tnx){",
									"                if(list_delete_tnx[i].is_txn_bank){",
									"                    for(let j in jsData.data.accounts){",
									"                        if(list_delete_tnx[i].account_id == jsData.data.accounts[j].id){",
									"                            isFound = true;",
									"                            count++;",
									"                            // nothing happen",
									"                            pm.test(\"nothing happen with total_balance_amount of account \" + list_delete_tnx[i].account_name, function () {",
									"                                console.log(\"old: \" + list_delete_tnx[i].total_balance_amount);",
									"                                console.log(\"act: \" + jsData.data.accounts[j].total_balance_amount);",
									"                                pm.expect(jsData.data.accounts[j].total_balance_amount == list_delete_tnx[i].total_balance_amount).to.be.true;",
									"                            });",
									"                            break;",
									"                        }",
									"                    }",
									"                } else {",
									"                    for(let j in jsData.data.accounts){",
									"                        if(list_delete_tnx[i].account_id == jsData.data.accounts[j].id){",
									"                            isFound = true;",
									"                            count++;",
									"                            // decrease total balance amount respective with tnx",
									"                            tnx_amount = parseFloat(list_delete_tnx[i].amount);",
									"                            pm.test(\"total_balance_amount of account \" + list_delete_tnx[i].account_name + \" decrease \" + tnx_amount, function () {",
									"                                console.log(\"old: \" + list_delete_tnx[i].total_balance_amount);",
									"                                console.log(\"expected: \" + (list_delete_tnx[i].total_balance_amount - tnx_amount));",
									"                                console.log(\"act: \" + jsData.data.accounts[j].total_balance_amount);",
									"                                pm.expect(jsData.data.accounts[j].total_balance_amount == list_delete_tnx[i].total_balance_amount - tnx_amount).to.be.true;",
									"                            });",
									"                            break;",
									"                        }",
									"                    }",
									"                }",
									"                pm.test(\"Found account \" + list_delete_tnx[i].account_name, function () {",
									"                    pm.expect(isFound).to.be.true;",
									"                });",
									"            }",
									"",
									"            pm.test(\"Found all account!\", function () {",
									"                pm.expect(count == list_delete_tnx.length).to.be.true;",
									"            });",
									"            ",
									"            postman.setNextRequest(\"get_list_transaction\"); // get_list_transaction",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get list payment account, end test\", jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"url": {
							"raw": "{{finan_base_url}}/finan-ledger/api/v1/account/list-by-key?branch_id={{C-business_id}}&key=cash_and_bank",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"account",
								"list-by-key"
							],
							"query": [
								{
									"key": "branch_id",
									"value": "{{C-business_id}}"
								},
								{
									"key": "key",
									"value": "cash_and_bank"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "reminder",
			"item": [
				{
					"name": "get_list_reminder_of_invoice",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let invoice_delete_obj = pm.environment.get(\"C-invoice_delete_obj\");",
									"let invoice_id;",
									"",
									"switch(testcase){",
									"    case 2:",
									"        invoice_id = invoice_delete_obj.invoice_id;",
									"        pm.environment.set(\"C-invoice_id\",invoice_id);",
									"        break;",
									"    case 4:",
									"        break;",
									"    default:",
									"        break;",
									"}",
									"",
									"console.log(\"view detail invoice: \" + invoice_id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let current = new Date();",
									"    console.log(\"current: \" + current);",
									"",
									"    switch(testcase){",
									"        case 2:",
									"            let list_delete_reminder = [];",
									"            for(let i in jsData.data){",
									"                list_delete_reminder[i] = jsData.data[i];",
									"                if(new Date(jsData.data[i].sent_at) > current){ // jsData.data[i].status == \"un_sent\" || ",
									"                    list_delete_reminder[i].expected_status = \"un_sent\";",
									"                } else {",
									"                    list_delete_reminder[i].expected_status = \"sent\";",
									"                }",
									"            }",
									"            pm.environment.set(\"C-list_delete_reminder\",list_delete_reminder);",
									"            console.log(\"list_delete_reminder: \",list_delete_reminder);",
									"",
									"            postman.setNextRequest(\"get_report_cash_flow\"); // get_report_cash_flow",
									"            break;",
									"        case 4:",
									"            // should remove all reminder (both sent and un_sent)",
									"            let invoice_delete_obj = pm.environment.get(\"C-invoice_delete_obj\");",
									"            pm.test(\"removed all reminder for invoice \" + invoice_delete_obj.entry_code, function () {",
									"                pm.expect(jsData.data.length == 0).to.be.true;",
									"            });",
									"",
									"            postman.setNextRequest(\"get_list_posting\"); // get_list_posting, get_list_payment",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get list reminder of invoice, end test\", jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "authority",
								"value": "api.finan.dev"
							},
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "accept-language",
								"value": "en-US,en;q=0.9,vi-VN;q=0.8,vi;q=0.7"
							},
							{
								"key": "authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkZXZpY2VfaWQiOiIwMTZkODY2ZC0xMzRhLTQ4YjYtOGI5Ny01ZDFhNDliMTFhYmIiLCJidXNpbmVzc19pZCI6IjdiMGVlOTc2LTk1MDctNDk0OS04MWQzLWVjZTNlZWY1YTY3OSIsInBlcm1pc3Npb25fa2V5cyI6InNob3Bfb3duZXIiLCJyZWZyZXNoX3Rva2VuX2lkIjoiMGVlMTQ4MTAtODk3NS00YjkxLWFlYTgtYTQ0MGZiYTM2NWI2Iiwic2VjdXJpdHlfcm9sZXMiOjAsImFwcF92ZXJzaW9uIjoiIiwidXNlcl9pZCI6IjkxMTZhNDQyLTQzMjktNDMyZi1hNDhhLTliYmQ5ZTNlMjQ5YSIsImV4cCI6MTcxNDAxOTkyNywiaXNzIjoicHJvX3dlYiIsInN1YiI6IjkxMTZhNDQyLTQzMjktNDMyZi1hNDhhLTliYmQ5ZTNlMjQ5YXwwMTZkODY2ZC0xMzRhLTQ4YjYtOGI5Ny01ZDFhNDliMTFhYmJ8MDE2ZDg2NmQtMTM0YS00OGI2LThiOTctNWQxYTQ5YjExYWJiIn0._oXPpBSEwnm8pBdiTSedHmsjr5HavpBu-pxaOMuOf60"
							}
						],
						"url": {
							"raw": "https://api.finan.dev/finan-ledger/api/v1/reminder/list?entry_id={{C-invoice_id}}&branch_id={{C-business_id}}",
							"protocol": "https",
							"host": [
								"api",
								"finan",
								"dev"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"reminder",
								"list"
							],
							"query": [
								{
									"key": "entry_id",
									"value": "{{C-invoice_id}}"
								},
								{
									"key": "branch_id",
									"value": "{{C-business_id}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "report",
			"item": [
				{
					"name": "get_report_cash_flow",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"// lấy full tháng hiện tại",
									"let today = new Date();",
									"let start_current_month = new Date(today.getFullYear(), today.getMonth(), 1);",
									"let end_current_month = new Date(today.getFullYear(), today.getMonth() + 1, 1);",
									"",
									"// lấy full tháng trước",
									"let start_last_month = new Date(today.getFullYear(), today.getMonth() - 1, 1);",
									"let end_last_month = new Date(today.getFullYear(), today.getMonth(), 1);",
									"",
									"// lấy full ngày hiện tại",
									"// let firstDay = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0 ,0, 0);",
									"// let lastDay = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 23, 59 ,59, 0);",
									"",
									"// lấy n ngày đến hiện tại",
									"// let firstDayTimestamp = Math.floor(firstDay.getTime()/1000) - 2*24*60*60;",
									"// let start_day_ago = new Date(firstDayTimestamp*1000);",
									"",
									"let current_period_start = start_current_month.toISOString();",
									"let current_period_end = end_current_month.toISOString();",
									"let previous_period_start = start_last_month.toISOString();",
									"let previous_period_end = end_last_month.toISOString();",
									"",
									"/**",
									" * currently, display error if missing previous_period_start & previous_period_end or them = \"\";",
									" */",
									"let payload = {",
									"    \"branch_id\": parseInt(pm.environment.get(\"C-business_id\")),",
									"    \"current_period_start\": current_period_start,",
									"    \"current_period_end\": current_period_end,",
									"    \"previous_period_start\": previous_period_start,",
									"    \"previous_period_end\": previous_period_end",
									"    // \"timezone\": \"Asia/Ho_Chi_Minh\" // UTC, Asia/Ho_Chi_Minh == UTC+07:00",
									"}",
									"",
									"console.log(\"payload: \",payload);",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));",
									"",
									"pm.environment.set(\"C-current_period_start\",current_period_start);",
									"pm.environment.set(\"C-current_period_end\",current_period_end);",
									"pm.environment.set(\"C-previous_period_start\",previous_period_start);",
									"pm.environment.set(\"C-previous_period_end\",previous_period_end);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ============================= sort by key",
									"function sortByKey(array, key, type) {",
									"    if(type == \"asc\"){",
									"        return array.sort(function(a, b) {",
									"            var x = a[key]; var y = b[key];",
									"            return ((x > y) ? -1 : ((x < y) ? 1 : 0));",
									"        });",
									"    } else {",
									"        return array.sort(function(a, b) {",
									"            var x = a[key]; var y = b[key];",
									"            return ((x < y) ? -1 : ((x > y) ? 1 : 0));",
									"        });",
									"    }",
									"}",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let report_cash_flow = null;",
									"    try {",
									"        report_cash_flow = jsData.data;",
									"        /**",
									"         * db_data",
									"         * sum_card_data",
									"         * top_income_categories_data",
									"         * full_income_categories_data",
									"         * top_expense_categories_data",
									"         * full_expense_categories_data",
									"         */",
									"    } catch {",
									"        console.log(\"Can't get report cash_flow data\");",
									"    }",
									"",
									"    let total_income = 0, total_expense = 0;",
									"    let income_list = [], expense_list = [];",
									"    let exp_sum_card_data;",
									"    let full_income_categories_data;",
									"    if(\"full_income_categories_data\" in jsData.data){",
									"        full_income_categories_data = JSON.parse(JSON.stringify(jsData.data.full_income_categories_data));",
									"    }",
									"    let full_expense_categories_data;",
									"    if(\"full_expense_categories_data\" in jsData.data){",
									"        full_expense_categories_data = JSON.parse(JSON.stringify(jsData.data.full_expense_categories_data));",
									"    }",
									"    switch(testcase){",
									"        case 2:",
									"            pm.environment.set(\"C-report_cash_flow\",report_cash_flow);",
									"",
									"            // ================================================ bonus check current data",
									"            // try {",
									"            //     for(let i in jsData.data.db_data){",
									"            //         if(jsData.data.db_data[i].coa_type == \"income\"){",
									"            //             income_list[income_list.length] = JSON.parse(JSON.stringify(jsData.data.db_data[i]));",
									"            //             total_income += jsData.data.db_data[i].current_income;",
									"            //         } else if (jsData.data.db_data[i].coa_type == \"expense\"){",
									"            //             expense_list[expense_list.length] = JSON.parse(JSON.stringify(jsData.data.db_data[i]));",
									"            //             total_expense += jsData.data.db_data[i].current_expense;",
									"            //         }",
									"            //     }",
									"            //     exp_sum_card_data = {",
									"            //         \"total_current_income\": total_income,",
									"            //         \"total_current_expense\": total_expense,",
									"            //         \"total_current_gap\": (total_income - total_expense)",
									"            //     }",
									"            //     console.log(\"exp_sum_card_data: \", exp_sum_card_data);",
									"",
									"            //     for(let i in income_list){",
									"            //         income_list[i].percentage = parseFloat((income_list[i].current_income/total_income*100).toFixed(2));",
									"            //         delete income_list[i]['coa_type'];",
									"            //         delete income_list[i]['current_income'];",
									"            //     }",
									"            //     console.log(\"income_list: \", sortByKey(income_list,\"percentage\",\"asc\"));",
									"",
									"            //     for(let i in expense_list){",
									"            //         expense_list[i].percentage = parseFloat((expense_list[i].current_expense/total_expense*100).toFixed(2));",
									"            //         delete expense_list[i]['coa_type'];",
									"            //         delete expense_list[i]['current_expense'];",
									"            //     }",
									"            //     console.log(\"expense_list: \", sortByKey(expense_list,\"percentage\",\"asc\"));",
									"",
									"            //     pm.test(\"sum_card_data correctly\", function () {",
									"            //         pm.expect(JSON.stringify(jsData.data.sum_card_data) == JSON.stringify(exp_sum_card_data)).to.be.true;",
									"            //     });",
									"",
									"            //     for(let i in full_income_categories_data){",
									"            //         delete full_income_categories_data[i]['current_amount'];",
									"            //     }",
									"            //     pm.test(\"full_income_categories_data correctly\", function () {",
									"            //         pm.expect(JSON.stringify(full_income_categories_data) == JSON.stringify(income_list)).to.be.true;",
									"            //     });",
									"",
									"            //     for(let i in full_expense_categories_data){",
									"            //         delete full_expense_categories_data[i]['current_amount'];",
									"            //     }",
									"            //     pm.test(\"full_expense_categories_data correctly\", function () {",
									"            //         pm.expect(JSON.stringify(full_expense_categories_data) == JSON.stringify(expense_list)).to.be.true;",
									"            //         // pm.expect(jsData.data.full_expense_categories_data).to.deep.include(expense_list);",
									"            //     });",
									"            // } catch {",
									"            //     console.log(\"Null data\");",
									"            // }",
									"            // ================================================ ",
									"",
									"            postman.setNextRequest(\"get_report_account\"); // get_report_account",
									"            break;",
									"        case 4:",
									"            // let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"            // let list_debit_account = pm.environment.get(\"C-list_debit_account\");",
									"            // let list_credit_account = pm.environment.get(\"C-list_credit_account\");",
									"            // let old_report_cash_flow = pm.environment.get(\"C-report_cash_flow\");",
									"",
									"            // // console.log(\"debug old_report_cash_flow: \", old_report_cash_flow);",
									"            // // console.log(\"debug report_cash_flow: \", report_cash_flow);",
									"",
									"            // // tnx => hiện tại txn_type chỉ dùng để hiển thị trên UI, ko có ý nghĩa tăng vào tài khoản nào",
									"            // // if(tnx_obj.txn_type == \"out\"){",
									"            // //     // increase expense",
									"            // // } else {",
									"            // //     // increase income",
									"            // // }",
									"            // for(let i in list_credit_account){",
									"            //     if(list_credit_account[i].account_id == tnx_obj.account_id){",
									"            //         console.log(\"Tnx được thực hiện ở tài khoản: \" + list_credit_account[i].account_name);",
									"            //         tnx_obj.account_name = list_credit_account[i].account_name;",
									"            //         break;",
									"            //     }",
									"            // }",
									"            // for(let i in list_debit_account){",
									"            //     if(list_debit_account[i].account_id == tnx_obj.category_id){",
									"            //         console.log(\"Tnx được thực hiện ở phân loại: \" + list_debit_account[i].account_name);",
									"            //         tnx_obj.category_name = list_debit_account[i].account_name;",
									"            //         tnx_obj.category_group_name = list_debit_account[i].group_name;",
									"            //         tnx_obj.category_sub_group_name = list_debit_account[i].sub_group_name;",
									"            //         tnx_obj.coa_type = list_debit_account[i].coa_type;",
									"            //         break;",
									"            //     }",
									"            // }",
									"            // pm.environment.set(\"C-tnx_obj\",tnx_obj);",
									"            // // console.log(\"tnx_obj after update: \", tnx_obj);",
									"",
									"            // // old data",
									"            // let hasAccountInOldDB = false;",
									"            // let old_amount;",
									"            // for(let i in old_report_cash_flow.db_data){",
									"            //     if(old_report_cash_flow.db_data[i].coa_name == tnx_obj.category_name){",
									"            //         hasAccountInOldDB = true;",
									"            //         if(old_report_cash_flow.db_data[i].coa_type == \"income\"){",
									"            //             old_amount = old_report_cash_flow.db_data[i].current_income;",
									"            //         } else {",
									"            //             old_amount = old_report_cash_flow.db_data[i].current_expense;",
									"            //         }",
									"            //         break;",
									"            //     }",
									"            // }",
									"",
									"            // // new data",
									"            // let hasAccoountInNewDB = false;",
									"            // let new_amount;",
									"            // for(let i in report_cash_flow.db_data){",
									"            //     if(report_cash_flow.db_data[i].coa_name == tnx_obj.category_name){",
									"            //         hasAccoountInNewDB = true;",
									"            //         if(report_cash_flow.db_data[i].coa_type == \"income\"){",
									"            //             new_amount = report_cash_flow.db_data[i].current_income;",
									"            //         } else {",
									"            //             new_amount = report_cash_flow.db_data[i].current_expense;",
									"            //         }",
									"            //         break;",
									"            //     }",
									"            // }",
									"",
									"            // if(tnx_obj.coa_type == \"income\" || tnx_obj.coa_type == \"expense\"){",
									"            //     if(tnx_obj.coa_type == \"income\"){",
									"            //         console.log(\"Tnx thực hiện với coa_type là income, tăng income tương ứng trong tk\");",
									"            //     } else {",
									"            //         console.log(\"Tnx thực hiện với coa_type là expense, tăng expense tương ứng trong tk\");",
									"            //     }",
									"",
									"            //     // check db_data",
									"            //     if(hasAccountInOldDB){",
									"            //         pm.test(\"inscrease account \" + tnx_obj.category_name + \" with amount \" + tnx_obj.amount, function () {",
									"            //             pm.expect(new_amount == old_amount + tnx_obj.amount).to.be.true;",
									"            //         });",
									"            //     } else {",
									"            //         pm.test(\"had new record of account \" + tnx_obj.category_name + \" with amount \" + tnx_obj.amount, function () {",
									"            //             pm.expect(hasAccoountInNewDB && new_amount == tnx_obj.amount).to.be.true;",
									"            //         });",
									"            //     }",
									"",
									"            //     // check sum_card_data",
									"            //     for(let i in report_cash_flow.db_data){",
									"            //         if(report_cash_flow.db_data[i].coa_type == \"income\"){",
									"            //             income_list[income_list.length] = JSON.parse(JSON.stringify(report_cash_flow.db_data[i]));",
									"            //             total_income += report_cash_flow.db_data[i].current_income;",
									"            //         } else if (report_cash_flow.db_data[i].coa_type == \"expense\"){",
									"            //             expense_list[expense_list.length] = report_cash_flow.db_data[i];",
									"            //             total_expense += report_cash_flow.db_data[i].current_expense;",
									"            //         }",
									"            //     }",
									"            //     exp_sum_card_data = {",
									"            //         \"total_current_income\": total_income,",
									"            //         \"total_current_expense\": total_expense,",
									"            //         \"total_current_gap\": (total_income - total_expense)",
									"            //     }",
									"            //     // console.log(\"exp_sum_card_data: \", exp_sum_card_data);",
									"",
									"            //     for(let i in income_list){",
									"            //         income_list[i].percentage = parseFloat((income_list[i].current_income/total_income*100).toFixed(2));",
									"            //         delete income_list[i]['coa_type'];",
									"            //         delete income_list[i]['current_income'];",
									"            //     }",
									"            //     // console.log(\"income_list: \", sortByKey(income_list,\"percentage\",\"asc\"));",
									"",
									"            //     for(let i in expense_list){",
									"            //         expense_list[i].percentage = parseFloat((expense_list[i].current_expense/total_expense*100).toFixed(2));",
									"            //         delete expense_list[i]['coa_type'];",
									"            //         delete expense_list[i]['current_expense'];",
									"            //     }",
									"            //     // console.log(\"expense_list: \", sortByKey(expense_list,\"percentage\",\"asc\"));",
									"",
									"            //     pm.test(\"sum_card_data correctly\", function () {",
									"            //         pm.expect(JSON.stringify(report_cash_flow.sum_card_data) == JSON.stringify(exp_sum_card_data)).to.be.true;",
									"            //     });",
									"",
									"            //     // check top_income & top_expense",
									"",
									"            //     // check full_income & full_expense",
									"            //     for(let i in full_income_categories_data){",
									"            //         delete full_income_categories_data[i]['current_amount'];",
									"            //     }",
									"            //     pm.test(\"full_income_categories_data correctly\", function () {",
									"            //         pm.expect(JSON.stringify(full_income_categories_data) == JSON.stringify(income_list)).to.be.true;",
									"            //     });",
									"",
									"            //     for(let i in full_expense_categories_data){",
									"            //         delete full_expense_categories_data[i]['current_amount'];",
									"            //     }",
									"            //     pm.test(\"full_expense_categories_data correctly\", function () {",
									"            //         pm.expect(JSON.stringify(full_expense_categories_data) == JSON.stringify(expense_list)).to.be.true;",
									"            //         // pm.expect(report_cash_flow.full_expense_categories_data).to.deep.include(expense_list);",
									"            //     });",
									"            // } else {",
									"            //     console.log(\"Tnx thực hiện với coa_type khác income và expense, nothing happen with report cash-flow\");",
									"",
									"            //     pm.test(\"Nothing happen!!!\", function () {",
									"            //         pm.expect(JSON.stringify(report_cash_flow) == JSON.stringify(old_report_cash_flow)).to.be.true;",
									"            //     });",
									"            // }",
									"",
									"            // đợi PO chốt rule",
									"",
									"            postman.setNextRequest(\"get_report_account\"); // get_report_account",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get report cash_flow, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finan_base_url}}/finan-ledger/api/v1/report/cash-flow",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"report",
								"cash-flow"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_report_account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ============================= sort by key",
									"function sortByKey(array, key, type) {",
									"    if(type == \"asc\"){",
									"        return array.sort(function(a, b) {",
									"            var x = a[key]; var y = b[key];",
									"            return ((x > y) ? -1 : ((x < y) ? 1 : 0));",
									"        });",
									"    } else {",
									"        return array.sort(function(a, b) {",
									"            var x = a[key]; var y = b[key];",
									"            return ((x < y) ? -1 : ((x > y) ? 1 : 0));",
									"        });",
									"    }",
									"}",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"",
									"    let list_delete_tnx = pm.environment.get(\"C-list_delete_tnx\");",
									"    switch(testcase){",
									"        case 2:",
									"            /**",
									"             * get account có transaction thuộc invoice tương ứng",
									"             */",
									"            for(let i in list_delete_tnx){",
									"                for(let j in jsData.data){",
									"                    if(list_delete_tnx[i].account_id == jsData.data[j].id){",
									"                        list_delete_tnx[i].account_type = jsData.data[j].account_type;",
									"                        list_delete_tnx[i].credit_amount = jsData.data[j].credit_amount;",
									"                        list_delete_tnx[i].debit_amount = jsData.data[j].debit_amount;",
									"                        list_delete_tnx[i].start_amount = jsData.data[j].start_amount;",
									"                        list_delete_tnx[i].end_amount = jsData.data[j].end_amount;",
									"                        break;",
									"                    }",
									"                }",
									"            }",
									"            pm.environment.set(\"C-list_delete_tnx\",list_delete_tnx);",
									"            console.log(\"list_delete_tnx after update bank account amount: \",list_delete_tnx);",
									"",
									"            postman.setNextRequest(\"get_report_account_receivable_paid\"); // get_report_account_receivable_paid",
									"            break;",
									"        case 4:",
									"            // những tnx manual thì thay đổi, còn của bank sẽ giữ nguyên",
									"            let count = 0;",
									"            let tnx_amount;",
									"            let isFound = false;",
									"            for(let i in list_delete_tnx){",
									"                if(list_delete_tnx[i].is_txn_bank){",
									"                    for(let j in jsData.data){",
									"                        if(list_delete_tnx[i].account_id == jsData.data[j].id){",
									"                            isFound = true;",
									"                            count++;",
									"                            // nothing happen",
									"                            pm.test(\"nothing happen with credit_amount of account \" + list_delete_tnx[i].account_name, function () {",
									"                                console.log(\"old: \" + list_delete_tnx[i].credit_amount);",
									"                                console.log(\"act: \" + jsData.data[j].credit_amount);",
									"                                pm.expect(jsData.data[j].credit_amount == list_delete_tnx[i].credit_amount).to.be.true;",
									"                            });",
									"                            pm.test(\"nothing happen with debit_amount of account \" + list_delete_tnx[i].account_name, function () {",
									"                                console.log(\"old: \" + list_delete_tnx[i].debit_amount);",
									"                                console.log(\"act: \" + jsData.data[j].debit_amount);",
									"                                pm.expect(jsData.data[j].debit_amount == list_delete_tnx[i].debit_amount).to.be.true;",
									"                            });",
									"                            pm.test(\"nothing happen with end_amount of account \" + list_delete_tnx[i].account_name, function () {",
									"                                console.log(\"old: \" + list_delete_tnx[i].end_amount);",
									"                                console.log(\"act: \" + jsData.data[j].end_amount);",
									"                                pm.expect(jsData.data[j].end_amount == list_delete_tnx[i].end_amount).to.be.true;",
									"                            });",
									"                            pm.test(\"nothing happen with start_amount of account \" + list_delete_tnx[i].account_name, function () {",
									"                                console.log(\"old: \" + list_delete_tnx[i].start_amount);",
									"                                console.log(\"act: \" + jsData.data[j].start_amount);",
									"                                pm.expect(jsData.data[j].start_amount == list_delete_tnx[i].start_amount).to.be.true;",
									"                            });",
									"                            break;",
									"                        }",
									"                    }",
									"                } else {",
									"                    for(let j in jsData.data){",
									"                        if(list_delete_tnx[i].account_id == jsData.data[j].id){",
									"                            isFound = true;",
									"                            count++;",
									"                            // decrease debit_amount respective with tnx",
									"                            // case này có thể lỗi nếu có nhiều transaction cùng account_id (manual tnx)",
									"                            tnx_amount = parseFloat(list_delete_tnx[i].amount);",
									"                            pm.test(\"debit_amount of account \" + list_delete_tnx[i].account_name + \" decrease \" + tnx_amount, function () {",
									"                                console.log(\"old: \" + list_delete_tnx[i].debit_amount);",
									"                                console.log(\"expected: \" + (list_delete_tnx[i].debit_amount - tnx_amount));",
									"                                console.log(\"act: \" + jsData.data[j].debit_amount);",
									"                                pm.expect(jsData.data[j].debit_amount == list_delete_tnx[i].debit_amount - tnx_amount).to.be.true;",
									"                            });",
									"                            pm.test(\"end_amount of account \" + list_delete_tnx[i].account_name + \" decrease \" + tnx_amount, function () {",
									"                                console.log(\"old: \" + list_delete_tnx[i].end_amount);",
									"                                console.log(\"expected: \" + (list_delete_tnx[i].end_amount - tnx_amount));",
									"                                console.log(\"act: \" + jsData.data[j].end_amount);",
									"                                pm.expect(jsData.data[j].end_amount == list_delete_tnx[i].end_amount - tnx_amount).to.be.true;",
									"                            });",
									"                            pm.test(\"nothing happen with credit_amount of account \" + list_delete_tnx[i].account_name, function () {",
									"                                console.log(\"old: \" + list_delete_tnx[i].credit_amount);",
									"                                console.log(\"act: \" + jsData.data[j].credit_amount);",
									"                                pm.expect(jsData.data[j].credit_amount == list_delete_tnx[i].credit_amount).to.be.true;",
									"                            });",
									"                            // chổ này có khả năng sai, cần handle thêm case đầu/cuối tháng khi khung thời gian check có invoice nằm trước start => thay đổi số start",
									"                            pm.test(\"nothing happen with start_amount of account \" + list_delete_tnx[i].account_name, function () {",
									"                                console.log(\"old: \" + list_delete_tnx[i].start_amount);",
									"                                console.log(\"act: \" + jsData.data[j].start_amount);",
									"                                pm.expect(jsData.data[j].start_amount == list_delete_tnx[i].start_amount).to.be.true;",
									"                            });",
									"                            break;",
									"                        }",
									"                    }",
									"                }",
									"                pm.test(\"Found account \" + list_delete_tnx[i].account_name, function () {",
									"                    pm.expect(isFound).to.be.true;",
									"                });",
									"            }",
									"",
									"            pm.test(\"Found all account!\", function () {",
									"                pm.expect(count == list_delete_tnx.length).to.be.true;",
									"            });",
									"",
									"            postman.setNextRequest(\"get_report_account_receivable_paid\"); // get_report_account_receivable_paid",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get report cash_flow, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"",
									"console.log(\"current_period_start: \" + pm.environment.get(\"C-previous_period_start\"));",
									"console.log(\"current_period_end: \" + pm.environment.get(\"C-current_period_end\"));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"branch_id\": {{C-business_id}},\n    \"current_period_start\": \"{{C-previous_period_start}}\",\n    \"current_period_end\": \"{{C-current_period_end}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finan_base_url}}/finan-ledger/api/v1/report/account",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"report",
								"account"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_report_account_receivable_paid",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// lấy full tháng hiện tại",
									"let today = new Date();",
									"// let firstDay = new Date(today.getFullYear(), today.getMonth(), 1);",
									"let lastDay = new Date(today.getFullYear(), today.getMonth() + 1, 1);",
									"",
									"// lấy full tháng trước",
									"let firstDay = new Date(today.getFullYear(), today.getMonth() - 1, 1);",
									"// let lastDay = new Date(today.getFullYear(), today.getMonth(), 1);",
									"",
									"// lấy full ngày hiện tại",
									"// let firstDay = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0 ,0, 0);",
									"// let lastDay = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 23, 59 ,59, 0);",
									"",
									"// lấy n ngày đến hiện tại",
									"// let firstDayTimestamp = Math.floor(firstDay.getTime()/1000) - 2*24*60*60;",
									"// let start_day_ago = new Date(firstDayTimestamp*1000);",
									"",
									"let start_time= firstDay.toISOString();",
									"let end_time= lastDay.toISOString();",
									"",
									"console.log(\"current_period_start: \" + start_time);",
									"console.log(\"current_period_end: \" + end_time);",
									"",
									"pm.environment.set(\"C-start_time\",start_time);",
									"pm.environment.set(\"C-end_time\",end_time);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let paid_amount_by_time_range = null;",
									"    try {",
									"        paid_amount_by_time_range = jsData.data.paid_amount_by_time_range;",
									"    } catch {",
									"        console.log(\"Can't get data\");",
									"    }",
									"",
									"    switch(testcase){",
									"        case 2:",
									"            pm.test(\"Got paid_amount_by_time_range \" + paid_amount_by_time_range, function () {",
									"                pm.environment.set(\"C-paid_amount_by_time_range\",paid_amount_by_time_range);",
									"                pm.expect(paid_amount_by_time_range != null).to.be.true;",
									"            });",
									"",
									"            postman.setNextRequest(\"get_report_account_receivable_unpaid\"); //get_report_account_receivable_unpaid",
									"            break;",
									"        case 4:",
									"            // tất cả transaction dính với invoice bị delete sẽ đều làm giảm paid_amount dù là bank tnx (vì đã mất đầu coa của invoice)",
									"            let old_paid_amount_by_time_range = pm.environment.get(\"C-paid_amount_by_time_range\");",
									"            let list_delete_tnx = pm.environment.get(\"C-list_delete_tnx\");",
									"            let total_paid_amount_decrease = 0;",
									"            for(let i in list_delete_tnx){",
									"                total_paid_amount_decrease += list_delete_tnx[i].amount;",
									"            }",
									"",
									"            pm.test(\"paid_amount_by_time_range decrease \" + total_paid_amount_decrease, function () {",
									"                console.log(\"act: \" + paid_amount_by_time_range);",
									"                console.log(\"old: \" + old_paid_amount_by_time_range);",
									"                pm.expect(paid_amount_by_time_range == old_paid_amount_by_time_range - total_paid_amount_decrease).to.be.true;",
									"            });",
									"",
									"            postman.setNextRequest(\"get_report_account_receivable_unpaid\"); // get_report_account_receivable_unpaid",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get report account receivable unpaid, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"branch_id\": {{C-business_id}},\n    \"current_period_start\": \"{{C-start_time}}\",\n    \"current_period_end\": \"{{C-end_time}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finan_base_url}}/finan-ledger/api/v1/report/account-receivable-card-paid",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"report",
								"account-receivable-card-paid"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_report_account_receivable_unpaid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let unpaid_account_receivable = null;",
									"    try {",
									"        unpaid_account_receivable = jsData.data.unpaid_amount_lifetime_categories;",
									"    } catch {",
									"        console.log(\"Can't get data\");",
									"    }",
									"",
									"    switch(testcase){",
									"        case 2:",
									"            pm.test(\"Got unpaid_account_receivable data\", function () {",
									"                pm.environment.set(\"C-unpaid_account_receivable\",unpaid_account_receivable);",
									"                pm.expect(unpaid_account_receivable != null).to.be.true;",
									"            });",
									"",
									"            console.log(\"unpaid_account_receivable: \", unpaid_account_receivable);",
									"",
									"            postman.setNextRequest(\"get_report_account_receivable_customer\"); //get_report_account_receivable_customer",
									"            break;",
									"        case 4:",
									"            /**",
									"             * Nếu invoive bị delete fully_paid => nothing happen",
									"             * Else giảm số lượng due_amount của invoice bị delete",
									"             * - Note: chổ này handle luôn phần due_amount thuộc loại nào: unpaid_due, less, between, over",
									"             */",
									"            let invoice_delete_obj = pm.environment.get(\"C-invoice_delete_obj\");",
									"            let old_data = pm.environment.get(\"C-unpaid_account_receivable\");",
									"            let due_amount = parseFloat(invoice_delete_obj.due_amount);",
									"            console.log(\"due_amount: \" + (old_data.unpaid_total - due_amount));",
									"",
									"            // unpaid_total",
									"            pm.test(\"Total unpaid decrease \" + due_amount, function () {",
									"                console.log(\"old: \" + old_data.unpaid_total);",
									"                console.log(\"new: \" + unpaid_account_receivable.unpaid_total);",
									"                pm.expect(unpaid_account_receivable.unpaid_total == old_data.unpaid_total - due_amount).to.be.true;",
									"            });",
									"",
									"            let due_date = new Date(invoice_delete_obj.due_at);",
									"            let due_date_timestamp = Math.floor(due_date.getTime()/1000);",
									"            let today = new Date();",
									"            let today_timestamp = Math.floor(today.getTime()/1000);",
									"            let due_type;",
									"            console.log(\"debug: \" + (due_date_timestamp - today_timestamp));",
									"            if(due_date_timestamp > today_timestamp){",
									"                due_type = \"undue\";",
									"            } else {",
									"                if(today_timestamp - due_date_timestamp > 60*24*60*60){",
									"                    due_type = \"overdue_over\";",
									"                } else if (today_timestamp - due_date_timestamp > 30*24*60*60){",
									"                    due_type = \"overdue_between\";",
									"                } else {",
									"                    due_type = \"overdue_less\";",
									"                }",
									"            }",
									"            pm.environment.set(\"C-due_type\",due_type);",
									"",
									"            console.log(\"old: \",old_data);",
									"            console.log(\"new: \",unpaid_account_receivable);",
									"            switch(due_type){",
									"                case \"undue\":",
									"                    // unpaid_due",
									"                    pm.test(\"unpaid_due decrease \" + due_amount, function () {",
									"                        console.log(\"old: \" + old_data.unpaid_due);",
									"                        console.log(\"new: \" + unpaid_account_receivable.unpaid_due);",
									"                        pm.expect(unpaid_account_receivable.unpaid_due == old_data.unpaid_due - due_amount).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_less",
									"                    pm.test(\"nothing happen unpaid_overdue_less\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_less == old_data.unpaid_overdue_less).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_between",
									"                    pm.test(\"nothing happen unpaid_overdue_between\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_between == old_data.unpaid_overdue_between).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_over",
									"                    pm.test(\"nothing happen unpaid_overdue_over\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_over == old_data.unpaid_overdue_over).to.be.true;",
									"                    });",
									"                    break;",
									"                case \"overdue_less\":",
									"                    // unpaid_due",
									"                    pm.test(\"nothing happen unpaid_due\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_due == old_data.unpaid_due).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_less",
									"                    pm.test(\"unpaid_overdue_less decrease \" + due_amount, function () {",
									"                        console.log(\"old: \" + old_data.unpaid_overdue_less);",
									"                        console.log(\"new: \" + unpaid_account_receivable.unpaid_overdue_less);",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_less == old_data.unpaid_overdue_less - due_amount).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_between",
									"                    pm.test(\"nothing happen unpaid_overdue_between\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_between == old_data.unpaid_overdue_between).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_over",
									"                    pm.test(\"nothing happen unpaid_overdue_over\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_over == old_data.unpaid_overdue_over).to.be.true;",
									"                    });",
									"                    break;",
									"                case \"overdue_between\":",
									"                    // unpaid_due",
									"                    pm.test(\"nothing happen unpaid_due\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_due == old_data.unpaid_due).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_less",
									"                    pm.test(\"nothing happen unpaid_overdue_less\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_less == old_data.unpaid_overdue_less).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_between",
									"                    pm.test(\"unpaid_overdue_between decrease \" + due_amount, function () {",
									"                        console.log(\"old: \" + old_data.unpaid_overdue_between);",
									"                        console.log(\"new: \" + unpaid_account_receivable.unpaid_overdue_between);",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_between == old_data.unpaid_overdue_between - due_amount).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_over",
									"                    pm.test(\"nothing happen unpaid_overdue_over\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_over == old_data.unpaid_overdue_over).to.be.true;",
									"                    });",
									"                    break;",
									"                case \"overdue_over\":",
									"                    // unpaid_due",
									"                    pm.test(\"nothing happen unpaid_due\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_due == old_data.unpaid_due).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_less",
									"                    pm.test(\"nothing happen unpaid_overdue_less\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_less == old_data.unpaid_overdue_less).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_between",
									"                    pm.test(\"unpaid_overdue_between increase\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_between == old_data.unpaid_overdue_between).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_over",
									"                    pm.test(\"unpaid_overdue_over decrease \" + due_amount, function () {",
									"                        console.log(\"old: \" + old_data.unpaid_overdue_over);",
									"                        console.log(\"new: \" + unpaid_account_receivable.unpaid_overdue_over);",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_over == old_data.unpaid_overdue_over - due_amount).to.be.true;",
									"                    });",
									"                    break;",
									"                default:",
									"                    pm.test(\"Missing due type\", function () {",
									"                        pm.expect(false).to.be.true;",
									"                    });",
									"                    break;",
									"            }",
									"",
									"            // update new data",
									"            pm.environment.set(\"C-unpaid_account_receivable\",unpaid_account_receivable);",
									"",
									"            postman.setNextRequest(\"get_report_account_receivable_customer\"); //get_report_account_receivable_customer",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get report account receivable unpaid, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"branch_id\": {{C-business_id}},\n    \"due_days\": 30\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finan_base_url}}/finan-ledger/api/v1/report/account-receivable-card-unpaid",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"report",
								"account-receivable-card-unpaid"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_report_account_receivable_customer",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let page = pm.environment.get(\"C-page\");",
									"",
									"if(!page){",
									"    page = 1;",
									"    pm.environment.set(\"C-page\",page);",
									"",
									"    let page_size = 100;",
									"    pm.environment.set(\"C-page_size\",page_size);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = JSON.parse(responseBody);",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let total_pages = jsData.meta.total_pages;",
									"    let page = pm.environment.get(\"C-page\");",
									"",
									"    let contact_obj = pm.environment.get(\"C-contact_obj\");",
									"    let act_contact_obj;",
									"    let isFound = false;",
									"    switch(testcase){",
									"        case 2:",
									"            for(let item in jsData.data){",
									"                if(contact_obj.contact_id == jsData.data[item].contact_id){",
									"                    isFound = true;",
									"                    contact_obj.unpaid_total = jsData.data[item].unpaid_total;",
									"                    contact_obj.unpaid_due = jsData.data[item].unpaid_due;",
									"                    contact_obj.unpaid_overdue_less = jsData.data[item].unpaid_overdue_less;",
									"                    contact_obj.unpaid_overdue_between = jsData.data[item].unpaid_overdue_between;",
									"                    contact_obj.unpaid_overdue_over = jsData.data[item].unpaid_overdue_over;",
									"                    contact_obj.full_count = jsData.data[item].full_count;",
									"                    break;",
									"                }",
									"            }",
									"            pm.environment.set(\"C-contact_obj\",contact_obj);",
									"            break;",
									"        case 4:",
									"            for(let item in jsData.data){",
									"                if(contact_obj.contact_id == jsData.data[item].contact_id){",
									"                    isFound = true;",
									"                    act_contact_obj = jsData.data[item];",
									"                    break;",
									"                }",
									"            }",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow\");",
									"            break;",
									"    }",
									"",
									"    if(page >= total_pages || isFound){",
									"        // must clear page & page_size",
									"        pm.environment.unset(\"C-page\");",
									"        pm.environment.unset(\"C-page_size\");",
									"",
									"        switch(testcase){",
									"            case 2:",
									"                pm.test(\"Found customer in report\", function () {",
									"                    pm.expect(isFound).to.be.true;",
									"                });",
									"",
									"                pm.test(\"Got more report info of contact \" + contact_obj.phone_number, function () {",
									"                    pm.expect(\"unpaid_total\" in contact_obj).to.be.true;",
									"                });",
									"                console.log(\"contact_obj: \", contact_obj);",
									"",
									"                postman.setNextRequest(\"get_report_account_receivable_invoice\"); // get_report_account_receivable_invoice",
									"                break;",
									"            case 4:",
									"                let invoice_delete_obj = pm.environment.get(\"C-invoice_delete_obj\");",
									"                due_amount = parseFloat(invoice_delete_obj.due_amount);",
									"",
									"                let due_type = pm.environment.get(\"C-due_type\");",
									"                if(act_contact_obj.contact_id == invoice_delete_obj.contact_id){",
									"                    isFound = true;",
									"                    console.log(\"Found \" + contact_obj.name + ' - ' + contact_obj.phone_number);",
									"                    ",
									"                    pm.test(\"unpaid_total decrease \" + due_amount, function () {",
									"                        console.log(\"new: \" + act_contact_obj.unpaid_total);",
									"                        console.log(\"expected: \" + (act_contact_obj.unpaid_total - due_amount));",
									"                        console.log(\"old: \" + contact_obj.unpaid_total);",
									"                        pm.expect(act_contact_obj.unpaid_total.toFixed(2) == (contact_obj.unpaid_total - due_amount).toFixed(2)).to.be.true;",
									"                    });",
									"",
									"                    switch(due_type){",
									"                        case \"undue\":",
									"                            // unpaid_due",
									"                            pm.test(\"unpaid_due decrease \" + due_amount, function () {",
									"                                console.log(\"old: \" + act_contact_obj.unpaid_due);",
									"                                console.log(\"new: \" + contact_obj.unpaid_due);",
									"                                pm.expect(act_contact_obj.unpaid_due.toFixed(2) == (contact_obj.unpaid_due - due_amount).toFixed(2)).to.be.true;",
									"                            });",
									"",
									"                            // unpaid_overdue_less",
									"                            pm.test(\"nothing happen unpaid_overdue_less\", function () {",
									"                                pm.expect(contact_obj.unpaid_overdue_less == act_contact_obj.unpaid_overdue_less).to.be.true;",
									"                            });",
									"",
									"                            // unpaid_overdue_between",
									"                            pm.test(\"nothing happen unpaid_overdue_between\", function () {",
									"                                pm.expect(contact_obj.unpaid_overdue_between == act_contact_obj.unpaid_overdue_between).to.be.true;",
									"                            });",
									"",
									"                            // unpaid_overdue_over",
									"                            pm.test(\"nothing happen unpaid_overdue_over\", function () {",
									"                                pm.expect(contact_obj.unpaid_overdue_over == act_contact_obj.unpaid_overdue_over).to.be.true;",
									"                            });",
									"                            break;",
									"                        case \"overdue_less\":",
									"                            // unpaid_due",
									"                            pm.test(\"nothing happen unpaid_due\", function () {",
									"                                pm.expect(contact_obj.unpaid_due == act_contact_obj.unpaid_due).to.be.true;",
									"                            });",
									"",
									"                            // unpaid_overdue_less",
									"                            pm.test(\"unpaid_overdue_less decrease \" + due_amount, function () {",
									"                                console.log(\"old: \" + act_contact_obj.unpaid_overdue_less);",
									"                                console.log(\"new: \" + contact_obj.unpaid_overdue_less);",
									"                                pm.expect(act_contact_obj.unpaid_overdue_less.toFixed(2) == (contact_obj.unpaid_overdue_less - due_amount).toFixed(2)).to.be.true;",
									"                            });",
									"",
									"                            // unpaid_overdue_between",
									"                            pm.test(\"nothing happen unpaid_overdue_between\", function () {",
									"                                pm.expect(contact_obj.unpaid_overdue_between == act_contact_obj.unpaid_overdue_between).to.be.true;",
									"                            });",
									"",
									"                            // unpaid_overdue_over",
									"                            pm.test(\"nothing happen unpaid_overdue_over\", function () {",
									"                                pm.expect(contact_obj.unpaid_overdue_over == act_contact_obj.unpaid_overdue_over).to.be.true;",
									"                            });",
									"                            break;",
									"                        case \"overdue_between\":",
									"                            // unpaid_due",
									"                            pm.test(\"nothing happen unpaid_due\", function () {",
									"                                pm.expect(contact_obj.unpaid_due == act_contact_obj.unpaid_due).to.be.true;",
									"                            });",
									"",
									"                            // unpaid_overdue_less",
									"                            pm.test(\"nothing happen unpaid_overdue_less\", function () {",
									"                                pm.expect(contact_obj.unpaid_overdue_less == act_contact_obj.unpaid_overdue_less).to.be.true;",
									"                            });",
									"",
									"                            // unpaid_overdue_between",
									"                            pm.test(\"unpaid_overdue_between decrease \" + due_amount, function () {",
									"                                console.log(\"old: \" + act_contact_obj.unpaid_overdue_between);",
									"                                console.log(\"new: \" + contact_obj.unpaid_overdue_between);",
									"                                pm.expect(act_contact_obj.unpaid_overdue_between.toFixed(2) == (contact_obj.unpaid_overdue_between - due_amount).toFixed(2)).to.be.true;",
									"                            });",
									"",
									"                            // unpaid_overdue_over",
									"                            pm.test(\"nothing happen unpaid_overdue_over\", function () {",
									"                                pm.expect(contact_obj.unpaid_overdue_over == act_contact_obj.unpaid_overdue_over).to.be.true;",
									"                            });",
									"                            break;",
									"                        case \"overdue_over\":",
									"                            // unpaid_due",
									"                            pm.test(\"nothing happen unpaid_due\", function () {",
									"                                pm.expect(contact_obj.unpaid_due == act_contact_obj.unpaid_due).to.be.true;",
									"                            });",
									"",
									"                            // unpaid_overdue_less",
									"                            pm.test(\"nothing happen unpaid_overdue_less\", function () {",
									"                                pm.expect(contact_obj.unpaid_overdue_less == act_contact_obj.unpaid_overdue_less).to.be.true;",
									"                            });",
									"",
									"                            // unpaid_overdue_between",
									"                            pm.test(\"nothing happen unpaid_overdue_between\", function () {",
									"                                pm.expect(contact_obj.unpaid_overdue_between == act_contact_obj.unpaid_overdue_between).to.be.true;",
									"                            });",
									"",
									"                            // unpaid_overdue_over",
									"                            pm.test(\"unpaid_overdue_over decrease \" + due_amount, function () {",
									"                                console.log(\"old: \" + act_contact_obj.unpaid_overdue_over);",
									"                                console.log(\"new: \" + contact_obj.unpaid_overdue_over);",
									"                                pm.expect(act_contact_obj.unpaid_overdue_over.toFixed(2) == (contact_obj.unpaid_overdue_over - due_amount).toFixed(2)).to.be.true;",
									"                            });",
									"                            break;",
									"                        default:",
									"                            pm.test(\"Missing due type\", function () {",
									"                                pm.expect(false).to.be.true;",
									"                            });",
									"                            break;",
									"                    }",
									"                    break;",
									"                }",
									"                ",
									"                pm.test(\"Found customer\", function () {",
									"                    pm.expect(isFound).to.be.true;",
									"                });",
									"",
									"",
									"                postman.setNextRequest(\"get_report_account_receivable_invoice\"); // get_report_account_receivable_invoice",
									"                break;",
									"            default:",
									"                console.log(\"Missing flow, end test\");",
									"                postman.setNextRequest(null);",
									"                break;",
									"        }",
									"    } else {",
									"        page++;",
									"        pm.environment.set(\"C-page\",page);",
									"",
									"        console.log(\"view next page (\" + page + \") to get more product\");",
									"        postman.setNextRequest(\"get_report_account_receivable_customer\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get list product, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"branch_id\": {{C-business_id}},\n    \"due_days\": 30,\n    \"page\": {{C-page}},\n    \"page_size\": {{C-page_size}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finan_base_url}}/finan-ledger/api/v1/report/account-receivable-customer-unpaid",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"report",
								"account-receivable-customer-unpaid"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_report_account_receivable_invoice",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let page = pm.environment.get(\"C-page\");",
									"",
									"if(!page){",
									"    page = 1;",
									"    pm.environment.set(\"C-page\",page);",
									"",
									"    let page_size = 300;",
									"    pm.environment.set(\"C-page_size\",page_size);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = JSON.parse(responseBody);",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let total_pages = jsData.meta.total_pages;",
									"    let page = pm.environment.get(\"C-page\");",
									"",
									"    let invoice_delete_obj = pm.environment.get(\"C-invoice_delete_obj\");",
									"    let isFound = false;",
									"    switch(testcase){",
									"        case 2:",
									"            if(invoice_delete_obj.payment_status == \"fully_paid\"){",
									"                console.log(\"đơn hàng đã thanh toán nên sẽ không show trong list\");",
									"                for(let i in jsData.data){",
									"                    if(jsData.data[i].id == invoice_delete_obj.invoice_id){",
									"                        isFound = true;",
									"                        break;",
									"                    }",
									"                }",
									"            } else {",
									"                for(let i in jsData.data){",
									"                    if(jsData.data[i].id == invoice_delete_obj.invoice_id){",
									"                        isFound = true;",
									"                        invoice_delete_obj.unpaid_total = jsData.data[i].unpaid_total;",
									"                        invoice_delete_obj.unpaid_due = jsData.data[i].unpaid_due;",
									"                        invoice_delete_obj.unpaid_overdue_less = jsData.data[i].unpaid_overdue_less;",
									"                        invoice_delete_obj.unpaid_overdue_between = jsData.data[i].unpaid_overdue_between;",
									"                        invoice_delete_obj.unpaid_overdue_over = jsData.data[i].unpaid_overdue_over;",
									"                        invoice_delete_obj.full_count = jsData.data[i].full_count;",
									"                        break;",
									"                    }",
									"                }",
									"            }",
									"            break;",
									"        case 4:",
									"            for(let i in jsData.data){",
									"                if(jsData.data[i].id == invoice_delete_obj.invoice_id){",
									"                    isFound = true;",
									"                    break;",
									"                }",
									"            }",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow\");",
									"            break;",
									"    }",
									"",
									"    if(page >= total_pages || isFound){",
									"        // must clear page & page_size",
									"        pm.environment.unset(\"C-page\");",
									"        pm.environment.unset(\"C-page_size\");",
									"",
									"        switch(testcase){",
									"            case 2:",
									"                if(invoice_delete_obj.payment_status == \"fully_paid\"){",
									"                    pm.test(\"Don't display fully_paid invoice in report\", function () {",
									"                        pm.expect(isFound).to.be.false;",
									"                    });",
									"                } else {",
									"                    pm.test(\"Update report data for invoice_delete_obj\", function () {",
									"                        pm.environment.set(\"C-invoice_delete_obj\",invoice_delete_obj);",
									"                        console.log(\"invoice_delete_obj: \",invoice_delete_obj);",
									"                        pm.expect(\"unpaid_total\" in invoice_delete_obj).to.be.true;",
									"                    });",
									"                }",
									"",
									"                postman.setNextRequest(\"report_invoice_overdue\"); // report_invoice_overdue",
									"                break;",
									"            case 4:",
									"                pm.test(\"Removed delete_invoice out list\", function () {",
									"                    pm.expect(isFound).to.be.false;",
									"                });",
									"                ",
									"                postman.setNextRequest(\"report_invoice_overdue\"); // report_invoice_overdue",
									"                break;",
									"            default:",
									"                console.log(\"Missing flow, end test\");",
									"                postman.setNextRequest(null);",
									"                break;",
									"        }",
									"    } else {",
									"        page++;",
									"        pm.environment.set(\"C-page\",page);",
									"",
									"        console.log(\"view next page (\" + page + \") to get more product\");",
									"        postman.setNextRequest(\"get_report_account_receivable_invoice\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get list product, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"branch_id\": {{C-business_id}},\n    \"due_days\": 30,\n    \"page\": {{C-page}},\n    \"page_size\": {{C-page_size}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finan_base_url}}/finan-ledger/api/v1/report/account-receivable-invoice-unpaid",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"report",
								"account-receivable-invoice-unpaid"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.request.headers.add({",
							" key: \"authorization\",",
							" value: \"Bearer \" + pm.environment.get(\"C-userToken\")",
							"});",
							"",
							"pm.request.headers.add({",
							" key: \"Content-Type\",",
							" value: \"application/json\"",
							"});"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "home-report",
			"item": [
				{
					"name": "todo",
					"item": [
						{
							"name": "report_invoice_overdue",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"/**",
											" * Nếu invoice dc tạo ra là overdue => tăng lên 1, ngược lại thì ko tăng",
											" */",
											"",
											"let testcase = pm.environment.get(\"C-testcase\");",
											"console.log(\"Testcase: \" + testcase);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsData = pm.response.json();",
											"if(pm.response.code == 200){",
											"    let testcase = pm.environment.get(\"C-testcase\");",
											"    let total_number_overdue_invoice = null;",
											"    try {",
											"        total_number_overdue_invoice = jsData.data.total_number_overdue_invoice;",
											"    } catch {",
											"        console.log(\"Can't get data\");",
											"    }",
											"",
											"    let old_total_number_overdue_invoice = pm.environment.get(\"C-total_number_overdue_invoice\");",
											"    switch(testcase){",
											"        case 2:",
											"            pm.test(\"Got total_number_overdue_invoice \" + total_number_overdue_invoice, function () {",
											"                pm.environment.set(\"C-total_number_overdue_invoice\",total_number_overdue_invoice);",
											"                pm.expect(total_number_overdue_invoice != null).to.be.true;",
											"            });",
											"            // nếu invoice delete có final_status là overdue thì sau delete sẽ giảm 1",
											"",
											"            postman.setNextRequest(\"report_uncategorized_transaction\"); //report_uncategorized_transaction",
											"            break;",
											"        case 4:",
											"            let invoice_delete_obj = pm.environment.get(\"C-invoice_delete_obj\");",
											"            if(invoice_delete_obj.final_status == \"overdue\"){",
											"                // delete an overdue invoice => decrease 1",
											"                pm.test(\"total_number_overdue_invoice decrease 1\", function () {",
											"                    pm.expect(total_number_overdue_invoice == old_total_number_overdue_invoice - 1).to.be.true;",
											"                });",
											"            } else {",
											"                // nothing happen",
											"                pm.test(\"Nothing happen with total_number_overdue_invoice!\", function () {",
											"                    pm.expect(total_number_overdue_invoice == old_total_number_overdue_invoice).to.be.true;",
											"                });",
											"            }",
											"",
											"            postman.setNextRequest(\"report_uncategorized_transaction\"); // report_uncategorized_transaction",
											"            break;",
											"        default:",
											"            console.log(\"Missing flow, end test\");",
											"            postman.setNextRequest(null);",
											"            break;",
											"    }",
											"} else {",
											"    console.log(\"Can't get report account receivable unpaid, end test\",jsData);",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-location-timezone",
										"value": "UTC+07:00",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{C-userToken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"branch_id\": {{C-business_id}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{finan_base_url}}/finan-ledger/api/v1/report/to-do-overdue-invoice-lifetime",
									"host": [
										"{{finan_base_url}}"
									],
									"path": [
										"finan-ledger",
										"api",
										"v1",
										"report",
										"to-do-overdue-invoice-lifetime"
									]
								}
							},
							"response": []
						},
						{
							"name": "report_uncategorized_transaction",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"/**",
											" * khi tạo invoice thì ko ảnh hưởng API này",
											" */",
											"",
											"let testcase = pm.environment.get(\"C-testcase\");",
											"console.log(\"Testcase: \" + testcase);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsData = pm.response.json();",
											"if(pm.response.code == 200){",
											"    let testcase = pm.environment.get(\"C-testcase\");",
											"    let total_number_uncategorized_transaction = null;",
											"    try {",
											"        total_number_uncategorized_transaction = jsData.data.total_number_uncategorized_transaction;",
											"    } catch {",
											"        console.log(\"Can't get data\");",
											"    }",
											"",
											"    let old_total_number_uncategorized_transaction = pm.environment.get(\"C-total_number_uncategorized_transaction\");",
											"    switch(testcase){",
											"        case 2:",
											"            pm.test(\"Got total_number_uncategorized_transaction \" + total_number_uncategorized_transaction, function () {",
											"                pm.environment.set(\"C-total_number_uncategorized_transaction\",total_number_uncategorized_transaction);",
											"                pm.expect(total_number_uncategorized_transaction != null).to.be.true;",
											"            });",
											"",
											"            /**",
											"             * Nếu có transaction 1 đầu uncategory (theo invoice) => sau delete sẽ giảm",
											"             * Nếu có transcation bank sau khi delete invoice thì đầu invoice sẽ thành uncategory => sau delete sẽ tăng",
											"             */",
											"",
											"            postman.setNextRequest(\"report_account_lifetime\"); //report_account_lifetime",
											"            break;",
											"        case 4:",
											"            // sau khi delete invoice, tất cả bank transaction sẻ chuyển đầu coa sang uncategorized_income",
											"            let list_delete_tnx = pm.environment.get(\"C-list_delete_tnx\");",
											"            let total_bank_tnx = 0;",
											"            for(let i in list_delete_tnx){",
											"                if(list_delete_tnx[i].is_txn_bank){",
											"                    total_bank_tnx++;",
											"                }",
											"            }",
											"            ",
											"            if(total_bank_tnx > 0){",
											"                pm.test(\"total_number_uncategorized_transaction increase \" + total_bank_tnx, function () {",
											"                    console.log(\"old: \" + old_total_number_uncategorized_transaction);",
											"                    console.log(\"act: \" + total_number_uncategorized_transaction);",
											"                    pm.expect(total_number_uncategorized_transaction == old_total_number_uncategorized_transaction + total_bank_tnx).to.be.true;",
											"                });",
											"            } else {",
											"                pm.test(\"Nothing happen with total_number_uncategorized_transaction \", function () {",
											"                    pm.expect(total_number_uncategorized_transaction == old_total_number_uncategorized_transaction).to.be.true;",
											"                });",
											"            }",
											"            ",
											"            postman.setNextRequest(\"report_account_lifetime\"); // report_account_lifetime",
											"            break;",
											"        default:",
											"            console.log(\"Missing flow, end test\");",
											"            postman.setNextRequest(null);",
											"            break;",
											"    }",
											"} else {",
											"    console.log(\"Can't get report account receivable unpaid, end test\",jsData);",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-location-timezone",
										"value": "UTC+07:00",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{C-userToken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"branch_id\": {{C-business_id}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{finan_base_url}}/finan-ledger/api/v1/report/to-do-uncategorized-transaction",
									"host": [
										"{{finan_base_url}}"
									],
									"path": [
										"finan-ledger",
										"api",
										"v1",
										"report",
										"to-do-uncategorized-transaction"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "account_balance",
					"item": [
						{
							"name": "report_account_lifetime",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsData = pm.response.json();",
											"if(pm.response.code == 200){",
											"    let testcase = pm.environment.get(\"C-testcase\");",
											"    let account_lifetime = null;",
											"    try {",
											"        account_lifetime = jsData;",
											"    } catch {",
											"        console.log(\"Can't get data\");",
											"    }",
											"",
											"    let old_account_lifetime = pm.environment.get(\"C-account_lifetime\");",
											"    switch(testcase){",
											"        case 2:",
											"            pm.test(\"Got account_lifetime \" + account_lifetime, function () {",
											"                pm.environment.set(\"C-account_lifetime\",account_lifetime);",
											"                pm.expect(account_lifetime != null).to.be.true;",
											"            });",
											"",
											"            // check data",
											"            let total_balance = 0;",
											"            for(let i in jsData.data){",
											"                total_balance += jsData.data[i].balance;",
											"            }",
											"            pm.test(\"Data correctly \" + total_balance, function () {",
											"                pm.expect(total_balance.toFixed(2) == jsData.sum_balance).to.be.true;",
											"            });",
											"",
											"            // nếu có tnx manual create khi delete sẽ giảm tương ứng",
											"",
											"            postman.setNextRequest(\"report_cash_flow_period\"); // report_cash_flow_period",
											"            break;",
											"        case 4:",
											"            /**",
											"             * !list_delete_tnx[i].is_txn_bank",
											"             * - nếu invoice_delete_obj.account_id (in - credit) invoice_delete_obj.account_id (out - debit) trong list giảm xuống => giảm tương ứng",
											"             * - ngược lại, name (remaining_accounts) sẽ giảm tương ứng",
											"            */",
											"            let list_delete_tnx = pm.environment.get(\"C-list_delete_tnx\");",
											"            // sum_balance",
											"            let total_decrease_balance = 0;",
											"            for(let i in list_delete_tnx){",
											"                if(!list_delete_tnx[i].is_txn_bank){",
											"                    // case giảm debit => giảm sum_balance",
											"                    total_decrease_balance += list_delete_tnx[i].amount;",
											"                }",
											"            }",
											"            pm.test(\"sum_balance decrease \" + total_decrease_balance, function () {",
											"                console.log(\"act: \" + account_lifetime.sum_balance);",
											"                console.log(\"old: \" + old_account_lifetime.sum_balance);",
											"                pm.expect(account_lifetime.sum_balance == old_account_lifetime.sum_balance - total_decrease_balance).to.be.true;",
											"            });",
											"",
											"            // detail account exchange handle later",
											"            // data cũ",
											"            // let account_obj = null;",
											"            // for(let i = 0; i < old_account_lifetime.data.length; i++){",
											"            //     if(old_account_lifetime.data[i].id == invoice_delete_obj.account_id){",
											"            //         account_obj = old_account_lifetime.data[i];",
											"            //         break;",
											"            //     }",
											"",
											"            //     if(i == old_account_lifetime.data.length - 1){",
											"            //         // remaining_accounts",
											"            //         account_obj = old_account_lifetime.data[i];",
											"            //         break;",
											"            //     }",
											"            // }",
											"",
											"            // // data mới",
											"            // let isFound = false;",
											"            // for(let i in account_lifetime.data){",
											"            //     if(account_lifetime.data[i].id == account_obj.id){",
											"            //         isFound = true;",
											"            //         console.log(\"old: \" + account_obj.balance);",
											"            //         console.log(\"act: \" + account_lifetime.data[i].balance);",
											"            //         if(invoice_delete_obj.txn_type == \"in\"){",
											"            //             // case tăng debit => balance = debit - credit",
											"            //             pm.test(\"balance of \" + account_lifetime.data[i].name + \" increase \" + invoice_delete_obj.amount, function () {",
											"            //                 pm.expect(account_lifetime.data[i].balance == account_obj.balance + invoice_delete_obj.amount).to.be.true;",
											"            //             });",
											"            //         } else {",
											"            //             // case tăng credit",
											"            //             pm.test(\"balance of \" + account_lifetime.data[i].name + \" decrease \" + invoice_delete_obj.amount, function () {",
											"            //                 pm.expect(account_lifetime.data[i].balance == account_obj.balance - invoice_delete_obj.amount).to.be.true;",
											"            //             });",
											"            //         }",
											"            //         break;",
											"            //     }",
											"            // }",
											"",
											"            // pm.test(\"Found exchange account\", function () {",
											"            //     pm.expect(isFound).to.be.true;",
											"            // });",
											"            ",
											"            postman.setNextRequest(\"report_cash_flow_period\"); // report_cash_flow_period",
											"            break;",
											"        default:",
											"            console.log(\"Missing flow, end test\");",
											"            postman.setNextRequest(null);",
											"            break;",
											"    }",
											"} else {",
											"    console.log(\"Can't get report account receivable unpaid, end test\",jsData);",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"/**",
											" * case handle:",
											" * - Nếu account tăng balance ko nằm trong top 5:",
											" *   + TH1: balance tăng làm cho account nhảy vào top 5 => phải show account trong top 5",
											" *   + TH2: balance tăng ko làm cho account nhảy vào top 5 => chỉ thay đổi số của remaining_accounts",
											" * Note: tạo invoice sẽ ko ảnh hưởng, chỉ ảnh hưởng bởi tnx",
											" */",
											"",
											"let testcase = pm.environment.get(\"C-testcase\");",
											"console.log(\"Testcase: \" + testcase);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-location-timezone",
										"value": "UTC+07:00",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "Bearer {{C-userToken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"branch_id\": {{C-business_id}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{finan_base_url}}/finan-ledger/api/v1/report/account-lifetime",
									"host": [
										"{{finan_base_url}}"
									],
									"path": [
										"finan-ledger",
										"api",
										"v1",
										"report",
										"account-lifetime"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "cash_flow",
					"item": [
						{
							"name": "report_cash_flow_period",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"/**",
											" * period: year, month, week",
											" */",
											"",
											"let period = \"year\";",
											"pm.environment.set(\"C-period\",period);",
											"",
											"let testcase = pm.environment.get(\"C-testcase\");",
											"console.log(\"Testcase: \" + testcase);",
											"console.log(\"period: \" + period);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsData = pm.response.json();",
											"if(pm.response.code == 200){",
											"    let testcase = pm.environment.get(\"C-testcase\");",
											"    let cash_flow_period = null;",
											"    try {",
											"        cash_flow_period = jsData.data;",
											"        /**",
											"         * period: week, month, year",
											"         * sum_card_data",
											"         * dates_data",
											"         */",
											"    } catch {",
											"        console.log(\"Can't get report cash_flow data\");",
											"    }",
											"",
											"    switch(testcase){",
											"        case 2:",
											"            pm.test(\"Got cash_flow_period \", function () {",
											"                pm.environment.set(\"C-cash_flow_period\",cash_flow_period);",
											"                pm.expect(cash_flow_period != null).to.be.true;",
											"            });",
											"",
											"            console.log(\"cash_flow_period: \", cash_flow_period);",
											"",
											"            // ================================================ bonus check current data",
											"            // waiting logic updated at phase 2",
											"            // ================================================ ",
											"",
											"            postman.setNextRequest(\"report_profit_loss_period\"); // report_profit_loss_period",
											"            break;",
											"        case 4:",
											"            let list_delete_tnx = pm.environment.get(\"C-list_delete_tnx\");",
											"            let list_income_account = pm.environment.get(\"C-list_income_account\");",
											"            let list_expense_account = pm.environment.get(\"C-list_expense_account\");",
											"            let old_cash_flow_period = pm.environment.get(\"C-cash_flow_period\");",
											"",
											"            // hiện tại chưa chốt login nên tạm thời check phần sum_card_data\\",
											"            /**",
											"             * Tất cả tnx manual sẽ bị xoá => giảm income",
											"             * Bank tnx bị đổi đầu coa thành uncategoried_income => giảm income???",
											"             */",
											"            let total_decrease_income = 0;",
											"            for(let i in list_delete_tnx){",
											"                if(!list_delete_tnx[i].is_txn_bank){",
											"                    total_decrease_income += list_delete_tnx[i].amount;",
											"                }",
											"            }",
											"",
											"            // giảm income",
											"            pm.test(\"total_income decrease \" + total_decrease_income, function () {",
											"                console.log(\"act: \" + cash_flow_period.sum_card_data.total_income);",
											"                console.log(\"old: \" + old_cash_flow_period.sum_card_data.total_income);",
											"                pm.expect(cash_flow_period.sum_card_data.total_income == old_cash_flow_period.sum_card_data.total_income - total_decrease_income).to.be.true;",
											"            });",
											"",
											"            pm.test(\"nothing happen with total_expense\", function () {",
											"                pm.expect(cash_flow_period.sum_card_data.total_expense == old_cash_flow_period.sum_card_data.total_expense).to.be.true;",
											"            });",
											"",
											"            pm.test(\"total_gap decrease \" + total_decrease_income, function () {",
											"                pm.expect(cash_flow_period.sum_card_data.total_gap == old_cash_flow_period.sum_card_data.total_gap - total_decrease_income).to.be.true;",
											"            });",
											"",
											"            postman.setNextRequest(\"report_profit_loss_period\"); // report_profit_loss_period",
											"            break;",
											"        default:",
											"            console.log(\"Missing flow, end test\");",
											"            postman.setNextRequest(null);",
											"            break;",
											"    }",
											"} else {",
											"    console.log(\"Can't get report cash_flow, end test\",jsData);",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-location-timezone",
										"value": "UTC+07:00",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{C-userToken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"branch_id\": {{C-business_id}},\n    \"period\": \"{{C-period}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{finan_base_url}}/finan-ledger/api/v1/report/cash-flow-period",
									"host": [
										"{{finan_base_url}}"
									],
									"path": [
										"finan-ledger",
										"api",
										"v1",
										"report",
										"cash-flow-period"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "profit_n_loss",
					"item": [
						{
							"name": "report_profit_loss_period",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"/**",
											" * \"report_type\": sum,income,expense",
											" * Note: report_type = sum => hiện tại bị null dates_data",
											" * - C1: call từng loại income, expense dể lấy dates_data",
											" * - C2: wait fixing from dev",
											" * => tạm thời xử lý case sum, 2 case còn lại sẽ handle sau",
											" */",
											"let report_type = \"sum\";",
											"pm.environment.set(\"C-report_type\",report_type);",
											"",
											"let testcase = pm.environment.get(\"C-testcase\");",
											"console.log(\"Testcase: \" + testcase);",
											"console.log(\"report_type: \" + report_type);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsData = pm.response.json();",
											"if(pm.response.code == 200){",
											"    let testcase = pm.environment.get(\"C-testcase\");",
											"    let profit_loss_period = null;",
											"    try {",
											"        profit_loss_period = jsData.data;",
											"        /**",
											"         * period: week, month, year",
											"         * sum_card_data",
											"         * dates_data",
											"         */",
											"    } catch {",
											"        console.log(\"Can't get report cash_flow data\");",
											"    }",
											"",
											"    switch(testcase){",
											"        case 2:",
											"            pm.test(\"Got profit_loss_period \", function () {",
											"                pm.environment.set(\"C-profit_loss_period\",profit_loss_period);",
											"                pm.expect(profit_loss_period != null).to.be.true;",
											"            });",
											"",
											"            console.log(\"profit_loss_period: \", profit_loss_period);",
											"",
											"            // ================================================ bonus check current data",
											"            // waiting logic updated at phase 2",
											"            // ================================================ ",
											"",
											"            postman.setNextRequest(\"report_account_receivable_payable_lifetime\"); // report_account_receivable_payable_lifetime",
											"            break;",
											"        case 4:",
											"            let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
											"            let list_debit_account = pm.environment.get(\"C-list_debit_account\");",
											"            let list_credit_account = pm.environment.get(\"C-list_credit_account\");",
											"            let old_profit_loss_period = pm.environment.get(\"C-profit_loss_period\");",
											"",
											"            console.log(\"debug old_profit_loss_period: \", old_profit_loss_period);",
											"            console.log(\"debug profit_loss_period: \", profit_loss_period);",
											"",
											"            // CHƯA CÓ RULE, ĐANG ĐỢI PO DEFINE",
											"",
											"            postman.setNextRequest(\"report_account_receivable_payable_lifetime\"); // report_account_receivable_payable_lifetime",
											"            break;",
											"        default:",
											"            console.log(\"Missing flow, end test\");",
											"            postman.setNextRequest(null);",
											"            break;",
											"    }",
											"} else {",
											"    console.log(\"Can't get report cash_flow, end test\",jsData);",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-location-timezone",
										"value": "UTC+07:00",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{C-userToken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"branch_id\": {{C-business_id}},\n    \"period\": \"{{C-period}}\",\n    \"report_type\": \"{{C-report_type}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{finan_base_url}}/finan-ledger/api/v1/report/profit-loss-period",
									"host": [
										"{{finan_base_url}}"
									],
									"path": [
										"finan-ledger",
										"api",
										"v1",
										"report",
										"profit-loss-period"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "receivable_account",
					"item": [
						{
							"name": "report_account_receivable_payable_lifetime",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"/**",
											" * API này chỉ liên quan khi tnx có link với invoice",
											" */",
											"",
											"let testcase = pm.environment.get(\"C-testcase\");",
											"console.log(\"Testcase: \" + testcase);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsData = pm.response.json();",
											"if(pm.response.code == 200){",
											"    let testcase = pm.environment.get(\"C-testcase\");",
											"    let account_receivable_payable = null;",
											"    try {",
											"        account_receivable_payable = jsData.data;",
											"    } catch {",
											"        console.log(\"Can't get data\");",
											"    }",
											"",
											"    let old_account_receivable_payable = pm.environment.get(\"C-account_receivable_payable\");",
											"    switch(testcase){",
											"        case 2:",
											"            pm.test(\"Got account_receivable_payable\", function () {",
											"                console.log(\"account_receivable_payable: \",account_receivable_payable);",
											"                pm.environment.set(\"C-account_receivable_payable\",account_receivable_payable);",
											"                pm.expect(account_receivable_payable != null).to.be.true;",
											"            });",
											"",
											"            testcase++;",
											"            pm.environment.set(\"C-testcase\",testcase);",
											"            postman.setNextRequest(\"delete_invoice\"); // delete_invoice",
											"            break;",
											"        case 4:",
											"            /**",
											"             * giảm total_unpaid tương ứng với due_amount của delete invoice",
											"             */",
											"            let invoice_delete_obj = pm.environment.get(\"C-invoice_delete_obj\");",
											"            console.log(\"old: \", old_account_receivable_payable);",
											"            console.log(\"new: \", account_receivable_payable);",
											"            if(invoice_delete_obj.final_status == \"fully_paid\"){",
											"                pm.test(\"Nothing happen\", function () {        ",
											"                    pm.expect(JSON.stringify(account_receivable_payable) == JSON.stringify(old_account_receivable_payable)).to.be.true;",
											"                });",
											"            } else {",
											"                pm.test(\"total_unpaid decrease \" + invoice_delete_obj.due_amount, function () {        ",
											"                    pm.expect(account_receivable_payable.total_unpaid == old_account_receivable_payable.total_unpaid - invoice_delete_obj.due_amount).to.be.true;",
											"                });",
											"            }",
											"",
											"            console.log(\"--- End Testsuite 10 ---\");",
											"            postman.setNextRequest(null);",
											"            break;",
											"        default:",
											"            console.log(\"Missing flow, end test\");",
											"            postman.setNextRequest(null);",
											"            break;",
											"    }",
											"} else {",
											"    console.log(\"Can't get report account receivable unpaid, end test\",jsData);",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-location-timezone",
										"value": "UTC+07:00",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{C-userToken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"branch_id\": {{C-business_id}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{finan_base_url}}/finan-ledger/api/v1/report/account-receivable-payable-lifetime",
									"host": [
										"{{finan_base_url}}"
									],
									"path": [
										"finan-ledger",
										"api",
										"v1",
										"report",
										"account-receivable-payable-lifetime"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	]
}