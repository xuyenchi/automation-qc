{
	"info": {
		"_postman_id": "56063624-e53c-4fa6-abc9-c9d4f6dbe90d",
		"name": "finan_09_verify_to_edit_invoice",
		"description": "### Testsuite: Verify to edit invoice\n\n###### Steps:\n\n1. Login\n2. Get data\n    \n    1. contact / get list contact => get list contact & random 1 in this\n    2. account coa / get list account => save internal_account_obj\n    3. account / get account detail => get accounts that use for invoice\n    4. account cash_n_bank / get list bank account => use to create invoice with payment method bank_transfer\n    5. tax / get list tax => get a tax (the same with coa-tax)\n    6. report / get report account receivable - card unpaid (lifetime) => get list respective with every option(s)\n    7. report / get report account receivable - card paid (start - end) => get total\n    8. report / get report account receivable - customer => get data with 5 options (due, less, between, over and total)\n    9. report / get report account receivable - invoice => the same customer with more 3 data (due_date, create_date, contact_id)\n        \n    10. home-report / todo / invoice overdue => get total overdue invoice\n        \n    11. home-report / receivable account => get data\n        \n    12. invoice / get list invoice => get invoice matching with finan_status & status to edit\n        \n    13. posting / get list posting => get all with type (debit/credit)\n3. Edit invoice\n    1. (Only != draft status) Unhappy case: status = \"draft\"\n    2. Unhappy case: missing account_credit\n    3. Unhappy case: missing customer\n    4. Unhappy case: customer with email is wrong format\n    5. Unhappy case: missing amount\n    6. Unhappy case: amount < 0\n    7. Unhappy case: missing entry_code (free rule)\n    8. Unhappy case: entry_code is existed\n    9. Unhappy case: due_date < create_date\n    10. Unhappy case: tax_type = \"\"\n    11. Unhappy case: status = \"\"\n    12. Unhappy case: payment_menthod = \"\"\n    13. Unhappy case: had taxes in both items and payload => NO NEEDED\n    14. Happy case: successful\n4. Check data\n    1. invoice / list invoice => new invoice with correct data\n    2. invoice / invoice detail => had invoice with correct data\n    3. contact / contact detail => debt_amount updated\n    4. account / account detail => update correctly (check all account relation with this invoice)\n    5. buyer view / buyer view invoice detail => update invoice data\n    6. posting / list posting => have new correctly record(s) & data correctly\n    7. report / get report account receivable - card unpaid => update correctly\n    8. report / get report account receivable - card paid => nothing happen\n    9. report / get report account receivable - customer => update correctly\n    10. report / get report account receivable - invoice => update correctly\n    11. home-report / todo / invoice over due => update data\n    12. home-report / receivable account / receivable n payable => update data\n\n###### Note:\n\n- Phân loại doanh thu: get all account belong to income group\n- ~~combine flow 3 & 5~~",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "282640"
	},
	"item": [
		{
			"name": "authen",
			"item": [
				{
					"name": "verify_email_or_phone_number",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/**",
									" * currently, manual to create account pwd & use charles to get it",
									" * default pwd created: 21112007 (prod with default account & no need pwd)",
									" */",
									"",
									"let email = pm.environment.get(\"SER-email\");",
									"let phone_number = pm.environment.get(\"SER-phone_number\");",
									"",
									"console.log(\"--- Start Testsuite 9 ---\");",
									"let testcase = 1;",
									"",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let isPhone = true;",
									"",
									"let payload;",
									"if(isPhone){",
									"    console.log(\"login with phone_number: \" + phone_number);",
									"    payload = {",
									"        \"phone_number\": phone_number",
									"    }",
									"} else {",
									"    console.log(\"login with email: \" + email);",
									"    payload = {",
									"        \"email\": email",
									"    }",
									"}",
									"",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));",
									"pm.environment.set(\"C-testcase\",testcase);",
									"pm.environment.set(\"C-isPhone\",isPhone);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ====================================== parser cURL with method",
									"function parseCURL(request_api, method){",
									"    let curl = \"\";",
									"    if(method == \"PUT\"){",
									"        curl = \"curl --location --request PUT \";",
									"    } else {",
									"        curl = \"curl --location \";",
									"    }",
									"    curl += \"'\" + request_api.url.protocol + \"://\"",
									"    for(let i in request_api.url.host){",
									"        curl += request_api.url.host[i] + \".\";",
									"    }",
									"    curl += \"/\";",
									"    for(let i in request_api.url.path){",
									"        curl += request_api.url.path[i] + \"/\";",
									"    }",
									"    curl += \"' \\\\\\n\";",
									"    for(let i in request_api.header){",
									"        if(i >= request_api.header.length - 1){",
									"            curl += \"--header '\" + request_api.header[i].key + \": \" + request_api.header[i].value + \"'\";",
									"        } else {",
									"            curl += \"--header '\" + request_api.header[i].key + \": \" + request_api.header[i].value + \"' \\\\\\n\";",
									"        }",
									"    }",
									"    switch(method){",
									"        case \"POST\":",
									"            curl += \" \\\\\\n\";",
									"            curl += \"--data '\" + request_api.body.raw + \"'\"",
									"            break;",
									"        case \"PUT\":",
									"            curl += \" \\\\\\n\";",
									"            curl += \"--data-raw '\" + request_api.body.raw + \"'\"",
									"            break;",
									"        default:",
									"            break;",
									"    }",
									"    console.log(curl);",
									"    return curl;",
									"}",
									"// const request_api = pm.request.toJSON();",
									"// parseCURL(request_api, \"POST\");",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"// console.log(pm.request.body);",
									"",
									"if(pm.response.code == 200){",
									"    let jsData = pm.response.json();",
									"",
									"    if(jsData.data.is_existed && jsData.data.has_password){",
									"        postman.setNextRequest(\"login_with_pwd\");",
									"    } else if(jsData.data.is_existed) {",
									"        console.log(\"This account doesn't create pwd, please manual create!!!\");",
									"        postman.setNextRequest(null);",
									"    } else {",
									"        console.log(\"Error:\", JSON.stringify(jsData));",
									"        console.log(\"THIS ACCOUNT IS NOT EXISTED IN SYSTEM, WILL MANUAL CREATE IT\");",
									"        postman.setNextRequest(null);",
									"    }",
									"} else {",
									"    console.log(\"Error, end test\");",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finan_base_url}}/finan-user/api/v1/auth/account/verify",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-user",
								"api",
								"v1",
								"auth",
								"account",
								"verify"
							]
						}
					},
					"response": []
				},
				{
					"name": "login_with_pwd",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// let crypto = require('crypto-js');",
									"",
									"// const algorithm = \"aes-256-gcm\";",
									"// const IV_LEN = 12;",
									"// const AUTH_TAG_LEN = 16;",
									"// const SECRET_KEY = \"7dQ0HwRI5okvwAK0WzxaW6ABFncjeu1E\";",
									"",
									"// function encrypt(message) {",
									"//   const iv = Buffer.from(crypto.randomBytes(IV_LEN));",
									"//   const cipher = crypto.createCipheriv(algorithm, SECRET_KEY, iv, {",
									"//     authTagLength: AUTH_TAG_LEN,",
									"//   });",
									"//   const encryptedData = Buffer.concat([cipher.update(message), cipher.final()]);",
									"//   const authTag = cipher.getAuthTag();",
									"//   const raw = Buffer.concat([iv, encryptedData, authTag]).toString(\"hex\");",
									"//   return raw;",
									"// }",
									"",
									"// const pwd = \"21112007\";",
									"// // var superSecretEncrypted = CryptoJS.AES.encrypt(pwd, SECRET_KEY);",
									"",
									"// let pwd_enc = encrypt(pwd);",
									"// console.log(\"pwd_enc: \" + pwd_enc);",
									"",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"let isPhone = pm.environment.get(\"C-isPhone\");",
									"",
									"let verify_payload = JSON.parse(pm.environment.get(\"C-payload\"));",
									"",
									"let payload;",
									"let version = pm.environment.get(\"x-current-version\");",
									"if(isPhone){",
									"    payload = {",
									"        \"phone_number\": verify_payload.phone_number,",
									"        \"pwd\": pm.environment.get(\"pwd\"),",
									"        \"platform\": \"gtapp\",",
									"        \"device_id\": \"C9102FC6-466C-4980-B795-A91A2FD7F97F\",",
									"        \"app_version\": version,",
									"        \"device_name\": \"iPhone\"",
									"    }",
									"} else {",
									"    payload = {",
									"        \"email\": verify_payload.email,",
									"        \"pwd\": pm.environment.get(\"pwd\"),",
									"        \"platform\": \"gtapp\",",
									"        \"device_id\": \"C9102FC6-466C-4980-B795-A91A2FD7F97F\",",
									"        \"app_version\": version,",
									"        \"device_name\": \"iPhone\"",
									"    }",
									"}",
									"console.log(\"debug: \", payload);",
									"",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    let jsData = pm.response.json();",
									"    // debug",
									"    // console.log(JSON.stringify(jsData));",
									"",
									"    let business_id = null;",
									"    try{",
									"        business_id = jsData.data.business_info.list_business[0].business_id;",
									"    } catch{",
									"        console.log(\"This is new user, must create business_id\");",
									"    }",
									"",
									"    let userToken = jsData.data.token;",
									"    pm.environment.set(\"C-userToken\",userToken);",
									"",
									"    if(business_id == null){",
									"        console.log(\"This user don't have store, please check & use another account\");",
									"        ",
									"        postman.setNextRequest(null);",
									"    } else {",
									"        let userRefreshToken = jsData.data.refresh_token;",
									"",
									"        let userInfo = {",
									"            \"role_name\":jsData.data.business_info.current_role.role_name,",
									"            \"is_owner\":jsData.data.business_info.current_role.is_owner,",
									"            \"user_name\":jsData.data.business_info.list_business[0].user_name,",
									"            \"business_id\":business_id",
									"        }",
									"",
									"        // show log",
									"        // console.log(\"userToken:\",userToken);",
									"        // console.log(\"userRefreshToken:\",userRefreshToken);",
									"        console.log(\"userInfo:\",JSON.stringify(userInfo));",
									"",
									"        pm.environment.set(\"C-userRefreshToken\",userRefreshToken);",
									"        pm.environment.set(\"C-userInfo\",userInfo);",
									"        pm.environment.set(\"C-business_id\",business_id); // business_id",
									"",
									"        let testcase = pm.environment.get(\"C-testcase\");",
									"        testcase++;",
									"        pm.environment.set(\"C-testcase\",testcase);",
									"        postman.setNextRequest(\"get_branch_id\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get Token, end test\");",
									"",
									"    // debug",
									"    let jsData = pm.response.json();",
									"    console.log(\"data:\",JSON.stringify(jsData));",
									"",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finan_base_url}}/finan-user/api/v1/auth/account/login",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-user",
								"api",
								"v1",
								"auth",
								"account",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_branch_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ====================================== parser cURL with method",
									"function parseCURL(request_api, method){",
									"    let curl = \"\";",
									"    if(method == \"PUT\"){",
									"        curl = \"curl --location --request PUT \";",
									"    } else {",
									"        curl = \"curl --location \";",
									"    }",
									"    curl += \"'\" + request_api.url.protocol + \"://\"",
									"    for(let i in request_api.url.host){",
									"        curl += request_api.url.host[i] + \".\";",
									"    }",
									"    curl += \"/\";",
									"    for(let i in request_api.url.path){",
									"        curl += request_api.url.path[i] + \"/\";",
									"    }",
									"    curl += \"' \\\\\\n\";",
									"    for(let i in request_api.header){",
									"        if(i >= request_api.header.length - 1){",
									"            curl += \"--header '\" + request_api.header[i].key + \": \" + request_api.header[i].value + \"'\";",
									"        } else {",
									"            curl += \"--header '\" + request_api.header[i].key + \": \" + request_api.header[i].value + \"' \\\\\\n\";",
									"        }",
									"    }",
									"    switch(method){",
									"        case \"POST\":",
									"            curl += \" \\\\\\n\";",
									"            curl += \"--data '\" + request_api.body.raw + \"'\"",
									"            break;",
									"        case \"PUT\":",
									"            curl += \" \\\\\\n\";",
									"            curl += \"--data-raw '\" + request_api.body.raw + \"'\"",
									"            break;",
									"        default:",
									"            break;",
									"    }",
									"    console.log(curl);",
									"    return curl;",
									"}",
									"// const request_api = pm.request.toJSON();",
									"// parseCURL(request_api, \"GET\");",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let branch_id = null;",
									"    try {",
									"        branch_id = jsData.data.id;",
									"    } catch {",
									"        console.log(\"Can't get branch_id\");",
									"    }",
									"",
									"    pm.test(\"Got branch_id\", function () {",
									"        pm.expect(branch_id != null).to.be.true;",
									"    });",
									"",
									"    if(branch_id != null){",
									"        pm.environment.set(\"C-business_id\",branch_id);",
									"        postman.setNextRequest(\"get_list_contact\"); // get_list_contact",
									"    } else {",
									"        postman.setNextRequest(null);",
									"    }",
									"} else {",
									"    console.log(\"Can't get Token, end test\", jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{finan_base_url}}/finan-business/api/v1/branch/detail/{{C-business_id}}",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-business",
								"api",
								"v1",
								"branch",
								"detail",
								"{{C-business_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "contact",
			"item": [
				{
					"name": "get_list_contact",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    let jsData = JSON.parse(responseBody);",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let total_pages = jsData.meta.total_pages;",
									"    let page = pm.environment.get(\"C-page\");",
									"",
									"    let list_contact = pm.environment.get(\"C-list_contact\");",
									"    if(!list_contact){",
									"        list_contact = [];",
									"    }",
									"",
									"    for(let item in jsData.data){",
									"        if(jsData.data[item].debt_amount == null){",
									"            list_contact[list_contact.length] = {",
									"                \"contact_id\":jsData.data[item].id,",
									"                \"name\":jsData.data[item].name,",
									"                \"phone_number\":jsData.data[item].phone_number,",
									"                \"is_expired\":jsData.data[item].is_expired,",
									"                \"debt_amount\":0,",
									"                \"option\":jsData.data[item].option,",
									"                \"customer_point\":jsData.data[item].customer_point,",
									"                \"state\":jsData.data[item].state,",
									"                \"last_order\":jsData.data[item].last_order",
									"            }",
									"        } else {",
									"            list_contact[list_contact.length] = {",
									"                \"contact_id\":jsData.data[item].id,",
									"                \"name\":jsData.data[item].name,",
									"                \"phone_number\":jsData.data[item].phone_number,",
									"                \"is_expired\":jsData.data[item].is_expired,",
									"                \"debt_amount\":jsData.data[item].debt_amount,",
									"                \"option\":jsData.data[item].option,",
									"                \"customer_point\":jsData.data[item].customer_point,",
									"                \"state\":jsData.data[item].state,",
									"                \"last_order\":jsData.data[item].last_order",
									"            }",
									"        }",
									"    }",
									"    pm.environment.set(\"C-list_contact\",list_contact);",
									"",
									"    if(page >= total_pages){",
									"        // must clear page & page_size",
									"        pm.environment.unset(\"C-page\");",
									"        pm.environment.unset(\"C-page_size\");",
									"",
									"        switch(testcase){",
									"            case 2:",
									"                pm.test(\"Got all contact! \" + list_contact.length, function () {",
									"                    pm.environment.set(\"C-list_contact\",list_contact);",
									"                    pm.expect(list_contact.length > 0).to.be.true;",
									"                });",
									"",
									"                postman.setNextRequest(\"get_debt_amount\"); // get_debt_amount",
									"                break;",
									"            case 4:",
									"                let contact_obj = pm.environment.get(\"C-contact_obj\");",
									"                console.log(\"contact_obj: \" + JSON.stringify(contact_obj))",
									"                let inbound_order_obj = pm.environment.get(\"C-inbound_order_obj\");",
									"                let act_debt_amount, exp_debt_amount;",
									"                // console.log(\"list_contact: \" + JSON.stringify(list_contact))",
									"                for(let item in list_contact){",
									"                    if(list_contact[item].contact_id == contact_obj.contact_id){",
									"                        if(inbound_order_obj.is_debit){",
									"                            act_debt_amount = list_contact[item].debt_amount;",
									"                            exp_debt_amount = contact_obj.debt_amount - (pm.environment.get(\"C-total_amount\") - inbound_order_obj.buyer_pay);",
									"                            console.log(\"debt_amount before: \" + contact_obj.debt_amount);",
									"                            console.log(\"total_amount: \" + pm.environment.get(\"C-total_amount\"));",
									"                            console.log(\"buyer_pay: \" + inbound_order_obj.buyer_pay);",
									"                            // if(contact_obj.option == \"in\"){",
									"                            //     check_debt_amount = ((list_contact[item].debt_amount + pm.environment.get(\"C-total_amount\") - inbound_order_obj.buyer_pay) == list_contact[item].debt_amount);",
									"                            // } else {",
									"                            //     check_debt_amount",
									"                            // }",
									"                        } else {",
									"                            act_debt_amount = list_contact[item].debt_amount;",
									"                            exp_debt_amount = contact_obj.debt_amount;",
									"                        }",
									"                        break;",
									"                    }",
									"                }",
									"",
									"                console.log(\"is_debit: \" + inbound_order_obj.is_debit);",
									"                pm.test(\"debt_amount is correctly! \", function () {",
									"                    console.log(\"Expected: \" + exp_debt_amount);",
									"                    console.log(\"Actual: \" + act_debt_amount);",
									"                    pm.expect(act_debt_amount.toFixed(0) == exp_debt_amount.toFixed(0)).to.be.true;",
									"                });",
									"",
									"                console.log(\"--- End Testsuite ---\");",
									"                postman.setNextRequest(null);",
									"                break;",
									"            default:",
									"                console.log(\"Missing flow, end test\");",
									"                postman.setNextRequest(null);",
									"                break;",
									"        }",
									"    } else {",
									"        page++;",
									"        pm.environment.set(\"C-page\",page);",
									"",
									"        console.log(\"view next page (\" + page + \") to get more contact\");",
									"        postman.setNextRequest(\"seller_view_list_contact\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get list contact, end test\");",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let page = pm.environment.get(\"C-page\");",
									"",
									"if(!page){",
									"    page = 1;",
									"    pm.environment.set(\"C-page\",page);",
									"",
									"    let page_size = 50;",
									"    pm.environment.set(\"C-page_size\",page_size);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{finan_base_url}}/finan-business/api/v1/contact/get-list?type=&search=&business_id={{C-business_id}}&page={{C-page}}&page_size={{C-page_size}}&sort=&option=&state=waiting_confirm,delivering&is_active=true",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-business",
								"api",
								"v1",
								"contact",
								"get-list"
							],
							"query": [
								{
									"key": "type",
									"value": ""
								},
								{
									"key": "search",
									"value": ""
								},
								{
									"key": "business_id",
									"value": "{{C-business_id}}"
								},
								{
									"key": "page",
									"value": "{{C-page}}"
								},
								{
									"key": "page_size",
									"value": "{{C-page_size}}"
								},
								{
									"key": "sort",
									"value": ""
								},
								{
									"key": "option",
									"value": ""
								},
								{
									"key": "state",
									"value": "waiting_confirm,delivering"
								},
								{
									"key": "is_active",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get_debt_amount",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// random number between min and max",
									"function getRandomInt(min, max) {",
									"  \treturn Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"switch(testcase) {",
									"    case 2:",
									"        let list_contact = pm.environment.get(\"C-list_contact\");",
									"        let ranCon = getRandomInt(0,list_contact.length - 1);",
									"",
									"        console.log(\"Will edit processing order with contact: \" + JSON.stringify(list_contact[ranCon]));",
									"        let contact_id = list_contact[ranCon].contact_id;",
									"        pm.environment.set(\"C-ranCon\",ranCon);",
									"        pm.environment.set(\"C-contact_id\",contact_id);",
									"        break;",
									"    case 4:",
									"        break;",
									"    default:",
									"        console.log(\"Missing flow\");",
									"        break;",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    const jsData = pm.response.json();",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    // console.log(\"Debug: \" + JSON.stringify(jsData));",
									"",
									"    let contact_obj, invoice_obj;",
									"    switch(testcase){",
									"        case 2:",
									"            let list_contact = pm.environment.get(\"C-list_contact\");",
									"            let ranCon = pm.environment.get(\"C-ranCon\");",
									"            pm.test(\"debt_amount correctly & got it \" + list_contact[ranCon].debt_amount, function () {",
									"                pm.expect(list_contact[ranCon].debt_amount == jsData.data.debt_amount).to.be.true;",
									"            });",
									"",
									"            pm.environment.set(\"C-contact_obj\",list_contact[ranCon]);",
									"            console.log(\"will create invoice with contact: \", list_contact[ranCon]);",
									"            pm.environment.unset(\"C-list_contact\");",
									"",
									"            postman.setNextRequest(\"get_list_internal_account\"); // get_list_internal_account",
									"            break;",
									"        case 4:",
									"            contact_obj = pm.environment.get(\"C-contact_obj\");",
									"            pm.test(\"debt_amount is nothing happen\", function () {",
									"                pm.expect(contact_obj.debt_amount == jsData.data.debt_amount).to.be.true;",
									"            });",
									"",
									"            postman.setNextRequest(\"get_list_posting\"); // get_list_posting",
									"            break;",
									"        case 6:",
									"            contact_obj = pm.environment.get(\"C-contact_obj\");",
									"            invoice_obj = pm.environment.get(\"C-invoice_obj\");",
									"            pm.test(\"debt_amount is increase \" + invoice_obj.sub_total_amount, function () {",
									"                console.log(\"Old debt: \" + contact_obj.debt_amount);",
									"                console.log(\"New debt: \" + jsData.data.debt_amount);",
									"                pm.expect(contact_obj.debt_amount + invoice_obj.sub_total_amount == jsData.data.debt_amount).to.be.true;",
									"            });",
									"",
									"            postman.setNextRequest(\"get_list_posting\"); // get_list_posting",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get contact's dept amount, end test\");",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{finan_base_url}}/finan-business/api/v1/contact/get-debt-amount?contact_id={{C-contact_id}}",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-business",
								"api",
								"v1",
								"contact",
								"get-debt-amount"
							],
							"query": [
								{
									"key": "contact_id",
									"value": "{{C-contact_id}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "account coa",
			"item": [
				{
					"name": "get_list_internal_account",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let coa = [];",
									"    try {",
									"        for(let i in jsData.data){",
									"            let sub_group_i = [];",
									"            for(let j in jsData.data[i].sub_group){",
									"                let accounts_j = [];",
									"                for(let k in jsData.data[i].sub_group[j].accounts){",
									"                    accounts_j[accounts_j.length] = {",
									"                        \"account_name\":jsData.data[i].sub_group[j].accounts[k].name,",
									"                        \"account_id\":jsData.data[i].sub_group[j].accounts[k].id,",
									"                        \"group_name\":jsData.data[i].sub_group[j].accounts[k].group_name,",
									"                        \"sub_group_name\":jsData.data[i].sub_group[j].accounts[k].sub_name,",
									"                        \"branch_id\":jsData.data[i].sub_group[j].accounts[k].branch_id,",
									"                        \"displays_id\":jsData.data[i].sub_group[j].accounts[k].displays_id,",
									"                        \"account_source\":jsData.data[i].sub_group[j].accounts[k].account_source,",
									"                        \"account_type\":jsData.data[i].sub_group[j].accounts[k].account_type,",
									"                        \"account_code\":jsData.data[i].sub_group[j].accounts[k].account_code,",
									"                        \"coa_type\":jsData.data[i].sub_group[j].accounts[k].coa_type,",
									"                        \"sub_coa_deepest\":jsData.data[i].sub_group[j].accounts[k].sub_coa_deepest,",
									"                        \"name_en\":jsData.data[i].sub_group[j].accounts[k].name_en,",
									"                        \"status\":jsData.data[i].sub_group[j].accounts[k].status,",
									"                        \"parent_id\":jsData.data[i].sub_group[j].accounts[k].parent_id,",
									"                        \"description\":jsData.data[i].sub_group[j].accounts[k].description,",
									"                        \"open_amount\":jsData.data[i].sub_group[j].accounts[k].open_amount,",
									"                        \"currency\":jsData.data[i].sub_group[j].accounts[k].currency",
									"                        // \"opening_at\":jsData.data[i].sub_group[j].accounts[k].opening_at",
									"                        // \"closing_at\":jsData.data[i].sub_group[j].accounts[k].closing_at",
									"                    }",
									"",
									"                    if(jsData.data[i].sub_group[j].accounts[k].key == \"account_receivable\"){",
									"                        pm.environment.set(\"C-account_receivable\",jsData.data[i].sub_group[j].accounts[k]);",
									"                    } else if (jsData.data[i].sub_group[j].accounts[k].key == \"discount\") {",
									"                        pm.environment.set(\"C-discount\",jsData.data[i].sub_group[j].accounts[k]);",
									"                    }",
									"                }",
									"",
									"                sub_group_i[sub_group_i.length] = {",
									"                    \"sub_group_name\":jsData.data[i].sub_group[j].name,",
									"                    \"sub_group_id\":jsData.data[i].sub_group[j].id,",
									"                    \"sub_group_description\":jsData.data[i].sub_group[j].description,",
									"                    \"accounts\":accounts_j",
									"                }",
									"            }",
									"",
									"            coa[coa.length] = {",
									"                \"group_name\":jsData.data[i].name,",
									"                \"value\":jsData.data[i].value,",
									"                \"index\":jsData.data[i].index,",
									"                \"sub_group\":sub_group_i",
									"            }",
									"        }",
									"    } catch {",
									"        console.log(\"can't get all account in coa\");",
									"    }",
									"",
									"",
									"    pm.test(\"Got coa of this user's business\", function () {",
									"        pm.expect(coa.length > 0).to.be.true;",
									"    });",
									"",
									"    if(coa.length > 0){",
									"        // console.log(\"coa: \", coa);",
									"        pm.environment.set(\"C-coa\",coa);",
									"        let list_internal_account = [];",
									"",
									"        /**",
									"         * lấy những account_id sẽ bị ảnh hưởng bởi invoice để lưu thành array => PENDING (wait confirm with PO, DEV BE-FE)",
									"         */",
									"",
									"        pm.environment.set(\"C-list_internal_account\",list_internal_account);",
									"",
									"        let list_credit_account = [];",
									"        /**",
									"         * lấy những account_id và phân loại thành debit/credit",
									"         * - credit: tài khoản (only cash & bank)",
									"         * - debit: phân loại (all)",
									"         */ ",
									"        for(let i in coa){",
									"            for(let j in coa[i].sub_group){",
									"                for(let k in coa[i].sub_group[j].accounts){",
									"                    // if(coa[i].group_name == \"income\" || coa[i].group_name == \"expense\"){ // mở điều kiện này khi cần debug tạo tnx có report cassh-flow",
									"                    // }",
									"                    // if(coa[i].sub_group[j].sub_group_value == \"cash_and_bank\"){ ",
									"                    if(coa[i].value == \"income\"){",
									"                        // console.log(\"debug: \", coa[i].sub_group[j].accounts[k]);",
									"                        if(coa[i].sub_group[j].accounts[k].account_name.includes(\"[API]\")){ // do 1 số name bị null (dev chưa validation dẫn đến report sẽ không biết của account nào - report ko trả về id)",
									"                            list_credit_account[list_credit_account.length] = coa[i].sub_group[j].accounts[k];",
									"                        }",
									"                    }",
									"                }",
									"            }",
									"        }",
									"        pm.environment.set(\"C-list_credit_account\",list_credit_account);",
									"        console.log(\"list_credit_account: \",list_credit_account);",
									"",
									"        postman.setNextRequest(\"get_list_payment_account\"); // get_list_payment_account",
									"    } else {",
									"        console.log(\"Can't get list internal account, end test \");",
									"        postman.setNextRequest(null);",
									"    }",
									"} else {",
									"    console.log(\"Can't get list internal account, end test \", jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{finan_base_url}}​/finan-ledger/api/v1/account/list?branch_id={{C-business_id}}&coa_type=",
							"host": [
								"{{finan_base_url}}​"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"account",
								"list"
							],
							"query": [
								{
									"key": "branch_id",
									"value": "{{C-business_id}}"
								},
								{
									"key": "coa_type",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get_internal_account_detail",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let list_internal_account = pm.environment.get(\"C-list_internal_account\");",
									"let pos = pm.environment.get(\"C-pos\");",
									"if(!pos){",
									"    pos = 0;",
									"    pm.environment.set(\"C-pos\",pos);",
									"}",
									"",
									"let internal_account_id = list_internal_account[pos].account_id;",
									"console.log(\"view detail account: \" + account_id);",
									"",
									"pm.environment.set(\"C-internal_account_id\",internal_account_id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    const jsData = pm.response.json();",
									"    // let testcase = pm.environment.get(\"C-testcase\");",
									"    console.log(\"Debug: \" + JSON.stringify(jsData));",
									"",
									"    let list_internal_account = pm.environment.get(\"C-list_internal_account\");",
									"    let pos = pm.environment.get(\"C-pos\");",
									"",
									"    if(pos >= list_internal_account.length - 1){",
									"        pm.environment.unset(\"C-pos\");",
									"",
									"        postman.setNextRequest(\"get_list_tax\"); // get_list_tax",
									"    } else {",
									"        pos++;",
									"        pm.environment.set(\"C-pos\",pos);",
									"",
									"        postman.setNextRequest(\"get_internal_account_detail\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get internal account detail, end test\");",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{finan_base_url}}​​/finan-ledger/api/v1/account/detail/{{C-internal_account_id}}",
							"host": [
								"{{finan_base_url}}​​"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"account",
								"detail",
								"{{C-internal_account_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "account cash_n_bank",
			"item": [
				{
					"name": "get_list_payment_account",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"",
									"    let list_bank_account = [];",
									"    for(let j in jsData.data.accounts){",
									"        list_bank_account[list_bank_account.length] = {",
									"            \"account_id\":jsData.data.accounts[j].id,",
									"            \"account_name\":jsData.data.accounts[j].name,",
									"            \"status\":jsData.data.accounts[j].status,",
									"            \"external_account_id\":jsData.data.accounts[j].external_account_id,",
									"            \"provider_id\":jsData.data.accounts[j].provider_id",
									"        }",
									"    }",
									"",
									"    switch(testcase){",
									"        case 2:",
									"            pm.test(\"Got list bank account\", function () {",
									"                pm.expect(list_bank_account.length > 0).to.be.true;",
									"            });",
									"",
									"            pm.environment.set(\"C-list_bank_account\",list_bank_account);",
									"",
									"            postman.setNextRequest(\"get_list_tax\"); // get_list_tax",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get list payment account, end test\", jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"url": {
							"raw": "{{finan_base_url}}/finan-ledger/api/v1/account/list-by-key?branch_id={{C-business_id}}&key=cash_and_bank&option=bank",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"account",
								"list-by-key"
							],
							"query": [
								{
									"key": "branch_id",
									"value": "{{C-business_id}}"
								},
								{
									"key": "key",
									"value": "cash_and_bank"
								},
								{
									"key": "option",
									"value": "bank"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "tax",
			"item": [
				{
					"name": "get_list_tax",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = JSON.parse(responseBody);",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let total_pages = jsData.meta.total_pages;",
									"    let page = pm.environment.get(\"C-page\");",
									"",
									"    let list_tax = pm.environment.get(\"C-list_tax\");",
									"    if(!list_tax){",
									"        list_tax = [];",
									"    }",
									"",
									"    for(let item in jsData.data){",
									"        if(jsData.data[item].description.includes(\"[API]\") && jsData.data[item].rate > 0 && jsData.data[item].rate < 100){",
									"            list_tax[list_tax.length] = {",
									"                \"tax_id\":jsData.data[item].id,",
									"                \"name\":jsData.data[item].name,",
									"                \"rate\":jsData.data[item].rate,",
									"                \"account_id\":jsData.data[item].account_id,",
									"                \"description\":jsData.data[item].description",
									"            }",
									"        }",
									"    }",
									"    pm.environment.set(\"C-list_tax\",list_tax);",
									"    // console.log(\"debug: \", list_tax);",
									"",
									"    if(page >= total_pages){",
									"        // must clear page & page_size",
									"        pm.environment.unset(\"C-page\");",
									"        pm.environment.unset(\"C-page_size\");",
									"",
									"        pm.test(\"Got all tax! \" + list_tax.length, function () {",
									"            pm.expect(list_tax.length > 0).to.be.true;",
									"        });",
									"",
									"        postman.setNextRequest(\"get_list_posting\"); // get_list_posting",
									"    } else {",
									"        page++;",
									"        pm.environment.set(\"C-page\",page);",
									"",
									"        console.log(\"view next page (\" + page + \") to get more tax\");",
									"        postman.setNextRequest(\"get_list_tax\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get list tax, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let page = pm.environment.get(\"C-page\");",
									"",
									"if(!page){",
									"    page = 1;",
									"    pm.environment.set(\"C-page\",page);",
									"",
									"    let page_size = 50;",
									"    pm.environment.set(\"C-page_size\",page_size);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{finan_base_url}}/finan-ledger/api/v1/tax/list?branch_id={{C-business_id}}&page={{C-page}}&page_size={{C-page_size}}&option=&status=",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"tax",
								"list"
							],
							"query": [
								{
									"key": "branch_id",
									"value": "{{C-business_id}}"
								},
								{
									"key": "page",
									"value": "{{C-page}}"
								},
								{
									"key": "page_size",
									"value": "{{C-page_size}}"
								},
								{
									"key": "option",
									"value": ""
								},
								{
									"key": "status",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "invoice",
			"item": [
				{
					"name": "get_list_invoice",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ============================= random number between min and max",
									"function getRandomInt(min, max) {",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = JSON.parse(responseBody);",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let total_pages = jsData.meta.total_pages;",
									"    let page = pm.environment.get(\"C-page\");",
									"",
									"    let list_invoice, old_list_invoice;",
									"    switch(testcase){",
									"        case 2:",
									"            list_invoice = pm.environment.get(\"C-list_invoice\");",
									"            if(!list_invoice){",
									"                list_invoice = [];",
									"            }",
									"            break;",
									"        case 4: case 6:",
									"            old_list_invoice = pm.environment.get(\"C-old_list_invoice\");",
									"            if(!old_list_invoice){",
									"                old_list_invoice = pm.environment.get(\"C-list_invoice\");",
									"                pm.environment.unset(\"C-list_invoice\");",
									"                pm.environment.set(\"C-old_list_invoice\",old_list_invoice);",
									"            }",
									"",
									"            list_invoice = pm.environment.get(\"C-list_invoice\");",
									"            if(!list_invoice){",
									"                list_invoice = [];",
									"            }",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow\");",
									"            break;",
									"    }",
									"",
									"    // let today = new Date();",
									"    // let timestamp = Math.floor(today.getTime()/1000);",
									"    // let yesterdate_tmp = timestamp - 24*60*60;",
									"    // let yesterday = new Date(yesterdate_tmp*1000);",
									"    let test_date = new Date(\"2024-03-24\"); // lấy invoice từ 24",
									"    for(let item in jsData.data){",
									"        // console.log(\"Invoice \" + jsData.data[item].entry_code + \" with final_status \" + jsData.data[item].final_status);",
									"        if(new Date(jsData.data[item].created_at) > test_date){",
									"            // console.log(\"Invoice \" + jsData.data[item].entry_code + \" with created_at \" + jsData.data[item].created_at);",
									"            list_invoice[list_invoice.length] = {",
									"                \"invoice_id\":jsData.data[item].id,",
									"                \"created_at\":jsData.data[item].created_at,",
									"                \"entry_code\":jsData.data[item].entry_code,",
									"                \"system_code\":jsData.data[item].system_code,",
									"                \"status\":jsData.data[item].status,",
									"                \"final_status\":jsData.data[item].final_status,",
									"                \"payment_status\":jsData.data[item].payment_status,",
									"                \"sub_total_amount\":jsData.data[item].sub_total_amount,",
									"                \"total_amount\":jsData.data[item].total_amount,",
									"                \"discount_amount\":jsData.data[item].discount_amount,",
									"                \"total_tax_amount\":jsData.data[item].total_tax_amount,",
									"                \"due_amount\":jsData.data[item].due_amount,",
									"                \"paid_amount\":jsData.data[item].paid_amount,",
									"                \"currency\":jsData.data[item].currency,",
									"                \"contact_id\":jsData.data[item].contact_id,",
									"                \"entry_type\":jsData.data[item].entry_type,",
									"                \"description\":jsData.data[item].description,",
									"                \"value_at\":jsData.data[item].value_at,",
									"                \"due_at\":jsData.data[item].due_at,",
									"                \"send_at\":jsData.data[item].send_at,",
									"                \"account_id\":jsData.data[item].account_id,",
									"                \"tax_type\":jsData.data[item].tax_type",
									"            }",
									"        }",
									"    }",
									"    pm.environment.set(\"C-list_invoice\",list_invoice);",
									"",
									"    if(page >= total_pages){",
									"        // must clear page & page_size",
									"        pm.environment.unset(\"C-page\");",
									"        pm.environment.unset(\"C-page_size\");",
									"",
									"        let invoice_edit_obj;",
									"        switch(testcase){",
									"            case 2:",
									"                pm.test(\"Got all product! \" + list_invoice.length, function () {",
									"                    pm.expect(list_invoice.length > 0).to.be.true;",
									"                });",
									"",
									"                //",
									"                let edit_invoice_status;",
									"                switch(getRandomInt(1,4)){ // getRandomInt(1,4)",
									"                    case 1:",
									"                        console.log(\"edit draft invoice\");",
									"                        edit_invoice_status = \"draft\";",
									"                        break;",
									"                    case 2:",
									"                        console.log(\"edit unsent invoice\");",
									"                        edit_invoice_status = \"unsent\";",
									"                        break;",
									"                    case 3:",
									"                        console.log(\"edit partial_paid invoice\");",
									"                        edit_invoice_status = \"partial_paid\";",
									"                        break;",
									"                    case 4:",
									"                        console.log(\"edit paid invoice\");",
									"                        edit_invoice_status = \"fully_paid\";",
									"                        break;",
									"                    case 5:",
									"                        console.log(\"edit sent invoice\");",
									"                        edit_invoice_status = \"sent\";",
									"                        break;",
									"                    default:",
									"                        console.log(\"edit overdue invoice\");",
									"                        edit_invoice_status = \"overdue\";",
									"                        break;",
									"                }",
									"",
									"                for(let i in list_invoice){",
									"                    if(list_invoice[i].final_status == edit_invoice_status || list_invoice[i].payment_status == edit_invoice_status){",
									"                        invoice_edit_obj = list_invoice[i];",
									"                        break;",
									"                    }",
									"                }",
									"",
									"                if(invoice_edit_obj != null){",
									"                    pm.environment.set(\"C-invoice_edit_obj\",invoice_edit_obj);",
									"                    // pm.environment.set(\"C-invoice_id\",invoice_edit_obj.invoice_id);",
									"",
									"                    console.log(\"=============================================\");",
									"                    console.log(\"Will edit invoice \" + invoice_edit_obj.entry_code);",
									"                    console.log(\"--- value_at: \" + invoice_edit_obj.value_at);",
									"                    console.log(\"--- due_at: \" + invoice_edit_obj.due_at);",
									"                    console.log(\"--- system_code: \" + invoice_edit_obj.system_code);",
									"                    // console.log(\"--- total_amount: \" + invoice_edit_obj.total_amount);",
									"                    // console.log(\"--- paid_amount: \" + invoice_edit_obj.paid_amount);",
									"                    console.log(\"=============================================\");",
									"",
									"                    postman.setNextRequest(\"get_invoice_detail\"); // get_invoice_detail",
									"                } else {",
									"                    pm.test(\"Can't find invoice with respective status, end test\", function () {",
									"                        pm.expect(true).to.be.false;",
									"                    });",
									"",
									"                    postman.setNextRequest(null);",
									"                }",
									"                break;",
									"            case 4:",
									"                let invoice_obj = pm.environment.get(\"C-invoice_obj\");",
									"                invoice_edit_obj = pm.environment.get(\"C-invoice_edit_obj\");",
									"",
									"                pm.test(\"Nothing happen with total invoice: \" + list_invoice.length, function () {",
									"                    pm.expect(list_invoice.length == old_list_invoice.length).to.be.true;",
									"                });",
									"",
									"                let isFound = false;",
									"                for(let i in list_invoice){",
									"                    if(list_invoice[i].invoice_id == invoice_edit_obj.invoice_id){",
									"                        isFound = true;",
									"                        pm.test(\"entry_code of invoice correctly! \" + invoice_obj.entry_code, function () {",
									"                            pm.expect(invoice_obj.entry_code == list_invoice[i].entry_code).to.be.true;",
									"                        });",
									"",
									"                        pm.test(\"sub_total_amount of invoice correctly! \" + invoice_obj.sub_total_amount, function () {",
									"                            pm.expect(invoice_obj.sub_total_amount == list_invoice[i].sub_total_amount).to.be.true;",
									"                        });",
									"",
									"                        pm.test(\"contact_id of invoice correctly! \" + invoice_obj.contact_id, function () {",
									"                            pm.expect(invoice_obj.contact_id == list_invoice[i].contact_id).to.be.true;",
									"                        });",
									"",
									"                        // pm.test(\"email of invoice correctly! \" + invoice_obj.email, function () {",
									"                        //     pm.expect(invoice_obj.email == list_invoice[i].email).to.be.true;",
									"                        // });",
									"",
									"                        pm.test(\"created_order_at of invoice correctly! \" + invoice_obj.created_order_at, function () {",
									"                            pm.expect(invoice_obj.created_order_at.substring(0,19) == list_invoice[i].value_at.substring(0,19)).to.be.true;",
									"                        });",
									"",
									"                        pm.test(\"due_at of invoice correctly! \" + invoice_obj.due_at, function () {",
									"                            pm.expect(invoice_obj.due_at.substring(0,19) == list_invoice[i].due_at.substring(0,19)).to.be.true;",
									"                        });",
									"",
									"                        pm.test(\"description of invoice correctly! \" + invoice_obj.description, function () {",
									"                            pm.expect(invoice_obj.description == list_invoice[i].description).to.be.true;",
									"                        });",
									"",
									"                        pm.test(\"tax_type of invoice correctly! \" + invoice_obj.tax_type, function () {",
									"                            pm.expect(invoice_obj.tax_type == list_invoice[i].tax_type).to.be.true;",
									"                        });",
									"",
									"                        // pm.test(\"taxes of invoice correctly! \" + invoice_obj.taxes, function () {",
									"                        //     pm.expect(JSON.stringify(invoice_obj.taxes) == JSON.stringify(list_invoice[i].taxes)).to.be.true;",
									"                        // });",
									"",
									"                        pm.test(\"payment_menthod of invoice correctly! \" + invoice_obj.payment_menthod, function () {",
									"                            pm.expect(JSON.stringify(invoice_obj.payment_menthod) == JSON.stringify(list_invoice[i].payment_menthod)).to.be.true;",
									"                        });",
									"",
									"                        pm.test(\"status of invoice correctly! \" + invoice_obj.status, function () {",
									"                            pm.expect(invoice_obj.status == list_invoice[i].status).to.be.true;",
									"                        });",
									"",
									"                        // due_amount",
									"                        pm.test(\"due_amount of invoice correctly! \" + invoice_obj.due_amount, function () {",
									"                            console.log(\"act: \" + list_invoice[i].due_amount);",
									"                            pm.expect(invoice_obj.due_amount == list_invoice[i].due_amount.toFixed(2)).to.be.true;",
									"                        });",
									"",
									"                        // payment_status => cần check thêm điều kiện nếu paid_amount > total_amount => update thành fully_paid",
									"                        let expected_payment_status;",
									"                        if(invoice_obj.total_amount <= invoice_edit_obj.paid_amount){",
									"                            expected_payment_status = \"fully_paid\";",
									"                            ",
									"                        } else if(invoice_edit_obj.paid_amount == 0) {",
									"                            expected_payment_status = \"un_paid\";",
									"                        } else {",
									"                            expected_payment_status = \"partial_paid\";",
									"                        }",
									"                        pm.test(\"payment_status of invoice update to \" + expected_payment_status, function () {",
									"                            pm.expect(expected_payment_status == list_invoice[i].payment_status).to.be.true;",
									"                        });",
									"                        invoice_obj.payment_status = expected_payment_status;",
									"",
									"                        // final_status => có thể check luôn ở đây hoặc run lại flow 11",
									"                        let today = new Date();",
									"                        let due_date_i = new Date(list_invoice[i].due_at);",
									"                        let expected_final_status;",
									"                        switch(expected_payment_status){",
									"                            case \"fully_paid\":",
									"                                expected_final_status = \"fully_paid\";",
									"                                break;",
									"                            case \"partial_paid\":",
									"                                if(today > due_date_i){",
									"                                    expected_final_status = \"overdue\";",
									"                                } else {",
									"                                    expected_final_status = \"partial_paid\";",
									"                                }",
									"                                break;",
									"                            case \"un_paid\":",
									"                                if(list_invoice[i].status == \"draft\"){",
									"                                    expected_final_status = \"draft\";",
									"                                } else {",
									"                                    if(today > due_date_i){",
									"                                        expected_final_status = \"overdue\";",
									"                                    } else {",
									"                                        if(list_invoice[i].send_at != null){",
									"                                            expected_final_status = \"sent\";",
									"                                        } else {",
									"                                            expected_final_status = \"unsent\";",
									"                                        }",
									"                                    }",
									"                                }",
									"                            default:",
									"                                break;",
									"                        }",
									"                        pm.test(\"final_status of invoice update to \" + expected_final_status, function () {",
									"                            pm.expect(expected_final_status == list_invoice[i].final_status).to.be.true;",
									"                        });",
									"                        invoice_obj.final_status = expected_final_status;",
									"                        pm.environment.set(\"C-invoice_obj\",invoice_obj);",
									"",
									"                        // pm.test(\"discounts of invoice correctly! \" + invoice_obj.discounts, function () {",
									"                        //     pm.expect(JSON.stringify(invoice_obj.discounts) == JSON.stringify(list_invoice[i].discounts)).to.be.true;",
									"                        // });",
									"                        break;",
									"                    }",
									"                }",
									"",
									"                pm.test(\"Found invoice \" + invoice_edit_obj.invoice_id, function () {",
									"                    pm.expect(isFound).to.be.true;",
									"                });",
									"",
									"                postman.setNextRequest(\"get_invoice_detail\"); // get_invoice_detail",
									"                break;",
									"            default:",
									"                console.log(\"Missing flow, end test\");",
									"                postman.setNextRequest(null);",
									"                break;",
									"        }",
									"    } else {",
									"        page++;",
									"        pm.environment.set(\"C-page\",page);",
									"",
									"        console.log(\"view next page (\" + page + \") to get more product\");",
									"        postman.setNextRequest(\"get_list_invoice\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get list product, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let page = pm.environment.get(\"C-page\");",
									"",
									"if(!page){",
									"    page = 1;",
									"    pm.environment.set(\"C-page\",page);",
									"",
									"    let page_size = 500;",
									"    pm.environment.set(\"C-page_size\",page_size);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{finan_base_url}}/finan-ledger/api/v1/invoice/list?branch_id={{C-business_id}}&page={{C-page}}&page_size={{C-page_size}}",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"invoice",
								"list"
							],
							"query": [
								{
									"key": "branch_id",
									"value": "{{C-business_id}}"
								},
								{
									"key": "page",
									"value": "{{C-page}}"
								},
								{
									"key": "page_size",
									"value": "{{C-page_size}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get_invoice_detail",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let invoice_obj = pm.environment.get(\"C-invoice_obj\");",
									"let invoice_edit_obj = pm.environment.get(\"C-invoice_edit_obj\");",
									"let invoice_id;",
									"",
									"switch(testcase){",
									"    case 2:",
									"        invoice_id = invoice_edit_obj.invoice_id;",
									"        break;",
									"    case 4:",
									"        invoice_id = invoice_obj.invoice_id;",
									"        break;",
									"    default:",
									"        break;",
									"}",
									"",
									"console.log(\"view detail invoice: \" + invoice_id);",
									"",
									"pm.environment.set(\"C-invoice_id\",invoice_id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"",
									"    let invoice_edit_obj = pm.environment.get(\"C-invoice_edit_obj\");",
									"    switch(testcase){",
									"        case 2:",
									"            if(\"entry_items\" in jsData.data){",
									"                invoice_edit_obj.items = jsData.data.entry_items;",
									"            } else {",
									"                invoice_edit_obj.items = [];",
									"                invoice_edit_obj.taxes = jsData.data.entry_taxes;",
									"            }",
									"",
									"            console.log(\"Debug: \", invoice_edit_obj);",
									"            pm.environment.set(\"C-invoice_edit_obj\",invoice_edit_obj);",
									"",
									"            // testcase = 5;",
									"            testcase++;",
									"            pm.environment.set(\"C-testcase\",testcase);",
									"            postman.setNextRequest(\"edit_invoice\"); // edit_invoice",
									"            break;",
									"        case 4:",
									"            let invoice_obj = pm.environment.get(\"C-invoice_obj\");",
									"",
									"            pm.test(\"entry_code of invoice correctly! \" + invoice_obj.entry_code, function () {",
									"                pm.expect(invoice_obj.entry_code == jsData.data.entry_code).to.be.true;",
									"            });",
									"",
									"            pm.test(\"sub_total_amount of invoice correctly! \" + invoice_obj.sub_total_amount, function () {",
									"                pm.expect(invoice_obj.sub_total_amount == jsData.data.sub_total_amount).to.be.true;",
									"            });",
									"",
									"            pm.test(\"contact_id of invoice correctly! \" + invoice_obj.contact_id, function () {",
									"                pm.expect(invoice_obj.contact_id == jsData.data.contact_id).to.be.true;",
									"            });",
									"",
									"            pm.test(\"email of invoice correctly! \" + invoice_obj.email, function () {",
									"                pm.expect(invoice_obj.email == jsData.data.email).to.be.true;",
									"            });",
									"",
									"            pm.test(\"created_order_at of invoice correctly! \" + invoice_obj.created_order_at, function () {",
									"                pm.expect(invoice_obj.created_order_at.substring(0,19) == jsData.data.value_at.substring(0,19)).to.be.true;",
									"            });",
									"",
									"            pm.test(\"due_at of invoice correctly! \" + invoice_obj.due_at, function () {",
									"                pm.expect(invoice_obj.due_at.substring(0,19) == jsData.data.due_at.substring(0,19)).to.be.true;",
									"            });",
									"",
									"            pm.test(\"description of invoice correctly! \" + invoice_obj.description, function () {",
									"                pm.expect(invoice_obj.description == jsData.data.description).to.be.true;",
									"            });",
									"",
									"            // due_amount",
									"            pm.test(\"due_amount of invoice correctly! \" + invoice_obj.due_amount, function () {",
									"                console.log(\"act: \" + jsData.data.due_amount);",
									"                pm.expect(invoice_obj.due_amount == jsData.data.due_amount.toFixed(2)).to.be.true;",
									"            });",
									"",
									"            pm.test(\"tax_type of invoice correctly! \" + invoice_obj.tax_type, function () {",
									"                pm.expect(invoice_obj.tax_type == jsData.data.tax_type).to.be.true;",
									"            });",
									"",
									"            // pm.test(\"taxes of invoice correctly! \" + invoice_obj.taxes, function () {",
									"            //     pm.expect(JSON.stringify(invoice_obj.taxes) == JSON.stringify(jsData.data.taxes)).to.be.true;",
									"            // });",
									"",
									"            pm.test(\"payment_config of invoice correctly! \" + invoice_obj.payment_config, function () {",
									"                pm.expect(JSON.stringify(invoice_obj.payment_config) == JSON.stringify(jsData.data.payment_config)).to.be.true;",
									"            });",
									"",
									"            pm.test(\"status of invoice correctly! \" + invoice_obj.status, function () {",
									"                pm.expect(invoice_obj.status == jsData.data.status).to.be.true;",
									"            });",
									"",
									"            // payment_status",
									"            pm.test(\"payment_status of invoice update to \" + invoice_obj.payment_status, function () {",
									"                pm.expect(invoice_obj.payment_status == jsData.data.payment_status).to.be.true;",
									"            });",
									"",
									"            // final_status => check hoặc run lại flow 11",
									"            pm.test(\"final_status of invoice update to \" + invoice_obj.final_status, function () {",
									"                pm.expect(invoice_obj.final_status == jsData.data.final_status).to.be.true;",
									"            });",
									"",
									"            // pm.test(\"discounts of invoice correctly! \" + invoice_obj.discounts, function () {",
									"            //     pm.expect(JSON.stringify(invoice_obj.discounts) == JSON.stringify(jsData.data.discounts)).to.be.true;",
									"            // });",
									"",
									"            postman.setNextRequest(\"buyer_view_invoice\"); // buyer_view_invoice",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get internal contact detail, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{finan_base_url}}/finan-ledger/api/v1/invoice/detail/{{C-invoice_id}}?branch_id={{C-business_id}}",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"invoice",
								"detail",
								"{{C-invoice_id}}"
							],
							"query": [
								{
									"key": "branch_id",
									"value": "{{C-business_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "edit_invoice",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/**",
									" *  =============================  func randNotDupe(min, max, total)",
									" * total: số lượng random, ko dc nhỏ hơn max-min+1",
									" * return: array",
									" */",
									"function randNotDupe(min, max, total){",
									"  let arrNum = []; // new empty array",
									"  let n, p;",
									"  for (let i = 0; i < total; i++) {",
									"    do {",
									"      n = Math.floor(Math.random() * (max - min + 1)) + min;",
									"      p = arrNum.includes(n);",
									"      if(!p){",
									"        arrNum.push(n);",
									"      }",
									"    }",
									"    while(p);",
									"  }",
									"  return arrNum;",
									"}",
									"",
									"// ============================= random number between min and max",
									"function getRandomInt(min, max) {",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"",
									"// ============================= random characters",
									"function randomChars(length) {",
									"    var result           = '';",
									"    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
									"    var charactersLength = characters.length;",
									"    for ( var i = 0; i < length; i++ ) {",
									"      result += characters.charAt(Math.floor(Math.random() * charactersLength));",
									"   }",
									"   return result;",
									"}",
									"",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"let invoice_edit_obj = pm.environment.get(\"C-invoice_edit_obj\");",
									"let case_ = pm.environment.get(\"C-case_\");",
									"if(!case_){",
									"    if(invoice_edit_obj.final_status != \"draft\"){",
									"        case_ = 12; // 0",
									"    } else {",
									"        case_ = 12; // 1",
									"    }",
									"    pm.environment.set(\"C-case_\",case_);",
									"}",
									"console.log(\"Testcase: \" + testcase + \".\" + case_);",
									"",
									"let today = new Date();",
									"let d30_stp = Math.floor(today.getTime()/1000) + 30*24*60*60;",
									"let d30 = new Date(d30_stp*1000);",
									"",
									"let current_timestamp = Math.floor(today.getTime()/1000);",
									"let past_date, past_due_date;",
									"",
									"let next_date_stp = Math.floor(today.getTime()/1000) + 24*60*60;",
									"let next_date = new Date(next_date_stp*1000);",
									"",
									"let tax_types = [\"price_excluding_tax\", \"price_including_tax\", \"tax_not_applicable\"];",
									"let tax_type;",
									"let list_tax = pm.environment.get(\"C-list_tax\");",
									"console.log(\"list_tax: \" + list_tax.length);",
									"let discounts = [], taxes = [];",
									"let amount, created_order_at, due_at, description, email; // amount chỉ có với invoice without product, amount = subtotal",
									"let list_credit_account = pm.environment.get(\"C-list_credit_account\");",
									"console.log(\"list_credit_account: \" + list_credit_account.length);",
									"let branch_id, contact_id, account_credit;",
									"let payment_method_list = [\"bank_transfer\",\"domestic_card\",\"credit_card\",\"ewallet_momo\",\"ewallet_zalopay\",\"ewallet_viettel\",\"ewallet_galaxypay\"];",
									"let entry_code, payment_config = [];",
									"let status;",
									"let payment_account_id = null;",
									"let list_bank_account = pm.environment.get(\"C-list_bank_account\");",
									"switch(case_){",
									"    case 0:",
									"        console.log(\"Unhappy case: change status from \" + invoice_edit_obj.final_status + \" to draft\");",
									"        account_credit = list_credit_account[getRandomInt(0,list_credit_account.length - 1)].account_id;",
									"        contact_id = pm.environment.get(\"C-contact_id\");",
									"        email = \"\";",
									"        amount = getRandomInt(50,500) * 1000;",
									"        branch_id = pm.environment.get(\"C-business_id\");",
									"        created_order_at = today.toISOString();",
									"        due_at = next_date.toISOString();",
									"        entry_code = \"HD-\" + randomChars(6);",
									"        description = \"[API][Edit] Note for invoice \" + entry_code;",
									"        discounts = [];",
									"        tax_type = tax_types[getRandomInt(0,tax_types.length - 1)];",
									"        taxes = [];",
									"        payment_config = [payment_method_list[getRandomInt(0,payment_method_list.length - 1)]];",
									"        status = \"draft\";",
									"        break;",
									"    case 1:",
									"        console.log(\"Unhappy case: missing account_credit\");",
									"        account_credit = \"\";",
									"        contact_id = pm.environment.get(\"C-contact_id\");",
									"        email = \"\";",
									"        amount = getRandomInt(50,500) * 1000;",
									"        branch_id = pm.environment.get(\"C-business_id\");",
									"        created_order_at = today.toISOString();",
									"        due_at = d30.toISOString();",
									"        entry_code = \"HD-\" + randomChars(6);",
									"        description = \"[API][Edit] Note for invoice \" + entry_code;",
									"        discounts = [];",
									"        tax_type = tax_types[getRandomInt(0,tax_types.length - 1)];",
									"        taxes = [];",
									"        payment_config = [payment_method_list[getRandomInt(0,payment_method_list.length - 1)]];",
									"        status = \"active\";",
									"        break;",
									"    case 2:",
									"        console.log(\"Unhappy case: missing customer\");",
									"        account_credit = list_credit_account[getRandomInt(0,list_credit_account.length - 1)].account_id;",
									"        contact_id = \"\";",
									"        email = \"\";",
									"        amount = getRandomInt(50,500) * 1000;",
									"        branch_id = pm.environment.get(\"C-business_id\");",
									"        created_order_at = today.toISOString();",
									"        due_at = d30.toISOString();",
									"        entry_code = \"HD-\" + randomChars(6);",
									"        description = \"[API][Edit] Note for invoice \" + entry_code;",
									"        discounts = [];",
									"        tax_type = tax_types[getRandomInt(0,tax_types.length - 1)];",
									"        taxes = [];",
									"        payment_config = [payment_method_list[getRandomInt(0,payment_method_list.length - 1)]];",
									"        status = \"active\";",
									"        break;",
									"    case 3:",
									"        console.log(\"Unhappy case: customer with email is wrong format\");",
									"        account_credit = list_credit_account[getRandomInt(0,list_credit_account.length - 1)].account_id;",
									"        contact_id = pm.environment.get(\"C-contact_id\");",
									"        email = randomChars(10) + \"@ahjhj\";",
									"        amount = getRandomInt(50,500) * 1000;",
									"        branch_id = pm.environment.get(\"C-business_id\");",
									"        created_order_at = today.toISOString();",
									"        due_at = d30.toISOString();",
									"        entry_code = \"HD-\" + randomChars(6);",
									"        description = \"[API][Edit] Note for invoice \" + entry_code;",
									"        discounts = [];",
									"        tax_type = tax_types[getRandomInt(0,tax_types.length - 1)];",
									"        taxes = [];",
									"        payment_config = [payment_method_list[getRandomInt(0,payment_method_list.length - 1)]];",
									"        status = \"active\";",
									"        break;",
									"    case 4:",
									"        console.log(\"Unhappy case: missing amount\");",
									"        account_credit = list_credit_account[getRandomInt(0,list_credit_account.length - 1)].account_id;",
									"        contact_id = pm.environment.get(\"C-contact_id\");",
									"        email = \"\";",
									"        amount = \"\";",
									"        branch_id = pm.environment.get(\"C-business_id\");",
									"        created_order_at = today.toISOString();",
									"        due_at = d30.toISOString();",
									"        entry_code = \"HD-\" + randomChars(6);",
									"        description = \"[API][Edit] Note for invoice \" + entry_code;",
									"        discounts = [];",
									"        tax_type = tax_types[getRandomInt(0,tax_types.length - 1)];",
									"        taxes = [];",
									"        payment_config = [payment_method_list[getRandomInt(0,payment_method_list.length - 1)]];",
									"        status = \"active\";",
									"        break;",
									"    case 5:",
									"        console.log(\"Unhappy case: amount < 0\");",
									"        account_credit = list_credit_account[getRandomInt(0,list_credit_account.length - 1)].account_id;",
									"        contact_id = pm.environment.get(\"C-contact_id\");",
									"        email = \"\";",
									"        amount = -getRandomInt(50,500) * 1000;",
									"        branch_id = pm.environment.get(\"C-business_id\");",
									"        created_order_at = today.toISOString();",
									"        due_at = d30.toISOString();",
									"        entry_code = \"HD-\" + randomChars(6);",
									"        description = \"[API][Edit] Note for invoice \" + entry_code;",
									"        discounts = [];",
									"        tax_type = tax_types[getRandomInt(0,tax_types.length - 1)];",
									"        taxes = [];",
									"        payment_config = [payment_method_list[getRandomInt(0,payment_method_list.length - 1)]];",
									"        status = \"active\";",
									"        break;",
									"    case 6:",
									"        console.log(\"Unhappy case: entry_code = ''\");",
									"        account_credit = list_credit_account[getRandomInt(0,list_credit_account.length - 1)].account_id;",
									"        contact_id = pm.environment.get(\"C-contact_id\");",
									"        email = \"\";",
									"        amount = getRandomInt(50,500) * 1000;",
									"        branch_id = pm.environment.get(\"C-business_id\");",
									"        created_order_at = today.toISOString();",
									"        due_at = d30.toISOString();",
									"        entry_code = \"\";",
									"        description = \"[API][Edit] Note for invoice \" + entry_code;",
									"        discounts = [];",
									"        tax_type = tax_types[getRandomInt(0,tax_types.length - 1)];",
									"        taxes = [];",
									"        payment_config = [payment_method_list[getRandomInt(0,payment_method_list.length - 1)]];",
									"        status = \"active\";",
									"        break;",
									"    case 7:",
									"        console.log(\"Unhappy case: entry_code is existed\");",
									"        account_credit = list_credit_account[getRandomInt(0,list_credit_account.length - 1)].account_id;",
									"        contact_id = pm.environment.get(\"C-contact_id\");",
									"        email = \"\";",
									"        amount = getRandomInt(50,500) * 1000;",
									"        branch_id = pm.environment.get(\"C-business_id\");",
									"        created_order_at = today.toISOString();",
									"        due_at = d30.toISOString();",
									"        entry_code = pm.environment.get(\"C-existed_entry_code\");",
									"        description = \"[API][Edit] Note for invoice \" + entry_code;",
									"        discounts = [];",
									"        tax_type = tax_types[getRandomInt(0,tax_types.length - 1)];",
									"        taxes = [];",
									"        payment_config = [payment_method_list[getRandomInt(0,payment_method_list.length - 1)]];",
									"        status = \"active\";",
									"        break;",
									"    case 8:",
									"        console.log(\"Unhappy case: due_date < create_date\");",
									"        account_credit = list_credit_account[getRandomInt(0,list_credit_account.length - 1)].account_id;",
									"        contact_id = pm.environment.get(\"C-contact_id\");",
									"        email = \"\";",
									"        amount = getRandomInt(50,500) * 1000;",
									"        branch_id = pm.environment.get(\"C-business_id\");",
									"        created_order_at = today.toISOString();",
									"        due_at = next_date.toISOString();",
									"        entry_code = \"HD-\" + randomChars(6);",
									"        description = \"[API][Edit] Note for invoice \" + entry_code;",
									"        discounts = [];",
									"        tax_type = tax_types[getRandomInt(0,tax_types.length - 1)];",
									"        taxes = [];",
									"        payment_config = [payment_method_list[getRandomInt(0,payment_method_list.length - 1)]];",
									"        status = \"active\";",
									"        break;",
									"    case 9:",
									"        console.log(\"Unhappy case: tax_type = ''\");",
									"        account_credit = list_credit_account[getRandomInt(0,list_credit_account.length - 1)].account_id;",
									"        contact_id = pm.environment.get(\"C-contact_id\");",
									"        email = \"\";",
									"        amount = getRandomInt(50,500) * 1000;",
									"        branch_id = pm.environment.get(\"C-business_id\");",
									"        created_order_at = today.toISOString();",
									"        due_at = d30.toISOString();",
									"        entry_code = \"HD-\" + randomChars(6);",
									"        description = \"[API][Edit] Note for invoice \" + entry_code;",
									"        discounts = [];",
									"        tax_type = \"\";",
									"        taxes = [];",
									"        payment_config = [payment_method_list[getRandomInt(0,payment_method_list.length - 1)]];",
									"        status = \"active\";",
									"        break;",
									"    case 10:",
									"        console.log(\"Unhappy case: status = ''\");",
									"        account_credit = list_credit_account[getRandomInt(0,list_credit_account.length - 1)].account_id;",
									"        contact_id = pm.environment.get(\"C-contact_id\");",
									"        email = \"\";",
									"        amount = getRandomInt(50,500) * 1000;",
									"        branch_id = pm.environment.get(\"C-business_id\");",
									"        created_order_at = today.toISOString();",
									"        due_at = d30.toISOString();",
									"        entry_code = \"HD-\" + randomChars(6);",
									"        description = \"[API][Edit] Note for invoice \" + entry_code;",
									"        discounts = [];",
									"        tax_type = tax_types[getRandomInt(0,tax_types.length - 1)];",
									"        taxes = [];",
									"        payment_config = [payment_method_list[getRandomInt(0,payment_method_list.length - 1)]];",
									"        status = \"\";",
									"        break;",
									"    case 11:",
									"        console.log(\"Unhappy case: payment_config = []\");",
									"        account_credit = list_credit_account[getRandomInt(0,list_credit_account.length - 1)].account_id;",
									"        contact_id = pm.environment.get(\"C-contact_id\");",
									"        email = \"\";",
									"        amount = getRandomInt(50,500) * 1000;",
									"        branch_id = pm.environment.get(\"C-business_id\");",
									"        created_order_at = today.toISOString();",
									"        due_at = next_date.toISOString();",
									"        entry_code = \"HD-\" + randomChars(6);",
									"        description = \"[API][Edit] Note for invoice \" + entry_code;",
									"        discounts = [];",
									"        tax_type = tax_types[getRandomInt(0,tax_types.length - 1)];",
									"        taxes = [];",
									"        payment_config = [];",
									"        status = \"active\";",
									"        break;",
									"    case 12:",
									"        console.log(\"Happy case: \");",
									"        account_credit = list_credit_account[getRandomInt(0,list_credit_account.length - 1)].account_id;",
									"        contact_id = pm.environment.get(\"C-contact_id\");",
									"        email = \"chau.lth@finan.me\";",
									"        if(invoice_edit_obj.payment_status == \"fully_paid\"){",
									"            amount = getRandomInt(5,200) * 10000;",
									"        } else {",
									"            amount = getRandomInt(50,500) * 1000;",
									"        }",
									"        branch_id = pm.environment.get(\"C-business_id\");",
									"        entry_code = \"HD-\" + randomChars(6);",
									"        description = \"[API][Edit] Note for invoice \" + entry_code;",
									"        if(invoice_edit_obj.final_status == \"draft\"){",
									"            if(getRandomInt(0,1)){",
									"                status = \"active\";",
									"            } else {",
									"                status = \"draft\";",
									"            }",
									"        } else {",
									"            status = \"active\";",
									"        }",
									"        /**",
									"         * happy case:",
									"         * - random thời điểm tạo (trước, hiện tại, sau) => khi nào tax apply history sẽ thêm case trước và sau thời điểm effect để check mức thuế => 1 phần FE sẽ check",
									"         * - random tax_type: không thuế, chưa bao gồm thuế, đã bao gồm thuế",
									"         * - random số lượng discount",
									"         *    - random is_rate",
									"         *    - random value respective with is_rate",
									"         * Công thức tính: https://sobanhang.larksuite.com/wiki/K42mwQN7hifMjxktLQVuu2Kqszg",
									"         */",
									"        // console.log(\"due_at before: \" + new Date(due_at*1000));",
									"        let ranTimeCase = getRandomInt(1,5);",
									"        pm.environment.set(\"C-ranTimeCase\",ranTimeCase);",
									"        console.log(\"ranTimeCase: \" + ranTimeCase);",
									"        switch(ranTimeCase){ // getRandomInt(1,5)",
									"            case 1:",
									"                // due_at + 31d < current",
									"                past_date = new Date((current_timestamp - 61*24*60*60)*1000);",
									"                past_due_date = new Date((current_timestamp - 31*24*60*60)*1000);",
									"                created_order_at = past_date.toISOString();",
									"                due_at = past_due_date.toISOString();",
									"                break;",
									"            case 2:",
									"                // created_order_at == current",
									"                created_order_at = today.toISOString();",
									"                due_at = d30.toISOString();",
									"                break;",
									"            case 3:",
									"                // created_order_at > current",
									"                created_order_at = next_date.toISOString();",
									"                due_at = d30.toISOString();",
									"            case 4:",
									"                // due_at + 61d < current",
									"                past_date = new Date((current_timestamp - 91*24*60*60)*1000);",
									"                past_due_date = new Date((current_timestamp - 61*24*60*60)*1000);",
									"                created_order_at = past_date.toISOString();",
									"                due_at = past_due_date.toISOString();",
									"                break;",
									"            default:",
									"                // due_at < current",
									"                let ranPastDay = getRandomInt(1,29);",
									"                past_date = new Date((current_timestamp - (ranPastDay+30)*24*60*60)*1000);",
									"                past_due_date = new Date((current_timestamp - ranPastDay*24*60*60)*1000);",
									"                created_order_at = past_date.toISOString();",
									"                due_at = past_due_date.toISOString();",
									"                break;",
									"        }",
									"        // console.log(\"due_at after: \" + due_at);",
									"        ",
									"        // tính discount",
									"        let randTotalDC = getRandomInt(0,1); // currently, dev only support 1 discount for every invoice",
									"        let discount_amount = 0;",
									"        let randTotalTax = getRandomInt(1,3);",
									"        let randListPos = randNotDupe(0,list_tax.length - 1,randTotalTax);",
									"        switch(getRandomInt(1,3)){ // getRandomInt(1,3)",
									"            case 1:",
									"                tax_type = tax_types[0];",
									"",
									"                for(let i = 0; i < randTotalDC; i++){",
									"                    let discount_amount_i = 0;",
									"                    if(getRandomInt(0,1)){",
									"                        discount_amount_i = getRandomInt(10,1000) / 10;",
									"                        discounts[discounts.length] = {",
									"                            \"currency\": \"\",",
									"                            \"is_rate\": true,",
									"                            \"value\": discount_amount_i",
									"                        }",
									"                        discount_amount_i = Math.ceil(amount*discount_amount_i/100);",
									"                    } else {",
									"                        discount_amount_i = Math.ceil(amount / getRandomInt(2,10));",
									"                        discounts[discounts.length] = {",
									"                            \"currency\": \"\",",
									"                            \"is_rate\": false,",
									"                            \"value\": discount_amount_i",
									"                        }",
									"                    }",
									"                    discount_amount += discount_amount_i;",
									"                }",
									"",
									"                // tính tax sau khi đã trừ discount",
									"                for(let i in randListPos){",
									"                    // chỉ cần gửi tax_id, các thông số khác dùng để check data",
									"                    taxes[taxes.length] = {",
									"                        \"account_id\": list_tax[randListPos[i]].account_id,",
									"                        \"amount\": Math.ceil((amount - discount_amount)*list_tax[randListPos[i]].rate/100),",
									"                        \"name\": list_tax[randListPos[i]].name,",
									"                        \"tax_id\": list_tax[randListPos[i]].tax_id",
									"                    };",
									"                }",
									"                break;",
									"            case 2:",
									"                tax_type = tax_types[1];",
									"                // tách thuế",
									"                let total_tax_rate = 0;",
									"                for(let i in randListPos){",
									"                    // chỉ cần gửi tax_id, các thông số khác dùng để check data",
									"                    total_tax_rate += list_tax[randListPos[i]].rate;",
									"                    taxes[taxes.length] = {",
									"                        \"account_id\": list_tax[randListPos[i]].account_id,",
									"                        \"amount\": 0,",
									"                        \"rate\":list_tax[randListPos[i]].rate,",
									"                        \"name\": list_tax[randListPos[i]].name,",
									"                        \"tax_id\": list_tax[randListPos[i]].tax_id",
									"                    };",
									"                }",
									"                let sub_total_before_tax = Math.ceil(amount/(1+(total_tax_rate/100)));",
									"",
									"                // discount",
									"                for(let i = 0; i < randTotalDC; i++){",
									"                    let discount_amount_i = 0;",
									"                    if(getRandomInt(0,1)){ // getRandomInt(0,1)",
									"                        discount_amount_i = getRandomInt(10,1000) / 10;",
									"                        discounts[discounts.length] = {",
									"                            \"currency\": \"\",",
									"                            \"is_rate\": true,",
									"                            \"value\": discount_amount_i",
									"                        }",
									"                        discount_amount_i = Math.ceil(sub_total_before_tax*discount_amount_i/100);",
									"                    } else {",
									"                        discount_amount_i = Math.ceil(amount / getRandomInt(2,10));",
									"                        discounts[discounts.length] = {",
									"                            \"currency\": \"\",",
									"                            \"is_rate\": false,",
									"                            \"value\": discount_amount_i",
									"                        }",
									"                    }",
									"                    discount_amount += discount_amount_i;",
									"                }",
									"",
									"                // tính lại thuế",
									"                for(let i in taxes){",
									"                    taxes[i].amount = Math.ceil((sub_total_before_tax-discount_amount)*taxes[i].rate/100);",
									"                }",
									"                break;",
									"            case 3:",
									"            default:",
									"                tax_type = tax_types[2];",
									"",
									"                for(let i = 0; i < randTotalDC; i++){",
									"                    let discount_amount_i = 0;",
									"                    if(getRandomInt(0,1)){",
									"                        discount_amount_i = getRandomInt(10,1000) / 10;",
									"                        discounts[discounts.length] = {",
									"                            \"currency\": \"\",",
									"                            \"is_rate\": true,",
									"                            \"value\": discount_amount_i",
									"                        }",
									"                        discount_amount_i = Math.ceil(amount*discount_amount_i/100);",
									"                    } else {",
									"                        discount_amount_i = Math.ceil(amount / getRandomInt(2,10));",
									"                        discounts[discounts.length] = {",
									"                            \"currency\": \"\",",
									"                            \"is_rate\": false,",
									"                            \"value\": discount_amount_i",
									"                        }",
									"                    }",
									"                    discount_amount += discount_amount_i;",
									"                }",
									"",
									"                // tính tax sau khi đã trừ discount => có truyền hay ko truyền tax thì vẫn ko tính",
									"                for(let i in randListPos){",
									"                    // chỉ cần gửi tax_id, các thông số khác dùng để check data",
									"                    taxes[taxes.length] = {",
									"                        \"account_id\": list_tax[randListPos[i]].account_id,",
									"                        \"amount\": Math.ceil((amount - discount_amount)*list_tax[randListPos[i]].rate/100),",
									"                        \"name\": list_tax[randListPos[i]].name,",
									"                        \"tax_id\": list_tax[randListPos[i]].tax_id",
									"                    };",
									"                }",
									"                break;",
									"        }",
									"",
									"        let randTotalPM = getRandomInt(1,payment_method_list.length);",
									"        let randListPMPos = randNotDupe(0,payment_method_list.length - 1,randTotalPM);",
									"        for(let i in randListPMPos){",
									"            payment_config[payment_config.length] = payment_method_list[randListPMPos[i]];",
									"        }",
									"        ",
									"        payment_account_id = list_bank_account[getRandomInt(0,list_bank_account.length - 1)].account_id;",
									"        break;",
									"    default:",
									"        console.log(\"Missing flow\");",
									"        break;",
									"}",
									"",
									"let payload = {",
									"    \"account_credit\":account_credit,",
									"    \"sub_total_amount\": amount,",
									"    \"branch_id\": branch_id,",
									"    \"contact_id\": contact_id,",
									"    \"email\":email,",
									"    \"created_order_at\": created_order_at,",
									"    \"due_at\":due_at,",
									"    \"currency\": \"\",",
									"    \"description\": description,",
									"    \"discounts\": discounts,",
									"    \"displays_id\": \"\",",
									"    \"tax_type\":tax_type,",
									"    \"taxes\": taxes,",
									"    \"payment_config\":payment_config,",
									"    \"entry_code\":entry_code,",
									"    \"items\": [],",
									"    \"status\": status,",
									"    \"payment_account_id\":payment_account_id",
									"}",
									"",
									"console.log(\"payload: \",payload);",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));",
									"pm.environment.set(\"C-invoice_obj\",payload);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ====================================== parser cURL",
									"function parseCURL(request_api){",
									"    let curl = \"\";",
									"    if(request_api.method == \"PUT\"){",
									"        curl = \"curl --location --request PUT \";",
									"    } else {",
									"        curl = \"curl --location \";",
									"    }",
									"    curl += \"'\" + request_api.url.protocol + \"://\"",
									"    // host",
									"    for(let i in request_api.url.host){",
									"        if(i >= request_api.url.host.length - 1){",
									"            curl += request_api.url.host[i] + \"/\";",
									"        } else {",
									"            curl += request_api.url.host[i] + \".\";",
									"        }",
									"    }",
									"    // path",
									"    for(let i in request_api.url.path){",
									"        if(i >= request_api.url.path.length - 1){",
									"            curl += request_api.url.path[i];",
									"        } else {",
									"            curl += request_api.url.path[i] + \"/\";",
									"        }",
									"    }",
									"    // query (if have)",
									"    if(\"query\" in request_api.url){",
									"        curl += \"? \";",
									"        for(let i in request_api.url.query){",
									"            if(i >= request_api.url.query.length - 1){",
									"                curl += request_api.url.query[i].key + \"=\" + request_api.url.query[i].value + \"' \";",
									"            } else {",
									"                curl += request_api.url.query[i].key + \"=\" + request_api.url.query[i].value + \"&\";",
									"            }",
									"        }",
									"    } else {",
									"        curl += \"' \";",
									"    }",
									"    // header",
									"    for(let i in request_api.header){",
									"        if(i >= request_api.header.length - 1){",
									"            curl += \"--header '\" + request_api.header[i].key + \": \" + request_api.header[i].value + \"'\";",
									"        } else {",
									"            curl += \"--header '\" + request_api.header[i].key + \": \" + request_api.header[i].value + \"' \";",
									"        }",
									"    }",
									"    switch(request_api.method){",
									"        case \"POST\":",
									"            curl += \" --data '\" + request_api.body.raw + \"'\"",
									"            break;",
									"        case \"PUT\":",
									"            curl += \" --data-raw '\" + request_api.body.raw + \"'\"",
									"            break;",
									"        default:",
									"            break;",
									"    }",
									"    console.log(curl);",
									"    return curl;",
									"}",
									"const request_api = pm.request.toJSON();",
									"parseCURL(request_api);",
									"",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"let case_ = pm.environment.get(\"C-case_\");",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200 || pm.response.code == 400){",
									"    switch(case_){",
									"        case 1: case 2: case 3: case 4: case 5:",
									"        case 6: case 7: case 8: case 9: case 10:",
									"        case 11: case 0:",
									"            pm.test(\"Status code is 400\", function () {",
									"                pm.response.to.have.status(400);",
									"            });",
									"",
									"            console.log(\"Error: \", jsData);",
									"",
									"            case_ = 12;",
									"            // case_++;",
									"            pm.environment.set(\"C-case_\",case_);",
									"            postman.setNextRequest(\"edit_invoice\"); // edit_invoice",
									"            break;",
									"        case 12:",
									"            console.log(\"debug: \" + JSON.stringify(jsData));",
									"            let invoice_edit_obj = pm.environment.get(\"C-invoice_edit_obj\");",
									"",
									"            pm.test(\"Status code is 200\", function () {",
									"                pm.response.to.have.status(200);",
									"            });",
									"",
									"            pm.environment.unset(\"C-case_\");",
									"            let invoice_obj = pm.environment.get(\"C-invoice_obj\");",
									"",
									"            // update invoice_id for invoice_obj",
									"            invoice_obj.invoice_id = jsData.data.id;",
									"",
									"            pm.test(\"entry_code of invoice correctly! \" + invoice_obj.entry_code, function () {",
									"                pm.expect(invoice_obj.entry_code == jsData.data.entry_code).to.be.true;",
									"            });",
									"",
									"            let sub_total_amount = invoice_obj.sub_total_amount;",
									"            pm.test(\"sub_total_amount of invoice correctly! \" + sub_total_amount, function () {",
									"                console.log(\"act: \" + jsData.data.sub_total_amount);",
									"                pm.expect(sub_total_amount == jsData.data.sub_total_amount).to.be.true;",
									"            });",
									"",
									"            // discount_amount",
									"            // total_tax_amount",
									"            let discount_amount = 0;",
									"            let list_tax = pm.environment.get(\"C-list_tax\");",
									"            let total_tax_amount = 0;",
									"            let sub_total_before_tax;",
									"            switch(invoice_obj.tax_type){",
									"                case \"price_excluding_tax\":",
									"                    // check discount",
									"                    for(let i in invoice_obj.discounts){",
									"                        if(invoice_obj.discounts[i].is_rate){",
									"                            discount_amount += Math.ceil(invoice_obj.discounts[i].value*sub_total_amount/100);",
									"                        } else {",
									"                            discount_amount += invoice_obj.discounts[i].value;",
									"                        }",
									"                    }",
									"",
									"                    pm.test(\"discount_amount of invoice correctly! \" + discount_amount.toFixed(2), function () {",
									"                        console.log(\"act: \" + jsData.data.discount_amount.toFixed(2));",
									"                        pm.expect(discount_amount.toFixed(2) == jsData.data.discount_amount.toFixed(2)).to.be.true;",
									"                    });",
									"                    invoice_obj.discount_amount = discount_amount.toFixed(2);",
									"",
									"                    // calculate tax",
									"                    for(let k in invoice_obj.taxes){",
									"                        for(let j in list_tax){",
									"                            if(invoice_obj.taxes[k].tax_id == list_tax[j].tax_id){",
									"                                total_tax_amount += Math.ceil(list_tax[j].rate*(invoice_obj.sub_total_amount-discount_amount)/100);",
									"                                break;",
									"                            }",
									"                        }",
									"                    }",
									"                    break;",
									"                case \"price_including_tax\":",
									"                    // tách thuế",
									"                    let total_tax_rate = 0;",
									"                    for(let i in invoice_obj.taxes){",
									"                        total_tax_rate += invoice_obj.taxes[i].rate;",
									"                    }",
									"                    sub_total_before_tax = Math.ceil(invoice_obj.sub_total_amount/(1+(total_tax_rate/100)));",
									"                    invoice_obj.sub_total_before_tax = sub_total_before_tax;",
									"",
									"                    // discount",
									"                    for(let i in invoice_obj.discounts){",
									"                        if(invoice_obj.discounts[i].is_rate){",
									"                            discount_amount += Math.ceil(invoice_obj.discounts[i].value*sub_total_before_tax/100);",
									"                        } else {",
									"                            discount_amount += invoice_obj.discounts[i].value;",
									"                        }",
									"                    }",
									"",
									"                    pm.test(\"discount_amount of invoice correctly! \" + discount_amount.toFixed(2), function () {",
									"                        console.log(\"act: \" + jsData.data.discount_amount.toFixed(2));",
									"                        pm.expect(discount_amount.toFixed(2) == jsData.data.discount_amount.toFixed(2)).to.be.true;",
									"                    });",
									"                    invoice_obj.discount_amount = discount_amount;",
									"",
									"                    // calculate tax",
									"                    for(let k in invoice_obj.taxes){",
									"                        total_tax_amount += invoice_obj.taxes[k].amount;",
									"                    }",
									"                    break;",
									"                case \"tax_not_applicable\":",
									"                    console.log(\"Don't have tax with type tax_not_applicable\");",
									"                    // check discount",
									"                    for(let i in invoice_obj.discounts){",
									"                        if(invoice_obj.discounts[i].is_rate){",
									"                            discount_amount += Math.ceil(invoice_obj.discounts[i].value*sub_total_amount/100);",
									"                        } else {",
									"                            discount_amount += invoice_obj.discounts[i].value;",
									"                        }",
									"                    }",
									"",
									"                    pm.test(\"discount_amount of invoice correctly! \" + discount_amount.toFixed(2), function () {",
									"                        console.log(\"act: \" + jsData.data.discount_amount.toFixed(2));",
									"                        pm.expect(discount_amount.toFixed(2) == jsData.data.discount_amount.toFixed(2)).to.be.true;",
									"                    });",
									"                    invoice_obj.discount_amount = discount_amount;",
									"                    break;",
									"                default:",
									"                    pm.test(\"Missing tax type, please check \" + invoice_obj.tax_type, function () {",
									"                        pm.expect(true).to.be.false;",
									"                    });",
									"                    break;",
									"            }",
									"",
									"            pm.test(\"total_tax_amount of invoice correctly! \" + total_tax_amount.toFixed(2), function () {",
									"                console.log(\"act: \" + jsData.data.total_tax_amount.toFixed(2));",
									"                pm.expect(total_tax_amount.toFixed(2) == jsData.data.total_tax_amount.toFixed(2)).to.be.true;",
									"            });",
									"            invoice_obj.total_tax_amount = total_tax_amount;",
									"",
									"            // total_amount",
									"            let total_amount;",
									"            if(invoice_obj.tax_type == \"price_including_tax\"){",
									"                total_amount = (sub_total_before_tax + total_tax_amount - discount_amount).toFixed(2);",
									"            } else {",
									"                total_amount = (sub_total_amount + total_tax_amount - discount_amount).toFixed(2);",
									"            }",
									"",
									"            pm.test(\"total_amount of invoice correctly! \" + total_amount, function () {",
									"                console.log(\"act: \" + jsData.data.total_amount);",
									"                pm.expect(total_amount == jsData.data.total_amount.toFixed(2)).to.be.true;",
									"            });",
									"            invoice_obj.total_amount = total_amount;",
									"",
									"            // due_amount",
									"            let due_amount = (total_amount - invoice_edit_obj.paid_amount);",
									"            // pm.test(\"due_amount of invoice correctly! \" + due_amount, function () {",
									"            //     console.log(\"act: \" + jsData.data.due_amount);",
									"            //     pm.expect(due_amount == jsData.data.due_amount.toFixed(2)).to.be.true;",
									"            // });",
									"            if(due_amount < 0) due_amount = 0;",
									"            invoice_obj.due_amount = due_amount;",
									"",
									"            pm.test(\"contact_id of invoice correctly! \" + invoice_obj.contact_id, function () {",
									"                pm.expect(invoice_obj.contact_id == jsData.data.contact_id).to.be.true;",
									"            });",
									"",
									"            pm.test(\"email of invoice correctly! \" + invoice_obj.email, function () {",
									"                pm.expect(invoice_obj.email == jsData.data.email).to.be.true;",
									"            });",
									"",
									"            pm.test(\"created_order_at of invoice correctly! \" + invoice_obj.created_order_at, function () {",
									"                console.log(\"act: \" + jsData.data.value_at);",
									"                pm.expect(invoice_obj.created_order_at.substring(0,19) == jsData.data.value_at.substring(0,19)).to.be.true;",
									"            });",
									"",
									"            pm.test(\"due_at of invoice correctly! \" + invoice_obj.due_at, function () {",
									"                console.log(\"act: \" + jsData.data.due_at);",
									"                pm.expect(invoice_obj.due_at.substring(0,19) == jsData.data.due_at.substring(0,19)).to.be.true;",
									"            });",
									"",
									"            pm.test(\"description of invoice correctly! \" + invoice_obj.description, function () {",
									"                pm.expect(invoice_obj.description == jsData.data.description).to.be.true;",
									"            });",
									"",
									"            pm.test(\"tax_type of invoice correctly! \" + invoice_obj.tax_type, function () {",
									"                pm.expect(invoice_obj.tax_type == jsData.data.tax_type).to.be.true;",
									"            });",
									"",
									"            // pm.test(\"taxes of invoice correctly! \" + invoice_obj.taxes, function () {",
									"            //     pm.expect(JSON.stringify(invoice_obj.taxes) == JSON.stringify(jsData.data.taxes)).to.be.true;",
									"            // });",
									"",
									"            pm.test(\"payment_config of invoice correctly! \" + invoice_obj.payment_config, function () {",
									"                pm.expect(JSON.stringify(invoice_obj.payment_config) == JSON.stringify(jsData.data.payment_config)).to.be.true;",
									"            });",
									"",
									"            pm.test(\"status of invoice correctly! \" + invoice_obj.status, function () {",
									"                pm.expect(invoice_obj.status == jsData.data.status).to.be.true;",
									"            });",
									"",
									"            // final_status => ko trả về khi edit, cần call get list / get detail để lấy",
									"            // pm.test(\"final_status of invoice correctly! \" + invoice_obj.status, function () {",
									"            //     pm.expect(invoice_obj.status == jsData.data.final_status).to.be.true;",
									"            // });",
									"",
									"            // pm.test(\"discounts of invoice correctly! \" + invoice_obj.discounts, function () {",
									"            //     pm.expect(JSON.stringify(invoice_obj.discounts) == JSON.stringify(jsData.data.discounts)).to.be.true;",
									"            // });",
									"",
									"            testcase++;",
									"            pm.environment.set(\"C-testcase\",testcase);",
									"            pm.environment.set(\"C-invoice_obj\",invoice_obj);",
									"            postman.setNextRequest(\"get_list_invoice\"); // get_list_invoice",
									"            break;",
									"        default:",
									"            console.log(\"missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    pm.test(\"Can't edit invoice, end test\", function () {",
									"        console.log(\"Error: \", jsData);",
									"        pm.response.to.have.status(200);",
									"    });",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finan_base_url}}​/finan-ledger/api/v1/invoice/update/{{C-invoice_id}}",
							"host": [
								"{{finan_base_url}}​"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"invoice",
								"update",
								"{{C-invoice_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "buyer view",
			"item": [
				{
					"name": "buyer_view_invoice",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let invoice_edit_obj = pm.environment.get(\"C-invoice_edit_obj\");",
									"let system_code = invoice_edit_obj.system_code;",
									"console.log(\"view detail invoice: \" + system_code);",
									"",
									"pm.environment.set(\"C-system_code\",system_code);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"",
									"    let invoice_edit_obj = pm.environment.get(\"C-invoice_edit_obj\");",
									"    switch(testcase){",
									"        case 2:",
									"            if(\"entry_items\" in jsData.data){",
									"                invoice_edit_obj.items = jsData.data.entry_items;",
									"            } else {",
									"                invoice_edit_obj.items = [];",
									"                invoice_edit_obj.taxes = jsData.data.entry_taxes;",
									"            }",
									"",
									"            console.log(\"Debug: \", invoice_edit_obj);",
									"            pm.environment.set(\"C-invoice_edit_obj\",invoice_edit_obj);",
									"",
									"            // testcase = 5;",
									"            testcase++;",
									"            pm.environment.set(\"C-testcase\",testcase);",
									"            postman.setNextRequest(\"edit_invoice\"); // edit_invoice",
									"            break;",
									"        case 4:",
									"            let invoice_obj = pm.environment.get(\"C-invoice_obj\");",
									"",
									"            pm.test(\"entry_code of invoice correctly! \" + invoice_obj.entry_code, function () {",
									"                pm.expect(invoice_obj.entry_code == jsData.data.entry_code).to.be.true;",
									"            });",
									"",
									"            pm.test(\"sub_total_amount of invoice correctly! \" + invoice_obj.sub_total_amount, function () {",
									"                pm.expect(invoice_obj.sub_total_amount == jsData.data.sub_total_amount).to.be.true;",
									"            });",
									"",
									"            pm.test(\"contact_id of invoice correctly! \" + invoice_obj.contact_id, function () {",
									"                pm.expect(invoice_obj.contact_id == jsData.data.contact_id).to.be.true;",
									"            });",
									"",
									"            pm.test(\"email of invoice correctly! \" + invoice_obj.email, function () {",
									"                pm.expect(invoice_obj.email == jsData.data.email).to.be.true;",
									"            });",
									"",
									"            pm.test(\"created_order_at of invoice correctly! \" + invoice_obj.created_order_at, function () {",
									"                pm.expect(invoice_obj.created_order_at.substring(0,19) == jsData.data.value_at.substring(0,19)).to.be.true;",
									"            });",
									"",
									"            pm.test(\"due_at of invoice correctly! \" + invoice_obj.due_at, function () {",
									"                pm.expect(invoice_obj.due_at.substring(0,19) == jsData.data.due_at.substring(0,19)).to.be.true;",
									"            });",
									"",
									"            pm.test(\"description of invoice correctly! \" + invoice_obj.description, function () {",
									"                pm.expect(invoice_obj.description == jsData.data.description).to.be.true;",
									"            });",
									"",
									"            pm.test(\"tax_type of invoice correctly! \" + invoice_obj.tax_type, function () {",
									"                pm.expect(invoice_obj.tax_type == jsData.data.tax_type).to.be.true;",
									"            });",
									"",
									"            // pm.test(\"taxes of invoice correctly! \" + invoice_obj.taxes, function () {",
									"            //     pm.expect(JSON.stringify(invoice_obj.taxes) == JSON.stringify(jsData.data.taxes)).to.be.true;",
									"            // });",
									"",
									"            pm.test(\"payment_config of invoice correctly! \" + invoice_obj.payment_config, function () {",
									"                pm.expect(JSON.stringify(invoice_obj.payment_config) == JSON.stringify(jsData.data.payment_config)).to.be.true;",
									"            });",
									"",
									"            pm.test(\"status of invoice correctly! \" + invoice_obj.status, function () {",
									"                pm.expect(invoice_obj.status == jsData.data.status).to.be.true;",
									"            });",
									"",
									"            // due_amount",
									"            pm.test(\"due_amount of invoice correctly! \" + invoice_obj.due_amount, function () {",
									"                console.log(\"act: \" + jsData.data.due_amount);",
									"                pm.expect(invoice_obj.due_amount == jsData.data.due_amount.toFixed(2)).to.be.true;",
									"            });",
									"",
									"            // payment_status",
									"            if(invoice_obj.total_amount <= invoice_edit_obj.paid_amount){",
									"                pm.test(\"payment_status of invoice update to fully_paid\", function () {",
									"                    pm.expect(\"fully_paid\" == jsData.data.payment_status).to.be.true;",
									"                });",
									"            } else if(invoice_edit_obj.paid_amount == 0) {",
									"                pm.test(\"payment_status of invoice update to un_paid\", function () {",
									"                    pm.expect(\"un_paid\" == jsData.data.payment_status).to.be.true;",
									"                });",
									"            } else {",
									"                pm.test(\"payment_status of invoice update to partial_paid\", function () {",
									"                    pm.expect(\"partial_paid\" == jsData.data.payment_status).to.be.true;",
									"                });",
									"            }",
									"",
									"            // pm.test(\"discounts of invoice correctly! \" + invoice_obj.discounts, function () {",
									"            //     pm.expect(JSON.stringify(invoice_obj.discounts) == JSON.stringify(jsData.data.discounts)).to.be.true;",
									"            // });",
									"",
									"            postman.setNextRequest(\"get_debt_amount\"); // get_debt_amount",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get internal contact detail, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{finan_base_url}}/finan-ledger/api/v1/{{C-business_id}}/invoice/{{C-system_code}}",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"{{C-business_id}}",
								"invoice",
								"{{C-system_code}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "posting",
			"item": [
				{
					"name": "get_list_posting",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let page = pm.environment.get(\"C-page\");",
									"",
									"if(!page){",
									"    page = 1;",
									"    pm.environment.set(\"C-page\",page);",
									"",
									"    let page_size = 500;",
									"    pm.environment.set(\"C-page_size\",page_size);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = JSON.parse(responseBody);",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let total_pages = jsData.meta.total_pages;",
									"    let page = pm.environment.get(\"C-page\");",
									"",
									"    let list_posting, old_list_posting;",
									"    switch(testcase){",
									"        case 2:",
									"            list_posting = pm.environment.get(\"C-list_posting\");",
									"            if(!list_posting){",
									"                list_posting = [];",
									"            }",
									"            break;",
									"        case 4: case 6:",
									"            old_list_posting = pm.environment.get(\"C-old_list_posting\");",
									"            if(!old_list_posting){",
									"                old_list_posting = pm.environment.get(\"C-list_posting\");",
									"                pm.environment.unset(\"C-list_posting\");",
									"                pm.environment.set(\"C-old_list_posting\",old_list_posting);",
									"            }",
									"",
									"            list_posting = pm.environment.get(\"C-list_posting\");",
									"            if(!list_posting){",
									"                list_posting = [];",
									"            }",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow\");",
									"            break;",
									"    }",
									"",
									"    for(let item in jsData.data){",
									"        list_posting[list_posting.length] = {",
									"            \"posting_id\":jsData.data[item].id,",
									"            \"account_id\":jsData.data[item].account_id,",
									"            \"amount\":jsData.data[item].amount,",
									"            \"branch_id\":jsData.data[item].branch_id,",
									"            \"created_at\":jsData.data[item].created_at,",
									"            \"currency\":jsData.data[item].currency,",
									"            \"deleted_at\":jsData.data[item].deleted_at,",
									"            \"is_credit\":jsData.data[item].is_credit,",
									"            \"is_final_status\":jsData.data[item].is_final_status,",
									"            \"object_id_ref\":jsData.data[item].object_id_ref,",
									"            \"object_id\":jsData.data[item].object_id,",
									"            \"object_type\":jsData.data[item].object_type,",
									"            // \"value_at\":jsData.data[item].value_at,",
									"            \"short_desc\":jsData.data[item].short_desc",
									"        }",
									"    }",
									"    pm.environment.set(\"C-list_posting\",list_posting);",
									"",
									"    if(page >= total_pages){",
									"        // must clear page & page_size",
									"        pm.environment.unset(\"C-page\");",
									"        pm.environment.unset(\"C-page_size\");",
									"",
									"        switch(testcase){",
									"            case 2:",
									"                pm.test(\"Got all posting! \" + list_posting.length, function () {",
									"                    pm.expect(list_posting.length > 0).to.be.true;",
									"                });",
									"",
									"                postman.setNextRequest(\"get_report_account_receivable_unpaid\"); // get_report_account_receivable_unpaid",
									"                break;",
									"            case 4:",
									"                // xử lý cho invoice",
									"                let invoice_obj = pm.environment.get(\"C-invoice_obj\");",
									"                console.log(\"invoice_obj: \",invoice_obj);",
									"                let account_discount = pm.environment.get(\"C-discount\");",
									"                let account_receivable = pm.environment.get(\"C-account_receivable\");",
									"                let list_expected_posting = [];",
									"                // let total_tax_amount = invoice_obj.total_tax_amount;",
									"                switch(invoice_obj.tax_type){",
									"                    case \"price_excluding_tax\":",
									"                        // account_receivable",
									"                        list_expected_posting[0] = {",
									"                            \"object_type\":\"invoice\",",
									"                            \"object_id\":invoice_obj.invoice_id,",
									"                            \"object_id_ref\":\"00000000-0000-0000-0000-000000000000\",",
									"                            \"account_id\":account_receivable.id,",
									"                            \"is_credit\":false,",
									"                            \"amount\":invoice_obj.total_amount,",
									"                            \"type\":\"account_receivable\"",
									"                        }",
									"                        // discount list (fix or %) => discount trên sub_total (nếu sau khi + tax thì phải update lại)",
									"                        for(let i in invoice_obj.discounts){",
									"                            if(invoice_obj.discounts[i].is_rate){",
									"                                list_expected_posting[list_expected_posting.length] = {",
									"                                    \"object_type\":\"invoice\",",
									"                                    \"object_id\":invoice_obj.invoice_id,",
									"                                    \"object_id_ref\":\"00000000-0000-0000-0000-000000000000\",",
									"                                    \"account_id\":account_discount.id,",
									"                                    \"is_credit\":false,",
									"                                    \"amount\":(invoice_obj.sub_total_amount*invoice_obj.discounts[i].value/100).toFixed(2),",
									"                                    \"type\":\"discount_rate\"",
									"                                }",
									"                            } else {",
									"                                list_expected_posting[list_expected_posting.length] = {",
									"                                    \"object_type\":\"invoice\",",
									"                                    \"object_id\":invoice_obj.invoice_id,",
									"                                    \"object_id_ref\":\"00000000-0000-0000-0000-000000000000\",",
									"                                    \"account_id\":account_discount.id,",
									"                                    \"is_credit\":false,",
									"                                    \"amount\":invoice_obj.discounts[i].value.toFixed(2),",
									"                                    \"type\":\"discount_fix\"",
									"                                }",
									"                            }",
									"                        }",
									"                        // tax amount",
									"                        for(let j in invoice_obj.taxes){",
									"                            list_expected_posting[list_expected_posting.length] = {",
									"                                \"object_type\":\"invoice\",",
									"                                \"object_id\":invoice_obj.invoice_id,",
									"                                \"object_id_ref\":\"00000000-0000-0000-0000-000000000000\",",
									"                                \"account_id\":invoice_obj.taxes[j].account_id,",
									"                                \"is_credit\":true,",
									"                                \"amount\":invoice_obj.taxes[j].amount,",
									"                                \"type\":\"tax\",",
									"                                \"name\":invoice_obj.name,",
									"                                \"tax_name\":invoice_obj.taxes[j].name",
									"                            }",
									"                        }",
									"                        // account_credit",
									"                        list_expected_posting[list_expected_posting.length] = {",
									"                            \"object_type\":\"invoice\",",
									"                            \"object_id\":invoice_obj.invoice_id,",
									"                            \"object_id_ref\":\"00000000-0000-0000-0000-000000000000\",",
									"                            \"account_id\":invoice_obj.account_credit,",
									"                            \"is_credit\":true,",
									"                            \"amount\":invoice_obj.sub_total_amount,",
									"                            \"type\":\"account_credit\"",
									"                        }",
									"                        break;",
									"                    case \"price_including_tax\":",
									"                        // total_amount",
									"                        list_expected_posting[0] = {",
									"                            \"object_type\":\"invoice\",",
									"                            \"object_id\":invoice_obj.invoice_id,",
									"                            \"object_id_ref\":\"00000000-0000-0000-0000-000000000000\",",
									"                            \"account_id\":account_receivable.id,",
									"                            \"is_credit\":false,",
									"                            \"amount\":invoice_obj.total_amount,",
									"                            \"type\":\"account_receivable\"",
									"                        }",
									"                        /**",
									"                         * discount list (fix or %) => discount trên sub_total (nếu sau khi + tax thì phải update lại)",
									"                         * invoice_obj.items[].item_total_discount => if discount is array that will update later",
									"                        */",
									"                        for(let i in invoice_obj.discounts){",
									"                            if(invoice_obj.discounts[i].is_rate){",
									"                                list_expected_posting[list_expected_posting.length] = {",
									"                                    \"object_type\":\"invoice\",",
									"                                    \"object_id\":invoice_obj.invoice_id,",
									"                                    \"object_id_ref\":\"00000000-0000-0000-0000-000000000000\",",
									"                                    \"account_id\":account_discount.id,",
									"                                    \"is_credit\":false,",
									"                                    \"amount\":(invoice_obj.sub_total_before_tax*invoice_obj.discounts[i].value/100).toFixed(2),",
									"                                    \"type\":\"discount_rate\"",
									"                                }",
									"                            } else {",
									"                                list_expected_posting[list_expected_posting.length] = {",
									"                                    \"object_type\":\"invoice\",",
									"                                    \"object_id\":invoice_obj.invoice_id,",
									"                                    \"object_id_ref\":\"00000000-0000-0000-0000-000000000000\",",
									"                                    \"account_id\":account_discount.id,",
									"                                    \"is_credit\":false,",
									"                                    \"amount\":invoice_obj.discounts[i].value.toFixed(2),",
									"                                    \"type\":\"discount_fix\"",
									"                                }",
									"                            }",
									"                        }",
									"",
									"                        // tax amount",
									"                        for(let j in invoice_obj.taxes){",
									"                            list_expected_posting[list_expected_posting.length] = {",
									"                                \"object_type\":\"invoice\",",
									"                                \"object_id\":invoice_obj.invoice_id,",
									"                                \"object_id_ref\":\"00000000-0000-0000-0000-000000000000\",",
									"                                \"account_id\":invoice_obj.taxes[j].account_id,",
									"                                \"is_credit\":true,",
									"                                \"amount\":invoice_obj.taxes[j].amount,",
									"                                \"type\":\"tax\",",
									"                                \"name\":invoice_obj.name,",
									"                                \"tax_name\":invoice_obj.taxes[j].name",
									"                            }",
									"                        }",
									"                        ",
									"                        // sub_total_before_tax == account_credit",
									"                        list_expected_posting[list_expected_posting.length] = {",
									"                            \"object_type\":\"invoice\",",
									"                            \"object_id\":invoice_obj.invoice_id,",
									"                            \"object_id_ref\":\"00000000-0000-0000-0000-000000000000\",",
									"                            \"account_id\":invoice_obj.account_credit,",
									"                            \"is_credit\":true,",
									"                            \"amount\":invoice_obj.sub_total_before_tax,",
									"                            \"type\":\"account_credit\"",
									"                        }",
									"                        break;",
									"                    case \"tax_not_applicable\":",
									"                        // account_receivable",
									"                        list_expected_posting[0] = {",
									"                            \"object_type\":\"invoice\",",
									"                            \"object_id\":invoice_obj.invoice_id,",
									"                            \"object_id_ref\":\"00000000-0000-0000-0000-000000000000\",",
									"                            \"account_id\":account_receivable.id,",
									"                            \"is_credit\":false,",
									"                            \"amount\":invoice_obj.total_amount,",
									"                            \"type\":\"account_receivable\"",
									"                        }",
									"                        // discount list (fix or %)",
									"                        for(let i in invoice_obj.discounts){",
									"                            if(invoice_obj.discounts[i].is_rate){",
									"                                list_expected_posting[list_expected_posting.length] = {",
									"                                    \"object_type\":\"invoice\",",
									"                                    \"object_id\":invoice_obj.invoice_id,",
									"                                    \"object_id_ref\":\"00000000-0000-0000-0000-000000000000\",",
									"                                    \"account_id\":account_discount.id,",
									"                                    \"is_credit\":false,",
									"                                    \"amount\":(invoice_obj.sub_total_amount*invoice_obj.discounts[i].value/100).toFixed(2),",
									"                                    \"type\":\"discount_rate\"",
									"                                }",
									"                            } else {",
									"                                list_expected_posting[list_expected_posting.length] = {",
									"                                    \"object_type\":\"invoice\",",
									"                                    \"object_id\":invoice_obj.invoice_id,",
									"                                    \"object_id_ref\":\"00000000-0000-0000-0000-000000000000\",",
									"                                    \"account_id\":account_discount.id,",
									"                                    \"is_credit\":false,",
									"                                    \"amount\":invoice_obj.discounts[i].value.toFixed(2),",
									"                                    \"type\":\"discount_fix\"",
									"                                }",
									"                            }",
									"                        }",
									"                        // tax",
									"                        // account_credit",
									"                        list_expected_posting[list_expected_posting.length] = {",
									"                            \"object_type\":\"invoice\",",
									"                            \"object_id\":invoice_obj.invoice_id,",
									"                            \"object_id_ref\":\"00000000-0000-0000-0000-000000000000\",",
									"                            \"account_id\":invoice_obj.account_credit,",
									"                            \"is_credit\":true,",
									"                            \"amount\":invoice_obj.sub_total_amount,",
									"                            \"type\":\"account_credit\"",
									"                        }",
									"                        break;",
									"                    default:",
									"                        console.log(\"Missing tax_type\");",
									"                        break;",
									"                }",
									"                console.log(\"list_expected_posting: \" + JSON.stringify(list_expected_posting));",
									"",
									"                // xử lý cho act posting",
									"                let list_actual_posting = [];",
									"                for(let i in list_posting){",
									"                    if(list_posting[i].object_type == \"invoice\" && list_posting[i].object_id == invoice_obj.invoice_id){",
									"                        list_actual_posting[list_actual_posting.length] = {",
									"                            \"object_type\":list_posting[i].object_type,",
									"                            \"object_id\":list_posting[i].object_id,",
									"                            \"object_id_ref\":list_posting[i].object_id_ref,",
									"                            \"account_id\":list_posting[i].account_id,",
									"                            \"is_credit\":list_posting[i].is_credit,",
									"                            \"amount\":list_posting[i].amount",
									"                        }",
									"                    }",
									"                }",
									"                console.log(\"list_actual_posting: \" + JSON.stringify(list_actual_posting));",
									"",
									"                let invoice_edit_obj = pm.environment.get(\"C-invoice_edit_obj\");",
									"                console.log(\"invoice_obj before edit: \",invoice_edit_obj);",
									"                let invoice_edit_posting = 0;",
									"                let count_record;",
									"                if(invoice_edit_obj.status == \"active\"){",
									"                    if(invoice_edit_obj.items.length > 0){",
									"                        // console.log(\"Debug 0\");",
									"                        invoice_edit_posting += 1; // 1 is account_receivable",
									"                        if(invoice_edit_obj.discount_amount > 0){",
									"                            invoice_edit_posting += invoice_edit_obj.items.length + 1*invoice_edit_obj.items.length; // invoice_edit_obj.discounts.length => hiện tại chỉ có 1 hoặc 0 discount",
									"                        } else {",
									"                            invoice_edit_posting += invoice_edit_obj.items.length;",
									"                        }",
									"                        switch(invoice_edit_obj.tax_type){",
									"                            case \"price_excluding_tax\":",
									"                            case \"price_including_tax\":",
									"                                for(let i in invoice_edit_obj.items){",
									"                                    invoice_edit_posting += invoice_edit_obj.items[i].entry_item_taxes.length;",
									"                                }",
									"                                break;",
									"                            case \"tax_not_applicable\":",
									"                                break;",
									"                            default:",
									"                                console.log(\"Missing tax_type \" + invoice_edit_obj.tax_type);",
									"                                break;",
									"                        }",
									"                    } else {",
									"                        // console.log(\"Debug 0'\");",
									"                        // invoice_edit_posting += 1; // 1 is account_receivable",
									"                        switch(invoice_edit_obj.tax_type){",
									"                            case \"price_excluding_tax\":",
									"                            case \"price_including_tax\":",
									"                                if(invoice_edit_obj.discount_amount > 0){",
									"                                    try {",
									"                                        invoice_edit_posting = 1 + invoice_edit_obj.taxes.length + 2; // invoice_edit_obj.discounts.length, 1 is discount",
									"                                    } catch {",
									"                                        console.log(\"Missing taxes field => taxes = 0\");",
									"                                        invoice_edit_posting = 1 + 2;",
									"                                    }",
									"                                } else {",
									"                                    try {",
									"                                        invoice_edit_posting = invoice_edit_obj.taxes.length + 2;",
									"                                    } catch {",
									"                                        console.log(\"Missing taxes field => taxes = 0\");",
									"                                        invoice_edit_posting = 2;",
									"                                    }",
									"                                }",
									"                                break;",
									"                            case \"tax_not_applicable\":",
									"                                if(invoice_edit_obj.discount_amount > 0){",
									"                                    invoice_edit_posting = 1 + 2; // invoice_edit_obj.discounts.length",
									"                                } else {",
									"                                    invoice_edit_posting = 2;",
									"                                }",
									"                                break;",
									"                            default:",
									"                                console.log(\"Missing tax_type \" + invoice_edit_obj.tax_type);",
									"                                break;",
									"                        }",
									"                    }",
									"",
									"                    count_record = list_expected_posting.length - invoice_edit_posting; ",
									"                } else if(invoice_obj.status == \"active\") {",
									"                    // trước khi edit là draft thì số posting sẽ theo invoice_obj",
									"                    count_record = list_expected_posting.length;",
									"                } else {",
									"                    // trước và sau edit đều draft sẽ ko có thay đổi posting",
									"                    count_record = 0;",
									"                }",
									"",
									"                if(count_record >= 0){",
									"                    pm.test(\"Increase \" + count_record + \" new records\", function () {",
									"                        console.log(\"old: \" + old_list_posting.length);",
									"                        console.log(\"new: \" + list_posting.length);",
									"                        pm.expect(list_posting.length == old_list_posting.length + count_record).to.be.true;",
									"                    });",
									"                } else {",
									"                    pm.test(\"Decrease \" + Math.abs(count_record) + \" new records\", function () {",
									"                        console.log(\"old: \" + old_list_posting.length);",
									"                        console.log(\"new: \" + list_posting.length);",
									"                        pm.expect(list_posting.length == old_list_posting.length + count_record).to.be.true;",
									"                    });",
									"                }",
									"                ",
									"                let count = 0;",
									"                let foundAll = false;",
									"",
									"                let credit_amount = 0, debit_amount = 0;",
									"                if(invoice_obj.status != \"draft\"){",
									"                    for(let i in list_actual_posting){",
									"                        if(list_actual_posting[i].is_credit){",
									"                            credit_amount += list_actual_posting[i].amount;",
									"                            // item amount & tax amount",
									"                            for(let j in list_expected_posting){",
									"                                if(list_expected_posting[j].is_credit){",
									"                                    if(list_actual_posting[i].account_id == list_expected_posting[j].account_id && list_actual_posting[i].object_id_ref == list_expected_posting[j].object_id_ref){",
									"                                        count++;",
									"                                        switch(list_expected_posting[j].type){",
									"                                            case \"tax\":",
									"                                                pm.test(\"Found tax \" + list_expected_posting[j].tax_name + \" in posting\", function () {",
									"                                                    pm.expect(true).to.be.true;",
									"                                                });",
									"                                                pm.test(\"--- amount correctly \" + list_expected_posting[j].amount, function () {",
									"                                                    console.log(\"act amount: \" + list_actual_posting[i].amount);",
									"                                                    pm.expect(list_expected_posting[j].amount == list_actual_posting[i].amount).to.be.true;",
									"                                                });",
									"                                                break;",
									"                                            case \"account_credit\":",
									"                                                pm.test(\"Found \" + list_expected_posting[j].type + \" in posting\", function () {",
									"                                                    pm.expect(true).to.be.true;",
									"                                                });",
									"                                                pm.test(\"--- amount correctly \" + list_expected_posting[j].amount, function () {",
									"                                                    console.log(\"act amount: \" + list_actual_posting[i].amount);",
									"                                                    pm.expect(list_expected_posting[j].amount == list_actual_posting[i].amount).to.be.true;",
									"                                                });",
									"                                                break;",
									"                                            default:",
									"                                                pm.test(\"Missing case\", function () {",
									"                                                    pm.expect(false).to.be.true;",
									"                                                });",
									"                                                break;",
									"                                        }",
									"                                        break;",
									"                                    }",
									"                                }",
									"                            }",
									"                        } else {",
									"                            debit_amount += list_actual_posting[i].amount;",
									"                            for(let j in list_expected_posting){",
									"                                if(!list_expected_posting[j].is_credit){",
									"                                    if(list_actual_posting[i].account_id == list_expected_posting[j].account_id && list_actual_posting[i].object_id_ref == list_expected_posting[j].object_id_ref){",
									"                                        count++;",
									"                                        switch(list_expected_posting[j].type){",
									"                                            case \"account_receivable\":",
									"                                                pm.test(\"Found product account_receivable in posting\", function () {",
									"                                                    pm.expect(true).to.be.true;",
									"                                                });",
									"                                                pm.test(\"--- amount correctly \" + list_expected_posting[j].amount, function () {",
									"                                                    console.log(\"act amount: \" + list_actual_posting[i].amount);",
									"                                                    pm.expect(list_expected_posting[j].amount == list_actual_posting[i].amount).to.be.true;",
									"                                                });",
									"                                                break;",
									"                                            case \"discount_rate\":",
									"                                                pm.test(\"Found product discount_rate in posting\", function () {",
									"                                                    pm.expect(true).to.be.true;",
									"                                                });",
									"                                                pm.test(\"--- amount correctly \" + list_expected_posting[j].amount, function () {",
									"                                                    console.log(\"act amount: \" + list_actual_posting[i].amount);",
									"                                                    pm.expect(list_expected_posting[j].amount == list_actual_posting[i].amount).to.be.true;",
									"                                                });",
									"                                                break;",
									"                                            case \"discount_fix\":",
									"                                                pm.test(\"Found product discount_fix in posting\", function () {",
									"                                                    pm.expect(true).to.be.true;",
									"                                                });",
									"                                                pm.test(\"--- amount correctly \" + list_expected_posting[j].amount, function () {",
									"                                                    console.log(\"act amount: \" + list_actual_posting[i].amount);",
									"                                                    pm.expect(list_expected_posting[j].amount == list_actual_posting[i].amount).to.be.true;",
									"                                                });",
									"                                                break;",
									"                                            case \"discount\":",
									"                                                pm.test(\"Found product discount in posting\", function () {",
									"                                                    pm.expect(true).to.be.true;",
									"                                                });",
									"                                                pm.test(\"--- amount correctly \" + list_expected_posting[j].amount, function () {",
									"                                                    console.log(\"act amount: \" + list_actual_posting[i].amount);",
									"                                                    pm.expect(list_expected_posting[j].amount == list_actual_posting[i].amount).to.be.true;",
									"                                                });",
									"                                                break;",
									"                                            default:",
									"                                                pm.test(\"Missing case\", function () {",
									"                                                    pm.expect(false).to.be.true;",
									"                                                });",
									"                                                break;",
									"                                        }",
									"                                        break;",
									"                                    }",
									"                                }",
									"                            }",
									"                        }",
									"",
									"                        if(count == list_expected_posting.length){ // count_record",
									"                            foundAll = true;",
									"                            break;",
									"                        }",
									"                    }",
									"                } else {",
									"                    if(list_actual_posting.length == 0) foundAll = true;",
									"                }",
									"",
									"                pm.test(\"Found all posting\", function () {",
									"                    pm.expect(foundAll).to.be.true;",
									"                });",
									"",
									"                pm.test(\"total credit_amount == total debit_amount\", function () {",
									"                    console.log(\"debit_amount: \" + debit_amount);",
									"                    console.log(\"credit_amount: \" + credit_amount);",
									"                    pm.expect(debit_amount == credit_amount).to.be.true;",
									"                });",
									"",
									"                postman.setNextRequest(\"get_report_account_receivable_unpaid\"); // get_report_account_receivable_unpaid",
									"                break;",
									"            default:",
									"                console.log(\"Missing flow, end test\");",
									"                postman.setNextRequest(null);",
									"                break;",
									"        }",
									"    } else {",
									"        page++;",
									"        pm.environment.set(\"C-page\",page);",
									"",
									"        console.log(\"view next page (\" + page + \") to get more posting\");",
									"        postman.setNextRequest(\"get_list_posting\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get list posting, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{finan_base_url}}/finan-ledger/api/v1/posting/list?branch_id={{C-business_id}}&page={{C-page}}&page_size={{C-page_size}}&search=&sort=",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"posting",
								"list"
							],
							"query": [
								{
									"key": "branch_id",
									"value": "{{C-business_id}}"
								},
								{
									"key": "page",
									"value": "{{C-page}}"
								},
								{
									"key": "page_size",
									"value": "{{C-page_size}}"
								},
								{
									"key": "search",
									"value": ""
								},
								{
									"key": "sort",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "report",
			"item": [
				{
					"name": "get_report_account_receivable_unpaid",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let unpaid_account_receivable = null;",
									"    try {",
									"        unpaid_account_receivable = jsData.data.unpaid_amount_lifetime_categories;",
									"    } catch {",
									"        console.log(\"Can't get data\");",
									"    }",
									"",
									"    switch(testcase){",
									"        case 2:",
									"            pm.test(\"Got unpaid_account_receivable data\", function () {",
									"                pm.environment.set(\"C-unpaid_account_receivable\",unpaid_account_receivable);",
									"                pm.expect(unpaid_account_receivable != null).to.be.true;",
									"            });",
									"",
									"            postman.setNextRequest(\"get_report_account_receivable_customer\"); //get_report_account_receivable_customer",
									"            break;",
									"        case 4:",
									"            // update số tiền của invoice cũ",
									"            let invoice_edit_obj = pm.environment.get(\"C-invoice_edit_obj\");",
									"            let old_data = pm.environment.get(\"C-unpaid_account_receivable\");",
									"            let due_amount = invoice_edit_obj.due_amount;",
									"",
									"            // update lại số tiền theo invoice mới",
									"            let invoice_obj = pm.environment.get(\"C-invoice_obj\");",
									"            if(invoice_obj.status == \"draft\"){",
									"                pm.test(\"nothing happen (draft)\", function () {",
									"                    pm.expect(JSON.stringify(unpaid_account_receivable) == JSON.stringify(old_data)).to.be.true;",
									"                });",
									"            } else {",
									"                let new_total_amount = parseFloat(invoice_obj.total_amount);",
									"",
									"                let exchange_amount = new_total_amount - parseFloat(invoice_edit_obj.total_amount);",
									"                // lưu thành biến exchange_amount mà ko lưu vào invoice_obj vì phía sau có action Math.abs sẽ thay đổi giá trị của biến",
									"                pm.environment.set(\"C-exchange_amount\",exchange_amount);",
									"                // unpaid_total",
									"                let debt_type;",
									"                if(exchange_amount < 0){",
									"                    exchange_amount = Math.abs(exchange_amount);",
									"                    if(due_amount > exchange_amount){",
									"                        // giảm tiền còn nợ",
									"                        debt_type = \"decrease\";",
									"                        pm.test(\"Total unpaid decrease \" + exchange_amount, function () {",
									"                            console.log(\"old: \" + old_data.unpaid_total);",
									"                            console.log(\"new: \" + unpaid_account_receivable.unpaid_total);",
									"                            pm.expect(unpaid_account_receivable.unpaid_total == old_data.unpaid_total - exchange_amount).to.be.true;",
									"                        });",
									"                    } else {",
									"                        // hết nợ",
									"                        debt_type = \"paid\";",
									"                        pm.test(\"Total unpaid decrease \" + due_amount, function () {",
									"                            console.log(\"old: \" + old_data.unpaid_total);",
									"                            console.log(\"new: \" + unpaid_account_receivable.unpaid_total);",
									"                            pm.expect(unpaid_account_receivable.unpaid_total == old_data.unpaid_total - due_amount).to.be.true;",
									"                        });",
									"                    }",
									"                } else {",
									"                    // tăng nợ",
									"                    debt_type = \"increase\";",
									"                    pm.test(\"Total unpaid increase \" + exchange_amount, function () {",
									"                        console.log(\"old: \" + old_data.unpaid_total);",
									"                        console.log(\"new: \" + unpaid_account_receivable.unpaid_total);",
									"                        pm.expect(unpaid_account_receivable.unpaid_total == exchange_amount + old_data.unpaid_total).to.be.true;",
									"                    });",
									"                }",
									"                pm.environment.set(\"C-debt_type\",debt_type);",
									"",
									"                let new_due_date = new Date(invoice_obj.due_at);",
									"                let new_due_date_timestamp = Math.floor(new_due_date.getTime()/1000);",
									"",
									"                let old_due_date = new Date(invoice_edit_obj.due_at);",
									"                let old_due_date_timestamp = Math.floor(old_due_date.getTime()/1000);",
									"",
									"                let today = new Date();",
									"                let today_timestamp = Math.floor(today.getTime()/1000);",
									"",
									"                let old_due_type;",
									"                if(old_due_date_timestamp > today_timestamp){",
									"                    old_due_type = \"undue\";",
									"                } else {",
									"                    if(today_timestamp - old_due_date_timestamp > 60*24*60*60){",
									"                        old_due_type = \"overdue_over\";",
									"                    } else if (today_timestamp - old_due_date_timestamp > 30*24*60*60){",
									"                        old_due_type = \"overdue_between\";",
									"                    } else {",
									"                        old_due_type = \"overdue_less\";",
									"                    }",
									"                }",
									"                pm.environment.set(\"C-old_due_type\",old_due_type);",
									"",
									"                let new_due_type;",
									"                if(new_due_date_timestamp > today_timestamp){",
									"                    new_due_type = \"undue\";",
									"                } else {",
									"                    if(today_timestamp - new_due_date_timestamp > 60*24*60*60){",
									"                        new_due_type = \"overdue_over\";",
									"                    } else if (today_timestamp - new_due_date_timestamp > 30*24*60*60){",
									"                        new_due_type = \"overdue_between\";",
									"                    } else {",
									"                        new_due_type = \"overdue_less\";",
									"                    }",
									"                }",
									"                pm.environment.set(\"C-new_due_type\",new_due_type);",
									"",
									"                switch(new_due_type){",
									"                    case \"undue\":",
									"                        switch(old_due_type){",
									"                            case \"undue\":",
									"                                switch(debt_type){",
									"                                    case \"increase\":",
									"                                        pm.test(\"unpaid_due increase \" + exchange_amount, function () {",
									"                                            console.log(\"old: \" + old_data.unpaid_due);",
									"                                            console.log(\"new: \" + unpaid_account_receivable.unpaid_due);",
									"                                            pm.expect(unpaid_account_receivable.unpaid_due == exchange_amount + old_data.unpaid_due).to.be.true;",
									"                                        });",
									"                                        break;",
									"                                    case \"decrease\":",
									"                                        pm.test(\"unpaid_due decrease \" + exchange_amount, function () {",
									"                                            console.log(\"old: \" + old_data.unpaid_due);",
									"                                            console.log(\"new: \" + unpaid_account_receivable.unpaid_due);",
									"                                            pm.expect(unpaid_account_receivable.unpaid_due == old_data.unpaid_due - exchange_amount).to.be.true;",
									"                                        });",
									"                                        break;",
									"                                    case \"paid\":",
									"                                        pm.test(\"unpaid_due decrease \" + due_amount, function () {",
									"                                            console.log(\"old: \" + old_data.unpaid_due);",
									"                                            console.log(\"new: \" + unpaid_account_receivable.unpaid_due);",
									"                                            pm.expect(unpaid_account_receivable.unpaid_due == old_data.unpaid_due - due_amount).to.be.true;",
									"                                        });",
									"                                    default:",
									"                                        break;",
									"                                }",
									"                                pm.test(\"nothing happen unpaid_overdue_less\", function () {",
									"                                    pm.expect(unpaid_account_receivable.unpaid_overdue_less == old_data.unpaid_overdue_less).to.be.true;",
									"                                });",
									"                                pm.test(\"nothing happen unpaid_overdue_between\", function () {",
									"                                    pm.expect(unpaid_account_receivable.unpaid_overdue_between == old_data.unpaid_overdue_between).to.be.true;",
									"                                });",
									"                                pm.test(\"nothing happen unpaid_overdue_over\", function () {",
									"                                    pm.expect(unpaid_account_receivable.unpaid_overdue_over == old_data.unpaid_overdue_over).to.be.true;",
									"                                });",
									"                                break;",
									"                            case \"overdue_less\":",
									"                                // tăng nợ unpaid_due",
									"                                pm.test(\"unpaid_due decrease \" + invoice_obj.due_amount, function () {",
									"                                    console.log(\"old: \" + old_data.unpaid_due);",
									"                                    console.log(\"new: \" + unpaid_account_receivable.unpaid_due);",
									"                                    pm.expect(unpaid_account_receivable.unpaid_due == invoice_obj.due_amount + old_data.unpaid_due).to.be.true;",
									"                                });",
									"                                // giảm nợ unpaid_overdue_less",
									"                                pm.test(\"unpaid_overdue_less increase \" + invoice_edit_obj.due_amount, function () {",
									"                                    console.log(\"old: \" + old_data.unpaid_overdue_less);",
									"                                    console.log(\"new: \" + unpaid_account_receivable.unpaid_overdue_less);",
									"                                    pm.expect(unpaid_account_receivable.unpaid_overdue_less == old_data.unpaid_overdue_less - invoice_edit_obj.due_amount).to.be.true;",
									"                                });",
									"",
									"                                pm.test(\"nothing happen unpaid_overdue_between\", function () {",
									"                                    pm.expect(unpaid_account_receivable.unpaid_overdue_between == old_data.unpaid_overdue_between).to.be.true;",
									"                                });",
									"                                pm.test(\"nothing happen unpaid_overdue_over\", function () {",
									"                                    pm.expect(unpaid_account_receivable.unpaid_overdue_over == old_data.unpaid_overdue_over).to.be.true;",
									"                                });",
									"                                break;",
									"                            case \"overdue_between\":",
									"                                // tăng nợ unpaid_due",
									"                                pm.test(\"unpaid_due decrease \" + invoice_obj.due_amount, function () {",
									"                                    console.log(\"old: \" + old_data.unpaid_due);",
									"                                    console.log(\"new: \" + unpaid_account_receivable.unpaid_due);",
									"                                    pm.expect(unpaid_account_receivable.unpaid_due == invoice_obj.due_amount + old_data.unpaid_due).to.be.true;",
									"                                });",
									"                                pm.test(\"nothing happen unpaid_overdue_less\", function () {",
									"                                    pm.expect(unpaid_account_receivable.unpaid_overdue_less == old_data.unpaid_overdue_less).to.be.true;",
									"                                });",
									"                                // giảm nợ unpaid_overdue_between",
									"                                pm.test(\"unpaid_overdue_between increase \" + invoice_edit_obj.due_amount, function () {",
									"                                    console.log(\"old: \" + old_data.unpaid_overdue_between);",
									"                                    console.log(\"new: \" + unpaid_account_receivable.unpaid_overdue_between);",
									"                                    pm.expect(unpaid_account_receivable.unpaid_overdue_between == old_data.unpaid_overdue_between - invoice_edit_obj.due_amount).to.be.true;",
									"                                });",
									"                                pm.test(\"nothing happen unpaid_overdue_over\", function () {",
									"                                    pm.expect(unpaid_account_receivable.unpaid_overdue_over == old_data.unpaid_overdue_over).to.be.true;",
									"                                });",
									"                                break;",
									"                            case \"overdue_over\":",
									"                                // tăng nợ unpaid_due",
									"                                pm.test(\"unpaid_due decrease \" + invoice_obj.due_amount, function () {",
									"                                    console.log(\"old: \" + old_data.unpaid_due);",
									"                                    console.log(\"new: \" + unpaid_account_receivable.unpaid_due);",
									"                                    pm.expect(unpaid_account_receivable.unpaid_due == invoice_obj.due_amount + old_data.unpaid_due).to.be.true;",
									"                                });",
									"                                pm.test(\"nothing happen unpaid_overdue_less\", function () {",
									"                                    pm.expect(unpaid_account_receivable.unpaid_overdue_less == old_data.unpaid_overdue_less).to.be.true;",
									"                                });",
									"                                pm.test(\"nothing happen unpaid_overdue_between\", function () {",
									"                                    pm.expect(unpaid_account_receivable.unpaid_overdue_between == old_data.unpaid_overdue_between).to.be.true;",
									"                                });",
									"                                // giảm nợ unpaid_overdue_over",
									"                                pm.test(\"unpaid_overdue_over increase \" + invoice_edit_obj.due_amount, function () {",
									"                                    console.log(\"old: \" + old_data.unpaid_overdue_over);",
									"                                    console.log(\"new: \" + unpaid_account_receivable.unpaid_overdue_over);",
									"                                    pm.expect(unpaid_account_receivable.unpaid_overdue_over == old_data.unpaid_overdue_over - invoice_edit_obj.due_amount).to.be.true;",
									"                                });",
									"                                break;",
									"                            default:",
									"                                pm.test(\"Missing due type\", function () {",
									"                                    pm.expect(false).to.be.true;",
									"                                });",
									"                                break;",
									"                        }",
									"                        break;",
									"                    case \"overdue_less\":",
									"                        switch(old_due_type){",
									"                            case \"undue\":",
									"                                // giảm nợ unpaid_due",
									"                                pm.test(\"unpaid_due decrease \" + invoice_edit_obj.due_amount, function () {",
									"                                    console.log(\"old: \" + old_data.unpaid_due);",
									"                                    console.log(\"new: \" + unpaid_account_receivable.unpaid_due);",
									"                                    pm.expect(unpaid_account_receivable.unpaid_due == old_data.unpaid_due - invoice_edit_obj.due_amount).to.be.true;",
									"                                });",
									"                                // tăng nợ unpaid_overdue_less",
									"                                pm.test(\"unpaid_overdue_less increase \" + invoice_obj.due_amount, function () {",
									"                                    console.log(\"old: \" + old_data.unpaid_overdue_less);",
									"                                    console.log(\"new: \" + unpaid_account_receivable.unpaid_overdue_less);",
									"                                    pm.expect(unpaid_account_receivable.unpaid_overdue_less == old_data.unpaid_overdue_less + invoice_obj.due_amount).to.be.true;",
									"                                });",
									"                                pm.test(\"nothing happen unpaid_overdue_between\", function () {",
									"                                    pm.expect(unpaid_account_receivable.unpaid_overdue_between == old_data.unpaid_overdue_between).to.be.true;",
									"                                });",
									"                                pm.test(\"nothing happen unpaid_overdue_over\", function () {",
									"                                    pm.expect(unpaid_account_receivable.unpaid_overdue_over == old_data.unpaid_overdue_over).to.be.true;",
									"                                });",
									"                                break;",
									"                            case \"overdue_less\":",
									"                                pm.test(\"nothing happen unpaid_due\", function () {",
									"                                    pm.expect(unpaid_account_receivable.unpaid_due == old_data.unpaid_due).to.be.true;",
									"                                });",
									"                                switch(debt_type){",
									"                                    case \"increase\":",
									"                                        pm.test(\"unpaid_overdue_less increase \" + exchange_amount, function () {",
									"                                            console.log(\"old: \" + old_data.unpaid_overdue_less);",
									"                                            console.log(\"new: \" + unpaid_account_receivable.unpaid_overdue_less);",
									"                                            pm.expect(unpaid_account_receivable.unpaid_overdue_less == exchange_amount + old_data.unpaid_overdue_less).to.be.true;",
									"                                        });",
									"                                        break;",
									"                                    case \"decrease\":",
									"                                        pm.test(\"unpaid_overdue_less decrease \" + exchange_amount, function () {",
									"                                            console.log(\"old: \" + old_data.unpaid_overdue_less);",
									"                                            console.log(\"new: \" + unpaid_account_receivable.unpaid_overdue_less);",
									"                                            pm.expect(unpaid_account_receivable.unpaid_overdue_less == old_data.unpaid_overdue_less - exchange_amount).to.be.true;",
									"                                        });",
									"                                        break;",
									"                                    case \"paid\":",
									"                                        pm.test(\"unpaid_overdue_less decrease \" + due_amount, function () {",
									"                                            console.log(\"old: \" + old_data.unpaid_overdue_less);",
									"                                            console.log(\"new: \" + unpaid_account_receivable.unpaid_overdue_less);",
									"                                            pm.expect(unpaid_account_receivable.unpaid_overdue_less == old_data.unpaid_overdue_less - due_amount).to.be.true;",
									"                                        });",
									"                                    default:",
									"                                        break;",
									"                                }",
									"                                pm.test(\"nothing happen unpaid_overdue_between\", function () {",
									"                                    pm.expect(unpaid_account_receivable.unpaid_overdue_between == old_data.unpaid_overdue_between).to.be.true;",
									"                                });",
									"                                pm.test(\"nothing happen unpaid_overdue_over\", function () {",
									"                                    pm.expect(unpaid_account_receivable.unpaid_overdue_over == old_data.unpaid_overdue_over).to.be.true;",
									"                                });",
									"                                break;",
									"                            case \"overdue_between\":",
									"                                pm.test(\"nothing happen unpaid_due\", function () {",
									"                                    pm.expect(unpaid_account_receivable.unpaid_due == old_data.unpaid_due).to.be.true;",
									"                                });",
									"                                // tăng nợ unpaid_overdue_less",
									"                                pm.test(\"unpaid_overdue_less increase \" + invoice_obj.due_amount, function () {",
									"                                    console.log(\"old: \" + old_data.unpaid_overdue_less);",
									"                                    console.log(\"new: \" + unpaid_account_receivable.unpaid_overdue_less);",
									"                                    pm.expect(unpaid_account_receivable.unpaid_overdue_less == old_data.unpaid_overdue_less + invoice_obj.due_amount).to.be.true;",
									"                                });",
									"                                // giảm nợ unpaid_overdue_between",
									"                                pm.test(\"unpaid_overdue_between decrease \" + invoice_edit_obj.due_amount, function () {",
									"                                    console.log(\"old: \" + old_data.unpaid_overdue_between);",
									"                                    console.log(\"new: \" + unpaid_account_receivable.unpaid_overdue_between);",
									"                                    pm.expect(unpaid_account_receivable.unpaid_overdue_between == old_data.unpaid_overdue_between -  invoice_edit_obj.due_amount).to.be.true;",
									"                                });",
									"                                pm.test(\"nothing happen unpaid_overdue_over\", function () {",
									"                                    pm.expect(unpaid_account_receivable.unpaid_overdue_over == old_data.unpaid_overdue_over).to.be.true;",
									"                                });",
									"                                break;",
									"                            case \"overdue_over\":",
									"                                pm.test(\"nothing happen unpaid_due\", function () {",
									"                                    pm.expect(unpaid_account_receivable.unpaid_due == old_data.unpaid_due).to.be.true;",
									"                                });",
									"                                // tăng nợ unpaid_overdue_less",
									"                                pm.test(\"unpaid_overdue_less increase \" + invoice_obj.due_amount, function () {",
									"                                    console.log(\"old: \" + old_data.unpaid_overdue_less);",
									"                                    console.log(\"new: \" + unpaid_account_receivable.unpaid_overdue_less);",
									"                                    pm.expect(unpaid_account_receivable.unpaid_overdue_less == old_data.unpaid_overdue_less + invoice_obj.due_amount).to.be.true;",
									"                                });",
									"                                pm.test(\"nothing happen unpaid_overdue_between\", function () {",
									"                                    pm.expect(unpaid_account_receivable.unpaid_overdue_between == old_data.unpaid_overdue_between).to.be.true;",
									"                                });",
									"                                // giảm nợ unpaid_overdue_over",
									"                                pm.test(\"unpaid_overdue_over decrease \" + invoice_edit_obj.due_amount, function () {",
									"                                    console.log(\"old: \" + old_data.unpaid_overdue_over);",
									"                                    console.log(\"new: \" + unpaid_account_receivable.unpaid_overdue_over);",
									"                                    pm.expect(unpaid_account_receivable.unpaid_overdue_over == old_data.unpaid_overdue_over - invoice_edit_obj.due_amount).to.be.true;",
									"                                });",
									"                                break;",
									"                            default:",
									"                                pm.test(\"Missing due type\", function () {",
									"                                    pm.expect(false).to.be.true;",
									"                                });",
									"                                break;",
									"                        }",
									"                        break;",
									"                    case \"overdue_between\":",
									"                        switch(old_due_type){",
									"                            case \"undue\":",
									"                                // giảm nợ unpaid_due",
									"                                pm.test(\"unpaid_due decrease \" + invoice_edit_obj.due_amount, function () {",
									"                                    console.log(\"old: \" + old_data.unpaid_due);",
									"                                    console.log(\"new: \" + unpaid_account_receivable.unpaid_due);",
									"                                    pm.expect(unpaid_account_receivable.unpaid_due == old_data.unpaid_due - invoice_edit_obj.due_amount).to.be.true;",
									"                                });",
									"                                pm.test(\"nothing happen unpaid_overdue_less\", function () {",
									"                                    pm.expect(unpaid_account_receivable.unpaid_overdue_less == old_data.unpaid_overdue_less).to.be.true;",
									"                                });",
									"                                // tăng nợ unpaid_overdue_between",
									"                                pm.test(\"unpaid_overdue_between increase \" + invoice_obj.due_amount, function () {",
									"                                    console.log(\"old: \" + old_data.unpaid_overdue_between);",
									"                                    console.log(\"new: \" + unpaid_account_receivable.unpaid_overdue_between);",
									"                                    pm.expect(unpaid_account_receivable.unpaid_overdue_between == old_data.unpaid_overdue_between + invoice_obj.due_amount).to.be.true;",
									"                                });",
									"                                pm.test(\"nothing happen unpaid_overdue_over\", function () {",
									"                                    pm.expect(unpaid_account_receivable.unpaid_overdue_over == old_data.unpaid_overdue_over).to.be.true;",
									"                                });",
									"                                break;",
									"                            case \"overdue_less\":",
									"                                pm.test(\"nothing happen unpaid_due\", function () {",
									"                                    pm.expect(unpaid_account_receivable.unpaid_due == old_data.unpaid_due).to.be.true;",
									"                                });",
									"                                // giảm nợ unpaid_overdue_less",
									"                                pm.test(\"unpaid_overdue_less decrease \" + invoice_edit_obj.due_amount, function () {",
									"                                    console.log(\"old: \" + old_data.unpaid_overdue_less);",
									"                                    console.log(\"new: \" + unpaid_account_receivable.unpaid_overdue_less);",
									"                                    pm.expect(unpaid_account_receivable.unpaid_overdue_less == old_data.unpaid_overdue_less - invoice_edit_obj.due_amount).to.be.true;",
									"                                });",
									"                                // tăng nợ unpaid_overdue_between",
									"                                pm.test(\"unpaid_overdue_between increase \" + invoice_obj.due_amount, function () {",
									"                                    console.log(\"old: \" + old_data.unpaid_overdue_between);",
									"                                    console.log(\"new: \" + unpaid_account_receivable.unpaid_overdue_between);",
									"                                    pm.expect(unpaid_account_receivable.unpaid_overdue_between == old_data.unpaid_overdue_between + invoice_obj.due_amount).to.be.true;",
									"                                });",
									"                                pm.test(\"nothing happen unpaid_overdue_over\", function () {",
									"                                    pm.expect(unpaid_account_receivable.unpaid_overdue_over == old_data.unpaid_overdue_over).to.be.true;",
									"                                });",
									"                                break;",
									"                            case \"overdue_between\":",
									"                                pm.test(\"nothing happen unpaid_due\", function () {",
									"                                    pm.expect(unpaid_account_receivable.unpaid_due == old_data.unpaid_due).to.be.true;",
									"                                });",
									"                                pm.test(\"nothing happen unpaid_overdue_less\", function () {",
									"                                    pm.expect(unpaid_account_receivable.unpaid_overdue_less == old_data.unpaid_overdue_less).to.be.true;",
									"                                });",
									"                                switch(debt_type){",
									"                                    case \"increase\":",
									"                                        pm.test(\"unpaid_overdue_between increase \" + exchange_amount, function () {",
									"                                            console.log(\"old: \" + old_data.unpaid_overdue_between);",
									"                                            console.log(\"new: \" + unpaid_account_receivable.unpaid_overdue_between);",
									"                                            pm.expect(unpaid_account_receivable.unpaid_overdue_between == exchange_amount + old_data.unpaid_overdue_between).to.be.true;",
									"                                        });",
									"                                        break;",
									"                                    case \"decrease\":",
									"                                        pm.test(\"unpaid_overdue_between decrease \" + exchange_amount, function () {",
									"                                            console.log(\"old: \" + old_data.unpaid_overdue_between);",
									"                                            console.log(\"new: \" + unpaid_account_receivable.unpaid_overdue_between);",
									"                                            pm.expect(unpaid_account_receivable.unpaid_overdue_between == old_data.unpaid_overdue_between - exchange_amount).to.be.true;",
									"                                        });",
									"                                        break;",
									"                                    case \"paid\":",
									"                                        pm.test(\"unpaid_overdue_between decrease \" + due_amount, function () {",
									"                                            console.log(\"old: \" + old_data.unpaid_overdue_between);",
									"                                            console.log(\"new: \" + unpaid_account_receivable.unpaid_overdue_between);",
									"                                            pm.expect(unpaid_account_receivable.unpaid_overdue_between == old_data.unpaid_overdue_between - due_amount).to.be.true;",
									"                                        });",
									"                                    default:",
									"                                        break;",
									"                                }",
									"                                pm.test(\"nothing happen unpaid_overdue_over\", function () {",
									"                                    pm.expect(unpaid_account_receivable.unpaid_overdue_over == old_data.unpaid_overdue_over).to.be.true;",
									"                                });",
									"                                break;",
									"                            case \"overdue_over\":",
									"                                pm.test(\"nothing happen unpaid_due\", function () {",
									"                                    pm.expect(unpaid_account_receivable.unpaid_due == old_data.unpaid_due).to.be.true;",
									"                                });",
									"                                pm.test(\"nothing happen unpaid_overdue_less\", function () {",
									"                                    pm.expect(unpaid_account_receivable.unpaid_overdue_less == old_data.unpaid_overdue_less).to.be.true;",
									"                                });",
									"                                // tăng nợ unpaid_overdue_between",
									"                                pm.test(\"unpaid_overdue_between increase \" + invoice_obj.due_amount, function () {",
									"                                    console.log(\"old: \" + old_data.unpaid_overdue_between);",
									"                                    console.log(\"new: \" + unpaid_account_receivable.unpaid_overdue_between);",
									"                                    pm.expect(unpaid_account_receivable.unpaid_overdue_between == old_data.unpaid_overdue_between + invoice_obj.due_amount).to.be.true;",
									"                                });",
									"                                // giảm nợ unpaid_overdue_over",
									"                                pm.test(\"unpaid_overdue_over decrease \" + invoice_edit_obj.due_amount, function () {",
									"                                    console.log(\"old: \" + old_data.unpaid_overdue_over);",
									"                                    console.log(\"new: \" + unpaid_account_receivable.unpaid_overdue_over);",
									"                                    pm.expect(unpaid_account_receivable.unpaid_overdue_over == old_data.unpaid_overdue_overunpaid_overdue_over - invoice_edit_obj.due_amount).to.be.true;",
									"                                });",
									"                                break;",
									"                            default:",
									"                                pm.test(\"Missing due type\", function () {",
									"                                    pm.expect(false).to.be.true;",
									"                                });",
									"                                break;",
									"                        }",
									"                        break;",
									"                    case \"overdue_over\":",
									"                        switch(old_due_type){",
									"                            case \"undue\":",
									"                                // giảm nợ unpaid_due",
									"                                pm.test(\"unpaid_due decrease \" + invoice_edit_obj.due_amount, function () {",
									"                                    console.log(\"old: \" + old_data.unpaid_due);",
									"                                    console.log(\"new: \" + unpaid_account_receivable.unpaid_due);",
									"                                    pm.expect(unpaid_account_receivable.unpaid_due == old_data.unpaid_due - invoice_edit_obj.due_amount).to.be.true;",
									"                                });",
									"                                pm.test(\"nothing happen unpaid_overdue_less\", function () {",
									"                                    pm.expect(unpaid_account_receivable.unpaid_overdue_less == old_data.unpaid_overdue_less).to.be.true;",
									"                                });",
									"                                pm.test(\"nothing happen unpaid_overdue_between\", function () {",
									"                                    pm.expect(unpaid_account_receivable.unpaid_overdue_between == old_data.unpaid_overdue_between).to.be.true;",
									"                                });",
									"                                // tăng nợ unpaid_overdue_over",
									"                                pm.test(\"unpaid_overdue_over increase \" + invoice_obj.due_amount, function () {",
									"                                    console.log(\"old: \" + old_data.unpaid_overdue_over);",
									"                                    console.log(\"new: \" + unpaid_account_receivable.unpaid_overdue_over);",
									"                                    pm.expect(unpaid_account_receivable.unpaid_overdue_over == old_data.unpaid_overdue_over + invoice_obj.due_amount).to.be.true;",
									"                                });",
									"                                break;",
									"                            case \"overdue_less\":",
									"                                pm.test(\"nothing happen unpaid_due\", function () {",
									"                                    pm.expect(unpaid_account_receivable.unpaid_due == old_data.unpaid_due).to.be.true;",
									"                                });",
									"                                // giảm nợ unpaid_overdue_less",
									"                                pm.test(\"unpaid_overdue_less decrease \" + invoice_edit_obj.due_amount, function () {",
									"                                    console.log(\"old: \" + old_data.unpaid_overdue_less);",
									"                                    console.log(\"new: \" + unpaid_account_receivable.unpaid_overdue_less);",
									"                                    pm.expect(unpaid_account_receivable.unpaid_overdue_less == old_data.unpaid_overdue_less - invoice_edit_obj.due_amount).to.be.true;",
									"                                });",
									"                                pm.test(\"nothing happen unpaid_overdue_between\", function () {",
									"                                    pm.expect(unpaid_account_receivable.unpaid_overdue_between == old_data.unpaid_overdue_between).to.be.true;",
									"                                });",
									"                                // tăng nợ unpaid_overdue_over",
									"                                pm.test(\"unpaid_overdue_over increase \" + invoice_obj.due_amount, function () {",
									"                                    console.log(\"old: \" + old_data.unpaid_overdue_over);",
									"                                    console.log(\"new: \" + unpaid_account_receivable.unpaid_overdue_over);",
									"                                    pm.expect(unpaid_account_receivable.unpaid_overdue_over == old_data.unpaid_overdue_over + invoice_obj.due_amount).to.be.true;",
									"                                });",
									"                                break;",
									"                            case \"overdue_between\":",
									"                                pm.test(\"nothing happen unpaid_due\", function () {",
									"                                    pm.expect(unpaid_account_receivable.unpaid_due == old_data.unpaid_due).to.be.true;",
									"                                });",
									"                                pm.test(\"nothing happen unpaid_overdue_less\", function () {",
									"                                    pm.expect(unpaid_account_receivable.unpaid_overdue_less == old_data.unpaid_overdue_less).to.be.true;",
									"                                });",
									"                                // giảm nợ unpaid_overdue_between",
									"                                pm.test(\"unpaid_overdue_between decrease \" + invoice_edit_obj.due_amount, function () {",
									"                                    console.log(\"old: \" + old_data.unpaid_overdue_between);",
									"                                    console.log(\"new: \" + unpaid_account_receivable.unpaid_overdue_between);",
									"                                    pm.expect(unpaid_account_receivable.unpaid_overdue_between == old_data.unpaid_overdue_between - invoice_edit_obj.due_amount).to.be.true;",
									"                                });",
									"                                // tăng nợ unpaid_overdue_over",
									"                                pm.test(\"unpaid_overdue_over increase \" + invoice_obj.due_amount, function () {",
									"                                    console.log(\"old: \" + old_data.unpaid_overdue_over);",
									"                                    console.log(\"new: \" + unpaid_account_receivable.unpaid_overdue_over);",
									"                                    pm.expect(unpaid_account_receivable.unpaid_overdue_over == old_data.unpaid_overdue_over + invoice_obj.due_amount).to.be.true;",
									"                                });",
									"                                break;",
									"                            case \"overdue_over\":",
									"                                pm.test(\"nothing happen unpaid_due\", function () {",
									"                                    pm.expect(unpaid_account_receivable.unpaid_due == old_data.unpaid_due).to.be.true;",
									"                                });",
									"                                pm.test(\"nothing happen unpaid_overdue_less\", function () {",
									"                                    pm.expect(unpaid_account_receivable.unpaid_overdue_less == old_data.unpaid_overdue_less).to.be.true;",
									"                                });",
									"                                pm.test(\"nothing happen unpaid_overdue_between\", function () {",
									"                                    pm.expect(unpaid_account_receivable.unpaid_overdue_between == old_data.unpaid_overdue_between).to.be.true;",
									"                                });",
									"                                switch(debt_type){",
									"                                    case \"increase\":",
									"                                        pm.test(\"unpaid_overdue_over increase \" + exchange_amount, function () {",
									"                                            console.log(\"old: \" + old_data.unpaid_overdue_over);",
									"                                            console.log(\"new: \" + unpaid_account_receivable.unpaid_overdue_over);",
									"                                            pm.expect(unpaid_account_receivable.unpaid_overdue_over == exchange_amount + old_data.unpaid_overdue_over).to.be.true;",
									"                                        });",
									"                                        break;",
									"                                    case \"decrease\":",
									"                                        pm.test(\"unpaid_overdue_over decrease \" + exchange_amount, function () {",
									"                                            console.log(\"old: \" + old_data.unpaid_overdue_over);",
									"                                            console.log(\"new: \" + unpaid_account_receivable.unpaid_overdue_over);",
									"                                            pm.expect(unpaid_account_receivable.unpaid_overdue_over == old_data.unpaid_overdue_over - exchange_amount).to.be.true;",
									"                                        });",
									"                                        break;",
									"                                    case \"paid\":",
									"                                        pm.test(\"unpaid_overdue_over decrease \" + due_amount, function () {",
									"                                            console.log(\"old: \" + old_data.unpaid_overdue_over);",
									"                                            console.log(\"new: \" + unpaid_account_receivable.unpaid_overdue_over);",
									"                                            pm.expect(unpaid_account_receivable.unpaid_overdue_over == old_data.unpaid_overdue_over - due_amount).to.be.true;",
									"                                        });",
									"                                    default:",
									"                                        break;",
									"                                }",
									"                                break;",
									"                            default:",
									"                                pm.test(\"Missing due type\", function () {",
									"                                    pm.expect(false).to.be.true;",
									"                                });",
									"                                break;",
									"                        }",
									"                        break;",
									"                    default:",
									"                        pm.test(\"Missing due type\", function () {",
									"                            pm.expect(false).to.be.true;",
									"                        });",
									"                        break;",
									"                }",
									"            }",
									"            ",
									"            postman.setNextRequest(\"get_report_account_receivable_customer\"); //get_report_account_receivable_customer",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get report account receivable unpaid, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"branch_id\": {{C-business_id}},\n    \"due_days\": 30\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finan_base_url}}/finan-ledger/api/v1/report/account-receivable-card-unpaid",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"report",
								"account-receivable-card-unpaid"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_report_account_receivable_customer",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let page = pm.environment.get(\"C-page\");",
									"",
									"if(!page){",
									"    page = 1;",
									"    pm.environment.set(\"C-page\",page);",
									"",
									"    let page_size = 50;",
									"    pm.environment.set(\"C-page_size\",page_size);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = JSON.parse(responseBody);",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let total_pages = jsData.meta.total_pages;",
									"    let page = pm.environment.get(\"C-page\");",
									"",
									"    let list_report_customer, old_list_report_customer;",
									"    switch(testcase){",
									"        case 2:",
									"            list_report_customer = pm.environment.get(\"C-list_report_customer\");",
									"            if(!list_report_customer){",
									"                list_report_customer = [];",
									"            }",
									"            break;",
									"        case 4: case 6:",
									"            old_list_report_customer = pm.environment.get(\"C-old_list_report_customer\");",
									"            if(!old_list_report_customer){",
									"                old_list_report_customer = pm.environment.get(\"C-list_report_customer\");",
									"                pm.environment.unset(\"C-list_report_customer\");",
									"                pm.environment.set(\"C-old_list_report_customer\",old_list_report_customer);",
									"            }",
									"",
									"            list_report_customer = pm.environment.get(\"C-list_report_customer\");",
									"            if(!list_report_customer){",
									"                list_report_customer = [];",
									"            }",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow\");",
									"            break;",
									"    }",
									"",
									"    for(let item in jsData.data){",
									"        list_report_customer[list_report_customer.length] = {",
									"            \"contact_id\":jsData.data[item].contact_id,",
									"            \"unpaid_total\":jsData.data[item].unpaid_total,",
									"            \"unpaid_due\":jsData.data[item].unpaid_due,",
									"            \"unpaid_overdue_less\":jsData.data[item].unpaid_overdue_less,",
									"            \"unpaid_overdue_between\":jsData.data[item].unpaid_overdue_between,",
									"            \"unpaid_overdue_over\":jsData.data[item].unpaid_overdue_over,",
									"            \"full_count\":jsData.data[item].full_count,",
									"            \"contact_name\":jsData.data[item].contact_info.contact_name,",
									"            \"contact_phone\":jsData.data[item].contact_info.contact_phone",
									"        }",
									"    }",
									"    pm.environment.set(\"C-list_report_customer\",list_report_customer);",
									"",
									"    if(page >= total_pages){",
									"        // must clear page & page_size",
									"        pm.environment.unset(\"C-page\");",
									"        pm.environment.unset(\"C-page_size\");",
									"",
									"        switch(testcase){",
									"            case 2:",
									"                pm.test(\"Got all record! \" + list_report_customer.length, function () {",
									"                    pm.expect(list_report_customer.length > 0).to.be.true;",
									"                });",
									"",
									"                postman.setNextRequest(\"get_report_account_receivable_invoice\"); // get_report_account_receivable_invoice",
									"                break;",
									"            case 4:",
									"                let contact_id = pm.environment.get(\"C-contact_id\");",
									"                let invoice_obj = pm.environment.get(\"C-invoice_obj\");",
									"                let invoice_edit_obj = pm.environment.get(\"C-invoice_edit_obj\");",
									"                let isFound = false, isFoundOld = false;",
									"                let record_new_cus_obj = null;",
									"                let record_old_cus_obj = null;",
									"                let inList = false;",
									"                if(contact_id == invoice_edit_obj.contact_id){",
									"                    console.log(\"KHÔNG THAY ĐỔI CUSTOMER\");",
									"                }",
									"",
									"                for(let i in old_list_report_customer){",
									"                    if(old_list_report_customer[i].contact_id == invoice_edit_obj.contact_id){",
									"                        record_old_cus_obj = old_list_report_customer[i];",
									"                        break;",
									"                    }",
									"                }",
									"",
									"                for(let i in old_list_report_customer){",
									"                    if(old_list_report_customer[i].contact_id == contact_id){",
									"                        inList = true;",
									"                        record_new_cus_obj = old_list_report_customer[i];",
									"                        break;",
									"                    }",
									"                }",
									"",
									"                console.log(\"old customer: \",record_old_cus_obj);",
									"                console.log(\"new customer: \",record_new_cus_obj);",
									"",
									"                if(inList || invoice_obj.status == \"draft\"){",
									"                    pm.test(\"Nothing happen with total record\", function () {",
									"                        pm.expect(list_report_customer.length == old_list_report_customer.length).to.be.true;",
									"                    });",
									"                } else {",
									"                    pm.test(\"Total record increase 1\", function () {",
									"                        pm.expect(list_report_customer.length == old_list_report_customer.length + 1).to.be.true;",
									"                    });",
									"                    record_new_cus_obj = {",
									"                        \"contact_id\":invoice_obj.contact_id,",
									"                        \"unpaid_total\":0,",
									"                        \"unpaid_due\":0,",
									"                        \"unpaid_overdue_less\":0,",
									"                        \"unpaid_overdue_between\":0,",
									"                        \"unpaid_overdue_over\":0,",
									"                        \"full_count\":0,",
									"                        \"contact_name\":null,",
									"                        \"contact_phone\":null",
									"                    }",
									"                }",
									"",
									"                let total_amount = parseFloat(invoice_obj.total_amount);",
									"                let new_due_type = pm.environment.get(\"C-new_due_type\");",
									"                for(let i in list_report_customer){",
									"                    if(list_report_customer[i].contact_id == contact_id){",
									"                        isFound = true;",
									"                        console.log(\"Found \" + list_report_customer[i].contact_name + ' - ' + list_report_customer[i].contact_phone);",
									"                        ",
									"                        if(invoice_obj.status == \"draft\"){",
									"                            pm.test(\"Nothing happen (draft)\", function () {",
									"                                // console.log(\"old: \" + record_new_cus_obj);",
									"                                // console.log(\"new: \" + list_report_customer[i]);",
									"                                pm.expect(JSON.stringify(list_report_customer[i]) == JSON.stringify(record_new_cus_obj)).to.be.true;",
									"                            });",
									"                        } else {",
									"                            pm.test(\"unpaid_total increase \" + total_amount, function () {",
									"                                console.log(\"old: \" + record_new_cus_obj.unpaid_total);",
									"                                console.log(\"new: \" + list_report_customer[i].unpaid_total);",
									"                                pm.expect(list_report_customer[i].unpaid_total == record_new_cus_obj.unpaid_total + total_amount).to.be.true;",
									"                            });",
									"",
									"                            switch(new_due_type){",
									"                                case \"undue\":",
									"                                    // unpaid_due",
									"                                    pm.test(\"unpaid_due increase \" + total_amount, function () {",
									"                                        console.log(\"old: \" + record_new_cus_obj.unpaid_due);",
									"                                        console.log(\"new: \" + list_report_customer[i].unpaid_due);",
									"                                        pm.expect(list_report_customer[i].unpaid_due == record_new_cus_obj.unpaid_due + total_amount).to.be.true;",
									"                                    });",
									"",
									"                                    // unpaid_overdue_less",
									"                                    pm.test(\"nothing happen unpaid_overdue_less\", function () {",
									"                                        pm.expect(list_report_customer[i].unpaid_overdue_less == record_new_cus_obj.unpaid_overdue_less).to.be.true;",
									"                                    });",
									"",
									"                                    // unpaid_overdue_between",
									"                                    pm.test(\"nothing happen unpaid_overdue_between\", function () {",
									"                                        pm.expect(list_report_customer[i].unpaid_overdue_between == record_new_cus_obj.unpaid_overdue_between).to.be.true;",
									"                                    });",
									"",
									"                                    // unpaid_overdue_over",
									"                                    pm.test(\"nothing happen unpaid_overdue_over\", function () {",
									"                                        pm.expect(list_report_customer[i].unpaid_overdue_over == record_new_cus_obj.unpaid_overdue_over).to.be.true;",
									"                                    });",
									"                                    break;",
									"                                case \"overdue_less\":",
									"                                    // unpaid_due",
									"                                    pm.test(\"nothing happen unpaid_due\", function () {",
									"                                        pm.expect(list_report_customer[i].unpaid_due == record_new_cus_obj.unpaid_due).to.be.true;",
									"                                    });",
									"",
									"                                    // unpaid_overdue_less",
									"                                    pm.test(\"unpaid_overdue_less increase \" + total_amount, function () {",
									"                                        console.log(\"old: \" + record_new_cus_obj.unpaid_overdue_less);",
									"                                        console.log(\"new: \" + list_report_customer[i].unpaid_overdue_less);",
									"                                        pm.expect(list_report_customer[i].unpaid_overdue_less == total_amount + record_new_cus_obj.unpaid_overdue_less).to.be.true;",
									"                                    });",
									"",
									"                                    // unpaid_overdue_between",
									"                                    pm.test(\"nothing happen unpaid_overdue_between\", function () {",
									"                                        pm.expect(list_report_customer[i].unpaid_overdue_between == record_new_cus_obj.unpaid_overdue_between).to.be.true;",
									"                                    });",
									"",
									"                                    // unpaid_overdue_over",
									"                                    pm.test(\"nothing happen unpaid_overdue_over\", function () {",
									"                                        pm.expect(list_report_customer[i].unpaid_overdue_over == record_new_cus_obj.unpaid_overdue_over).to.be.true;",
									"                                    });",
									"                                    break;",
									"                                case \"overdue_between\":",
									"                                    // unpaid_due",
									"                                    pm.test(\"nothing happen unpaid_due\", function () {",
									"                                        pm.expect(list_report_customer[i].unpaid_due == record_new_cus_obj.unpaid_due).to.be.true;",
									"                                    });",
									"",
									"                                    // unpaid_overdue_less",
									"                                    pm.test(\"nothing happen unpaid_overdue_less\", function () {",
									"                                        pm.expect(list_report_customer[i].unpaid_overdue_less == record_new_cus_obj.unpaid_overdue_less).to.be.true;",
									"                                    });",
									"",
									"                                    // unpaid_overdue_between",
									"                                    pm.test(\"unpaid_overdue_between increase \" + total_amount, function () {",
									"                                        console.log(\"old: \" + record_new_cus_obj.unpaid_overdue_between);",
									"                                        console.log(\"new: \" + list_report_customer[i].unpaid_overdue_between);",
									"                                        pm.expect(list_report_customer[i].unpaid_overdue_between == total_amount + record_new_cus_obj.unpaid_overdue_between).to.be.true;",
									"                                    });",
									"",
									"                                    // unpaid_overdue_over",
									"                                    pm.test(\"nothing happen unpaid_overdue_over\", function () {",
									"                                        pm.expect(list_report_customer[i].unpaid_overdue_over == record_new_cus_obj.unpaid_overdue_over).to.be.true;",
									"                                    });",
									"                                    break;",
									"                                case \"overdue_over\":",
									"                                    // unpaid_due",
									"                                    pm.test(\"nothing happen unpaid_due\", function () {",
									"                                        pm.expect(list_report_customer[i].unpaid_due == record_new_cus_obj.unpaid_due).to.be.true;",
									"                                    });",
									"",
									"                                    // unpaid_overdue_less",
									"                                    pm.test(\"nothing happen unpaid_overdue_less\", function () {",
									"                                        pm.expect(list_report_customer[i].unpaid_overdue_less == record_new_cus_obj.unpaid_overdue_less).to.be.true;",
									"                                    });",
									"",
									"                                    // unpaid_overdue_between",
									"                                    pm.test(\"unpaid_overdue_between increase\", function () {",
									"                                        pm.expect(list_report_customer[i].unpaid_overdue_between == record_new_cus_obj.unpaid_overdue_between).to.be.true;",
									"                                    });",
									"",
									"                                    // unpaid_overdue_over",
									"                                    pm.test(\"unpaid_overdue_over increase \" + total_amount, function () {",
									"                                        console.log(\"old: \" + record_new_cus_obj.unpaid_overdue_over);",
									"                                        console.log(\"new: \" + list_report_customer[i].unpaid_overdue_over);",
									"                                        pm.expect(list_report_customer[i].unpaid_overdue_over == total_amount + record_new_cus_obj.unpaid_overdue_over).to.be.true;",
									"                                    });",
									"                                    break;",
									"                                default:",
									"                                    pm.test(\"Missing due type\", function () {",
									"                                        pm.expect(false).to.be.true;",
									"                                    });",
									"                                    break;",
									"                            }",
									"                        }",
									"                        break;",
									"                    }",
									"                }",
									"",
									"                pm.test(\"Found new customer\", function () {",
									"                    pm.expect(isFound).to.be.true;",
									"                });",
									"",
									"                // ==================================== old customer",
									"                let old_due_type = pm.environment.get(\"C-old_due_type\");",
									"                for(let i in list_report_customer){",
									"                    if(list_report_customer[i].contact_id == invoice_edit_obj.contact_id){",
									"                        isFoundOld = true;",
									"                        console.log(\"Found \" + list_report_customer[i].contact_name + ' - ' + list_report_customer[i].contact_phone);",
									"                        ",
									"                        if(invoice_obj.status != \"draft\"){",
									"                            pm.test(\"unpaid_total decrease \" + invoice_edit_obj.due_amount, function () {",
									"                                console.log(\"old: \" + record_old_cus_obj.unpaid_total);",
									"                                console.log(\"new: \" + list_report_customer[i].unpaid_total);",
									"                                pm.expect(list_report_customer[i].unpaid_total == record_old_cus_obj.unpaid_total - invoice_edit_obj.due_amount).to.be.true;",
									"                            });",
									"",
									"                            switch(old_due_type){",
									"                                case \"undue\":",
									"                                    // unpaid_due",
									"                                    pm.test(\"unpaid_due decrease \" + invoice_edit_obj.due_amount, function () {",
									"                                        console.log(\"old: \" + record_old_cus_obj.unpaid_due);",
									"                                        console.log(\"new: \" + list_report_customer[i].unpaid_due);",
									"                                        pm.expect(list_report_customer[i].unpaid_due == parseFloat(record_old_cus_obj.unpaid_due) - parseFloat(invoice_edit_obj.due_amount)).to.be.true;",
									"                                    });",
									"",
									"                                    // unpaid_overdue_less",
									"                                    pm.test(\"nothing happen unpaid_overdue_less\", function () {",
									"                                        pm.expect(list_report_customer[i].unpaid_overdue_less == record_old_cus_obj.unpaid_overdue_less).to.be.true;",
									"                                    });",
									"",
									"                                    // unpaid_overdue_between",
									"                                    pm.test(\"nothing happen unpaid_overdue_between\", function () {",
									"                                        pm.expect(list_report_customer[i].unpaid_overdue_between == record_old_cus_obj.unpaid_overdue_between).to.be.true;",
									"                                    });",
									"",
									"                                    // unpaid_overdue_over",
									"                                    pm.test(\"nothing happen unpaid_overdue_over\", function () {",
									"                                        pm.expect(list_report_customer[i].unpaid_overdue_over == record_old_cus_obj.unpaid_overdue_over).to.be.true;",
									"                                    });",
									"                                    break;",
									"                                case \"overdue_less\":",
									"                                    // unpaid_due",
									"                                    pm.test(\"nothing happen unpaid_due\", function () {",
									"                                        pm.expect(list_report_customer[i].unpaid_due == record_old_cus_obj.unpaid_due).to.be.true;",
									"                                    });",
									"",
									"                                    // unpaid_overdue_less",
									"                                    pm.test(\"unpaid_overdue_less decrease \" + invoice_edit_obj.due_amount, function () {",
									"                                        console.log(\"old: \" + record_old_cus_obj.unpaid_overdue_less);",
									"                                        console.log(\"new: \" + list_report_customer[i].unpaid_overdue_less);",
									"                                        pm.expect(list_report_customer[i].unpaid_overdue_less == record_old_cus_obj.unpaid_overdue_less - invoice_edit_obj.due_amount).to.be.true;",
									"                                    });",
									"",
									"                                    // unpaid_overdue_between",
									"                                    pm.test(\"nothing happen unpaid_overdue_between\", function () {",
									"                                        pm.expect(list_report_customer[i].unpaid_overdue_between == record_old_cus_obj.unpaid_overdue_between).to.be.true;",
									"                                    });",
									"",
									"                                    // unpaid_overdue_over",
									"                                    pm.test(\"nothing happen unpaid_overdue_over\", function () {",
									"                                        pm.expect(list_report_customer[i].unpaid_overdue_over == record_old_cus_obj.unpaid_overdue_over).to.be.true;",
									"                                    });",
									"                                    break;",
									"                                case \"overdue_between\":",
									"                                    // unpaid_due",
									"                                    pm.test(\"nothing happen unpaid_due\", function () {",
									"                                        pm.expect(list_report_customer[i].unpaid_due == record_old_cus_obj.unpaid_due).to.be.true;",
									"                                    });",
									"",
									"                                    // unpaid_overdue_less",
									"                                    pm.test(\"nothing happen unpaid_overdue_less\", function () {",
									"                                        pm.expect(list_report_customer[i].unpaid_overdue_less == record_old_cus_obj.unpaid_overdue_less).to.be.true;",
									"                                    });",
									"",
									"                                    // unpaid_overdue_between",
									"                                    pm.test(\"unpaid_overdue_between decrease \" + invoice_edit_obj.due_amount, function () {",
									"                                        console.log(\"old: \" + record_old_cus_obj.unpaid_overdue_between);",
									"                                        console.log(\"new: \" + list_report_customer[i].unpaid_overdue_between);",
									"                                        pm.expect(list_report_customer[i].unpaid_overdue_between == record_old_cus_obj.unpaid_overdue_between - invoice_edit_obj.due_amount).to.be.true;",
									"                                    });",
									"",
									"                                    // unpaid_overdue_over",
									"                                    pm.test(\"nothing happen unpaid_overdue_over\", function () {",
									"                                        pm.expect(list_report_customer[i].unpaid_overdue_over == record_old_cus_obj.unpaid_overdue_over).to.be.true;",
									"                                    });",
									"                                    break;",
									"                                case \"overdue_over\":",
									"                                    // unpaid_due",
									"                                    pm.test(\"nothing happen unpaid_due\", function () {",
									"                                        pm.expect(list_report_customer[i].unpaid_due == record_old_cus_obj.unpaid_due).to.be.true;",
									"                                    });",
									"",
									"                                    // unpaid_overdue_less",
									"                                    pm.test(\"nothing happen unpaid_overdue_less\", function () {",
									"                                        pm.expect(list_report_customer[i].unpaid_overdue_less == record_old_cus_obj.unpaid_overdue_less).to.be.true;",
									"                                    });",
									"",
									"                                    // unpaid_overdue_between",
									"                                    pm.test(\"unpaid_overdue_between decrease\", function () {",
									"                                        pm.expect(list_report_customer[i].unpaid_overdue_between == record_old_cus_obj.unpaid_overdue_between).to.be.true;",
									"                                    });",
									"",
									"                                    // unpaid_overdue_over",
									"                                    pm.test(\"unpaid_overdue_over increase \" + invoice_edit_obj.due_amount, function () {",
									"                                        console.log(\"old: \" + record_old_cus_obj.unpaid_overdue_over);",
									"                                        console.log(\"new: \" + list_report_customer[i].unpaid_overdue_over);",
									"                                        pm.expect(list_report_customer[i].unpaid_overdue_over == record_old_cus_obj.unpaid_overdue_over - invoice_edit_obj.due_amount).to.be.true;",
									"                                    });",
									"                                    break;",
									"                                default:",
									"                                    pm.test(\"Missing due type\", function () {",
									"                                        pm.expect(false).to.be.true;",
									"                                    });",
									"                                    break;",
									"                            }",
									"                        }",
									"                        break;",
									"                    }",
									"                }",
									"",
									"                pm.test(\"Found old customer\", function () {",
									"                    pm.expect(isFoundOld).to.be.true;",
									"                });",
									"",
									"                postman.setNextRequest(\"get_report_account_receivable_invoice\"); // get_report_account_receivable_invoice",
									"                break;",
									"            default:",
									"                console.log(\"Missing flow, end test\");",
									"                postman.setNextRequest(null);",
									"                break;",
									"        }",
									"    } else {",
									"        page++;",
									"        pm.environment.set(\"C-page\",page);",
									"",
									"        console.log(\"view next page (\" + page + \") to get more product\");",
									"        postman.setNextRequest(\"get_report_account_receivable_customer\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get list product, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"branch_id\": {{C-business_id}},\n    \"due_days\": 30,\n    \"page\": {{C-page}},\n    \"page_size\": {{C-page_size}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finan_base_url}}/finan-ledger/api/v1/report/account-receivable-customer-unpaid",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"report",
								"account-receivable-customer-unpaid"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_report_account_receivable_invoice",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let page = pm.environment.get(\"C-page\");",
									"",
									"if(!page){",
									"    page = 1;",
									"    pm.environment.set(\"C-page\",page);",
									"",
									"    let page_size = 500;",
									"    pm.environment.set(\"C-page_size\",page_size);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = JSON.parse(responseBody);",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let total_pages = jsData.meta.total_pages;",
									"    let page = pm.environment.get(\"C-page\");",
									"",
									"    let list_report_invoice, old_list_report_invoice;",
									"    switch(testcase){",
									"        case 2:",
									"            list_report_invoice = pm.environment.get(\"C-list_report_invoice\");",
									"            if(!list_report_invoice){",
									"                list_report_invoice = [];",
									"            }",
									"            break;",
									"        case 4: case 6:",
									"            old_list_report_invoice = pm.environment.get(\"C-old_list_report_invoice\");",
									"            if(!old_list_report_invoice){",
									"                old_list_report_invoice = pm.environment.get(\"C-list_report_invoice\");",
									"                pm.environment.unset(\"C-list_report_invoice\");",
									"                pm.environment.set(\"C-old_list_report_invoice\",old_list_report_invoice);",
									"            }",
									"",
									"            list_report_invoice = pm.environment.get(\"C-list_report_invoice\");",
									"            if(!list_report_invoice){",
									"                list_report_invoice = [];",
									"            }",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow\");",
									"            break;",
									"    }",
									"",
									"    for(let item in jsData.data){",
									"        list_report_invoice[list_report_invoice.length] = {",
									"            \"invoice_id\":jsData.data[item].id,",
									"            \"entry_code\":jsData.data[item].entry_code,",
									"            \"contact_id\":jsData.data[item].contact_id,",
									"            \"contact_name\":jsData.data[item].contact_info.contact_name,",
									"            \"contact_phone\":jsData.data[item].contact_info.contact_phone,",
									"            \"invoice_created_date\":jsData.data[item].invoice_created_date,",
									"            \"invoice_due_date\":jsData.data[item].invoice_due_date,",
									"            \"unpaid_total\":jsData.data[item].unpaid_total,",
									"            \"unpaid_due\":jsData.data[item].unpaid_due,",
									"            \"unpaid_overdue_less\":jsData.data[item].unpaid_overdue_less,",
									"            \"unpaid_overdue_between\":jsData.data[item].unpaid_overdue_between,",
									"            \"unpaid_overdue_over\":jsData.data[item].unpaid_overdue_over",
									"        }",
									"    }",
									"    pm.environment.set(\"C-list_report_invoice\",list_report_invoice);",
									"",
									"    if(page >= total_pages){",
									"        // must clear page & page_size",
									"        pm.environment.unset(\"C-page\");",
									"        pm.environment.unset(\"C-page_size\");",
									"",
									"        switch(testcase){",
									"            case 2:",
									"                pm.test(\"Got all record! \" + list_report_invoice.length, function () {",
									"                    pm.expect(list_report_invoice.length > 0).to.be.true;",
									"                });",
									"",
									"                postman.setNextRequest(\"report_invoice_overdue\"); // report_invoice_overdue",
									"                break;",
									"            case 4:",
									"                let invoice_obj = pm.environment.get(\"C-invoice_obj\");",
									"                let invoice_edit_obj = pm.environment.get(\"C-invoice_edit_obj\");",
									"",
									"                /**",
									"                 * Chổ này cần update lại, có khá nhiều case xảy ra:",
									"                 * - invoice_edit_obj có status là draft",
									"                 *   + invoice_obj status = draft => nothing",
									"                 *   + invoice_obj status = active => new record",
									"                 *  - invoice_edit_obj có status là active",
									"                 *   + invoice_obj payment_status != fully_paid => nothing",
									"                 *   + invoice_obj payment_status == fully_paid => descrease",
									"                 */",
									"                let isFound = false;",
									"                let old_due_type = pm.environment.get(\"C-old_due_type\");",
									"                let new_due_type = pm.environment.get(\"C-new_due_type\");",
									"                if(invoice_edit_obj.status == \"draft\"){",
									"                    if(invoice_obj.status == \"draft\"){",
									"                        pm.test(\"Nothing happen with total invoice\", function () {",
									"                            console.log(\"old:\" + old_list_report_invoice.length);",
									"                            console.log(\"new:\" + list_report_invoice.length);",
									"                            pm.expect(list_report_invoice.length == old_list_report_invoice.length).to.be.true;",
									"                        });",
									"",
									"                        // check isFound => can't find",
									"                        for(let i in list_report_invoice){",
									"                            if(list_report_invoice[i].invoice_id == invoice_obj.invoice_id){",
									"                                isFound = true;",
									"                                break;",
									"                            }",
									"                        }",
									"",
									"                        pm.test(\"Nothing edit invoice in report\", function () {",
									"                            pm.expect(isFound).to.be.false;",
									"                        });",
									"                    } else {",
									"                        pm.test(\"Total invoice increase 1\", function () {",
									"                            console.log(\"old:\" + old_list_report_invoice.length);",
									"                            console.log(\"new:\" + list_report_invoice.length);",
									"                            pm.expect(list_report_invoice.length == old_list_report_invoice.length + 1).to.be.true;",
									"                        });",
									"",
									"                        // check new invoice OR check edit invoice (after edit this invoice has payment_status != fully_paid)",
									"                        for(let i in list_report_invoice){",
									"                            if(list_report_invoice[i].invoice_id == invoice_obj.invoice_id){",
									"                                isFound = true;",
									"                                console.log(\"Found \" + list_report_invoice[i].entry_code + ' of ' + list_report_invoice[i].contact_name);",
									"                                ",
									"                                pm.test(\"unpaid_total correctly \" + invoice_obj.total_amount, function () {",
									"                                    console.log(\"act: \" + list_report_invoice[i].unpaid_total);",
									"                                    pm.expect(list_report_invoice[i].unpaid_total == invoice_obj.total_amount).to.be.true;",
									"                                });",
									"",
									"                                pm.test(\"invoice_created_date correctly \" + invoice_obj.created_order_at, function () {",
									"                                    console.log(\"act: \" + list_report_invoice[i].invoice_created_date);",
									"                                    pm.expect(list_report_invoice[i].invoice_created_date.substring(0,19) == invoice_obj.created_order_at.substring(0,19)).to.be.true;",
									"                                });",
									"",
									"                                pm.test(\"invoice_due_date correctly \" + invoice_obj.due_at, function () {",
									"                                    console.log(\"act: \" + list_report_invoice[i].invoice_due_date);",
									"                                    pm.expect(list_report_invoice[i].invoice_due_date.substring(0,19) == invoice_obj.due_at.substring(0,19)).to.be.true;",
									"                                });",
									"",
									"                                switch(new_due_type){",
									"                                    case \"undue\":",
									"                                        // unpaid_due",
									"                                        pm.test(\"unpaid_due > 0 \" + list_report_invoice[i].unpaid_due, function () {",
									"                                            pm.expect(list_report_invoice[i].unpaid_due > 0).to.be.true;",
									"                                        });",
									"",
									"                                        // unpaid_overdue_less",
									"                                        pm.test(\"unpaid_overdue_less == 0\", function () {",
									"                                            pm.expect(list_report_invoice[i].unpaid_overdue_less == 0).to.be.true;",
									"                                        });",
									"",
									"                                        // unpaid_overdue_between",
									"                                        pm.test(\"unpaid_overdue_between == 0\", function () {",
									"                                            pm.expect(list_report_invoice[i].unpaid_overdue_between == 0).to.be.true;",
									"                                        });",
									"",
									"                                        // unpaid_overdue_over",
									"                                        pm.test(\"unpaid_overdue_over == 0\", function () {",
									"                                            pm.expect(list_report_invoice[i].unpaid_overdue_over == 0).to.be.true;",
									"                                        });",
									"                                        break;",
									"                                    case \"overdue_less\":",
									"                                        // unpaid_due",
									"                                        pm.test(\"unpaid_due == 0\", function () {",
									"                                            pm.expect(list_report_invoice[i].unpaid_due == 0).to.be.true;",
									"                                        });",
									"",
									"                                        // unpaid_overdue_less",
									"                                        pm.test(\"unpaid_overdue_less > 0 \" + list_report_invoice[i].unpaid_overdue_less, function () {",
									"                                            pm.expect(list_report_invoice[i].unpaid_overdue_less > 0).to.be.true;",
									"                                        });",
									"",
									"                                        // unpaid_overdue_between",
									"                                        pm.test(\"unpaid_overdue_between == 0\", function () {",
									"                                            pm.expect(list_report_invoice[i].unpaid_overdue_between == 0).to.be.true;",
									"                                        });",
									"",
									"                                        // unpaid_overdue_over",
									"                                        pm.test(\"unpaid_overdue_over == 0\", function () {",
									"                                            pm.expect(list_report_invoice[i].unpaid_overdue_over == 0).to.be.true;",
									"                                        });",
									"                                        break;",
									"                                    case \"overdue_between\":",
									"                                        // unpaid_due",
									"                                        pm.test(\"unpaid_due == 0\", function () {",
									"                                            pm.expect(list_report_invoice[i].unpaid_due == 0).to.be.true;",
									"                                        });",
									"",
									"                                        // unpaid_overdue_less",
									"                                        pm.test(\"unpaid_overdue_less == 0\", function () {",
									"                                            pm.expect(list_report_invoice[i].unpaid_overdue_less == 0).to.be.true;",
									"                                        });",
									"",
									"                                        // unpaid_overdue_between",
									"                                        pm.test(\"unpaid_overdue_between > 0 \" + list_report_invoice[i].unpaid_overdue_between, function () {",
									"                                            pm.expect(list_report_invoice[i].unpaid_overdue_between > 0).to.be.true;",
									"                                        });",
									"",
									"                                        // unpaid_overdue_over",
									"                                        pm.test(\"unpaid_overdue_over == 0\", function () {",
									"                                            pm.expect(list_report_invoice[i].unpaid_overdue_over == 0).to.be.true;",
									"                                        });",
									"                                        break;",
									"                                    case \"overdue_over\":",
									"                                        // unpaid_due",
									"                                        pm.test(\"unpaid_due == 0\", function () {",
									"                                            pm.expect(list_report_invoice[i].unpaid_due == 0).to.be.true;",
									"                                        });",
									"",
									"                                        // unpaid_overdue_less",
									"                                        pm.test(\"unpaid_overdue_less == 0\", function () {",
									"                                            pm.expect(list_report_invoice[i].unpaid_overdue_less == 0).to.be.true;",
									"                                        });",
									"",
									"                                        // unpaid_overdue_between",
									"                                        pm.test(\"unpaid_overdue_between == 0\", function () {",
									"                                            pm.expect(list_report_invoice[i].unpaid_overdue_between == 0).to.be.true;",
									"                                        });",
									"",
									"                                        // unpaid_overdue_over",
									"                                        pm.test(\"unpaid_overdue_over > 0 \" + list_report_invoice[i].unpaid_overdue_over, function () {",
									"                                            pm.expect(list_report_invoice[i].unpaid_overdue_over > 0).to.be.true;",
									"                                        });",
									"                                        break;",
									"                                    default:",
									"                                        pm.test(\"Missing due type\", function () {",
									"                                            pm.expect(false).to.be.true;",
									"                                        });",
									"                                        break;",
									"                                }",
									"                                break;",
									"                            }",
									"                        }",
									"",
									"                        pm.test(\"Found edit invoice\", function () {",
									"                            pm.expect(isFound).to.be.true;",
									"                        });",
									"                    }",
									"                } else if(invoice_edit_obj.payment_status == \"fully_paid\") {",
									"                    // thiếu 1 case là invoice cũ đã fully_paid",
									"                    if(invoice_obj.payment_status == \"fully_paid\"){",
									"                        pm.test(\"Nothing happen with total invoice\", function () {",
									"                            console.log(\"old:\" + old_list_report_invoice.length);",
									"                            console.log(\"new:\" + list_report_invoice.length);",
									"                            pm.expect(list_report_invoice.length == old_list_report_invoice.length).to.be.true;",
									"                        });",
									"",
									"                        // check isFound => can't find",
									"                        for(let i in list_report_invoice){",
									"                            if(list_report_invoice[i].invoice_id == invoice_obj.invoice_id){",
									"                                isFound = true;",
									"                                break;",
									"                            }",
									"                        }",
									"",
									"                        pm.test(\"Can't find invoice in report\", function () {",
									"                            pm.expect(isFound).to.be.false;",
									"                        });",
									"                    } else {",
									"                        pm.test(\"Total invoice increase 1\", function () {",
									"                            console.log(\"old:\" + old_list_report_invoice.length);",
									"                            console.log(\"new:\" + list_report_invoice.length);",
									"                            pm.expect(list_report_invoice.length == old_list_report_invoice.length +  1).to.be.true;",
									"                        });",
									"",
									"                        // check isFound => can't find",
									"                        for(let i in list_report_invoice){",
									"                            if(list_report_invoice[i].invoice_id == invoice_obj.invoice_id){",
									"                                isFound = true;",
									"                                break;",
									"                            }",
									"                        }",
									"",
									"                        pm.test(\"Had edit invoice in report\", function () {",
									"                            pm.expect(isFound).to.be.true;",
									"                        });",
									"                    }",
									"                } else {",
									"                    if(invoice_obj.payment_status == \"fully_paid\"){",
									"                        pm.test(\"Total invoice decrease 1\", function () {",
									"                            console.log(\"old:\" + old_list_report_invoice.length);",
									"                            console.log(\"new:\" + list_report_invoice.length);",
									"                            pm.expect(list_report_invoice.length == old_list_report_invoice.length - 1).to.be.true;",
									"                        });",
									"",
									"                        // check isFound => can't find",
									"                        for(let i in list_report_invoice){",
									"                            if(list_report_invoice[i].invoice_id == invoice_obj.invoice_id){",
									"                                isFound = true;",
									"                                break;",
									"                            }",
									"                        }",
									"",
									"                        pm.test(\"Remove edit invoice in report\", function () {",
									"                            pm.expect(isFound).to.be.false;",
									"                        });",
									"                    } else {",
									"                        pm.test(\"Nothing happen with total invoice\", function () {",
									"                            console.log(\"old:\" + old_list_report_invoice.length);",
									"                            console.log(\"new:\" + list_report_invoice.length);",
									"                            pm.expect(list_report_invoice.length == old_list_report_invoice.length).to.be.true;",
									"                        });",
									"",
									"                        // check isFound",
									"                        for(let i in list_report_invoice){",
									"                            if(list_report_invoice[i].invoice_id == invoice_obj.invoice_id){",
									"                                isFound = true;",
									"                                break;",
									"                            }",
									"                        }",
									"",
									"                        pm.test(\"Had edit invoice in report\", function () {",
									"                            pm.expect(isFound).to.be.true;",
									"                        });",
									"                    }",
									"                }",
									"            ",
									"                postman.setNextRequest(\"report_invoice_overdue\"); // report_invoice_overdue",
									"                break;",
									"            default:",
									"                console.log(\"Missing flow, end test\");",
									"                postman.setNextRequest(null);",
									"                break;",
									"        }",
									"    } else {",
									"        page++;",
									"        pm.environment.set(\"C-page\",page);",
									"",
									"        console.log(\"view next page (\" + page + \") to get more product\");",
									"        postman.setNextRequest(\"get_report_account_receivable_invoice\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get list product, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"branch_id\": {{C-business_id}},\n    \"due_days\": 30,\n    \"page\": {{C-page}},\n    \"page_size\": {{C-page_size}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finan_base_url}}/finan-ledger/api/v1/report/account-receivable-invoice-unpaid",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"report",
								"account-receivable-invoice-unpaid"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "home-report",
			"item": [
				{
					"name": "todo",
					"item": [
						{
							"name": "report_invoice_overdue",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"/**",
											" * Nếu invoice dc tạo ra là overdue => tăng lên 1, ngược lại thì ko tăng",
											" */",
											"",
											"let testcase = pm.environment.get(\"C-testcase\");",
											"console.log(\"Testcase: \" + testcase);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsData = pm.response.json();",
											"if(pm.response.code == 200){",
											"    let testcase = pm.environment.get(\"C-testcase\");",
											"    let total_number_overdue_invoice = null;",
											"    try {",
											"        total_number_overdue_invoice = jsData.data.total_number_overdue_invoice;",
											"    } catch {",
											"        console.log(\"Can't get data\");",
											"    }",
											"",
											"    let old_total_number_overdue_invoice = pm.environment.get(\"C-total_number_overdue_invoice\");",
											"    switch(testcase){",
											"        case 2:",
											"            pm.test(\"Got total_number_overdue_invoice \" + total_number_overdue_invoice, function () {",
											"                pm.environment.set(\"C-total_number_overdue_invoice\",total_number_overdue_invoice);",
											"                pm.expect(total_number_overdue_invoice != null).to.be.true;",
											"            });",
											"",
											"            postman.setNextRequest(\"report_account_receivable_payable_lifetime\"); //report_account_receivable_payable_lifetime",
											"            break;",
											"        case 4:",
											"            let ranTimeCase = pm.environment.get(\"C-ranTimeCase\");",
											"            let invoice_edit_obj = pm.environment.get(\"C-invoice_edit_obj\");",
											"            console.log(\"invoice_edit_obj: \",invoice_edit_obj);",
											"            let invoice_obj = pm.environment.get(\"C-invoice_obj\");",
											"            console.log(\"invoice_obj: \",invoice_obj);",
											"            /**",
											"             * case: cũ overdue - mới overdue => nothing",
											"             * case: cũ !overdue - mới overdue => increase 1",
											"             * case: cũ overdue - mới !overdue => decrease 1",
											"             * case: cũ !overdue - mới !overdue => nothing",
											"             */",
											"            // let today = new Date();",
											"            // let invoice_old_created_day = new Date(invoice_edit_obj.value_at);",
											"            if(invoice_obj.status == \"draft\"){",
											"                pm.test(\"Nothing happen with total_number_overdue_invoice (draft)!\", function () {",
											"                    pm.expect(total_number_overdue_invoice == old_total_number_overdue_invoice).to.be.true;",
											"                });",
											"            } else {",
											"                if(invoice_edit_obj.final_status == \"overdue\"){",
											"                    if(ranTimeCase == 2 || ranTimeCase == 3){",
											"                        pm.test(\"total_number_overdue_invoice decrease 1\", function () {",
											"                            pm.expect(total_number_overdue_invoice == old_total_number_overdue_invoice - 1).to.be.true;",
											"                        });",
											"                    } else {",
											"                        pm.test(\"Nothing happen with total_number_overdue_invoice (overdue)!\", function () {",
											"                            pm.expect(total_number_overdue_invoice == old_total_number_overdue_invoice).to.be.true;",
											"                        });",
											"                    }",
											"                } else {",
											"                    if(ranTimeCase == 2 || ranTimeCase == 3){",
											"                        pm.test(\"Nothing happen with total_number_overdue_invoice (!overdue)!\", function () {",
											"                            pm.expect(total_number_overdue_invoice == old_total_number_overdue_invoice).to.be.true;",
											"                        });",
											"                    } else {",
											"                        pm.test(\"total_number_overdue_invoice increase 1\", function () {",
											"                            pm.expect(total_number_overdue_invoice == old_total_number_overdue_invoice + 1).to.be.true;",
											"                        });",
											"                    }",
											"                }",
											"            }",
											"            ",
											"            postman.setNextRequest(\"report_account_receivable_payable_lifetime\"); // report_account_receivable_payable_lifetime",
											"            break;",
											"        default:",
											"            console.log(\"Missing flow, end test\");",
											"            postman.setNextRequest(null);",
											"            break;",
											"    }",
											"} else {",
											"    console.log(\"Can't get report account receivable unpaid, end test\",jsData);",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-location-timezone",
										"value": "UTC+07:00",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{C-userToken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"branch_id\": {{C-business_id}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{finan_base_url}}/finan-ledger/api/v1/report/to-do-overdue-invoice-lifetime",
									"host": [
										"{{finan_base_url}}"
									],
									"path": [
										"finan-ledger",
										"api",
										"v1",
										"report",
										"to-do-overdue-invoice-lifetime"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "receivable_account",
					"item": [
						{
							"name": "report_account_receivable_payable_lifetime",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let testcase = pm.environment.get(\"C-testcase\");",
											"console.log(\"Testcase: \" + testcase);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsData = pm.response.json();",
											"if(pm.response.code == 200){",
											"    let testcase = pm.environment.get(\"C-testcase\");",
											"    let account_receivable_payable = null;",
											"    try {",
											"        account_receivable_payable = jsData.data;",
											"    } catch {",
											"        console.log(\"Can't get data\");",
											"    }",
											"",
											"    let old_account_receivable_payable = pm.environment.get(\"C-account_receivable_payable\");",
											"    switch(testcase){",
											"        case 2:",
											"            pm.test(\"Got account_receivable_payable\", function () {",
											"                console.log(\"account_receivable_payable: \",account_receivable_payable);",
											"                pm.environment.set(\"C-account_receivable_payable\",account_receivable_payable);",
											"                pm.expect(account_receivable_payable != null).to.be.true;",
											"            });",
											"",
											"            postman.setNextRequest(\"get_list_invoice\"); // get_list_invoice",
											"            break;",
											"        case 4:",
											"            let invoice_edit_obj = pm.environment.get(\"C-invoice_edit_obj\");",
											"            let invoice_obj = pm.environment.get(\"C-invoice_obj\");",
											"",
											"            if(invoice_obj.status == \"draft\"){",
											"                pm.test(\"Nothing happen with account_receivable_payable.total_unpaid\", function () {",
											"                    console.log(\"old: \" + old_account_receivable_payable.total_unpaid);",
											"                    console.log(\"new: \" + account_receivable_payable.total_unpaid);",
											"                    pm.expect(account_receivable_payable.total_unpaid == old_account_receivable_payable.total_unpaid).to.be.true;",
											"                });",
											"            } else {",
											"                // due_amount => số tiền invoice trước khi edit còn nợ",
											"                let due_amount = invoice_edit_obj.due_amount;",
											"",
											"                let exchange_amount = Math.abs(pm.environment.get(\"C-exchange_amount\"));",
											"                let debt_type = pm.environment.get(\"C-debt_type\");",
											"                switch (debt_type){",
											"                    case \"decrease\":",
											"                        pm.test(\"Total unpaid decrease \" + exchange_amount, function () {",
											"                            console.log(\"old: \" + old_account_receivable_payable.total_unpaid);",
											"                            console.log(\"new: \" + account_receivable_payable.total_unpaid);",
											"                            pm.expect(account_receivable_payable.total_unpaid == old_account_receivable_payable.total_unpaid - exchange_amount).to.be.true;",
											"                        });",
											"                        break;",
											"                    case \"paid\":",
											"                        pm.test(\"Total unpaid decrease \" + due_amount, function () {",
											"                            console.log(\"old: \" + old_account_receivable_payable.total_unpaid);",
											"                            console.log(\"new: \" + account_receivable_payable.total_unpaid);",
											"                            pm.expect(account_receivable_payable.total_unpaid == old_account_receivable_payable.total_unpaid - due_amount).to.be.true;",
											"                        });",
											"                        break;",
											"                    case \"increase\":",
											"                        pm.test(\"Total unpaid increase \" + exchange_amount, function () {",
											"                            console.log(\"old: \" + old_account_receivable_payable.total_unpaid);",
											"                            console.log(\"new: \" + account_receivable_payable.total_unpaid);",
											"                            pm.expect(account_receivable_payable.total_unpaid == exchange_amount + old_account_receivable_payable.total_unpaid).to.be.true;",
											"                        });",
											"                        break;",
											"                    default:",
											"                        console.log(\"Missing flow\");",
											"                        break;",
											"                }",
											"            }",
											"",
											"            pm.test(\"nothing happen with account_receivable_payable.total_payable\", function () {",
											"                console.log(\"act: \" + jsData.data.total_payable);",
											"                pm.expect(account_receivable_payable.total_payable == old_account_receivable_payable.total_payable).to.be.true;",
											"            });",
											"",
											"            console.log(\"--- End Testsuite 9 ---\");",
											"            postman.setNextRequest(null);",
											"            break;",
											"        default:",
											"            console.log(\"Missing flow, end test\");",
											"            postman.setNextRequest(null);",
											"            break;",
											"    }",
											"} else {",
											"    console.log(\"Can't get report account receivable unpaid, end test\",jsData);",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-location-timezone",
										"value": "UTC+07:00",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{C-userToken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"branch_id\": {{C-business_id}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{finan_base_url}}/finan-ledger/api/v1/report/account-receivable-payable-lifetime",
									"host": [
										"{{finan_base_url}}"
									],
									"path": [
										"finan-ledger",
										"api",
										"v1",
										"report",
										"account-receivable-payable-lifetime"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	]
}