{
	"info": {
		"_postman_id": "7877e4b0-83d3-4839-8838-ab117506891f",
		"name": "finan_23_verify_to_create_new_tax",
		"description": "### Test suite: Verify to create new tax\n\n###### Testcase:\n\n1. Login with owner account\n2. Get data\n    1. Account / Get coa => focus on Liabilities/Current Liabilities (get list tax)\n    2. Tax / Get list tax => save total tax & double check with coa's tax if needed\n3. Create new tax\n    \n    1. Unhappy case: rate = null\n        \n    2. Unhappy case: name = \"\"\n        \n    3. Unhappy case: name is existed\n        \n    4. Unhappy case: rate < 0\n    5. Unhappy case: rate > 100\n    6. Unhappy case: had more 4 decimal digits after point (xx.yyyy)\n    7. Happy case (0.0000 \\~ 100.0000)\n4. Check data\n    1. Tax / Get list tax => total increase 1, data correctly\n    2. Tax / Get detail tax => data correctly\n    3. Account / Get coa => had new tax's account in Liabilities/Current Liabilities & is_edit = false\n\n###### Note:\n\n- 2.b khi check list tax from coa, những account có is_edit = false chính là những account được tạo = API create tax, còn lại dc tạo bằng API create account",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "282640"
	},
	"item": [
		{
			"name": "authen",
			"item": [
				{
					"name": "verify_email_or_phone_number",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/**",
									" * currently, manual to create account pwd & use charles to get it",
									" * default pwd created: 21112007 (prod with default account & no need pwd)",
									" */",
									"",
									"let email = pm.environment.get(\"SER-email\");",
									"let phone_number = pm.environment.get(\"SER-phone_number\");",
									"",
									"console.log(\"--- Start Testsuite 23 ---\");",
									"let testcase = 1;",
									"",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let isPhone = true;",
									"",
									"let payload;",
									"if(isPhone){",
									"    console.log(\"login with phone_number: \" + phone_number);",
									"    payload = {",
									"        \"phone_number\": phone_number",
									"    }",
									"} else {",
									"    console.log(\"login with email: \" + email);",
									"    payload = {",
									"        \"email\": email",
									"    }",
									"}",
									"",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));",
									"pm.environment.set(\"C-testcase\",testcase);",
									"pm.environment.set(\"C-isPhone\",isPhone);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    let jsData = pm.response.json();",
									"",
									"    if(jsData.data.is_existed && jsData.data.has_password){",
									"        postman.setNextRequest(\"login_with_pwd\");",
									"    } else if(jsData.data.is_existed) {",
									"        console.log(\"This account doesn't create pwd, please manual create!!!\");",
									"        postman.setNextRequest(null);",
									"    } else {",
									"        console.log(\"Error:\", JSON.stringify(jsData));",
									"        console.log(\"THIS ACCOUNT IS NOT EXISTED IN SYSTEM, WILL MANUAL CREATE IT\");",
									"        postman.setNextRequest(null);",
									"    }",
									"} else {",
									"    console.log(\"Error, end test\");",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finan_base_url}}/finan-user/api/v1/auth/account/verify",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-user",
								"api",
								"v1",
								"auth",
								"account",
								"verify"
							]
						}
					},
					"response": []
				},
				{
					"name": "login_with_pwd",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// let crypto = require('crypto-js');",
									"",
									"// const algorithm = \"aes-256-gcm\";",
									"// const IV_LEN = 12;",
									"// const AUTH_TAG_LEN = 16;",
									"// const SECRET_KEY = \"7dQ0HwRI5okvwAK0WzxaW6ABFncjeu1E\";",
									"",
									"// function encrypt(message) {",
									"//   const iv = Buffer.from(crypto.randomBytes(IV_LEN));",
									"//   const cipher = crypto.createCipheriv(algorithm, SECRET_KEY, iv, {",
									"//     authTagLength: AUTH_TAG_LEN,",
									"//   });",
									"//   const encryptedData = Buffer.concat([cipher.update(message), cipher.final()]);",
									"//   const authTag = cipher.getAuthTag();",
									"//   const raw = Buffer.concat([iv, encryptedData, authTag]).toString(\"hex\");",
									"//   return raw;",
									"// }",
									"",
									"// const pwd = \"21112007\";",
									"// // var superSecretEncrypted = CryptoJS.AES.encrypt(pwd, SECRET_KEY);",
									"",
									"// let pwd_enc = encrypt(pwd);",
									"// console.log(\"pwd_enc: \" + pwd_enc);",
									"",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"let isPhone = pm.environment.get(\"C-isPhone\");",
									"",
									"let verify_payload = JSON.parse(pm.environment.get(\"C-payload\"));",
									"",
									"let payload;",
									"let version = pm.environment.get(\"x-current-version\");",
									"if(isPhone){",
									"    payload = {",
									"        \"phone_number\": verify_payload.phone_number,",
									"        \"pwd\": pm.environment.get(\"pwd\"),",
									"        \"platform\": \"gtapp\",",
									"        \"device_id\": \"C9102FC6-466C-4980-B795-A91A2FD7F97F\",",
									"        \"app_version\": version,",
									"        \"device_name\": \"iPhone\"",
									"    }",
									"} else {",
									"    payload = {",
									"        \"email\": verify_payload.email,",
									"        \"pwd\": pm.environment.get(\"pwd\"),",
									"        \"platform\": \"gtapp\",",
									"        \"device_id\": \"C9102FC6-466C-4980-B795-A91A2FD7F97F\",",
									"        \"app_version\": version,",
									"        \"device_name\": \"iPhone\"",
									"    }",
									"}",
									"console.log(\"debug: \", payload);",
									"",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    let jsData = pm.response.json();",
									"    // debug",
									"    // console.log(JSON.stringify(jsData));",
									"",
									"    let business_id = null;",
									"    try{",
									"        business_id = jsData.data.business_info.list_business[0].business_id;",
									"    } catch{",
									"        console.log(\"This is new user, must create business_id\");",
									"    }",
									"",
									"    let userToken = jsData.data.token;",
									"    pm.environment.set(\"C-userToken\",userToken);",
									"",
									"    if(business_id == null){",
									"        console.log(\"This user don't have store, please check & use another account\");",
									"        ",
									"        postman.setNextRequest(null);",
									"    } else {",
									"        let userRefreshToken = jsData.data.refresh_token;",
									"",
									"        let userInfo = {",
									"            \"role_name\":jsData.data.business_info.current_role.role_name,",
									"            \"is_owner\":jsData.data.business_info.current_role.is_owner,",
									"            \"user_name\":jsData.data.business_info.list_business[0].user_name,",
									"            \"business_id\":business_id",
									"        }",
									"",
									"        // show log",
									"        // console.log(\"userToken:\",userToken);",
									"        // console.log(\"userRefreshToken:\",userRefreshToken);",
									"        console.log(\"userInfo:\",JSON.stringify(userInfo));",
									"",
									"        pm.environment.set(\"C-userRefreshToken\",userRefreshToken);",
									"        pm.environment.set(\"C-userInfo\",userInfo);",
									"        pm.environment.set(\"C-business_id\",business_id);",
									"",
									"        let testcase = pm.environment.get(\"C-testcase\");",
									"        testcase++;",
									"        pm.environment.set(\"C-testcase\",testcase);",
									"        postman.setNextRequest(\"get_branch_id\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get Token, end test\");",
									"",
									"    // debug",
									"    let jsData = pm.response.json();",
									"    console.log(\"data:\",JSON.stringify(jsData));",
									"",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finan_base_url}}/finan-user/api/v1/auth/account/login",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-user",
								"api",
								"v1",
								"auth",
								"account",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_branch_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let branch_id = null;",
									"    try {",
									"        branch_id = jsData.data.id;",
									"    } catch {",
									"        console.log(\"Can't get branch_id\");",
									"    }",
									"",
									"    pm.test(\"Got branch_id\", function () {",
									"        pm.expect(branch_id != null).to.be.true;",
									"    });",
									"",
									"    if(branch_id != null){",
									"        pm.environment.set(\"C-business_id\",branch_id);",
									"        postman.setNextRequest(\"get_list_internal_account\"); // get_list_internal_account",
									"    } else {",
									"        postman.setNextRequest(null);",
									"    }",
									"} else {",
									"    console.log(\"Can't get Token, end test\", jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{finan_base_url}}/finan-business/api/v1/branch/detail/{{C-business_id}}",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-business",
								"api",
								"v1",
								"branch",
								"detail",
								"{{C-business_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "account",
			"item": [
				{
					"name": "get_list_internal_account",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"/**",
									" * trong sub_group \"Current Liabilities\" chứa tất cả account",
									" *  - tạo từ coa => có thể edit và delete",
									" *  - tạo từ tax config => ko cho edit và delete",
									" */",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"",
									"    let coa_tax = null;",
									"    try {",
									"        for(let i in jsData.data){",
									"            let sub_group_i;",
									"            if(jsData.data[i].value == \"liabilities\"){",
									"                for(let j in jsData.data[i].sub_group){",
									"                    let accounts_j = [];",
									"                    if(jsData.data[i].sub_group[j].value == \"current_liabilities\"){",
									"                        for(let k in jsData.data[i].sub_group[j].accounts){",
									"                            accounts_j[accounts_j.length] = {",
									"                                \"account_name\":jsData.data[i].sub_group[j].accounts[k].name,",
									"                                \"account_id\":jsData.data[i].sub_group[j].accounts[k].id,",
									"                                \"group_name\":jsData.data[i].sub_group[j].accounts[k].group_name,",
									"                                \"sub_group_name\":jsData.data[i].sub_group[j].accounts[k].sub_name,",
									"                                \"branch_id\":jsData.data[i].sub_group[j].accounts[k].branch_id,",
									"                                \"displays_id\":jsData.data[i].sub_group[j].accounts[k].displays_id,",
									"                                \"account_source\":jsData.data[i].sub_group[j].accounts[k].account_source,",
									"                                \"account_type\":jsData.data[i].sub_group[j].accounts[k].account_type,",
									"                                \"account_code\":jsData.data[i].sub_group[j].accounts[k].account_code,",
									"                                \"coa_type\":jsData.data[i].sub_group[j].accounts[k].coa_type,",
									"                                \"sub_coa_deepest\":jsData.data[i].sub_group[j].accounts[k].sub_coa_deepest,",
									"                                \"name_en\":jsData.data[i].sub_group[j].accounts[k].name_en,",
									"                                \"status\":jsData.data[i].sub_group[j].accounts[k].status,",
									"                                \"parent_id\":jsData.data[i].sub_group[j].accounts[k].parent_id,",
									"                                \"description\":jsData.data[i].sub_group[j].accounts[k].description,",
									"                                \"open_amount\":jsData.data[i].sub_group[j].accounts[k].open_amount,",
									"                                \"currency\":jsData.data[i].sub_group[j].accounts[k].currency,",
									"                                \"is_edit\":jsData.data[i].sub_group[j].accounts[k].is_edit,",
									"                                \"is_delete\":jsData.data[i].sub_group[j].accounts[k].is_delete",
									"                                // \"opening_at\":jsData.data[i].sub_group[j].accounts[k].opening_at",
									"                                // \"closing_at\":jsData.data[i].sub_group[j].accounts[k].closing_at",
									"                            }",
									"                        }",
									"",
									"                        sub_group_i = {",
									"                            \"sub_group_name\":jsData.data[i].sub_group[j].name,",
									"                            \"sub_group_id\":jsData.data[i].sub_group[j].id,",
									"                            \"sub_group_description\":jsData.data[i].sub_group[j].description,",
									"                            \"accounts\":accounts_j",
									"                        }",
									"                        break;",
									"                    }",
									"                }",
									"",
									"                coa_tax = {",
									"                    \"group_name\":jsData.data[i].name,",
									"                    \"value\":jsData.data[i].value,",
									"                    \"index\":jsData.data[i].index,",
									"                    \"sub_group\":sub_group_i",
									"                }",
									"                break;",
									"            }",
									"        }",
									"    } catch {",
									"        console.log(\"can't get all account in coa_tax\");",
									"    }",
									"",
									"    switch(testcase){",
									"        case 2:",
									"            pm.test(\"Got coa_tax of this user's branch\", function () {",
									"                pm.expect(coa_tax != null).to.be.true;",
									"            });",
									"",
									"            if(coa_tax != null){",
									"                console.log(\"coa_tax: \", coa_tax);",
									"                pm.environment.set(\"C-coa_tax\",coa_tax);",
									"",
									"                postman.setNextRequest(\"get_list_tax\"); // get_list_tax",
									"            } else {",
									"                console.log(\"Can't get list internal account, end test \");",
									"                postman.setNextRequest(null);",
									"            }",
									"            break;",
									"        case 4:",
									"            let old_coa_tax = pm.environment.get(\"C-coa_tax\");",
									"            pm.test(\"Total account in Liabilities/Current Liabilities increase 1\", function () {",
									"                pm.expect(old_coa_tax.sub_group.accounts.length + 1 == coa_tax.sub_group.accounts.length).to.be.true;",
									"            });",
									"",
									"            let tax_obj = pm.environment.get(\"C-tax_obj\");",
									"            let isFound = false;",
									"            // console.log(\"debug: \",coa_tax);",
									"            // console.log(\"tax_obj.name: \" + tax_obj.name);",
									"            for(let i in coa_tax.sub_group.accounts){",
									"                // console.log(\"coa_tax.sub_group.accounts[i].account_name: \" + coa_tax.sub_group.accounts[i].name);",
									"                if(coa_tax.sub_group.accounts[i].account_name == tax_obj.name){",
									"                    isFound = true;",
									"                    pm.test(\"Tax \" + tax_obj.name + \" can't edit in coa\", function () {",
									"                        pm.expect(\"is_edit\" in coa_tax.sub_group.accounts[i] && coa_tax.sub_group.accounts[i].is_edit).to.be.false;",
									"                    });",
									"                    break;",
									"                }",
									"            }",
									"            pm.test(\"Found correctly tax \" + tax_obj.name + \" in Liabilities/Current Liabilities\", function () {",
									"                pm.expect(isFound).to.be.true;",
									"            });",
									"",
									"            console.log(\"--- End Testsuite 23 ---\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get list internal account, end test \", jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{finan_base_url}}​/finan-ledger/api/v1/account/list?branch_id={{C-business_id}}&coa_type=",
							"host": [
								"{{finan_base_url}}​"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"account",
								"list"
							],
							"query": [
								{
									"key": "branch_id",
									"value": "{{C-business_id}}"
								},
								{
									"key": "coa_type",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "tax",
			"item": [
				{
					"name": "get_list_tax",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let total_page = jsData.meta.total_pages;",
									"    let page = pm.environment.get(\"C-page\");",
									"",
									"    let list_tax, old_list_tax;",
									"    let total_tax = null;",
									"    switch(testcase){",
									"        case 2:",
									"            list_tax = pm.environment.get(\"C-list_tax\");",
									"            if(!list_tax){",
									"                list_tax = [];",
									"            }",
									"",
									"            try {",
									"                total_tax = jsData.meta.total_rows;",
									"            } catch {",
									"                console.log(\"missing meta\");",
									"            }",
									"",
									"            let existed_tax = pm.environment.get(\"C-existed_tax\");",
									"            if(!existed_tax){",
									"                for(let i in jsData.data){",
									"                    if(jsData.data[i].name.includes(\"[API]\")){",
									"                        existed_tax = jsData.data[i].name;",
									"                        pm.environment.set(\"C-existed_tax_name\",existed_tax);",
									"                        break;",
									"                    }",
									"                }",
									"            }",
									"            break;",
									"        case 4:",
									"            old_list_tax = pm.environment.get(\"C-old_list_tax\");",
									"            if(!old_list_tax){",
									"                old_list_tax = pm.environment.get(\"C-list_tax\");",
									"                pm.environment.unset(\"C-list_tax\");",
									"                pm.environment.set(\"C-old_list_tax\",old_list_tax);",
									"            }",
									"",
									"            list_tax = pm.environment.get(\"C-list_tax\");",
									"            if(!list_tax){",
									"                list_tax = [];",
									"            }",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow\");",
									"            break;",
									"    }",
									"",
									"    for(let item in jsData.data){",
									"        list_tax[list_tax.length] = {",
									"            \"tax_id\":jsData.data[item].id,",
									"            \"name\":jsData.data[item].name,",
									"            \"rate\":jsData.data[item].rate,",
									"            \"description\":jsData.data[item].description,",
									"            \"account_id\":jsData.data[item].account_id,",
									"            \"displays_id\":jsData.data[item].displays_id",
									"        }",
									"    }",
									"    pm.environment.set(\"C-list_tax\",list_tax);",
									"",
									"    if(page >= total_page){",
									"        pm.environment.unset(\"C-page\");",
									"",
									"        switch(testcase){",
									"            case 2:",
									"                pm.test(\"Got total_tax \" + total_tax, function () {",
									"                    pm.environment.set(\"C-total_tax\",total_tax);",
									"                    pm.expect(total_tax != null).to.be.true;",
									"                });",
									"",
									"                // check list tax from coa & list tax from tax config",
									"                let coa_tax = pm.environment.get(\"C-coa_tax\");",
									"                // console.log(\"list_tax: \", list_tax);",
									"                // console.log(\"=====================================\");",
									"                // console.log(\"coa_tax: \", coa_tax.sub_group);",
									"                let count_coa_tax = 0;",
									"                // let isNotTax = true;",
									"                for(let i in coa_tax.sub_group.accounts){",
									"                    // console.log(coa_tax.sub_group.accounts[i].account_name);",
									"                    if(coa_tax.sub_group.accounts[i].account_source != \"default\" && (coa_tax.sub_group.accounts[i].account_name.includes(\"tax\") || coa_tax.sub_group.accounts[i].account_name == \"\")){ // tạm thời count luôn tax_name = \"\"",
									"                        count_coa_tax++;",
									"                    ",
									"                        let isFound_i = false;",
									"                        for(let j in list_tax){",
									"                            if(list_tax[j].account_id == coa_tax.sub_group.accounts[i].account_id){",
									"                                isFound_i = true;",
									"                                break;",
									"                            }",
									"                        }",
									"                        if(!isFound_i){",
									"                            // isNotTax = false;",
									"                            pm.test(\"Tax \" + coa_tax.sub_group.accounts[i].account_name + \" is not existed in tax list\", function () {",
									"                                pm.expect(false).to.be.true;",
									"                            });",
									"                        }",
									"                    }",
									"                }",
									"",
									"                pm.test(\"total_tax correctly with coa's tax \" + total_tax, function () {",
									"                    console.log(\"count_coa_tax: \" + count_coa_tax);",
									"                    pm.expect(total_tax == count_coa_tax).to.be.true;",
									"                });",
									"",
									"                testcase++;",
									"                pm.environment.set(\"C-testcase\",testcase);",
									"                postman.setNextRequest(\"create_tax\"); // create_tax",
									"                break;",
									"            case 4:",
									"                let old_total_tax = pm.environment.get(\"C-total_tax\");",
									"                pm.test(\"total_tax increase 1\", function () {",
									"                    pm.expect(total_tax == old_total_tax + 1).to.be.true;",
									"                });",
									"                // console.log(\"debug: \", jsData.data);",
									"",
									"                let tax_obj = pm.environment.get(\"C-tax_obj\");",
									"                let isFound = false;",
									"                let act_name, act_rate, act_des;",
									"                for(let item in jsData.data){",
									"                    if(jsData.data[item].id == tax_obj.tax_id){",
									"                        isFound = true;",
									"                        act_name = jsData.data[item].name;",
									"                        act_rate = jsData.data[item].rate;",
									"                        act_des = jsData.data[item].description;",
									"                        break;",
									"                    }",
									"                }",
									"                ",
									"                pm.test(\"Found new order\", function () {",
									"                    pm.expect(isFound).to.be.true;",
									"                });",
									"",
									"                pm.test(\"name of tax correctly! \" + tax_obj.name, function () {",
									"                    pm.expect(tax_obj.name == act_name).to.be.true;",
									"                });",
									"",
									"                pm.test(\"rate of tax correctly! \" + tax_obj.rate, function () {",
									"                    pm.expect(tax_obj.rate == act_rate).to.be.true;",
									"                });",
									"",
									"                pm.test(\"description of tax correctly! \" + tax_obj.description, function () {",
									"                    pm.expect(tax_obj.description == act_des).to.be.true;",
									"                });",
									"",
									"                postman.setNextRequest(\"get_tax_detail\"); // get_tax_detail",
									"                break;",
									"            default:",
									"                console.log(\"Missing flow, end test\");",
									"                postman.setNextRequest(null);",
									"                break;",
									"        }",
									"    } else {",
									"        page++;",
									"        pm.environment.set(\"C-page\",page);",
									"",
									"        console.log(\"view next page (\" + page + \") to get more tax\");",
									"        postman.setNextRequest(\"get_list_tax\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get list tax, end test \", jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// timeout 2s to sync elastic search",
									"setTimeout(function(){}, 1000);",
									"",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let page = pm.environment.get(\"C-page\");",
									"",
									"if(!page){",
									"    page = 1;",
									"    pm.environment.set(\"C-page\",page);",
									"",
									"    let page_size = 50;",
									"    pm.environment.set(\"C-page_size\",page_size);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{finan_base_url}}/finan-ledger/api/v1/tax/list?branch_id={{C-business_id}}&page={{C-page}}&page_size={{C-page_size}}&option=&status=",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"tax",
								"list"
							],
							"query": [
								{
									"key": "branch_id",
									"value": "{{C-business_id}}"
								},
								{
									"key": "page",
									"value": "{{C-page}}"
								},
								{
									"key": "page_size",
									"value": "{{C-page_size}}"
								},
								{
									"key": "option",
									"value": ""
								},
								{
									"key": "status",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get_tax_detail",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let tax_obj = pm.environment.get(\"C-tax_obj\");",
									"let tax_id = tax_obj.tax_id;",
									"pm.environment.set(\"C-tax_id\",tax_id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let tax_obj = pm.environment.get(\"C-tax_obj\");",
									"",
									"    // check data",
									"    pm.test(\"name of tax correctly! \" + tax_obj.name, function () {",
									"        pm.expect(tax_obj.name == jsData.data.name).to.be.true;",
									"    });",
									"",
									"    pm.test(\"rate of tax correctly! \" + tax_obj.rate, function () {",
									"        pm.expect(tax_obj.rate == jsData.data.rate).to.be.true;",
									"    });",
									"",
									"    pm.test(\"description of tax correctly! \" + tax_obj.description, function () {",
									"        pm.expect(tax_obj.description == jsData.data.description).to.be.true;",
									"    });",
									"",
									"    postman.setNextRequest(\"get_list_internal_account\"); // get_list_internal_account",
									"} else {",
									"    console.log(\"Can't get tax detail - \" + JSON.stringify(jsData));",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{finan_base_url}}​/finan-ledger/api/v1/tax/detail/{{C-tax_id}}?branch_id={{C-business_id}}",
							"host": [
								"{{finan_base_url}}​"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"tax",
								"detail",
								"{{C-tax_id}}"
							],
							"query": [
								{
									"key": "branch_id",
									"value": "{{C-business_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "create_tax",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// random number between min and max",
									"function getRandomInt(min, max) {",
									"  \treturn Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"",
									"//random characters",
									"function randomChars(length) {",
									"    var result           = '';",
									"    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
									"    var charactersLength = characters.length;",
									"    for ( var i = 0; i < length; i++ ) {",
									"      result += characters.charAt(Math.floor(Math.random() * ",
									" charactersLength));",
									"   }",
									"   return result;",
									"}",
									"",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"let case_ = pm.environment.get(\"C-case_\");",
									"if(!case_){",
									"    case_ = 1;",
									"    pm.environment.set(\"C-case_\",case_);",
									"}",
									"console.log(\"Testcase: \" + testcase + \".\" + case_);",
									"",
									"let tax, rate, description, name;",
									"switch(case_){",
									"    case 1:",
									"        console.log(\"create tax with rate = ''\");",
									"        tax = randomChars(8);",
									"        rate = \"\";",
									"        description = \"[API] create tax \" + tax;",
									"        name = \"[API] tax \" + tax;",
									"        break;",
									"    case 2:",
									"        console.log(\"create tax with name = ''\");",
									"        rate = 10;",
									"        description = \"\";",
									"        name = \"\";",
									"        break;",
									"    case 3:",
									"        console.log(\"create tax with name is existed\");",
									"        rate = 10;",
									"        description = \"[API] new existed tax \" + tax;",
									"        name = pm.environment.get(\"C-existed_tax_name\");",
									"        break;",
									"    case 4:",
									"        console.log(\"create tax with rate < 0\");",
									"        tax = randomChars(8);",
									"        rate = -1;",
									"        description = \"[API] new tax \" + tax;",
									"        name = \"[API] tax \" + tax;",
									"        break;",
									"    case 5:",
									"        console.log(\"create tax with rate > 100\");",
									"        tax = randomChars(8);",
									"        rate = 101;",
									"        description = \"[API] new tax \" + tax;",
									"        name = \"[API] tax \" + tax;",
									"        break;",
									"    case 6:",
									"        console.log(\"create tax with rate = 5.12345\");",
									"        tax = randomChars(8);",
									"        rate = 5.12345;",
									"        description = \"[API] new tax \" + tax;",
									"        name = \"[API] tax \" + tax;",
									"        break;",
									"    case 7:",
									"        console.log(\"create tax with valid data\");",
									"        tax = randomChars(8);",
									"        rate = getRandomInt(100,1000)/100;",
									"        description = \"[API] new tax \" + tax;",
									"        name = \"[API] tax \" + rate + \" - \" + tax;",
									"        break;",
									"    default:",
									"        console.log(\"Missing flow\");",
									"        break;",
									"}",
									"",
									"let payload = {",
									"  \"branch_id\": parseInt(pm.environment.get(\"C-business_id\")),",
									"  \"description\": description,",
									"//   \"displays_id\": \"\",",
									"//   \"id\": \"\",",
									"  \"name\": name,",
									"  \"rate\": rate",
									"}",
									"",
									"console.log(\"payload: \" + JSON.stringify(payload));",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));",
									"pm.environment.set(\"C-tax_obj\",payload);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"let case_ = pm.environment.get(\"C-case_\");",
									"",
									"let jsData = pm.response.json();",
									"switch(case_){",
									"    case 1: case 2: case 3: case 4: case 5: case 6:",
									"        pm.test(\"Status code is 400\", function () {",
									"            pm.response.to.have.status(400);",
									"        });",
									"",
									"        console.log(\"Error: \", jsData);",
									"",
									"        // case_ = 7;",
									"        case_++;",
									"        pm.environment.set(\"C-case_\",case_);",
									"        postman.setNextRequest(\"create_tax\");",
									"        break;",
									"    case 7:",
									"        // console.log(\"debug: \" + JSON.stringify(jsData));",
									"        pm.test(\"Status code is 200\", function () {",
									"            pm.response.to.have.status(200);",
									"        });",
									"",
									"        pm.environment.unset(\"C-case_\");",
									"        let tax_obj = pm.environment.get(\"C-tax_obj\");",
									"",
									"        // update tax_id for tax_obj",
									"        tax_obj.tax_id = jsData.data.id;",
									"",
									"        pm.test(\"name of tax correctly! \" + tax_obj.name, function () {",
									"            pm.expect(tax_obj.name == jsData.data.name).to.be.true;",
									"        });",
									"",
									"        pm.test(\"rate of tax correctly! \" + tax_obj.rate, function () {",
									"            pm.expect(tax_obj.rate == jsData.data.rate).to.be.true;",
									"        });",
									"",
									"        pm.test(\"description of tax correctly! \" + tax_obj.description, function () {",
									"            pm.expect(tax_obj.description == jsData.data.description).to.be.true;",
									"        });",
									"",
									"        testcase++;",
									"        pm.environment.set(\"C-testcase\",testcase);",
									"        pm.environment.set(\"C-tax_obj\",tax_obj);",
									"        postman.setNextRequest(\"get_list_tax\"); // get_list_tax",
									"        break;",
									"    default:",
									"        console.log(\"missing flow, end test\");",
									"        postman.setNextRequest(null);",
									"        break;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finan_base_url}}/finan-ledger/api/v1/tax/create",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"tax",
								"create"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}