{
	"info": {
		"_postman_id": "7c57835e-88c7-4bef-be1f-b6ab92f3c5fb",
		"name": "finan_26_verify_to_create_new_account",
		"description": "### Testsuite: Verify to create new account\n\n###### Testcase:\n\n1. Login with owner account\n2. Get data\n    1. Account / Get coa => get all account of all groups & sub_groups\n3. Create new account (sub_group = cash_and_bank) (create from Account)\n    1. Unhappy case: sub_group = null\n    2. Unhappy case: name = \"\"\n    3. Unhappy case: open_amount = null\n    4. Unhappy case: open_amount < 0\n    5. Happy case: sub_group = cash_and_bank\n4. Check data\n    1. Account / Get coa => data correctly\n    2. Account / Get account detail => data correctly\n5. Create new account (sub_group != cash_and_bank) (create from Setting COA)\n    1. Unhappy case: sub_group = null\n    2. Unhappy case: name = \"\"\n    3. Unhappy case: account_code is existed\n    4. Happy case: random in a groups/sub_groups\n6. Check data\n    1. Account / Get coa => data correctly\n    2. Account / Get account detail => data correctly\n\n###### Note:\n\n- After creating delete flow, add create new account existed\n- Not define validation for min/max character => will handle later",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "282640"
	},
	"item": [
		{
			"name": "authen",
			"item": [
				{
					"name": "verify_email_or_phone_number",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/**",
									" * currently, manual to create account pwd & use charles to get it",
									" * default pwd created: 21112007 (prod with default account & no need pwd)",
									" */",
									"",
									"let email = pm.environment.get(\"SER-email\");",
									"let phone_number = pm.environment.get(\"SER-phone_number\");",
									"",
									"console.log(\"--- Start Testsuite 26 ---\");",
									"let testcase = 1;",
									"",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let isPhone = true;",
									"",
									"let payload;",
									"if(isPhone){",
									"    console.log(\"login with phone_number: \" + phone_number);",
									"    payload = {",
									"        \"phone_number\": phone_number",
									"    }",
									"} else {",
									"    console.log(\"login with email: \" + email);",
									"    payload = {",
									"        \"email\": email",
									"    }",
									"}",
									"",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));",
									"pm.environment.set(\"C-testcase\",testcase);",
									"pm.environment.set(\"C-isPhone\",isPhone);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    let jsData = pm.response.json();",
									"",
									"    if(jsData.data.is_existed && jsData.data.has_password){",
									"        postman.setNextRequest(\"login_with_pwd\");",
									"    } else if(jsData.data.is_existed) {",
									"        console.log(\"This account doesn't create pwd, please manual create!!!\");",
									"        postman.setNextRequest(null);",
									"    } else {",
									"        console.log(\"Error:\", JSON.stringify(jsData));",
									"        console.log(\"THIS ACCOUNT IS NOT EXISTED IN SYSTEM, WILL MANUAL CREATE IT\");",
									"        postman.setNextRequest(null);",
									"    }",
									"} else {",
									"    console.log(\"Error, end test\");",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finan_base_url}}/finan-user/api/v1/auth/account/verify",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-user",
								"api",
								"v1",
								"auth",
								"account",
								"verify"
							]
						}
					},
					"response": []
				},
				{
					"name": "login_with_pwd",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// let crypto = require('crypto-js');",
									"",
									"// const algorithm = \"aes-256-gcm\";",
									"// const IV_LEN = 12;",
									"// const AUTH_TAG_LEN = 16;",
									"// const SECRET_KEY = \"7dQ0HwRI5okvwAK0WzxaW6ABFncjeu1E\";",
									"",
									"// function encrypt(message) {",
									"//   const iv = Buffer.from(crypto.randomBytes(IV_LEN));",
									"//   const cipher = crypto.createCipheriv(algorithm, SECRET_KEY, iv, {",
									"//     authTagLength: AUTH_TAG_LEN,",
									"//   });",
									"//   const encryptedData = Buffer.concat([cipher.update(message), cipher.final()]);",
									"//   const authTag = cipher.getAuthTag();",
									"//   const raw = Buffer.concat([iv, encryptedData, authTag]).toString(\"hex\");",
									"//   return raw;",
									"// }",
									"",
									"// const pwd = \"21112007\";",
									"// // var superSecretEncrypted = CryptoJS.AES.encrypt(pwd, SECRET_KEY);",
									"",
									"// let pwd_enc = encrypt(pwd);",
									"// console.log(\"pwd_enc: \" + pwd_enc);",
									"",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"let isPhone = pm.environment.get(\"C-isPhone\");",
									"",
									"let verify_payload = JSON.parse(pm.environment.get(\"C-payload\"));",
									"",
									"let payload;",
									"let version = pm.environment.get(\"x-current-version\");",
									"if(isPhone){",
									"    payload = {",
									"        \"phone_number\": verify_payload.phone_number,",
									"        \"pwd\": pm.environment.get(\"pwd\"),",
									"        \"platform\": \"gtapp\",",
									"        \"device_id\": \"C9102FC6-466C-4980-B795-A91A2FD7F97F\",",
									"        \"app_version\": version,",
									"        \"device_name\": \"iPhone\"",
									"    }",
									"} else {",
									"    payload = {",
									"        \"email\": verify_payload.email,",
									"        \"pwd\": pm.environment.get(\"pwd\"),",
									"        \"platform\": \"gtapp\",",
									"        \"device_id\": \"C9102FC6-466C-4980-B795-A91A2FD7F97F\",",
									"        \"app_version\": version,",
									"        \"device_name\": \"iPhone\"",
									"    }",
									"}",
									"console.log(\"debug: \", payload);",
									"",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    let jsData = pm.response.json();",
									"    // debug",
									"    // console.log(JSON.stringify(jsData));",
									"",
									"    let business_id = null;",
									"    try{",
									"        business_id = jsData.data.business_info.list_business[0].business_id;",
									"    } catch{",
									"        console.log(\"This is new user, must create business_id\");",
									"    }",
									"",
									"    let userToken = jsData.data.token;",
									"    pm.environment.set(\"C-userToken\",userToken);",
									"",
									"    if(business_id == null){",
									"        console.log(\"This user don't have store, please check & use another account\");",
									"        ",
									"        postman.setNextRequest(null);",
									"    } else {",
									"        let userRefreshToken = jsData.data.refresh_token;",
									"",
									"        let userInfo = {",
									"            \"role_name\":jsData.data.business_info.current_role.role_name,",
									"            \"is_owner\":jsData.data.business_info.current_role.is_owner,",
									"            \"user_name\":jsData.data.business_info.list_business[0].user_name,",
									"            \"business_id\":business_id",
									"        }",
									"",
									"        // show log",
									"        // console.log(\"userToken:\",userToken);",
									"        // console.log(\"userRefreshToken:\",userRefreshToken);",
									"        console.log(\"userInfo:\",JSON.stringify(userInfo));",
									"",
									"        pm.environment.set(\"C-userRefreshToken\",userRefreshToken);",
									"        pm.environment.set(\"C-userInfo\",userInfo);",
									"        pm.environment.set(\"C-business_id\",business_id);",
									"",
									"        let testcase = pm.environment.get(\"C-testcase\");",
									"        testcase++;",
									"        pm.environment.set(\"C-testcase\",testcase);",
									"        postman.setNextRequest(\"get_branch_id\"); // get_branch_id",
									"    }",
									"} else {",
									"    console.log(\"Can't get Token, end test\");",
									"",
									"    // debug",
									"    let jsData = pm.response.json();",
									"    console.log(\"data:\",JSON.stringify(jsData));",
									"",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finan_base_url}}/finan-user/api/v1/auth/account/login",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-user",
								"api",
								"v1",
								"auth",
								"account",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_branch_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let branch_id = null;",
									"    try {",
									"        branch_id = jsData.data.id;",
									"    } catch {",
									"        console.log(\"Can't get branch_id\");",
									"    }",
									"",
									"    pm.test(\"Got branch_id\", function () {",
									"        pm.expect(branch_id != null).to.be.true;",
									"    });",
									"",
									"    if(branch_id != null){",
									"        pm.environment.set(\"C-business_id\",branch_id);",
									"        postman.setNextRequest(\"get_list_internal_account\"); // get_list_internal_account",
									"    } else {",
									"        postman.setNextRequest(null);",
									"    }",
									"} else {",
									"    console.log(\"Can't get Token, end test\", jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{finan_base_url}}/finan-business/api/v1/branch/detail/{{C-business_id}}",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-business",
								"api",
								"v1",
								"branch",
								"detail",
								"{{C-business_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "account",
			"item": [
				{
					"name": "get_list_internal_account",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"",
									"    let coa = [];",
									"    try {",
									"        for(let i in jsData.data){",
									"            let sub_group_i = [];",
									"            for(let j in jsData.data[i].sub_group){",
									"                let accounts_j = [];",
									"                for(let k in jsData.data[i].sub_group[j].accounts){",
									"                    accounts_j[accounts_j.length] = {",
									"                        \"account_name\":jsData.data[i].sub_group[j].accounts[k].name,",
									"                        \"account_id\":jsData.data[i].sub_group[j].accounts[k].id,",
									"                        \"group_name\":jsData.data[i].sub_group[j].accounts[k].group_name,",
									"                        \"sub_group_name\":jsData.data[i].sub_group[j].accounts[k].sub_name,",
									"                        \"branch_id\":jsData.data[i].sub_group[j].accounts[k].branch_id,",
									"                        \"displays_id\":jsData.data[i].sub_group[j].accounts[k].displays_id,",
									"                        \"account_source\":jsData.data[i].sub_group[j].accounts[k].account_source,",
									"                        \"account_type\":jsData.data[i].sub_group[j].accounts[k].account_type,",
									"                        \"account_code\":jsData.data[i].sub_group[j].accounts[k].account_code,",
									"                        \"coa_type\":jsData.data[i].sub_group[j].accounts[k].coa_type,",
									"                        \"sub_coa_deepest\":jsData.data[i].sub_group[j].accounts[k].sub_coa_deepest,",
									"                        \"name_en\":jsData.data[i].sub_group[j].accounts[k].name_en,",
									"                        \"status\":jsData.data[i].sub_group[j].accounts[k].status,",
									"                        \"parent_id\":jsData.data[i].sub_group[j].accounts[k].parent_id,",
									"                        \"description\":jsData.data[i].sub_group[j].accounts[k].description,",
									"                        \"open_amount\":jsData.data[i].sub_group[j].accounts[k].open_amount,",
									"                        \"currency\":jsData.data[i].sub_group[j].accounts[k].currency",
									"                        // \"opening_at\":jsData.data[i].sub_group[j].accounts[k].opening_at",
									"                        // \"closing_at\":jsData.data[i].sub_group[j].accounts[k].closing_at",
									"                    }",
									"                }",
									"",
									"                sub_group_i[sub_group_i.length] = {",
									"                    \"sub_group_name\":jsData.data[i].sub_group[j].name,",
									"                    \"sub_group_id\":jsData.data[i].sub_group[j].id,",
									"                    \"sub_group_description\":jsData.data[i].sub_group[j].description,",
									"                    \"accounts\":accounts_j",
									"                }",
									"            }",
									"",
									"            coa[coa.length] = {",
									"                \"group_name\":jsData.data[i].name,",
									"                \"value\":jsData.data[i].value,",
									"                \"index\":jsData.data[i].index,",
									"                \"sub_group\":sub_group_i",
									"            }",
									"        }",
									"    } catch {",
									"        console.log(\"can't get all account in coa\");",
									"    }",
									"",
									"",
									"    let account_obj = pm.environment.get(\"C-account_obj\");",
									"    let isFound = false;",
									"    switch(testcase){",
									"        case 2:",
									"            pm.test(\"Got coa of this user's business\", function () {",
									"                pm.expect(coa.length > 0).to.be.true;",
									"            });",
									"",
									"            if(coa.length > 0){",
									"                // console.log(\"coa: \", coa);",
									"                pm.environment.set(\"C-coa\",coa);",
									"",
									"                testcase++;",
									"                pm.environment.set(\"C-testcase\",testcase);",
									"                postman.setNextRequest(\"create_account\"); // create_account",
									"            } else {",
									"                console.log(\"Can't get list internal account, end test\");",
									"                postman.setNextRequest(null);",
									"            }",
									"            break;",
									"        case 4:",
									"            loop:",
									"            for(let j in coa[0].sub_group){",
									"                for(let k in coa[0].sub_group[j].accounts){",
									"                    if(coa[0].sub_group[j].accounts[k].account_id == account_obj.account_id){",
									"                        isFound = true;",
									"                        // console.log(\"debug: \",coa[0].sub_group[j].accounts);",
									"                        pm.test(\"name of account correctly! \" + account_obj.name, function () {",
									"                            console.log(\"Actual name: \" + coa[0].sub_group[j].accounts[k].account_name);",
									"                            pm.expect(account_obj.name == coa[0].sub_group[j].accounts[k].account_name).to.be.true;",
									"                        });",
									"",
									"                        pm.test(\"parent_id of account correctly! \" + account_obj.parent_id, function () {",
									"                            pm.expect(account_obj.parent_id == coa[0].sub_group[j].accounts[k].parent_id).to.be.true;",
									"                        });",
									"",
									"                        pm.test(\"open_amount of account correctly! \" + account_obj.open_amount, function () {",
									"                            pm.expect(account_obj.open_amount == coa[0].sub_group[j].accounts[k].open_amount).to.be.true;",
									"                        });",
									"                        break loop;",
									"                    }",
									"                }",
									"            }",
									"",
									"            pm.test(\"Found new account!\", function () {",
									"                pm.expect(isFound).to.be.true;",
									"            });",
									"",
									"            postman.setNextRequest(\"get_account_detail\"); // get_account_detail",
									"            break;",
									"        case 6:",
									"            loop:",
									"            for(let i in coa){",
									"                for(let j in coa[i].sub_group){",
									"                    for(let k in coa[i].sub_group[j].accounts){",
									"                        if(coa[i].sub_group[j].accounts[k].account_id == account_obj.account_id){",
									"                            isFound = true;",
									"                            // console.log(\"debug: \",coa[i].sub_group[j].accounts);",
									"                            pm.test(\"name of account correctly! \" + account_obj.name, function () {",
									"                                console.log(\"Actual name: \" + coa[i].sub_group[j].accounts[k].account_name);",
									"                                pm.expect(account_obj.name == coa[i].sub_group[j].accounts[k].account_name).to.be.true;",
									"                            });",
									"",
									"                            pm.test(\"account_code of account correctly! \" + account_obj.account_code, function () {",
									"                                pm.expect(account_obj.account_code == coa[i].sub_group[j].accounts[k].account_code).to.be.true;",
									"                            });",
									"",
									"                            pm.test(\"description of account correctly! \" + account_obj.description, function () {",
									"                                pm.expect(account_obj.description == coa[i].sub_group[j].accounts[k].description).to.be.true;",
									"                            });",
									"",
									"                            pm.test(\"parent_id of account correctly! \" + account_obj.parent_id, function () {",
									"                                pm.expect(account_obj.parent_id == coa[i].sub_group[j].accounts[k].parent_id).to.be.true;",
									"                            });",
									"                            break loop;",
									"                        }",
									"                    }",
									"                }",
									"            }",
									"",
									"            pm.test(\"Found new account!\", function () {",
									"                pm.expect(isFound).to.be.true;",
									"            });",
									"",
									"            postman.setNextRequest(\"get_account_detail\"); // get_account_detail",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get list internal account, end test \", jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{finan_base_url}}/finan-ledger/api/v1/account/list?branch_id={{C-business_id}}&coa_type=",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"account",
								"list"
							],
							"query": [
								{
									"key": "branch_id",
									"value": "{{C-business_id}}"
								},
								{
									"key": "coa_type",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get_account_detail",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let account_obj = pm.environment.get(\"C-account_obj\");",
									"let account_id = account_obj.account_id;",
									"console.log(\"view detail account: \" + account_id);",
									"",
									"pm.environment.set(\"C-account_id\",account_id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    console.log(\"Debug: \" + JSON.stringify(jsData));",
									"",
									"    let account_obj = pm.environment.get(\"C-account_obj\");",
									"",
									"    switch(testcase){",
									"        case 4:",
									"            pm.test(\"name of account correctly! \" + account_obj.name, function () {",
									"                pm.expect(account_obj.name == jsData.data.name).to.be.true;",
									"            });",
									"",
									"            pm.test(\"parent_id of account correctly! \" + account_obj.parent_id, function () {",
									"                pm.expect(account_obj.parent_id == jsData.data.parent_id).to.be.true;",
									"            });",
									"",
									"            pm.test(\"open_amount of account correctly! \" + account_obj.open_amount, function () {",
									"                pm.expect(account_obj.open_amount == jsData.data.open_amount).to.be.true;",
									"            });",
									"",
									"            testcase++;",
									"            pm.environment.set(\"C-testcase\",testcase);",
									"            postman.setNextRequest(\"create_account\"); // create_account",
									"            break;",
									"        case 6:",
									"            pm.test(\"name of account correctly! \" + account_obj.name, function () {",
									"                pm.expect(account_obj.name == jsData.data.name).to.be.true;",
									"            });",
									"",
									"            pm.test(\"account_code of account correctly! \" + account_obj.account_code, function () {",
									"                pm.expect(account_obj.account_code == jsData.data.account_code).to.be.true;",
									"            });",
									"",
									"            pm.test(\"description of account correctly! \" + account_obj.description, function () {",
									"                pm.expect(account_obj.description == jsData.data.description).to.be.true;",
									"            });",
									"",
									"            pm.test(\"parent_id of account correctly! \" + account_obj.parent_id, function () {",
									"                pm.expect(account_obj.parent_id == jsData.data.parent_id).to.be.true;",
									"            });",
									"",
									"            console.log(\"--- End Testsuite 26 ---\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get internal account detail, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{finan_base_url}}/finan-ledger/api/v1/account/detail/{{C-account_id}}?branch_id={{C-business_id}}",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"account",
								"detail",
								"{{C-account_id}}"
							],
							"query": [
								{
									"key": "branch_id",
									"value": "{{C-business_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "create_account",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// ============================= random number between min and max",
									"function getRandomInt(min, max) {",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"",
									"// ============================= random characters",
									"function randomChars(length) {",
									"    var result           = '';",
									"    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
									"    var charactersLength = characters.length;",
									"    for ( var i = 0; i < length; i++ ) {",
									"      result += characters.charAt(Math.floor(Math.random() * ",
									" charactersLength));",
									"   }",
									"   return result;",
									"}",
									"",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"let case_ = pm.environment.get(\"C-case_\");",
									"if(!case_){",
									"    case_ = 1;",
									"    pm.environment.set(\"C-case_\",case_);",
									"}",
									"console.log(\"Testcase: \" + testcase + \".\" + case_);",
									"",
									"let coa = pm.environment.get(\"C-coa\");",
									"let branch_id = parseInt(pm.environment.get(\"C-business_id\"));",
									"let name, parent_id, description, account_code;",
									"let open_amount = null;",
									"let payload;",
									"switch(testcase){",
									"    case 3:",
									"        switch(case_){",
									"            case 1:",
									"                console.log(\"Cash and Bank - parent_id = null\");",
									"                parent_id = null;",
									"                name = \"[API] Cash and Bank \" + randomChars(8);",
									"                open_amount = getRandomInt(1,9)*10000000;",
									"                break;",
									"            case 2:",
									"                console.log(\"Cash and Bank - name = ``\");",
									"                parent_id = coa[0].sub_group[0].sub_group_id;",
									"                name = \"\";",
									"                open_amount = getRandomInt(1,9)*10000000;",
									"                break;",
									"            case 3:",
									"                console.log(\"Cash and Bank - open_amount = null\");",
									"                parent_id = coa[0].sub_group[0].sub_group_id;",
									"                name = \"[API] Cash and Bank \" + randomChars(8);",
									"                open_amount = null;",
									"                break;",
									"            case 4:",
									"                console.log(\"Cash and Bank - open_amount < 0\");",
									"                parent_id = coa[0].sub_group[0].sub_group_id;",
									"                name = \"[API] Cash and Bank \" + randomChars(8);",
									"                open_amount = -1;",
									"                break;",
									"            case 5:",
									"                console.log(\"Cash and Bank - happy case\");",
									"                name = \"[API] Cash and Bank \" + randomChars(8);",
									"                open_amount = getRandomInt(1,9)*10000000; // 10 ~ 90 M",
									"                parent_id = coa[0].sub_group[0].sub_group_id;",
									"                break;",
									"            default:",
									"                console.log(\"Missing flow\");",
									"                break;",
									"        }",
									"",
									"        payload = {",
									"            \"name\":name,",
									"            \"open_amount\":open_amount,",
									"            \"parent_id\":parent_id,",
									"            \"branch_id\":branch_id",
									"        }",
									"        break;",
									"    case 5:",
									"        switch(case_){",
									"            case 1:",
									"                console.log(\"Other sub_group - parent_id = null\");",
									"                parent_id = null;",
									"                account_code = randomChars(6);",
									"                name = \"[API] Other sub_group \" + account_code;",
									"                description = \"Auto API - description create Other sub_group \" + account_code;",
									"                break;",
									"            case 2:",
									"                console.log(\"Other sub_group - name = ``\");",
									"                parent_id = coa[getRandomInt(1,coa.length - 1)].sub_group[0].sub_group_id;",
									"                account_code = randomChars(6);",
									"                name = \"\";",
									"                description = \"\";",
									"                break;",
									"            case 3:",
									"                console.log(\"Other sub_group - exsited account_code\");",
									"                parent_id = coa[getRandomInt(1,coa.length - 1)].sub_group[0].sub_group_id;",
									"                loopFind:",
									"                for(let i = 1; i < coa.length; i++){",
									"                    for(let j in coa[i].sub_group){",
									"                        for(let k in coa[i].sub_group[j].accounts){",
									"                            if(coa[i].sub_group[j].accounts[k].account_code != null && coa[i].sub_group[j].accounts[k].account_code != \"\"){",
									"                                account_code = coa[i].sub_group[j].accounts[k].account_code;",
									"                                break loopFind;",
									"                            }",
									"                        }",
									"                    }",
									"                }",
									"                name = \"[API] Other sub_group \" + account_code;",
									"                description = \"Auto API - description create Other sub_group \" + account_code;",
									"                break;",
									"            case 4:",
									"                switch(getRandomInt(1,coa.length - 1)){ //getRandomInt(1,coa.length)",
									"                    case 1:",
									"                        console.log(\"Create new account in group liabilities\");",
									"                        switch(getRandomInt(1,coa[0].sub_group.length - 1)){",
									"                            case 1:",
									"                                console.log(\"- sub_group Other Current Asset\");",
									"                                account_code = randomChars(6);",
									"                                name = \"[API] Other Current Asset \" + account_code;",
									"                                description = \"Auto API - description create Other Current Asset \" + account_code;",
									"                                parent_id = coa[0].sub_group[1].sub_group_id;",
									"                                break;",
									"                            case 2:",
									"                            default:",
									"                                console.log(\"- sub_group Long-term Assets\");",
									"                                account_code = randomChars(6);",
									"                                name = \"[API] Long-term Assets \" + account_code;",
									"                                description = \"Auto API - description create Long-term Assets \" + account_code;",
									"                                parent_id = coa[0].sub_group[2].sub_group_id;",
									"                                break;",
									"                        }",
									"                        break;",
									"                    case 2:",
									"                        console.log(\"Create new account in group liabilities\");",
									"                        switch(getRandomInt(1,coa[1].sub_group.length)){",
									"                            case 1:",
									"                                console.log(\"- sub_group Current Liabilities\");",
									"                                account_code = randomChars(6);",
									"                                name = \"[API] Current Liabilities \" + account_code;",
									"                                description = \"Auto API - description create Current Liabilities \" + account_code;",
									"                                parent_id = coa[1].sub_group[0].sub_group_id;",
									"                                break;",
									"                            case 2:",
									"                            default:",
									"                                console.log(\"- sub_group Long-term Liabilities\");",
									"                                account_code = randomChars(6);",
									"                                name = \"[API] Long-term Liabilities \" + account_code;",
									"                                description = \"Auto API - description create Long-term Liabilities \" + account_code;",
									"                                parent_id = coa[1].sub_group[1].sub_group_id;",
									"                                break;",
									"                        }",
									"                        break;",
									"                    case 3:",
									"                        console.log(\"Create new account in group equity\");",
									"                        switch(getRandomInt(1,coa[2].sub_group.length)){",
									"                            case 1:",
									"                                console.log(\"- sub_group Owner's Equity\");",
									"                                account_code = randomChars(6);",
									"                                name = \"[API] Owner's Equity \" + account_code;",
									"                                description = \"Auto API - description create Owner's Equity \" + account_code;",
									"                                parent_id = coa[2].sub_group[0].sub_group_id;",
									"                                break;",
									"                            case 2:",
									"                            default:",
									"                                console.log(\"- sub_group Retained Earning\");",
									"                                account_code = randomChars(6);",
									"                                name = \"[API] Retained Equity \" + account_code;",
									"                                description = \"Auto API - description create Retained Equity \" + account_code;",
									"                                parent_id = coa[2].sub_group[1].sub_group_id;",
									"                                break;",
									"                        }",
									"                        break;",
									"                    case 4:",
									"                        console.log(\"Create new account in group income\");",
									"                        switch(getRandomInt(1,coa[3].sub_group.length)){",
									"                            case 1:",
									"                                console.log(\"- sub_group Sale\");",
									"                                account_code = randomChars(6);",
									"                                name = \"[API] Sale \" + account_code;",
									"                                description = \"Auto API - description create Sale \" + account_code;",
									"                                parent_id = coa[3].sub_group[0].sub_group_id;",
									"                                break;",
									"                            case 2:",
									"                                console.log(\"- sub_group Other Income\");",
									"                                account_code = randomChars(6);",
									"                                name = \"[API] Other Income \" + account_code;",
									"                                description = \"Auto API - description create Other Income \" + account_code;",
									"                                parent_id = coa[3].sub_group[1].sub_group_id;",
									"                                break;",
									"                            case 3:",
									"                            default:",
									"                                console.log(\"- sub_group Uncategorized Income\");",
									"                                account_code = randomChars(6);",
									"                                name = \"[API] Uncategorized Income \" + account_code;",
									"                                description = \"Auto API - description create Uncategorized Income \" + account_code;",
									"                                parent_id = coa[3].sub_group[2].sub_group_id;",
									"                                break;",
									"                        }",
									"                        break;",
									"                    case 5:",
									"                    default:",
									"                        console.log(\"Create new account in group expense\");",
									"                        switch(getRandomInt(1,coa[4].sub_group.length)){",
									"                            case 1:",
									"                                console.log(\"- sub_group Cost of Goods Sold\");",
									"                                account_code = randomChars(6);",
									"                                name = \"[API] Cost of Goods Sold \" + account_code;",
									"                                description = \"Auto API - description create Cost of Goods Sold \" + account_code;",
									"                                parent_id = coa[4].sub_group[0].sub_group_id;",
									"                                break;",
									"                            case 2:",
									"                                console.log(\"- sub_group Operating Expense\");",
									"                                account_code = randomChars(6);",
									"                                name = \"[API] Operating Expense \" + account_code;",
									"                                description = \"Auto API - description create Operating Expense \" + account_code;",
									"                                parent_id = coa[4].sub_group[1].sub_group_id;",
									"                                break;",
									"                            case 3:",
									"                                console.log(\"- sub_group Other Expense\");",
									"                                account_code = randomChars(6);",
									"                                name = \"[API] Other Expense \" + account_code;",
									"                                description = \"Auto API - description create Other Expense \" + account_code;",
									"                                parent_id = coa[4].sub_group[2].sub_group_id;",
									"                                break;",
									"                            case 4:",
									"                            default:",
									"                                console.log(\"- sub_group Uncategorized Expense\");",
									"                                account_code = randomChars(6);",
									"                                name = \"[API] Uncategorized Expense \" + account_code;",
									"                                description = \"Auto API - description create Uncategorized Expense \" + account_code;",
									"                                parent_id = coa[4].sub_group[3].sub_group_id;",
									"                                break;",
									"                        }",
									"                        break;",
									"                }",
									"                break;",
									"            default:",
									"                console.log(\"Missing flow\");",
									"                break;",
									"        }",
									"",
									"        payload = {",
									"            \"name\":name,",
									"            \"account_code\":account_code,",
									"            \"parent_id\":parent_id,",
									"            \"description\":description,",
									"            \"branch_id\":branch_id",
									"        }",
									"        break;",
									"    default:",
									"        console.log(\"Missing flow\");",
									"        break;",
									"}",
									"",
									"console.log(\"payload: \",payload);",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));",
									"pm.environment.set(\"C-account_obj\",payload);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"let case_ = pm.environment.get(\"C-case_\");",
									"",
									"let jsData = pm.response.json();",
									"switch(testcase){",
									"    case 3:",
									"        switch(case_){",
									"            case 1: case 2: case 3: case 4:",
									"                pm.test(\"Status code is 400\", function () {",
									"                    pm.response.to.have.status(400);",
									"                });",
									"                console.log(\"Error: \",jsData);",
									"",
									"                case_++;",
									"                pm.environment.set(\"C-case_\",case_);",
									"                postman.setNextRequest(\"create_account\");",
									"                break;",
									"            case 5:",
									"                pm.test(\"Status code is 200\", function () {",
									"                    pm.response.to.have.status(200);",
									"                });",
									"                console.log(\"debug: \",jsData);",
									"",
									"                pm.environment.unset(\"C-case_\");",
									"                let account_obj = pm.environment.get(\"C-account_obj\");",
									"",
									"                // update account_id for account_obj",
									"                account_obj.account_id = jsData.data.id;",
									"",
									"                pm.test(\"name of account correctly! \" + account_obj.name, function () {",
									"                    pm.expect(account_obj.name == jsData.data.name).to.be.true;",
									"                });",
									"",
									"                pm.test(\"parent_id of account correctly! \" + account_obj.parent_id, function () {",
									"                    pm.expect(account_obj.parent_id == jsData.data.parent_id).to.be.true;",
									"                });",
									"",
									"                pm.test(\"open_amount of account correctly! \" + account_obj.open_amount, function () {",
									"                    pm.expect(account_obj.open_amount == jsData.data.open_amount).to.be.true;",
									"                });",
									"",
									"                testcase++;",
									"                pm.environment.set(\"C-testcase\",testcase);",
									"                pm.environment.set(\"C-account_obj\",account_obj);",
									"                postman.setNextRequest(\"get_list_internal_account\"); // get_list_internal_account",
									"                break;",
									"            default:",
									"                console.log(\"missing flow, end test\");",
									"                postman.setNextRequest(null);",
									"                break;",
									"        }",
									"        break;",
									"    case 5:",
									"        switch(case_){",
									"            case 1: case 2: case 3:",
									"                pm.test(\"Status code is 400\", function () {",
									"                    pm.response.to.have.status(400);",
									"                });",
									"                console.log(\"Error: \",jsData);",
									"",
									"                case_++;",
									"                pm.environment.set(\"C-case_\",case_);",
									"                postman.setNextRequest(\"create_account\");",
									"                break;",
									"            case 4:",
									"                pm.test(\"Status code is 200\", function () {",
									"                    pm.response.to.have.status(200);",
									"                });",
									"                console.log(\"debug: \",jsData);",
									"",
									"                pm.environment.unset(\"C-case_\");",
									"                let account_obj = pm.environment.get(\"C-account_obj\");",
									"",
									"                // update account_id for account_obj",
									"                account_obj.account_id = jsData.data.id;",
									"",
									"                pm.test(\"name of account correctly! \" + account_obj.name, function () {",
									"                    pm.expect(account_obj.name == jsData.data.name).to.be.true;",
									"                });",
									"",
									"                pm.test(\"account_code of account correctly! \" + account_obj.rate, function () {",
									"                    pm.expect(account_obj.account_code == jsData.data.account_code).to.be.true;",
									"                });",
									"",
									"                pm.test(\"description of account correctly! \" + account_obj.description, function () {",
									"                    pm.expect(account_obj.description == jsData.data.description).to.be.true;",
									"                });",
									"",
									"                pm.test(\"parent_id of account correctly! \" + account_obj.parent_id, function () {",
									"                    pm.expect(account_obj.parent_id == jsData.data.parent_id).to.be.true;",
									"                });",
									"",
									"                testcase++;",
									"                pm.environment.set(\"C-testcase\",testcase);",
									"                pm.environment.set(\"C-account_obj\",account_obj);",
									"                postman.setNextRequest(\"get_list_internal_account\"); // get_list_internal_account",
									"                break;",
									"            default:",
									"                console.log(\"missing flow, end test\");",
									"                postman.setNextRequest(null);",
									"                break;",
									"        }",
									"        break;",
									"    default:",
									"        console.log(\"missing flow, end test\");",
									"        postman.setNextRequest(null);",
									"        break;",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "authorization",
								"value": "Bearer {{C-userToken}}"
							},
							{
								"key": "content-type",
								"value": "application/json"
							},
							{
								"key": "x-platform-key",
								"value": "pro_web"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finan_base_url}}/finan-ledger/api/v1/account/create",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"account",
								"create"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}