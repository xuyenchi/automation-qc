{
	"info": {
		"_postman_id": "37d2da97-6c31-468c-b1b5-37a0f74cd19b",
		"name": "finan_61_verify_to_create_payment_account",
		"description": "### Testsuite: Verify to create new payment account (manual)\n\n###### Testcase:\n\n1. Login with owner account\n    1. verify email or phone number\n    2. login with pwd\n    3. get branch_id\n2. Get data\n    1. Account / Get coa => get all account had sub_group is cash_and_bank & account with key = \"\"\n    2. Transaction / Get list transaction => get total tnx\n    3. Posting / Get list posting => get total posting\n    4. Report / Report account => get total account\n    5. Account Payment / Get list payment account => get total account\n3. Create new account with open_amount != 0\n4. Check data\n    1. Account / Get coa => data correctly\n    2. Account / Get account detail => data correctly\n    3. Account payment / Get list account => have new record with data correctly\n    4. Transaction / Get list transaction => have new tnx\n    5. Transaction / Get tnx detail => data correctly\n    6. Posting / Get list posting => have 2 new posting with data correctly\n    7. Report / Get report account => have new account with data correctly\n5. Create new account with open_amount == 0\n6. Check data\n    1. Account Payment / Get list payment account => check new record & data\n    2. Account / Get account detail => data correctly\n    3. Transaction / Get list transaction => nothing happen\n    4. Posting / Get list posting => nothing happen\n    5. Report / Report account => check new account data\n\n###### Note:\n\n- After creating delete flow, add create new account existed\n- Not define validation for min/max character => will handle later",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "282640"
	},
	"item": [
		{
			"name": "authen",
			"item": [
				{
					"name": "verify_email_or_phone_number",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/**",
									" * currently, manual to create account pwd & use charles to get it",
									" * default pwd created: 21112007 (prod with default account & no need pwd)",
									" */",
									"",
									"let email = pm.environment.get(\"SER-email\");",
									"let phone_number = pm.environment.get(\"SER-phone_number\");",
									"",
									"console.log(\"--- Start Testsuite 61 ---\");",
									"let testcase = 1;",
									"",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let isPhone = true;",
									"",
									"let payload;",
									"if(isPhone){",
									"    console.log(\"login with phone_number: \" + phone_number);",
									"    payload = {",
									"        \"phone_number\": phone_number",
									"    }",
									"} else {",
									"    console.log(\"login with email: \" + email);",
									"    payload = {",
									"        \"email\": email",
									"    }",
									"}",
									"",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));",
									"pm.environment.set(\"C-testcase\",testcase);",
									"pm.environment.set(\"C-isPhone\",isPhone);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    let jsData = pm.response.json();",
									"",
									"    if(jsData.data.is_existed && jsData.data.has_password){",
									"        postman.setNextRequest(\"login_with_pwd\");",
									"    } else if(jsData.data.is_existed) {",
									"        console.log(\"This account doesn't create pwd, please manual create!!!\");",
									"        postman.setNextRequest(null);",
									"    } else {",
									"        console.log(\"Error:\", JSON.stringify(jsData));",
									"        console.log(\"THIS ACCOUNT IS NOT EXISTED IN SYSTEM, WILL MANUAL CREATE IT\");",
									"        postman.setNextRequest(null);",
									"    }",
									"} else {",
									"    console.log(\"Error, end test\");",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finan_base_url}}/finan-user/api/v1/auth/account/verify",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-user",
								"api",
								"v1",
								"auth",
								"account",
								"verify"
							]
						}
					},
					"response": []
				},
				{
					"name": "login_with_pwd",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// let crypto = require('crypto-js');",
									"",
									"// const algorithm = \"aes-256-gcm\";",
									"// const IV_LEN = 12;",
									"// const AUTH_TAG_LEN = 16;",
									"// const SECRET_KEY = \"7dQ0HwRI5okvwAK0WzxaW6ABFncjeu1E\";",
									"",
									"// function encrypt(message) {",
									"//   const iv = Buffer.from(crypto.randomBytes(IV_LEN));",
									"//   const cipher = crypto.createCipheriv(algorithm, SECRET_KEY, iv, {",
									"//     authTagLength: AUTH_TAG_LEN,",
									"//   });",
									"//   const encryptedData = Buffer.concat([cipher.update(message), cipher.final()]);",
									"//   const authTag = cipher.getAuthTag();",
									"//   const raw = Buffer.concat([iv, encryptedData, authTag]).toString(\"hex\");",
									"//   return raw;",
									"// }",
									"",
									"// const pwd = \"21112007\";",
									"// // var superSecretEncrypted = CryptoJS.AES.encrypt(pwd, SECRET_KEY);",
									"",
									"// let pwd_enc = encrypt(pwd);",
									"// console.log(\"pwd_enc: \" + pwd_enc);",
									"",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"let isPhone = pm.environment.get(\"C-isPhone\");",
									"",
									"let verify_payload = JSON.parse(pm.environment.get(\"C-payload\"));",
									"",
									"let payload;",
									"let version = pm.environment.get(\"x-current-version\");",
									"if(isPhone){",
									"    payload = {",
									"        \"phone_number\": verify_payload.phone_number,",
									"        \"pwd\": pm.environment.get(\"pwd\"),",
									"        \"platform\": \"gtapp\",",
									"        \"device_id\": \"C9102FC6-466C-4980-B795-A91A2FD7F97F\",",
									"        \"app_version\": version,",
									"        \"device_name\": \"iPhone\"",
									"    }",
									"} else {",
									"    payload = {",
									"        \"email\": verify_payload.email,",
									"        \"pwd\": pm.environment.get(\"pwd\"),",
									"        \"platform\": \"gtapp\",",
									"        \"device_id\": \"C9102FC6-466C-4980-B795-A91A2FD7F97F\",",
									"        \"app_version\": version,",
									"        \"device_name\": \"iPhone\"",
									"    }",
									"}",
									"console.log(\"debug: \", payload);",
									"",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    let jsData = pm.response.json();",
									"    // debug",
									"    // console.log(JSON.stringify(jsData));",
									"",
									"    let business_id = null;",
									"    try{",
									"        business_id = jsData.data.business_info.list_business[0].business_id;",
									"    } catch{",
									"        console.log(\"This is new user, must create business_id\");",
									"    }",
									"",
									"    let userToken = jsData.data.token;",
									"    pm.environment.set(\"C-userToken\",userToken);",
									"",
									"    if(business_id == null){",
									"        console.log(\"This user don't have store, please check & use another account\");",
									"        ",
									"        postman.setNextRequest(null);",
									"    } else {",
									"        let userRefreshToken = jsData.data.refresh_token;",
									"",
									"        let userInfo = {",
									"            \"role_name\":jsData.data.business_info.current_role.role_name,",
									"            \"is_owner\":jsData.data.business_info.current_role.is_owner,",
									"            \"user_name\":jsData.data.business_info.list_business[0].user_name,",
									"            \"business_id\":business_id",
									"        }",
									"",
									"        // show log",
									"        // console.log(\"userToken:\",userToken);",
									"        // console.log(\"userRefreshToken:\",userRefreshToken);",
									"        console.log(\"userInfo:\",JSON.stringify(userInfo));",
									"",
									"        pm.environment.set(\"C-userRefreshToken\",userRefreshToken);",
									"        pm.environment.set(\"C-userInfo\",userInfo);",
									"        pm.environment.set(\"C-business_id\",business_id);",
									"",
									"        postman.setNextRequest(\"get_branch_id\"); // get_branch_id",
									"    }",
									"} else {",
									"    console.log(\"Can't get Token, end test\");",
									"",
									"    // debug",
									"    let jsData = pm.response.json();",
									"    console.log(\"data:\",JSON.stringify(jsData));",
									"",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finan_base_url}}/finan-user/api/v1/auth/account/login",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-user",
								"api",
								"v1",
								"auth",
								"account",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_branch_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let branch_id = null;",
									"    try {",
									"        branch_id = jsData.data.id;",
									"    } catch {",
									"        console.log(\"Can't get branch_id\");",
									"    }",
									"",
									"    pm.test(\"Got branch_id\", function () {",
									"        pm.expect(branch_id != null).to.be.true;",
									"    });",
									"",
									"    if(branch_id != null){",
									"        pm.environment.set(\"C-business_id\",branch_id);",
									"        ",
									"        testcase++;",
									"        pm.environment.set(\"C-testcase\",testcase);",
									"        postman.setNextRequest(\"get_list_internal_account\"); // get_list_internal_account",
									"    } else {",
									"        postman.setNextRequest(null);",
									"    }",
									"} else {",
									"    console.log(\"Can't get Token, end test\", jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{finan_base_url}}/finan-business/api/v1/branch/detail/{{C-business_id}}",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-business",
								"api",
								"v1",
								"branch",
								"detail",
								"{{C-business_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "account coa",
			"item": [
				{
					"name": "get_list_internal_account",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"",
									"    let list_payment_account = [];",
									"    let owners_equity_account = null;",
									"    try {",
									"        for(let i in jsData.data){",
									"            for(let j in jsData.data[i].sub_group){",
									"                for(let k in jsData.data[i].sub_group[j].accounts){",
									"                    if(jsData.data[i].sub_group[j].value == \"cash_and_bank\"){",
									"                        list_payment_account[list_payment_account.length] = {",
									"                            \"account_name\":jsData.data[i].sub_group[j].accounts[k].name,",
									"                            \"account_id\":jsData.data[i].sub_group[j].accounts[k].id,",
									"                            \"group_name\":jsData.data[i].sub_group[j].accounts[k].group_name,",
									"                            \"sub_group_name\":jsData.data[i].sub_group[j].accounts[k].sub_name,",
									"                            \"branch_id\":jsData.data[i].sub_group[j].accounts[k].branch_id,",
									"                            \"displays_id\":jsData.data[i].sub_group[j].accounts[k].displays_id,",
									"                            \"account_source\":jsData.data[i].sub_group[j].accounts[k].account_source,",
									"                            \"account_type\":jsData.data[i].sub_group[j].accounts[k].account_type,",
									"                            \"account_code\":jsData.data[i].sub_group[j].accounts[k].account_code,",
									"                            \"coa_type\":jsData.data[i].sub_group[j].accounts[k].coa_type,",
									"                            \"sub_coa_deepest\":jsData.data[i].sub_group[j].accounts[k].sub_coa_deepest,",
									"                            \"name_en\":jsData.data[i].sub_group[j].accounts[k].name_en,",
									"                            \"status\":jsData.data[i].sub_group[j].accounts[k].status,",
									"                            \"parent_id\":jsData.data[i].sub_group[j].accounts[k].parent_id,",
									"                            \"description\":jsData.data[i].sub_group[j].accounts[k].description,",
									"                            \"open_amount\":jsData.data[i].sub_group[j].accounts[k].open_amount,",
									"                            \"currency\":jsData.data[i].sub_group[j].accounts[k].currency",
									"                            // \"opening_at\":jsData.data[i].sub_group[j].accounts[k].opening_at",
									"                            // \"closing_at\":jsData.data[i].sub_group[j].accounts[k].closing_at",
									"                        }",
									"                    }",
									"                    if(jsData.data[i].sub_group[j].accounts[k].key == \"owners_equity\"){",
									"                        owners_equity_account = jsData.data[i].sub_group[j].accounts[k];",
									"                    }",
									"                }",
									"            }",
									"        }",
									"    } catch {",
									"        console.log(\"can't get all account in coa\");",
									"    }",
									"",
									"    let account_obj = pm.environment.get(\"C-account_obj\");",
									"    let isFound = false;",
									"    switch(testcase){",
									"        case 2:",
									"            pm.test(\"Got list_payment_account\", function () {",
									"                pm.expect(list_payment_account.length > 0).to.be.true;",
									"            });",
									"",
									"            pm.test(\"Got owners_equity_account\", function () {",
									"                pm.expect(owners_equity_account != null).to.be.true;",
									"            });",
									"",
									"            if(list_payment_account.length > 0 && owners_equity_account != null){",
									"                pm.environment.set(\"C-list_payment_account\",list_payment_account);",
									"                pm.environment.set(\"C-owners_equity_account\",owners_equity_account);",
									"",
									"                // debug",
									"                console.log(\"total list_payment_account: \" + list_payment_account.length);",
									"                console.log(\"owners_equity_account: \",owners_equity_account);",
									"",
									"                postman.setNextRequest(\"get_list_transaction\"); // get_list_transaction",
									"            } else {",
									"                console.log(\"Can't get list internal account, end test\");",
									"                postman.setNextRequest(null);",
									"            }",
									"            break;",
									"        case 4: case 6:",
									"            let old_list_payment_account = pm.environment.get(\"C-list_payment_account\");",
									"            pm.test(\"Total account of cash_and_bank in coa increase 1\", function () {",
									"                pm.expect(old_list_payment_account.length + 1 !== list_payment_account).to.be.true;",
									"            });",
									"            ",
									"            for(let i in list_payment_account){",
									"                if(list_payment_account[i].account_id == account_obj.account_id){",
									"                    isFound = true;",
									"                    console.log(\"debug: \",list_payment_account[i]);",
									"",
									"                    pm.test(\"name of account correctly! \" + account_obj.name, function () {",
									"                        console.log(\"Actual name: \" + list_payment_account[i].account_name);",
									"                        pm.expect(account_obj.name == list_payment_account[i].account_name).to.be.true;",
									"                    });",
									"",
									"                    // pm.test(\"parent_id of account correctly! \" + account_obj.parent_id, function () {",
									"                    //     pm.expect(account_obj.parent_id == list_payment_account[i].parent_id).to.be.true;",
									"                    // });",
									"",
									"                    // pm.test(\"open_amount of account correctly! \" + account_obj.open_amount, function () {",
									"                    //     pm.expect(account_obj.open_amount == list_payment_account[i].open_amount).to.be.true;",
									"                    // });",
									"                    break;",
									"                }",
									"            }",
									"",
									"            pm.test(\"Found new account!\", function () {",
									"                pm.expect(isFound).to.be.true;",
									"            });",
									"",
									"            postman.setNextRequest(\"get_account_detail\"); // get_account_detail",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get list internal account, end test \", jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{finan_base_url}}/finan-ledger/api/v1/account/list?branch_id={{C-business_id}}&coa_type=",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"account",
								"list"
							],
							"query": [
								{
									"key": "branch_id",
									"value": "{{C-business_id}}"
								},
								{
									"key": "coa_type",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get_account_detail",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let account_obj = pm.environment.get(\"C-account_obj\");",
									"let account_id = account_obj.account_id;",
									"console.log(\"view detail account: \" + account_id);",
									"",
									"pm.environment.set(\"C-account_id\",account_id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    console.log(\"Debug: \",jsData);",
									"",
									"    let account_obj = pm.environment.get(\"C-account_obj\");",
									"",
									"    switch(testcase){",
									"        case 4: case 6:",
									"            pm.test(\"name of account correctly! \" + account_obj.name, function () {",
									"                pm.expect(account_obj.name == jsData.data.name).to.be.true;",
									"            });",
									"",
									"            // pm.test(\"parent_id of account correctly! \" + account_obj.parent_id, function () {",
									"            //     pm.expect(account_obj.parent_id == jsData.data.parent_id).to.be.true;",
									"            // });",
									"",
									"            // pm.test(\"open_amount of account correctly! \" + account_obj.open_amount, function () {",
									"            //     pm.expect(account_obj.open_amount == jsData.data.open_amount).to.be.true;",
									"            // });",
									"",
									"            postman.setNextRequest(\"get_list_payment_account\"); // get_list_payment_account",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get internal account detail, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{finan_base_url}}/finan-ledger/api/v1/account/detail/{{C-account_id}}?branch_id={{C-business_id}}",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"account",
								"detail",
								"{{C-account_id}}"
							],
							"query": [
								{
									"key": "branch_id",
									"value": "{{C-business_id}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "account cash_n_bank",
			"item": [
				{
					"name": "get_list_payment_account",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    // let total_account = jsData.data.accounts.length;",
									"    let list_payment_account = pm.environment.get(\"C-list_payment_account\");",
									"",
									"    let isFound = false;",
									"    switch(testcase){",
									"        case 2:",
									"            for(let i in list_payment_account){",
									"                for(let j in jsData.data.accounts){",
									"                    if(list_payment_account[i].account_id == jsData.data.accounts[j].id){",
									"                        list_payment_account[i].open_amount = jsData.data.accounts[j].open_amount;",
									"                        list_payment_account[i].total_balance_amount = jsData.data.accounts[j].total_balance_amount;",
									"                        // list_payment_account[i].status = jsData.data.accounts[j].status;",
									"                        break;",
									"                    }",
									"                }",
									"            }",
									"            pm.environment.set(\"C-list_payment_account\",list_payment_account);",
									"            // console.log(\"list_payment_account: \",list_payment_account);",
									"",
									"            testcase++;",
									"            // testcase = 5;",
									"            pm.environment.set(\"C-testcase\",testcase);",
									"            postman.setNextRequest(\"create_payment_account\"); // create_payment_account",
									"            break;",
									"        case 4: case 6:",
									"            let account_obj = pm.environment.get(\"C-account_obj\");",
									"            pm.test(\"Total payment account increase 1\", function () {",
									"                pm.expect(list_payment_account.length + 1 == jsData.data.accounts.length).to.be.true;",
									"            });",
									"",
									"            for(let i in jsData.data.accounts){",
									"                if(jsData.data.accounts[i].id == account_obj.account_id){",
									"                    isFound = true;",
									"                    pm.test(\"name of account correctly! \" + account_obj.name, function () {",
									"                        console.log(\"Actual name: \" + jsData.data.accounts[i].name);",
									"                        pm.expect(account_obj.name == jsData.data.accounts[i].name).to.be.true;",
									"                    });",
									"",
									"                    // pm.test(\"parent_id of account correctly! \" + account_obj.parent_id, function () {",
									"                    //     pm.expect(account_obj.parent_id == jsData.data.accounts[i].parent_id).to.be.true;",
									"                    // });",
									"",
									"                    pm.test(\"total_balance_amount of account correctly! \" + account_obj.open_amount, function () {",
									"                        pm.expect(account_obj.open_amount == jsData.data.accounts[i].total_balance_amount).to.be.true;",
									"                    });",
									"                    list_payment_account.push(jsData.data.accounts[i]);",
									"                    break;",
									"                }",
									"            }",
									"",
									"            pm.test(\"Found new account \" + account_obj.name, function () {",
									"                pm.expect(isFound).to.be.true;",
									"            });",
									"",
									"            // update lại list_payment_account sau khi đã check ở case 4",
									"            pm.environment.set(\"C-list_payment_account\",list_payment_account);",
									"            // console.log(\"list_payment_account after add new: \", list_payment_account);",
									"            ",
									"            postman.setNextRequest(\"get_list_transaction\"); // get_list_transaction",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get list payment account, end test\", jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"url": {
							"raw": "{{finan_base_url}}/finan-ledger/api/v1/account/list-by-key?branch_id={{C-business_id}}&key=cash_and_bank",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"account",
								"list-by-key"
							],
							"query": [
								{
									"key": "branch_id",
									"value": "{{C-business_id}}"
								},
								{
									"key": "key",
									"value": "cash_and_bank"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "create_payment_account",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// ============================= random number between min and max",
									"function getRandomInt(min, max) {",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"",
									"// ============================= random characters",
									"function randomChars(length) {",
									"    var result           = '';",
									"    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
									"    var charactersLength = characters.length;",
									"    for ( var i = 0; i < length; i++ ) {",
									"      result += characters.charAt(Math.floor(Math.random() * ",
									" charactersLength));",
									"   }",
									"   return result;",
									"}",
									"",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let branch_id = parseInt(pm.environment.get(\"C-business_id\"));",
									"let name, description, account_code;",
									"let open_amount = null;",
									"let payload;",
									"switch(testcase){",
									"    case 3:",
									"        console.log(\"Amount > 0\");",
									"        name = \"[API] Cash and Bank \" + randomChars(8);",
									"        open_amount = getRandomInt(1,9)*10000000; // 10 ~ 90 M",
									"",
									"        payload = {",
									"            \"name\":name,",
									"            \"open_amount\":open_amount,",
									"            \"branch_id\":branch_id",
									"        }",
									"        break;",
									"    case 5:",
									"        console.log(\"Amount = 0\");",
									"        name = \"[API][CnB] amount 0-\" + randomChars(8);",
									"        open_amount = 0;",
									"",
									"        payload = {",
									"            \"name\":name,",
									"            \"open_amount\":open_amount,",
									"            \"branch_id\":branch_id",
									"        }",
									"        break;",
									"    default:",
									"        console.log(\"Missing flow\");",
									"        break;",
									"}",
									"",
									"console.log(\"payload: \",payload);",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));",
									"pm.environment.set(\"C-account_obj\",payload);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ====================================== parser cURL",
									"function parseCURL(request_api){",
									"    let curl = \"\";",
									"    if(request_api.method == \"PUT\"){",
									"        curl = \"curl --location --request PUT \";",
									"    } else {",
									"        curl = \"curl --location \";",
									"    }",
									"    curl += \"'\" + request_api.url.protocol + \"://\"",
									"    // host",
									"    for(let i in request_api.url.host){",
									"        if(i >= request_api.url.host.length - 1){",
									"            curl += request_api.url.host[i] + \"/\";",
									"        } else {",
									"            curl += request_api.url.host[i] + \".\";",
									"        }",
									"    }",
									"    // path",
									"    for(let i in request_api.url.path){",
									"        if(i >= request_api.url.path.length - 1){",
									"            curl += request_api.url.path[i];",
									"        } else {",
									"            curl += request_api.url.path[i] + \"/\";",
									"        }",
									"    }",
									"    // query (if have)",
									"    if(\"query\" in request_api.url){",
									"        curl += \"? \";",
									"        for(let i in request_api.url.query){",
									"            if(i >= request_api.url.query.length - 1){",
									"                curl += request_api.url.query[i].key + \"=\" + request_api.url.query[i].value + \"' \";",
									"            } else {",
									"                curl += request_api.url.query[i].key + \"=\" + request_api.url.query[i].value + \"&\";",
									"            }",
									"        }",
									"    } else {",
									"        curl += \"' \";",
									"    }",
									"    // header",
									"    for(let i in request_api.header){",
									"        if(i >= request_api.header.length - 1){",
									"            curl += \"--header '\" + request_api.header[i].key + \": \" + request_api.header[i].value + \"'\";",
									"        } else {",
									"            curl += \"--header '\" + request_api.header[i].key + \": \" + request_api.header[i].value + \"' \";",
									"        }",
									"    }",
									"    switch(request_api.method){",
									"        case \"POST\":",
									"            curl += \" --data '\" + request_api.body.raw + \"'\"",
									"            break;",
									"        case \"PUT\":",
									"            curl += \" --data-raw '\" + request_api.body.raw + \"'\"",
									"            break;",
									"        default:",
									"            break;",
									"    }",
									"    console.log(curl);",
									"    return curl;",
									"}",
									"const request_api = pm.request.toJSON();",
									"parseCURL(request_api);",
									"",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"",
									"let jsData = pm.response.json();",
									"let account_obj = pm.environment.get(\"C-account_obj\");",
									"switch(testcase){",
									"    case 3: case 5:",
									"        pm.test(\"Status code is 200\", function () {",
									"            pm.response.to.have.status(200);",
									"        });",
									"        console.log(\"debug: \",jsData);",
									"",
									"        // update account_id for account_obj",
									"        account_obj.account_id = jsData.data.id;",
									"",
									"        pm.test(\"name of account correctly! \" + account_obj.name, function () {",
									"            pm.expect(account_obj.name == jsData.data.name).to.be.true;",
									"        });",
									"",
									"        pm.test(\"account_source must be customize\", function () {",
									"            pm.expect(\"customize\" == jsData.data.account_source).to.be.true;",
									"        });",
									"",
									"        // cash or bank?",
									"        pm.test(\"account_type must be cash\", function () {",
									"            pm.expect(\"cash\" == jsData.data.account_type).to.be.true;",
									"        });",
									"",
									"        testcase++;",
									"        pm.environment.set(\"C-testcase\",testcase);",
									"        pm.environment.set(\"C-account_obj\",account_obj);",
									"        postman.setNextRequest(\"get_list_internal_account\"); // get_list_internal_account",
									"        break;",
									"    default:",
									"        console.log(\"missing flow, end test\");",
									"        postman.setNextRequest(null);",
									"        break;",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "authorization",
								"value": "Bearer {{C-userToken}}"
							},
							{
								"key": "content-type",
								"value": "application/json"
							},
							{
								"key": "x-platform-key",
								"value": "pro_web"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finan_base_url}}/finan-ledger/api/v1/account/create-manual",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"account",
								"create-manual"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "transaction Copy",
			"item": [
				{
					"name": "get_list_transaction",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = JSON.parse(responseBody);",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let total_tnx = null;",
									"    try {",
									"        total_tnx = jsData.meta.total_rows;",
									"    } catch {",
									"        console.log(\"Can't get total tnx\");",
									"    }",
									"",
									"    let old_total_tnx = pm.environment.get(\"C-total_tnx\");",
									"    switch(testcase){",
									"        case 2:",
									"            pm.test(\"Got total tnx! \" + total_tnx, function () {",
									"                pm.expect(total_tnx != null).to.be.true;",
									"            });",
									"            pm.environment.set(\"C-total_tnx\",total_tnx);",
									"            console.log(\"total_tnx: \" + total_tnx);",
									"            ",
									"            postman.setNextRequest(\"get_list_posting\"); // get_list_posting",
									"            break;",
									"        case 4:",
									"            let account_obj = pm.environment.get(\"C-account_obj\");",
									"            let owners_equity_account = pm.environment.get(\"C-owners_equity_account\");",
									"",
									"            pm.test(\"Total tnx increase 1\", function () {",
									"                console.log(\"Actual: \" + total_tnx);",
									"                console.log(\"Expected: \" + (old_total_tnx + 1));",
									"                pm.expect(total_tnx == old_total_tnx + 1).to.be.true;",
									"            });",
									"            // update lại total_tnx",
									"            pm.environment.set(\"C-total_tnx\",total_tnx);",
									"",
									"            let isFound = false;",
									"            for(let i in jsData.data){",
									"                if(jsData.data[i].account_id == account_obj.account_id){",
									"                    isFound = true;",
									"                    pm.test(\"amount of tnx correctly! \" + account_obj.open_amount, function () {",
									"                        pm.expect(account_obj.open_amount == jsData.data[i].amount).to.be.true;",
									"                    });",
									"                    account_obj.tnx_id = jsData.data[i].id;",
									"",
									"                    pm.test(\"txn_type of tnx must be `in`\", function () {",
									"                        pm.expect(jsData.data[i].txn_type == \"in\").to.be.true;",
									"                    });",
									"",
									"                    pm.test(\"category_id of tnx correctly! \" + owners_equity_account.id, function () {",
									"                        pm.expect(owners_equity_account.id == jsData.data[i].category_id).to.be.true;",
									"                    });",
									"",
									"                    // object_type =>",
									"                    // pm.test(\"object_type of tnx correctly! \" + account_obj.object_type, function () {",
									"                    //     pm.expect(account_obj.object_type).to.eql(jsData.data[i].object_type);",
									"                    // });",
									"",
									"                    // object_key =>",
									"                    // pm.test(\"object_key of tnx correctly! \" + account_obj.object_key, function () {",
									"                    //     pm.expect(account_obj.object_key).to.eql(jsData.data[i].object_key);",
									"                    // });",
									"                    break;",
									"                }",
									"            }",
									"",
									"            pm.test(\"Found new tnx\", function () {",
									"                pm.expect(isFound).to.be.true;",
									"            });",
									"",
									"            pm.environment.set(\"C-account_obj\",account_obj);",
									"            postman.setNextRequest(\"get_transaction_detail\"); // get_transaction_detail (get tnx detail đang lỗi nên tạm thời skip) get_report_cash_flow",
									"            break;",
									"        case 6:",
									"            pm.test(\"Nothing happen with total tnx\", function () {",
									"                console.log(\"Actual: \" + total_tnx);",
									"                console.log(\"Expected: \" + old_total_tnx);",
									"                pm.expect(total_tnx == old_total_tnx).to.be.true;",
									"            });",
									"",
									"            postman.setNextRequest(\"get_list_posting\"); // get_list_posting",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get list tnx, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{finan_base_url}}/finan-ledger/api/v1/transaction/list?branch_id={{C-business_id}}&page=1&page_size=100&sort",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"transaction",
								"list"
							],
							"query": [
								{
									"key": "branch_id",
									"value": "{{C-business_id}}"
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "page_size",
									"value": "100"
								},
								{
									"key": "sort",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get_transaction_detail",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let account_obj = pm.environment.get(\"C-account_obj\");",
									"let tnx_id = account_obj.tnx_id;",
									"console.log(\"view detail tnx: \" + tnx_id);",
									"",
									"pm.environment.set(\"C-tnx_id\",tnx_id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    // let testcase = pm.environment.get(\"C-testcase\");",
									"    let owners_equity_account = pm.environment.get(\"C-owners_equity_account\");",
									"    console.log(\"Debug: \" + JSON.stringify(jsData));",
									"",
									"    let account_obj = pm.environment.get(\"C-account_obj\");",
									"",
									"    pm.test(\"amount of tnx correctly! \" + account_obj.open_amount, function () {",
									"        pm.expect(account_obj.open_amount == jsData.data.amount).to.be.true;",
									"    });",
									"",
									"    pm.test(\"txn_type of tnx must be `in`\", function () {",
									"        pm.expect(jsData.data.txn_type == \"in\").to.be.true;",
									"    });",
									"",
									"    pm.test(\"category_id of tnx correctly! \" + owners_equity_account.id, function () {",
									"        pm.expect(owners_equity_account.id == jsData.data.category_id).to.be.true;",
									"    });",
									"",
									"    postman.setNextRequest(\"get_list_posting\"); // get_list_posting",
									"} else {",
									"    console.log(\"Can't get transaction detail, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{finan_base_url}}/finan-ledger/api/v1/transaction/detail/{{C-tnx_id}}?branch_id={{C-business_id}}",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"transaction",
								"detail",
								"{{C-tnx_id}}"
							],
							"query": [
								{
									"key": "branch_id",
									"value": "{{C-business_id}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// pm.request.headers.add({",
							"//  key: \"authorization\",",
							"//  value: \"Bearer \" + pm.environment.get(\"C-userToken\")",
							"// });",
							"",
							"// pm.request.headers.add({",
							"//  key: \"Content-Type\",",
							"//  value: \"application/json\"",
							"// });"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "posting",
			"item": [
				{
					"name": "get_list_posting",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let page = pm.environment.get(\"C-page\");",
									"",
									"if(!page){",
									"    page = 1;",
									"    pm.environment.set(\"C-page\",page);",
									"",
									"    let page_size = 500;",
									"    pm.environment.set(\"C-page_size\",page_size);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"/**",
									" * object_type: transaction, invoice",
									" * object_id => id respective with object_type (tnx_id, invoice_id)",
									" * object_id_ref => use for invoice with product/item (product_id, item_id)",
									" * is_credit",
									" * created_at",
									" * value_at",
									" */",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = JSON.parse(responseBody);",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let total_pages = 1;",
									"    let total_posting;",
									"    try {",
									"        total_pages = jsData.meta.total_pages;",
									"        total_posting = jsData.meta.total_rows;",
									"    } catch {",
									"        console.log(\"currently, this branch with null data\");",
									"    }",
									"    let page = pm.environment.get(\"C-page\");",
									"",
									"    let list_posting;",
									"    let old_total_posting = pm.environment.get(\"C-total_posting\");",
									"    switch(testcase){",
									"        case 2:",
									"            pm.test(\"Got all posting! \" + total_posting, function () {",
									"                pm.expect(total_posting > 0).to.be.true;",
									"            });",
									"            pm.environment.set(\"C-total_posting\",total_posting);",
									"",
									"            postman.setNextRequest(\"get_report_account\"); // get_report_account",
									"            break;",
									"        case 4:",
									"            list_posting = pm.environment.get(\"C-list_posting\");",
									"            if(!list_posting){",
									"                list_posting = [];",
									"            }",
									"",
									"            for(let item in jsData.data){",
									"                list_posting[list_posting.length] = {",
									"                    \"posting_id\":jsData.data[item].id,",
									"                    \"account_id\":jsData.data[item].account_id,",
									"                    \"amount\":jsData.data[item].amount,",
									"                    \"branch_id\":jsData.data[item].branch_id,",
									"                    \"created_at\":jsData.data[item].created_at,",
									"                    \"currency\":jsData.data[item].currency,",
									"                    \"deleted_at\":jsData.data[item].deleted_at,",
									"                    \"is_credit\":jsData.data[item].is_credit,",
									"                    \"is_final_status\":jsData.data[item].is_final_status,",
									"                    \"object_id_ref\":jsData.data[item].object_id_ref,",
									"                    \"object_id\":jsData.data[item].object_id,",
									"                    \"object_type\":jsData.data[item].object_type,",
									"                    // \"value_at\":jsData.data[item].value_at,",
									"                    \"short_desc\":jsData.data[item].short_desc",
									"                }",
									"            }",
									"            pm.environment.set(\"C-list_posting\",list_posting);",
									"",
									"            if(page >= total_pages){",
									"                // must clear page & page_size",
									"                pm.environment.unset(\"C-page\");",
									"                pm.environment.unset(\"C-page_size\");",
									"",
									"                pm.test(\"Total posting increase 2\", function () {",
									"                    pm.expect(total_posting == old_total_posting + 2).to.be.true;",
									"                });",
									"",
									"                // xử lý cho expected list",
									"                let account_obj = pm.environment.get(\"C-account_obj\");",
									"                let owners_equity_account = pm.environment.get(\"C-owners_equity_account\");",
									"                let list_expected_posting = [];",
									"                // account",
									"                list_expected_posting[0] = {",
									"                    \"account_id\":account_obj.account_id,",
									"                    \"object_type\":\"transaction\",",
									"                    \"object_id\":account_obj.tnx_id,",
									"                    \"amount\":account_obj.open_amount,",
									"                    \"is_credit\":false,",
									"                    \"type\":\"account\"",
									"                }",
									"                // category",
									"                list_expected_posting[1] = {",
									"                    \"account_id\":owners_equity_account.id,",
									"                    \"object_type\":\"transaction\",",
									"                    \"object_id\":account_obj.tnx_id,",
									"                    \"amount\":account_obj.open_amount,",
									"                    \"is_credit\":true,",
									"                    \"type\":\"category\"",
									"                }",
									"                console.log(\"list_expected_posting: \", list_expected_posting);",
									"",
									"                // xử lý cho actual list",
									"                let list_act_posting = [];",
									"                for(let i in list_posting){",
									"                    if(list_posting[i].object_type == \"transaction\" && list_posting[i].object_id == account_obj.tnx_id){",
									"                        list_act_posting[list_act_posting.length] = {",
									"                            \"account_id\":list_posting[i].account_id,",
									"                            \"object_type\":\"transaction\",",
									"                            \"object_id\":list_posting[i].object_id,",
									"                            \"amount\":list_posting[i].amount,",
									"                            \"is_credit\":list_posting[i].is_credit",
									"                        }",
									"                    }",
									"                }",
									"                console.log(\"list_act_posting: \", list_act_posting);",
									"",
									"                let count = 0;",
									"                for(let i in list_expected_posting){",
									"                    for(let j in list_act_posting){",
									"                        if(list_expected_posting[i].account_id == list_act_posting[j].account_id){",
									"                            count++;",
									"                            if(list_expected_posting[i].type == \"account\"){",
									"                                console.log(\"Found account tnx\");",
									"",
									"                                pm.test(\"is_credit correctly\", function () {",
									"                                    pm.expect(list_expected_posting[i].is_credit == list_act_posting[j].is_credit).to.be.true;",
									"                                });",
									"",
									"                                pm.test(\"amount correctly\", function () {",
									"                                    pm.expect(list_expected_posting[i].amount == list_act_posting[j].amount).to.be.true;",
									"                                });",
									"                            } else {",
									"                                console.log(\"Found category tnx\");",
									"",
									"                                pm.test(\"is_credit correctly\", function () {",
									"                                    pm.expect(list_expected_posting[i].is_credit == list_act_posting[j].is_credit).to.be.true;",
									"                                });",
									"",
									"                                pm.test(\"amount correctly\", function () {",
									"                                    pm.expect(list_expected_posting[i].amount == list_act_posting[j].amount).to.be.true;",
									"                                });",
									"                            }",
									"                            break;",
									"                        }",
									"                    }",
									"                }",
									"",
									"                pm.test(\"Found all posting\", function () {",
									"                    pm.expect(count == 2).to.be.true;",
									"                });",
									"",
									"                // update lại total posting sau khi đã check",
									"                pm.environment.set(\"C-total_posting\",total_posting);",
									"                ",
									"                postman.setNextRequest(\"get_report_account\"); // get_report_account",
									"            } else {",
									"                page++;",
									"                pm.environment.set(\"C-page\",page);",
									"",
									"                console.log(\"view next page (\" + page + \") to get more posting\");",
									"                postman.setNextRequest(\"get_list_posting\");",
									"            }",
									"            break;",
									"        case 6:",
									"            pm.test(\"Nothing happen with total_posting \" + total_posting, function () {",
									"                pm.expect(total_posting == old_total_posting).to.be.true;",
									"            });",
									"",
									"            postman.setNextRequest(\"get_report_account\"); // get_report_account",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get list posting, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{finan_base_url}}​/finan-ledger/api/v1/posting/list?branch_id={{C-business_id}}&page={{C-page}}&page_size={{C-page_size}}&search=&sort=",
							"host": [
								"{{finan_base_url}}​"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"posting",
								"list"
							],
							"query": [
								{
									"key": "branch_id",
									"value": "{{C-business_id}}"
								},
								{
									"key": "page",
									"value": "{{C-page}}"
								},
								{
									"key": "page_size",
									"value": "{{C-page_size}}"
								},
								{
									"key": "search",
									"value": ""
								},
								{
									"key": "sort",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.request.headers.add({",
							" key: \"authorization\",",
							" value: \"Bearer \" + pm.environment.get(\"C-userToken\")",
							"});",
							"",
							"pm.request.headers.add({",
							" key: \"Content-Type\",",
							" value: \"application/json\"",
							"});"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "report",
			"item": [
				{
					"name": "get_report_account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ============================= sort by key",
									"function sortByKey(array, key, type) {",
									"    if(type == \"asc\"){",
									"        return array.sort(function(a, b) {",
									"            var x = a[key]; var y = b[key];",
									"            return ((x > y) ? -1 : ((x < y) ? 1 : 0));",
									"        });",
									"    } else {",
									"        return array.sort(function(a, b) {",
									"            var x = a[key]; var y = b[key];",
									"            return ((x < y) ? -1 : ((x > y) ? 1 : 0));",
									"        });",
									"    }",
									"}",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let report_account = null;",
									"    try {",
									"        report_account = jsData.data;",
									"        /**",
									"         * list account in sub_group_value = cash_and_bank",
									"         */",
									"    } catch {",
									"        console.log(\"Can't get report cash_flow data\");",
									"    }",
									"",
									"    let list_payment_account = pm.environment.get(\"C-list_payment_account\");",
									"    switch(testcase){",
									"        case 2:",
									"            pm.environment.set(\"C-report_account\",report_account);",
									"",
									"            // ================================================ bonus check current data",
									"",
									"            pm.test(\"Show all account in cash_and_bank\", function () {",
									"                console.log(\"total cash_and_bank in coa: \" + list_payment_account.length);",
									"                console.log(\"total report account: \" + report_account.length);",
									"                pm.expect(list_payment_account.length == report_account.length).to.be.true;",
									"            });",
									"            // console.log(\"cash_n_bank: \" + JSON.stringify(cash_n_bank));",
									"            // console.log(\"report_account: \" + JSON.stringify(report_account));",
									"            ",
									"            // ================================================ ",
									"",
									"            postman.setNextRequest(\"get_list_payment_account\"); // get_list_payment_account",
									"            break;",
									"        case 4: case 6:",
									"            let account_obj = pm.environment.get(\"C-account_obj\");",
									"            let old_report_account = pm.environment.get(\"C-report_account\");",
									"",
									"            pm.test(\"report account increase 1\", function () {",
									"                pm.expect(old_report_account.length + 1 == report_account.length).to.be.true;",
									"            });",
									"",
									"            let isFound = false;",
									"            for(let i in report_account){",
									"                if(report_account[i].id == account_obj.account_id){",
									"                    isFound = true;",
									"                    console.log(\"debug: \", report_account[i]);",
									"                    pm.test(\"Account name correctly! \" + account_obj.name, function () {",
									"                        pm.expect(account_obj.name == report_account[i].name).to.be.true;",
									"                    });",
									"",
									"                    pm.test(\"account_type must be cash! \", function () {",
									"                        pm.expect(\"cash\" == report_account[i].account_type).to.be.true;",
									"                    });",
									"",
									"                    pm.test(\"open_amount must be \" + account_obj.open_amount, function () {",
									"                        pm.expect(account_obj.open_amount == report_account[i].open_amount).to.be.true;",
									"                    });",
									"",
									"                    pm.test(\"debit_amount must be \" + account_obj.open_amount, function () {",
									"                        pm.expect(account_obj.open_amount == report_account[i].debit_amount).to.be.true;",
									"                    });",
									"                    break;",
									"                }",
									"            }",
									"",
									"            pm.test(\"Found new payment account!\", function () {",
									"                pm.expect(isFound).to.be.true;",
									"            });",
									"",
									"            // update lại report account sau khi đã check",
									"            pm.environment.set(\"C-report_account\",report_account);",
									"",
									"            if(testcase == 6){",
									"                console.log(\"--- End Testsuite 61 ---\");",
									"                postman.setNextRequest(null);",
									"            } else {",
									"                testcase++;",
									"                pm.environment.set(\"C-testcase\",testcase);",
									"                postman.setNextRequest(\"create_payment_account\"); //create_payment_account",
									"            }",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get report cash_flow, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"// lấy full tháng hiện tại",
									"let today = new Date();",
									"let start_current_month = new Date(today.getFullYear(), today.getMonth(), 1);",
									"let end_current_month = new Date(today.getFullYear(), today.getMonth() + 1, 1);",
									"",
									"let current_period_start = start_current_month.toISOString();",
									"let current_period_end = end_current_month.toISOString();",
									"",
									"pm.environment.set(\"C-current_period_start\",current_period_start);",
									"pm.environment.set(\"C-current_period_end\",current_period_end);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"branch_id\": {{C-business_id}},\n    \"current_period_start\": \"{{C-current_period_start}}\",\n    \"current_period_end\": \"{{C-current_period_end}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finan_base_url}}/finan-ledger/api/v1/report/account",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"report",
								"account"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.request.headers.add({",
							" key: \"authorization\",",
							" value: \"Bearer \" + pm.environment.get(\"C-userToken\")",
							"});",
							"",
							"pm.request.headers.add({",
							" key: \"Content-Type\",",
							" value: \"application/json\"",
							"});"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	]
}