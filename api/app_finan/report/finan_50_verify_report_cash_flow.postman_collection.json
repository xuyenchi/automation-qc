{
	"info": {
		"_postman_id": "16f0260d-59f6-4d0f-bd68-009f50da72d4",
		"name": "finan_50_verify_report_cash_flow",
		"description": "### Testsuite: Verify report acccount receivable\n\nTestcase:\n\n1. Login with owner account\n2. Get data\n    1. contact / Get list contact => get all contact\n    2. invoice / Get list invoice => mapping invoice into contact list at 2.a\n    3. transaction / Get list transaction => mapping transaction into contact list at 2.a\n    4. posting / Get list posting => update contact_list\n3. Check data\n    \n    1. report / get cash flow => compare data\n        \n\n###### Note:",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33255019"
	},
	"item": [
		{
			"name": "authen",
			"item": [
				{
					"name": "verify_email_or_phone_number",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/**",
									" * currently, manual to create account pwd & use charles to get it",
									" * default pwd created: 21112007 (prod with default account & no need pwd)",
									" */",
									"",
									"let email = pm.environment.get(\"SER-email\");",
									"let phone_number = pm.environment.get(\"SER-phone_number\");",
									"",
									"console.log(\"--- Start Testsuite 15 ---\");",
									"let testcase = 1;",
									"",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let isPhone = true;",
									"",
									"let payload;",
									"if(isPhone){",
									"    console.log(\"login with phone_number: \" + phone_number);",
									"    payload = {",
									"        \"phone_number\": phone_number",
									"    }",
									"} else {",
									"    console.log(\"login with email: \" + email);",
									"    payload = {",
									"        \"email\": email",
									"    }",
									"}",
									"",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));",
									"pm.environment.set(\"C-testcase\",testcase);",
									"pm.environment.set(\"C-isPhone\",isPhone);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    let jsData = pm.response.json();",
									"",
									"    if(jsData.data.is_existed && jsData.data.has_password){",
									"        postman.setNextRequest(\"login_with_pwd\");",
									"    } else if(jsData.data.is_existed) {",
									"        console.log(\"This account doesn't create pwd, please manual create!!!\");",
									"        postman.setNextRequest(null);",
									"    } else {",
									"        console.log(\"Error:\", JSON.stringify(jsData));",
									"        console.log(\"THIS ACCOUNT IS NOT EXISTED IN SYSTEM, WILL MANUAL CREATE IT\");",
									"        postman.setNextRequest(null);",
									"    }",
									"} else {",
									"    console.log(\"Error, end test\");",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finan_base_url}}/finan-user/api/v1/auth/account/verify",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-user",
								"api",
								"v1",
								"auth",
								"account",
								"verify"
							]
						}
					},
					"response": []
				},
				{
					"name": "login_with_pwd",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// let crypto = require('crypto-js');",
									"",
									"// const algorithm = \"aes-256-gcm\";",
									"// const IV_LEN = 12;",
									"// const AUTH_TAG_LEN = 16;",
									"// const SECRET_KEY = \"7dQ0HwRI5okvwAK0WzxaW6ABFncjeu1E\";",
									"",
									"// function encrypt(message) {",
									"//   const iv = Buffer.from(crypto.randomBytes(IV_LEN));",
									"//   const cipher = crypto.createCipheriv(algorithm, SECRET_KEY, iv, {",
									"//     authTagLength: AUTH_TAG_LEN,",
									"//   });",
									"//   const encryptedData = Buffer.concat([cipher.update(message), cipher.final()]);",
									"//   const authTag = cipher.getAuthTag();",
									"//   const raw = Buffer.concat([iv, encryptedData, authTag]).toString(\"hex\");",
									"//   return raw;",
									"// }",
									"",
									"// const pwd = \"21112007\";",
									"// // var superSecretEncrypted = CryptoJS.AES.encrypt(pwd, SECRET_KEY);",
									"",
									"// let pwd_enc = encrypt(pwd);",
									"// console.log(\"pwd_enc: \" + pwd_enc);",
									"",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"let isPhone = pm.environment.get(\"C-isPhone\");",
									"",
									"let verify_payload = JSON.parse(pm.environment.get(\"C-payload\"));",
									"",
									"let payload;",
									"let version = pm.environment.get(\"x-current-version\");",
									"if(isPhone){",
									"    payload = {",
									"        \"phone_number\": verify_payload.phone_number,",
									"        \"pwd\": pm.environment.get(\"pwd\"),",
									"        \"platform\": \"gtapp\",",
									"        \"device_id\": \"C9102FC6-466C-4980-B795-A91A2FD7F97F\",",
									"        \"app_version\": version,",
									"        \"device_name\": \"iPhone\"",
									"    }",
									"} else {",
									"    payload = {",
									"        \"email\": verify_payload.email,",
									"        \"pwd\": pm.environment.get(\"pwd\"),",
									"        \"platform\": \"gtapp\",",
									"        \"device_id\": \"C9102FC6-466C-4980-B795-A91A2FD7F97F\",",
									"        \"app_version\": version,",
									"        \"device_name\": \"iPhone\"",
									"    }",
									"}",
									"console.log(\"debug: \", payload);",
									"",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    let jsData = pm.response.json();",
									"    // debug",
									"    // console.log(JSON.stringify(jsData));",
									"",
									"    let business_id = null;",
									"    try{",
									"        business_id = jsData.data.business_info.list_business[0].business_id;",
									"    } catch{",
									"        console.log(\"This is new user, must create business_id\");",
									"    }",
									"",
									"    let userToken = jsData.data.token;",
									"    pm.environment.set(\"C-userToken\",userToken);",
									"",
									"    if(business_id == null){",
									"        console.log(\"This user don't have store, please check & use another account\");",
									"        ",
									"        postman.setNextRequest(null);",
									"    } else {",
									"        let userRefreshToken = jsData.data.refresh_token;",
									"",
									"        let userInfo = {",
									"            \"role_name\":jsData.data.business_info.current_role.role_name,",
									"            \"is_owner\":jsData.data.business_info.current_role.is_owner,",
									"            \"user_name\":jsData.data.business_info.list_business[0].user_name,",
									"            \"business_id\":business_id",
									"        }",
									"",
									"        // show log",
									"        // console.log(\"userToken:\",userToken);",
									"        // console.log(\"userRefreshToken:\",userRefreshToken);",
									"        console.log(\"userInfo:\",JSON.stringify(userInfo));",
									"",
									"        pm.environment.set(\"C-userRefreshToken\",userRefreshToken);",
									"        pm.environment.set(\"C-userInfo\",userInfo);",
									"        pm.environment.set(\"C-business_id\",business_id); // business_id",
									"",
									"        let testcase = pm.environment.get(\"C-testcase\");",
									"        testcase++;",
									"        pm.environment.set(\"C-testcase\",testcase);",
									"        postman.setNextRequest(\"get_branch_id\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get Token, end test\");",
									"",
									"    // debug",
									"    let jsData = pm.response.json();",
									"    console.log(\"data:\",JSON.stringify(jsData));",
									"",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finan_base_url}}/finan-user/api/v1/auth/account/login",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-user",
								"api",
								"v1",
								"auth",
								"account",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_branch_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let branch_id = null;",
									"    try {",
									"        branch_id = jsData.data.id;",
									"    } catch {",
									"        console.log(\"Can't get branch_id\");",
									"    }",
									"",
									"    pm.test(\"Got branch_id\", function () {",
									"        pm.expect(branch_id != null).to.be.true;",
									"    });",
									"",
									"    if(branch_id != null){",
									"        pm.environment.set(\"C-business_id\",branch_id);",
									"        postman.setNextRequest(\"get_list_contact\"); // get_list_contact",
									"    } else {",
									"        postman.setNextRequest(null);",
									"    }",
									"} else {",
									"    console.log(\"Can't get Token, end test\", jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{finan_base_url}}/finan-business/api/v1/branch/detail/{{C-business_id}}",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-business",
								"api",
								"v1",
								"branch",
								"detail",
								"{{C-business_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "contact",
			"item": [
				{
					"name": "get_list_contact",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = JSON.parse(responseBody);",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let total_pages = jsData.meta.total_pages;",
									"    let page = pm.environment.get(\"C-page\");",
									"",
									"    let list_contact, old_list_contact;",
									"    switch(testcase){",
									"        case 2:",
									"            list_contact = pm.environment.get(\"C-list_contact\");",
									"            if(!list_contact){",
									"                list_contact = [];",
									"            }",
									"            break;",
									"        case 4:",
									"            old_list_contact = pm.environment.get(\"C-old_list_contact\");",
									"            if(!old_list_contact){",
									"                old_list_contact = pm.environment.get(\"C-list_contact\");",
									"                pm.environment.unset(\"C-list_contact\");",
									"                pm.environment.set(\"C-old_list_contact\",old_list_contact);",
									"            }",
									"",
									"            list_contact = pm.environment.get(\"C-list_contact\");",
									"            if(!list_contact){",
									"                list_contact = [];",
									"            }",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow\");",
									"            break;",
									"    }",
									"",
									"    for(let item in jsData.data){",
									"        if(jsData.data[item].debt_amount == null){",
									"            list_contact[list_contact.length] = {",
									"                \"contact_id\":jsData.data[item].id,",
									"                \"name\":jsData.data[item].name,",
									"                \"phone_number\":jsData.data[item].phone_number,",
									"                \"is_expired\":jsData.data[item].is_expired,",
									"                \"debt_amount\":0,",
									"                \"option\":jsData.data[item].option,",
									"                \"customer_point\":jsData.data[item].customer_point,",
									"                \"state\":jsData.data[item].state,",
									"                \"last_order\":jsData.data[item].last_order",
									"            }",
									"        } else {",
									"            list_contact[list_contact.length] = {",
									"                \"contact_id\":jsData.data[item].id,",
									"                \"name\":jsData.data[item].name,",
									"                \"phone_number\":jsData.data[item].phone_number,",
									"                \"is_expired\":jsData.data[item].is_expired,",
									"                \"debt_amount\":jsData.data[item].debt_amount",
									"                // \"option\":jsData.data[item].option,",
									"                // \"customer_point\":jsData.data[item].customer_point,",
									"                // \"state\":jsData.data[item].state,",
									"                // \"last_order\":jsData.data[item].last_order",
									"            }",
									"        }",
									"    }",
									"    pm.environment.set(\"C-list_contact\",list_contact);",
									"",
									"    if(page >= total_pages){",
									"        // must clear page & page_size",
									"        pm.environment.unset(\"C-page\");",
									"        pm.environment.unset(\"C-page_size\");",
									"",
									"        switch(testcase){",
									"            case 2:",
									"                pm.test(\"Got all contact! \" + list_contact.length, function () {",
									"                    pm.expect(list_contact.length > 0).to.be.true;",
									"                });",
									"",
									"                postman.setNextRequest(\"get_list_invoice\"); // get_list_invoice",
									"                break;",
									"            case 4:",
									"                let contact_obj = pm.environment.get(\"C-contact_obj\");",
									"",
									"                pm.test(\"Total contact increase 1\", function () {",
									"                    pm.expect(list_contact.length == old_list_contact.length + 1).to.be.true;",
									"                });",
									"",
									"                let isFound = false;",
									"                for(let i in jsData.data){",
									"                    if(jsData.data[i].id == contact_obj.contact_id){",
									"                        isFound = true;",
									"                        pm.test(\"name of contact correctly! \" + contact_obj.name, function () {",
									"                            pm.expect(contact_obj.name == jsData.data[i].name).to.be.true;",
									"                        });",
									"",
									"                        pm.test(\"phone_number of contact correctly! \" + contact_obj.phone_number, function () {",
									"                            pm.expect(contact_obj.phone_number == jsData.data[i].phone_number).to.be.true;",
									"                        });",
									"",
									"                        pm.test(\"email of contact correctly! \" + contact_obj.email, function () {",
									"                            pm.expect(contact_obj.email == jsData.data[i].email).to.be.true;",
									"                        });",
									"",
									"                        // pm.test(\"birthday of contact correctly! \" + contact_obj.birthday, function () {",
									"                        //     pm.expect(contact_obj.birthday == jsData.data[i].birthday).to.be.true;",
									"                        // });",
									"",
									"                        pm.test(\"gender of contact correctly! \" + contact_obj.gender, function () {",
									"                            pm.expect(contact_obj.gender == jsData.data[i].gender).to.be.true;",
									"                        });",
									"",
									"                        pm.test(\"address_info of contact correctly! \" + contact_obj.address_info, function () {",
									"                            pm.expect(contact_obj.address_info == jsData.data[i].address_info).to.be.true;",
									"                        });",
									"                        break;",
									"                    }",
									"                }",
									"",
									"                pm.test(\"Found new contact\", function () {",
									"                    pm.expect(isFound).to.be.true;",
									"                });",
									"",
									"                postman.setNextRequest(\"get_contact_detail\"); //get_contact_detail",
									"                break;",
									"            default:",
									"                console.log(\"Missing flow, end test\");",
									"                postman.setNextRequest(null);",
									"                break;",
									"        }",
									"    } else {",
									"        page++;",
									"        pm.environment.set(\"C-page\",page);",
									"",
									"        console.log(\"view next page (\" + page + \") to get more contact\");",
									"        postman.setNextRequest(\"seller_view_list_contact\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get list contact, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let page = pm.environment.get(\"C-page\");",
									"",
									"if(!page){",
									"    page = 1;",
									"    pm.environment.set(\"C-page\",page);",
									"",
									"    let page_size = 50;",
									"    pm.environment.set(\"C-page_size\",page_size);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{finan_base_url}}/finan-business/api/v1/contact/get-list?type=&search=&business_id={{C-business_id}}&page={{C-page}}&page_size={{C-page_size}}&sort=&option=&is_active=false",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-business",
								"api",
								"v1",
								"contact",
								"get-list"
							],
							"query": [
								{
									"key": "type",
									"value": ""
								},
								{
									"key": "search",
									"value": ""
								},
								{
									"key": "business_id",
									"value": "{{C-business_id}}"
								},
								{
									"key": "page",
									"value": "{{C-page}}"
								},
								{
									"key": "page_size",
									"value": "{{C-page_size}}"
								},
								{
									"key": "sort",
									"value": ""
								},
								{
									"key": "option",
									"value": ""
								},
								{
									"key": "state",
									"value": "complete",
									"description": "waiting_confirm,delivering,complete",
									"disabled": true
								},
								{
									"key": "is_active",
									"value": "false",
									"description": "true"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "invoice",
			"item": [
				{
					"name": "get_list_invoice",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ============================= random number between min and max",
									"function getRandomInt(min, max) {",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"",
									"// ============================= remove an element in array",
									"function removeElementInArray(array, element){",
									"  for(let i = 0; i < array.length; i++){",
									"    if(array[i] === element){",
									"      array.splice(i, 1);",
									"      i--;",
									"    }",
									"  }",
									"  return array;",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = JSON.parse(responseBody);",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let total_pages = 1;",
									"    try {",
									"        total_pages = jsData.meta.total_pages;",
									"    } catch {",
									"        console.log(\"currently, this branch with null data\");",
									"    }",
									"    let page = pm.environment.get(\"C-page\");",
									"",
									"    let list_invoice = pm.environment.get(\"C-list_invoice\");",
									"    if(!list_invoice){",
									"        list_invoice = [];",
									"    }",
									"",
									"    for(let item in jsData.data){",
									"        if(jsData.data[item].status == \"active\" && jsData.data[item].total_amount != 0){",
									"            list_invoice[list_invoice.length] = {",
									"                \"invoice_id\":jsData.data[item].id,",
									"                \"entry_code\":jsData.data[item].entry_code,",
									"                \"system_code\":jsData.data[item].system_code,",
									"                \"status\":jsData.data[item].status,",
									"                \"payment_status\":jsData.data[item].payment_status,",
									"                \"sub_total_amount\":jsData.data[item].sub_total_amount,",
									"                \"total_amount\":jsData.data[item].total_amount,",
									"                \"discount_amount\":jsData.data[item].discount_amount,",
									"                \"total_tax_amount\":jsData.data[item].total_tax_amount,",
									"                \"due_amount\":jsData.data[item].due_amount,",
									"                \"paid_amount\":jsData.data[item].paid_amount,",
									"                \"entry_type\":jsData.data[item].entry_type,",
									"                \"description\":jsData.data[item].description,",
									"                \"value_at\":jsData.data[item].value_at,",
									"                \"due_at\":jsData.data[item].due_at,",
									"                // \"send_at\":jsData.data[item].send_at,",
									"                \"account_id\":jsData.data[item].account_id,",
									"                \"tax_type\":jsData.data[item].tax_type,",
									"                \"email\":jsData.data[item].email,",
									"                \"payment_info\":jsData.data[item].payment_info,",
									"                \"contact_id\":jsData.data[item].contact_id,",
									"                \"contact_name\":jsData.data[item].contact_info.contact_name,",
									"                \"contact_phone\":jsData.data[item].contact_info.contact_phone",
									"            }",
									"        }",
									"    }",
									"    pm.environment.set(\"C-list_invoice\",list_invoice);",
									"",
									"    if(page >= total_pages){",
									"        // must clear page & page_size",
									"        pm.environment.unset(\"C-page\");",
									"        pm.environment.unset(\"C-page_size\");",
									"",
									"        pm.test(\"Got all valid invoice \" + list_invoice.length, function () {",
									"            pm.expect(list_invoice.length > 0).to.be.true;",
									"        });",
									"",
									"        let list_contact = pm.environment.get(\"C-list_contact\");",
									"        for(let i in list_contact){",
									"            for(let j in list_invoice){",
									"                if(list_contact[i].contact_id == list_invoice[j].contact_id){",
									"                    if(\"list_invoice\" in list_contact[i]){",
									"                        list_contact[i].list_invoice[list_contact[i].list_invoice.length] = {",
									"                            \"invoice_id\":list_invoice[j].invoice_id,",
									"                            \"entry_code\":list_invoice[j].entry_code,",
									"                            \"status\":list_invoice[j].status,",
									"                            \"payment_status\":list_invoice[j].payment_status,",
									"                            \"value_at\":list_invoice[j].value_at,",
									"                            \"total_amount\":list_invoice[j].total_amount,",
									"                            \"paid_amount\":list_invoice[j].paid_amount,",
									"                            \"due_amount\":list_invoice[j].due_amount",
									"                        }",
									"                    } else {",
									"                        list_contact[i].list_invoice = [];",
									"                        list_contact[i].list_invoice[0] = {",
									"                            \"invoice_id\":list_invoice[j].invoice_id,",
									"                            \"entry_code\":list_invoice[j].entry_code,",
									"                            \"status\":list_invoice[j].status,",
									"                            \"payment_status\":list_invoice[j].payment_status,",
									"                            \"value_at\":list_invoice[j].value_at,",
									"                            \"total_amount\":list_invoice[j].total_amount,",
									"                            \"paid_amount\":list_invoice[j].paid_amount,",
									"                            \"due_amount\":list_invoice[j].due_amount",
									"                        }",
									"                    }",
									"                }",
									"            }",
									"        }",
									"",
									"        let total_invoice = 0;",
									"        let count_customer_has_invoice = 0;",
									"        for(let i = 0; i < list_contact.length; i++){",
									"            if(\"list_invoice\" in list_contact[i]){",
									"                count_customer_has_invoice++;",
									"                total_invoice += list_contact[i].list_invoice.length;",
									"            } else {",
									"                list_contact.splice(i,1);",
									"                i--;",
									"            }",
									"        }",
									"        console.log(\"total_invoice: \" + total_invoice);",
									"        console.log(\"total contact has invoice: \" + count_customer_has_invoice);",
									"        // console.log(\"list_contact: \" + list_contact.length);",
									"",
									"        pm.environment.set(\"C-list_contact\",list_contact);",
									"",
									"        postman.setNextRequest(\"get_list_transaction\"); //get_list_transaction",
									"    } else {",
									"        page++;",
									"        pm.environment.set(\"C-page\",page);",
									"",
									"        console.log(\"view next page (\" + page + \") to get more invoice\");",
									"        postman.setNextRequest(\"get_list_invoice\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get list invoice, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let page = pm.environment.get(\"C-page\");",
									"",
									"if(!page){",
									"    page = 1;",
									"    pm.environment.set(\"C-page\",page);",
									"",
									"    let page_size = 50;",
									"    pm.environment.set(\"C-page_size\",page_size);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{finan_base_url}}/finan-ledger/api/v1/invoice/list?branch_id={{C-business_id}}&page={{C-page}}&page_size={{C-page_size}}",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"invoice",
								"list"
							],
							"query": [
								{
									"key": "branch_id",
									"value": "{{C-business_id}}"
								},
								{
									"key": "page",
									"value": "{{C-page}}"
								},
								{
									"key": "page_size",
									"value": "{{C-page_size}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "transaction",
			"item": [
				{
					"name": "get_list_transaction",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let page = pm.environment.get(\"C-page\");",
									"",
									"if(!page){",
									"    page = 1;",
									"    pm.environment.set(\"C-page\",page);",
									"",
									"    let page_size = 50;",
									"    pm.environment.set(\"C-page_size\",page_size);",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ============================= random number between min and max",
									"function getRandomInt(min, max) {",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = JSON.parse(responseBody);",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let total_pages = jsData.meta.total_pages;",
									"    let page = pm.environment.get(\"C-page\");",
									"",
									"    let list_tnx = pm.environment.get(\"C-list_tnx\");",
									"    if(!list_tnx){",
									"        list_tnx = [];",
									"    }",
									"",
									"    for(let item in jsData.data){",
									"        list_tnx[list_tnx.length] = {",
									"            \"tnx_id\":jsData.data[item].id,",
									"            \"amount\":jsData.data[item].amount,",
									"            \"txn_type\":jsData.data[item].txn_type,",
									"            \"value_at\":jsData.data[item].value_at,",
									"            \"contact_id\":jsData.data[item].contact_id,",
									"            \"object_type\":jsData.data[item].object_type,",
									"            \"object_key\":jsData.data[item].object_key",
									"        }",
									"    }",
									"    pm.environment.set(\"C-list_tnx\",list_tnx);",
									"",
									"    if(page >= total_pages){",
									"        // must clear page & page_size",
									"        pm.environment.unset(\"C-page\");",
									"        pm.environment.unset(\"C-page_size\");",
									"",
									"        pm.test(\"Got all valid tnx \" + list_tnx.length, function () {",
									"            pm.expect(list_tnx.length > 0).to.be.true;",
									"        });",
									"",
									"        let list_contact = pm.environment.get(\"C-list_contact\");",
									"        for(let i in list_contact){",
									"            for(let j in list_tnx){",
									"                if(list_contact[i].contact_id == list_tnx[j].contact_id){",
									"                    if(\"list_tnx\" in list_contact[i]){",
									"                        list_contact[i].list_tnx[list_contact[i].list_tnx.length] = {",
									"                            \"tnx_id\":list_tnx[j].tnx_id,",
									"                            \"amount\":list_tnx[j].amount,",
									"                            \"contact_id\":list_tnx[j].contact_id,",
									"                            \"txn_type\":list_tnx[j].txn_type,",
									"                            \"value_at\":list_tnx[j].value_at,",
									"                            \"object_type\":list_tnx[j].object_type,",
									"                            \"object_key\":list_tnx[j].object_key",
									"                        }",
									"                    } else {",
									"                        list_contact[i].list_tnx = [];",
									"                        list_contact[i].list_tnx[0] = {",
									"                            \"tnx_id\":list_tnx[j].tnx_id,",
									"                            \"amount\":list_tnx[j].amount,",
									"                            \"contact_id\":list_tnx[j].contact_id,",
									"                            \"txn_type\":list_tnx[j].txn_type,",
									"                            \"value_at\":list_tnx[j].value_at,",
									"                            \"object_type\":list_tnx[j].object_type,",
									"                            \"object_key\":list_tnx[j].object_key",
									"                        }",
									"                    }",
									"                }",
									"            }",
									"        }",
									"",
									"        let total_tnx = 0;",
									"        let count_customer_has_tnx = 0;",
									"        for(let i = 0; i < list_contact.length; i++){",
									"            if(\"list_tnx\" in list_contact[i]){",
									"                count_customer_has_tnx++;",
									"                total_tnx += list_contact[i].list_tnx.length;",
									"            } ",
									"            // else {",
									"            //     list_contact.splice(i,1);",
									"            //     i--;",
									"            // }",
									"        }",
									"        console.log(\"total_tnx: \" + total_tnx);",
									"        console.log(\"total contact has tnx: \" + count_customer_has_tnx);",
									"        console.log(\"list_contact: \",list_contact);",
									"",
									"        pm.environment.set(\"C-list_contact\",list_contact);",
									"",
									"        postman.setNextRequest(\"get_list_posting\"); //get_list_posting",
									"    } else {",
									"        page++;",
									"        pm.environment.set(\"C-page\",page);",
									"",
									"        console.log(\"view next page (\" + page + \") to get more tnx\");",
									"        postman.setNextRequest(\"get_list_transaction\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get list tnx, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{finan_base_url}}/finan-ledger/api/v1/transaction/list?branch_id={{C-business_id}}&page={{C-page}}&page_size={{C-page_size}}&sort",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"transaction",
								"list"
							],
							"query": [
								{
									"key": "branch_id",
									"value": "{{C-business_id}}"
								},
								{
									"key": "page",
									"value": "{{C-page}}"
								},
								{
									"key": "page_size",
									"value": "{{C-page_size}}"
								},
								{
									"key": "sort",
									"value": null
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.request.headers.add({",
							" key: \"authorization\",",
							" value: \"Bearer \" + pm.environment.get(\"C-userToken\")",
							"});",
							"",
							"pm.request.headers.add({",
							" key: \"Content-Type\",",
							" value: \"application/json\"",
							"});"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "posting",
			"item": [
				{
					"name": "get_list_posting",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let page = pm.environment.get(\"C-page\");",
									"",
									"if(!page){",
									"    page = 1;",
									"    pm.environment.set(\"C-page\",page);",
									"",
									"    let page_size = 50;",
									"    pm.environment.set(\"C-page_size\",page_size);",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"/**",
									" * object_type: transaction, invoice",
									" * object_id => id respective with object_type (tnx_id, invoice_id)",
									" * object_id_ref => use for invoice with product/item (product_id, item_id)",
									" * is_credit",
									" * created_at",
									" * value_at",
									" */",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = JSON.parse(responseBody);",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let total_pages = 1;",
									"    try {",
									"        total_pages = jsData.meta.total_pages;",
									"    } catch {",
									"        console.log(\"currently, this branch with null data\");",
									"    }",
									"    let page = pm.environment.get(\"C-page\");",
									"",
									"    let list_posting, old_list_posting;",
									"    switch(testcase){",
									"        case 2:",
									"            list_posting = pm.environment.get(\"C-list_posting\");",
									"            if(!list_posting){",
									"                list_posting = [];",
									"            }",
									"            break;",
									"        case 4:",
									"            old_list_posting = pm.environment.get(\"C-old_list_posting\");",
									"            if(!old_list_posting){",
									"                old_list_posting = pm.environment.get(\"C-list_posting\");",
									"                pm.environment.unset(\"C-list_posting\");",
									"                pm.environment.set(\"C-old_list_posting\",old_list_posting);",
									"            }",
									"",
									"            list_posting = pm.environment.get(\"C-list_posting\");",
									"            if(!list_posting){",
									"                list_posting = [];",
									"            }",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow\");",
									"            break;",
									"    }",
									"",
									"    for(let item in jsData.data){",
									"        list_posting[list_posting.length] = {",
									"            \"posting_id\":jsData.data[item].id,",
									"            \"object_type\":jsData.data[item].object_type,",
									"            \"object_id\":jsData.data[item].object_id,",
									"            \"value_at\":jsData.data[item].value_at,",
									"            \"account_id\":jsData.data[item].account_id,",
									"            \"is_credit\":jsData.data[item].is_credit,",
									"            \"amount\":jsData.data[item].amount",
									"        }",
									"    }",
									"    pm.environment.set(\"C-list_posting\",list_posting);",
									"",
									"    if(page >= total_pages){",
									"        // must clear page & page_size",
									"        pm.environment.unset(\"C-page\");",
									"        pm.environment.unset(\"C-page_size\");",
									"",
									"        switch(testcase){",
									"            case 2:",
									"                pm.test(\"Got all posting! \" + list_posting.length, function () {",
									"                    pm.expect(list_posting.length > 0).to.be.true;",
									"                });",
									"",
									"                // report account receivable paid => lấy theo start & end",
									"",
									"                // report account receivable unpaid => get all time",
									"",
									"                // report account receivable customer",
									"",
									"                postman.setNextRequest(\"get_report_cash_flow\"); // get_report_cash_flow",
									"                break;",
									"            case 4:",
									"                pm.test(\"Have 2 new records\", function () {",
									"                    pm.expect(list_posting.length == old_list_posting.length + 2).to.be.true;",
									"                });",
									"",
									"                let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"                let account_receivable = pm.environment.get(\"C-account_receivable\");",
									"                // console.log(\"account_receivable: \",account_receivable);",
									"                let count = 0;",
									"                let foundAll = false;",
									"                for(let i in list_posting){",
									"                    if(list_posting[i].object_type == \"transaction\" && list_posting[i].object_id == tnx_obj.tnx_id){",
									"                        // console.log(\"list_posting[i]: \", list_posting[i]);",
									"                        if(list_posting[i].is_credit){",
									"                            count++;",
									"                            pm.test(\"Found account_receivable for credit\", function () {",
									"                                pm.expect(list_posting[i].account_id == account_receivable.id).to.be.true;",
									"                                pm.environment.set(\"V-1\",account_receivable.id);",
									"                            });",
									"",
									"                            pm.test(\"--- amount correctly \" + tnx_obj.amount, function () {",
									"                                console.log(\"actual: \" + list_posting[i].amount);",
									"                                pm.expect(list_posting[i].amount.toFixed(2) == tnx_obj.amount.toFixed(2)).to.be.true;",
									"                                pm.environment.set(\"V-2\",list_posting[i].is_credit);",
									"                            }); ",
									"                        } else {",
									"                            count++;",
									"                            pm.test(\"Found account_debit for debit\", function () {",
									"                                // console.log(\"account_debit: \" + tnx_obj.account_debit);",
									"                                pm.expect(list_posting[i].account_id == tnx_obj.account_debit).to.be.true;",
									"                            });",
									"",
									"                            pm.test(\"--- amount correctly \" + tnx_obj.amount, function () {",
									"                                console.log(\"actual: \" + list_posting[i].amount);",
									"                                pm.expect(list_posting[i].amount.toFixed(2) == tnx_obj.amount.toFixed(2)).to.be.true;",
									"                            });",
									"                        }",
									"",
									"                        if(count == 2){",
									"                            foundAll = true;",
									"                            break;",
									"                        }",
									"                    }",
									"                }",
									"",
									"                pm.test(\"Found all posting\", function () {",
									"                    pm.expect(foundAll).to.be.true;",
									"                });",
									"",
									"                postman.setNextRequest(\"get_report_cash_flow\"); // get_report_cash_flow",
									"                break;",
									"            default:",
									"                console.log(\"Missing flow, end test\");",
									"                postman.setNextRequest(null);",
									"                break;",
									"        }",
									"    } else {",
									"        page++;",
									"        pm.environment.set(\"C-page\",page);",
									"",
									"        console.log(\"view next page (\" + page + \") to get more posting\");",
									"        postman.setNextRequest(\"get_list_posting\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get list posting, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{finan_base_url}}​/finan-ledger/api/v1/posting/list?branch_id={{C-business_id}}&page={{C-page}}&page_size={{C-page_size}}&search=&sort=",
							"host": [
								"{{finan_base_url}}​"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"posting",
								"list"
							],
							"query": [
								{
									"key": "branch_id",
									"value": "{{C-business_id}}"
								},
								{
									"key": "page",
									"value": "{{C-page}}"
								},
								{
									"key": "page_size",
									"value": "{{C-page_size}}"
								},
								{
									"key": "search",
									"value": ""
								},
								{
									"key": "sort",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.request.headers.add({",
							" key: \"authorization\",",
							" value: \"Bearer \" + pm.environment.get(\"C-userToken\")",
							"});",
							"",
							"pm.request.headers.add({",
							" key: \"Content-Type\",",
							" value: \"application/json\"",
							"});"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "report",
			"item": [
				{
					"name": "get_report_cash_flow",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"",
									"// lấy full tháng hiện tại",
									"let today = new Date();",
									"// let firstDay = new Date(today.getFullYear(), today.getMonth(), 1);",
									"let lastDay = new Date(today.getFullYear(), today.getMonth() + 1, 1);",
									"let previousLastDay = new Date(today.getFullYear(), today.getMonth(), 1);",
									"",
									"// lấy full n tháng trước",
									"let firstDay = new Date(today.getFullYear(), today.getMonth() - 3, 1);",
									"let previousFirstDay = new Date(today.getFullYear(), today.getMonth() - 4, 1);",
									"",
									"// let lastDay = new Date(today.getFullYear(), today.getMonth(), 1);",
									"",
									"// lấy full ngày hiện tại",
									"// let firstDay = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0 ,0, 0);",
									"// let lastDay = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 23, 59 ,59, 0);",
									"",
									"// lấy n ngày đến hiện tại",
									"// let firstDayTimestamp = Math.floor(firstDay.getTime()/1000) - 2*24*60*60;",
									"// let start_day_ago = new Date(firstDayTimestamp*1000);",
									"",
									"let start_time = firstDay.toISOString();",
									"let end_time = lastDay.toISOString();",
									"let previous_start_time = previousFirstDay.toISOString();",
									"let previous_end_time = previousLastDay.toISOString();",
									"",
									"console.log(\"start_time: \" + start_time);",
									"console.log(\"end_time: \" + end_time);",
									"console.log(\"previous_start_time: \" + previous_start_time);",
									"console.log(\"previous_end_time: \" + previous_end_time);",
									"",
									"pm.environment.set(\"C-start_time\",start_time);",
									"pm.environment.set(\"C-end_time\",end_time);",
									"pm.environment.set(\"C-previous_start_time\",previous_start_time);",
									"pm.environment.set(\"C-previous_end_time\",previous_end_time);",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let cash_flow_db_data = null;",
									"    let cash_flow_sum_card_data = null;",
									"    let cash_flow_top_income_categories_data = null;",
									"    let cash_flow_full_income_categories_data = null;",
									"    let cash_flow_top_expense_categories_data = null;",
									"    let cash_flow_full_expense_categories_data = null;",
									"    try {",
									"        cash_flow_db_data = jsData.data.db_data;",
									"        cash_flow_sum_card_data = jsData.data.sum_card_data;",
									"        cash_flow_top_income_categories_data = jsData.data.top_income_categories_data;",
									"        cash_flow_full_income_categories_data = jsData.data.full_income_categories_data;",
									"        cash_flow_top_expense_categories_data = jsData.data.top_expense_categories_data;",
									"        cash_flow_full_expense_categories_data = jsData.data.full_expense_categories_data;",
									"",
									"    } catch {",
									"        console.log(\"Can't get data\");",
									"    }",
									"",
									"    pm.test(\"Got cash_flow_db_data data\", function () {",
									"        pm.expect(cash_flow_db_data != null).to.be.true;",
									"    });",
									"    pm.environment.set(\"C-cash_flow_db_data\",cash_flow_db_data);",
									"    ",
									"    pm.test(\"Got cash_flow_sum_card_data data\", function () {",
									"        pm.expect(cash_flow_sum_card_data != null).to.be.true;",
									"    });",
									"    pm.environment.set(\"C-cash_flow_sum_card_data\",cash_flow_sum_card_data);",
									"",
									"     pm.test(\"Got cash_flow_top_income_categories_data data\", function () {",
									"        pm.expect(cash_flow_top_income_categories_data != null).to.be.true;",
									"    });",
									"    pm.environment.set(\"C-cash_flow_top_income_categories_data\",cash_flow_top_income_categories_data);",
									"    ",
									"        pm.test(\"Got cash_flow_full_income_categories_data data\", function () {",
									"        pm.expect(cash_flow_full_income_categories_data != null).to.be.true;",
									"    });",
									"    pm.environment.set(\"C-paid_account_receivable\",cash_flow_full_income_categories_data);",
									"    ",
									"     pm.test(\"Got cash_flow_top_expense_categories_data data\", function () {",
									"        pm.expect(cash_flow_top_expense_categories_data != null).to.be.true;",
									"    });",
									"    pm.environment.set(\"C-cash_flow_top_expense_categories_data\",cash_flow_top_expense_categories_data);",
									"    ",
									"        pm.test(\"Got cash_flow_full_expense_categories_data data\", function () {",
									"        pm.expect(cash_flow_full_expense_categories_data != null).to.be.true;",
									"    });",
									"    pm.environment.set(\"C-cash_flow_full_expense_categories_data\",cash_flow_full_expense_categories_data);",
									"",
									"",
									"    ",
									"    let total_current_income = 0;",
									"    let total_current_expense = 0;",
									"    let total_previous_income = 0;",
									"    let total_previous_expense = 0;",
									"",
									"    for(let i = 0; i < cash_flow_db_data.length; i++) {",
									"        total_current_income += cash_flow_db_data[i].current_income;",
									"        total_current_expense += cash_flow_db_data[i].current_expense;",
									"        total_previous_income += cash_flow_db_data[i].previous_income;",
									"        total_previous_expense += cash_flow_db_data[i].previous_expense;",
									"    }",
									"        pm.test(\"Check total_current_income\", function () {",
									"        pm.expect(total_current_income == cash_flow_sum_card_data.total_current_income).to.be.true;     ",
									"    });",
									"",
									"       pm.test(\"Check total_current_expense\", function () {",
									"        pm.expect(total_current_expense == cash_flow_sum_card_data.total_current_expense).to.be.true;      ",
									"    });  ",
									"",
									"    let total_current_gap = total_current_income - total_current_expense;",
									"    let total_previous_gap = total_previous_income - total_previous_expense;",
									"",
									"    pm.test(\"Check total_current_gap\", function () {",
									"    let epsilon = 0.001; // Độ chính xác chấp nhận được",
									"    let difference = Math.abs(total_current_gap - cash_flow_sum_card_data.total_current_gap);",
									"    pm.expect(difference).to.be.lessThan(epsilon); // So sánh sự chênh lệch với khoảng chấp nhận được",
									"    });",
									"",
									"",
									"    let percentage_period_income = (total_current_income / total_previous_income) * 100;",
									"    let percentage_period_expense = (total_current_expense / total_previous_expense) * 100;",
									"    let percentage_period_gap = (total_current_gap / total_previous_gap) * 100;",
									"",
									"pm.test(\"Check percentage_period_income\", function () {",
									"    let epsilon = 0.001; // Độ chính xác chấp nhận được",
									"    let difference = Math.abs(percentage_period_income - cash_flow_sum_card_data.percentage_period_income);",
									"    pm.expect(difference).to.be.lessThan(epsilon); // So sánh sự chênh lệch với khoảng chấp nhận được",
									"    console.log(\"percentage_period_income: \", percentage_period_income);",
									"    console.log(\"cash_flow_sum_card_data.percentage_period_income: \", cash_flow_sum_card_data.percentage_period_income);",
									"",
									"",
									"});",
									"",
									"pm.test(\"Check percentage_period_expense\", function () {",
									"    let epsilon = 0.001; // Độ chính xác chấp nhận được",
									"    let difference = Math.abs(percentage_period_expense - cash_flow_sum_card_data.percentage_period_expense);",
									"    pm.expect(difference).to.be.lessThan(epsilon); // So sánh sự chênh lệch với khoảng chấp nhận được",
									"});",
									"",
									"pm.test(\"Check percentage_period_gap\", function () {",
									"    let epsilon = 0.001; // Độ chính xác chấp nhận được",
									"    let difference = Math.abs(percentage_period_gap - cash_flow_sum_card_data.percentage_period_gap);",
									"    pm.expect(difference).to.be.lessThan(epsilon); // So sánh sự chênh lệch với khoảng chấp nhận được",
									"});",
									"",
									"",
									"} else {",
									"    console.log(\"Can't get report account receivable unpaid, end test\",",
									"    ",
									"    jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"branch_id\": {{C-business_id}},\n    \"current_period_start\": \"{{C-start_time}}\",\n    \"current_period_end\": \"{{C-end_time}}\",\n    \"previous_period_start\": \"{{C-previous_start_time}}\",\n    \"previous_period_end\": \"{{C-previous_end_time}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finan_base_url}}/finan-ledger/api/v1/report/cash-flow",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"report",
								"cash-flow"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.request.headers.add({",
							" key: \"authorization\",",
							" value: \"Bearer \" + pm.environment.get(\"C-userToken\")",
							"});",
							"",
							"pm.request.headers.add({",
							" key: \"Content-Type\",",
							" value: \"application/json\"",
							"});"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	]
}