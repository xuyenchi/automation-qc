{
	"info": {
		"_postman_id": "781f6fcd-cf74-4f3d-b426-55996a776036",
		"name": "finan_34_verify_to_create_new_product",
		"description": "### Testsuite: Verify to create new Product\n\n###### Testcase:\n\n1. Login with owner account\n2. Get data\n    1. Account / Get coa => get list expense_account & income_account\n    2. Tax / Get tax list => get all tax (rate > 0)\n    3. Product / Get list product => get total product\n3. Create customer\n    1. Unhappy case: null data (name\\*, price\\*, sku_code, expense_account_id, expense_taxes \\[list tax_id\\], income_account_id\\*, income_taxes \\[list tax_id\\])\n    2. Unhappy case: name = \"\"\n    3. Unhappy case: price = null\n    4. Unhappy case: price < 0\n    5. Happy case\n4. Check data\n    1. Product / Get list product => increase 1, matching data\n\n###### Note:\n\n- (\\*) required\n- sku_code missing rule => wait PO confirm\n- expense_account_id: Phân loại chi phí\n- income_account_id: Phân loại doanh thu\n- price: template xx.yyyy ?",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "282640"
	},
	"item": [
		{
			"name": "authen",
			"item": [
				{
					"name": "verify_email_or_phone_number",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/**",
									" * currently, manual to create account pwd & use charles to get it",
									" * default pwd created: 21112007 (prod with default account & no need pwd)",
									" */",
									"",
									"let email = pm.environment.get(\"SER-email\");",
									"let phone_number = pm.environment.get(\"SER-phone_number\");",
									"",
									"console.log(\"--- Start Testsuite 34 ---\");",
									"let testcase = 1;",
									"",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let isPhone = true;",
									"",
									"let payload;",
									"if(isPhone){",
									"    console.log(\"login with phone_number: \" + phone_number);",
									"    payload = {",
									"        \"phone_number\": phone_number",
									"    }",
									"} else {",
									"    console.log(\"login with email: \" + email);",
									"    payload = {",
									"        \"email\": email",
									"    }",
									"}",
									"",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));",
									"pm.environment.set(\"C-testcase\",testcase);",
									"pm.environment.set(\"C-isPhone\",isPhone);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    let jsData = pm.response.json();",
									"",
									"    if(jsData.data.is_existed && jsData.data.has_password){",
									"        postman.setNextRequest(\"login_with_pwd\");",
									"    } else if(jsData.data.is_existed) {",
									"        console.log(\"This account doesn't create pwd, please manual create!!!\");",
									"        postman.setNextRequest(null);",
									"    } else {",
									"        console.log(\"Error:\", JSON.stringify(jsData));",
									"        console.log(\"THIS ACCOUNT IS NOT EXISTED IN SYSTEM, WILL MANUAL CREATE IT\");",
									"        postman.setNextRequest(null);",
									"    }",
									"} else {",
									"    console.log(\"Error, end test\");",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finan_base_url}}/finan-user/api/v1/auth/account/verify",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-user",
								"api",
								"v1",
								"auth",
								"account",
								"verify"
							]
						}
					},
					"response": []
				},
				{
					"name": "login_with_pwd",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// let crypto = require('crypto-js');",
									"",
									"// const algorithm = \"aes-256-gcm\";",
									"// const IV_LEN = 12;",
									"// const AUTH_TAG_LEN = 16;",
									"// const SECRET_KEY = \"7dQ0HwRI5okvwAK0WzxaW6ABFncjeu1E\";",
									"",
									"// function encrypt(message) {",
									"//   const iv = Buffer.from(crypto.randomBytes(IV_LEN));",
									"//   const cipher = crypto.createCipheriv(algorithm, SECRET_KEY, iv, {",
									"//     authTagLength: AUTH_TAG_LEN,",
									"//   });",
									"//   const encryptedData = Buffer.concat([cipher.update(message), cipher.final()]);",
									"//   const authTag = cipher.getAuthTag();",
									"//   const raw = Buffer.concat([iv, encryptedData, authTag]).toString(\"hex\");",
									"//   return raw;",
									"// }",
									"",
									"// const pwd = \"21112007\";",
									"// // var superSecretEncrypted = CryptoJS.AES.encrypt(pwd, SECRET_KEY);",
									"",
									"// let pwd_enc = encrypt(pwd);",
									"// console.log(\"pwd_enc: \" + pwd_enc);",
									"",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"let isPhone = pm.environment.get(\"C-isPhone\");",
									"",
									"let verify_payload = JSON.parse(pm.environment.get(\"C-payload\"));",
									"",
									"let payload;",
									"let version = pm.environment.get(\"x-current-version\");",
									"if(isPhone){",
									"    payload = {",
									"        \"phone_number\": verify_payload.phone_number,",
									"        \"pwd\": pm.environment.get(\"pwd\"),",
									"        \"platform\": \"gtapp\",",
									"        \"device_id\": \"C9102FC6-466C-4980-B795-A91A2FD7F97F\",",
									"        \"app_version\": version,",
									"        \"device_name\": \"iPhone\"",
									"    }",
									"} else {",
									"    payload = {",
									"        \"email\": verify_payload.email,",
									"        \"pwd\": pm.environment.get(\"pwd\"),",
									"        \"platform\": \"gtapp\",",
									"        \"device_id\": \"C9102FC6-466C-4980-B795-A91A2FD7F97F\",",
									"        \"app_version\": version,",
									"        \"device_name\": \"iPhone\"",
									"    }",
									"}",
									"console.log(\"debug: \", payload);",
									"",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    let jsData = pm.response.json();",
									"    // debug",
									"    // console.log(JSON.stringify(jsData));",
									"",
									"    let business_id = null;",
									"    try{",
									"        business_id = jsData.data.business_info.list_business[0].business_id;",
									"    } catch{",
									"        console.log(\"This is new user, must create business_id\");",
									"    }",
									"",
									"    let userToken = jsData.data.token;",
									"    pm.environment.set(\"C-userToken\",userToken);",
									"",
									"    if(business_id == null){",
									"        console.log(\"This user don't have store, please check & use another account\");",
									"        ",
									"        postman.setNextRequest(null);",
									"    } else {",
									"        let userRefreshToken = jsData.data.refresh_token;",
									"",
									"        let userInfo = {",
									"            \"role_name\":jsData.data.business_info.current_role.role_name,",
									"            \"is_owner\":jsData.data.business_info.current_role.is_owner,",
									"            \"user_name\":jsData.data.business_info.list_business[0].user_name,",
									"            \"business_id\":business_id",
									"        }",
									"",
									"        // show log",
									"        // console.log(\"userToken:\",userToken);",
									"        // console.log(\"userRefreshToken:\",userRefreshToken);",
									"        console.log(\"userInfo:\",JSON.stringify(userInfo));",
									"",
									"        pm.environment.set(\"C-userRefreshToken\",userRefreshToken);",
									"        pm.environment.set(\"C-userInfo\",userInfo);",
									"        pm.environment.set(\"C-business_id\",business_id); // business_id",
									"",
									"        let testcase = pm.environment.get(\"C-testcase\");",
									"        testcase++;",
									"        pm.environment.set(\"C-testcase\",testcase);",
									"        postman.setNextRequest(\"get_branch_id\"); // get_branch_id",
									"    }",
									"} else {",
									"    console.log(\"Can't get Token, end test\");",
									"",
									"    // debug",
									"    let jsData = pm.response.json();",
									"    console.log(\"data:\",JSON.stringify(jsData));",
									"",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finan_base_url}}/finan-user/api/v1/auth/account/login",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-user",
								"api",
								"v1",
								"auth",
								"account",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_branch_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let branch_id = null;",
									"    try {",
									"        branch_id = jsData.data.id;",
									"    } catch {",
									"        console.log(\"Can't get branch_id\");",
									"    }",
									"",
									"    pm.test(\"Got branch_id\", function () {",
									"        pm.expect(branch_id != null).to.be.true;",
									"    });",
									"",
									"    if(branch_id != null){",
									"        pm.environment.set(\"C-business_id\",branch_id);",
									"        postman.setNextRequest(\"get_list_internal_account\"); // get_list_internal_account",
									"    } else {",
									"        postman.setNextRequest(null);",
									"    }",
									"} else {",
									"    console.log(\"Can't get Token, end test\", jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{finan_base_url}}/finan-business/api/v1/branch/detail/{{C-business_id}}",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-business",
								"api",
								"v1",
								"branch",
								"detail",
								"{{C-business_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "account",
			"item": [
				{
					"name": "get_list_internal_account",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"",
									"    let list_income_account = [];",
									"    let list_expense_account = [];",
									"    for(let i in jsData.data){",
									"        for(let j in jsData.data[i].sub_group){",
									"            for(let k in jsData.data[i].sub_group[j].accounts){",
									"                switch(jsData.data[i].value){",
									"                    case \"income\":",
									"                        // list_income_account",
									"                        list_income_account[list_income_account.length] = {",
									"                            \"account_name\":jsData.data[i].sub_group[j].accounts[k].name,",
									"                            \"account_id\":jsData.data[i].sub_group[j].accounts[k].id,",
									"                            \"group_name\":jsData.data[i].sub_group[j].accounts[k].group_name,",
									"                            \"sub_group_name\":jsData.data[i].sub_group[j].accounts[k].sub_name,",
									"                            \"branch_id\":jsData.data[i].sub_group[j].accounts[k].branch_id,",
									"                            \"displays_id\":jsData.data[i].sub_group[j].accounts[k].displays_id,",
									"                            \"account_source\":jsData.data[i].sub_group[j].accounts[k].account_source,",
									"                            \"account_type\":jsData.data[i].sub_group[j].accounts[k].account_type,",
									"                            \"account_code\":jsData.data[i].sub_group[j].accounts[k].account_code,",
									"                            \"coa_type\":jsData.data[i].sub_group[j].accounts[k].coa_type,",
									"                            \"sub_coa_deepest\":jsData.data[i].sub_group[j].accounts[k].sub_coa_deepest,",
									"                            \"name_en\":jsData.data[i].sub_group[j].accounts[k].name_en,",
									"                            \"status\":jsData.data[i].sub_group[j].accounts[k].status,",
									"                            \"parent_id\":jsData.data[i].sub_group[j].accounts[k].parent_id,",
									"                            \"description\":jsData.data[i].sub_group[j].accounts[k].description,",
									"                            \"open_amount\":jsData.data[i].sub_group[j].accounts[k].open_amount,",
									"                            \"currency\":jsData.data[i].sub_group[j].accounts[k].currency",
									"                            // \"opening_at\":jsData.data[i].sub_group[j].accounts[k].opening_at",
									"                            // \"closing_at\":jsData.data[i].sub_group[j].accounts[k].closing_at",
									"                        }",
									"                        break;",
									"                    case \"expense\":",
									"                        // list_expense_account",
									"                        list_expense_account[list_expense_account.length] = {",
									"                            \"account_name\":jsData.data[i].sub_group[j].accounts[k].name,",
									"                            \"account_id\":jsData.data[i].sub_group[j].accounts[k].id,",
									"                            \"group_name\":jsData.data[i].sub_group[j].accounts[k].group_name,",
									"                            \"sub_group_name\":jsData.data[i].sub_group[j].accounts[k].sub_name,",
									"                            \"branch_id\":jsData.data[i].sub_group[j].accounts[k].branch_id,",
									"                            \"displays_id\":jsData.data[i].sub_group[j].accounts[k].displays_id,",
									"                            \"account_source\":jsData.data[i].sub_group[j].accounts[k].account_source,",
									"                            \"account_type\":jsData.data[i].sub_group[j].accounts[k].account_type,",
									"                            \"account_code\":jsData.data[i].sub_group[j].accounts[k].account_code,",
									"                            \"coa_type\":jsData.data[i].sub_group[j].accounts[k].coa_type,",
									"                            \"sub_coa_deepest\":jsData.data[i].sub_group[j].accounts[k].sub_coa_deepest,",
									"                            \"name_en\":jsData.data[i].sub_group[j].accounts[k].name_en,",
									"                            \"status\":jsData.data[i].sub_group[j].accounts[k].status,",
									"                            \"parent_id\":jsData.data[i].sub_group[j].accounts[k].parent_id,",
									"                            \"description\":jsData.data[i].sub_group[j].accounts[k].description,",
									"                            \"open_amount\":jsData.data[i].sub_group[j].accounts[k].open_amount,",
									"                            \"currency\":jsData.data[i].sub_group[j].accounts[k].currency",
									"                            // \"opening_at\":jsData.data[i].sub_group[j].accounts[k].opening_at",
									"                            // \"closing_at\":jsData.data[i].sub_group[j].accounts[k].closing_at",
									"                        }",
									"                        break;",
									"                    default:",
									"                        break;",
									"                }",
									"            }",
									"        }",
									"    }",
									"",
									"    switch(testcase){",
									"        case 2:",
									"            pm.test(\"Got list_income_account of this user's branch\", function () {",
									"                pm.expect(list_income_account != null).to.be.true;",
									"            });",
									"",
									"            pm.test(\"Got list_expense_account of this user's branch\", function () {",
									"                pm.expect(list_expense_account != null).to.be.true;",
									"            });",
									"",
									"            if(list_income_account != null && list_expense_account != null){",
									"                pm.environment.set(\"C-list_income_account\",list_income_account);",
									"                // console.log(\"list_income_account: \", list_income_account);",
									"                pm.environment.set(\"C-list_expense_account\",list_expense_account);",
									"                // console.log(\"list_expense_account: \", list_expense_account);",
									"",
									"                postman.setNextRequest(\"get_list_tax\"); // get_list_tax",
									"            } else {",
									"                console.log(\"Can't get list_income_account or list_expense_account, end test \");",
									"                postman.setNextRequest(null);",
									"            }",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get list internal account, end test \", jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{finan_base_url}}​/finan-ledger/api/v1/account/list?branch_id={{C-business_id}}&coa_type=",
							"host": [
								"{{finan_base_url}}​"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"account",
								"list"
							],
							"query": [
								{
									"key": "branch_id",
									"value": "{{C-business_id}}"
								},
								{
									"key": "coa_type",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "tax",
			"item": [
				{
					"name": "get_list_tax",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = JSON.parse(responseBody);",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let total_pages = jsData.meta.total_pages;",
									"    let page = pm.environment.get(\"C-page\");",
									"",
									"    let list_tax = pm.environment.get(\"C-list_tax\");",
									"    if(!list_tax){",
									"        list_tax = [];",
									"    }",
									"",
									"    for(let item in jsData.data){",
									"        if(jsData.data[item].description.includes(\"[API]\")){",
									"            list_tax[list_tax.length] = {",
									"                \"tax_id\":jsData.data[item].id,",
									"                \"name\":jsData.data[item].name,",
									"                \"rate\":jsData.data[item].rate,",
									"                \"account_id\":jsData.data[item].account_id,",
									"                \"description\":jsData.data[item].description",
									"            }",
									"        }",
									"    }",
									"    pm.environment.set(\"C-list_tax\",list_tax);",
									"    console.log(\"debug: \", list_tax);",
									"",
									"    if(page >= total_pages){",
									"        // must clear page & page_size",
									"        pm.environment.unset(\"C-page\");",
									"        pm.environment.unset(\"C-page_size\");",
									"",
									"        pm.test(\"Got all tax! \" + list_tax.length, function () {",
									"            pm.expect(list_tax.length > 0).to.be.true;",
									"        });",
									"",
									"        postman.setNextRequest(\"get_list_product\"); // get_list_product",
									"    } else {",
									"        page++;",
									"        pm.environment.set(\"C-page\",page);",
									"",
									"        console.log(\"view next page (\" + page + \") to get more tax\");",
									"        postman.setNextRequest(\"get_list_tax\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get list tax, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let page = pm.environment.get(\"C-page\");",
									"",
									"if(!page){",
									"    page = 1;",
									"    pm.environment.set(\"C-page\",page);",
									"",
									"    let page_size = 50;",
									"    pm.environment.set(\"C-page_size\",page_size);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{finan_base_url}}/finan-ledger/api/v1/tax/list?branch_id={{C-business_id}}&page={{C-page}}&page_size={{C-page_size}}&option=&status=",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"tax",
								"list"
							],
							"query": [
								{
									"key": "branch_id",
									"value": "{{C-business_id}}"
								},
								{
									"key": "page",
									"value": "{{C-page}}"
								},
								{
									"key": "page_size",
									"value": "{{C-page_size}}"
								},
								{
									"key": "option",
									"value": ""
								},
								{
									"key": "status",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "product",
			"item": [
				{
					"name": "get_list_product",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let page = pm.environment.get(\"C-page\");",
									"",
									"if(!page){",
									"    page = 1;",
									"    pm.environment.set(\"C-page\",page);",
									"",
									"    let page_size = 50;",
									"    pm.environment.set(\"C-page_size\",page_size);",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = JSON.parse(responseBody);",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let total_pages = jsData.meta.total_pages;",
									"    let page = pm.environment.get(\"C-page\");",
									"",
									"    let list_product, old_list_product;",
									"    switch(testcase){",
									"        case 2:",
									"            list_product = pm.environment.get(\"C-list_product\");",
									"            if(!list_product){",
									"                list_product = [];",
									"            }",
									"            break;",
									"        case 4:",
									"            old_list_product = pm.environment.get(\"C-old_list_product\");",
									"            if(!old_list_product){",
									"                old_list_product = pm.environment.get(\"C-list_product\");",
									"                pm.environment.unset(\"C-list_product\");",
									"                pm.environment.set(\"C-old_list_product\",old_list_product);",
									"            }",
									"",
									"            list_product = pm.environment.get(\"C-list_product\");",
									"            if(!list_product){",
									"                list_product = [];",
									"            }",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow\");",
									"            break;",
									"    }",
									"",
									"    for(let item in jsData.data){",
									"        list_product[list_product.length] = {",
									"            \"product_id\":jsData.data[item].id,",
									"            \"account_id\":jsData.data[item].account_id,",
									"            \"amount\":jsData.data[item].amount,",
									"            \"branch_id\":jsData.data[item].branch_id,",
									"            \"created_at\":jsData.data[item].created_at,",
									"            \"currency\":jsData.data[item].currency,",
									"            \"deleted_at\":jsData.data[item].deleted_at,",
									"            \"is_credit\":jsData.data[item].is_credit,",
									"            \"is_final_status\":jsData.data[item].is_final_status,",
									"            \"object_id_ref\":jsData.data[item].object_id_ref,",
									"            \"object_type\":jsData.data[item].object_type,",
									"            \"value_at\":jsData.data[item].value_at,",
									"            \"short_desc\":jsData.data[item].short_desc",
									"        }",
									"    }",
									"    pm.environment.set(\"C-list_product\",list_product);",
									"",
									"    if(page >= total_pages){",
									"        // must clear page & page_size",
									"        pm.environment.unset(\"C-page\");",
									"        pm.environment.unset(\"C-page_size\");",
									"",
									"        switch(testcase){",
									"            case 2:",
									"                pm.test(\"Got all product! \" + list_product.length, function () {",
									"                    pm.expect(list_product.length > 0).to.be.true;",
									"                });",
									"",
									"                testcase++;",
									"                pm.environment.set(\"C-testcase\",testcase);",
									"                postman.setNextRequest(\"create_product\"); // create_product",
									"                break;",
									"            case 4:",
									"                let product_obj = pm.environment.get(\"C-product_obj\");",
									"",
									"                pm.test(\"Total product increase 1\", function () {",
									"                    pm.expect(list_product.length == old_list_product.length + 1).to.be.true;",
									"                });",
									"",
									"                let isFound = false;",
									"                for(let i in jsData.data){",
									"                    if(jsData.data[i].id == product_obj.product_id){",
									"                        isFound = true;",
									"                        pm.test(\"name of product correctly! \" + product_obj.name, function () {",
									"                            pm.expect(product_obj.name == jsData.data[i].name).to.be.true;",
									"                        });",
									"",
									"                        pm.test(\"price of product correctly! \" + product_obj.price, function () {",
									"                            pm.expect(product_obj.price == jsData.data[i].price).to.be.true;",
									"                        });",
									"",
									"                        pm.test(\"sku_code of product correctly! \" + product_obj.sku_code, function () {",
									"                            pm.expect(product_obj.sku_code == jsData.data[i].sku_code).to.be.true;",
									"                        });",
									"",
									"                        pm.test(\"income_account_id of product correctly! \" + product_obj.income_account_id, function () {",
									"                            pm.expect(product_obj.income_account_id == jsData.data[i].income_account_id).to.be.true;",
									"                        });",
									"",
									"                        console.log(\"debug income_taxes: \", jsData.data[i].income_taxes);",
									"                        let act_income_taxes = [];",
									"                        for(let j in  jsData.data[i].income_taxes){",
									"                            act_income_taxes[act_income_taxes.length] = jsData.data[i].income_taxes[j].tax_id;",
									"                        }",
									"                        pm.test(\"income_taxes of product correctly! \" + product_obj.income_taxes, function () {",
									"                            pm.expect(JSON.stringify(product_obj.income_taxes) == JSON.stringify(act_income_taxes)).to.be.true;",
									"                        });",
									"                        break;",
									"                    }",
									"                }",
									"",
									"                pm.test(\"Found new product\", function () {",
									"                    pm.expect(isFound).to.be.true;",
									"                });",
									"",
									"                console.log(\"--- Start Testsuite 34 ---\");",
									"                postman.setNextRequest(null);",
									"                break;",
									"            default:",
									"                console.log(\"Missing flow, end test\");",
									"                postman.setNextRequest(null);",
									"                break;",
									"        }",
									"    } else {",
									"        page++;",
									"        pm.environment.set(\"C-page\",page);",
									"",
									"        console.log(\"view next page (\" + page + \") to get more product\");",
									"        postman.setNextRequest(\"get_list_product\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get list product, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{finan_base_url}}/finan-ledger/api/v1/product/list?branch_id={{C-business_id}}&page={{C-page}}&page_size={{C-page_size}}&search=&sort=",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"product",
								"list"
							],
							"query": [
								{
									"key": "branch_id",
									"value": "{{C-business_id}}"
								},
								{
									"key": "page",
									"value": "{{C-page}}"
								},
								{
									"key": "page_size",
									"value": "{{C-page_size}}"
								},
								{
									"key": "search",
									"value": ""
								},
								{
									"key": "sort",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "create_product",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/**",
									" *  =============================  func randNotDupe(min, max, total)",
									" * total: số lượng random, ko dc nhỏ hơn max-min+1",
									" * return: array",
									" */",
									"function randNotDupe(min, max, total){",
									"  let arrNum = []; // new empty array",
									"  let n, p;",
									"  for (let i = 0; i < total; i++) {",
									"    do {",
									"      n = Math.floor(Math.random() * (max - min + 1)) + min;",
									"      p = arrNum.includes(n);",
									"      if(!p){",
									"        arrNum.push(n);",
									"      }",
									"    }",
									"    while(p);",
									"  }",
									"  return arrNum;",
									"}",
									"",
									"// ============================= random number between min and max",
									"function getRandomInt(min, max) {",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"",
									"// ============================= random number between min and max",
									"function getRandomInt(min, max) {",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"",
									"// ============================= random characters",
									"function randomChars(length) {",
									"    var result           = '';",
									"    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
									"    var charactersLength = characters.length;",
									"    for ( var i = 0; i < length; i++ ) {",
									"      result += characters.charAt(Math.floor(Math.random() * charactersLength));",
									"   }",
									"   return result;",
									"}",
									"",
									"/**",
									" * income_account_id: Phân loại doanh thu => group = \"income\"",
									" * expense_account_id: Phân loại chi phí => group = \"expense\"",
									" */",
									"",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"let case_ = pm.environment.get(\"C-case_\");",
									"if(!case_){",
									"    case_ = 1;",
									"    pm.environment.set(\"C-case_\",case_);",
									"}",
									"console.log(\"Testcase: \" + testcase + \".\" + case_);",
									"",
									"let today = new Date();",
									"let next_date_stp = Math.floor(today.getTime()/1000) + 24*60*60;",
									"let next_date = new Date(next_date_stp*1000);",
									"",
									"let list_income_account = pm.environment.get(\"C-list_income_account\");",
									"// console.log(\"debug list_income_account: \", list_income_account);",
									"let list_expense_account = pm.environment.get(\"C-list_expense_account\");",
									"let list_tax = pm.environment.get(\"C-list_tax\");",
									"// console.log(\"debug list_tax: \", list_tax);",
									"",
									"let income_account_id, expense_account_id, price;",
									"let sku_code, name, expense_taxes = [], income_taxes = [];",
									"switch(case_){",
									"    case 1:",
									"        console.log(\"Unhappy case: income_account_id = null & expense_account_id = null\");",
									"        income_account_id = \"\";",
									"        expense_account_id = \"\";",
									"        price = getRandomInt(10,50)*1000;",
									"        sku_code = randomChars(8);",
									"        name = \"[API] Product \" + sku_code;",
									"        break;",
									"    case 2:",
									"        console.log(\"Unhappy case: name = ''\");",
									"        income_account_id = list_income_account[getRandomInt(0,list_income_account.length -  1)].account_id;",
									"        expense_account_id = \"\";",
									"        price = getRandomInt(10,50)*1000;",
									"        sku_code = randomChars(8);",
									"        name = \"\";",
									"        break;",
									"    case 3:",
									"        console.log(\"Unhappy case: price = null\");",
									"        income_account_id = list_income_account[getRandomInt(0,list_income_account.length -  1)].account_id;",
									"        expense_account_id = \"\";",
									"        price = \"\";",
									"        sku_code = randomChars(8);",
									"        name = \"[API] Product \" + sku_code;",
									"        break;",
									"    case 4:",
									"        console.log(\"Unhappy case: price < 0\");",
									"        income_account_id = list_income_account[getRandomInt(0,list_income_account.length -  1)].account_id;",
									"        expense_account_id = \"\";",
									"        price = -getRandomInt(10,50)*1000;",
									"        sku_code = randomChars(8);",
									"        name = \"[API] Product \" + sku_code;",
									"        break;",
									"    case 5:",
									"        console.log(\"Happy case\");",
									"        income_account_id = list_income_account[getRandomInt(0,list_income_account.length -  1)].account_id;",
									"        let randTotalTax = getRandomInt(1,3);",
									"        let randListPos = randNotDupe(0,list_tax.length - 1,randTotalTax);",
									"        for(let i in randListPos){",
									"            income_taxes[income_taxes.length] = list_tax[randListPos[i]].tax_id;",
									"        }",
									"        expense_account_id = null;",
									"        expense_taxes = [];",
									"        price = getRandomInt(10,50)*1000;",
									"        sku_code = randomChars(8);",
									"        name = \"[API] Product \" + sku_code;",
									"        break;",
									"    default:",
									"        console.log(\"Missing flow\");",
									"        break;",
									"}",
									"",
									"let payload = {",
									"    \"branch_id\":parseInt(pm.environment.get(\"C-business_id\")),",
									"    \"business_id\":\"\",",
									"    \"expense_account_id\":expense_account_id,",
									"    \"expense_taxes\":expense_taxes,",
									"    \"income_account_id\":income_account_id,",
									"    \"income_taxes\":income_taxes,",
									"    \"price\":price,",
									"    \"name\":name,",
									"    \"sku_code\":sku_code",
									"}",
									"",
									"console.log(\"payload: \",payload);",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));",
									"pm.environment.set(\"C-product_obj\",payload);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"let case_ = pm.environment.get(\"C-case_\");",
									"",
									"let jsData = pm.response.json();",
									"switch(case_){",
									"    case 1: case 2: case 3: case 4:",
									"        pm.test(\"Status code is 400\", function () {",
									"            pm.response.to.have.status(400);",
									"        });",
									"",
									"        console.log(\"Error: \", jsData);",
									"",
									"        case_ = 5;",
									"        // case_++;",
									"        pm.environment.set(\"C-case_\",case_);",
									"        postman.setNextRequest(\"create_product\");",
									"        break;",
									"    case 5:",
									"        console.log(\"debug: \" + JSON.stringify(jsData));",
									"        pm.test(\"Status code is 200\", function () {",
									"            pm.response.to.have.status(200);",
									"        });",
									"",
									"        pm.environment.unset(\"C-case_\");",
									"        let product_obj = pm.environment.get(\"C-product_obj\");",
									"",
									"        // update product_id for product_obj",
									"        product_obj.product_id = jsData.data.id;",
									"",
									"        pm.test(\"name of product correctly! \" + product_obj.name, function () {",
									"            pm.expect(product_obj.name == jsData.data.name).to.be.true;",
									"        });",
									"",
									"        pm.test(\"price of product correctly! \" + product_obj.price, function () {",
									"            pm.expect(product_obj.price == jsData.data.price).to.be.true;",
									"        });",
									"",
									"        pm.test(\"sku_code of product correctly! \" + product_obj.sku_code, function () {",
									"            pm.expect(product_obj.sku_code == jsData.data.sku_code).to.be.true;",
									"        });",
									"",
									"        pm.test(\"income_account_id of product correctly! \" + product_obj.income_account_id, function () {",
									"            pm.expect(product_obj.income_account_id == jsData.data.income_account_id).to.be.true;",
									"        });",
									"",
									"        let act_income_taxes = [];",
									"        for(let i in  jsData.data.income_taxes){",
									"            act_income_taxes[act_income_taxes.length] = jsData.data.income_taxes[i].tax_id;",
									"        }",
									"        pm.test(\"income_taxes of product correctly! \" + product_obj.income_taxes, function () {",
									"            pm.expect(JSON.stringify(product_obj.income_taxes) == JSON.stringify(act_income_taxes)).to.be.true;",
									"        });",
									"",
									"        testcase++;",
									"        pm.environment.set(\"C-testcase\",testcase);",
									"        pm.environment.set(\"C-product_obj\",product_obj);",
									"        postman.setNextRequest(\"get_list_product\"); // get_list_product",
									"        break;",
									"    default:",
									"        console.log(\"missing flow, end test\");",
									"        postman.setNextRequest(null);",
									"        break;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finan_base_url}}/finan-ledger/api/v1/product/create",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"product",
								"create"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}