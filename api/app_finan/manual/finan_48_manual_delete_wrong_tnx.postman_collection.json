{
	"info": {
		"_postman_id": "8ef51d32-41fb-4bdd-af26-7af43b146652",
		"name": "finan_48_manual_delete_wrong_tnx",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "282640"
	},
	"item": [
		{
			"name": "authen",
			"item": [
				{
					"name": "verify_email_or_phone_number",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/**",
									" * currently, manual to create account pwd & use charles to get it",
									" * default pwd created: 21112007 (prod with default account & no need pwd)",
									" */",
									"",
									"let email = pm.environment.get(\"SER-email\");",
									"let phone_number = pm.environment.get(\"SER-phone_number\");",
									"",
									"console.log(\"--- Start Testsuite ---\");",
									"let testcase = 1;",
									"",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let isPhone = true;",
									"",
									"let payload;",
									"if(isPhone){",
									"    console.log(\"login with phone_number: \" + phone_number);",
									"    payload = {",
									"        \"phone_number\": phone_number",
									"    }",
									"} else {",
									"    console.log(\"login with email: \" + email);",
									"    payload = {",
									"        \"email\": email",
									"    }",
									"}",
									"",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));",
									"pm.environment.set(\"C-testcase\",testcase);",
									"pm.environment.set(\"C-isPhone\",isPhone);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    let jsData = pm.response.json();",
									"",
									"    if(jsData.data.is_existed && jsData.data.has_password){",
									"        postman.setNextRequest(\"login_with_pwd\");",
									"    } else if(jsData.data.is_existed) {",
									"        console.log(\"This account doesn't create pwd, please manual create!!!\");",
									"        postman.setNextRequest(null);",
									"    } else {",
									"        console.log(\"Error:\", JSON.stringify(jsData));",
									"        console.log(\"THIS ACCOUNT IS NOT EXISTED IN SYSTEM, WILL MANUAL CREATE IT\");",
									"        postman.setNextRequest(null);",
									"    }",
									"} else {",
									"    console.log(\"Error, end test\");",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finan_base_url}}/finan-user/api/v1/auth/account/verify",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-user",
								"api",
								"v1",
								"auth",
								"account",
								"verify"
							]
						}
					},
					"response": []
				},
				{
					"name": "login_with_pwd",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// let crypto = require('crypto-js');",
									"",
									"// const algorithm = \"aes-256-gcm\";",
									"// const IV_LEN = 12;",
									"// const AUTH_TAG_LEN = 16;",
									"// const SECRET_KEY = \"7dQ0HwRI5okvwAK0WzxaW6ABFncjeu1E\";",
									"",
									"// function encrypt(message) {",
									"//   const iv = Buffer.from(crypto.randomBytes(IV_LEN));",
									"//   const cipher = crypto.createCipheriv(algorithm, SECRET_KEY, iv, {",
									"//     authTagLength: AUTH_TAG_LEN,",
									"//   });",
									"//   const encryptedData = Buffer.concat([cipher.update(message), cipher.final()]);",
									"//   const authTag = cipher.getAuthTag();",
									"//   const raw = Buffer.concat([iv, encryptedData, authTag]).toString(\"hex\");",
									"//   return raw;",
									"// }",
									"",
									"// const pwd = \"21112007\";",
									"// // var superSecretEncrypted = CryptoJS.AES.encrypt(pwd, SECRET_KEY);",
									"",
									"// let pwd_enc = encrypt(pwd);",
									"// console.log(\"pwd_enc: \" + pwd_enc);",
									"",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"let isPhone = pm.environment.get(\"C-isPhone\");",
									"",
									"let verify_payload = JSON.parse(pm.environment.get(\"C-payload\"));",
									"",
									"let payload;",
									"let version = pm.environment.get(\"x-current-version\");",
									"if(isPhone){",
									"    payload = {",
									"        \"phone_number\": verify_payload.phone_number,",
									"        \"pwd\": pm.environment.get(\"pwd\"),",
									"        \"platform\": \"gtapp\",",
									"        \"device_id\": \"C9102FC6-466C-4980-B795-A91A2FD7F97F\",",
									"        \"app_version\": version,",
									"        \"device_name\": \"iPhone\"",
									"    }",
									"} else {",
									"    payload = {",
									"        \"email\": verify_payload.email,",
									"        \"pwd\": pm.environment.get(\"pwd\"),",
									"        \"platform\": \"gtapp\",",
									"        \"device_id\": \"C9102FC6-466C-4980-B795-A91A2FD7F97F\",",
									"        \"app_version\": version,",
									"        \"device_name\": \"iPhone\"",
									"    }",
									"}",
									"console.log(\"debug: \", payload);",
									"",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    let jsData = pm.response.json();",
									"    // debug",
									"    // console.log(JSON.stringify(jsData));",
									"",
									"    let business_id = null;",
									"    try{",
									"        business_id = jsData.data.business_info.list_business[0].business_id;",
									"    } catch{",
									"        console.log(\"This is new user, must create business_id\");",
									"    }",
									"",
									"    let userToken = jsData.data.token;",
									"    pm.environment.set(\"C-userToken\",userToken);",
									"",
									"    if(business_id == null){",
									"        console.log(\"This user don't have store, please check & use another account\");",
									"        ",
									"        postman.setNextRequest(null);",
									"    } else {",
									"        let userRefreshToken = jsData.data.refresh_token;",
									"",
									"        let userInfo = {",
									"            \"role_name\":jsData.data.business_info.current_role.role_name,",
									"            \"is_owner\":jsData.data.business_info.current_role.is_owner,",
									"            \"user_name\":jsData.data.business_info.list_business[0].user_name,",
									"            \"business_id\":business_id",
									"        }",
									"",
									"        // show log",
									"        // console.log(\"userToken:\",userToken);",
									"        // console.log(\"userRefreshToken:\",userRefreshToken);",
									"        console.log(\"userInfo:\",JSON.stringify(userInfo));",
									"",
									"        pm.environment.set(\"C-userRefreshToken\",userRefreshToken);",
									"        pm.environment.set(\"C-userInfo\",userInfo);",
									"        pm.environment.set(\"C-business_id\",business_id); // ",
									"",
									"        let testcase = pm.environment.get(\"C-testcase\");",
									"        testcase++;",
									"        pm.environment.set(\"C-testcase\",testcase);",
									"        postman.setNextRequest(\"get_branch_id\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get Token, end test\");",
									"",
									"    // debug",
									"    let jsData = pm.response.json();",
									"    console.log(\"data:\",JSON.stringify(jsData));",
									"",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finan_base_url}}/finan-user/api/v1/auth/account/login",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-user",
								"api",
								"v1",
								"auth",
								"account",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_branch_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let branch_id = null;",
									"    try {",
									"        branch_id = jsData.data.id;",
									"    } catch {",
									"        console.log(\"Can't get branch_id\");",
									"    }",
									"",
									"    pm.test(\"Got branch_id\", function () {",
									"        pm.expect(branch_id != null).to.be.true;",
									"    });",
									"",
									"    if(branch_id != null){",
									"        pm.environment.set(\"C-business_id\",branch_id);",
									"        postman.setNextRequest(\"get_list_transaction\"); // ",
									"    } else {",
									"        postman.setNextRequest(null);",
									"    }",
									"} else {",
									"    console.log(\"Can't get Token, end test\", jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{finan_base_url}}/finan-business/api/v1/branch/detail/{{C-business_id}}",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-business",
								"api",
								"v1",
								"branch",
								"detail",
								"{{C-business_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "transaction",
			"item": [
				{
					"name": "get_list_transaction",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let page = pm.environment.get(\"C-page\");",
									"",
									"if(!page){",
									"    page = 1;",
									"    pm.environment.set(\"C-page\",page);",
									"",
									"    let page_size = 50;",
									"    pm.environment.set(\"C-page_size\",page_size);",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = JSON.parse(responseBody);",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let total_pages = jsData.meta.total_pages;",
									"    let page = pm.environment.get(\"C-page\");",
									"",
									"    let list_tnx = pm.environment.get(\"C-list_tnx\");",
									"    if(!list_tnx){",
									"        list_tnx = [];",
									"    }",
									"",
									"    let list_wrong_tnx = [];",
									"    for(let item in jsData.data){",
									"        // add condition to get wrong tnx",
									"        if(jsData.data[item].amount < 0){",
									"            list_wrong_tnx[list_wrong_tnx.length] = jsData.data[item].id;",
									"        }",
									"    }",
									"    pm.environment.set(\"C-list_wrong_tnx\",list_wrong_tnx);",
									"",
									"    if(page >= total_pages){",
									"        // must clear page & page_size",
									"        pm.environment.unset(\"C-page\");",
									"        pm.environment.unset(\"C-page_size\");",
									"",
									"        if(list_wrong_tnx.length > 0){",
									"            console.log(\"list tnx must delete: \" + list_wrong_tnx);",
									"            postman.setNextRequest(\"delete_transaction\"); // delete_transaction",
									"        } else {",
									"            console.log(\"Nothing tnx with wrong data!\");",
									"            postman.setNextRequest(null);",
									"        }",
									"    } else {",
									"        page++;",
									"        pm.environment.set(\"C-page\",page);",
									"",
									"        console.log(\"view next page (\" + page + \") to get more tnx\");",
									"        postman.setNextRequest(\"get_list_transaction\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get list tnx, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{finan_base_url}}/finan-ledger/api/v1/transaction/list?branch_id={{C-business_id}}&page={{C-page}}&page_size={{C-page_size}}",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"transaction",
								"list"
							],
							"query": [
								{
									"key": "branch_id",
									"value": "{{C-business_id}}"
								},
								{
									"key": "page",
									"value": "{{C-page}}"
								},
								{
									"key": "page_size",
									"value": "{{C-page_size}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get_transaction_detail",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    // let testcase = pm.environment.get(\"C-testcase\");",
									"    console.log(\"Debug: \", jsData);",
									"",
									"    let list_wrong_tnx = pm.environment.get(\"C-list_wrong_tnx\");",
									"    let fix_pos = pm.environment.get(\"C-fix_pos\");",
									"",
									"    if(fix_pos < (list_wrong_tnx.length - 1)){",
									"        fix_pos++;",
									"        pm.environment.set(\"C-fix_pos\",fix_pos);",
									"        postman.setNextRequest(\"\"); // delete_transaction",
									"    } else {",
									"        pm.environment.unset(\"C-fix_pos\");",
									"        postman.setNextRequest(null);",
									"    }",
									"} else {",
									"    console.log(\"Can't get tax detail, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{finan_base_url}}​/finan-ledger/api/v1/transaction/detail/{{C-tnx_id}}?business_id={{C-business_id}}",
							"host": [
								"{{finan_base_url}}​"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"transaction",
								"detail",
								"{{C-tnx_id}}"
							],
							"query": [
								{
									"key": "business_id",
									"value": "{{C-business_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "delete_transaction",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let list_wrong_tnx = pm.environment.get(\"C-list_wrong_tnx\");",
									"let fix_pos = pm.environment.get(\"C-fix_pos\");",
									"if(!fix_pos){",
									"    fix_pos = 0;",
									"    pm.environment.set(\"C-fix_pos\",fix_pos);",
									"} ",
									"",
									"pm.environment.set(\"C-tnx_id\",list_wrong_tnx[fix_pos]);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    // console.log(\"jsData: \" + JSON.stringify(jsData));",
									"    ",
									"    postman.setNextRequest(\"get_transaction_detail\"); // get_transaction_detail",
									"} else {",
									"    console.log(\"jsData: \" + JSON.stringify(jsData));",
									"    console.log(\"Can't delete tax, end test\");",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{finan_base_url}}/finan-ledger/api/v1/transaction/delete/{{C-tnx_id}}",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"transaction",
								"delete",
								"{{C-tnx_id}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.request.headers.add({",
							" key: \"authorization\",",
							" value: \"Bearer \" + pm.environment.get(\"C-userToken\")",
							"});",
							"",
							"pm.request.headers.add({",
							" key: \"Content-Type\",",
							" value: \"application/json\"",
							"});"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	]
}