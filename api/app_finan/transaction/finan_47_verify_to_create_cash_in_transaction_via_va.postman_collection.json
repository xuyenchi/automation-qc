{
	"info": {
		"_postman_id": "3afe8f78-cb20-4535-9415-e8e0ae209507",
		"name": "finan_47_verify_to_create_cash_in_transaction_via_va",
		"description": "### Testsuite: verify_to_create_cash_in_transaction_via_va\n\n###### Steps:\n\n1. Test case 1:\n    1. Login with owner account\n2. Test case 2:\n    1. Get data\n        1. account coa / get list account\n        2. account bank / get list bank account\n        3. invoice / get list invoice => get invoice had payment_account_id & un_paid/partital_paid status\n        4. invoice / get invoice detail => update more data for invoice at 2.iiii.\n        5. Posting / Get list posting => get total posting\n        6. Report / Get report cash_flow => has change with tnx (confirm with PO)\n        7. Report / Get report account => get data\n        8. Report / Get report account receivable paid => get data\n        9. Report / Get report account receivable unpaid => get data\n        10. Report / Get report account receivable customer => get data respective with invoice at 2.iii.\n        11. Report / Get report account receivable invoice => get data respective with 2.iii\n        12. Home / account balance / account lifetime => get data\n        13. Home / cash flow / cash flow period => get data\n        14. Home / profit n loss / profit n loss period => get data\n        15. Payment / get list payment => get total\n        16. Transaction / Get list transaction => get total transaction\n3. Test case 3:\n    1. Create transaction\n        1. payment / gen buyer payment QR\n        2. hook cash in hold\n4. Testcase 4:\n    1. Check data\n        1. Transaction / Get list transaction => have new record\n        2. Transaction / Get transaction detail => data correctly\n        3. Payment / get list payment => increase 1\n        4. Payment / get payment detail => data correctly\n        5. Account cash_n_bank / Get list account => check respective banlance_amount\n        6. invoice / get list invoice => get invoice had payment_account_id & un_paid/partital_paid status\n        7. invoice / get invoice detail => update more data for invoice at 3.ii.\n        8. Posting / get list posting => have 3 new posting (account receivable & account debit)\n        9. Report / Get report cash_flow => has change with tnx (confirm with PO)\n        10. Report / Get report account => get data\n        11. Report / Get report account receivable paid => get data\n        12. Report / Get report account receivable unpaid => get data\n        13. Report / Get report account receivable customer => get data respective with invoice at 3.ii.\n        14. Report / Get report account receivable invoice => get data respective with 2.c\n        15. Home / account balance / account lifetime => get data\n        16. Home / cash flow / cash flow periodi => get data\n        17. Home / profit n loss / profit n loss period => get data\n5. Test case 5:\n    1. Create transaction\n        1. hook cash in release\n6. Test case 6:\n    1. Check data\n        1. Transaction / Get list transaction => have 2 new record\n        2. Transaction / Get transaction detail => data correctly\n        3. Payment / get list payment => no increase, data correctly\n        4. Payment / get payment detail => data correctly\n        5. Account cash_n_bank / Get list account => check respective banlance_amount\n        6. invoice / get list invoice => get invoice had payment_account_id & un_paid/partital_paid status\n        7. invoice / get invoice detail => update more data for invoice at 4 c.\n        8. Posting / get list posting => have 4 new posting (account receivable & account debit)\n        9. Report / Get report cash_flow => update data\n        10. Report / Get report account => update data\n        11. Report / Get report account receivable paid => update data\n        12. Report / Get report account receivable unpaid => update data\n        13. Report / Get report account receivable customer => update data\n        14. Home / account balance / account lifetime => get data\n        15. Home / cash flow / cash flow period => get data\n        16. Home / profit n loss / profit n loss period => get data",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33255019"
	},
	"item": [
		{
			"name": "authen",
			"item": [
				{
					"name": "verify_email_or_phone_number",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/**",
									" * currently, manual to create account pwd & use charles to get it",
									" * default pwd created: 21112007 (prod with default account & no need pwd)",
									" */",
									"",
									"let email = pm.environment.get(\"SER-email\");",
									"let phone_number = pm.environment.get(\"SER-phone_number\");",
									"",
									"console.log(\"--- Start Testsuite 47 ---\");",
									"let testcase = 1;",
									"",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let isPhone = true;",
									"",
									"let payload;",
									"if(isPhone){",
									"    console.log(\"login with phone_number: \" + phone_number);",
									"    payload = {",
									"        \"phone_number\": phone_number",
									"    }",
									"} else {",
									"    console.log(\"login with email: \" + email);",
									"    payload = {",
									"        \"email\": email",
									"    }",
									"}",
									"",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));",
									"pm.environment.set(\"C-testcase\",testcase);",
									"pm.environment.set(\"C-isPhone\",isPhone);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    let jsData = pm.response.json();",
									"",
									"    if(jsData.data.is_existed && jsData.data.has_password){",
									"        postman.setNextRequest(\"login_with_pwd\");",
									"    } else if(jsData.data.is_existed) {",
									"        console.log(\"This account doesn't create pwd, please manual create!!!\");",
									"        postman.setNextRequest(null);",
									"    } else {",
									"        console.log(\"Error:\", JSON.stringify(jsData));",
									"        console.log(\"THIS ACCOUNT IS NOT EXISTED IN SYSTEM, WILL MANUAL CREATE IT\");",
									"        postman.setNextRequest(null);",
									"    }",
									"} else {",
									"    console.log(\"Error, end test\");",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finan_base_url}}/finan-user/api/v1/auth/account/verify",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-user",
								"api",
								"v1",
								"auth",
								"account",
								"verify"
							]
						}
					},
					"response": []
				},
				{
					"name": "login_with_pwd",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"let isPhone = pm.environment.get(\"C-isPhone\");",
									"",
									"let verify_payload = JSON.parse(pm.environment.get(\"C-payload\"));",
									"",
									"let payload;",
									"let version = pm.environment.get(\"x-current-version\");",
									"if(isPhone){",
									"    payload = {",
									"        \"phone_number\": verify_payload.phone_number,",
									"        \"pwd\": pm.environment.get(\"pwd\"),",
									"        \"platform\": \"gtapp\",",
									"        \"device_id\": \"C9102FC6-466C-4980-B795-A91A2FD7F97F\",",
									"        \"app_version\": version,",
									"        \"device_name\": \"iPhone\"",
									"    }",
									"} else {",
									"    payload = {",
									"        \"email\": verify_payload.email,",
									"        \"pwd\": pm.environment.get(\"pwd\"),",
									"        \"platform\": \"gtapp\",",
									"        \"device_id\": \"C9102FC6-466C-4980-B795-A91A2FD7F97F\",",
									"        \"app_version\": version,",
									"        \"device_name\": \"iPhone\"",
									"    }",
									"}",
									"console.log(\"debug: \", payload);",
									"",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    let jsData = pm.response.json();",
									"",
									"",
									"    let business_id = null;",
									"    try{",
									"        business_id = jsData.data.business_info.list_business[0].business_id;",
									"    } catch{",
									"        console.log(\"This is new user, must create business_id\");",
									"    }",
									"",
									"    let userToken = jsData.data.token;",
									"    pm.environment.set(\"C-userToken\",userToken);",
									"",
									"    if(business_id == null){",
									"        console.log(\"This user don't have store, please check & use another account\");",
									"        ",
									"        postman.setNextRequest(null);",
									"    } else {",
									"        let userRefreshToken = jsData.data.refresh_token;",
									"",
									"        let userInfo = {",
									"            \"role_name\":jsData.data.business_info.current_role.role_name,",
									"            \"is_owner\":jsData.data.business_info.current_role.is_owner,",
									"            \"user_name\":jsData.data.business_info.list_business[0].user_name,",
									"            \"business_id\":business_id",
									"        }",
									"",
									"        // show log",
									"        console.log(\"userInfo:\",JSON.stringify(userInfo));",
									"",
									"        pm.environment.set(\"C-userRefreshToken\",userRefreshToken);",
									"        pm.environment.set(\"C-userInfo\",userInfo);",
									"        pm.environment.set(\"C-branch_id\",business_id); // business_id",
									"",
									"        let testcase = pm.environment.get(\"C-testcase\");",
									"        testcase++;",
									"        pm.environment.set(\"C-testcase\",testcase);",
									"        postman.setNextRequest(\"get_branch_id\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get Token, end test\");",
									"",
									"    // debug",
									"    let jsData = pm.response.json();",
									"    console.log(\"data:\",JSON.stringify(jsData));",
									"",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finan_base_url}}/finan-user/api/v1/auth/account/login",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-user",
								"api",
								"v1",
								"auth",
								"account",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_branch_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let branch_id = null;",
									"    try {",
									"        branch_id = jsData.data.id;",
									"    } catch {",
									"        console.log(\"Can't get branch_id\");",
									"    }",
									"",
									"    pm.test(\"Got branch_id\", function () {",
									"        pm.expect(branch_id != null).to.be.true;",
									"    });",
									"",
									"    if(branch_id != null){",
									"        pm.environment.set(\"C-branch_id\",branch_id);",
									"        pm.environment.set(\"C-business_id\", jsData.data.business_id);",
									"        postman.setNextRequest(\"get_list_internal_account\"); // get_list_internal_account",
									"    } else {",
									"        postman.setNextRequest(null);",
									"    }",
									"} else {",
									"    console.log(\"Can't get Token, end test\", jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{finan_base_url}}/finan-business/api/v1/branch/detail/{{C-branch_id}}",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-business",
								"api",
								"v1",
								"branch",
								"detail",
								"{{C-branch_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "account coa",
			"item": [
				{
					"name": "get_list_internal_account",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let coa = [];",
									"    try {",
									"        for(let i in jsData.data){",
									"            let sub_group_i = [];",
									"            for(let j in jsData.data[i].sub_group){",
									"                let accounts_j = [];",
									"                for(let k in jsData.data[i].sub_group[j].accounts){",
									"                    accounts_j[accounts_j.length] = {",
									"                        \"account_name\":jsData.data[i].sub_group[j].accounts[k].name,",
									"                        \"account_id\":jsData.data[i].sub_group[j].accounts[k].id,",
									"                        \"group_name\":jsData.data[i].sub_group[j].accounts[k].group_name,",
									"                        \"sub_group_name\":jsData.data[i].sub_group[j].accounts[k].sub_name,",
									"                        \"branch_id\":jsData.data[i].sub_group[j].accounts[k].branch_id,",
									"                        \"displays_id\":jsData.data[i].sub_group[j].accounts[k].displays_id,",
									"                        \"account_source\":jsData.data[i].sub_group[j].accounts[k].account_source,",
									"                        \"account_type\":jsData.data[i].sub_group[j].accounts[k].account_type,",
									"                        \"account_code\":jsData.data[i].sub_group[j].accounts[k].account_code,",
									"                        \"coa_type\":jsData.data[i].sub_group[j].accounts[k].coa_type,",
									"                        \"sub_coa_deepest\":jsData.data[i].sub_group[j].accounts[k].sub_coa_deepest,",
									"                        \"name_en\":jsData.data[i].sub_group[j].accounts[k].name_en,",
									"                        \"status\":jsData.data[i].sub_group[j].accounts[k].status,",
									"                        \"parent_id\":jsData.data[i].sub_group[j].accounts[k].parent_id,",
									"                        \"description\":jsData.data[i].sub_group[j].accounts[k].description,",
									"                        \"open_amount\":jsData.data[i].sub_group[j].accounts[k].open_amount,",
									"                        \"currency\":jsData.data[i].sub_group[j].accounts[k].currency",
									"                        // \"opening_at\":jsData.data[i].sub_group[j].accounts[k].opening_at",
									"                        // \"closing_at\":jsData.data[i].sub_group[j].accounts[k].closing_at",
									"                    }",
									"",
									"                    if(jsData.data[i].sub_group[j].accounts[k].key == \"account_receivable\"){",
									"                        pm.environment.set(\"C-account_receivable\",jsData.data[i].sub_group[j].accounts[k]);",
									"                    // } else if (jsData.data[i].sub_group[j].accounts[k].key == \"discount\") {",
									"                    //     pm.environment.set(\"C-discount\",jsData.data[i].sub_group[j].accounts[k]);",
									"                    // }",
									"                    //// ",
									"                    } else if(jsData.data[i].sub_group[j].accounts[k].key == \"processing_cash_in\"){",
									"                        pm.environment.set(\"C-processing_cash_in\",jsData.data[i].sub_group[j].accounts[k]);",
									"                    } else if(jsData.data[i].sub_group[j].accounts[k].key == \"processing_cash_out\"){",
									"                        pm.environment.set(\"C-processing_cash_out\",jsData.data[i].sub_group[j].accounts[k]);",
									"                    } else if(jsData.data[i].sub_group[j].accounts[k].key == \"payment_processing_fee\"){",
									"                        pm.environment.set(\"C-payment_processing_fee\",jsData.data[i].sub_group[j].accounts[k]);",
									"                    } else if(jsData.data[i].sub_group[j].accounts[k].id == 1002029){",
									"                        pm.environment.set(\"C-account_va_bank\",jsData.data[i].sub_group[j].accounts[k]);",
									"                    }",
									"                    ",
									"                    // else if(jsData.data[i].sub_group_i[j].accounts[k].account_type == \"va_bank\"){",
									"                    //     pm.environment.set(\"C-va_account_bank\",jsData.data[i].sub_group[j].accounts[k]);",
									"                    // }",
									"                    ////",
									"                }",
									"",
									"                sub_group_i[sub_group_i.length] = {",
									"                    \"sub_group_name\":jsData.data[i].sub_group[j].name,",
									"                    \"sub_group_id\":jsData.data[i].sub_group[j].id,",
									"                    \"sub_group_description\":jsData.data[i].sub_group[j].description,",
									"                    \"sub_group_value\":jsData.data[i].sub_group[j].value,",
									"                    \"accounts\":accounts_j",
									"                }",
									"            }",
									"",
									"            coa[coa.length] = {",
									"                \"group_name\":jsData.data[i].name,",
									"                \"value\":jsData.data[i].value,",
									"                \"index\":jsData.data[i].index,",
									"                \"sub_group\":sub_group_i",
									"            }",
									"",
									"            // let list_account_coa = [];",
									"            //     list_account_coa.push({",
									"            // \"account_receivable\":pm.environment.get(\"C-account_receivable\"),",
									"            // \"processing_cash_in\":pm.environment.get(\"C-processing_cash_in\"),",
									"            // \"processing_cash_out\":pm.environment.get(\"C-processing_cash_out\"),",
									"            // \"payment_processing_fee\":pm.environment.get(\"C-payment_processing_fee\"),",
									"            // \"account_va_bank\":pm.environment.get(\"C-account_va_bank\")",
									"            // })",
									"            // console.log(\"list_account_coa\", list_account_coa);",
									"",
									"            // console.log(\"account_receivable: \", pm.environment.get(\"C-account_receivable\"));",
									"            // console.log(\"processing_cash_in: \", pm.environment.get(\"C-processing_cash_in\"));",
									"            // console.log(\"processing_cash_out: \", pm.environment.get(\"C-processing_cash_out\"));",
									"            // console.log(\"account_va_bank: \", pm.environment.get(\"C-account_va_bank\"));",
									"            // console.log(\"payment_processing_fee: \", pm.environment.get(\"C-payment_processing_fee\"));",
									"       ",
									"        }",
									"    } catch {",
									"        console.log(\"can't get all account in coa\");",
									"    }",
									"    let list_account_coa = [];",
									"        list_account_coa.push({",
									"            \"account_receivable\":pm.environment.get(\"C-account_receivable\"),",
									"            \"processing_cash_in\":pm.environment.get(\"C-processing_cash_in\"),",
									"            \"processing_cash_out\":pm.environment.get(\"C-processing_cash_out\"),",
									"            \"payment_processing_fee\":pm.environment.get(\"C-payment_processing_fee\"),",
									"            \"account_va_bank\":pm.environment.get(\"C-account_va_bank\")",
									"            })",
									"    console.log(\"list_account_coa\", list_account_coa);",
									"    // pm.environment.set(\"C-list_account_coa\", list_account_coa);",
									"",
									"",
									"    pm.test(\"Got coa of this user's business\", function () {",
									"        pm.expect(coa.length > 0).to.be.true;",
									"    });",
									"",
									"    if(coa.length > 0){",
									"        // console.log(\"coa: \", coa);",
									"        pm.environment.set(\"C-coa\",coa);",
									"        // console.log(\"coa\",coa);",
									"        let list_internal_account = [];",
									"",
									"        /**",
									"         * lấy những account_id sẽ bị ảnh hưởng bởi invoice để lưu thành array => PENDING (wait confirm with PO, DEV BE-FE)",
									"         */",
									"",
									"        pm.environment.set(\"C-list_internal_account\",list_internal_account);",
									"",
									"",
									"",
									"        /**",
									"         * lấy những account_id và phân loại thành debit/credit",
									"         * - credit: tài khoản (only cash & bank)",
									"         * - debit: phân loại (all)",
									"         */ ",
									"//         let list_credit_account = [];",
									"//         let list_debit_account = [];",
									"",
									"//         for (let i in coa) {",
									"//             for (let j in coa[i].sub_group) {",
									"//                 for (let k in coa[i].sub_group[j].accounts) {",
									"//                         if (coa[i].sub_group[j].sub_group_value == \"other_current_asset\") {",
									"//                         // Mở rộng điều kiện kiểm tra key của tài khoản",
									"//                         if (coa[i].sub_group[j].accounts[k].key == \"account_receivable\" || ",
									"//                             coa[i].sub_group[j].accounts[k].key == \"processing_cash_in\" || ",
									"//                             coa[i].sub_group[j].accounts[k].key == \"processing_cash_out\"",
									"//                         ) {",
									"//                             // Thêm tài khoản vào danh sách tài khoản debit",
									"//                             list_credit_account.push(coa[i].sub_group[j].accounts[k]);",
									"//                         }",
									"//                     }",
									"//                     if (coa[i].sub_group[j].sub_group_value == \"cash_and_bank\" && coa[i].sub_group[j].accounts[k].account_type == \"va_bank\") {",
									"//                         list_debit_account.push(coa[i].sub_group[j].accounts[k]);",
									"//                     } ",
									"                    ",
									"",
									"//                 }",
									"//             }",
									"//         }",
									"",
									"// pm.environment.set(\"C-list_debit_account\", JSON.stringify(list_debit_account));",
									"// console.log(\"list_debit_account: \", list_debit_account);",
									"",
									"// pm.environment.set(\"C-list_credit_account\", JSON.stringify(list_credit_account));",
									"// console.log(\"list_credit_account: \", list_credit_account);",
									"",
									"    pm.environment.set(\"C-list_account_coa\", list_account_coa);",
									"        postman.setNextRequest(\"get_list_payment_account\"); // get_list_payment_account    ",
									"            ",
									"        }",
									"",
									"}else {",
									"    console.log(\"Can't get list internal account, end test \", jsData);",
									"    postman.setNextRequest(null);",
									"}",
									"    ",
									"// pm.test(\"Status code is 200\", function () {",
									"//     pm.response.to.have.status(200);",
									"// });",
									"",
									"// let jsData = pm.response.json();",
									"// if(pm.response.code == 200){}",
									"//     let coa = [];",
									"//     try {",
									"//         for(let i in jsData.data){",
									"//             let sub_group_i = [];",
									"//             for(let j in jsData.data[i].sub_group){",
									"//                 let accounts_j = [];",
									"//                 for(let k in jsData.data[i].sub_group[j].accounts){",
									"//                     accounts_j[accounts_j.length] = {",
									"//                         \"account_name\":jsData.data[i].sub_group[j].accounts[k].name,",
									"//                         \"account_id\":jsData.data[i].sub_group[j].accounts[k].id,",
									"//                         \"group_name\":jsData.data[i].sub_group[j].accounts[k].group_name,",
									"//                         \"sub_group_name\":jsData.data[i].sub_group[j].accounts[k].sub_name,",
									"//                         \"branch_id\":jsData.data[i].sub_group[j].accounts[k].branch_id,",
									"//                         \"displays_id\":jsData.data[i].sub_group[j].accounts[k].displays_id,",
									"//                         \"account_source\":jsData.data[i].sub_group[j].accounts[k].account_source,",
									"//                         \"account_type\":jsData.data[i].sub_group[j].accounts[k].account_type,",
									"//                         \"account_code\":jsData.data[i].sub_group[j].accounts[k].account_code,",
									"//                         \"coa_type\":jsData.data[i].sub_group[j].accounts[k].coa_type,",
									"//                         \"sub_coa_deepest\":jsData.data[i].sub_group[j].accounts[k].sub_coa_deepest,",
									"//                         \"name_en\":jsData.data[i].sub_group[j].accounts[k].name_en,",
									"//                         \"status\":jsData.data[i].sub_group[j].accounts[k].status,",
									"//                         \"parent_id\":jsData.data[i].sub_group[j].accounts[k].parent_id,",
									"//                         \"description\":jsData.data[i].sub_group[j].accounts[k].description,",
									"//                         \"open_amount\":jsData.data[i].sub_group[j].accounts[k].open_amount,",
									"//                         \"currency\":jsData.data[i].sub_group[j].accounts[k].currency",
									"//                         // \"opening_at\":jsData.data[i].sub_group[j].accounts[k].opening_at",
									"//                         // \"closing_at\":jsData.data[i].sub_group[j].accounts[k].closing_at",
									"//                     }",
									"",
									"//                     if(jsData.data[i].sub_group[j].accounts[k].key == \"account_receivable\"){",
									"//                         pm.environment.set(\"C-account_receivable\",jsData.data[i].sub_group[j].accounts[k]);",
									"//                     } else if (jsData.data[i].sub_group[j].accounts[k].key == \"discount\") {",
									"//                         pm.environment.set(\"C-discount\",jsData.data[i].sub_group[j].accounts[k]);",
									"//                     // }",
									"//                     //// ",
									"//                     } else if(jsData.data[i].sub_group[j].accounts[k].key == \"processing_cash_in\"){",
									"//                         pm.environment.set(\"C-processing_cash_in\",jsData.data[i].sub_group[j].accounts[k]);",
									"//                     } else if(jsData.data[i].sub_group[j].accounts[k].key == \"processing_cash_out\"){",
									"//                         pm.environment.set(\"C-processing_cash_out\",jsData.data[i].sub_group[j].accounts[k]);",
									"//                     } else if(jsData.data[i].sub_group[j].accounts[k].key == \"payment_processing_fee\"){",
									"//                         pm.environment.set(\"C-payment_processing_fee\",jsData.data[i].sub_group[j].accounts[k]);",
									"//                     }",
									"//                     ////",
									"//                 }",
									"",
									"//                 sub_group_i[sub_group_i.length] = {",
									"//                     \"sub_group_name\":jsData.data[i].sub_group[j].name,",
									"//                     \"sub_group_id\":jsData.data[i].sub_group[j].id,",
									"//                     \"sub_group_description\":jsData.data[i].sub_group[j].description,",
									"//                     \"sub_group_value\":jsData.data[i].sub_group[j].value,",
									"//                     \"accounts\":accounts_j",
									"//                 }",
									"//             }",
									"",
									"//             coa[coa.length] = {",
									"//                 \"group_name\":jsData.data[i].name,",
									"//                 \"value\":jsData.data[i].value,",
									"//                 \"index\":jsData.data[i].index,",
									"//                 \"sub_group\":sub_group_i",
									"//             }",
									"//         }",
									"//     } catch {",
									"//         console.log(\"can't get all account in coa\");",
									"//     }",
									"",
									"",
									"//     pm.test(\"Got coa of this user's business\", function () {",
									"//         pm.expect(coa.length > 0).to.be.true;",
									"//     });",
									"",
									"//     if(coa.length > 0){",
									"//         // console.log(\"coa: \", coa);",
									"//         pm.environment.set(\"C-coa\",coa);",
									"//         // console.log(\"coa\",coa);",
									"//         let list_internal_account = [];",
									"",
									"//         /**",
									"//          * lấy những account_id sẽ bị ảnh hưởng bởi invoice để lưu thành array => PENDING (wait confirm with PO, DEV BE-FE)",
									"//          */",
									"",
									"//         pm.environment.set(\"C-list_internal_account\",list_internal_account);",
									"",
									"",
									"",
									"//         /**",
									"//          * lấy những account_id và phân loại thành debit/credit",
									"//          * - credit: tài khoản (only cash & bank)",
									"//          * - debit: phân loại (all)",
									"//          */ ",
									"//         let list_credit_account = [];",
									"//         let list_debit_account = []; ",
									"//         for(let i in coa){",
									"//             for(let j in coa[i].sub_group){",
									"//                 for(let k in coa[i].sub_group[j].accounts){",
									"//                     if(coa[i].sub_group[j].sub_group_value == \"cash_and_bank\" || coa[i].sub_group[j].sub_group_value == \"expense\"){ // mở điều kiện này khi cần debug tạo tnx có report cassh-flow",
									"//                         if(coa[i].sub_group[j].accounts[k].account_type == \"va_bank\"){",
									"//                         list_debit_account[list_debit_account.length] = coa[i].sub_group[j].accounts[k];",
									"//                         }",
									"                        ",
									"                    ",
									"//                     if(coa[i].sub_group[j].sub_group_value == \"other_current_asset\"){ ",
									"//                         // console.log(\"debug: \", coa[i].sub_group[j].accounts[k]);",
									"//                             //  if(coa[i].sub_group[j].accounts[k].key == \"processing_cash_in\" ){ // do 1 số name bị null (dev chưa validation dẫn đến report sẽ không biết của account nào - report ko trả về id)",
									"//                         list_credit_account[list_credit_account.length] = coa[i].sub_group[j].accounts[k];",
									"//                         // }",
									"//                     }",
									"//                 }",
									"//             }",
									"//         }",
									"",
									"",
									"//         pm.environment.set(\"C-list_debit_account\",list_debit_account);",
									"//         console.log(\"list_debit_account: \",list_debit_account);",
									"//         pm.environment.set(\"C-list_credit_account\",list_credit_account);",
									"//         console.log(\"list_credit_account: \",list_credit_account);",
									"",
									"//         postman.setNextRequest(\"get_list_payment_account\"); // get_list_payment_account",
									"//         }",
									"// } else {",
									"//     console.log(\"Can't get list internal account, end test \", jsData);",
									"//     postman.setNextRequest(null);",
									"// }"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{finan_base_url}}​/finan-ledger/api/v1/account/list?branch_id={{C-branch_id}}&coa_type=",
							"host": [
								"{{finan_base_url}}​"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"account",
								"list"
							],
							"query": [
								{
									"key": "branch_id",
									"value": "{{C-branch_id}}"
								},
								{
									"key": "coa_type",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get_internal_account_detail",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let list_internal_account = pm.environment.get(\"C-list_internal_account\");",
									"let pos = pm.environment.get(\"C-pos\");",
									"if(!pos){",
									"    pos = 0;",
									"    pm.environment.set(\"C-pos\",pos);",
									"}",
									"",
									"let internal_account_id = list_internal_account[pos].account_id;",
									"console.log(\"view detail account: \" + account_id);",
									"",
									"pm.environment.set(\"C-internal_account_id\",internal_account_id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    const jsData = pm.response.json();",
									"    // let testcase = pm.environment.get(\"C-testcase\");",
									"    console.log(\"Debug: \" + JSON.stringify(jsData));",
									"",
									"    let list_internal_account = pm.environment.get(\"C-list_internal_account\");",
									"    let pos = pm.environment.get(\"C-pos\");",
									"",
									"    if(pos >= list_internal_account.length - 1){",
									"        pm.environment.unset(\"C-pos\");",
									"",
									"        postman.setNextRequest(\"get_list_tax\"); // get_list_tax",
									"    } else {",
									"        pos++;",
									"        pm.environment.set(\"C-pos\",pos);",
									"",
									"        postman.setNextRequest(\"get_internal_account_detail\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get internal account detail, end test\");",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{finan_base_url}}​​/finan-ledger/api/v1/account/detail/{{C-internal_account_id}}",
							"host": [
								"{{finan_base_url}}​​"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"account",
								"detail",
								"{{C-internal_account_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "account cash_n_bank",
			"item": [
				{
					"name": "get_list_payment_account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    let jsData = pm.response.json();",
									"",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let targetId = 1002029;",
									"    let found_account_va = null;",
									"    for(let item of jsData.data.accounts){",
									"        if(item.id === targetId){",
									"            found_account_va = item;",
									"        break;",
									"        }",
									"    }",
									"",
									"    let amount_account_va = found_account_va.total_balance_amount;",
									"    pm.environment.set(\"C-amount_account_va\",amount_account_va);",
									"    console.log(\"amount_account_va\", found_account_va.total_balance_amount);",
									"",
									"",
									"",
									"    switch(testcase){",
									"        case 2:",
									"            amount_account_va = pm.environment.get(\"C-amount_account_va\");",
									"            pm.test(\"Verify amount_account_va is not null\", function () {",
									"                pm.expect(amount_account_va > 0).to.be.true;",
									"             });",
									"",
									"            pm.environment.set(\"C-amount_account_va_tc_2\", amount_account_va);",
									"",
									"            break;",
									"",
									"        case 4:",
									"            old_amount_account_va =  pm.environment.get(\"C-amount_account_va_tc_2\");",
									"            console.log(\"old_amount_account_va\", old_amount_account_va);",
									"            pm.test(\"Verify total amount does not increase \" , function(){",
									"                pm.expect(amount_account_va == old_amount_account_va).to.be.true;",
									"            });",
									"            ",
									"            pm.environment.set(\"C-amount_account_va_tc_4\", amount_account_va);",
									"            postman.setNextRequest(\"get_list_invoice\"); // get_list_invoice",
									"",
									"",
									"            break;",
									"        case 6:",
									"            cash_in_release_payload = pm.environment.get(\"C-hookCashInRelease\");",
									"            old_amount_account_va =  pm.environment.get(\"C-amount_account_va_tc_4\");",
									"            console.log(\"amount_account_va_tc_4\", amount_account_va_tc_4);",
									"            console.log(\"found_account_va\", found_account_va);",
									"",
									"            pm.test(\"Verify total amount increase \" + cash_in_release_payload.data.net_amount, function(){",
									"                pm.expect(old_amount_account_va + cash_in_release_payload.data.net_amount == amount_account_va).to.be.true;",
									"                });",
									"",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get list payment account, end test\", pm.response.json());",
									"    postman.setNextRequest(null);",
									"}",
									"",
									"function handleTestcase2(jsData) {",
									"    let list_bank_account = getListBankAccounts(jsData);",
									"",
									"    pm.test(\"Got list bank account\", function () {",
									"        pm.expect(list_bank_account.length > 0).to.be.true;",
									"    });",
									"",
									"    pm.environment.set(\"C-old_list_bank_account\",list_bank_account);",
									"    postman.setNextRequest(\"get_list_invoice\"); // get_list_invoice",
									"}",
									"",
									"function handleTestcase4(jsData) {",
									"    let list_bank_account = getListBankAccounts(jsData);",
									"",
									"    pm.test(\"Got list bank account\", function () {",
									"        pm.expect(list_bank_account.length > 0).to.be.true;",
									"    });",
									"",
									"    pm.environment.set(\"C-old_list_bank_account\",list_bank_account);",
									"    postman.setNextRequest(\"get_list_invoice\"); // get_list_invoice",
									"}",
									"",
									"function handleTestcase6(jsData, cash_in_release_total_fee) {",
									"    let old_list_bank_account = pm.environment.get(\"C-old_list_bank_account\");",
									"    let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"    let cash_in_release = pm.environment.get(\"C-hookCashInRelease\");",
									"",
									"    let expected_balance_amount = getExpectedBalanceAmount(old_list_bank_account, tnx_obj, cash_in_release_total_fee);",
									"    let actual_balance_amount = getActualBalanceAmount(jsData, tnx_obj);",
									"",
									"    pm.test(\"total_balance_amount increase \" + tnx_obj.amount, function () {",
									"        console.log(\"act: \" + actual_balance_amount);",
									"        console.log(\"exp: \" + expected_balance_amount);",
									"        pm.expect(actual_balance_amount == expected_balance_amount).to.be.true;",
									"    });",
									"",
									"    postman.setNextRequest(\"get_list_invoice\"); // get_list_invoice",
									"}",
									"",
									"function getListBankAccounts(jsData) {",
									"    let list_bank_account = [];",
									"    for(let j in jsData.data.accounts){",
									"        if(jsData.data.accounts[j].account_type == \"va_bank\" && jsData.data.accounts[j].provider_id == \"finan_one\"){ ",
									"            list_bank_account.push({",
									"                \"account_id\":jsData.data.accounts[j].id,",
									"                \"account_name\":jsData.data.accounts[j].name,",
									"                \"status\":jsData.data.accounts[j].status,",
									"                \"external_account_id\":jsData.data.accounts[j].external_account_id,",
									"                \"provider_id\":jsData.data.accounts[j].provider_id,",
									"                \"total_balance_amount\":jsData.data.accounts[j].total_balance_amount",
									"            });",
									"        }",
									"    }",
									"    return list_bank_account;",
									"}",
									"",
									"function getExpectedBalanceAmount(old_list_bank_account, tnx_obj, cash_in_release_total_fee) {",
									"    let expected_balance_amount;",
									"    for(let j in old_list_bank_account){",
									"        if(tnx_obj.account_debit == old_list_bank_account[j].account_id){",
									"            expected_balance_amount = old_list_bank_account[j].total_balance_amount + tnx_obj.amount - cash_in_release_total_fee;",
									"            break;",
									"        }",
									"    }",
									"    return expected_balance_amount;",
									"}",
									"",
									"function getActualBalanceAmount(jsData, tnx_obj) {",
									"    let actual_balance_amount;",
									"    for(let j in jsData.data.accounts){",
									"        if(tnx_obj.account_debit == jsData.data.accounts[j].id){",
									"            actual_balance_amount = jsData.data.accounts[j].total_balance_amount;",
									"            break;",
									"        }",
									"    }",
									"    return actual_balance_amount;",
									"}",
									"",
									"// pm.test(\"Status code is 200\", function () {",
									"//     pm.response.to.have.status(200);",
									"// });",
									"",
									"// if(pm.response.code == 200){",
									"//     let jsData = pm.response.json();",
									"",
									"//     let testcase = pm.environment.get(\"C-testcase\");",
									"//         let targetId = 1002029;",
									"//     let found_account_va = null;",
									"//     for(let item of jsData.data.accounts){",
									"//         if(item.id === targetId){",
									"//             found_account_va = item;",
									"//         break;",
									"//         }",
									"//     }",
									"//     console.log(\"foundAccountVa\", found_account_va);",
									"//     pm.environment.set(\"C-found_account_va\");",
									"",
									"",
									"//     switch(testcase){",
									"//         case 2:",
									"//             handleTestcase2(jsData);",
									"//             break;",
									"",
									"//         case 4:",
									"//             handleTestcase4(jsData);",
									"//             break;",
									"//         case 6:",
									"//             let cash_in_release = pm.environment.get(\"C-hookCashInRelease\");",
									"//             cash_in_release_total_fee = cash_in_release.data.total_fee;",
									"//             console.log(\"cash_in_release\", cash_in_release);",
									"",
									"//             handleTestcase6(jsData, cash_in_release_total_fee);",
									"//             break;",
									"//         default:",
									"//             console.log(\"Missing flow, end test\");",
									"//             postman.setNextRequest(null);",
									"//             break;",
									"//     }",
									"// } else {",
									"//     console.log(\"Can't get list payment account, end test\", pm.response.json());",
									"//     postman.setNextRequest(null);",
									"// }",
									"",
									"// function handleTestcase2(jsData) {",
									"//     let list_bank_account = getListBankAccounts(jsData);",
									"",
									"//     pm.test(\"Got list bank account\", function () {",
									"//         pm.expect(list_bank_account.length > 0).to.be.true;",
									"//     });",
									"",
									"//     pm.environment.set(\"C-old_list_bank_account\",list_bank_account);",
									"//     postman.setNextRequest(\"get_list_invoice\"); // get_list_invoice",
									"// }",
									"",
									"// function handleTestcase4(jsData) {",
									"//     let list_bank_account = getListBankAccounts(jsData);",
									"",
									"//     pm.test(\"Got list bank account\", function () {",
									"//         pm.expect(list_bank_account.length > 0).to.be.true;",
									"//     });",
									"",
									"//     pm.environment.set(\"C-old_list_bank_account\",list_bank_account);",
									"//     postman.setNextRequest(\"get_list_invoice\"); // get_list_invoice",
									"// }",
									"",
									"// function handleTestcase6(jsData, cash_in_release_total_fee) {",
									"//     let old_list_bank_account = pm.environment.get(\"C-old_list_bank_account\");",
									"//     let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"//     let cash_in_release = pm.environment.get(\"C-hookCashInRelease\");",
									"",
									"//     let expected_balance_amount = getExpectedBalanceAmount(old_list_bank_account, tnx_obj, cash_in_release_total_fee);",
									"//     let actual_balance_amount = getActualBalanceAmount(jsData, tnx_obj);",
									"",
									"//     pm.test(\"total_balance_amount increase \" + tnx_obj.amount, function () {",
									"//         console.log(\"act: \" + actual_balance_amount);",
									"//         console.log(\"exp: \" + expected_balance_amount);",
									"//         pm.expect(actual_balance_amount == expected_balance_amount).to.be.true;",
									"//     });",
									"",
									"//     postman.setNextRequest(\"get_list_invoice\"); // get_list_invoice",
									"// }",
									"",
									"// function getListBankAccounts(jsData) {",
									"//     let list_bank_account = [];",
									"//     for(let j in jsData.data.accounts){",
									"//         if(jsData.data.accounts[j].account_type == \"va_bank\" && jsData.data.accounts[j].provider_id == \"finan_one\"){ ",
									"//             list_bank_account.push({",
									"//                 \"account_id\":jsData.data.accounts[j].id,",
									"//                 \"account_name\":jsData.data.accounts[j].name,",
									"//                 \"status\":jsData.data.accounts[j].status,",
									"//                 \"external_account_id\":jsData.data.accounts[j].external_account_id,",
									"//                 \"provider_id\":jsData.data.accounts[j].provider_id,",
									"//                 \"total_balance_amount\":jsData.data.accounts[j].total_balance_amount",
									"//             });",
									"//         }",
									"//     }",
									"//     return list_bank_account;",
									"// }",
									"",
									"// function getExpectedBalanceAmount(old_list_bank_account, tnx_obj, cash_in_release_total_fee) {",
									"//     let expected_balance_amount;",
									"//     for(let j in old_list_bank_account){",
									"//         if(tnx_obj.account_debit == old_list_bank_account[j].account_id){",
									"//             expected_balance_amount = old_list_bank_account[j].total_balance_amount + tnx_obj.amount - cash_in_release_total_fee;",
									"//             break;",
									"//         }",
									"//     }",
									"//     return expected_balance_amount;",
									"// }",
									"",
									"// function getActualBalanceAmount(jsData, tnx_obj) {",
									"//     let actual_balance_amount;",
									"//     for(let j in jsData.data.accounts){",
									"//         if(tnx_obj.account_debit == jsData.data.accounts[j].id){",
									"//             actual_balance_amount = jsData.data.accounts[j].total_balance_amount;",
									"//             break;",
									"//         }",
									"//     }",
									"//     return actual_balance_amount;",
									"// }",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"url": {
							"raw": "{{finan_base_url}}/finan-ledger/api/v1/account/list-by-key?branch_id={{C-branch_id}}&key=cash_and_bank&option=bank",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"account",
								"list-by-key"
							],
							"query": [
								{
									"key": "branch_id",
									"value": "{{C-branch_id}}"
								},
								{
									"key": "key",
									"value": "cash_and_bank"
								},
								{
									"key": "option",
									"value": "bank"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "invoice",
			"item": [
				{
					"name": "get_list_invoice",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ============================= random number between min and max",
									"function getRandomInt(min, max) {",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"",
									"let jsData = JSON.parse(responseBody);",
									"if (pm.response.code === 200) {",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    try {",
									"        total_pages = jsData.meta.total_pages;",
									"    } catch (error) {",
									"        console.log(\"Error while accessing total_pages:\", error.message);",
									"    }",
									"    let list_invoice = list_current_invoice(jsData);",
									"    // let page = pm.environment.get(\"C-page\");",
									"    console.log(\"list_current_invoice\", list_current_invoice(jsData));",
									"    // xac dinh invoice object",
									"    invoice_obj = list_invoice[getRandomInt(0,list_invoice.length - 1)];",
									"    pm.environment.set(\"C-invoice_obj\",invoice_obj);",
									"    console.log(\"C-invoice_obj\", invoice_obj);",
									"",
									"     switch(testcase){",
									"        case 2:",
									"            handleTestcase2(jsData);",
									"            break;",
									"",
									"        case 4:",
									"            handleTestcase4(jsData);",
									"            break;",
									"        case 6:",
									"            handleTestcase6(jsData, cash_in_release_total_fee);",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"     }",
									"     ",
									"",
									"function handleTestcase2(jsData) {",
									"    list_invoice = list_current_invoice(jsData);",
									"    pm.test(\"Got all invoice! \" + list_invoice.length, function () {",
									"        pm.expect(list_invoice.length > 0).to.be.true;",
									"    });",
									"    invoice_obj = pm.environment.get(\"C-invoice_obj\");",
									"",
									"    if(list_invoice.length > 0){",
									"        postman.setNextRequest(\"get_invoice_detail\"); // get_invoice_detail",
									"    } else {",
									"        pm.test(\"DON'T HAVE INVOICE TO PAYMENT\", function () {",
									"            pm.expect(true).to.be.false;",
									"        });",
									"        postman.setNextRequest(null);",
									"    }",
									"    ",
									"}",
									"",
									"function handleTestcase4() {",
									"    list_invoice = list_current_invoice(jsData);",
									"    invoice_obj_tc_4 = pm.environment.get(\"C-invoice_obj\");",
									"    console.log(\"invoice_obj_tc_4\", invoice_obj_tc_4);",
									"    // invoice_obj_tc_2 = pm.environment.get(\"C-invoice_obj_tc_2\");",
									"    let cash_in_hold_payload = pm.environment.get(\"C-hookCashIn\");",
									"    pm.test(\"Got all invoice! \" + list_invoice.length, function () {",
									"        pm.expect(list_invoice.length > 0).to.be.true;",
									"    });",
									"",
									"        if(list_invoice.length > 0){",
									"            pm.test(\"paymet status of invoice coreectly with hook in hold is: \" + invoice_obj_tc_4.payment_status, function() {",
									"            pm.expect(\"un_paid\" == invoice_obj_tc_4.payment_status);",
									"        }); ",
									"",
									"        pm.test(\"Payment method of invoice correctly:\" + cash_in_hold_payload.data.payment_method, function (){",
									"            pm.expect(JSON.stringify(cash_in_hold_payload.data.payment_menthod )== JSON.stringify(invoice_obj_tc_4.payment_config[0]));",
									"        });",
									"",
									"        pm.test(\"Payment method of invoice correctly:\" + cash_in_hold_payload.data.total_amount, function (){",
									"            pm.expect(JSON.stringify(cash_in_hold_payload.data.total_amount) == JSON.stringify(invoice_obj_tc_4.total_amount));",
									"        });",
									"",
									"            postman.setNextRequest(\"get_invoice_detail\"); // get_invoice_detail",
									"    } else {",
									"        pm.test(\"DON'T HAVE INVOICE TO PAYMENT\", function () {",
									"            m.expect(true).to.be.false;",
									"        });",
									"        postman.setNextRequest(null);",
									"     }",
									"}",
									"",
									"function handleTestcase6() {",
									"    list_invoice = list_current_invoice(jsData);",
									"    invoice_obj_tc_6 = pm.environment.get(\"C-invoice_obj\");",
									"    console.log(\"invoice_obj_tc_6\", invoice_obj_tc_6);",
									"  ",
									"    let cash_in_hold_payload = pm.environment.get(\"C-hookCashIn\");",
									"    pm.test(\"Got all invoice! \" + list_invoice.length, function () {",
									"        pm.expect(list_invoice.length > 0).to.be.true;",
									"    });",
									"",
									"        if(list_invoice.length > 0){",
									"            pm.test(\"paymet status of invoice coreectly with hook in hold\" + jsData.data.payment_status, function() {",
									"            pm.expect(\"fully_paid\" == invoice_obj_tc_6.payment_status);",
									"        }); ",
									"",
									"        pm.test(\"Payment method of invoice correctly:\" + cash_in_hold_payload.data.payment_menthod, function (){",
									"            pm.expect(JSON.stringify(cash_in_hold_payload.data.payment_menthod )== JSON.stringify(invoice_obj_tc_6.payment_config[0]));",
									"        });",
									"",
									"        pm.test(\"Payment method of invoice correctly:\" + cash_in_hold_payload.data.total_amount, function (){",
									"            pm.expect(JSON.stringify(cash_in_hold_payload.data.total_amount) == JSON.stringify(invoice_obj_tc_6.total_amount));",
									"        });",
									"",
									"            postman.setNextRequest(\"get_invoice_detail\"); // get_invoice_detail",
									"    } else {",
									"        pm.test(\"DON'T HAVE INVOICE TO PAYMENT\", function () {",
									"            m.expect(true).to.be.false;",
									"        });",
									"        postman.setNextRequest(null);",
									"     }",
									"}",
									"",
									"// Function to filter current invoices",
									"function list_current_invoice(jsData) {",
									"    let list_invoice = [];",
									"    for (let item in jsData.data) {",
									"        if (",
									"            jsData.data[item].status === \"active\" &&",
									"            jsData.data[item].total_amount !== 0 &&",
									"            jsData.data[item].payment_account_id !== 0 &&",
									"            jsData.data[item].account_id === 1002029 &&",
									"            jsData.data[item].payment_status === \"un_paid\" &&",
									"            new Date(jsData.data[item].created_at) > new Date(\"2024-04-01T16:00:00.000Z\")",
									"        ) {",
									"            list_invoice.push({",
									"                \"invoice_id\":jsData.data[item].id,",
									"                            \"entry_code\":jsData.data[item].entry_code,",
									"                            \"system_code\":jsData.data[item].system_code,",
									"                            \"created_at\":jsData.data[item].created_at,",
									"                            \"status\":jsData.data[item].status,",
									"                            \"payment_status\":jsData.data[item].payment_status,",
									"                            \"sub_total_amount\":jsData.data[item].sub_total_amount,",
									"                            \"total_amount\":jsData.data[item].total_amount,",
									"                            \"discount_amount\":jsData.data[item].discount_amount,",
									"                            \"total_tax_amount\":jsData.data[item].total_tax_amount,",
									"                            \"due_amount\":jsData.data[item].due_amount,",
									"                            \"paid_amount\":jsData.data[item].paid_amount,",
									"                            \"entry_type\":jsData.data[item].entry_type,",
									"                            \"description\":jsData.data[item].description,",
									"                            \"value_at\":jsData.data[item].value_at,",
									"                            \"due_at\":jsData.data[item].due_at,",
									"                            \"account_id\":jsData.data[item].account_id,",
									"                            \"tax_type\":jsData.data[item].tax_type,",
									"                            \"email\":jsData.data[item].email,",
									"                            \"payment_config\":jsData.data[item].payment_config,",
									"                            \"contact_id\":jsData.data[item].contact_id,",
									"                            \"contact_name\":jsData.data[item].contact_info.contact_name,",
									"                            \"contact_phone\":jsData.data[item].contact_info.contact_phone,",
									"                            \"payment_account_id\":jsData.data[item].payment_account_id            ",
									"            });",
									"        }",
									"    }",
									"    return list_invoice;",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"} else {",
									"    console.log(\"Can't get list invoice, end test\", jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let page = pm.environment.get(\"C-page\");",
									"",
									"if(!page){",
									"    page = 1;",
									"    pm.environment.set(\"C-page\",page);",
									"",
									"    let page_size = 700;",
									"    pm.environment.set(\"C-page_size\",page_size);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{finan_base_url}}/finan-ledger/api/v1/invoice/list?branch_id={{C-branch_id}}&page={{C-page}}&page_size={{C-page_size}}",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"invoice",
								"list"
							],
							"query": [
								{
									"key": "branch_id",
									"value": "{{C-branch_id}}"
								},
								{
									"key": "page",
									"value": "{{C-page}}"
								},
								{
									"key": "page_size",
									"value": "{{C-page_size}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get_invoice_detail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = JSON.parse(responseBody);",
									"",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    pm.environment.set(\"C-invoice_de\",jsData.data);",
									"",
									"    let updated_at_of_invoice = jsData.data.updated_at.substring(0, jsData.data.updated_at.lastIndexOf(\".\"));",
									"            console.log(\"updated_at_of_invoice\", updated_at_of_invoice);",
									"",
									"    pm.environment.set(\"C-updated_at_of_invoice_trim\",updated_at_of_invoice);",
									"",
									"       ",
									"    let invoice_obj = pm.environment.get(\"C-invoice_obj\");",
									"    pm.environment.set(\"C-system_code\", jsData.data.system_code);",
									"    ",
									"    switch(testcase){",
									"    case 2:",
									"    pm.test(\"entry_code of invoice correctly! \" + invoice_obj.entry_code, function () {",
									"        pm.expect(invoice_obj.entry_code == jsData.data.entry_code).to.be.true;",
									"    });",
									"",
									"    pm.test(\"sub_total_amount of invoice correctly! \" + invoice_obj.sub_total_amount, function () {",
									"        pm.expect(invoice_obj.sub_total_amount == jsData.data.sub_total_amount).to.be.true;",
									"    });",
									"",
									"    pm.test(\"contact_id of invoice correctly! \" + invoice_obj.contact_id, function () {",
									"        pm.expect(invoice_obj.contact_id == jsData.data.contact_id).to.be.true;",
									"    });",
									"",
									"    pm.test(\"email of invoice correctly! \" + invoice_obj.email, function () {",
									"        pm.expect(invoice_obj.email == jsData.data.email).to.be.true;",
									"    });",
									"",
									"",
									"    pm.test(\"due_at of invoice correctly! \" + invoice_obj.due_at, function () {",
									"        pm.expect(invoice_obj.due_at.substring(0,19) == jsData.data.due_at.substring(0,19)).to.be.true;",
									"    });",
									"",
									"    pm.test(\"description of invoice correctly! \" + invoice_obj.description, function () {",
									"        pm.expect(invoice_obj.description == jsData.data.description).to.be.true;",
									"    });",
									"",
									"    pm.test(\"tax_type of invoice correctly! \" + invoice_obj.tax_type, function () {",
									"        pm.expect(invoice_obj.tax_type == jsData.data.tax_type).to.be.true;",
									"    });",
									"",
									"",
									"    pm.test(\"status of invoice correctly! \" + invoice_obj.status, function () {",
									"        pm.expect(invoice_obj.status == jsData.data.status).to.be.true;",
									"    });",
									"    postman.setNextRequest(\"get_list_posting\"); // get_list_posting",
									"    break;",
									"    case 4: ",
									"    let cash_in_hold_payload = pm.environment.get(\"C-hookCashIn\");",
									"    console.log(\"cash_in_hold_payload\", cash_in_hold_payload.data.payment_method);",
									"",
									"    pm.test(\"paymet status of invoice coreectly with hook in hold is un_paid\", function() {",
									"        pm.expect(\"un_paid\" == jsData.data.payment_status);",
									"    }); ",
									"    ",
									"    pm.test(\"Payment method of invoice correctly:\" + cash_in_hold_payload.data.payment_method, function (){",
									"        pm.expect(cash_in_hold_payload.data.payment_menthod == jsData.data.payment_config[0]);",
									"    });",
									"",
									"     pm.test(\"Payment method of invoice correctly:\" + cash_in_hold_payload.data.total_amount, function (){",
									"        pm.expect(cash_in_hold_payload.data.total_amount == jsData.data.total_amount);",
									"    });",
									"    postman.setNextRequest(\"get_list_posting\"); // get_list_posting",
									"",
									"    ",
									"    break;",
									"    case 6: ",
									"    cash_in_release_payload = pm.environment.get(\"C-hookCashInRelease\");",
									"    pm.test(\"paymet status of invoice coreectly with hook in release \", function() {",
									"        pm.expect(\"fully_paid\" == jsData.data.payment_status);",
									"    }); ",
									"",
									"    pm.test(\"Payment method of invoice correctly:\" + cash_in_release_payload.data.payment_menthod, function (){",
									"        pm.expect(cash_in_release_payload.data.payment_menthod == jsData.data.payment_config[0]);",
									"    });",
									"",
									"     pm.test(\"Total_amount of invoice correctly:\" + cash_in_release_payload.data.total_amount, function (){",
									"        pm.expect(cash_in_release_payload.data.total_amount) == jsData.data.total_amount});",
									"    postman.setNextRequest(\"get_list_posting\"); // get_list_posting",
									"",
									"    ",
									"    break;",
									"    default:",
									"        console.log(\"Missing flow, end test\");",
									"        postman.setNextRequest(null);",
									"    break;",
									"",
									"}",
									"",
									"    postman.setNextRequest(\"get_list_posting\"); // get_list_posting",
									"",
									"    ",
									"} else {",
									"    console.log(\"Can't get internal contact detail, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let invoice_obj = pm.environment.get(\"C-invoice_obj\");",
									"let invoice_id = invoice_obj.invoice_id;",
									"console.log(\"view detail invoice: \" + invoice_id);",
									"",
									"pm.environment.set(\"C-invoice_id\",invoice_id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{finan_base_url}}/finan-ledger/api/v1/invoice/detail/{{C-invoice_id}}?branch_id={{C-branch_id}}",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"invoice",
								"detail",
								"{{C-invoice_id}}"
							],
							"query": [
								{
									"key": "branch_id",
									"value": "{{C-branch_id}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "posting",
			"item": [
				{
					"name": "get_list_posting",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = JSON.parse(responseBody);",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let list_account_coa = pm.environment.get(\"C-list_account_coa\");",
									"    // console.log(\"list_account_coa\", list_account_coa);",
									"    let total_posting = null;",
									"    try {",
									"        total_posting = jsData.meta.total_rows;",
									"    } catch {",
									"        console.log(\"currently, this branch with null data\");",
									"    }",
									"    console.log(\"total_posting\", total_posting);",
									"    //  list_account_coa = pm.environment.get(\"C-list_account_coa\");",
									"    let account_receivable = list_account_coa[0].account_receivable;",
									"    let processing_cash_in = list_account_coa[0].processing_cash_in;",
									"    let processing_cash_out = list_account_coa[0].processing_cash_out;",
									"    let account_va_bank = list_account_coa[0].account_va_bank;",
									"    let updated_at_of_invoice_trim = pm.environment.get(\"C-updated_at_of_invoice_trim\");",
									"    console.log(\"updated_at_of_invoice_trim\", updated_at_of_invoice_trim);",
									"    ",
									"",
									"    switch(testcase){",
									"        case 2:",
									"            pm.test(\"Got all posting! \" + total_posting, function () {",
									"                pm.expect(total_posting != null).to.be.true;",
									"            });",
									"            pm.environment.set(\"C-old_total_posting_tc_2\", total_posting);",
									"            ",
									"            postman.setNextRequest(\"get_report_cash_flow\"); // get_report_cash_flow",
									"            break;",
									"        case 4:",
									"          let cash_in_hold_payload = pm.environment.get(\"C-hookCashIn\");",
									"            console.log(\"cash_in_hold_payload\", cash_in_hold_payload);",
									"            payment_obj = pm.environment.get(\"C-payment_obj\");",
									"            ",
									"            old_total_posting = pm.environment.get(\"C-old_total_posting_tc_2\");",
									"            pm.test(\"Total record increase 2\", function () {",
									"                console.log(\"old: \" + old_total_posting);",
									"                console.log(\"act: \" + total_posting);",
									"                pm.expect(total_posting == old_total_posting + 2).to.be.true;",
									"            });",
									"            pm.environment.set(\"C-old_total_posting_tc_4\", total_posting);",
									"",
									"            let list_hook_hold_posting = [];",
									"            for (let i = 0; i < jsData.data.length; i++) {",
									"                if (jsData.data[i].value_at.includes(updated_at_of_invoice_trim",
									"                )) {",
									"                    list_hook_hold_posting.push(jsData.data[i]);",
									"                }",
									"            }",
									"            pm.environment.set(\"C-list_hook_hold_posting\", list_hook_hold_posting);",
									"",
									"",
									"            let acc_rec_hold_post = [];",
									"            for (let item of list_hook_hold_posting) {",
									"                if (item.account_id == account_receivable.id) {",
									"                    acc_rec_hold_post.push(item);",
									"                }",
									"            }",
									"            pm.environment.set(\"C-acc_rec_hold_post\", acc_rec_hold_post);",
									"",
									"            let acc_pro_ci_hold_post = [];",
									"            for (let item of list_hook_hold_posting) {",
									"                if (item.account_id == processing_cash_in.id) {",
									"                    acc_pro_ci_hold_post.push(item);",
									"                }",
									"            }",
									"            pm.environment.set(\"C-acc_pro_ci_hold_post\", acc_pro_ci_hold_post);",
									"",
									"            pm.test(\"Verify amount of account receivable in posting \" + cash_in_hold_payload.data.total_amount, function(){",
									"                pm.expect(cash_in_hold_payload.data.total_amount).to.eql(acc_rec_hold_post[0].amount);",
									"            });",
									"",
									"            pm.test(\"Verify this is credit acc - isCredit = \" + acc_rec_hold_post[0].is_credit, function(){",
									"                pm.expect(acc_rec_hold_post[0].is_credit).to.be.true;",
									"            });",
									"",
									"            pm.test(\"Verify amount of account processing cash in in posting \" + cash_in_hold_payload.data.net_amount, function(){",
									"                pm.expect(cash_in_hold_payload.data.net_amount).to.eql(acc_pro_ci_hold_post[0].amount);",
									"            });",
									"",
									"            pm.test(\"Verify this is not credit acc - isCredit = \" + acc_pro_ci_hold_post[0].is_credit, function(){",
									"                pm.expect(acc_pro_ci_hold_post[0].is_credit).to.be.false;",
									"            });",
									"",
									"            postman.setNextRequest(\"get_report_cash_flow\"); // get_report_cash_flow",
									"            break;",
									"            ",
									"        case 6:",
									"            let cash_in_release_payload = pm.environment.get(\"C-hookCashInRelease\");",
									"            payment_obj = pm.environment.get(\"C-payment_obj\");",
									"            old_total_posting = pm.environment.get(\"C-old_total_posting_tc_4\");",
									"            pm.test(\"Total record increase 4\", function () {",
									"                console.log(\"old: \" + old_total_posting);",
									"                console.log(\"act: \" + total_posting);",
									"                pm.expect(total_posting == old_total_posting + 4).to.be.true;",
									"            });",
									"",
									"            let list_hook_release_posting = [];",
									"        for (let item of jsData.data) {",
									"            if (item.value_at.includes(updated_at_of_invoice_trim)) {",
									"                list_hook_release_posting.push(item);",
									"            }",
									"        }",
									"        console.log(\"list_hook_release_posting\", list_hook_release_posting);",
									"",
									"        let acc_pi_release_post = [];",
									"        for (let item of list_hook_release_posting) {",
									"            if (item.account_id === processing_cash_in.id) {",
									"                acc_pi_release_post.push(item);",
									"            }",
									"        }",
									"        console.log(\"acc_pi_release_post\", acc_pi_release_post);  ",
									"",
									"        let acc_po_release_post = [];",
									"        for (let item of list_hook_release_posting) {",
									"            if (item.account_id === processing_cash_out.id) {",
									"                acc_po_release_post.push(item);",
									"            }",
									"        }",
									"        console.log(\"acc_po_release_post\", acc_po_release_post); ",
									"",
									"        let acc_va_release_post = [];",
									"        for (let item of list_hook_release_posting) {",
									"            if (item.account_id === account_va_bank.id) {",
									"                acc_va_release_post.push(item);",
									"            }",
									"        }",
									"        console.log(\"acc_va_release_post\", acc_va_release_post); ",
									"",
									"        pm.test(\"Verify amount of processing_cash_in in posting \" + cash_in_release_payload.data.net_amount, function(){",
									"                pm.expect(cash_in_release_payload.data.net_amount == acc_pi_release_post[0].amount);",
									"            console.log(\"acc_rec_hold_post.amount\", acc_pi_release_post[0].amount);",
									"            console.log(\"cash_in_release_payload.data.net_amount\", cash_in_release_payload.data.net_amount);",
									"            });",
									"",
									"",
									"        pm.test(\"Verify amount of processing_cash_in in posting \" + cash_in_release_payload.data.net_amount, function(){",
									"                pm.expect(cash_in_release_payload.data.net_amount == acc_pi_release_post[0].amount);",
									"            console.log(\"acc_rec_hold_post.amount\", acc_pi_release_post[0].amount);",
									"            console.log(\"cash_in_release_payload.data.net_amount\", cash_in_release_payload.data.net_amount);",
									"            });",
									"",
									"            pm.test(\"Verify this is credit acc - isCredit = \" + acc_pi_release_post[0].is_credit, function(){",
									"                pm.expect(true == acc_pi_release_post[0].is_credit);",
									"            console.log(\"acc_rec_hold_post[0].is_credit\", acc_pi_release_post[0].is_credit);",
									"            });",
									"",
									"",
									"",
									"        pm.test(\"Verify amount of processing_cash_in in posting \" + cash_in_release_payload.data.net_amount, function(){",
									"                pm.expect(cash_in_release_payload.data.net_amount == acc_va_release_post[0].amount);",
									"            console.log(\"acc_va_release_post.amount\", acc_va_release_post[0].amount);",
									"            console.log(\"cash_in_release_payload.data.net_amount\", cash_in_release_payload.data.net_amount);",
									"            });",
									"",
									"        pm.test(\"Verify this is not credit acc - isCredit = \" + acc_va_release_post[0].is_credit, function(){",
									"                pm.expect(false == acc_va_release_post[0].is_credit);",
									"            console.log(\"acc_va_release_post[0].is_credit\", acc_va_release_post[0].is_credit);",
									"            })",
									"            let po_credit_true = [];",
									"            for (let item of acc_po_release_post) {",
									"                if (item.is_credit === true) {",
									"                    po_credit_true.push(item); ",
									"                }",
									"            }",
									"            console.log(\"po_credit_true\", po_credit_true);",
									"        pm.test(\"Verify amount processing_cash_out credit in posting \" + cash_in_release_payload.data.net_amount, function(){",
									"                pm.expect(cash_in_release_payload.data.net_amount == po_credit_true[0].amount);",
									"                console.log(\"po_credit_true[0].amount\", po_credit_true[0].amount);",
									"                console.log(\"cash_in_release_payload.data.net_amount\", cash_in_release_payload.data.net_amount);",
									"            }); ",
									"",
									"            let po_credit_false = [];",
									"            for (let item of acc_po_release_post) {",
									"                if (item.is_credit === false) {",
									"                    po_credit_false.push(item); ",
									"                }",
									"            }",
									"            console.log(\"po_credit_false\", po_credit_false);",
									"            pm.test(\"Verify amount of processing_cash_out debit in posting \" + cash_in_release_payload.data.net_amount, function(){",
									"                pm.expect(cash_in_release_payload.data.net_amount == po_credit_false[0].amount);",
									"                console.log(\"po_credit_false[0].amount\", po_credit_false[0].amount);",
									"                console.log(\"cash_in_release_payload.data.net_amount\", cash_in_release_payload.data.net_amount);",
									"            });",
									"",
									"            postman.setNextRequest(\"get_report_cash_flow\"); // get_report_cash_flow",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get list posting, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let page = pm.environment.get(\"C-page\");",
									"",
									"if(!page){",
									"    page = 1;",
									"    pm.environment.set(\"C-page\",page);",
									"",
									"    let page_size = 1000;",
									"    pm.environment.set(\"C-page_size\",page_size);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{finan_base_url}}/finan-ledger/api/v1/posting/list?branch_id={{C-branch_id}}&page={{C-page}}&page_size={{C-page_size}}&search=&sort=",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"posting",
								"list"
							],
							"query": [
								{
									"key": "branch_id",
									"value": "{{C-branch_id}}"
								},
								{
									"key": "page",
									"value": "{{C-page}}"
								},
								{
									"key": "page_size",
									"value": "{{C-page_size}}"
								},
								{
									"key": "search",
									"value": ""
								},
								{
									"key": "sort",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "report",
			"item": [
				{
					"name": "get_report_cash_flow",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ============================= sort by key",
									"function sortByKey(array, key, type) {",
									"    if(type == \"asc\"){",
									"        return array.sort(function(a, b) {",
									"            var x = a[key]; var y = b[key];",
									"            return ((x > y) ? -1 : ((x < y) ? 1 : 0));",
									"        });",
									"    } else {",
									"        return array.sort(function(a, b) {",
									"            var x = a[key]; var y = b[key];",
									"            return ((x < y) ? -1 : ((x > y) ? 1 : 0));",
									"        });",
									"    }",
									"}",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let report_cash_flow = null;",
									"    try {",
									"        report_cash_flow = jsData.data;",
									"        /**",
									"         * db_data",
									"         * sum_card_data",
									"         * top_income_categories_data",
									"         * full_income_categories_data",
									"         * top_expense_categories_data",
									"         * full_expense_categories_data",
									"         */",
									"    } catch {",
									"        console.log(\"Can't get report cash_flow data\");",
									"    }",
									"",
									"    let total_income = 0, total_expense = 0;",
									"    let income_list = [], expense_list = [];",
									"    let exp_sum_card_data;",
									"    let full_income_categories_data;",
									"    if(\"full_income_categories_data\" in jsData.data){",
									"        full_income_categories_data = JSON.parse(JSON.stringify(jsData.data.full_income_categories_data));",
									"    } else {",
									"        full_income_categories_data = [];",
									"    }",
									"    let full_expense_categories_data;",
									"    if(\"full_expense_categories_data\" in jsData.data){",
									"        full_expense_categories_data = JSON.parse(JSON.stringify(jsData.data.full_expense_categories_data));",
									"    } else {",
									"        full_expense_categories_data = [];",
									"    }",
									"    switch(testcase){",
									"        case 2:",
									"            pm.environment.set(\"C-report_cash_flow\",report_cash_flow);",
									"           ",
									"",
									"            postman.setNextRequest(\"get_report_account\"); // get_list_transaction, get_report_account",
									"            break;",
									"        case 4:",
									"            ",
									"",
									"            postman.setNextRequest(\"get_report_account\"); // get_report_account",
									"            break;",
									"",
									"        case 6:",
									"            ",
									"            postman.setNextRequest(\"get_report_account\"); // get_report_account",
									"            break;    ",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get report cash_flow, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"// lấy full tháng hiện tại",
									"let today = new Date();",
									"let start_current_month = new Date(today.getFullYear(), today.getMonth(), 1);",
									"let end_current_month = new Date(today.getFullYear(), today.getMonth() + 1, 1);",
									"",
									"// lấy full tháng trước",
									"let start_last_month = new Date(today.getFullYear(), today.getMonth() - 1, 1);",
									"let end_last_month = new Date(today.getFullYear(), today.getMonth(), 1);",
									"",
									"// lấy full ngày hiện tại",
									"// let firstDay = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0 ,0, 0);",
									"// let lastDay = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 23, 59 ,59, 0);",
									"",
									"// lấy n ngày đến hiện tại",
									"// let firstDayTimestamp = Math.floor(firstDay.getTime()/1000) - 2*24*60*60;",
									"// let start_day_ago = new Date(firstDayTimestamp*1000);",
									"",
									"let current_period_start = start_current_month.toISOString();",
									"let current_period_end = end_current_month.toISOString();",
									"let previous_period_start = start_last_month.toISOString();",
									"let previous_period_end = end_last_month.toISOString();",
									"",
									"/**",
									" * currently, display error if missing previous_period_start & previous_period_end or them = \"\";",
									" */",
									"let payload = {",
									"    \"branch_id\": parseInt(pm.environment.get(\"C-branch_id\")),",
									"    \"current_period_start\": current_period_start,",
									"    \"current_period_end\": current_period_end,",
									"    \"previous_period_start\": previous_period_start,",
									"    \"previous_period_end\": previous_period_end",
									"    // \"timezone\": \"Asia/Ho_Chi_Minh\" // UTC, Asia/Ho_Chi_Minh == UTC+07:00",
									"}",
									"",
									"console.log(\"payload: \",payload);",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));",
									"",
									"pm.environment.set(\"C-current_period_start\",current_period_start);",
									"pm.environment.set(\"C-current_period_end\",current_period_end);",
									"pm.environment.set(\"C-previous_period_start\",previous_period_start);",
									"pm.environment.set(\"C-previous_period_end\",previous_period_end);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finan_base_url}}/finan-ledger/api/v1/report/cash-flow",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"report",
								"cash-flow"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_report_account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    const jsData = pm.response.json();",
									"",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let report_account = [];",
									"",
									"    try {",
									"        report_account = jsData.data;",
									"    } catch (error) {",
									"        console.log(\"Error while parsing report cash_flow data:\", error.message);",
									"    }",
									"",
									"    switch(testcase){",
									"        case 2:",
									"            pm.environment.set(\"C-report_account\",report_account);",
									"",
									"            let coa = pm.environment.get(\"C-coa\");",
									"            let cash_n_bank = [];",
									"            for(let i in coa){",
									"                for(let j in coa[i].sub_group){",
									"                    for(let k in coa[i].sub_group[j].accounts){",
									"                        if(coa[i].sub_group[j].sub_group_value == \"cash_and_bank\"){ ",
									"                            cash_n_bank.push(coa[i].sub_group[j].accounts[k]);",
									"                        }",
									"                    }",
									"                }",
									"            }",
									"",
									"            // pm.test(\"Show all account in cash_and_bank\", function () {",
									"            //     pm.expect(report_account.length > 0).to.be.true;",
									"            // });",
									"",
									"            console.log(\"cash_n_bank: \" + JSON.stringify(cash_n_bank.length));",
									"            console.log(\"report_account: \" + JSON.stringify(report_account.length));",
									"",
									"            postman.setNextRequest(\"get_report_account_receivable_paid\");",
									"            break;",
									"        case 4:",
									"        ",
									"            postman.setNextRequest(\"get_report_account_receivable_paid\");",
									"              break;",
									"        case 6:",
									"            let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"            let cash_in_release = pm.environment.get(\"C-hookCashInRelease\");",
									"            cash_in_release_total_fee = cash_in_release.data.total_fee;",
									"            console.log(\"cash_in_release\", cash_in_release);",
									"            let list_credit_account = pm.environment.get(\"C-list_credit_account\");",
									"            let old_report_account = pm.environment.get(\"C-report_account\");",
									"",
									"            if (list_credit_account && old_report_account) {",
									"                for(let j in report_account){",
									"                    for(let k in old_report_account){",
									"                        if(report_account[j].id == old_report_account[k].id && report_account[j].id == tnx_obj.account_debit){",
									"                            isFound = true;",
									"",
									"                            pm.test(\"Account \" + tnx_obj.account_debit+ \" increase debit_amount \" + tnx_obj.amount, function () {",
									"                                console.log(\"old debit_amount: \" + old_report_account[k].debit_amount);",
									"                                console.log(\"amount: \" + tnx_obj.amount - cash_in_release_total_fee);",
									"                                console.log(\"expected: \" + (old_report_account[k].debit_amount + tnx_obj.amount));",
									"                                console.log(\"new debit_amount: \" + report_account[j].debit_amount);",
									"                                pm.expect(report_account[j].debit_amount.toFixed(2) == (old_report_account[k].debit_amount + tnx_obj.amount - cash_in_release_total_fee).toFixed(2)).to.be.true;",
									"                            });",
									"                            break;",
									"                        }",
									"                    }",
									"                }",
									"            } else {",
									"                console.log(\"Error: list_credit_account or old_report_account is not defined.\");",
									"            }",
									"",
									"            postman.setNextRequest(\"get_report_account_receivable_paid\");",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get report cash_flow, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"// lấy full tháng hiện tại",
									"let today = new Date();",
									"// let firstDay = new Date(today.getFullYear(), today.getMonth(), 1);",
									"let lastDay = new Date(today.getFullYear(), today.getMonth() + 1, 1);",
									"",
									"// lấy full n tháng trước",
									"let firstDay = new Date(today.getFullYear(), today.getMonth() - 3, 1);",
									"// let lastDay = new Date(today.getFullYear(), today.getMonth(), 1);",
									"",
									"// lấy full ngày hiện tại",
									"// let firstDay = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0 ,0, 0);",
									"// let lastDay = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 23, 59 ,59, 0);",
									"",
									"// lấy n ngày đến hiện tại",
									"// let firstDayTimestamp = Math.floor(firstDay.getTime()/1000) - 2*24*60*60;",
									"// let start_day_ago = new Date(firstDayTimestamp*1000);",
									"",
									"let start_time = firstDay.toISOString();",
									"let end_time = lastDay.toISOString();",
									"",
									"console.log(\"start_time: \" + start_time);",
									"console.log(\"end_time: \" + end_time);",
									"",
									"pm.environment.set(\"C-start_time\",start_time);",
									"pm.environment.set(\"C-end_time\",end_time);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"branch_id\": {{C-branch_id}},\n    \"current_period_start\": \"{{C-current_period_start}}\",\n    \"current_period_end\": \"{{C-current_period_end}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finan_base_url}}/finan-ledger/api/v1/report/account-receivable-payable-lifetime",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"report",
								"account-receivable-payable-lifetime"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_report_account_receivable_paid",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let start_time = pm.environment.get(\"C-start_time\");",
									"let end_time = pm.environment.get(\"C-end_time\");",
									"",
									"console.log(\"start_time: \" + start_time);",
									"console.log(\"end_time: \" + end_time);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let paid_account_receivable = null;",
									"    try {",
									"        paid_account_receivable = jsData.data.paid_amount_by_time_range;",
									"    } catch {",
									"        console.log(\"Can't get data\");",
									"    }",
									"",
									"    switch(testcase){",
									"        case 2: case 4: ",
									"            pm.test(\"Got paid_account_receivable data\", function () {",
									"                pm.expect(paid_account_receivable != null).to.be.true;",
									"            });",
									"            pm.environment.set(\"C-paid_account_receivable\",paid_account_receivable);",
									"            // console.log(\"paid_account_receivable: \",paid_account_receivable);",
									"",
									"            postman.setNextRequest(\"get_report_account_receivable_unpaid\"); ",
									"             //get_report_account_receivable_unpaid",
									"            break;",
									"        case 6:",
									"            let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"            let old_data = pm.environment.get(\"C-paid_account_receivable\");",
									"            let paid_amount = parseFloat(tnx_obj.amount);",
									"            console.log(\"paid_amount: \" + (paid_amount + old_data));",
									"",
									"            // unpaid_total",
									"            // pm.test(\"Total paid increase \" + paid_amount, function () {",
									"            //     console.log(\"old: \" + old_data);",
									"            //     console.log(\"new: \" + paid_account_receivable);",
									"            //     pm.expect(paid_account_receivable.toFixed(2) == (paid_amount + old_data).toFixed(2)).to.be.true;",
									"            // });",
									"            ",
									"",
									"            postman.setNextRequest(\"get_report_account_receivable_unpaid\"); //get_report_account_receivable_unpaid",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get report account receivable unpaid, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"branch_id\": {{C-branch_id}},\n    \"current_period_start\": \"{{C-start_time}}\",\n    \"current_period_end\": \"{{C-end_time}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finan_base_url}}/finan-ledger/api/v1/report/account-receivable-card-paid",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"report",
								"account-receivable-card-paid"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_report_account_receivable_unpaid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let unpaid_account_receivable = null;",
									"    try {",
									"        unpaid_account_receivable = jsData.data.unpaid_amount_lifetime_categories;",
									"    } catch {",
									"        console.log(\"Can't get data\");",
									"    }",
									"",
									"    switch(testcase){",
									"        case 2: case 4:",
									"            pm.test(\"Got unpaid_account_receivable data\", function () {",
									"                pm.expect(unpaid_account_receivable != null).to.be.true;",
									"            });",
									"            pm.environment.set(\"C-unpaid_account_receivable\",unpaid_account_receivable);",
									"            // console.log(\"unpaid_account_receivable: \",unpaid_account_receivable);",
									"",
									"            postman.setNextRequest(\"get_report_account_receivable_customer\"); //get_report_account_receivable_customer",
									"            break;",
									"        case 6:",
									"            let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"            let invoice_obj = pm.environment.get(\"C-invoice_obj\");",
									"            let old_data = pm.environment.get(\"C-unpaid_account_receivable\");",
									"            let paid_amount = parseFloat(tnx_obj.amount);",
									"",
									"            // unpaid_total",
									"            // pm.test(\"Total unpaid decrease \" + paid_amount, function () {",
									"            //     console.log(\"old: \" + old_data.unpaid_total);",
									"            //     console.log(\"new: \" + unpaid_account_receivable.unpaid_total);",
									"            //     pm.expect(unpaid_account_receivable.unpaid_total.toFixed(2) == (old_data.unpaid_total - paid_amount).toFixed(2)).to.be.true;",
									"            // });",
									"",
									"            let due_date = new Date(invoice_obj.due_at);",
									"            let due_date_timestamp = Math.floor(due_date.getTime()/1000);",
									"            let today = new Date();",
									"            let today_timestamp = Math.floor(today.getTime()/1000);",
									"            let due_type;",
									"            // console.log(\"debug: \" + (due_date_timestamp - today_timestamp));",
									"            if(due_date_timestamp > today_timestamp){",
									"                due_type = \"undue\";",
									"            } else {",
									"                if(today_timestamp - due_date_timestamp > 60*24*60*60){",
									"                    due_type = \"overdue_over\";",
									"                } else if (today_timestamp - due_date_timestamp > 30*24*60*60){",
									"                    due_type = \"overdue_between\";",
									"                } else {",
									"                    due_type = \"overdue_less\";",
									"                }",
									"            }",
									"            pm.environment.set(\"C-due_type\",due_type);",
									"",
									"            // console.log(\"old: \",old_data);",
									"            // console.log(\"new: \",unpaid_account_receivable);",
									"            switch(due_type){",
									"                case \"undue\":",
									"                    // unpaid_due",
									"                    // pm.test(\"unpaid_due decrease \" + paid_amount, function () {",
									"                    //     console.log(\"old: \" + old_data.unpaid_due);",
									"                    //     console.log(\"expected: \" + (old_data.unpaid_due - paid_amount));",
									"                    //     console.log(\"new: \" + unpaid_account_receivable.unpaid_due);",
									"                    //     pm.expect(unpaid_account_receivable.unpaid_due.toFixed(2) == (old_data.unpaid_due - paid_amount).toFixed(2)).to.be.true;",
									"                    // });",
									"",
									"                    // unpaid_overdue_less",
									"                    pm.test(\"nothing happen unpaid_overdue_less\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_less == old_data.unpaid_overdue_less).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_between",
									"                    pm.test(\"nothing happen unpaid_overdue_between\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_between == old_data.unpaid_overdue_between).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_over",
									"                    pm.test(\"nothing happen unpaid_overdue_over\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_over == old_data.unpaid_overdue_over).to.be.true;",
									"                    });",
									"                    break;",
									"                case \"overdue_less\":",
									"                    // unpaid_due",
									"                    pm.test(\"nothing happen unpaid_due\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_due == old_data.unpaid_due).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_less",
									"                    pm.test(\"unpaid_overdue_less decrease \" + paid_amount, function () {",
									"                        console.log(\"old: \" + old_data.unpaid_overdue_less);",
									"                        console.log(\"new: \" + unpaid_account_receivable.unpaid_overdue_less);",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_less.toFixed(2) == (old_data.unpaid_overdue_less - paid_amount).toFixed(2)).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_between",
									"                    pm.test(\"nothing happen unpaid_overdue_between\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_between == old_data.unpaid_overdue_between).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_over",
									"                    pm.test(\"nothing happen unpaid_overdue_over\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_over == old_data.unpaid_overdue_over).to.be.true;",
									"                    });",
									"                    break;",
									"                case \"overdue_between\":",
									"                    // unpaid_due",
									"                    pm.test(\"nothing happen unpaid_due\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_due == old_data.unpaid_due).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_less",
									"                    pm.test(\"nothing happen unpaid_overdue_less\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_less == old_data.unpaid_overdue_less).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_between",
									"                    pm.test(\"unpaid_overdue_between decrease \" + paid_amount, function () {",
									"                        console.log(\"old: \" + old_data.unpaid_overdue_between);",
									"                        console.log(\"new: \" + unpaid_account_receivable.unpaid_overdue_between);",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_between.toFixed(2) == (old_data.unpaid_overdue_between - paid_amount).toFixed(2)).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_over",
									"                    pm.test(\"nothing happen unpaid_overdue_over\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_over == old_data.unpaid_overdue_over).to.be.true;",
									"                    });",
									"                    break;",
									"                case \"overdue_over\":",
									"                    // unpaid_due",
									"                    pm.test(\"nothing happen unpaid_due\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_due == old_data.unpaid_due).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_less",
									"                    pm.test(\"nothing happen unpaid_overdue_less\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_less == old_data.unpaid_overdue_less).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_between",
									"                    pm.test(\"unpaid_overdue_between decrease\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_between == old_data.unpaid_overdue_between).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_over",
									"                    pm.test(\"unpaid_overdue_over decrease \" + paid_amount, function () {",
									"                        console.log(\"old: \" + old_data.unpaid_overdue_over);",
									"                        console.log(\"new: \" + unpaid_account_receivable.unpaid_overdue_over);",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_over.toFixed(2) == (old_data.unpaid_overdue_over - paid_amount).toFixed(2)).to.be.true;",
									"                    });",
									"                    break;",
									"                default:",
									"                    pm.test(\"Missing due type\", function () {",
									"                        pm.expect(false).to.be.true;",
									"                    });",
									"                    break;",
									"            }",
									"",
									"            postman.setNextRequest(\"get_report_account_receivable_customer\"); //get_report_account_receivable_customer",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get report account receivable unpaid, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"branch_id\": {{C-branch_id}},\n    \"due_days\": 30\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finan_base_url}}/finan-ledger/api/v1/report/account-receivable-card-unpaid",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"report",
								"account-receivable-card-unpaid"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_report_account_receivable_customer",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let page = pm.environment.get(\"C-page\");",
									"",
									"if(!page){",
									"    page = 1;",
									"    pm.environment.set(\"C-page\",page);",
									"",
									"    let page_size = 50;",
									"    pm.environment.set(\"C-page_size\",page_size);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = JSON.parse(responseBody);",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let total_pages = jsData.meta.total_pages;",
									"    let page = pm.environment.get(\"C-page\");",
									"    let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"",
									"    let list_report_customer, old_list_report_customer;",
									"    switch(testcase){",
									"        case 2: case 4:",
									"            list_report_customer = pm.environment.get(\"C-list_report_customer\");",
									"            if(!list_report_customer){",
									"                list_report_customer = [];",
									"            }",
									"            break;",
									"        case 6: case 8:",
									"            old_list_report_customer = pm.environment.get(\"C-old_list_report_customer\");",
									"            if(!old_list_report_customer){",
									"                old_list_report_customer = pm.environment.get(\"C-list_report_customer\");",
									"                pm.environment.unset(\"C-list_report_customer\");",
									"                pm.environment.set(\"C-old_list_report_customer\",old_list_report_customer);",
									"            }",
									"",
									"            list_report_customer = pm.environment.get(\"C-list_report_customer\");",
									"            if(!list_report_customer){",
									"                list_report_customer = [];",
									"            }",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow\");",
									"            break;",
									"    }",
									"",
									"    for(let item in jsData.data){",
									"        list_report_customer[list_report_customer.length] = {",
									"            \"contact_id\":jsData.data[item].contact_id,",
									"            \"unpaid_total\":jsData.data[item].unpaid_total,",
									"            \"unpaid_due\":jsData.data[item].unpaid_due,",
									"            \"unpaid_overdue_less\":jsData.data[item].unpaid_overdue_less,",
									"            \"unpaid_overdue_between\":jsData.data[item].unpaid_overdue_between,",
									"            \"unpaid_overdue_over\":jsData.data[item].unpaid_overdue_over,",
									"            \"full_count\":jsData.data[item].full_count,",
									"            \"contact_name\":jsData.data[item].contact_info.contact_name,",
									"            \"contact_phone\":jsData.data[item].contact_info.contact_phone",
									"        }",
									"    }",
									"    pm.environment.set(\"C-list_report_customer\",list_report_customer);",
									"",
									"    if(page >= total_pages){",
									"        // must clear page & page_size",
									"        pm.environment.unset(\"C-page\");",
									"        pm.environment.unset(\"C-page_size\");",
									"",
									"        let contact_id = pm.environment.get(\"C-contact_id\");",
									"        let invoice_obj = pm.environment.get(\"C-invoice_obj\");",
									"        let isFound = false, hasRecord = false;",
									"        let record_obj = null;",
									"        let due_type = pm.environment.get(\"C-due_type\");",
									"",
									"",
									"    ",
									"        switch(testcase){",
									"            case 2: case 4:",
									"                pm.test(\"Got all record! \" + list_report_customer.length, function () {",
									"                    pm.expect(list_report_customer.length > 0).to.be.true;",
									"                });",
									"",
									"                postman.setNextRequest(\"get_report_account_receivable_invoice\"); // get_report_account_receivable_invoice",
									"                break;",
									"        ",
									"",
									"            case 6: ",
									"                // let record_obj = null;",
									"                console.log(\"contact_id: \" + invoice_obj.contact_id);",
									"                for(let i in old_list_report_customer){",
									"                    if(old_list_report_customer[i].contact_id == invoice_obj.contact_id){",
									"                        record_obj = old_list_report_customer[i];",
									"                        break;",
									"                    }",
									"                }",
									"                // console.log(\"old_list_report_customer: \", old_list_report_customer);",
									"",
									"                // pm.test(\"Nothing happen with total record\", function () {",
									"                //     pm.expect(list_report_customer.length == old_list_report_customer.length).to.be.true;",
									"                // });",
									"",
									"                // let due_type = pm.environment.get(\"C-due_type\");",
									"                for(let i in list_report_customer){",
									"                    if(list_report_customer[i].contact_id == invoice_obj.contact_id){",
									"                        isFound = true;",
									"                        console.log(\"Found \" + list_report_customer[i].contact_name + ' - ' + list_report_customer[i].contact_phone);",
									"                        ",
									"                        pm.test(\"unpaid_total decrease \" + tnx_obj.amount, function () {",
									"                            console.log(\"old: \" + record_obj.unpaid_total);",
									"                            console.log(\"new: \" + list_report_customer[i].unpaid_total);",
									"                            pm.expect(list_report_customer[i].unpaid_total == (record_obj.unpaid_total - tnx_obj.amount).toFixed(2)).to.be.true;",
									"                        });",
									"",
									"                        switch(due_type){",
									"                            case \"undue\":",
									"                                // unpaid_due",
									"                                pm.test(\"unpaid_due decrease \" + tnx_obj.amount, function () {",
									"                                    console.log(\"old: \" + record_obj.unpaid_due);",
									"                                    console.log(\"new: \" + list_report_customer[i].unpaid_due);",
									"                                    pm.expect(list_report_customer[i].unpaid_due == (record_obj.unpaid_due - tnx_obj.amount).toFixed(2)).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_less",
									"                                pm.test(\"nothing happen unpaid_overdue_less\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_less == record_obj.unpaid_overdue_less).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_between",
									"                                pm.test(\"nothing happen unpaid_overdue_between\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_between == record_obj.unpaid_overdue_between).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_over",
									"                                pm.test(\"nothing happen unpaid_overdue_over\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_over == record_obj.unpaid_overdue_over).to.be.true;",
									"                                });",
									"                                break;",
									"                            case \"overdue_less\":",
									"                                // unpaid_due",
									"                                pm.test(\"nothing happen unpaid_due\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_due == record_obj.unpaid_due).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_less",
									"                                pm.test(\"unpaid_overdue_less decrease \" + tnx_obj.amount, function () {",
									"                                    console.log(\"old: \" + record_obj.unpaid_overdue_less);",
									"                                    console.log(\"new: \" + list_report_customer[i].unpaid_overdue_less);",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_less == (record_obj.unpaid_overdue_less - tnx_obj.amount).toFixed(2)).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_between",
									"                                pm.test(\"nothing happen unpaid_overdue_between\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_between == record_obj.unpaid_overdue_between).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_over",
									"                                pm.test(\"nothing happen unpaid_overdue_over\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_over == record_obj.unpaid_overdue_over).to.be.true;",
									"                                });",
									"                                break;",
									"                            case \"overdue_between\":",
									"                                // unpaid_due",
									"                                pm.test(\"nothing happen unpaid_due\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_due == record_obj.unpaid_due).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_less",
									"                                pm.test(\"nothing happen unpaid_overdue_less\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_less == record_obj.unpaid_overdue_less).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_between",
									"                                pm.test(\"unpaid_overdue_between decrease \" + tnx_obj.amount, function () {",
									"                                    console.log(\"old: \" + record_obj.unpaid_overdue_between);",
									"                                    console.log(\"new: \" + list_report_customer[i].unpaid_overdue_between);",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_between == (record_obj.unpaid_overdue_between - tnx_obj.amount).toFixed(2)).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_over",
									"                                pm.test(\"nothing happen unpaid_overdue_over\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_over == record_obj.unpaid_overdue_over).to.be.true;",
									"                                });",
									"                                break;",
									"                            case \"overdue_over\":",
									"                                // unpaid_due",
									"                                pm.test(\"nothing happen unpaid_due\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_due == record_obj.unpaid_due).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_less",
									"                                pm.test(\"nothing happen unpaid_overdue_less\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_less == record_obj.unpaid_overdue_less).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_between",
									"                                pm.test(\"nothing happen unpaid_overdue_between\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_between == record_obj.unpaid_overdue_between).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_over",
									"                                pm.test(\"unpaid_overdue_over decrease \" + tnx_obj.amount, function () {",
									"                                    console.log(\"old: \" + record_obj.unpaid_overdue_over);",
									"                                    console.log(\"new: \" + list_report_customer[i].unpaid_overdue_over);",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_over == (record_obj.unpaid_overdue_over - tnx_obj.amount).toFixed(2)).to.be.true;",
									"                                });",
									"                                break;",
									"                            default:",
									"                                pm.test(\"Missing due type\", function () {",
									"                                    pm.expect(false).to.be.true;",
									"                                });",
									"                                break;",
									"                        }",
									"                        break;",
									"                    }",
									"                }",
									"",
									"                pm.test(\"Found new product\", function () {",
									"                    pm.expect(isFound).to.be.true;",
									"                });",
									"",
									"                postman.setNextRequest(\"get_report_account_receivable_invoice\"); // get_report_account_receivable_invoice",
									"                break;",
									"",
									"            ///////////////",
									"            default:",
									"                console.log(\"Missing flow, end test\");",
									"                postman.setNextRequest(null);",
									"                break;",
									"        }",
									"    } else {",
									"        page++;",
									"        pm.environment.set(\"C-page\",page);",
									"",
									"        console.log(\"view next page (\" + page + \") to get more product\");",
									"        postman.setNextRequest(\"get_report_account_receivable_customer\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get list product, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"branch_id\": {{C-branch_id}},\n    \"due_days\": 30,\n    \"page\": {{C-page}},\n    \"page_size\": {{C-page_size}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finan_base_url}}/finan-ledger/api/v1/report/account-receivable-customer-unpaid",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"report",
								"account-receivable-customer-unpaid"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_report_account_receivable_invoice",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let page = pm.environment.get(\"C-page\");",
									"",
									"if(!page){",
									"    page = 1;",
									"    pm.environment.set(\"C-page\",page);",
									"",
									"    let page_size = 200;",
									"    pm.environment.set(\"C-page_size\",page_size);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = JSON.parse(responseBody);",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let total_pages = jsData.meta.total_pages;",
									"    let page = pm.environment.get(\"C-page\");",
									"",
									"    let list_report_invoice, old_list_report_invoice;",
									"    switch(testcase){",
									"        case 2: case 4:",
									"            list_report_invoice = pm.environment.get(\"C-list_report_invoice\");",
									"            if(!list_report_invoice){",
									"                list_report_invoice = [];",
									"            }",
									"            break;",
									"        case 6:",
									"            old_list_report_invoice = pm.environment.get(\"C-old_list_report_invoice\");",
									"            if(!old_list_report_invoice){",
									"                old_list_report_invoice = pm.environment.get(\"C-list_report_invoice\");",
									"                pm.environment.unset(\"C-list_report_invoice\");",
									"                pm.environment.set(\"C-old_list_report_invoice\",old_list_report_invoice);",
									"            }",
									"",
									"            list_report_invoice = pm.environment.get(\"C-list_report_invoice\");",
									"            if(!list_report_invoice){",
									"                list_report_invoice = [];",
									"            }",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow\");",
									"            break;",
									"    }",
									"",
									"    for(let item in jsData.data){",
									"        list_report_invoice[list_report_invoice.length] = {",
									"            \"invoice_id\":jsData.data[item].id,",
									"            \"entry_code\":jsData.data[item].entry_code,",
									"            \"contact_id\":jsData.data[item].contact_id,",
									"            \"contact_name\":jsData.data[item].contact_info.contact_name,",
									"            \"contact_phone\":jsData.data[item].contact_info.contact_phone,",
									"            \"invoice_created_date\":jsData.data[item].invoice_created_date,",
									"            \"invoice_due_date\":jsData.data[item].invoice_due_date,",
									"            \"unpaid_total\":jsData.data[item].unpaid_total,",
									"            \"unpaid_due\":jsData.data[item].unpaid_due,",
									"            \"unpaid_overdue_less\":jsData.data[item].unpaid_overdue_less,",
									"            \"unpaid_overdue_between\":jsData.data[item].unpaid_overdue_between,",
									"            \"unpaid_overdue_over\":jsData.data[item].unpaid_overdue_over",
									"        }",
									"    }",
									"    pm.environment.set(\"C-list_report_invoice\",list_report_invoice);",
									"",
									"    if(page >= total_pages){",
									"        // must clear page & page_size",
									"        pm.environment.unset(\"C-page\");",
									"        pm.environment.unset(\"C-page_size\");",
									"",
									"        switch(testcase){",
									"            case 2: ",
									"                pm.test(\"Got all record! \" + list_report_invoice.length, function () {",
									"                    pm.expect(list_report_invoice.length > 0).to.be.true;",
									"                });",
									"",
									"                postman.setNextRequest(\"report_account_lifetime\"); // report_account_lifetime",
									"                break;",
									"",
									"            case 4: ",
									"                pm.test(\"Got all record! \" + list_report_invoice.length, function () {",
									"                    pm.expect(list_report_invoice.length > 0).to.be.true;",
									"                });",
									"",
									"                postman.setNextRequest(\"report_account_lifetime\"); // report_account_lifetime",
									"                break;    ",
									"    ",
									"            case 6:",
									"",
									"                let invoice_obj = pm.environment.get(\"C-invoice_obj\");",
									"                let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"",
									"                pm.test(\"List invoice unpaid is decrease 1\"), function() {",
									"                    console.log(\"old list report invoice: \" + old_list_report_invoice.length);",
									"                    console.log(\"new list report invoice: \" + list_report_invoice.length);",
									"                    pm.expect(list_report_invoice.length = old_list_report_invoice.length - 1).to.be.true;",
									"                }",
									"            ",
									"",
									"                let record_obj = null;",
									"                for(let i in old_list_report_invoice){",
									"                    if(old_list_report_invoice[i].invoice_id == invoice_obj.invoice_id){",
									"                        record_obj = old_list_report_invoice[i];",
									"                        break;",
									"                    }",
									"                }",
									"",
									"                let isFound = false;",
									"                let due_type = pm.environment.get(\"C-due_type\");",
									"                for(let i in list_report_invoice){",
									"                    if(list_report_invoice[i].invoice_id == invoice_obj.invoice_id){",
									"                        isFound = true;",
									"                        console.log(\"Found \" + list_report_invoice[i].entry_code + ' of ' + list_report_invoice[i].contact_name);",
									"                        ",
									"                        pm.test(\"unpaid_total decrease \" + tnx_obj.amount, function () {",
									"                            console.log(\"act: \" + list_report_invoice[i].unpaid_total);",
									"                            pm.expect(list_report_invoice[i].unpaid_total == (record_obj.unpaid_total - tnx_obj.amount).toFixed(2)).to.be.true;",
									"                        });",
									"",
									"",
									"                        switch(due_type){",
									"                            case \"undue\":",
									"                                // unpaid_due",
									"                                pm.test(\"unpaid_due decrease \" + tnx_obj.amount, function () {",
									"                                    console.log(\"old unpaid due decrease: \" + record_obj.unpaid_due);",
									"                                    console.log(\"act unpaid due decrease: \" + list_report_invoice[i].unpaid_due);",
									"                                    pm.expect(list_report_invoice[i].unpaid_due == (record_obj.unpaid_due - tnx_obj.amount).toFixed(2)).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_less",
									"                                pm.test(\"unpaid_overdue_less == 0\", function () {",
									"                                    pm.expect(list_report_invoice[i].unpaid_overdue_less == 0).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_between",
									"                                pm.test(\"unpaid_overdue_between == 0\", function () {",
									"                                    pm.expect(list_report_invoice[i].unpaid_overdue_between == 0).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_over",
									"                                pm.test(\"unpaid_overdue_over == 0\", function () {",
									"                                    pm.expect(list_report_invoice[i].unpaid_overdue_over == 0).to.be.true;",
									"                                });",
									"                                break;",
									"                            case \"overdue_less\":",
									"                                // unpaid_due",
									"                                pm.test(\"unpaid_due == 0\", function () {",
									"                                    pm.expect(list_report_invoice[i].unpaid_due == 0).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_less",
									"                                pm.test(\"unpaid_overdue_less decrease \" + tnx_obj.amount, function () {",
									"                                    console.log(\"old unpaid_overdue_less : \" + record_obj.unpaid_overdue_less);",
									"                                    console.log(\"actunpaid_overdue_less : \" + list_report_invoice[i].unpaid_overdue_less);",
									"                                    pm.expect(list_report_invoice[i].unpaid_overdue_less == (record_obj.unpaid_overdue_less - tnx_obj.amount).toFixed(2)).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_between",
									"                                pm.test(\"unpaid_overdue_between == 0\", function () {",
									"                                    pm.expect(list_report_invoice[i].unpaid_overdue_between == 0).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_over",
									"                                pm.test(\"unpaid_overdue_over == 0\", function () {",
									"                                    pm.expect(list_report_invoice[i].unpaid_overdue_over == 0).to.be.true;",
									"                                });",
									"                                break;",
									"                            case \"overdue_between\":",
									"                                // unpaid_due",
									"                                pm.test(\"unpaid_due == 0\", function () {",
									"                                    pm.expect(list_report_invoice[i].unpaid_due == 0).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_less",
									"                                pm.test(\"unpaid_overdue_less == 0\", function () {",
									"                                    pm.expect(list_report_invoice[i].unpaid_overdue_less == 0).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_between",
									"                                pm.test(\"unpaid_overdue_between decrease \" + tnx_obj.amount, function () {",
									"                                    console.log(\"old unpaid_overdue_between decrease: \" + record_obj.unpaid_overdue_between);",
									"                                    console.log(\"act unpaid_overdue_between decrease: \" + list_report_invoice[i].unpaid_overdue_between);",
									"                                    pm.expect(list_report_invoice[i].unpaid_overdue_between == (record_obj.unpaid_overdue_between - tnx_obj.amount).toFixed(2)).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_over",
									"                                pm.test(\"unpaid_overdue_over == 0\", function () {",
									"                                    pm.expect(list_report_invoice[i].unpaid_overdue_over == 0).to.be.true;",
									"                                });",
									"                                break;",
									"                            case \"overdue_over\":",
									"                                // unpaid_due",
									"                                pm.test(\"unpaid_due == 0\", function () {",
									"                                    pm.expect(list_report_invoice[i].unpaid_due == 0).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_less",
									"                                pm.test(\"unpaid_overdue_less == 0\", function () {",
									"                                    pm.expect(list_report_invoice[i].unpaid_overdue_less == 0).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_between",
									"                                pm.test(\"unpaid_overdue_between == 0\", function () {",
									"                                    pm.expect(list_report_invoice[i].unpaid_overdue_between == 0).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_over",
									"                                pm.test(\"unpaid_overdue_over decrease \" + tnx_obj.amount, function () {",
									"                                    console.log(\"old unpaid_overdue_over decrease : \" + record_obj.unpaid_overdue_over);",
									"                                    console.log(\"act unpaid_overdue_over decrease : \" + list_report_invoice[i].unpaid_overdue_over);",
									"                                    pm.expect(list_report_invoice[i].unpaid_overdue_over == (record_obj.unpaid_overdue_over - tnx_obj.amount).toFixed(2)).to.be.true;",
									"                                });",
									"                                break;",
									"                            default:",
									"                                pm.test(\"Missing due type\", function () {",
									"                                    pm.expect(false).to.be.true;",
									"                                });",
									"                                break;",
									"                        }",
									"                        break;",
									"                    }",
									"                }",
									"",
									"                pm.test(\"No found new invoice\", function () {",
									"                    pm.expect(isFound).to.be.false;",
									"                });",
									"",
									"                postman.setNextRequest(\"report_account_lifetime\"); // report_account_lifetime",
									"                break;",
									"",
									"            default:",
									"                console.log(\"Missing flow, end test\");",
									"                postman.setNextRequest(null);",
									"                break;",
									"        }",
									"    } else {",
									"        page++;",
									"        pm.environment.set(\"C-page\",page);",
									"",
									"        console.log(\"view next page (\" + page + \") to get more product\");",
									"        postman.setNextRequest(\"get_report_account_receivable_invoice\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get list product, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"branch_id\": {{C-branch_id}},\n    \"due_days\": 30,\n    \"page\": {{C-page}},\n    \"page_size\": {{C-page_size}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finan_base_url}}/finan-ledger/api/v1/report/account-receivable-invoice-unpaid",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"report",
								"account-receivable-invoice-unpaid"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "home",
			"item": [
				{
					"name": "account_balance",
					"item": [
						{
							"name": "report_account_lifetime",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsData = pm.response.json();",
											"if(pm.response.code == 200){",
											"    let testcase = pm.environment.get(\"C-testcase\");",
											"    let account_lifetime = null;",
											"    try {",
											"        account_lifetime = jsData;",
											"    } catch {",
											"        console.log(\"Can't get data\");",
											"    }",
											"",
											"    let old_account_lifetime = pm.environment.get(\"C-account_lifetime\");",
											"    let payment_account_obj = pm.environment.get(\"C-payment_account_obj\");",
											"    /**",
											"     * Các case có khả năng xảy ra:",
											"     * - Trước khi delete transaction có account_id A",
											"     *   + A nằm trong top 5",
											"     *   + A nằm ngoài top 5",
											"     * - Sau khi delete transaction",
											"     *   + A nằm trong top 5",
											"     *   + A nằm ngoài top 5",
											"     * => case 1: cùng nằm trong top 5 => tăng/giảm balance tương ứng",
											"     *    case 2: cùng nằm ngoài top 5 => tăng/giảm balance của remaining_accounts tương ứng",
											"     *    case 3: trước trong, sau ngoài => ",
											"     *    case 4: trước ngoài, sau trong =>",
											"     */",
											"",
											"    switch(testcase){",
											"        case 2:",
											"            pm.test(\"Got account_lifetime \" + account_lifetime.sum_balance, function () {",
											"                pm.environment.set(\"C-account_lifetime\",account_lifetime);",
											"                pm.expect(account_lifetime != null).to.be.true;",
											"            });",
											"",
											"            // check data",
											"            let total_balance = 0;",
											"            for(let i in jsData.data){",
											"                total_balance += jsData.data[i].balance;",
											"            }",
											"            pm.test(\"Data correctly \" + total_balance, function () {",
											"                pm.expect(total_balance.toFixed(2) == jsData.sum_balance).to.be.true;",
											"            });",
											"",
											"            postman.setNextRequest(\"report_cash_flow_period\"); // report_cash_flow_period",
											"            break;",
											"        case 4:",
											"            // let tnx_delete_obj = pm.environment.get(\"C-tnx_delete_obj\");",
											"            // // sum_balance",
											"            // console.log(\"old: \" + old_account_lifetime.sum_balance);",
											"            // console.log(\"act: \" + account_lifetime.sum_balance);",
											"            // if(tnx_delete_obj.txn_type == \"in\"){",
											"            //     // case giảm debit => giảm sum_balance",
											"            //     pm.test(\"sum_balance decrease \" + tnx_delete_obj.amount, function () {",
											"            //         pm.expect(account_lifetime.sum_balance == old_account_lifetime.sum_balance - tnx_delete_obj.amount).to.be.true;",
											"            //     });",
											"            // } else {",
											"            //     // case giảm credit => tăng sum_balance",
											"            //     pm.test(\"sum_balance increase \" + tnx_delete_obj.amount, function () {",
											"            //         pm.expect(account_lifetime.sum_balance == old_account_lifetime.sum_balance + tnx_delete_obj.amount).to.be.true;",
											"            //     });",
											"            // }",
											"",
											"            /**",
											"             * if account_id in tnx_delete_obj in top 5",
											"             *  - txn_type = in => giảm credit",
											"             *  - txn_type = out => giảm debit",
											"             * else remaining_accounts",
											"             *  - txn_type = in => giảm credit",
											"             *  - txn_type = out => giảm debit",
											"             */",
											"            // check sau",
											"            ",
											"            postman.setNextRequest(\"report_cash_flow_period\"); // report_cash_flow_period",
											"            break;",
											"        case 6:",
											"            // pm.test(\"Got account_lifetime \" + account_lifetime.sum_balance, function () {",
											"            //     pm.environment.set(\"C-account_lifetime\",account_lifetime);",
											"            //     pm.expect(account_lifetime != null).to.be.true;",
											"            // });",
											"",
											"            // // check data",
											"            // let total_balance = 0;",
											"            // for(let i in jsData.data){",
											"            //     total_balance += jsData.data[i].balance;",
											"            // }",
											"            // pm.test(\"Data correctly \" + total_balance, function () {",
											"            //     pm.expect(total_balance.toFixed(2) == jsData.sum_balance).to.be.true;",
											"            // });",
											"",
											"            postman.setNextRequest(\"report_cash_flow_period\"); // report_cash_flow_period",
											"            break;    ",
											"        default:",
											"            console.log(\"Missing flow, end test\");",
											"            postman.setNextRequest(null);",
											"            break;",
											"    }",
											"} else {",
											"    console.log(\"Can't get report account receivable unpaid, end test\",jsData);",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"/**",
											" * case handle:",
											" * - Nếu account tăng balance ko nằm trong top 5:",
											" *   + TH1: balance tăng làm cho account nhảy vào top 5 => phải show account trong top 5",
											" *   + TH2: balance tăng ko làm cho account nhảy vào top 5 => chỉ thay đổi số của remaining_accounts",
											" * Note: tạo invoice sẽ ko ảnh hưởng, chỉ ảnh hưởng bởi tnx",
											" */",
											"let testcase = pm.environment.get(\"C-testcase\");",
											"console.log(\"Testcase: \" + testcase);",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-location-timezone",
										"value": "UTC+07:00",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "Bearer {{C-userToken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"branch_id\": {{C-branch_id}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{finan_base_url}}/finan-ledger/api/v1/report/account-lifetime",
									"host": [
										"{{finan_base_url}}"
									],
									"path": [
										"finan-ledger",
										"api",
										"v1",
										"report",
										"account-lifetime"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "cash_flow",
					"item": [
						{
							"name": "report_cash_flow_period",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"/**",
											" * period: year, month, week",
											" */",
											"",
											"let period = \"month\";",
											"pm.environment.set(\"C-period\",period);",
											"",
											"let testcase = pm.environment.get(\"C-testcase\");",
											"console.log(\"Testcase: \" + testcase);",
											"console.log(\"period: \" + period);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsData = pm.response.json();",
											"if(pm.response.code == 200){",
											"    let testcase = pm.environment.get(\"C-testcase\");",
											"    let cash_flow_period = null;",
											"    try {",
											"        cash_flow_period = jsData.data;",
											"        /**",
											"         * period: week, month, year",
											"         * sum_card_data",
											"         * dates_data",
											"         */",
											"    } catch {",
											"        console.log(\"Can't get report cash_flow data\");",
											"    }",
											"",
											"    switch(testcase){",
											"        case 2:",
											"            pm.test(\"Got cash_flow_period \", function () {",
											"                pm.expect(cash_flow_period != null).to.be.true;",
											"            });",
											"            pm.environment.set(\"C-cash_flow_period\",cash_flow_period);",
											"            console.log(\"cash_flow_period: \", cash_flow_period);",
											"",
											"            // ================================================ bonus check current data",
											"            // waiting logic updated at phase 2",
											"            // ================================================ ",
											"",
											"            postman.setNextRequest(\"report_profit_loss_period\"); // report_profit_loss_period",
											"            break;",
											"        case 4:",
											"            // let tnx_delete_obj = pm.environment.get(\"C-tnx_delete_obj\");",
											"            // let old_cash_flow_period = pm.environment.get(\"C-cash_flow_period\");",
											"",
											"            // hiện tại chưa chốt login nên tạm thời check phần sum_card_data",
											"            // if(tnx_delete_obj.txn_type == \"in\"){",
											"            //     // tăng income",
											"            //     pm.test(\"total_income increase \" + tnx_delete_obj.amount, function () {",
											"            //         pm.expect(cash_flow_period.sum_card_data.total_income == old_cash_flow_period.sum_card_data.total_income + parseFloat(tnx_delete_obj.amount)).to.be.true;",
											"            //     });",
											"",
											"            //     pm.test(\"nothing happen with total_expense\", function () {",
											"            //         pm.expect(cash_flow_period.sum_card_data.total_expense == old_cash_flow_period.sum_card_data.total_expense).to.be.true;",
											"            //     });",
											"",
											"            //     pm.test(\"total_gap increase \" + tnx_delete_obj.amount, function () {",
											"            //         pm.expect(cash_flow_period.sum_card_data.total_gap == old_cash_flow_period.sum_card_data.total_gap + parseFloat(tnx_delete_obj.amount)).to.be.true;",
											"            //     });",
											"            // } else {",
											"            //     // tăng expense",
											"            //     pm.test(\"nothing happen with total_income\", function () {",
											"            //         pm.expect(cash_flow_period.sum_card_data.total_income == old_cash_flow_period.sum_card_data.total_income).to.be.true;",
											"            //     });",
											"",
											"            //     pm.test(\"total_expense increase \"  + tnx_delete_obj.amount, function () {",
											"            //         pm.expect(cash_flow_period.sum_card_data.total_expense == old_cash_flow_period.sum_card_data.total_expense + tnx_delete_obj.amount).to.be.true;",
											"            //     });",
											"",
											"            //     pm.test(\"total_gap decrease \" + tnx_delete_obj.amount, function () {",
											"            //         pm.expect(cash_flow_period.sum_card_data.total_gap == old_cash_flow_period.sum_card_data.total_gap - tnx_delete_obj.amount).to.be.true;",
											"            //     });",
											"            // }",
											"",
											"            postman.setNextRequest(\"report_profit_loss_period\"); // report_profit_loss_period",
											"            break;",
											"",
											"        case 6:",
											"            let tnx_delete_obj = pm.environment.get(\"C-tnx_delete_obj\");",
											"            let old_cash_flow_period = pm.environment.get(\"C-cash_flow_period\");",
											"",
											"            // hiện tại chưa chốt login nên tạm thời check phần sum_card_data",
											"            // if(tnx_delete_obj.txn_type == \"in\"){",
											"            //     // tăng income",
											"            //     pm.test(\"total_income increase \" + tnx_delete_obj.amount, function () {",
											"            //         pm.expect(cash_flow_period.sum_card_data.total_income == old_cash_flow_period.sum_card_data.total_income + parseFloat(tnx_delete_obj.amount)).to.be.true;",
											"            //     });",
											"",
											"            //     pm.test(\"nothing happen with total_expense\", function () {",
											"            //         pm.expect(cash_flow_period.sum_card_data.total_expense == old_cash_flow_period.sum_card_data.total_expense).to.be.true;",
											"            //     });",
											"",
											"            //     pm.test(\"total_gap increase \" + tnx_delete_obj.amount, function () {",
											"            //         pm.expect(cash_flow_period.sum_card_data.total_gap == old_cash_flow_period.sum_card_data.total_gap + parseFloat(tnx_delete_obj.amount)).to.be.true;",
											"            //     });",
											"            // } else {",
											"            //     // tăng expense",
											"            //     pm.test(\"nothing happen with total_income\", function () {",
											"            //         pm.expect(cash_flow_period.sum_card_data.total_income == old_cash_flow_period.sum_card_data.total_income).to.be.true;",
											"            //     });",
											"",
											"            //     pm.test(\"total_expense increase \"  + tnx_delete_obj.amount, function () {",
											"            //         pm.expect(cash_flow_period.sum_card_data.total_expense == old_cash_flow_period.sum_card_data.total_expense + tnx_delete_obj.amount).to.be.true;",
											"            //     });",
											"",
											"            //     pm.test(\"total_gap decrease \" + tnx_delete_obj.amount, function () {",
											"            //         pm.expect(cash_flow_period.sum_card_data.total_gap == old_cash_flow_period.sum_card_data.total_gap - tnx_delete_obj.amount).to.be.true;",
											"            //     });",
											"            // }",
											"            postman.setNextRequest(\"report_profit_loss_period\"); // ",
											"",
											"            break;",
											"            ",
											"",
											"",
											"  ",
											"        default:",
											"            console.log(\"Missing flow, end test\");",
											"            postman.setNextRequest(null);",
											"            break;",
											"    }",
											"} else {",
											"    console.log(\"Can't get report cash_flow, end test\",jsData);",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-location-timezone",
										"value": "UTC+07:00",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{C-userToken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"branch_id\": {{C-branch_id}},\n    \"period\": \"{{C-period}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{finan_base_url}}/finan-ledger/api/v1/report/cash-flow-period",
									"host": [
										"{{finan_base_url}}"
									],
									"path": [
										"finan-ledger",
										"api",
										"v1",
										"report",
										"cash-flow-period"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "profit_n_loss",
					"item": [
						{
							"name": "report_profit_loss_period",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"/**",
											" * \"report_type\": sum,income,expense",
											" * Note: report_type = sum => hiện tại bị null dates_data",
											" * - C1: call từng loại income, expense dể lấy dates_data",
											" * - C2: wait fixing from dev",
											" * => tạm thời xử lý case sum, 2 case còn lại sẽ handle sau",
											" */",
											"let report_type = \"sum\";",
											"pm.environment.set(\"C-report_type\",report_type);",
											"",
											"let testcase = pm.environment.get(\"C-testcase\");",
											"console.log(\"Testcase: \" + testcase);",
											"console.log(\"report_type: \" + report_type);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsData = pm.response.json();",
											"if(pm.response.code == 200){",
											"    let testcase = pm.environment.get(\"C-testcase\");",
											"    let profit_loss_period = null;",
											"    try {",
											"        profit_loss_period = jsData.data;",
											"        /**",
											"         * period: week, month, year",
											"         * sum_card_data",
											"         * dates_data",
											"         */",
											"    } catch {",
											"        console.log(\"Can't get report cash_flow data\");",
											"    }",
											"",
											"    switch(testcase){",
											"        case 2:",
											"            pm.test(\"Got profit_loss_period \", function () {",
											"                pm.expect(profit_loss_period != null).to.be.true;",
											"            });",
											"",
											"            ",
											"            pm.environment.set(\"C-profit_loss_period\",profit_loss_period);",
											"            console.log(\"profit_loss_period: \", profit_loss_period);",
											"",
											"            // ================================================ bonus check current data",
											"            // waiting logic updated at phase 2",
											"            // ================================================ ",
											"",
											"            // testcase++;",
											"            // testcase = 5;",
											"            pm.environment.set(\"C-testcase\",testcase);",
											"            /**",
											"             * Tạm thời ko cần handle flow create withdraw, phần này có dính đến authorize",
											"             * Nhảy thẳng sang giả hook luôn",
											"             */",
											"            postman.setNextRequest(\"get_list_payment\"); // get_list_payment",
											"            break;",
											"        case 4:",
											"            // let tnx_delete_obj = pm.environment.get(\"C-tnx_delete_obj\");",
											"            // let list_debit_account = pm.environment.get(\"C-list_debit_account\");",
											"            // let list_credit_account = pm.environment.get(\"C-list_credit_account\");",
											"            // let old_profit_loss_period = pm.environment.get(\"C-profit_loss_period\");",
											"",
											"            // console.log(\"debug old_profit_loss_period: \", old_profit_loss_period);",
											"            // console.log(\"debug profit_loss_period: \", profit_loss_period);",
											"",
											"            // CHƯA CÓ RULE, ĐANG ĐỢI PO DEFINE",
											"",
											"            postman.setNextRequest(\"hook_release\"); // hook_release",
											"            break;",
											"",
											"        case 6:",
											"            ",
											"",
											"            // CHƯA CÓ RULE, ĐANG ĐỢI PO DEFINE",
											"",
											"",
											"",
											"            console.log(\"--- End Testsuite 47 ---\");",
											"            postman.setNextRequest(null); // report_profit_loss_period",
											"        default:",
											"            console.log(\"Missing flow, end test\");",
											"            postman.setNextRequest(null);",
											"            break;",
											"    }",
											"} else {",
											"    console.log(\"Can't get report cash_flow, end test\",jsData);",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-location-timezone",
										"value": "UTC+07:00",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{C-userToken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"branch_id\": {{C-branch_id}},\n    \"period\": \"{{C-period}}\",\n    \"report_type\": \"{{C-report_type}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{finan_base_url}}/finan-ledger/api/v1/report/profit-loss-period",
									"host": [
										"{{finan_base_url}}"
									],
									"path": [
										"finan-ledger",
										"api",
										"v1",
										"report",
										"profit-loss-period"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "transaction",
			"item": [
				{
					"name": "get_list_transaction",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let page = pm.environment.get(\"C-page\");",
									"if(!page){",
									"    page = 1;",
									"    pm.environment.set(\"C-page\",page);",
									"",
									"    let page_size = 10;",
									"    pm.environment.set(\"C-page_size\",page_size);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = JSON.parse(responseBody);",
									"if (pm.response.code == 200) {",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let total_tnx = null;",
									"    try {",
									"        total_tnx = jsData.meta.total_rows;",
									"    } catch {",
									"        console.log(\"Can't get total tnx\");",
									"    }",
									"    let old_total_tnx = pm.environment.get(\"C-total_tnx\");",
									"    let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"    let isFound = false;",
									"    /////",
									"    let list_account_coa = pm.environment.get(\"C-list_account_coa\");",
									"     let account_receivable = list_account_coa[0].account_receivable;",
									"    let processing_cash_in = list_account_coa[0].processing_cash_in;",
									"    let processing_cash_out = list_account_coa[0].processing_cash_out;",
									"    let account_va_bank = list_account_coa[0].account_va_bank;",
									"    let system_code = pm.environment.get(\"C-system_code\");",
									"",
									"    switch (testcase) {",
									"        case 2:",
									"            pm.test(\"Got total tnx! \" + total_tnx, function () {",
									"                pm.expect(total_tnx != null).to.be.true;",
									"            });",
									"            pm.environment.set(\"C-total_tnx_tc_2\", total_tnx);",
									"            console.log(\"total_tnx: \" + total_tnx);",
									"            postman.setNextRequest(\"gen_buyer_payment_via_qr\"); // gen_buyer_payment_via_qr",
									"            break;",
									"        case 4:",
									"        ",
									"            old_total_tnx = pm.environment.get(\"C-total_tnx_tc_2\");",
									"            pm.test(\"Total tnx increase 1\", function () {",
									"                console.log(\"Current total: \" + total_tnx);",
									"                console.log(\"Old total: \" + old_total_tnx);",
									"                pm.expect(total_tnx == old_total_tnx + 1).to.be.true;",
									"            });",
									"            pm.environment.set(\"C-total_tnx_tc_4\", total_tnx);",
									"            let cash_in_hold_payload = pm.environment.get(\"C-hookCashIn\");",
									"            let list_hook_hold_tnx = [];",
									"            for (let i = 0; i < jsData.data.length; i++) {",
									"                if(\"entry\" in jsData.data[i]) {",
									"                    if(jsData.data[i].entry.system_code == system_code){",
									"                        list_hook_hold_tnx.push(jsData.data[i]);",
									"                        break;",
									"                        }",
									"                    }",
									"            }",
									"",
									"            pm.environment.set(\"C-list_hook_hold_tnx\", list_hook_hold_tnx);",
									"",
									"",
									"            // console.log(\"list_hook_hold_tnx\", list_hook_hold_tnx);",
									"",
									"            let acc_pro_ci_hold_post = [];",
									"            for (let item of list_hook_hold_tnx) {",
									"                if (item.account_id == processing_cash_in.id) {",
									"                    acc_pro_ci_hold_post.push(item);",
									"                }",
									"            }",
									"            pm.environment.set(\"C-acc_pro_ci_hold_post_tnx\", acc_pro_ci_hold_post);",
									"            // console.log(\"acc_pro_ci_hold_post\", acc_pro_ci_hold_post);",
									"            pm.test(\"Verify amount of transaction \" + cash_in_hold_payload.data.net_amount, function(){",
									"                pm.expect(cash_in_hold_payload.data.net_amount).to.eql(acc_pro_ci_hold_post[0].amount);",
									"            });",
									"",
									"            pm.test(\"Verify txn_type of transaction is: \" + acc_pro_ci_hold_post[0].txn_type, function(){",
									"                pm.expect(\"in\" == acc_pro_ci_hold_post[0].txn_type);",
									"            });",
									"            postman.setNextRequest(\"get_transaction_detail_hook_hold\"); // ",
									"            break;",
									"",
									"        case 6:",
									"            old_total_tnx = pm.environment.get(\"C-total_tnx_tc_4\");",
									"            pm.test(\"Total tnx increase 2\", function () {",
									"                console.log(\"Current total: \" + total_tnx);",
									"                console.log(\"Old total: \" + old_total_tnx);",
									"                pm.expect(total_tnx == old_total_tnx + 2).to.be.true;",
									"            });",
									"            let cash_in_release_payload = pm.environment.get(\"C-hookCashInRelease\");",
									"",
									"            let list_hook_release_tnx_cash_out = [];",
									"            let list_hook_release_tnx_va = [];",
									"            let van_test = [];",
									"            for (let i = 0; i < jsData.data.length; i++) {",
									"            ",
									"                if(\"entry\" in jsData.data[i]) {",
									"                    if(jsData.data[i].entry.system_code == system_code){",
									"                        van_test.push(jsData.data[i]);",
									"                            if (jsData.data[i].account.key == processing_cash_out.key) {",
									"                        list_hook_release_tnx_cash_out.push(jsData.data[i]);",
									"                        } else if (jsData.data[i].account.key == account_va_bank.key) {",
									"                            list_hook_release_tnx_va.push(jsData.data[i]);",
									"                        }",
									"                }",
									"            }",
									"            }",
									"                    ",
									"                    // break;",
									"            console.log(\"van_test\",van_test);",
									"            console.log(\"C-list_hook_release_tnx_cash_out\", list_hook_release_tnx_cash_out);",
									"              console.log(\"C-list_hook_release_tnx_va\", list_hook_release_tnx_va);",
									"",
									"            pm.environment.set(\"C-list_hook_release_tnx_cash_out\", list_hook_release_tnx_cash_out);",
									"            pm.environment.set(\"C-list_hook_release_tnx_va\", list_hook_release_tnx_va); ",
									"",
									"            // console.log(\"list_hook_release_tnx_cash_out\", list_hook_release_tnx_cash_out);",
									"            // console.log(\"list_hook_release_tnx_va\",list_hook_release_tnx_va);",
									"",
									"            pm.test(\"Verify amount cash out of transaction \" + cash_in_release_payload.data.net_amount, function(){",
									"                pm.expect(cash_in_release_payload.data.net_amount).to.eql(list_hook_release_tnx_cash_out[0].amount);",
									"            });",
									"            ",
									"            pm.test(\"Verify amount va of transaction \" + cash_in_release_payload.data.net_amount, function(){",
									"                pm.expect(cash_in_release_payload.data.net_amount).to.eql(list_hook_release_tnx_va[0].amount);",
									"            });",
									"",
									"",
									"            pm.test(\"Verify txn_type cash out of transaction is: \" + list_hook_release_tnx_va[0].txn_type, function(){",
									"                pm.expect(\"in\" == list_hook_release_tnx_va[0].txn_type).to.be.true;",
									"            });",
									"",
									"            pm.test(\"Verify txn_type va of transaction is: \" + list_hook_release_tnx_cash_out[0].txn_type, function(){",
									"                pm.expect(\"out\" == list_hook_release_tnx_cash_out[0].txn_type).to.be.true;",
									"            });",
									"            postman.setNextRequest(\"get_transaction_detail_hook_release_in\"); // ",
									"",
									"            break;",
									"",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get list tnx, end test\", jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{finan_base_url}}/finan-ledger/api/v1/transaction/list?branch_id={{C-branch_id}}&page={{C-page}}&page_size={{C-page_size}}&sort",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"transaction",
								"list"
							],
							"query": [
								{
									"key": "branch_id",
									"value": "{{C-branch_id}}"
								},
								{
									"key": "page",
									"value": "{{C-page}}"
								},
								{
									"key": "page_size",
									"value": "{{C-page_size}}"
								},
								{
									"key": "sort",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get_transaction_detail_hook_hold",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let tnx_obj = pm.environment.get(\"C-acc_pro_ci_hold_post_tnx\");",
									"console.log(\"tnx_obj\", tnx_obj);",
									"let tnx_id = tnx_obj[0].id;",
									"console.log(\"view detail tnx: \" + tnx_id);",
									"",
									"pm.environment.set(\"C-tnx_id\",tnx_id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if (pm.response.code == 200) {",
									"    // let testcase = pm.environment.get(\"C-testcase\");",
									"    console.log(\"Debug: \" + JSON.stringify(jsData));",
									"",
									"    let tnx_obj = pm.environment.get(\"C-acc_pro_ci_hold_post_tnx\");",
									"    let hook_cash_in_payload = pm.environment.get(\"C-hookCashIn\");",
									"",
									"    console.log(\"hook_cash_in_payload.net_amount\", hook_cash_in_payload.data.net_amount);",
									"    console.log(\"tnx_obj\",tnx_obj);",
									"    pm.test(\"amount of tnx correctly! \" + tnx_obj[0].amount, function () {",
									"        pm.expect(tnx_obj[0].amount == jsData.data.amount).to.be.true;",
									"    });",
									"",
									"",
									"    pm.test(\"value_at of tnx correctly! \" + tnx_obj[0].value_at, function () {",
									"        pm.expect(tnx_obj[0].value_at.substring(0, tnx_obj[0].value_at.lastIndexOf(\".\")) == jsData.data.value_at.substring(0, jsData.data.value_at.lastIndexOf(\".\"))).to.be.true;",
									"        console.log(\"expect value_at: \" + tnx_obj[0].value_at.substring(0, tnx_obj[0].value_at.lastIndexOf(\".\")));",
									"        console.log(\"actual value_at: \" + jsData.data.value_at.substring(0, jsData.data.value_at.lastIndexOf(\".\")));",
									"    });",
									"",
									"    pm.test(\"object_type of tnx correctly! \" + tnx_obj[0].object_type, function () {",
									"        pm.expect(tnx_obj[0].object_type).to.eql(jsData.data.object_type);",
									"    });",
									"",
									"    pm.test(\"object_key of tnx correctly! \" + tnx_obj[0].object_key, function () {",
									"        pm.expect(tnx_obj[0].object_key).to.eql(jsData.data.object_key);",
									"    });",
									"    postman.setNextRequest(\"get_list_payment\"); // get_list_payment",
									"",
									"} else {",
									"    console.log(\"Can't get internal contact detail, end test\", jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{finan_base_url}}/finan-ledger/api/v1/transaction/detail/{{C-tnx_id}}?branch_id={{C-branch_id}}",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"transaction",
								"detail",
								"{{C-tnx_id}}"
							],
							"query": [
								{
									"key": "branch_id",
									"value": "{{C-branch_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get_transaction_detail_hook_release_in",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if (pm.response.code == 200) {",
									"    // let testcase = pm.environment.get(\"C-testcase\");",
									"    console.log(\"Debug: \" + JSON.stringify(jsData));",
									"",
									"    let tnx_obj = pm.environment.get(\"C-list_hook_release_tnx_va\");",
									"    let hook_cash_in_payload = pm.environment.get(\"C-hookCashIn\");",
									"",
									"    console.log(\"hook_cash_in_payload.net_amount\", hook_cash_in_payload.data.net_amount);",
									"    console.log(\"tnx_obj\",tnx_obj);",
									"    pm.test(\"amount of tnx correctly! \" + tnx_obj[0].amount, function () {",
									"        pm.expect(tnx_obj[0].amount == jsData.data.amount).to.be.true;",
									"    });",
									"",
									"    pm.test(\"value_at of tnx correctly! \" + tnx_obj[0].value_at, function () {",
									"        pm.expect(tnx_obj[0].value_at.substring(0, tnx_obj[0].value_at.lastIndexOf(\".\")) == jsData.data.value_at.substring(0, jsData.data.value_at.lastIndexOf(\".\"))).to.be.true;",
									"        console.log(\"expect value_at: \" + tnx_obj[0].value_at.substring(0, tnx_obj[0].value_at.lastIndexOf(\".\")));",
									"        console.log(\"actual value_at: \" + jsData.data.value_at.substring(0, jsData.data.value_at.lastIndexOf(\".\")));",
									"    });",
									"",
									"    pm.test(\"object_type of tnx correctly! \" + tnx_obj[0].object_type, function () {",
									"        pm.expect(tnx_obj[0].object_type).to.eql(jsData.data.object_type);",
									"    });",
									"",
									"    pm.test(\"object_key of tnx correctly! \" + tnx_obj[0].object_key, function () {",
									"        pm.expect(tnx_obj[0].object_key).to.eql(jsData.data.object_key);",
									"    });",
									"    postman.setNextRequest(\"get_transaction_detail_hook_release_out\"); // get_transaction_detail_hook_release_out",
									"",
									"} else {",
									"    console.log(\"Can't get internal contact detail, end test\", jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let tnx_obj = pm.environment.get(\"C-list_hook_release_tnx_va\");",
									"let tnx_id = tnx_obj[0].id;",
									"console.log(\"view detail tnx: \" + tnx_id);",
									"",
									"pm.environment.set(\"C-tnx_id\",tnx_id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{finan_base_url}}/finan-ledger/api/v1/transaction/detail/{{C-tnx_id}}?branch_id={{C-branch_id}}",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"transaction",
								"detail",
								"{{C-tnx_id}}"
							],
							"query": [
								{
									"key": "branch_id",
									"value": "{{C-branch_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get_transaction_detail_hook_release_out",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let tnx_obj = pm.environment.get(\"C-list_hook_release_tnx_cash_out\");",
									"let tnx_id = tnx_obj[0].id;",
									"console.log(\"view detail tnx: \" + tnx_id);",
									"",
									"pm.environment.set(\"C-tnx_id\",tnx_id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if (pm.response.code == 200) {",
									"    // let testcase = pm.environment.get(\"C-testcase\");",
									"    console.log(\"Debug: \" + JSON.stringify(jsData));",
									"",
									"    let tnx_obj = pm.environment.get(\"C-list_hook_release_tnx_cash_out\");",
									"    let hook_cash_in_payload = pm.environment.get(\"C-hookCashIn\");",
									"",
									"    console.log(\"hook_cash_in_payload.net_amount\", hook_cash_in_payload.data.net_amount);",
									"    console.log(\"tnx_obj\",tnx_obj);",
									"    pm.test(\"amount of tnx correctly! \" + tnx_obj[0].amount, function () {",
									"        pm.expect(tnx_obj[0].amount == jsData.data.amount).to.be.true;",
									"    });",
									"",
									"",
									"    pm.test(\"value_at of tnx correctly! \" + tnx_obj[0].value_at, function () {",
									"        pm.expect(tnx_obj[0].value_at.substring(0, tnx_obj[0].value_at.lastIndexOf(\".\")) == jsData.data.value_at.substring(0, jsData.data.value_at.lastIndexOf(\".\"))).to.be.true;",
									"        console.log(\"expect value_at: \" + tnx_obj[0].value_at.substring(0, tnx_obj[0].value_at.lastIndexOf(\".\")));",
									"        console.log(\"actual value_at: \" + jsData.data.value_at.substring(0, jsData.data.value_at.lastIndexOf(\".\")));",
									"    });",
									"",
									"    pm.test(\"object_type of tnx correctly! \" + tnx_obj[0].object_type, function () {",
									"        pm.expect(tnx_obj[0].object_type).to.eql(jsData.data.object_type);",
									"    });",
									"",
									"    pm.test(\"object_key of tnx correctly! \" + tnx_obj[0].object_key, function () {",
									"        pm.expect(tnx_obj[0].object_key).to.eql(jsData.data.object_key);",
									"    });",
									"    postman.setNextRequest(\"get_list_payment\"); // get_list_payment",
									"",
									"} else {",
									"    console.log(\"Can't get internal contact detail, end test\", jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{finan_base_url}}/finan-ledger/api/v1/transaction/detail/{{C-tnx_id}}?branch_id={{C-branch_id}}",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"transaction",
								"detail",
								"{{C-tnx_id}}"
							],
							"query": [
								{
									"key": "branch_id",
									"value": "{{C-branch_id}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.request.headers.add({",
							" key: \"authorization\",",
							" value: \"Bearer \" + pm.environment.get(\"C-userToken\")",
							"});",
							"",
							"pm.request.headers.add({",
							" key: \"Content-Type\",",
							" value: \"application/json\"",
							"});"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "payment",
			"item": [
				{
					"name": "get_list_payment",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"let page = pm.environment.get(\"C-page\");",
									"if(!page){",
									"    page = 1;",
									"    pm.environment.set(\"C-page\",page);",
									"",
									"    let page_size = 100;",
									"    pm.environment.set(\"C-page_size\",page_size);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = JSON.parse(responseBody);",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let total_payment = null;",
									"    try {",
									"        total_payment = jsData.meta.total_rows;",
									"    } catch {",
									"        console.log(\"Can't get total payment\");",
									"    }",
									"    // console.log(\"jsData.data\", jsData.data);",
									"",
									"    switch(testcase){",
									"        case 2:",
									"            pm.test(\"Got total payment! \" + total_payment, function () {",
									"                pm.expect(total_payment != null).to.be.true;",
									"            });",
									"            pm.environment.set(\"C-old_total_payment_tc_2\",total_payment);",
									"            console.log(\"total_payment: \" + total_payment);",
									"",
									"            postman.setNextRequest(\"get_list_transaction\"); // get_list_transaction",
									"            break;",
									"        case 4:",
									"            old_total_payment = pm.environment.get(\"C-old_total_payment_tc_2\");",
									"            cash_in_hold = pm.environment.get(\"C-hookCashIn\");",
									"            // payment_obj = pm.environment.get(\"C-payment_obj\");",
									"",
									"            pm.test(\"Total payment increase 1\", function () {",
									"                // console.log(\"old: \" + old_total_payment);",
									"                // console.log(\"act: \" + total_payment);",
									"                pm.expect(total_payment == old_total_payment + 1).to.be.true;",
									"            });",
									"            ",
									"            let payment_info = [];",
									"            for (let i = 0; i < jsData.data.length; i++){",
									"                if (jsData.data[i].payment_number === cash_in_hold.data.reference_id) {",
									"                    payment_info.push(jsData.data[i]);",
									"                }",
									"            }",
									"",
									"            pm.test(\"total_amount of payment correctly! \" + cash_in_hold.data.total_amount, function () {",
									"                        console.log(\"total_amount of payment act: \" + cash_in_hold.data.total_amount);",
									"                        pm.expect(cash_in_hold.data.total_amount.toFixed(2) == payment_info[0].total_amount).to.be.true;",
									"                    });",
									"",
									"            pm.test(\"net_amount of payment correctly! \" + cash_in_hold.data.net_amount, function () {",
									"                        console.log(\"net_amount of act: \" + cash_in_hold.data.net_amount);",
									"                        pm.expect(cash_in_hold.data.net_amount.toFixed(2) == payment_info[0].net_amount).to.be.true;",
									"                    });",
									"",
									"            pm.test(\"total_fee of payment is \" + cash_in_hold.data.total_fee, function () { // sẽ handle total_fee ở va",
									"                    console.log(\"total_fee of act: \" + cash_in_hold.data.total_fee);",
									"                        pm.expect(cash_in_hold.data.total_fee.toFixed(2) == payment_info[0].total_fee).to.be.true;",
									"                    });",
									"",
									"            pm.test(\"status of payment is status!\", function () {",
									"                        pm.expect(payment_info[0].status).to.eql(\"hold\");",
									"                    });",
									"",
									"            //         break;",
									"            //     }",
									"            // }",
									"",
									"            // pm.test(\"Found new payment (Cach in - hold)\", function () {",
									"            //     pm.expect(isFound).to.be.true;",
									"            // });",
									"            // pm.environment.set(\"C-hook_obj\",hook_obj);",
									"",
									"            // lưu lại data",
									"            // pm.environment.set(\"C-old_total_payment\",total_payment);",
									"            pm.environment.set(\"C-old_total_payment_tc_4\",total_payment);",
									"            postman.setNextRequest(\"get_invoice_detail\"); // get_invoice_detail, ",
									"            break;",
									"",
									"        case 6:",
									"            old_total_payment = pm.environment.get(\"C-old_total_payment_tc_4\");",
									"            cash_in_release = pm.environment.get(\"C-hookCashInRelease\");",
									"            // payment_obj = pm.environment.get(\"C-payment_obj\");",
									"",
									"            pm.test(\"Total payment does not change \", function () {",
									"                // console.log(\"old: \" + old_total_payment);",
									"                // console.log(\"act: \" + total_payment);",
									"                pm.expect(total_payment == old_total_payment).to.be.true;",
									"            });",
									"            ",
									"            let payment_info_release = [];",
									"            for (let j = 0; j < jsData.data.length; j++){",
									"                if (jsData.data[j].payment_number === cash_in_release.data.reference_id) {",
									"                    payment_info_release.push(jsData.data[j]);",
									"                }",
									"            }",
									"",
									"            pm.test(\"total_amount of payment correctly! \" + cash_in_release.data.total_amount, function () {",
									"                        console.log(\"total_amount of payment act: \" + cash_in_release.data.total_amount);",
									"                        pm.expect(cash_in_release.data.total_amount.toFixed(2) == payment_info_release[0].total_amount).to.be.true;",
									"                    });",
									"",
									"            pm.test(\"net_amount of payment correctly! \" + cash_in_release.data.net_amount, function () {",
									"                        console.log(\"net_amount of act: \" + cash_in_release.data.net_amount);",
									"                        pm.expect(cash_in_release.data.net_amount.toFixed(2) == payment_info_release[0].net_amount).to.be.true;",
									"                    });",
									"",
									"            pm.test(\"total_fee of payment is \" + cash_in_release.data.total_fee, function () { // sẽ handle total_fee ở va",
									"                    console.log(\"total_fee of act: \" + cash_in_release.data.total_fee);",
									"                        pm.expect(cash_in_release.data.total_fee.toFixed(2) == payment_info_release[0].total_fee).to.be.true;",
									"                    });",
									"",
									"            pm.test(\"status of payment is status!\", function () {",
									"                        pm.expect(payment_info_release[0].status).to.eql(\"release\");",
									"                    });",
									"",
									"            //         break;",
									"            //     }",
									"            // }",
									"",
									"            // pm.test(\"Found new payment (Cach in - hold)\", function () {",
									"            //     pm.expect(isFound).to.be.true;",
									"            // });",
									"            // pm.environment.set(\"C-hook_obj\",hook_obj);",
									"",
									"            // lưu lại data",
									"            // pm.environment.set(\"C-old_total_payment\",total_payment);",
									"            pm.environment.set(\"C-old_total_payment_tc_4\",total_payment);",
									"            postman.setNextRequest(\"get_invoice_detail\"); // get_invoice_detail, ",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get list payment, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{finan_base_url}}/finan-ledger/api/v1/payment/list?branch_id={{C-branch_id}}&page={{C-page}}&page_size={{C-page_size}}&sort",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"payment",
								"list"
							],
							"query": [
								{
									"key": "branch_id",
									"value": "{{C-branch_id}}"
								},
								{
									"key": "page",
									"value": "{{C-page}}"
								},
								{
									"key": "page_size",
									"value": "{{C-page_size}}"
								},
								{
									"key": "sort",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "gen_buyer_payment_via_qr",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/// test",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"",
									"let jsData = JSON.parse(responseBody);",
									"if(pm.response.code == 200){",
									"",
									"    console.log(\"debug: \", jsData); // hook",
									"    let invoice_obj = pm.environment.get(\"C-invoice_obj\");",
									"    let payment_number = jsData.data.payment_number;",
									"    pm.environment.set(\"C-payment_number\", payment_number);",
									"    let list_bank_account = pm.environment.get(\"C-list_bank_account\");",
									"",
									"    let expected_amount;",
									"    if(invoice_obj.total_amount > invoice_obj.paid_amount){",
									"        expected_amount = invoice_obj.total_amount - invoice_obj.paid_amount;",
									"    } else {",
									"        expected_amount = 0;",
									"    }",
									"",
									"   pm.test(\"payment_number  \" + payment_number, function () {",
									"        console.log(\"act: \" + payment_number);",
									"        pm.expect(payment_number != null).to.be.true;",
									"    });",
									"",
									"    let expected_account = null;",
									"    for(let i in list_bank_account){",
									"        if(list_bank_account[i].account_id == invoice_obj.payment_account_id){",
									"            expected_account = list_bank_account[i].account_name;",
									"            break;",
									"        }",
									"    }",
									"",
									"    let today = new Date();",
									"    let account_receivable = pm.environment.get(\"C-account_receivable\");",
									"    let tnx_obj = {",
									"        \"object_key\":invoice_obj.invoice_id,",
									"        \"object_type\":\"invoice\",",
									"        \"account_credit\":account_receivable.id,",
									"        \"account_debit\":invoice_obj.payment_account_id,",
									"        \"amount\":expected_amount,",
									"        \"branch_id\":parseInt(pm.environment.get(\"C-branch_id\")),",
									"        \"txn_type\":\"in\",",
									"        // \"description\":\"TTINV \" + invoice_obj.system_code,",
									"        \"value_at\":today.toISOString()",
									"    }",
									"",
									"",
									"    pm.environment.set(\"C-tnx_obj\",tnx_obj);",
									"    console.log(\"tnx_obj\",tnx_obj);",
									"    postman.setNextRequest(\"hook_hold\"); // hook_hold",
									"",
									"",
									"} else {",
									"    console.log(\"Can't get list posting, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/**",
									" * pre con encryptString",
									" */",
									"// random number between min and max",
									"function getRandomInt(min, max) {",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"",
									"function getRandomInt(min, max) {",
									"  min = Math.ceil(min);",
									"  max = Math.floor(max);",
									"  return Math.floor(Math.random() * (max - min)) + min;",
									"}",
									"",
									"function encryptString(keyHex, plaintext) {",
									"    const key = CryptoJS.enc.Utf8.parse(keyHex);",
									"    const iv = CryptoJS.lib.WordArray.random(128 / 8);",
									"",
									"    const encrypted = CryptoJS.AES.encrypt(CryptoJS.enc.Utf8.parse(plaintext), key, {",
									"        iv: iv,",
									"        mode: CryptoJS.mode.CFB,",
									"        padding: CryptoJS.pad.NoPadding",
									"    });",
									"",
									"    const ciphertextWithIVHex = iv.toString() + encrypted.ciphertext.toString();",
									"    return ciphertextWithIVHex;",
									"}",
									"",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"testcase++;",
									"pm.environment.set(\"C-testcase\");",
									"console.log (\"testcase\", testcase);",
									"const key = pm.environment.get(\"secret_key\"); // Make sure your key is 32 bytes long",
									"console.log(\"key: \" + key);",
									"let payment_method_list = [\"bank_transfer\",\"domestic_card\",\"credit_card\",\"ewallet_momo\",\"ewallet_zalopay\",\"ewallet_viettel\",\"ewallet_galaxypay\"];",
									"let payment_config = getRandomInt(1,payment_method_list.length);",
									"let payment_method = payment_method_list.payment_config;",
									"let status;",
									"",
									"console.log(\"payment_config\",payment_config);",
									"console.log(\"payment_test\", payment_method_list[payment_config]);",
									"",
									"///",
									"let invoice_obj = pm.environment.get(\"C-invoice_obj\");",
									"let invoice_id = invoice_obj.invoice_id;",
									"console.log(\"view detail invoice: \" + invoice_id);",
									"",
									"pm.environment.set(\"C-invoice_id\",invoice_id);",
									"",
									"////",
									"",
									"const payload_data = {",
									"    \"object_code\": invoice_obj.system_code,",
									"    \"object_type\": \"invoice\",",
									"    \"branch_id\": pm.environment.get(\"C-branch_id\"),",
									"    \"payment_account_id\": invoice_obj.payment_account_id,",
									"    \"payment_method\": payment_method_list[payment_config]",
									"};",
									"console.log(\"payload_data:\", payload_data);",
									"",
									"const raw_data = JSON.stringify(payload_data);",
									"",
									"const encryptedText = encryptString(key, raw_data);",
									"// console.log(\"Encrypted:\" + encryptedText);",
									"pm.environment.set(\"C-payload_encrypt\",encryptedText);",
									"pm.environment.set(\"C-payload_data\",payload_data);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"payload\": \"{{C-payload_encrypt}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finan_base_url}}/finan-ledger/api/v1/payment/create-payment-buyer",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"payment",
								"create-payment-buyer"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_payment_detail",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let tnx_obj = pm.environment.get(\"C-acc_pro_ci_hold_post_tnx\");",
									"console.log(\"tnx_obj\", tnx_obj);",
									"",
									"let payment_id = tnx_obj[0].payment_id;",
									"console.log(\"view detail payment: \" + payment_id);",
									"",
									"pm.environment.set(\"C-payment_id\",payment_id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if (pm.response.code == 200) {",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    console.log(\"Debug: \" + JSON.stringify(jsData));",
									"    let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"",
									"    switch (testcase) {",
									"",
									"        case 4:",
									"            let cash_in_hold_payload = pm.environment.get(\"C-hookCashIn\");",
									"            console.log(\"cash_in_hold_payload\", cash_in_hold_payload);",
									"",
									"",
									"            pm.test(\"Payment status of payment hold is: hold\" , function () {",
									"                console.log(\"act: \" + jsData.data.status);",
									"                pm.expect(\"hold\" == jsData.data.status).to.be.true;",
									"            });",
									"",
									"            pm.test(\"net_amount of payment correctly! \" + cash_in_hold_payload.data.net_amount, function () {",
									"                pm.expect(cash_in_hold_payload.data.net_amount == jsData.data.net_amount).to.be.true;",
									"            });",
									"",
									"            pm.test(\"total_fee of payment is \" + cash_in_hold_payload.data.total_fee, function () { // sẽ handle total_fee ở va",
									"                pm.expect(cash_in_hold_payload.data.total_fee == jsData.data.total_fee).to.be.true;",
									"            });",
									"",
									"",
									"            pm.test(\"value_at of payment correctly! \" + tnx_obj.value_at, function () {",
									"                let act_value_at = new Date(jsData.data.value_at);",
									"                console.log(\"actual value_at: \" + act_value_at.toISOString());",
									"                pm.expect(tnx_obj.value_at.substring(0, 17) == act_value_at.toISOString().substring(0, 17)).to.be.true;",
									"            });",
									"",
									"            pm.test(\"account_id of payment is: \" + tnx_obj.account_debit, function () {",
									"                console.log(\"act: \" + jsData.data.account_id);",
									"                pm.expect(tnx_obj.account_debit == jsData.data.account_id).to.be.true;",
									"            });",
									"",
									"            pm.test(\"object_type of payment correctly! \" + tnx_obj.object_type, function () {",
									"                pm.expect(tnx_obj.object_type).to.eql(jsData.data.object_type);",
									"            });",
									"            postman.setNextRequest(\"get_list_payment_account\"); // get_list_payment_account",
									"",
									"",
									"            break;",
									"",
									"        case 6:",
									"            let cash_in_release_payload = pm.environment.get(\"C-hookCashInRelease\");",
									"            console.log(\"cash_in_release_payload\", cash_in_release_payload);",
									"            pm.test(\"Payment status of payment release is: release\" , function () {",
									"                console.log(\"act: \" + jsData.data.status);",
									"                pm.expect(\"release\" == jsData.data.status).to.be.true;",
									"            });",
									"",
									"            pm.test(\"net_amount of payment correctly! \" + cash_in_release_payload.data.net_amount, function () {",
									"                pm.expect(cash_in_release_payload.data.net_amount == jsData.data.net_amount).to.be.true;",
									"            });",
									"",
									"            pm.test(\"total_fee of payment is \" + cash_in_release_payload.data.total_fee, function () { // sẽ handle total_fee ở va",
									"                pm.expect(cash_in_release_payload.data.total_fee == jsData.data.total_fee).to.be.true;",
									"            });",
									"",
									"",
									"            pm.test(\"value_at of payment correctly! \" + tnx_obj.value_at, function () {",
									"                let act_value_at = new Date(jsData.data.value_at);",
									"                console.log(\"actual value_at: \" + act_value_at.toISOString());",
									"                pm.expect(tnx_obj.value_at.substring(0, 17) == act_value_at.toISOString().substring(0, 17)).to.be.true;",
									"            });",
									"",
									"            pm.test(\"account_id of payment is: \" + tnx_obj.account_debit, function () {",
									"                console.log(\"act: \" + jsData.data.account_id);",
									"                pm.expect(tnx_obj.account_debit == jsData.data.account_id).to.be.true;",
									"            });",
									"",
									"            pm.test(\"object_type of payment correctly! \" + tnx_obj.object_type, function () {",
									"                pm.expect(tnx_obj.object_type).to.eql(jsData.data.object_type);",
									"            });",
									"            ostman.setNextRequest(\"get_list_payment_account\"); // get_list_payment_account",
									"",
									"",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"    // let cash_in_release = pm.environment.get(\"C-hookCashInRelease\");",
									"    // console.log(\"cash_in_release\", cash_in_release);",
									"    // let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"",
									"    // pm.test(\"net_amount of payment correctly! \" + cash_in_release.data.net_amount, function () {",
									"    //     pm.expect(cash_in_release.data.net_amount == jsData.data.net_amount).to.be.true;",
									"    // });",
									"",
									"    // pm.test(\"total_fee of payment is 0\", function () { // sẽ handle total_fee ở va",
									"    //     pm.expect(cash_in_release.data.total_fee == jsData.data.total_fee).to.be.true;",
									"    // });",
									"",
									"",
									"    // pm.test(\"value_at of payment correctly! \" + tnx_obj.value_at, function () {",
									"    //     let act_value_at = new Date(jsData.data.value_at);",
									"    //     console.log(\"actual value_at: \" + act_value_at.toISOString());",
									"    //     pm.expect(tnx_obj.value_at.substring(0,17) == act_value_at.toISOString().substring(0,17)).to.be.true;",
									"    // });",
									"",
									"    // pm.test(\"account_id of payment is: \" + tnx_obj.account_debit, function () {",
									"    //     console.log(\"act: \" + jsData.data.account_id);",
									"    //     pm.expect(tnx_obj.account_debit == jsData.data.account_id).to.be.true;",
									"    // });",
									"",
									"    // pm.test(\"object_type of payment correctly! \" + tnx_obj.object_type, function () {",
									"    //     pm.expect(tnx_obj.object_type).to.eql(jsData.data.object_type);",
									"    // });",
									"",
									"",
									"} else {",
									"    console.log(\"Can't get internal contact detail, end test\", jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{finan_base_url}}/finan-ledger/api/v1/payment/detail/{{C-payment_id}}?branch_id={{C-branch_id}}",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"payment",
								"detail",
								"{{C-payment_id}}"
							],
							"query": [
								{
									"key": "branch_id",
									"value": "{{C-branch_id}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "hook",
			"item": [
				{
					"name": "hook_hold",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = 3;",
									"testcase++;",
									"pm.environment.set(\"C-testcase\", testcase);",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"// Hàm trả về số ngẫu nhiên trong khoảng từ min đến max",
									"function getRandomInt(min, max) {",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"",
									"// Hàm trả về chuỗi ký tự ngẫu nhiên có độ dài length",
									"function randomChars(length) {",
									"    var result = '';",
									"    var characters = 'HGFJHFHHGFYTFUYGIUAHHJGUYKGKUI8972492';",
									"    var charactersLength = characters.length;",
									"    for (var i = 0; i < length; i++) {",
									"        result += characters.charAt(Math.floor(Math.random() * charactersLength));",
									"    }",
									"    return result;",
									"}",
									"",
									"// Lấy đối tượng hóa đơn từ môi trường",
									"let invoice_obj = pm.environment.get(\"C-invoice_obj\");",
									"// console.log(\"invoice_obj\",invoice_obj);",
									"let invoice_id = invoice_obj ? invoice_obj.invoice_id : ''; // Kiểm tra xem invoice_obj có tồn tại không",
									"",
									"// Đặt invoice_id vào môi trường",
									"pm.environment.set(\"C-invoice_id\", invoice_id);",
									"",
									"",
									"",
									"// Lấy chi tiết hóa đơn từ môi trường",
									"",
									"let invoice_detail = pm.environment.get(\"C-invoice_de\");",
									"// console.log(\"invoice_detail\", invoice_detail);",
									"",
									"// Lấy thông tin tài khoản, tổng số tiền và số tiền net từ chi tiết hóa đơn",
									"let account_number = invoice_detail ? invoice_detail.payment_account.account_number : '';",
									"let total_amount = invoice_detail ? invoice_detail.total_amount :'';",
									"let net_amount = total_amount - 2000;",
									"let payment_method = invoice_detail ? invoice_detail.payment_config[0] : '';",
									"",
									"let payment_number = pm.environment.get(\"C-payment_number\");",
									"let business_id = pm.environment.get(\"C-business_id\");",
									"",
									"// Lấy ngày hiện tại dưới dạng chuỗi ISO",
									"const currentDate = new Date().toISOString().replace(/\\.\\d{3}/, '');",
									"",
									"console.log(\"currentDate\", currentDate);",
									"",
									"// Tạo payload",
									"let payload = {",
									"    \"data\": {",
									"        \"account_number\": account_number,",
									"        \"business_id\": business_id,",
									"        \"cash_in_type\": \"payment\",",
									"        \"created_at\": currentDate,",
									"        \"currency_code\": \"VND\",",
									"        \"net_amount\": net_amount,",
									"        \"payment_method\": payment_method,",
									"        \"reconciled_at\": null,",
									"        \"reference_id\": payment_number,",
									"        \"settled_at\": null,",
									"        \"status\": \"hold\",",
									"        \"total_amount\": total_amount,",
									"        \"total_fee\": 2000,",
									"        \"transaction_id\": randomChars(26)",
									"    },",
									"    \"receiver_key\": \"finan_ledger\",",
									"    \"type\": \"cash_in\"",
									"};",
									"",
									"console.log(\"payload: \", payload);",
									"",
									"// Đặt payload vào môi trường",
									"pm.environment.set(\"V-payload\", JSON.stringify(payload));",
									"pm.environment.set(\"C-hookCashIn\", payload);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    postman.setNextRequest(\"get_list_transaction\"); // get_list_transaction",
									"    console.log(\"debug: \",jsData);",
									"} else {",
									"    console.log(\"Can't get list payment account, end test\", jsData);",
									"    postman.setNextRequest(null);",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Request-Id",
								"value": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{V-payload}}"
						},
						"url": {
							"raw": "{{finan_base_url}}/finan-ledger/api/v1/webhook/finone",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"webhook",
								"finone"
							]
						}
					},
					"response": []
				},
				{
					"name": "hook_release",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = 5; ",
									"testcase++;",
									"pm.environment.set(\"C-testcase\", testcase);",
									"console.log(\"Testcase: \" + testcase);",
									"let hook_in_payload = pm.environment.get(\"C-hookCashIn\")",
									"let payload_hook_in = hook_in_payload.data;",
									"console.log(\"payload_hook_in\", payload_hook_in);",
									"",
									"// Hàm trả về số ngẫu nhiên trong khoảng từ min đến max",
									"function getRandomInt(min, max) {",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"",
									"// Hàm trả về chuỗi ký tự ngẫu nhiên có độ dài length",
									"function randomChars(length) {",
									"    var result = '';",
									"    var characters = 'HGFJHFHHGFYTFUYGIUAHHJGUYKGKUI8972492';",
									"    var charactersLength = characters.length;",
									"    for (var i = 0; i < length; i++) {",
									"        result += characters.charAt(Math.floor(Math.random() * charactersLength));",
									"    }",
									"    return result;",
									"}",
									"",
									"// Tạo payload",
									"let payload = {",
									"    \"data\": {",
									"        \"account_number\": payload_hook_in.account_number,",
									"        \"business_id\": payload_hook_in.business_id,",
									"        \"cash_in_type\": payload_hook_in.cash_in_type,",
									"        \"created_at\": payload_hook_in.created_at,",
									"        \"currency_code\": payload_hook_in.currency_code,",
									"        \"net_amount\": payload_hook_in.net_amount,",
									"        \"payment_method\": payload_hook_in.payment_method,",
									"        \"reconciled_at\": payload_hook_in.reconciled_at,",
									"        \"reference_id\": payload_hook_in.reference_id,",
									"        \"settled_at\": payload_hook_in.settled_at,",
									"        \"status\": \"release\",",
									"        \"total_amount\": payload_hook_in.total_amount,",
									"        \"total_fee\": payload_hook_in.total_fee,",
									"        \"transaction_id\": randomChars(26)",
									"    },",
									"    \"receiver_key\": \"finan_ledger\",",
									"    \"type\": \"cash_in\"",
									"};",
									"",
									"console.log(\"payload: \", payload);",
									"",
									"// Đặt payload vào môi trường",
									"pm.environment.set(\"V-payload\", JSON.stringify(payload));",
									"pm.environment.set(\"C-hookCashInRelease\", payload);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"",
									"    postman.setNextRequest(\"get_list_transaction\"); // get_list_transaction",
									"",
									"} else {",
									"    console.log(\"Can't get list payment account, end test\", jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Request-Id",
								"value": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{V-payload}}"
						},
						"url": {
							"raw": "{{finan_base_url}}/finan-ledger/api/v1/webhook/finone",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"webhook",
								"finone"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}