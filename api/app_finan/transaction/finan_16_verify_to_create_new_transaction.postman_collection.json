{
	"info": {
		"_postman_id": "4a80b562-9033-4c70-839b-883d5a8da323",
		"name": "finan_16_verify_to_create_new_transaction",
		"description": "### Testsuite: Verify to create manual transaction\n\n###### Testcase:\n\n1. Login with owner account\n2. Get data\n    1. Account coa / Get list coa => get ~~list credit &~~ list debit account\n    2. Account cash_n_bank / Get list account => get list credit (~~PENDING~~)\n    3. Posting / Get list posting => get total posting\n    4. Report / Get report cash_flow\n    5. Report / Get report account\n    6. ~~Home / todo / invoice overdue~~\n    7. Home / todo / uncategorized transaction => get data\n    8. Home / account balance / account lifetime => get data\n    9. Home / cash flow / cash flow period => get data\n    10. Home / profit n loss / profit loss period => get data\n    11. Home / receivable account / receivable and payable => get data\n    12. Transaction / Get list transaction => get total transaction\n3. Create manual transaction\n    1. Unhappy case: null data (except txn_type > default 'out', value_at)\n    2. Unhappy case: amount < 0\n    3. Unhappy case: missing credit ()\n    4. Unhappy case: missing debit ()\n    5. Unhappy case: credit is not existed\n    6. Unhappy case: debit is not existed\n    7. Unhappy case: min/max characters for description\n    8. Unhappy case: value_at is later current\n    9. Happy case => check all data created\n4. Check data\n    \n    1. Transaction / Get list transaction => have new record\n    2. Transaction / Get transaction detail => data correctly\n        \n    3. Account cash_n_bank / Get list account => check respective banlance_amount\n    4. Posting / get list posting => have x new posting (must double check x)\n    5. Report / Get report cash_flow => update data\n    6. Report / Get report account => update data\n    7. Home / todo / uncategorized transaction => update data\n    8. Home / account balance / account lifetime => update data\n    9. Home / cash flow / cash flow period => update data\n    10. Home / profit n loss / profit loss period => update data\n    11. Home / receivable account / receivable and payable => update data\n    12. Transaction / Get list transaction => get total transaction\n\n###### Note:\n\n- Account sẽ không có số liệu về amount, phần check balance_amount cần thực hiện ở các API về report\n- credit account: all accounts in sub_group: cash_and_bank\n- debit account: all accounts except sub_groups: cash_and_bank, Current Liabilities\n- NEW:\n    - txn_type == in: debit account only income group\n    - txn_type == out: debit account only expense group",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "282640"
	},
	"item": [
		{
			"name": "authen",
			"item": [
				{
					"name": "verify_email_or_phone_number",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/**",
									" * currently, manual to create account pwd & use charles to get it",
									" * default pwd created: 21112007 (prod with default account & no need pwd)",
									" */",
									"",
									"let email = pm.environment.get(\"SER-email\");",
									"let phone_number = pm.environment.get(\"SER-phone_number\");",
									"",
									"console.log(\"--- Start Testsuite 16 ---\");",
									"let testcase = 1;",
									"",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let isPhone = true;",
									"",
									"let payload;",
									"if(isPhone){",
									"    console.log(\"login with phone_number: \" + phone_number);",
									"    payload = {",
									"        \"phone_number\": phone_number",
									"    }",
									"} else {",
									"    console.log(\"login with email: \" + email);",
									"    payload = {",
									"        \"email\": email",
									"    }",
									"}",
									"",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));",
									"pm.environment.set(\"C-testcase\",testcase);",
									"pm.environment.set(\"C-isPhone\",isPhone);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ====================================== parser cURL with method",
									"function parseCURL(request_api){",
									"    let curl = \"\";",
									"    if(request_api.method == \"PUT\"){",
									"        curl = \"curl --location --request PUT \";",
									"    } else {",
									"        curl = \"curl --location \";",
									"    }",
									"    curl += \"'\" + request_api.url.protocol + \"://\"",
									"    for(let i in request_api.url.host){",
									"        if(i >= request_api.url.host.length - 1){",
									"            curl += request_api.url.host[i] + \"/\";",
									"        } else {",
									"            curl += request_api.url.host[i] + \".\";",
									"        }",
									"    }",
									"    for(let i in request_api.url.path){",
									"        if(i >= request_api.url.path.length - 1){",
									"            curl += request_api.url.path[i] + \"' \";",
									"        } else {",
									"            curl += request_api.url.path[i] + \"/\";",
									"        }",
									"    }",
									"    for(let i in request_api.header){",
									"        if(i >= request_api.header.length - 1){",
									"            curl += \"--header '\" + request_api.header[i].key + \": \" + request_api.header[i].value + \"'\";",
									"        } else {",
									"            curl += \"--header '\" + request_api.header[i].key + \": \" + request_api.header[i].value + \"' \";",
									"        }",
									"    }",
									"    switch(request_api.method){",
									"        case \"POST\":",
									"            curl += \" --data '\" + request_api.body.raw + \"'\"",
									"            break;",
									"        case \"PUT\":",
									"            curl += \" --data-raw '\" + request_api.body.raw + \"'\"",
									"            break;",
									"        default:",
									"            break;",
									"    }",
									"    console.log(curl);",
									"    return curl;",
									"}",
									"const request_api = pm.request.toJSON();",
									"parseCURL(request_api);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    let jsData = pm.response.json();",
									"",
									"    if(jsData.data.is_existed && jsData.data.has_password){",
									"        postman.setNextRequest(\"login_with_pwd\"); // login_with_pwd",
									"    } else if(jsData.data.is_existed) {",
									"        console.log(\"This account doesn't create pwd, please manual create!!!\");",
									"        postman.setNextRequest(null);",
									"    } else {",
									"        console.log(\"Error:\", JSON.stringify(jsData));",
									"        console.log(\"THIS ACCOUNT IS NOT EXISTED IN SYSTEM, WILL MANUAL CREATE IT\");",
									"        postman.setNextRequest(null);",
									"    }",
									"} else {",
									"    console.log(\"Error, end test\");",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finan_base_url}}/finan-user/api/v1/auth/account/verify",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-user",
								"api",
								"v1",
								"auth",
								"account",
								"verify"
							]
						}
					},
					"response": []
				},
				{
					"name": "login_with_pwd",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// let crypto = require('crypto-js');",
									"",
									"// const algorithm = \"aes-256-gcm\";",
									"// const IV_LEN = 12;",
									"// const AUTH_TAG_LEN = 16;",
									"// const SECRET_KEY = \"7dQ0HwRI5okvwAK0WzxaW6ABFncjeu1E\";",
									"",
									"// function encrypt(message) {",
									"//   const iv = Buffer.from(crypto.randomBytes(IV_LEN));",
									"//   const cipher = crypto.createCipheriv(algorithm, SECRET_KEY, iv, {",
									"//     authTagLength: AUTH_TAG_LEN,",
									"//   });",
									"//   const encryptedData = Buffer.concat([cipher.update(message), cipher.final()]);",
									"//   const authTag = cipher.getAuthTag();",
									"//   const raw = Buffer.concat([iv, encryptedData, authTag]).toString(\"hex\");",
									"//   return raw;",
									"// }",
									"",
									"// const pwd = \"21112007\";",
									"// // var superSecretEncrypted = CryptoJS.AES.encrypt(pwd, SECRET_KEY);",
									"",
									"// let pwd_enc = encrypt(pwd);",
									"// console.log(\"pwd_enc: \" + pwd_enc);",
									"",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"let isPhone = pm.environment.get(\"C-isPhone\");",
									"",
									"let verify_payload = JSON.parse(pm.environment.get(\"C-payload\"));",
									"",
									"let payload;",
									"let version = pm.environment.get(\"x-current-version\");",
									"if(isPhone){",
									"    payload = {",
									"        \"phone_number\": verify_payload.phone_number,",
									"        \"pwd\": pm.environment.get(\"pwd\"),",
									"        \"platform\": \"gtapp\",",
									"        \"device_id\": \"C9102FC6-466C-4980-B795-A91A2FD7F97F\",",
									"        \"app_version\": version,",
									"        \"device_name\": \"iPhone\"",
									"    }",
									"} else {",
									"    payload = {",
									"        \"email\": verify_payload.email,",
									"        \"pwd\": pm.environment.get(\"pwd\"),",
									"        \"platform\": \"gtapp\",",
									"        \"device_id\": \"C9102FC6-466C-4980-B795-A91A2FD7F97F\",",
									"        \"app_version\": version,",
									"        \"device_name\": \"iPhone\"",
									"    }",
									"}",
									"console.log(\"debug: \", payload);",
									"",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    let jsData = pm.response.json();",
									"    // debug",
									"    // console.log(JSON.stringify(jsData));",
									"",
									"    let business_id = null;",
									"    try{",
									"        business_id = jsData.data.business_info.list_business[0].business_id;",
									"    } catch{",
									"        console.log(\"This is new user, must create business_id\");",
									"    }",
									"",
									"    let userToken = jsData.data.token;",
									"    pm.environment.set(\"C-userToken\",userToken);",
									"",
									"    if(business_id == null){",
									"        console.log(\"This user don't have store, please check & use another account\");",
									"        ",
									"        postman.setNextRequest(null);",
									"    } else {",
									"        let userRefreshToken = jsData.data.refresh_token;",
									"",
									"        let userInfo = {",
									"            \"role_name\":jsData.data.business_info.current_role.role_name,",
									"            \"is_owner\":jsData.data.business_info.current_role.is_owner,",
									"            \"user_name\":jsData.data.business_info.list_business[0].user_name,",
									"            \"business_id\":business_id",
									"        }",
									"",
									"        // show log",
									"        // console.log(\"userToken:\",userToken);",
									"        // console.log(\"userRefreshToken:\",userRefreshToken);",
									"        console.log(\"userInfo:\",JSON.stringify(userInfo));",
									"",
									"        pm.environment.set(\"C-userRefreshToken\",userRefreshToken);",
									"        pm.environment.set(\"C-userInfo\",userInfo);",
									"        pm.environment.set(\"C-business_id\",business_id); // business_id",
									"",
									"        let testcase = pm.environment.get(\"C-testcase\");",
									"        testcase++;",
									"        pm.environment.set(\"C-testcase\",testcase);",
									"        postman.setNextRequest(\"get_branch_id\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get Token, end test\");",
									"",
									"    // debug",
									"    let jsData = pm.response.json();",
									"    console.log(\"data:\",JSON.stringify(jsData));",
									"",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finan_base_url}}/finan-user/api/v1/auth/account/login",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-user",
								"api",
								"v1",
								"auth",
								"account",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_branch_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let branch_id = null;",
									"    try {",
									"        branch_id = jsData.data.id;",
									"    } catch {",
									"        console.log(\"Can't get branch_id\");",
									"    }",
									"",
									"    pm.test(\"Got branch_id\", function () {",
									"        pm.expect(branch_id != null).to.be.true;",
									"    });",
									"",
									"    if(branch_id != null){",
									"        pm.environment.set(\"C-business_id\",branch_id);",
									"        postman.setNextRequest(\"get_list_internal_account\"); // get_list_internal_account",
									"    } else {",
									"        postman.setNextRequest(null);",
									"    }",
									"} else {",
									"    console.log(\"Can't get Token, end test\", jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{finan_base_url}}/finan-business/api/v1/branch/detail/{{C-business_id}}",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-business",
								"api",
								"v1",
								"branch",
								"detail",
								"{{C-business_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "account coa",
			"item": [
				{
					"name": "get_list_internal_account",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let coa = [], list_income_account = [], list_expense_account = [];",
									"    try {",
									"        for(let i in jsData.data){",
									"            let sub_group_i = [];",
									"            for(let j in jsData.data[i].sub_group){",
									"                let accounts_j = [];",
									"                for(let k in jsData.data[i].sub_group[j].accounts){",
									"                    accounts_j[accounts_j.length] = {",
									"                        \"account_name\":jsData.data[i].sub_group[j].accounts[k].name,",
									"                        \"account_id\":jsData.data[i].sub_group[j].accounts[k].id,",
									"                        \"group_name\":jsData.data[i].sub_group[j].accounts[k].group_name,",
									"                        \"sub_group_name\":jsData.data[i].sub_group[j].accounts[k].sub_name,",
									"                        \"branch_id\":jsData.data[i].sub_group[j].accounts[k].branch_id,",
									"                        \"displays_id\":jsData.data[i].sub_group[j].accounts[k].displays_id,",
									"                        \"account_source\":jsData.data[i].sub_group[j].accounts[k].account_source,",
									"                        \"account_type\":jsData.data[i].sub_group[j].accounts[k].account_type,",
									"                        \"account_code\":jsData.data[i].sub_group[j].accounts[k].account_code,",
									"                        \"coa_type\":jsData.data[i].sub_group[j].accounts[k].coa_type,",
									"                        \"sub_coa_deepest\":jsData.data[i].sub_group[j].accounts[k].sub_coa_deepest,",
									"                        \"name_en\":jsData.data[i].sub_group[j].accounts[k].name_en,",
									"                        \"status\":jsData.data[i].sub_group[j].accounts[k].status,",
									"                        \"parent_id\":jsData.data[i].sub_group[j].accounts[k].parent_id,",
									"                        \"description\":jsData.data[i].sub_group[j].accounts[k].description,",
									"                        \"open_amount\":jsData.data[i].sub_group[j].accounts[k].open_amount,",
									"                        \"currency\":jsData.data[i].sub_group[j].accounts[k].currency",
									"                        // \"opening_at\":jsData.data[i].sub_group[j].accounts[k].opening_at",
									"                        // \"closing_at\":jsData.data[i].sub_group[j].accounts[k].closing_at",
									"                    }",
									"",
									"                    if(jsData.data[i].value == \"income\" && jsData.data[i].sub_group[j].accounts[k].name != \"\"){",
									"                        list_income_account[list_income_account.length] = {",
									"                            \"account_name\":jsData.data[i].sub_group[j].accounts[k].name,",
									"                            \"account_id\":jsData.data[i].sub_group[j].accounts[k].id,",
									"                            \"account_key\":jsData.data[i].sub_group[j].accounts[k].key,",
									"                            \"group_name\":jsData.data[i].sub_group[j].accounts[k].group_name,",
									"                            \"sub_group_name\":jsData.data[i].sub_group[j].accounts[k].sub_name,",
									"                            \"branch_id\":jsData.data[i].sub_group[j].accounts[k].branch_id,",
									"                            \"displays_id\":jsData.data[i].sub_group[j].accounts[k].displays_id,",
									"                            \"account_source\":jsData.data[i].sub_group[j].accounts[k].account_source,",
									"                            \"account_type\":jsData.data[i].sub_group[j].accounts[k].account_type,",
									"                            \"account_code\":jsData.data[i].sub_group[j].accounts[k].account_code,",
									"                            \"coa_type\":jsData.data[i].sub_group[j].accounts[k].coa_type,",
									"                            \"sub_coa_deepest\":jsData.data[i].sub_group[j].accounts[k].sub_coa_deepest,",
									"                            \"name_en\":jsData.data[i].sub_group[j].accounts[k].name_en,",
									"                            \"status\":jsData.data[i].sub_group[j].accounts[k].status,",
									"                            \"parent_id\":jsData.data[i].sub_group[j].accounts[k].parent_id,",
									"                            \"description\":jsData.data[i].sub_group[j].accounts[k].description,",
									"                            \"open_amount\":jsData.data[i].sub_group[j].accounts[k].open_amount,",
									"                            \"currency\":jsData.data[i].sub_group[j].accounts[k].currency",
									"                        };",
									"                    }",
									"",
									"                    if(jsData.data[i].value == \"expense\" && jsData.data[i].sub_group[j].accounts[k].name != \"\"){",
									"                        list_expense_account[list_expense_account.length] = {",
									"                            \"account_name\":jsData.data[i].sub_group[j].accounts[k].name,",
									"                            \"account_id\":jsData.data[i].sub_group[j].accounts[k].id,",
									"                            \"account_key\":jsData.data[i].sub_group[j].accounts[k].key,",
									"                            \"group_name\":jsData.data[i].sub_group[j].accounts[k].group_name,",
									"                            \"sub_group_name\":jsData.data[i].sub_group[j].accounts[k].sub_name,",
									"                            \"branch_id\":jsData.data[i].sub_group[j].accounts[k].branch_id,",
									"                            \"displays_id\":jsData.data[i].sub_group[j].accounts[k].displays_id,",
									"                            \"account_source\":jsData.data[i].sub_group[j].accounts[k].account_source,",
									"                            \"account_type\":jsData.data[i].sub_group[j].accounts[k].account_type,",
									"                            \"account_code\":jsData.data[i].sub_group[j].accounts[k].account_code,",
									"                            \"coa_type\":jsData.data[i].sub_group[j].accounts[k].coa_type,",
									"                            \"sub_coa_deepest\":jsData.data[i].sub_group[j].accounts[k].sub_coa_deepest,",
									"                            \"name_en\":jsData.data[i].sub_group[j].accounts[k].name_en,",
									"                            \"status\":jsData.data[i].sub_group[j].accounts[k].status,",
									"                            \"parent_id\":jsData.data[i].sub_group[j].accounts[k].parent_id,",
									"                            \"description\":jsData.data[i].sub_group[j].accounts[k].description,",
									"                            \"open_amount\":jsData.data[i].sub_group[j].accounts[k].open_amount,",
									"                            \"currency\":jsData.data[i].sub_group[j].accounts[k].currency",
									"                        };",
									"                    }",
									"                }",
									"",
									"                sub_group_i[sub_group_i.length] = {",
									"                    \"sub_group_name\":jsData.data[i].sub_group[j].name,",
									"                    \"sub_group_id\":jsData.data[i].sub_group[j].id,",
									"                    \"sub_group_value\":jsData.data[i].sub_group[j].value,",
									"                    \"sub_group_description\":jsData.data[i].sub_group[j].description,",
									"                    \"accounts\":accounts_j",
									"                }",
									"            }",
									"",
									"            coa[coa.length] = {",
									"                \"group_name\":jsData.data[i].name,",
									"                \"value\":jsData.data[i].value,",
									"                \"index\":jsData.data[i].index,",
									"                \"sub_group\":sub_group_i",
									"            }",
									"        }",
									"    } catch {",
									"        console.log(\"can't get all account in coa\");",
									"    }",
									"",
									"    pm.test(\"Got coa of this user's business\", function () {",
									"        pm.expect(coa.length > 0).to.be.true;",
									"    });",
									"",
									"    if(coa.length > 0){",
									"        // console.log(\"coa: \", coa);",
									"        pm.environment.set(\"C-coa\",coa);",
									"        let list_debit_account = [];",
									"        let list_credit_account = [];",
									"        /**",
									"         * lấy những account_id và phân loại thành debit/credit",
									"         * - credit: tài khoản (only cash & bank)",
									"         * - debit: phân loại (all)",
									"         */ ",
									"        for(let i in coa){",
									"            for(let j in coa[i].sub_group){",
									"                for(let k in coa[i].sub_group[j].accounts){",
									"                    // if(coa[i].group_name == \"income\" || coa[i].group_name == \"expense\"){ // mở điều kiện này khi cần debug tạo tnx có report cassh-flow",
									"                        list_debit_account[list_debit_account.length] = coa[i].sub_group[j].accounts[k];",
									"                    // }",
									"                    if(coa[i].sub_group[j].sub_group_value == \"cash_and_bank\"){ ",
									"                        // console.log(\"debug: \", coa[i].sub_group[j].accounts[k]);",
									"                        if(coa[i].sub_group[j].accounts[k].account_name.includes(\"[API]\")){ // do 1 số name bị null (dev chưa validation dẫn đến report sẽ không biết của account nào - report ko trả về id, và loại bỏ bank account, chỉ lấy cash account)",
									"                            list_credit_account[list_credit_account.length] = coa[i].sub_group[j].accounts[k];",
									"                        }",
									"                    }",
									"                }",
									"            }",
									"        }",
									"",
									"        // console.log(\"list_debit_account: \", list_debit_account);",
									"        // console.log(\"list_credit_account: \", list_credit_account);",
									"        console.log(\"=========== list_income_account: \", list_income_account);",
									"        for(let item in list_income_account){",
									"            if(list_income_account[item].account_key == \"uncategorized_income\"){",
									"                pm.environment.set(\"C-uncategorized_income\",list_income_account[item]);",
									"                break;",
									"            }",
									"        }",
									"        console.log(\"=========== list_expense_account: \", list_expense_account);",
									"        for(let item in list_expense_account){",
									"            if(list_expense_account[item].account_key == \"uncategorized_expense\"){",
									"                pm.environment.set(\"C-uncategorized_expense\",list_expense_account[item]);",
									"                break;",
									"            }",
									"        }",
									"",
									"        pm.environment.set(\"C-list_debit_account\",list_debit_account);",
									"        pm.environment.set(\"C-list_credit_account\",list_credit_account);",
									"        pm.environment.set(\"C-list_income_account\",list_income_account);",
									"        pm.environment.set(\"C-list_expense_account\",list_expense_account);",
									"        ",
									"        postman.setNextRequest(\"get_list_payment_account\"); //get_list_payment_account",
									"    } else {",
									"        console.log(\"Can't get list internal account, end test \");",
									"        postman.setNextRequest(null);",
									"    }",
									"} else {",
									"    console.log(\"Can't get list internal account, end test \", jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{finan_base_url}}​/finan-ledger/api/v1/account/list?branch_id={{C-business_id}}&coa_type=",
							"host": [
								"{{finan_base_url}}​"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"account",
								"list"
							],
							"query": [
								{
									"key": "branch_id",
									"value": "{{C-business_id}}"
								},
								{
									"key": "coa_type",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get_internal_account_detail",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/**",
									" * Only check credit_account",
									" */",
									"",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let list_internal_account = pm.environment.get(\"C-list_internal_account\");",
									"let pos = pm.environment.get(\"C-pos\");",
									"if(!pos){",
									"    pos = 0;",
									"    pm.environment.set(\"C-pos\",pos);",
									"}",
									"",
									"let internal_account_id = list_internal_account[pos].account_id;",
									"console.log(\"view detail account: \" + account_id);",
									"",
									"pm.environment.set(\"C-internal_account_id\",internal_account_id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    const jsData = pm.response.json();",
									"    // let testcase = pm.environment.get(\"C-testcase\");",
									"    console.log(\"Debug: \" + JSON.stringify(jsData));",
									"",
									"    let list_internal_account = pm.environment.get(\"C-list_internal_account\");",
									"    let pos = pm.environment.get(\"C-pos\");",
									"",
									"    if(pos >= list_internal_account.length - 1){",
									"        pm.environment.unset(\"C-pos\");",
									"",
									"        postman.setNextRequest(\"get_list_tax\"); // get_list_tax",
									"    } else {",
									"        pos++;",
									"        pm.environment.set(\"C-pos\",pos);",
									"",
									"        postman.setNextRequest(\"get_internal_account_detail\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get internal account detail, end test\");",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{finan_base_url}}​​/finan-ledger/api/v1/account/detail/{{C-internal_account_id}}",
							"host": [
								"{{finan_base_url}}​​"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"account",
								"detail",
								"{{C-internal_account_id}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.request.headers.add({",
							" key: \"authorization\",",
							" value: \"Bearer \" + pm.environment.get(\"C-userToken\")",
							"});",
							"",
							"pm.request.headers.add({",
							" key: \"Content-Type\",",
							" value: \"application/json\"",
							"});"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "account cash_n_bank",
			"item": [
				{
					"name": "get_list_payment_account",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    // let total_account = jsData.data.accounts.length;",
									"    let list_credit_account = pm.environment.get(\"C-list_credit_account\");",
									"",
									"    switch(testcase){",
									"        case 2:",
									"            for(let i in list_credit_account){",
									"                for(let j in jsData.data.accounts){",
									"                    if(list_credit_account[i].account_id == jsData.data.accounts[j].id){",
									"                        list_credit_account[i].open_amount = jsData.data.accounts[j].open_amount;",
									"                        list_credit_account[i].total_balance_amount = jsData.data.accounts[j].total_balance_amount;",
									"                        // list_credit_account[i].status = jsData.data.accounts[j].status;",
									"                        break;",
									"                    }",
									"                }",
									"            }",
									"            pm.environment.set(\"C-list_credit_account\",list_credit_account);",
									"            // console.log(\"list_credit_account: \" + JSON.stringify(list_credit_account));",
									"",
									"            postman.setNextRequest(\"get_list_posting\"); // get_list_posting",
									"            break;",
									"        case 4:",
									"            let ranRedPos = pm.environment.get(\"C-ranRedPos\");",
									"            let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"            let tnx_amount = parseFloat(tnx_obj.amount);",
									"            let isFound = false;",
									"            for(let j in jsData.data.accounts){",
									"                if(list_credit_account[ranRedPos].account_id == jsData.data.accounts[j].id){",
									"                    isFound = true;",
									"",
									"                    if(tnx_obj.txn_type == \"in\"){",
									"                        pm.test(\"total_balance_amount increase \" + tnx_amount, function () {",
									"                            console.log(\"old: \" + list_credit_account[ranRedPos].total_balance_amount);",
									"                            console.log(\"expected: \" + (list_credit_account[ranRedPos].total_balance_amount + tnx_amount));",
									"                            console.log(\"act: \" + jsData.data.accounts[j].total_balance_amount);",
									"                            pm.expect(jsData.data.accounts[j].total_balance_amount == list_credit_account[ranRedPos].total_balance_amount + tnx_amount).to.be.true;",
									"                        });",
									"                    } else {",
									"                        pm.test(\"total_balance_amount decrease \" + tnx_amount, function () {",
									"                            console.log(\"old: \" + list_credit_account[ranRedPos].total_balance_amount);",
									"                            console.log(\"expected: \" + (list_credit_account[ranRedPos].total_balance_amount - tnx_amount));",
									"                            console.log(\"act: \" + jsData.data.accounts[j].total_balance_amount);",
									"                            pm.expect(jsData.data.accounts[j].total_balance_amount == list_credit_account[ranRedPos].total_balance_amount - tnx_amount).to.be.true;",
									"                        });",
									"                    }",
									"                    break;",
									"                }",
									"            }",
									"",
									"            pm.test(\"Found account \" + list_credit_account[ranRedPos].account_name, function () {",
									"                pm.expect(isFound).to.be.true;",
									"            });",
									"",
									"            postman.setNextRequest(\"get_list_posting\"); // get_list_posting",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get list payment account, end test\", jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"url": {
							"raw": "{{finan_base_url}}/finan-ledger/api/v1/account/list-by-key?branch_id={{C-business_id}}&key=cash_and_bank",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"account",
								"list-by-key"
							],
							"query": [
								{
									"key": "branch_id",
									"value": "{{C-business_id}}"
								},
								{
									"key": "key",
									"value": "cash_and_bank"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "transaction",
			"item": [
				{
					"name": "get_list_transaction",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = JSON.parse(responseBody);",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let total_tnx = null;",
									"    try {",
									"        total_tnx = jsData.meta.total_rows;",
									"    } catch {",
									"        console.log(\"Can't get total tnx\");",
									"    }",
									"",
									"    switch(testcase){",
									"        case 2:",
									"            pm.test(\"Got total tnx! \" + total_tnx, function () {",
									"                pm.expect(total_tnx != null).to.be.true;",
									"            });",
									"            pm.environment.set(\"C-total_tnx\",total_tnx);",
									"",
									"            testcase++;",
									"            pm.environment.set(\"C-testcase\",testcase);",
									"            postman.setNextRequest(\"create_transaction\"); // create_transaction",
									"            break;",
									"        case 4:",
									"            let old_total_tnx = pm.environment.get(\"C-total_tnx\");",
									"            let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"",
									"            pm.test(\"Total tnx increase 1\", function () {",
									"                console.log(\"Actual: \" + total_tnx);",
									"                console.log(\"Expected: \" + (old_total_tnx + 1));",
									"                pm.expect(total_tnx == old_total_tnx + 1).to.be.true;",
									"            });",
									"",
									"            let isFound = false;",
									"            for(let i in jsData.data){",
									"                if(jsData.data[i].id == tnx_obj.tnx_id){",
									"                    isFound = true;",
									"                    pm.test(\"amount of tnx correctly! \" + tnx_obj.amount, function () {",
									"                        pm.expect(tnx_obj.amount == jsData.data[i].amount).to.be.true;",
									"                    });",
									"",
									"                    pm.test(\"txn_type of tnx correctly! \" + tnx_obj.txn_type, function () {",
									"                        pm.expect(tnx_obj.txn_type == jsData.data[i].txn_type).to.be.true;",
									"                    });",
									"",
									"                    pm.test(\"description of tnx correctly! \" + tnx_obj.description, function () {",
									"                        pm.expect(tnx_obj.description == jsData.data[i].description).to.be.true;",
									"                    });",
									"",
									"                    pm.test(\"value_at of tnx correctly! \" + tnx_obj.value_at, function () {",
									"                        let act_value_at = new Date(jsData.data[i].value_at);",
									"                        console.log(\"actual value_at: \" + act_value_at.toISOString());",
									"                        pm.expect(tnx_obj.value_at == act_value_at.toISOString()).to.be.true; // tạm thời lấy mốc giờ +7 nên fix cứng, sau này sẽ dùng biến",
									"                    });",
									"                    break;",
									"                }",
									"            }",
									"",
									"            pm.test(\"Found new tnx\", function () {",
									"                pm.expect(isFound).to.be.true;",
									"            });",
									"",
									"            postman.setNextRequest(\"get_transaction_detail\"); // get_transaction_detail (get tnx detail đang lỗi nên tạm thời skip) get_report_cash_flow",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get list tnx, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{finan_base_url}}/finan-ledger/api/v1/transaction/list?branch_id={{C-business_id}}&page=1&page_size=100&sort",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"transaction",
								"list"
							],
							"query": [
								{
									"key": "branch_id",
									"value": "{{C-business_id}}"
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "page_size",
									"value": "100"
								},
								{
									"key": "sort",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get_transaction_detail",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"let tnx_id = tnx_obj.tnx_id;",
									"console.log(\"view detail tnx: \" + tnx_id);",
									"",
									"pm.environment.set(\"C-tnx_id\",tnx_id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    // let testcase = pm.environment.get(\"C-testcase\");",
									"    console.log(\"Debug: \" + JSON.stringify(jsData));",
									"",
									"    let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"",
									"    pm.test(\"amount of tnx correctly! \" + tnx_obj.amount, function () {",
									"        pm.expect(tnx_obj.amount == jsData.data.amount).to.be.true;",
									"    });",
									"",
									"    pm.test(\"txn_type of tnx correctly! \" + tnx_obj.txn_type, function () {",
									"        pm.expect(tnx_obj.txn_type == jsData.data.txn_type).to.be.true;",
									"    });",
									"",
									"    pm.test(\"description of tnx correctly! \" + tnx_obj.description, function () {",
									"        pm.expect(tnx_obj.description == jsData.data.description).to.be.true;",
									"    });",
									"",
									"    pm.test(\"value_at of tnx correctly! \" + tnx_obj.value_at, function () {",
									"        let act_value_at = new Date(jsData.data.value_at);",
									"        console.log(\"actual value_at: \" + act_value_at.toISOString());",
									"        pm.expect(tnx_obj.value_at == act_value_at.toISOString()).to.be.true;",
									"    });",
									"",
									"    postman.setNextRequest(\"get_list_payment_account\"); // get_list_payment_account",
									"} else {",
									"    console.log(\"Can't get internal contact detail, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{finan_base_url}}/finan-ledger/api/v1/transaction/detail/{{C-tnx_id}}?branch_id={{C-business_id}}",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"transaction",
								"detail",
								"{{C-tnx_id}}"
							],
							"query": [
								{
									"key": "branch_id",
									"value": "{{C-business_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "create_transaction",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// ============================= random number between min and max",
									"function getRandomInt(min, max) {",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"",
									"// ============================= random characters",
									"function randomChars(length) {",
									"    var result           = '';",
									"    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
									"    var charactersLength = characters.length;",
									"    for ( var i = 0; i < length; i++ ) {",
									"      result += characters.charAt(Math.floor(Math.random() * charactersLength));",
									"   }",
									"   return result;",
									"}",
									"",
									"/**",
									" * txn_type: in/out => Tạo Thu/ Tạo Chi",
									" * account_credit: Tài khoản => only cash&bank sub_group",
									" * account_debit: Phân loại => all accounts",
									" */",
									"",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"let case_ = pm.environment.get(\"C-case_\");",
									"if(!case_){",
									"    case_ = 1;",
									"    pm.environment.set(\"C-case_\",case_);",
									"}",
									"console.log(\"Testcase: \" + testcase + \".\" + case_);",
									"",
									"let today = new Date();",
									"let next_date_stp = Math.floor(today.getTime()/1000) + 24*60*60;",
									"let next_date = new Date(next_date_stp*1000);",
									"",
									"let list_debit_account = pm.environment.get(\"C-list_debit_account\");",
									"let list_credit_account = pm.environment.get(\"C-list_credit_account\");",
									"let txn_types = [\"in\",\"out\"];",
									"",
									"let account_credit, account_debit, amount;",
									"let value_at, txn_type, description;",
									"switch(case_){",
									"    case 1:",
									"        console.log(\"Unhappy case: null data (except txn_type > default 'out', value_at)\");",
									"        account_credit = null;",
									"        account_debit = null;",
									"        amount = null;",
									"        value_at = today.toISOString();",
									"        txn_type = \"\"; // \"\" == \"out\"",
									"        description = \"\";",
									"        break;",
									"    case 2:",
									"        console.log(\"Unhappy case: amount < 0\");",
									"        account_credit = list_credit_account[getRandomInt(0,list_credit_account.length -  1)].account_id;",
									"        account_debit = list_debit_account[getRandomInt(0,list_debit_account.length -  1)].account_id;",
									"        amount = -getRandomInt(1,50)*100000;",
									"        value_at = today.toISOString();",
									"        txn_type = txn_types[getRandomInt(0,1)];",
									"        description = \"[API][\" + txn_type + \"] transaction \" + randomChars(6);",
									"        break;",
									"    case 3:",
									"        console.log(\"Unhappy case: missing credit\");",
									"        account_credit = null;",
									"        account_debit = list_debit_account[getRandomInt(0,list_debit_account.length -  1)].account_id;",
									"        amount = -getRandomInt(1,50)*100000;",
									"        value_at = today.toISOString();",
									"        txn_type = txn_types[getRandomInt(0,1)];",
									"        description = \"[API][\" + txn_type + \"] transaction \" + randomChars(6);",
									"        break;",
									"    case 4:",
									"        console.log(\"Unhappy case: missing debit\");",
									"        account_credit = list_credit_account[getRandomInt(0,list_credit_account.length -  1)].account_id;",
									"        account_debit = null;",
									"        amount = -getRandomInt(1,50)*100000;",
									"        value_at = today.toISOString();",
									"        txn_type = txn_types[getRandomInt(0,1)];",
									"        description = \"[API][\" + txn_type + \"] transaction \" + randomChars(6);",
									"        break;",
									"    case 5:",
									"        console.log(\"Unhappy case: credit is not existed\");",
									"        account_credit = 9999999999999;",
									"        account_debit = list_debit_account[getRandomInt(0,list_debit_account.length -  1)].account_id;",
									"        amount = -getRandomInt(1,50)*100000;",
									"        value_at = today.toISOString();",
									"        txn_type = txn_types[getRandomInt(0,1)];",
									"        description = \"[API][\" + txn_type + \"] transaction \" + randomChars(6);",
									"        break;",
									"    case 6:",
									"        console.log(\"Unhappy case: debit is not existed\");",
									"        account_credit = list_credit_account[getRandomInt(0,list_credit_account.length -  1)].account_id;",
									"        account_debit = 9999999999999;",
									"        amount = getRandomInt(1,50)*100000;",
									"        value_at = today.toISOString();",
									"        txn_type = txn_types[getRandomInt(0,1)];",
									"        description = \"[API][\" + txn_type + \"] transaction \" + randomChars(6);",
									"        break;",
									"    case 7:",
									"        console.log(\"Unhappy case: min/max characters for description\");",
									"        account_credit = list_credit_account[getRandomInt(0,list_credit_account.length -  1)].account_id;",
									"        account_debit = list_debit_account[getRandomInt(0,list_debit_account.length -  1)].account_id;",
									"        amount = getRandomInt(1,50)*100000;",
									"        value_at = today.toISOString();",
									"        txn_type = txn_types[getRandomInt(0,1)];",
									"        description = \"[API][\" + txn_type + \"] transaction \" + randomChars(1000);",
									"        break;",
									"    case 8:",
									"        console.log(\"Unhappy case: value_at is later current\");",
									"        account_credit = list_credit_account[getRandomInt(0,list_credit_account.length -  1)].account_id;",
									"        account_debit = list_debit_account[getRandomInt(0,list_debit_account.length -  1)].account_id;",
									"        amount = getRandomInt(1,50)*100000;",
									"        value_at = next_date.toISOString();",
									"        txn_type = txn_types[getRandomInt(0,1)];",
									"        description = \"[API][\" + txn_type + \"] transaction \" + randomChars(6);",
									"        break;",
									"    case 9:",
									"        console.log(\"Happy case\");",
									"        let list_income_account = pm.environment.get(\"C-list_income_account\");",
									"        let list_expense_account = pm.environment.get(\"C-list_expense_account\");",
									"",
									"        let ranRedPos = getRandomInt(0,list_credit_account.length -  1);",
									"        account_credit = list_credit_account[ranRedPos].account_id;",
									"        pm.environment.set(\"C-ranRedPos\",ranRedPos);",
									"        txn_type = txn_types[getRandomInt(0,1)]; // getRandomInt(0,1)",
									"        if(txn_type == \"in\"){",
									"            account_debit = list_income_account[list_income_account.length - 2].account_id; // getRandomInt(0,list_income_account.length - 1)",
									"        } else {",
									"            account_debit = list_expense_account[list_expense_account.length - 1].account_id; // getRandomInt(0,list_expense_account.length - 1)",
									"        }",
									"        ",
									"        amount = getRandomInt(1,50)*100000;",
									"        value_at = today.toISOString();",
									"        description = \"[API][\" + txn_type + \"] transaction \" + randomChars(6);",
									"        break;",
									"    default:",
									"        console.log(\"Missing flow\");",
									"        break;",
									"}",
									"",
									"let payload;",
									"payload = {",
									"    \"account_id\":account_credit,",
									"    \"category_id\":account_debit,",
									"    \"amount\":amount,",
									"    \"branch_id\":parseInt(pm.environment.get(\"C-business_id\")),",
									"    \"txn_type\":txn_type,",
									"    \"description\":description,",
									"    \"value_at\":value_at",
									"}",
									"// if(txn_type == \"in\"){",
									"//     payload = {",
									"//         \"account_id\":account_debit,",
									"//         \"category_id\":account_credit,",
									"//         \"amount\":amount,",
									"//         \"branch_id\":parseInt(pm.environment.get(\"C-business_id\")),",
									"//         \"txn_type\":txn_type,",
									"//         \"description\":description,",
									"//         \"value_at\":value_at",
									"//     }",
									"// } else {",
									"//     payload = {",
									"//         \"account_id\":account_credit,",
									"//         \"category_id\":account_debit,",
									"//         \"amount\":amount,",
									"//         \"branch_id\":parseInt(pm.environment.get(\"C-business_id\")),",
									"//         \"txn_type\":txn_type,",
									"//         \"description\":description,",
									"//         \"value_at\":value_at",
									"//     }",
									"// }",
									"",
									"console.log(\"payload: \",payload);",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));",
									"pm.environment.set(\"C-tnx_obj\",payload);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"let case_ = pm.environment.get(\"C-case_\");",
									"",
									"let jsData = pm.response.json();",
									"switch(case_){",
									"    case 1: case 2:",
									"        pm.test(\"Status code is 400\", function () {",
									"            pm.response.to.have.status(400);",
									"        });",
									"",
									"        console.log(\"debug: \", jsData);",
									"",
									"        // case_++;",
									"        case_ = 9;",
									"        pm.environment.set(\"C-case_\",case_);",
									"        postman.setNextRequest(\"create_transaction\"); // create_transaction",
									"        break;",
									"    case 3: case 4:",
									"        pm.test(\"Status code is 400\", function () {",
									"            pm.response.to.have.status(400);",
									"        });",
									"",
									"        console.log(\"debug: \", jsData);",
									"",
									"        case_++;",
									"        pm.environment.set(\"C-case_\",case_);",
									"        postman.setNextRequest(\"create_transaction\"); // create_transaction",
									"        break;",
									"    case 5: case 6:",
									"        pm.test(\"Status code is 400\", function () {",
									"            pm.response.to.have.status(400);",
									"        });",
									"",
									"        console.log(\"debug: \", jsData);",
									"",
									"        case_++;",
									"        pm.environment.set(\"C-case_\",case_);",
									"        postman.setNextRequest(\"create_transaction\"); // create_transaction",
									"        break;",
									"    case 7: case 8:",
									"        pm.test(\"Status code is 400\", function () {",
									"            pm.response.to.have.status(400);",
									"        });",
									"",
									"        console.log(\"debug: \", jsData);",
									"",
									"        case_++;",
									"        pm.environment.set(\"C-case_\",case_);",
									"        postman.setNextRequest(\"create_transaction\"); // create_transaction",
									"        break;",
									"    case 9:",
									"        // console.log(\"debug: \" + JSON.stringify(jsData));",
									"        // pm.test(\"Status code is 200\", function () {",
									"        //     pm.response.to.have.status(200);",
									"        // });",
									"        pm.test(\"Status code is 200\", () => {",
									"            pm.expect(pm.response.code).to.be.oneOf([200,201]);",
									"        });",
									"",
									"        pm.environment.unset(\"C-case_\");",
									"        console.log(\"debug: \", jsData);",
									"        let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"",
									"        // update tnx_id for tnx_obj",
									"        try {",
									"            tnx_obj.tnx_id = jsData.data.id;",
									"        } catch {",
									"            console.log(\"Can't get tnx_id\");",
									"        }",
									"",
									"        pm.test(\"amount of tnx correctly! \" + tnx_obj.amount, function () {",
									"            pm.expect(tnx_obj.amount == jsData.data.amount).to.be.true;",
									"        });",
									"",
									"        pm.test(\"txn_type of tnx correctly! \" + tnx_obj.txn_type, function () {",
									"            pm.expect(tnx_obj.txn_type == jsData.data.txn_type).to.be.true;",
									"        });",
									"",
									"        pm.test(\"description of tnx correctly! \" + tnx_obj.description, function () {",
									"            pm.expect(tnx_obj.description == jsData.data.description).to.be.true;",
									"        });",
									"",
									"        pm.test(\"value_at of tnx correctly! \" + tnx_obj.value_at, function () {",
									"            // pm.expect(tnx_obj.value_at == jsData.data.value_at).to.be.true;",
									"            pm.expect(tnx_obj.value_at).to.eql(jsData.data.value_at);",
									"        });",
									"",
									"        testcase++;",
									"        pm.environment.set(\"C-testcase\",testcase);",
									"        pm.environment.set(\"C-tnx_obj\",tnx_obj);",
									"        postman.setNextRequest(\"get_list_transaction\"); // get_list_transaction",
									"        break;",
									"    default:",
									"        console.log(\"missing flow, end test\");",
									"        postman.setNextRequest(null);",
									"        break;",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finan_base_url}}/finan-ledger/api/v1/transaction/create",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"transaction",
								"create"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.request.headers.add({",
							" key: \"authorization\",",
							" value: \"Bearer \" + pm.environment.get(\"C-userToken\")",
							"});",
							"",
							"pm.request.headers.add({",
							" key: \"Content-Type\",",
							" value: \"application/json\"",
							"});"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "posting",
			"item": [
				{
					"name": "get_list_posting",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let page = pm.environment.get(\"C-page\");",
									"",
									"if(!page){",
									"    page = 1;",
									"    pm.environment.set(\"C-page\",page);",
									"",
									"    let page_size = 500;",
									"    pm.environment.set(\"C-page_size\",page_size);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"/**",
									" * object_type: transaction, invoice",
									" * object_id => id respective with object_type (tnx_id, invoice_id)",
									" * object_id_ref => use for invoice with product/item (product_id, item_id)",
									" * is_credit",
									" * created_at",
									" * value_at",
									" */",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = JSON.parse(responseBody);",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let total_pages = 1;",
									"    try {",
									"        total_pages = jsData.meta.total_pages;",
									"    } catch {",
									"        console.log(\"currently, this branch with null data\");",
									"    }",
									"    let page = pm.environment.get(\"C-page\");",
									"",
									"    let list_posting, old_list_posting;",
									"    switch(testcase){",
									"        case 2:",
									"            list_posting = pm.environment.get(\"C-list_posting\");",
									"            if(!list_posting){",
									"                list_posting = [];",
									"            }",
									"            break;",
									"        case 4:",
									"            old_list_posting = pm.environment.get(\"C-old_list_posting\");",
									"            if(!old_list_posting){",
									"                old_list_posting = pm.environment.get(\"C-list_posting\");",
									"                pm.environment.unset(\"C-list_posting\");",
									"                pm.environment.set(\"C-old_list_posting\",old_list_posting);",
									"            }",
									"",
									"            list_posting = pm.environment.get(\"C-list_posting\");",
									"            if(!list_posting){",
									"                list_posting = [];",
									"            }",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow\");",
									"            break;",
									"    }",
									"",
									"    for(let item in jsData.data){",
									"        list_posting[list_posting.length] = {",
									"            \"posting_id\":jsData.data[item].id,",
									"            \"account_id\":jsData.data[item].account_id,",
									"            \"amount\":jsData.data[item].amount,",
									"            \"branch_id\":jsData.data[item].branch_id,",
									"            \"created_at\":jsData.data[item].created_at,",
									"            \"currency\":jsData.data[item].currency,",
									"            \"deleted_at\":jsData.data[item].deleted_at,",
									"            \"is_credit\":jsData.data[item].is_credit,",
									"            \"is_final_status\":jsData.data[item].is_final_status,",
									"            \"object_id_ref\":jsData.data[item].object_id_ref,",
									"            \"object_id\":jsData.data[item].object_id,",
									"            \"object_type\":jsData.data[item].object_type,",
									"            // \"value_at\":jsData.data[item].value_at,",
									"            \"short_desc\":jsData.data[item].short_desc",
									"        }",
									"    }",
									"    pm.environment.set(\"C-list_posting\",list_posting);",
									"",
									"    if(page >= total_pages){",
									"        // must clear page & page_size",
									"        pm.environment.unset(\"C-page\");",
									"        pm.environment.unset(\"C-page_size\");",
									"",
									"        switch(testcase){",
									"            case 2:",
									"                pm.test(\"Got all posting! \" + list_posting.length, function () {",
									"                    pm.expect(list_posting.length > 0).to.be.true;",
									"                });",
									"",
									"                postman.setNextRequest(\"get_report_cash_flow\"); // get_report_cash_flow",
									"                break;",
									"            case 4:",
									"                // xử lý cho expected list",
									"                let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"                let list_expected_posting = [];",
									"                if(tnx_obj.txn_type == \"out\"){",
									"                    // account",
									"                    list_expected_posting[0] = {",
									"                        \"account_id\":tnx_obj.account_id,",
									"                        \"object_type\":\"transaction\",",
									"                        \"object_id\":tnx_obj.tnx_id,",
									"                        \"amount\":tnx_obj.amount,",
									"                        \"is_credit\":true,",
									"                        \"type\":\"account\"",
									"                    }",
									"                    // category",
									"                    list_expected_posting[1] = {",
									"                        \"account_id\":tnx_obj.category_id,",
									"                        \"object_type\":\"transaction\",",
									"                        \"object_id\":tnx_obj.tnx_id,",
									"                        \"amount\":tnx_obj.amount,",
									"                        \"is_credit\":false,",
									"                        \"type\":\"category\"",
									"                    }",
									"                } else {",
									"                    // account",
									"                    list_expected_posting[0] = {",
									"                        \"account_id\":tnx_obj.account_id,",
									"                        \"object_type\":\"transaction\",",
									"                        \"object_id\":tnx_obj.tnx_id,",
									"                        \"amount\":tnx_obj.amount,",
									"                        \"is_credit\":false,",
									"                        \"type\":\"account\"",
									"                    }",
									"                    // category",
									"                    list_expected_posting[1] = {",
									"                        \"account_id\":tnx_obj.category_id,",
									"                        \"object_type\":\"transaction\",",
									"                        \"object_id\":tnx_obj.tnx_id,",
									"                        \"amount\":tnx_obj.amount,",
									"                        \"is_credit\":true,",
									"                        \"type\":\"category\"",
									"                    }",
									"                }",
									"                console.log(\"list_expected_posting: \", list_expected_posting);",
									"",
									"                // xử lý cho actual list",
									"                let list_act_posting = [];",
									"                for(let i in list_posting){",
									"                    if(list_posting[i].object_type == \"transaction\" && list_posting[i].object_id == tnx_obj.tnx_id){",
									"                        list_act_posting[list_act_posting.length] = {",
									"                            \"account_id\":list_posting[i].account_id,",
									"                            \"object_type\":\"transaction\",",
									"                            \"object_id\":list_posting[i].object_id,",
									"                            \"amount\":list_posting[i].amount,",
									"                            \"is_credit\":list_posting[i].is_credit",
									"                        }",
									"                    }",
									"                }",
									"                console.log(\"list_act_posting: \", list_act_posting);",
									"                ",
									"                pm.test(\"Have 2 new records\", function () {",
									"                    pm.expect(list_posting.length == old_list_posting.length + 2).to.be.true;",
									"                });",
									"",
									"                let count = 0;",
									"                for(let i in list_expected_posting){",
									"                    for(let j in list_act_posting){",
									"                        if(list_expected_posting[i].account_id == list_act_posting[j].account_id){",
									"                            count++;",
									"                            if(list_expected_posting[i].type == \"account\"){",
									"                                console.log(\"Found payment account\");",
									"",
									"                                pm.test(\"is_credit correctly\", function () {",
									"                                    pm.expect(list_expected_posting[i].is_credit == list_act_posting[j].is_credit).to.be.true;",
									"                                });",
									"",
									"                                pm.test(\"amount correctly\", function () {",
									"                                    pm.expect(list_expected_posting[i].amount == list_act_posting[j].amount).to.be.true;",
									"                                });",
									"                            } else {",
									"                                console.log(\"Found category account\");",
									"",
									"                                pm.test(\"is_credit correctly\", function () {",
									"                                    pm.expect(list_expected_posting[i].is_credit == list_act_posting[j].is_credit).to.be.true;",
									"                                });",
									"",
									"                                pm.test(\"amount correctly\", function () {",
									"                                    pm.expect(list_expected_posting[i].amount == list_act_posting[j].amount).to.be.true;",
									"                                });",
									"                            }",
									"                            break;",
									"                        }",
									"                    }",
									"                }",
									"",
									"                pm.test(\"Found all posting\", function () {",
									"                    pm.expect(count == 2).to.be.true;",
									"                });",
									"",
									"                postman.setNextRequest(\"get_report_cash_flow\"); // get_report_cash_flow",
									"                break;",
									"            default:",
									"                console.log(\"Missing flow, end test\");",
									"                postman.setNextRequest(null);",
									"                break;",
									"        }",
									"    } else {",
									"        page++;",
									"        pm.environment.set(\"C-page\",page);",
									"",
									"        console.log(\"view next page (\" + page + \") to get more posting\");",
									"        postman.setNextRequest(\"get_list_posting\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get list posting, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{finan_base_url}}/finan-ledger/api/v1/posting/list?branch_id={{C-business_id}}&page={{C-page}}&page_size={{C-page_size}}&search=&sort=",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"posting",
								"list"
							],
							"query": [
								{
									"key": "branch_id",
									"value": "{{C-business_id}}"
								},
								{
									"key": "page",
									"value": "{{C-page}}"
								},
								{
									"key": "page_size",
									"value": "{{C-page_size}}"
								},
								{
									"key": "search",
									"value": ""
								},
								{
									"key": "sort",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.request.headers.add({",
							" key: \"authorization\",",
							" value: \"Bearer \" + pm.environment.get(\"C-userToken\")",
							"});",
							"",
							"pm.request.headers.add({",
							" key: \"Content-Type\",",
							" value: \"application/json\"",
							"});"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "report",
			"item": [
				{
					"name": "get_report_cash_flow",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"// lấy full tháng hiện tại",
									"let today = new Date();",
									"let start_current_month = new Date(today.getFullYear(), today.getMonth(), 1);",
									"let end_current_month = new Date(today.getFullYear(), today.getMonth() + 1, 1);",
									"",
									"// lấy full tháng trước",
									"let start_last_month = new Date(today.getFullYear(), today.getMonth() - 1, 1);",
									"let end_last_month = new Date(today.getFullYear(), today.getMonth(), 1);",
									"",
									"// lấy full ngày hiện tại",
									"// let firstDay = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0 ,0, 0);",
									"// let lastDay = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 23, 59 ,59, 0);",
									"",
									"// lấy n ngày đến hiện tại",
									"// let firstDayTimestamp = Math.floor(firstDay.getTime()/1000) - 2*24*60*60;",
									"// let start_day_ago = new Date(firstDayTimestamp*1000);",
									"",
									"let current_period_start = start_current_month.toISOString();",
									"let current_period_end = end_current_month.toISOString();",
									"let previous_period_start = start_last_month.toISOString();",
									"let previous_period_end = end_last_month.toISOString();",
									"",
									"/**",
									" * currently, display error if missing previous_period_start & previous_period_end or them = \"\";",
									" */",
									"let payload = {",
									"    \"branch_id\": parseInt(pm.environment.get(\"C-business_id\")),",
									"    \"current_period_start\": current_period_start,",
									"    \"current_period_end\": current_period_end,",
									"    \"previous_period_start\": previous_period_start,",
									"    \"previous_period_end\": previous_period_end",
									"    // \"timezone\": \"Asia/Ho_Chi_Minh\" // UTC, Asia/Ho_Chi_Minh == UTC+07:00",
									"}",
									"",
									"console.log(\"payload: \",payload);",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));",
									"",
									"pm.environment.set(\"C-current_period_start\",current_period_start);",
									"pm.environment.set(\"C-current_period_end\",current_period_end);",
									"pm.environment.set(\"C-previous_period_start\",previous_period_start);",
									"pm.environment.set(\"C-previous_period_end\",previous_period_end);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ============================= sort by key",
									"function sortByKey(array, key, type) {",
									"    if(type == \"asc\"){",
									"        return array.sort(function(a, b) {",
									"            var x = a[key]; var y = b[key];",
									"            return ((x > y) ? -1 : ((x < y) ? 1 : 0));",
									"        });",
									"    } else {",
									"        return array.sort(function(a, b) {",
									"            var x = a[key]; var y = b[key];",
									"            return ((x < y) ? -1 : ((x > y) ? 1 : 0));",
									"        });",
									"    }",
									"}",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let report_cash_flow = null;",
									"    try {",
									"        report_cash_flow = jsData.data;",
									"        /**",
									"         * db_data",
									"         * sum_card_data",
									"         * top_income_categories_data",
									"         * full_income_categories_data",
									"         * top_expense_categories_data",
									"         * full_expense_categories_data",
									"         */",
									"    } catch {",
									"        console.log(\"Can't get report cash_flow data\");",
									"    }",
									"",
									"    let total_income = 0, total_expense = 0;",
									"    let income_list = [], expense_list = [];",
									"    let exp_sum_card_data;",
									"    let full_income_categories_data;",
									"    if(\"full_income_categories_data\" in jsData.data){",
									"        full_income_categories_data = JSON.parse(JSON.stringify(jsData.data.full_income_categories_data));",
									"    }",
									"    let full_expense_categories_data;",
									"    if(\"full_expense_categories_data\" in jsData.data){",
									"        full_expense_categories_data = JSON.parse(JSON.stringify(jsData.data.full_expense_categories_data));",
									"    }",
									"    switch(testcase){",
									"        case 2:",
									"            pm.environment.set(\"C-report_cash_flow\",report_cash_flow);",
									"",
									"            // ================================================ bonus check current data",
									"            // try {",
									"            //     for(let i in jsData.data.db_data){",
									"            //         if(jsData.data.db_data[i].coa_type == \"income\"){",
									"            //             income_list[income_list.length] = JSON.parse(JSON.stringify(jsData.data.db_data[i]));",
									"            //             total_income += jsData.data.db_data[i].current_income;",
									"            //         } else if (jsData.data.db_data[i].coa_type == \"expense\"){",
									"            //             expense_list[expense_list.length] = JSON.parse(JSON.stringify(jsData.data.db_data[i]));",
									"            //             total_expense += jsData.data.db_data[i].current_expense;",
									"            //         }",
									"            //     }",
									"            //     exp_sum_card_data = {",
									"            //         \"total_current_income\": total_income,",
									"            //         \"total_current_expense\": total_expense,",
									"            //         \"total_current_gap\": (total_income - total_expense)",
									"            //     }",
									"            //     console.log(\"exp_sum_card_data: \", exp_sum_card_data);",
									"",
									"            //     for(let i in income_list){",
									"            //         income_list[i].percentage = parseFloat((income_list[i].current_income/total_income*100).toFixed(2));",
									"            //         delete income_list[i]['coa_type'];",
									"            //         delete income_list[i]['current_income'];",
									"            //     }",
									"            //     console.log(\"income_list: \", sortByKey(income_list,\"percentage\",\"asc\"));",
									"",
									"            //     for(let i in expense_list){",
									"            //         expense_list[i].percentage = parseFloat((expense_list[i].current_expense/total_expense*100).toFixed(2));",
									"            //         delete expense_list[i]['coa_type'];",
									"            //         delete expense_list[i]['current_expense'];",
									"            //     }",
									"            //     console.log(\"expense_list: \", sortByKey(expense_list,\"percentage\",\"asc\"));",
									"",
									"            //     pm.test(\"sum_card_data correctly\", function () {",
									"            //         pm.expect(JSON.stringify(jsData.data.sum_card_data) == JSON.stringify(exp_sum_card_data)).to.be.true;",
									"            //     });",
									"",
									"            //     for(let i in full_income_categories_data){",
									"            //         delete full_income_categories_data[i]['current_amount'];",
									"            //     }",
									"            //     pm.test(\"full_income_categories_data correctly\", function () {",
									"            //         pm.expect(JSON.stringify(full_income_categories_data) == JSON.stringify(income_list)).to.be.true;",
									"            //     });",
									"",
									"            //     for(let i in full_expense_categories_data){",
									"            //         delete full_expense_categories_data[i]['current_amount'];",
									"            //     }",
									"            //     pm.test(\"full_expense_categories_data correctly\", function () {",
									"            //         pm.expect(JSON.stringify(full_expense_categories_data) == JSON.stringify(expense_list)).to.be.true;",
									"            //         // pm.expect(jsData.data.full_expense_categories_data).to.deep.include(expense_list);",
									"            //     });",
									"            // } catch {",
									"            //     console.log(\"Null data\");",
									"            // }",
									"            // ================================================ ",
									"",
									"            postman.setNextRequest(\"get_report_account\"); // get_list_transaction, get_report_account",
									"            break;",
									"        case 4:",
									"            let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"            let list_debit_account = pm.environment.get(\"C-list_debit_account\");",
									"            let list_credit_account = pm.environment.get(\"C-list_credit_account\");",
									"            let old_report_cash_flow = pm.environment.get(\"C-report_cash_flow\");",
									"",
									"            // console.log(\"debug old_report_cash_flow: \", old_report_cash_flow);",
									"            // console.log(\"debug report_cash_flow: \", report_cash_flow);",
									"",
									"            // tnx => hiện tại txn_type chỉ dùng để hiển thị trên UI, ko có ý nghĩa tăng vào tài khoản nào",
									"            // if(tnx_obj.txn_type == \"out\"){",
									"            //     // increase expense",
									"            // } else {",
									"            //     // increase income",
									"            // }",
									"            for(let i in list_credit_account){",
									"                if(list_credit_account[i].account_id == tnx_obj.account_id){",
									"                    console.log(\"Tnx được thực hiện ở tài khoản: \" + list_credit_account[i].account_name);",
									"                    tnx_obj.account_name = list_credit_account[i].account_name;",
									"                    break;",
									"                }",
									"            }",
									"            for(let i in list_debit_account){",
									"                if(list_debit_account[i].account_id == tnx_obj.category_id){",
									"                    console.log(\"Tnx được thực hiện ở phân loại: \" + list_debit_account[i].account_name);",
									"                    tnx_obj.category_name = list_debit_account[i].account_name;",
									"                    tnx_obj.category_group_name = list_debit_account[i].group_name;",
									"                    tnx_obj.category_sub_group_name = list_debit_account[i].sub_group_name;",
									"                    tnx_obj.coa_type = list_debit_account[i].coa_type;",
									"                    break;",
									"                }",
									"            }",
									"            pm.environment.set(\"C-tnx_obj\",tnx_obj);",
									"            // console.log(\"tnx_obj after update: \", tnx_obj);",
									"",
									"            // old data",
									"            let hasAccountInOldDB = false;",
									"            let old_amount;",
									"            for(let i in old_report_cash_flow.db_data){",
									"                if(old_report_cash_flow.db_data[i].coa_name == tnx_obj.category_name){",
									"                    hasAccountInOldDB = true;",
									"                    if(old_report_cash_flow.db_data[i].coa_type == \"income\"){",
									"                        old_amount = old_report_cash_flow.db_data[i].current_income;",
									"                    } else {",
									"                        old_amount = old_report_cash_flow.db_data[i].current_expense;",
									"                    }",
									"                    break;",
									"                }",
									"            }",
									"",
									"            // new data",
									"            let hasAccoountInNewDB = false;",
									"            let new_amount;",
									"            for(let i in report_cash_flow.db_data){",
									"                if(report_cash_flow.db_data[i].coa_name == tnx_obj.category_name){",
									"                    hasAccoountInNewDB = true;",
									"                    if(report_cash_flow.db_data[i].coa_type == \"income\"){",
									"                        new_amount = report_cash_flow.db_data[i].current_income;",
									"                    } else {",
									"                        new_amount = report_cash_flow.db_data[i].current_expense;",
									"                    }",
									"                    break;",
									"                }",
									"            }",
									"",
									"            if(tnx_obj.coa_type == \"income\" || tnx_obj.coa_type == \"expense\"){",
									"                if(tnx_obj.coa_type == \"income\"){",
									"                    console.log(\"Tnx thực hiện với coa_type là income, tăng income tương ứng trong tk\");",
									"                } else {",
									"                    console.log(\"Tnx thực hiện với coa_type là expense, tăng expense tương ứng trong tk\");",
									"                }",
									"",
									"                // check db_data",
									"                if(hasAccountInOldDB){",
									"                    pm.test(\"inscrease account \" + tnx_obj.category_name + \" with amount \" + tnx_obj.amount, function () {",
									"                        pm.expect(new_amount == old_amount + tnx_obj.amount).to.be.true;",
									"                    });",
									"                } else {",
									"                    pm.test(\"had new record of account \" + tnx_obj.category_name + \" with amount \" + tnx_obj.amount, function () {",
									"                        pm.expect(hasAccoountInNewDB && new_amount == tnx_obj.amount).to.be.true;",
									"                    });",
									"                }",
									"",
									"                // check sum_card_data",
									"                for(let i in report_cash_flow.db_data){",
									"                    if(report_cash_flow.db_data[i].coa_type == \"income\"){",
									"                        income_list[income_list.length] = JSON.parse(JSON.stringify(report_cash_flow.db_data[i]));",
									"                        total_income += report_cash_flow.db_data[i].current_income;",
									"                    } else if (report_cash_flow.db_data[i].coa_type == \"expense\"){",
									"                        expense_list[expense_list.length] = report_cash_flow.db_data[i];",
									"                        total_expense += report_cash_flow.db_data[i].current_expense;",
									"                    }",
									"                }",
									"                exp_sum_card_data = {",
									"                    \"total_current_income\": total_income,",
									"                    \"total_current_expense\": total_expense,",
									"                    \"total_current_gap\": (total_income - total_expense)",
									"                }",
									"                // console.log(\"exp_sum_card_data: \", exp_sum_card_data);",
									"",
									"                for(let i in income_list){",
									"                    income_list[i].percentage = parseFloat((income_list[i].current_income/total_income*100).toFixed(2));",
									"                    delete income_list[i]['coa_type'];",
									"                    delete income_list[i]['current_income'];",
									"                }",
									"                // console.log(\"income_list: \", sortByKey(income_list,\"percentage\",\"asc\"));",
									"",
									"                for(let i in expense_list){",
									"                    expense_list[i].percentage = parseFloat((expense_list[i].current_expense/total_expense*100).toFixed(2));",
									"                    delete expense_list[i]['coa_type'];",
									"                    delete expense_list[i]['current_expense'];",
									"                }",
									"                // console.log(\"expense_list: \", sortByKey(expense_list,\"percentage\",\"asc\"));",
									"",
									"                pm.test(\"sum_card_data correctly\", function () {",
									"                    pm.expect(JSON.stringify(report_cash_flow.sum_card_data) == JSON.stringify(exp_sum_card_data)).to.be.true;",
									"                });",
									"",
									"                // check top_income & top_expense",
									"",
									"                // check full_income & full_expense",
									"                for(let i in full_income_categories_data){",
									"                    delete full_income_categories_data[i]['current_amount'];",
									"                }",
									"                pm.test(\"full_income_categories_data correctly\", function () {",
									"                    pm.expect(JSON.stringify(full_income_categories_data) == JSON.stringify(income_list)).to.be.true;",
									"                });",
									"",
									"                for(let i in full_expense_categories_data){",
									"                    delete full_expense_categories_data[i]['current_amount'];",
									"                }",
									"                pm.test(\"full_expense_categories_data correctly\", function () {",
									"                    pm.expect(JSON.stringify(full_expense_categories_data) == JSON.stringify(expense_list)).to.be.true;",
									"                    // pm.expect(report_cash_flow.full_expense_categories_data).to.deep.include(expense_list);",
									"                });",
									"            } else {",
									"                console.log(\"Tnx thực hiện với coa_type khác income và expense, nothing happen with report cash-flow\");",
									"",
									"                pm.test(\"Nothing happen!!!\", function () {",
									"                    pm.expect(JSON.stringify(report_cash_flow) == JSON.stringify(old_report_cash_flow)).to.be.true;",
									"                });",
									"            }",
									"",
									"            postman.setNextRequest(\"get_report_account\"); // get_report_account",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get report cash_flow, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finan_base_url}}/finan-ledger/api/v1/report/cash-flow",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"report",
								"cash-flow"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_report_account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ============================= sort by key",
									"function sortByKey(array, key, type) {",
									"    if(type == \"asc\"){",
									"        return array.sort(function(a, b) {",
									"            var x = a[key]; var y = b[key];",
									"            return ((x > y) ? -1 : ((x < y) ? 1 : 0));",
									"        });",
									"    } else {",
									"        return array.sort(function(a, b) {",
									"            var x = a[key]; var y = b[key];",
									"            return ((x < y) ? -1 : ((x > y) ? 1 : 0));",
									"        });",
									"    }",
									"}",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let report_account = null;",
									"    try {",
									"        report_account = jsData.data;",
									"        /**",
									"         * list account in sub_group_value = cash_and_bank",
									"         */",
									"    } catch {",
									"        console.log(\"Can't get report cash_flow data\");",
									"    }",
									"",
									"    switch(testcase){",
									"        case 2:",
									"            pm.environment.set(\"C-report_account\",report_account);",
									"",
									"            // ================================================ bonus check current data",
									"            let coa = pm.environment.get(\"C-coa\");",
									"            let cash_n_bank = [];",
									"            loop:",
									"            for(let i in coa){",
									"                for(let j in coa[i].sub_group){",
									"                    if(coa[i].sub_group[j].sub_group_value == \"cash_and_bank\"){",
									"                        cash_n_bank = coa[i].sub_group[j];",
									"                        break loop;",
									"                    }",
									"                }",
									"            }",
									"",
									"            pm.test(\"Show all account in cash_and_bank\", function () {",
									"                pm.expect(cash_n_bank.accounts.length == report_account.length).to.be.true;",
									"            });",
									"            // console.log(\"cash_n_bank: \" + JSON.stringify(cash_n_bank));",
									"            // console.log(\"report_account: \" + JSON.stringify(report_account));",
									"            ",
									"            // ================================================ ",
									"",
									"            postman.setNextRequest(\"report_uncategorized_transaction\"); // report_uncategorized_transaction",
									"            break;",
									"        case 4:",
									"            let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"            let list_credit_account = pm.environment.get(\"C-list_credit_account\");",
									"            let old_report_account = pm.environment.get(\"C-report_account\");",
									"            ",
									"            for(let i in list_credit_account){",
									"                if(tnx_obj.txn_type == \"out\"){",
									"                    if(list_credit_account[i].account_id == tnx_obj.account_id){",
									"                        tnx_obj.account_name = list_credit_account[i].account_name;",
									"                        break;",
									"                    }",
									"                } else {",
									"                    if(list_credit_account[i].account_id == tnx_obj.category_id){",
									"                        tnx_obj.account_name = list_credit_account[i].account_name;",
									"                        break;",
									"                    }",
									"                }",
									"            }",
									"            // console.log(\"debug old_report_account: \", old_report_account);",
									"            // console.log(\"debug report_account: \", report_account);",
									"",
									"            let isFound = false;",
									"            loop:",
									"            for(let j in report_account){",
									"                for(let k in old_report_account){",
									"                    if(\"name\" in report_account[j] && \"name\" in old_report_account[k]){",
									"                        if(report_account[j].name == old_report_account[k].name && report_account[j].name == tnx_obj.account_name){",
									"                            isFound = true;",
									"",
									"                            if(tnx_obj.txn_type == \"out\"){",
									"                                pm.test(\"Account \" + tnx_obj.account_name + \" increase credit_amount \" + tnx_obj.amount, function () {",
									"                                    console.log(\"old credit_amount: \" + old_report_account[k].credit_amount);",
									"                                    console.log(\"amount: \" + tnx_obj.amount);",
									"                                    console.log(\"expected: \" + (old_report_account[k].credit_amount + tnx_obj.amount));",
									"                                    console.log(\"new credit_amount: \" + report_account[j].credit_amount);",
									"                                    pm.expect(report_account[j].credit_amount == old_report_account[k].credit_amount + tnx_obj.amount).to.be.true;",
									"                                });",
									"                            } else {",
									"                                pm.test(\"Account \" + tnx_obj.account_name + \" increase debit_amount \" + tnx_obj.amount, function () {",
									"                                    console.log(\"old debit_amount: \" + old_report_account[k].debit_amount);",
									"                                    console.log(\"amount: \" + tnx_obj.amount);",
									"                                    console.log(\"expected: \" + (old_report_account[k].debit_amount + tnx_obj.amount));",
									"                                    console.log(\"new debit_amount: \" + report_account[j].debit_amount);",
									"                                    pm.expect(report_account[j].debit_amount == old_report_account[k].debit_amount + tnx_obj.amount).to.be.true;",
									"                                });",
									"                            }",
									"                            break loop;",
									"                        }",
									"                    }",
									"                }",
									"            }",
									"",
									"            pm.test(\"Found account \" + tnx_obj.account_name, function () {",
									"                pm.expect(isFound).to.be.true;",
									"            });",
									"",
									"            postman.setNextRequest(\"report_uncategorized_transaction\"); // report_uncategorized_transaction",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get report cash_flow, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"branch_id\": {{C-business_id}},\n    \"current_period_start\": \"{{C-current_period_start}}\",\n    \"current_period_end\": \"{{C-current_period_end}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finan_base_url}}/finan-ledger/api/v1/report/account",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"report",
								"account"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.request.headers.add({",
							" key: \"authorization\",",
							" value: \"Bearer \" + pm.environment.get(\"C-userToken\")",
							"});",
							"",
							"pm.request.headers.add({",
							" key: \"Content-Type\",",
							" value: \"application/json\"",
							"});"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "home-report",
			"item": [
				{
					"name": "todo",
					"item": [
						{
							"name": "report_uncategorized_transaction",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"/**",
											" * khi tạo invoice thì ko ảnh hưởng API này",
											" */",
											"",
											"let testcase = pm.environment.get(\"C-testcase\");",
											"console.log(\"Testcase: \" + testcase);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsData = pm.response.json();",
											"if(pm.response.code == 200){",
											"    let testcase = pm.environment.get(\"C-testcase\");",
											"    let total_number_uncategorized_transaction = null;",
											"    try {",
											"        total_number_uncategorized_transaction = jsData.data.total_number_uncategorized_transaction;",
											"    } catch {",
											"        console.log(\"Can't get data\");",
											"    }",
											"",
											"    let old_total_number_uncategorized_transaction = pm.environment.get(\"C-total_number_uncategorized_transaction\");",
											"    switch(testcase){",
											"        case 2:",
											"            pm.test(\"Got total_number_uncategorized_transaction \" + total_number_uncategorized_transaction, function () {",
											"                pm.environment.set(\"C-total_number_uncategorized_transaction\",total_number_uncategorized_transaction);",
											"                pm.expect(total_number_uncategorized_transaction != null).to.be.true;",
											"            });",
											"",
											"            postman.setNextRequest(\"report_account_lifetime\"); //report_account_lifetime",
											"            break;",
											"        case 4:",
											"            let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
											"            let uncategorized_expense = pm.environment.get(\"C-uncategorized_expense\");",
											"            let uncategorized_income = pm.environment.get(\"C-uncategorized_income\");",
											"            ",
											"            if(tnx_obj.account_id == uncategorized_expense.account_id || tnx_obj.category_id == uncategorized_expense.account_id || tnx_obj.account_id == uncategorized_income.account_id || tnx_obj.category_id == uncategorized_income.account_id){",
											"                pm.test(\"total_number_uncategorized_transaction increase 1\", function () {",
											"                    pm.expect(total_number_uncategorized_transaction == old_total_number_uncategorized_transaction + 1).to.be.true;",
											"                });",
											"            } else {",
											"                pm.test(\"Nothing happen with total_number_uncategorized_transaction \", function () {",
											"                    pm.expect(total_number_uncategorized_transaction == old_total_number_uncategorized_transaction).to.be.true;",
											"                });",
											"            }",
											"            ",
											"            postman.setNextRequest(\"report_account_lifetime\"); // report_account_lifetime",
											"            break;",
											"        default:",
											"            console.log(\"Missing flow, end test\");",
											"            postman.setNextRequest(null);",
											"            break;",
											"    }",
											"} else {",
											"    console.log(\"Can't get report account receivable unpaid, end test\",jsData);",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-location-timezone",
										"value": "UTC+07:00",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{C-userToken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"branch_id\": {{C-business_id}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{finan_base_url}}/finan-ledger/api/v1/report/to-do-uncategorized-transaction",
									"host": [
										"{{finan_base_url}}"
									],
									"path": [
										"finan-ledger",
										"api",
										"v1",
										"report",
										"to-do-uncategorized-transaction"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "account_balance",
					"item": [
						{
							"name": "report_account_lifetime",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsData = pm.response.json();",
											"if(pm.response.code == 200){",
											"    let testcase = pm.environment.get(\"C-testcase\");",
											"    let account_lifetime = null;",
											"    try {",
											"        account_lifetime = jsData;",
											"    } catch {",
											"        console.log(\"Can't get data\");",
											"    }",
											"",
											"    let old_account_lifetime = pm.environment.get(\"C-account_lifetime\");",
											"    switch(testcase){",
											"        case 2:",
											"            pm.test(\"Got account_lifetime \" + account_lifetime, function () {",
											"                pm.environment.set(\"C-account_lifetime\",account_lifetime);",
											"                pm.expect(account_lifetime != null).to.be.true;",
											"            });",
											"",
											"            // check data",
											"            let total_balance = 0;",
											"            for(let i in jsData.data){",
											"                total_balance += jsData.data[i].balance;",
											"            }",
											"            pm.test(\"Data correctly \" + total_balance, function () {",
											"                pm.expect(total_balance == jsData.sum_balance).to.be.true;",
											"            });",
											"",
											"            postman.setNextRequest(\"report_cash_flow_period\"); // report_cash_flow_period",
											"            break;",
											"        case 4:",
											"            /**",
											"             * - nếu tnx_obj.account_id (in - credit) tnx_obj.account_id (out - debit) trong list tăng lên => tăng tương ứng",
											"             * - ngược lại, name (remaining_accounts) sẽ tăng tương ứng",
											"            */",
											"            let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
											"            // sum_balance",
											"            console.log(\"old: \" + old_account_lifetime.sum_balance);",
											"            console.log(\"act: \" + account_lifetime.sum_balance);",
											"            if(tnx_obj.txn_type == \"in\"){",
											"                // case tăng debit => tăng sum_balance",
											"                pm.test(\"sum_balance increase \" + tnx_obj.amount, function () {",
											"                    pm.expect(account_lifetime.sum_balance == old_account_lifetime.sum_balance + tnx_obj.amount).to.be.true;",
											"                });",
											"            } else {",
											"                // case tăng credit => giảm sum_balance",
											"                pm.test(\"sum_balance decrease \" + tnx_obj.amount, function () {",
											"                    pm.expect(account_lifetime.sum_balance == old_account_lifetime.sum_balance - tnx_obj.amount).to.be.true;",
											"                });",
											"            }",
											"",
											"            // data cũ",
											"            let account_obj = null;",
											"            for(let i = 0; i < old_account_lifetime.data.length; i++){",
											"                if(old_account_lifetime.data[i].id == tnx_obj.account_id){",
											"                    account_obj = old_account_lifetime.data[i];",
											"                    break;",
											"                }",
											"",
											"                if(i == old_account_lifetime.data.length - 1){",
											"                    // remaining_accounts",
											"                    account_obj = old_account_lifetime.data[i];",
											"                    break;",
											"                }",
											"            }",
											"",
											"            // data mới",
											"            let isFound = false;",
											"            for(let i in account_lifetime.data){",
											"                if(account_lifetime.data[i].id == account_obj.id){",
											"                    isFound = true;",
											"                    console.log(\"old: \" + account_obj.balance);",
											"                    console.log(\"act: \" + account_lifetime.data[i].balance);",
											"                    if(tnx_obj.txn_type == \"in\"){",
											"                        // case tăng debit => balance = debit - credit",
											"                        pm.test(\"balance of \" + account_lifetime.data[i].name + \" increase \" + tnx_obj.amount, function () {",
											"                            pm.expect(account_lifetime.data[i].balance == account_obj.balance + tnx_obj.amount).to.be.true;",
											"                        });",
											"                    } else {",
											"                        // case tăng credit",
											"                        pm.test(\"balance of \" + account_lifetime.data[i].name + \" decrease \" + tnx_obj.amount, function () {",
											"                            pm.expect(account_lifetime.data[i].balance == account_obj.balance - tnx_obj.amount).to.be.true;",
											"                        });",
											"                    }",
											"                    break;",
											"                }",
											"            }",
											"",
											"            pm.test(\"Found exchange account\", function () {",
											"                pm.expect(isFound).to.be.true;",
											"            });",
											"            ",
											"            postman.setNextRequest(\"report_cash_flow_period\"); // report_cash_flow_period",
											"            break;",
											"        default:",
											"            console.log(\"Missing flow, end test\");",
											"            postman.setNextRequest(null);",
											"            break;",
											"    }",
											"} else {",
											"    console.log(\"Can't get report account receivable unpaid, end test\",jsData);",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"/**",
											" * case handle:",
											" * - Nếu account tăng balance ko nằm trong top 5:",
											" *   + TH1: balance tăng làm cho account nhảy vào top 5 => phải show account trong top 5",
											" *   + TH2: balance tăng ko làm cho account nhảy vào top 5 => chỉ thay đổi số của remaining_accounts",
											" * Note: tạo invoice sẽ ko ảnh hưởng, chỉ ảnh hưởng bởi tnx",
											" */",
											"",
											"let testcase = pm.environment.get(\"C-testcase\");",
											"console.log(\"Testcase: \" + testcase);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-location-timezone",
										"value": "UTC+07:00",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "Bearer {{C-userToken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"branch_id\": {{C-business_id}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{finan_base_url}}/finan-ledger/api/v1/report/account-lifetime",
									"host": [
										"{{finan_base_url}}"
									],
									"path": [
										"finan-ledger",
										"api",
										"v1",
										"report",
										"account-lifetime"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "cash_flow",
					"item": [
						{
							"name": "report_cash_flow_period",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"/**",
											" * period: year, month, week",
											" */",
											"",
											"let period = \"month\";",
											"pm.environment.set(\"C-period\",period);",
											"",
											"let testcase = pm.environment.get(\"C-testcase\");",
											"console.log(\"Testcase: \" + testcase);",
											"console.log(\"period: \" + period);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsData = pm.response.json();",
											"if(pm.response.code == 200){",
											"    let testcase = pm.environment.get(\"C-testcase\");",
											"    let cash_flow_period = null;",
											"    try {",
											"        cash_flow_period = jsData.data;",
											"        /**",
											"         * period: week, month, year",
											"         * sum_card_data",
											"         * dates_data",
											"         */",
											"    } catch {",
											"        console.log(\"Can't get report cash_flow data\");",
											"    }",
											"",
											"    switch(testcase){",
											"        case 2:",
											"            pm.test(\"Got cash_flow_period \", function () {",
											"                pm.environment.set(\"C-cash_flow_period\",cash_flow_period);",
											"                pm.expect(cash_flow_period != null).to.be.true;",
											"            });",
											"",
											"            console.log(\"cash_flow_period: \", cash_flow_period);",
											"",
											"            // ================================================ bonus check current data",
											"            // waiting logic updated at phase 2",
											"            // ================================================ ",
											"",
											"            postman.setNextRequest(\"report_profit_loss_period\"); // report_profit_loss_period",
											"            break;",
											"        case 4:",
											"            let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
											"            let list_income_account = pm.environment.get(\"C-list_income_account\");",
											"            let list_expense_account = pm.environment.get(\"C-list_expense_account\");",
											"            let old_cash_flow_period = pm.environment.get(\"C-cash_flow_period\");",
											"",
											"            // hiện tại chưa chốt login nên tạm thời check phần sum_card_data",
											"            if(tnx_obj.txn_type == \"in\"){",
											"                // tăng income",
											"                pm.test(\"total_income increase \" + tnx_obj.amount, function () {",
											"                    pm.expect(cash_flow_period.sum_card_data.total_income == old_cash_flow_period.sum_card_data.total_income + tnx_obj.amount).to.be.true;",
											"                });",
											"",
											"                pm.test(\"nothing happen with total_expense\", function () {",
											"                    pm.expect(cash_flow_period.sum_card_data.total_expense == old_cash_flow_period.sum_card_data.total_expense).to.be.true;",
											"                });",
											"",
											"                pm.test(\"total_gap increase \" + tnx_obj.amount, function () {",
											"                    pm.expect(cash_flow_period.sum_card_data.total_gap == old_cash_flow_period.sum_card_data.total_gap + tnx_obj.amount).to.be.true;",
											"                });",
											"            } else {",
											"                // tăng expense",
											"                pm.test(\"nothing happen with total_income\", function () {",
											"                    pm.expect(cash_flow_period.sum_card_data.total_income == old_cash_flow_period.sum_card_data.total_income).to.be.true;",
											"                });",
											"",
											"                pm.test(\"total_expense increase \"  + tnx_obj.amount, function () {",
											"                    pm.expect(cash_flow_period.sum_card_data.total_expense == old_cash_flow_period.sum_card_data.total_expense + tnx_obj.amount).to.be.true;",
											"                });",
											"",
											"                pm.test(\"total_gap decrease \" + tnx_obj.amount, function () {",
											"                    pm.expect(cash_flow_period.sum_card_data.total_gap == old_cash_flow_period.sum_card_data.total_gap - tnx_obj.amount).to.be.true;",
											"                });",
											"            }",
											"",
											"            postman.setNextRequest(\"report_profit_loss_period\"); // report_profit_loss_period",
											"            break;",
											"        default:",
											"            console.log(\"Missing flow, end test\");",
											"            postman.setNextRequest(null);",
											"            break;",
											"    }",
											"} else {",
											"    console.log(\"Can't get report cash_flow, end test\",jsData);",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-location-timezone",
										"value": "UTC+07:00",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{C-userToken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"branch_id\": {{C-business_id}},\n    \"period\": \"{{C-period}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{finan_base_url}}/finan-ledger/api/v1/report/cash-flow-period",
									"host": [
										"{{finan_base_url}}"
									],
									"path": [
										"finan-ledger",
										"api",
										"v1",
										"report",
										"cash-flow-period"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "profit_n_loss",
					"item": [
						{
							"name": "report_profit_loss_period",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"/**",
											" * \"report_type\": sum,income,expense",
											" * Note: report_type = sum => hiện tại bị null dates_data",
											" * - C1: call từng loại income, expense dể lấy dates_data",
											" * - C2: wait fixing from dev",
											" * => tạm thời xử lý case sum, 2 case còn lại sẽ handle sau",
											" */",
											"let report_type = \"sum\";",
											"pm.environment.set(\"C-report_type\",report_type);",
											"",
											"let testcase = pm.environment.get(\"C-testcase\");",
											"console.log(\"Testcase: \" + testcase);",
											"console.log(\"report_type: \" + report_type);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsData = pm.response.json();",
											"if(pm.response.code == 200){",
											"    let testcase = pm.environment.get(\"C-testcase\");",
											"    let profit_loss_period = null;",
											"    try {",
											"        profit_loss_period = jsData.data;",
											"        /**",
											"         * period: week, month, year",
											"         * sum_card_data",
											"         * dates_data",
											"         */",
											"    } catch {",
											"        console.log(\"Can't get report cash_flow data\");",
											"    }",
											"",
											"    switch(testcase){",
											"        case 2:",
											"            pm.test(\"Got profit_loss_period \", function () {",
											"                pm.environment.set(\"C-profit_loss_period\",profit_loss_period);",
											"                pm.expect(profit_loss_period != null).to.be.true;",
											"            });",
											"",
											"            console.log(\"profit_loss_period: \", profit_loss_period);",
											"",
											"            // ================================================ bonus check current data",
											"            // waiting logic updated at phase 2",
											"            // ================================================ ",
											"",
											"            postman.setNextRequest(\"report_account_receivable_payable_lifetime\"); // report_account_receivable_payable_lifetime",
											"            break;",
											"        case 4:",
											"            let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
											"            let list_debit_account = pm.environment.get(\"C-list_debit_account\");",
											"            let list_credit_account = pm.environment.get(\"C-list_credit_account\");",
											"            let old_profit_loss_period = pm.environment.get(\"C-profit_loss_period\");",
											"",
											"            console.log(\"debug old_profit_loss_period: \", old_profit_loss_period);",
											"            console.log(\"debug profit_loss_period: \", profit_loss_period);",
											"",
											"            // CHƯA CÓ RULE, ĐANG ĐỢI PO DEFINE",
											"",
											"            postman.setNextRequest(\"report_account_receivable_payable_lifetime\"); // report_account_receivable_payable_lifetime",
											"            break;",
											"        default:",
											"            console.log(\"Missing flow, end test\");",
											"            postman.setNextRequest(null);",
											"            break;",
											"    }",
											"} else {",
											"    console.log(\"Can't get report cash_flow, end test\",jsData);",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-location-timezone",
										"value": "UTC+07:00",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{C-userToken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"branch_id\": {{C-business_id}},\n    \"period\": \"{{C-period}}\",\n    \"report_type\": \"{{C-report_type}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{finan_base_url}}/finan-ledger/api/v1/report/profit-loss-period",
									"host": [
										"{{finan_base_url}}"
									],
									"path": [
										"finan-ledger",
										"api",
										"v1",
										"report",
										"profit-loss-period"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "receivable_account",
					"item": [
						{
							"name": "report_account_receivable_payable_lifetime",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"/**",
											" * API này chỉ liên quan khi tnx có link với invoice",
											" */",
											"",
											"let testcase = pm.environment.get(\"C-testcase\");",
											"console.log(\"Testcase: \" + testcase);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsData = pm.response.json();",
											"if(pm.response.code == 200){",
											"    let testcase = pm.environment.get(\"C-testcase\");",
											"    let account_receivable_payable = null;",
											"    try {",
											"        account_receivable_payable = jsData.data;",
											"    } catch {",
											"        console.log(\"Can't get data\");",
											"    }",
											"",
											"    let old_account_receivable_payable = pm.environment.get(\"C-account_receivable_payable\");",
											"    switch(testcase){",
											"        case 2:",
											"            pm.test(\"Got account_receivable_payable\", function () {",
											"                console.log(\"account_receivable_payable: \",account_receivable_payable);",
											"                pm.environment.set(\"C-account_receivable_payable\",account_receivable_payable);",
											"                pm.expect(account_receivable_payable != null).to.be.true;",
											"            });",
											"",
											"            postman.setNextRequest(\"get_list_transaction\"); // get_list_transaction",
											"            break;",
											"        case 4:",
											"            pm.test(\"Nothing happen\", function () {",
											"                console.log(\"old: \", old_account_receivable_payable);",
											"                console.log(\"new: \", account_receivable_payable);",
											"                pm.expect(JSON.stringify(account_receivable_payable) == JSON.stringify(old_account_receivable_payable)).to.be.true;",
											"            });",
											"",
											"            console.log(\"--- End Testsuite 16 ---\");",
											"            postman.setNextRequest(null);",
											"            break;",
											"        default:",
											"            console.log(\"Missing flow, end test\");",
											"            postman.setNextRequest(null);",
											"            break;",
											"    }",
											"} else {",
											"    console.log(\"Can't get report account receivable unpaid, end test\",jsData);",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-location-timezone",
										"value": "UTC+07:00",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{C-userToken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"branch_id\": {{C-business_id}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{finan_base_url}}/finan-ledger/api/v1/report/account-receivable-payable-lifetime",
									"host": [
										"{{finan_base_url}}"
									],
									"path": [
										"finan-ledger",
										"api",
										"v1",
										"report",
										"account-receivable-payable-lifetime"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.request.headers.add({",
					" key: \"x-locale-code\",",
					" value: \"vi_VN\"",
					"});",
					"",
					"pm.request.headers.add({",
					" key: \"x-location-timezone\",",
					" value: \"UTC+07:00\"",
					"});",
					"",
					"pm.request.headers.add({",
					" key: \"x-platform-key\",",
					" value: \"pro_web\"",
					"});"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}