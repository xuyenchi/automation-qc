{
	"info": {
		"_postman_id": "95ef49d9-9bfe-4504-bf8d-a861995f1621",
		"name": "finan_21_verify_to_edit_transaction_linked_invoice",
		"description": "### Testsuite: Verify to edit manual transaction linked with invoice\n\n###### Testcase:\n\n1. Login with owner account\n2. Get data\n    1. Account coa / Get list coa => get debit account\n    2. Account cash_n_bank / Get list account => get list credit\n    3. Transaction / Get list transaction => get total transaction, get transaction need edit\n    4. \\[2.c include invoice\\] \\[New\\] payment / get list payment => get total payment & get payment mapping with this transaction at case 2.c.\n    5. \\[2.c include invoice\\] Invoice / Get list invoice => get un_paid invoice (get paid, partial_paid if needed) => pick 1 invoice to create tnx (this invoice != case 2.c)\n    6. Posting / Get list posting => get total posting\n    7. Report / Get report cash_flow => has change with tnx (confirm with PO)\n    8. Report / Get report account => get data\n    9. Report / Get report account receivable paid => get data\n    10. Report / Get report account receivable unpaid => get data\n    11. Report / Get report account receivable customer => get data respective with invoice at 2.c.\n    12. Report / Get report account receivable invoice => get data respective with 2.c\n    13. Home / todo / invoice overdue => get data\n    14. Home / account balance / account lifetime => get data\n    15. Home / cash flow / cash flow period => get data\n    16. Home / profit n loss / profit n loss period => get data\n    17. Home / receivable account / receivable payable => get data\n3. edit transaction (partial_paid for an unpaid)\n    1. Unhappy case: null data (except txn_type > default 'out', value_at)\n    2. Unhappy case: amount < 0\n    3. Unhappy case: missing credit ()\n    4. Unhappy case: object_type is null\n    5. Unhappy case: credit is not existed\n    6. Unhappy case: object_key is null\n    7. Unhappy case: value_at is later invoice_created\n    8. Happy case => check all data created\n4. Check data\n    \n    1. Transaction / Get list transaction => have new record\n    2. Transaction / Get transaction detail => data correctly\n    3. \\[New\\] payment / get list payment => have new record\n    4. \\[New\\] payment / get payment detail => data correctly\n    5. Account cash_n_bank / Get list account => check respective banlance_amount\n    6. Invoice / Get list invoice => check data old invoice\n    7. Invoice / Get invoice detail => check data old invoice\n        \n    8. Posting / get list posting => have 2 new posting (account receivable & account debit)\n    9. Report / Get report cash_flow => update data\n    10. Report / Get report account => update data\n    11. Report / Get report account receivable paid => update data\n    12. Report / Get report account receivable unpaid => update data\n    13. Report / Get report account receivable customer => update data\n    14. Report / Get report account receivable invoice => update data\n    15. Home / todo / invoice overdue => check data\n    16. Home / account balance / account lifetime => check data\n    17. Home / cash flow / cash flow period => check data\n    18. Home / profit n loss / profit n loss period => check data\n    19. Home / receivable account / receivable payable => check data\n\n###### Note:\n\n- Account sẽ không có số liệu về amount, phần check balance_amount cần thực hiện ở các API về report\n- debit account: payment for invoice",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "282640"
	},
	"item": [
		{
			"name": "authen",
			"item": [
				{
					"name": "verify_email_or_phone_number",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/**",
									" * currently, manual to create account pwd & use charles to get it",
									" * default pwd created: 21112007 (prod with default account & no need pwd)",
									" */",
									"",
									"let email = pm.environment.get(\"SER-email\");",
									"let phone_number = pm.environment.get(\"SER-phone_number\");",
									"",
									"console.log(\"--- Start Testsuite 21 ---\");",
									"let testcase = 1;",
									"",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let isPhone = true;",
									"",
									"let payload;",
									"if(isPhone){",
									"    console.log(\"login with phone_number: \" + phone_number);",
									"    payload = {",
									"        \"phone_number\": phone_number",
									"    }",
									"} else {",
									"    console.log(\"login with email: \" + email);",
									"    payload = {",
									"        \"email\": email",
									"    }",
									"}",
									"",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));",
									"pm.environment.set(\"C-testcase\",testcase);",
									"pm.environment.set(\"C-isPhone\",isPhone);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    let jsData = pm.response.json();",
									"",
									"    if(jsData.data.is_existed && jsData.data.has_password){",
									"        postman.setNextRequest(\"login_with_pwd\");",
									"    } else if(jsData.data.is_existed) {",
									"        console.log(\"This account doesn't create pwd, please manual create!!!\");",
									"        postman.setNextRequest(null);",
									"    } else {",
									"        console.log(\"Error:\", JSON.stringify(jsData));",
									"        console.log(\"THIS ACCOUNT IS NOT EXISTED IN SYSTEM, WILL MANUAL CREATE IT\");",
									"        postman.setNextRequest(null);",
									"    }",
									"} else {",
									"    console.log(\"Error, end test\");",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finan_base_url}}/finan-user/api/v1/auth/account/verify",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-user",
								"api",
								"v1",
								"auth",
								"account",
								"verify"
							]
						}
					},
					"response": []
				},
				{
					"name": "login_with_pwd",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// let crypto = require('crypto-js');",
									"",
									"// const algorithm = \"aes-256-gcm\";",
									"// const IV_LEN = 12;",
									"// const AUTH_TAG_LEN = 16;",
									"// const SECRET_KEY = \"7dQ0HwRI5okvwAK0WzxaW6ABFncjeu1E\";",
									"",
									"// function encrypt(message) {",
									"//   const iv = Buffer.from(crypto.randomBytes(IV_LEN));",
									"//   const cipher = crypto.createCipheriv(algorithm, SECRET_KEY, iv, {",
									"//     authTagLength: AUTH_TAG_LEN,",
									"//   });",
									"//   const encryptedData = Buffer.concat([cipher.update(message), cipher.final()]);",
									"//   const authTag = cipher.getAuthTag();",
									"//   const raw = Buffer.concat([iv, encryptedData, authTag]).toString(\"hex\");",
									"//   return raw;",
									"// }",
									"",
									"// const pwd = \"21112007\";",
									"// // var superSecretEncrypted = CryptoJS.AES.encrypt(pwd, SECRET_KEY);",
									"",
									"// let pwd_enc = encrypt(pwd);",
									"// console.log(\"pwd_enc: \" + pwd_enc);",
									"",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"let isPhone = pm.environment.get(\"C-isPhone\");",
									"",
									"let verify_payload = JSON.parse(pm.environment.get(\"C-payload\"));",
									"",
									"let payload;",
									"let version = pm.environment.get(\"x-current-version\");",
									"if(isPhone){",
									"    payload = {",
									"        \"phone_number\": verify_payload.phone_number,",
									"        \"pwd\": pm.environment.get(\"pwd\"),",
									"        \"platform\": \"gtapp\",",
									"        \"device_id\": \"C9102FC6-466C-4980-B795-A91A2FD7F97F\",",
									"        \"app_version\": version,",
									"        \"device_name\": \"iPhone\"",
									"    }",
									"} else {",
									"    payload = {",
									"        \"email\": verify_payload.email,",
									"        \"pwd\": pm.environment.get(\"pwd\"),",
									"        \"platform\": \"gtapp\",",
									"        \"device_id\": \"C9102FC6-466C-4980-B795-A91A2FD7F97F\",",
									"        \"app_version\": version,",
									"        \"device_name\": \"iPhone\"",
									"    }",
									"}",
									"console.log(\"debug: \", payload);",
									"",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    let jsData = pm.response.json();",
									"    // debug",
									"    // console.log(JSON.stringify(jsData));",
									"",
									"    let business_id = null;",
									"    try{",
									"        business_id = jsData.data.business_info.list_business[0].business_id;",
									"    } catch{",
									"        console.log(\"This is new user, must create business_id\");",
									"    }",
									"",
									"    let userToken = jsData.data.token;",
									"    pm.environment.set(\"C-userToken\",userToken);",
									"",
									"    if(business_id == null){",
									"        console.log(\"This user don't have store, please check & use another account\");",
									"        ",
									"        postman.setNextRequest(null);",
									"    } else {",
									"        let userRefreshToken = jsData.data.refresh_token;",
									"",
									"        let userInfo = {",
									"            \"role_name\":jsData.data.business_info.current_role.role_name,",
									"            \"is_owner\":jsData.data.business_info.current_role.is_owner,",
									"            \"user_name\":jsData.data.business_info.list_business[0].user_name,",
									"            \"business_id\":business_id",
									"        }",
									"",
									"        // show log",
									"        // console.log(\"userToken:\",userToken);",
									"        // console.log(\"userRefreshToken:\",userRefreshToken);",
									"        console.log(\"userInfo:\",JSON.stringify(userInfo));",
									"",
									"        pm.environment.set(\"C-userRefreshToken\",userRefreshToken);",
									"        pm.environment.set(\"C-userInfo\",userInfo);",
									"        pm.environment.set(\"C-business_id\",business_id); // business_id",
									"",
									"        let testcase = pm.environment.get(\"C-testcase\");",
									"        testcase++;",
									"        pm.environment.set(\"C-testcase\",testcase);",
									"        postman.setNextRequest(\"get_branch_id\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get Token, end test\");",
									"",
									"    // debug",
									"    let jsData = pm.response.json();",
									"    console.log(\"data:\",JSON.stringify(jsData));",
									"",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finan_base_url}}/finan-user/api/v1/auth/account/login",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-user",
								"api",
								"v1",
								"auth",
								"account",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_branch_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let branch_id = null;",
									"    try {",
									"        branch_id = jsData.data.id;",
									"    } catch {",
									"        console.log(\"Can't get branch_id\");",
									"    }",
									"",
									"    pm.test(\"Got branch_id\", function () {",
									"        pm.expect(branch_id != null).to.be.true;",
									"    });",
									"",
									"    if(branch_id != null){",
									"        pm.environment.set(\"C-business_id\",branch_id);",
									"        postman.setNextRequest(\"get_list_internal_account\"); // get_list_internal_account",
									"    } else {",
									"        postman.setNextRequest(null);",
									"    }",
									"} else {",
									"    console.log(\"Can't get Token, end test\", jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{finan_base_url}}/finan-business/api/v1/branch/detail/{{C-business_id}}",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-business",
								"api",
								"v1",
								"branch",
								"detail",
								"{{C-business_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "account coa",
			"item": [
				{
					"name": "get_list_internal_account",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let coa = [];",
									"    try {",
									"        for(let i in jsData.data){",
									"            let sub_group_i = [];",
									"            for(let j in jsData.data[i].sub_group){",
									"                let accounts_j = [];",
									"                for(let k in jsData.data[i].sub_group[j].accounts){",
									"                    accounts_j[accounts_j.length] = {",
									"                        \"account_name\":jsData.data[i].sub_group[j].accounts[k].name,",
									"                        \"account_id\":jsData.data[i].sub_group[j].accounts[k].id,",
									"                        \"group_name\":jsData.data[i].sub_group[j].accounts[k].group_name,",
									"                        \"sub_group_name\":jsData.data[i].sub_group[j].accounts[k].sub_name,",
									"                        \"branch_id\":jsData.data[i].sub_group[j].accounts[k].branch_id,",
									"                        \"displays_id\":jsData.data[i].sub_group[j].accounts[k].displays_id,",
									"                        \"account_source\":jsData.data[i].sub_group[j].accounts[k].account_source,",
									"                        \"account_type\":jsData.data[i].sub_group[j].accounts[k].account_type,",
									"                        \"account_code\":jsData.data[i].sub_group[j].accounts[k].account_code,",
									"                        \"coa_type\":jsData.data[i].sub_group[j].accounts[k].coa_type,",
									"                        \"sub_coa_deepest\":jsData.data[i].sub_group[j].accounts[k].sub_coa_deepest,",
									"                        \"name_en\":jsData.data[i].sub_group[j].accounts[k].name_en,",
									"                        \"status\":jsData.data[i].sub_group[j].accounts[k].status,",
									"                        \"parent_id\":jsData.data[i].sub_group[j].accounts[k].parent_id,",
									"                        \"description\":jsData.data[i].sub_group[j].accounts[k].description,",
									"                        \"open_amount\":jsData.data[i].sub_group[j].accounts[k].open_amount,",
									"                        \"currency\":jsData.data[i].sub_group[j].accounts[k].currency",
									"                        // \"opening_at\":jsData.data[i].sub_group[j].accounts[k].opening_at",
									"                        // \"closing_at\":jsData.data[i].sub_group[j].accounts[k].closing_at",
									"                    }",
									"",
									"                    if(jsData.data[i].sub_group[j].accounts[k].key == \"account_receivable\"){",
									"                        pm.environment.set(\"C-account_receivable\",jsData.data[i].sub_group[j].accounts[k]);",
									"                    }",
									"                }",
									"",
									"                sub_group_i[sub_group_i.length] = {",
									"                    \"sub_group_name\":jsData.data[i].sub_group[j].name,",
									"                    \"sub_group_id\":jsData.data[i].sub_group[j].id,",
									"                    \"sub_group_value\":jsData.data[i].sub_group[j].value,",
									"                    \"sub_group_description\":jsData.data[i].sub_group[j].description,",
									"                    \"accounts\":accounts_j",
									"                }",
									"            }",
									"",
									"            coa[coa.length] = {",
									"                \"group_name\":jsData.data[i].name,",
									"                \"value\":jsData.data[i].value,",
									"                \"index\":jsData.data[i].index,",
									"                \"sub_group\":sub_group_i",
									"            }",
									"        }",
									"    } catch {",
									"        console.log(\"can't get all account in coa\");",
									"    }",
									"",
									"    pm.test(\"Got coa of this user's business\", function () {",
									"        pm.expect(coa.length > 0).to.be.true;",
									"    });",
									"",
									"    if(coa.length > 0){",
									"        // console.log(\"coa: \", coa);",
									"        pm.environment.set(\"C-coa\",coa);",
									"        let list_debit_account = [];",
									"        let list_credit_account = [];",
									"        /**",
									"         * lấy những account_id và phân loại thành debit/credit",
									"         * - credit: tài khoản (only cash & bank)",
									"         * - debit: phân loại (all)",
									"         */ ",
									"        for(let i in coa){",
									"            for(let j in coa[i].sub_group){",
									"                for(let k in coa[i].sub_group[j].accounts){",
									"                    // if(coa[i].group_name == \"income\" || coa[i].group_name == \"expense\"){ // mở điều kiện này khi cần debug tạo tnx có report cassh-flow",
									"                        list_debit_account[list_debit_account.length] = coa[i].sub_group[j].accounts[k];",
									"                    // }",
									"                    if(coa[i].sub_group[j].sub_group_value == \"cash_and_bank\"){ ",
									"                        // console.log(\"debug: \", coa[i].sub_group[j].accounts[k]);",
									"                        if(coa[i].sub_group[j].accounts[k].account_name.includes(\"[API]\")){ // do 1 số name bị null (dev chưa validation dẫn đến report sẽ không biết của account nào - report ko trả về id)",
									"                            list_credit_account[list_credit_account.length] = coa[i].sub_group[j].accounts[k];",
									"                        }",
									"                    }",
									"                }",
									"            }",
									"        }",
									"",
									"        // console.log(\"list_debit_account: \", list_debit_account);",
									"        // console.log(\"list_credit_account: \", list_credit_account);",
									"",
									"        pm.environment.set(\"C-list_debit_account\",list_debit_account);",
									"        pm.environment.set(\"C-list_credit_account\",list_credit_account);",
									"        ",
									"        postman.setNextRequest(\"get_list_payment_account\"); // get_list_payment_account",
									"    } else {",
									"        console.log(\"Can't get list internal account, end test \");",
									"        postman.setNextRequest(null);",
									"    }",
									"} else {",
									"    console.log(\"Can't get list internal account, end test \", jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{finan_base_url}}​/finan-ledger/api/v1/account/list?branch_id={{C-business_id}}&coa_type=",
							"host": [
								"{{finan_base_url}}​"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"account",
								"list"
							],
							"query": [
								{
									"key": "branch_id",
									"value": "{{C-business_id}}"
								},
								{
									"key": "coa_type",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get_internal_account_detail",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/**",
									" * Only check credit_account",
									" */",
									"",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let list_internal_account = pm.environment.get(\"C-list_internal_account\");",
									"let pos = pm.environment.get(\"C-pos\");",
									"if(!pos){",
									"    pos = 0;",
									"    pm.environment.set(\"C-pos\",pos);",
									"}",
									"",
									"let internal_account_id = list_internal_account[pos].account_id;",
									"console.log(\"view detail account: \" + account_id);",
									"",
									"pm.environment.set(\"C-internal_account_id\",internal_account_id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    const jsData = pm.response.json();",
									"    // let testcase = pm.environment.get(\"C-testcase\");",
									"    console.log(\"Debug: \" + JSON.stringify(jsData));",
									"",
									"    let list_internal_account = pm.environment.get(\"C-list_internal_account\");",
									"    let pos = pm.environment.get(\"C-pos\");",
									"",
									"    if(pos >= list_internal_account.length - 1){",
									"        pm.environment.unset(\"C-pos\");",
									"",
									"        postman.setNextRequest(\"get_list_tax\"); // get_list_tax",
									"    } else {",
									"        pos++;",
									"        pm.environment.set(\"C-pos\",pos);",
									"",
									"        postman.setNextRequest(\"get_internal_account_detail\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get internal account detail, end test\");",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{finan_base_url}}​​/finan-ledger/api/v1/account/detail/{{C-internal_account_id}}",
							"host": [
								"{{finan_base_url}}​​"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"account",
								"detail",
								"{{C-internal_account_id}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.request.headers.add({",
							" key: \"authorization\",",
							" value: \"Bearer \" + pm.environment.get(\"C-userToken\")",
							"});",
							"",
							"pm.request.headers.add({",
							" key: \"Content-Type\",",
							" value: \"application/json\"",
							"});"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "account cash_n_bank",
			"item": [
				{
					"name": "get_list_payment_account",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    // let total_account = jsData.data.accounts.length;",
									"    let list_credit_account = pm.environment.get(\"C-list_credit_account\");",
									"",
									"    switch(testcase){",
									"        case 2:",
									"            for(let i in list_credit_account){",
									"                for(let j in jsData.data.accounts){",
									"                    if(list_credit_account[i].account_id == jsData.data.accounts[j].id){",
									"                        list_credit_account[i].open_amount = jsData.data.accounts[j].open_amount;",
									"                        list_credit_account[i].total_balance_amount = jsData.data.accounts[j].total_balance_amount;",
									"                        // list_credit_account[i].status = jsData.data.accounts[j].status;",
									"                        break;",
									"                    }",
									"                }",
									"            }",
									"            pm.environment.set(\"C-list_credit_account\",list_credit_account);",
									"            // console.log(\"list_credit_account: \" + JSON.stringify(list_credit_account));",
									"",
									"            postman.setNextRequest(\"get_list_transaction\"); // get_list_transaction",
									"            break;",
									"        case 4:",
									"            let ranDebitPos = pm.environment.get(\"C-ranDebitPos\");",
									"            let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"            let tnx_edit_obj = pm.environment.get(\"C-tnx_edit_obj\");",
									"            let isFound = false, isFoundOld = false;",
									"",
									"            let oldAccPos;",
									"            for(let i in list_credit_account){",
									"                if(list_credit_account[i].account_id == tnx_edit_obj.account_id){",
									"                    oldAccPos = i;",
									"                    pm.environment.set(\"C-oldAccPos\",oldAccPos);",
									"                    break;",
									"                }",
									"            }",
									"",
									"            let tnx_edit_amount = parseFloat(tnx_edit_obj.amount);",
									"            let tnx_amount = parseFloat(tnx_obj.amount);",
									"",
									"            if(tnx_edit_obj.account_id == list_credit_account[ranDebitPos].account_id){",
									"                // edit nhưng không đổi account",
									"                for(let j in jsData.data.accounts){",
									"                    if(list_credit_account[ranDebitPos].account_id == jsData.data.accounts[j].id){",
									"                        isFound = true;",
									"                        isFoundOld = true;",
									"                        let exchange_amount;",
									"                        if(tnx_obj.txn_type == \"in\" && tnx_edit_obj.txn_type == \"in\"){",
									"                            // trước và sau edit đều in",
									"                            exchange_amount = tnx_amount - tnx_edit_amount;",
									"                            if(exchange_amount > 0){",
									"                                pm.test(\"total_balance_amount increase \" + exchange_amount, function () {",
									"                                    console.log(\"old: \" + list_credit_account[ranDebitPos].total_balance_amount);",
									"                                    console.log(\"act: \" + jsData.data.accounts[j].total_balance_amount);",
									"                                    pm.expect(jsData.data.accounts[j].total_balance_amount == (list_credit_account[ranDebitPos].total_balance_amount + exchange_amount).toFixed(2)).to.be.true;",
									"                                });",
									"                            } else {",
									"                                exchange_amount = Math.abs(exchange_amount);",
									"                                pm.test(\"total_balance_amount decrease \" + exchange_amount, function () {",
									"                                    console.log(\"old: \" + list_credit_account[ranDebitPos].total_balance_amount);",
									"                                    console.log(\"act: \" + jsData.data.accounts[j].total_balance_amount);",
									"                                    pm.expect(jsData.data.accounts[j].total_balance_amount == (list_credit_account[ranDebitPos].total_balance_amount - exchange_amount).toFixed(2)).to.be.true;",
									"                                });",
									"                            }",
									"                        } else if((tnx_obj.txn_type == \"out\" && tnx_edit_obj.txn_type == \"in\")) {",
									"                            // trước in, sau out",
									"                            exchange_amount = tnx_amount + tnx_edit_amount;",
									"                            pm.test(\"total_balance_amount decrease \" + exchange_amount, function () {",
									"                                console.log(\"old: \" + list_credit_account[ranDebitPos].total_balance_amount);",
									"                                console.log(\"act: \" + jsData.data.accounts[j].total_balance_amount);",
									"                                pm.expect(jsData.data.accounts[j].total_balance_amount == (list_credit_account[ranDebitPos].total_balance_amount - exchange_amount).toFixed(2)).to.be.true;",
									"                            });",
									"                        } else if((tnx_obj.txn_type == \"in\" && tnx_edit_obj.txn_type == \"out\")) {",
									"                            // trước out, sau in",
									"                            exchange_amount = tnx_amount + tnx_edit_amount;",
									"                            pm.test(\"total_balance_amount increase \" + exchange_amount, function () {",
									"                                console.log(\"old: \" + list_credit_account[ranDebitPos].total_balance_amount);",
									"                                console.log(\"act: \" + jsData.data.accounts[j].total_balance_amount);",
									"                                pm.expect(jsData.data.accounts[j].total_balance_amount == (list_credit_account[ranDebitPos].total_balance_amount + exchange_amount).toFixed(2)).to.be.true;",
									"                            });",
									"                        } else {",
									"                            // trước và sau edit đều out",
									"                            exchange_amount = tnx_amount - tnx_edit_amount;",
									"                            if(exchange_amount > 0){",
									"                                pm.test(\"total_balance_amount decrease \" + exchange_amount, function () {",
									"                                    console.log(\"old: \" + list_credit_account[ranDebitPos].total_balance_amount);",
									"                                    console.log(\"act: \" + jsData.data.accounts[j].total_balance_amount);",
									"                                    pm.expect(jsData.data.accounts[j].total_balance_amount == (list_credit_account[ranDebitPos].total_balance_amount - exchange_amount).toFixed(2)).to.be.true;",
									"                                });",
									"                            } else {",
									"                                exchange_amount = Math.abs(exchange_amount);",
									"                                pm.test(\"total_balance_amount increase \" + exchange_amount, function () {",
									"                                    console.log(\"old: \" + list_credit_account[ranDebitPos].total_balance_amount);",
									"                                    console.log(\"act: \" + jsData.data.accounts[j].total_balance_amount);",
									"                                    pm.expect(jsData.data.accounts[j].total_balance_amount == (list_credit_account[ranDebitPos].total_balance_amount + exchange_amount).toFixed(2)).to.be.true;",
									"                                });",
									"                            }",
									"                        }",
									"                        break;",
									"                    }",
									"                }",
									"",
									"            } else if(tnx_edit_obj.category_id == list_credit_account[ranDebitPos].account_id) {",
									"                console.log(\"NOT handle yet\");",
									"            } else if(tnx_edit_obj.account_id == list_credit_account[ranDebitPos].category_id) {",
									"                console.log(\"NOT handle yet\");",
									"            } else {",
									"                // check old account",
									"                for(let j in jsData.data.accounts){",
									"                    if(tnx_edit_obj.account_id == jsData.data.accounts[j].id){",
									"                        isFoundOld = true;",
									"                        if(tnx_edit_obj.txn_type == \"in\"){",
									"                            pm.test(\"total_balance_amount decrease \" + tnx_edit_amount, function () {",
									"                                console.log(\"old: \" + list_credit_account[oldAccPos].total_balance_amount);",
									"                                console.log(\"act: \" + jsData.data.accounts[j].total_balance_amount);",
									"                                pm.expect(jsData.data.accounts[j].total_balance_amount == (list_credit_account[oldAccPos].total_balance_amount - tnx_edit_amount).toFixed(2)).to.be.true;",
									"                            });",
									"                        } else {",
									"                            pm.test(\"total_balance_amount increase \" + tnx_edit_amount, function () {",
									"                                console.log(\"old: \" + list_credit_account[oldAccPos].total_balance_amount);",
									"                                console.log(\"act: \" + jsData.data.accounts[j].total_balance_amount);",
									"                                pm.expect(jsData.data.accounts[j].total_balance_amount == (list_credit_account[oldAccPos].total_balance_amount + tnx_edit_amount).toFixed(2)).to.be.true;",
									"                            });",
									"                        }",
									"                        break;",
									"                    }",
									"                }",
									"",
									"                // check new account",
									"                for(let j in jsData.data.accounts){",
									"                    if(list_credit_account[ranDebitPos].account_id == jsData.data.accounts[j].id){",
									"                        isFound = true;",
									"                        if(tnx_obj.txn_type == \"in\"){",
									"                            pm.test(\"total_balance_amount increase \" + tnx_amount, function () {",
									"                                console.log(\"old: \" + list_credit_account[ranDebitPos].total_balance_amount);",
									"                                console.log(\"act: \" + jsData.data.accounts[j].total_balance_amount);",
									"                                pm.expect(jsData.data.accounts[j].total_balance_amount == (list_credit_account[ranDebitPos].total_balance_amount + tnx_amount).toFixed(2)).to.be.true;",
									"                            });",
									"                        } else {",
									"                            pm.test(\"total_balance_amount decrease \" + tnx_amount, function () {",
									"                                console.log(\"old: \" + list_credit_account[ranDebitPos].total_balance_amount);",
									"                                console.log(\"act: \" + jsData.data.accounts[j].total_balance_amount);",
									"                                pm.expect(jsData.data.accounts[j].total_balance_amount == (list_credit_account[ranDebitPos].total_balance_amount - tnx_amount).toFixed(2)).to.be.true;",
									"                            });",
									"                        }",
									"                        break;",
									"                    }",
									"                }",
									"            }",
									"",
									"            pm.test(\"Found old account \" + list_credit_account[oldAccPos].account_name, function () {",
									"                pm.expect(isFoundOld).to.be.true;",
									"            });",
									"            pm.test(\"Found new account \" + list_credit_account[ranDebitPos].account_name, function () {",
									"                pm.expect(isFound).to.be.true;",
									"            });",
									"",
									"            postman.setNextRequest(\"get_list_invoice\"); // get_list_invoice",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get list payment account, end test\", jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"url": {
							"raw": "{{finan_base_url}}/finan-ledger/api/v1/account/list-by-key?branch_id={{C-business_id}}&key=cash_and_bank",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"account",
								"list-by-key"
							],
							"query": [
								{
									"key": "branch_id",
									"value": "{{C-business_id}}"
								},
								{
									"key": "key",
									"value": "cash_and_bank"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "transaction",
			"item": [
				{
					"name": "get_list_transaction",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ============================= random number between min and max",
									"function getRandomInt(min, max) {",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = JSON.parse(responseBody);",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    // console.log(\"testcase: \" + testcase);",
									"    let total_tnx = null;",
									"    try {",
									"        total_tnx = jsData.meta.total_rows;",
									"    } catch {",
									"        console.log(\"Can't get total tnx\");",
									"    }",
									"",
									"    switch(testcase){",
									"        case 2:",
									"            let edit_payment_method, edit_object_type, edit_txn_type, is_txn_bank;",
									"            switch(2){ // getRandomInt(1,3)",
									"                case 1:",
									"                    edit_txn_type = \"non_invoice_n_cash\";",
									"                    console.log(\"edit tnx non_invoice_n_cash\");",
									"                    edit_object_type = \"\";",
									"                    edit_payment_method = \"\";",
									"                    is_txn_bank = false;",
									"                    break;",
									"                case 2:",
									"                    edit_txn_type = \"invoice_n_cash\";",
									"                    console.log(\"edit tnx invoice_n_cash\");",
									"                    edit_object_type = \"invoice\";",
									"                    edit_payment_method = \"\";",
									"                    is_txn_bank = false;",
									"                    break;",
									"                case 3:",
									"                    edit_txn_type = \"invoice_n_qr\";",
									"                    console.log(\"edit tnx invoice_n_qr\");",
									"                    edit_object_type = \"invoice\";",
									"                    edit_payment_method = \"bank_transfer\";",
									"                    is_txn_bank = true;",
									"                    break;",
									"                case 4:",
									"                    edit_txn_type = \"non_invoice_n_qr\";",
									"                    console.log(\"edit tnx non_invoice_n_qr\");",
									"                    edit_object_type = \"\";",
									"                    edit_payment_method = \"bank_transfer\";",
									"                    is_txn_bank = true;",
									"                    break;",
									"                case 5:",
									"                    edit_txn_type = \"non_invoice_n_va\";",
									"                    console.log(\"edit tnx non_invoice_n_va\");",
									"                    edit_object_type = \"\";",
									"                    edit_payment_method = \"-\";",
									"                    is_txn_bank = true;",
									"                    break;",
									"                case 6: default:",
									"                    edit_txn_type = \"invoice_n_va\";",
									"                    console.log(\"edit tnx invoice_n_va\");",
									"                    edit_object_type = \"invoice\";",
									"                    edit_payment_method = \"-\";",
									"                    is_txn_bank = true;",
									"                    break;",
									"            }",
									"",
									"            let tnx_edit_obj = null;",
									"            for(let i in jsData.data){",
									"                if(jsData.data[i].object_type == edit_object_type && jsData.data[i].payment_method == edit_payment_method && jsData.data[i].is_txn_bank == is_txn_bank){",
									"                    tnx_edit_obj = jsData.data[i];",
									"                    break;",
									"                }",
									"            }",
									"            pm.test(\"Got tnx: \", function () { //  + tnx_edit_obj.description",
									"                // console.log(\"debug: \", tnx_edit_obj);",
									"                pm.expect(tnx_edit_obj != null).to.be.true;",
									"            });",
									"            // console.log(\"Edit tnx: \", tnx_edit_obj);",
									"",
									"            if(tnx_edit_obj != null){",
									"                pm.environment.set(\"C-tnx_edit_obj\",tnx_edit_obj);",
									"                console.log(\"=============================================\");",
									"                console.log(\"Will edit transaction with invoice \",tnx_edit_obj);",
									"                console.log(\"=============================================\");",
									"                let invoice_old_obj = tnx_edit_obj.entry;",
									"                pm.environment.set(\"C-invoice_old_obj\",invoice_old_obj);",
									"                pm.environment.set(\"C-tnx_id\",tnx_edit_obj.id);",
									"                pm.environment.set(\"C-total_tnx\",total_tnx);",
									"                pm.environment.set(\"C-edit_txn_type\",edit_txn_type);",
									"",
									"                switch(edit_txn_type){",
									"                    case \"non_invoice_n_cash\":",
									"                    case \"invoice_n_qr\":",
									"                        testcase++;",
									"                        pm.environment.set(\"C-testcas\",testcase);",
									"                        postman.setNextRequest(\"edit_transaction\"); // edit_transaction",
									"                        break;",
									"                    case \"invoice_n_cash\":",
									"                        postman.setNextRequest(\"get_list_payment\"); // get_list_payment",
									"                        break;",
									"                    default:",
									"                        console.log(\"Missing flow, end test\");",
									"                        postman.setNextRequest(null);",
									"                        break;",
									"                }",
									"            } else {",
									"                pm.test(\"Can't find tnx with respective status, end test\", function () {",
									"                    pm.expect(true).to.be.false;",
									"                });",
									"",
									"                postman.setNextRequest(null);",
									"            }",
									"            break;",
									"        case 4:",
									"            let old_total_tnx = pm.environment.get(\"C-total_tnx\");",
									"            let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"",
									"            pm.test(\"Nothing happen with total tnx \" + old_total_tnx, function () {",
									"                console.log(\"Actual: \" + total_tnx);",
									"                pm.expect(total_tnx == old_total_tnx).to.be.true;",
									"            });",
									"",
									"            let isFound = false;",
									"            for(let i in jsData.data){",
									"                if(jsData.data[i].id == tnx_obj.tnx_id){",
									"                    isFound = true;",
									"                    pm.test(\"amount of tnx correctly! \" + tnx_obj.amount, function () {",
									"                        pm.expect(tnx_obj.amount == jsData.data[i].amount).to.be.true;",
									"                    });",
									"",
									"                    pm.test(\"txn_type of tnx correctly! \" + tnx_obj.txn_type, function () {",
									"                        pm.expect(tnx_obj.txn_type == jsData.data[i].txn_type).to.be.true;",
									"                    });",
									"",
									"                    pm.test(\"description of tnx correctly! \" + tnx_obj.description, function () {",
									"                        pm.expect(tnx_obj.description == jsData.data[i].description).to.be.true;",
									"                    });",
									"",
									"                    pm.test(\"value_at of tnx correctly! \" + tnx_obj.value_at, function () {",
									"                        let act_value_at = new Date(jsData.data[i].value_at);",
									"                        console.log(\"actual value_at: \" + act_value_at.toISOString());",
									"                        pm.expect(tnx_obj.value_at == act_value_at.toISOString()).to.be.true; // tạm thời lấy mốc giờ +7 nên fix cứng, sau này sẽ dùng biến",
									"                    });",
									"                    break;",
									"                }",
									"            }",
									"",
									"            pm.test(\"Found new tnx\", function () {",
									"                pm.expect(isFound).to.be.true;",
									"            });",
									"",
									"            postman.setNextRequest(\"get_transaction_detail\"); // get_transaction_detail (get tnx detail đang lỗi nên tạm thời skip) get_report_cash_flow",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test!!!\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get list tnx, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{finan_base_url}}/finan-ledger/api/v1/transaction/list?branch_id={{C-business_id}}&page=1&page_size=100&sort",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"transaction",
								"list"
							],
							"query": [
								{
									"key": "branch_id",
									"value": "{{C-business_id}}"
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "page_size",
									"value": "100"
								},
								{
									"key": "sort",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get_transaction_detail",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"let tnx_id = tnx_obj.tnx_id;",
									"console.log(\"view detail tnx: \" + tnx_id);",
									"",
									"pm.environment.set(\"C-tnx_id\",tnx_id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    // let testcase = pm.environment.get(\"C-testcase\");",
									"    console.log(\"Debug: \" + JSON.stringify(jsData));",
									"",
									"    let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"",
									"    pm.test(\"amount of tnx correctly! \" + tnx_obj.amount, function () {",
									"        pm.expect(tnx_obj.amount == jsData.data.amount).to.be.true;",
									"    });",
									"",
									"    pm.test(\"txn_type of tnx correctly! \" + tnx_obj.txn_type, function () {",
									"        pm.expect(tnx_obj.txn_type == jsData.data.txn_type).to.be.true;",
									"    });",
									"",
									"    pm.test(\"description of tnx correctly! \" + tnx_obj.description, function () {",
									"        pm.expect(tnx_obj.description == jsData.data.description).to.be.true;",
									"    });",
									"",
									"    pm.test(\"value_at of tnx correctly! \" + tnx_obj.value_at, function () {",
									"        let act_value_at = new Date(jsData.data.value_at);",
									"        console.log(\"actual value_at: \" + act_value_at.toISOString());",
									"        pm.expect(tnx_obj.value_at == act_value_at.toISOString()).to.be.true;",
									"    });",
									"",
									"    pm.test(\"object_type of tnx correctly! \" + tnx_obj.object_type, function () {",
									"        pm.expect(tnx_obj.object_type).to.eql(jsData.data.object_type);",
									"    });",
									"",
									"    pm.test(\"object_key of tnx correctly! \" + tnx_obj.object_key, function () {",
									"        pm.expect(tnx_obj.object_key).to.eql(jsData.data.object_key);",
									"    });",
									"",
									"    postman.setNextRequest(\"get_list_payment\"); // get_list_payment",
									"} else {",
									"    console.log(\"Can't get internal contact detail, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{finan_base_url}}/finan-ledger/api/v1/transaction/detail/{{C-tnx_id}}?branch_id={{C-business_id}}",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"transaction",
								"detail",
								"{{C-tnx_id}}"
							],
							"query": [
								{
									"key": "branch_id",
									"value": "{{C-business_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "edit_transaction",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// ============================= random number between min and max",
									"function getRandomInt(min, max) {",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"",
									"// ============================= random characters",
									"function randomChars(length) {",
									"    var result           = '';",
									"    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
									"    var charactersLength = characters.length;",
									"    for ( var i = 0; i < length; i++ ) {",
									"      result += characters.charAt(Math.floor(Math.random() * charactersLength));",
									"   }",
									"   return result;",
									"}",
									"",
									"/**",
									" * txn_type: in/out => Tạo Thu/ Tạo Chi",
									" * account_credit: Tài khoản => only cash&bank sub_group",
									" */",
									"",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"let case_ = pm.environment.get(\"C-case_\");",
									"if(!case_){",
									"    case_ = 9;",
									"    pm.environment.set(\"C-case_\",case_);",
									"}",
									"console.log(\"Testcase: \" + testcase + \".\" + case_);",
									"",
									"let today = new Date();",
									"let next_date_stp = Math.floor(today.getTime()/1000) + 24*60*60;",
									"let next_date = new Date(next_date_stp*1000);",
									"",
									"// let list_debit_account = pm.environment.get(\"C-list_debit_account\");",
									"let list_credit_account = pm.environment.get(\"C-list_credit_account\");",
									"let ranDebitPos = getRandomInt(0,list_credit_account.length - 1);",
									"let invoice_after_obj = pm.environment.get(\"C-invoice_after_obj\");",
									"let txn_types = [\"in\",\"out\"];",
									"let account_debit, amount, invoice_id, object_type;",
									"let value_at, txn_type, description;",
									"switch(case_){",
									"    case 1:",
									"        console.log(\"Unhappy case: null data (except txn_type > default 'out', value_at)\");",
									"        account_debit = null;",
									"        amount = \"\";",
									"        invoice_id = invoice_after_obj.invoice_id;",
									"        object_type = \"invoice\";",
									"        value_at = today.toISOString();",
									"        txn_type = \"in\"; // \"\" == \"out\"",
									"        description = \"\";",
									"        break;",
									"    case 2:",
									"        console.log(\"Unhappy case: amount < 0\");",
									"        account_debit = list_credit_account[ranDebitPos].account_id;",
									"        if(invoice_after_obj.due_amount > 100000){",
									"            amount = -getRandomInt(invoice_after_obj.due_amount/3,invoice_after_obj.due_amount/2);",
									"        } else {",
									"            amount = -getRandomInt(10,20)*1000;",
									"        }",
									"        value_at = today.toISOString();",
									"        invoice_id = invoice_after_obj.invoice_id;",
									"        object_type = \"invoice\";",
									"        txn_type = \"in\";",
									"        description = \"[API][\" + txn_type + \"] transaction \" + randomChars(6);",
									"        break;",
									"    case 3:",
									"        console.log(\"Unhappy case: missing credit\");",
									"        account_debit = null;",
									"        if(invoice_after_obj.due_amount > 100000){",
									"            amount = getRandomInt(invoice_after_obj.due_amount/3,invoice_after_obj.due_amount/2);",
									"        } else {",
									"            amount = getRandomInt(10,20)*1000;",
									"        }",
									"        value_at = today.toISOString();",
									"        invoice_id = invoice_after_obj.invoice_id;",
									"        object_type = \"invoice\";",
									"        txn_type = \"in\";",
									"        description = \"[API][\" + txn_type + \"] transaction \" + randomChars(6);",
									"        break;",
									"    case 4:",
									"        console.log(\"Unhappy case: missing object_key\");",
									"        account_debit = list_credit_account[ranDebitPos].account_id;",
									"        if(invoice_after_obj.due_amount > 100000){",
									"            amount = getRandomInt(invoice_after_obj.due_amount/3,invoice_after_obj.due_amount/2);",
									"        } else {",
									"            amount = getRandomInt(10,20)*1000;",
									"        }",
									"        value_at = today.toISOString();",
									"        invoice_id = \"\";",
									"        object_type = \"invoice\";",
									"        txn_type = \"in\";",
									"        description = \"[API][\" + txn_type + \"] transaction \" + randomChars(6);",
									"        break;",
									"    case 5:",
									"        console.log(\"Unhappy case: credit is not existed\");",
									"        account_debit = 9999999999999;",
									"        if(invoice_after_obj.due_amount > 100000){",
									"            amount = getRandomInt(invoice_after_obj.due_amount/3,invoice_after_obj.due_amount/2);",
									"        } else {",
									"            amount = getRandomInt(10,20)*1000;",
									"        }",
									"        value_at = today.toISOString();",
									"        invoice_id = invoice_after_obj.invoice_id;",
									"        object_type = \"invoice\";",
									"        txn_type = \"in\";",
									"        description = \"[API][\" + txn_type + \"] transaction \" + randomChars(6);",
									"        break;",
									"    case 6:",
									"        console.log(\"Unhappy case: missing object_type\");",
									"        account_debit = list_credit_account[ranDebitPos].account_id;",
									"        if(invoice_after_obj.due_amount > 100000){",
									"            amount = getRandomInt(invoice_after_obj.due_amount/3,invoice_after_obj.due_amount/2);",
									"        } else {",
									"            amount = getRandomInt(10,20)*1000;",
									"        }",
									"        value_at = today.toISOString();",
									"        invoice_id = invoice_after_obj.invoice_id;",
									"        object_type = \"\";",
									"        txn_type = \"in\";",
									"        description = \"[API][\" + txn_type + \"] transaction \" + randomChars(6);",
									"        break;",
									"    case 8:",
									"        console.log(\"Unhappy case: value_at is later than invoice_created\");",
									"        account_debit = list_credit_account[ranDebitPos].account_id;",
									"        if(invoice_after_obj.due_amount > 100000){",
									"            amount = getRandomInt(invoice_after_obj.due_amount/3,invoice_after_obj.due_amount/2);",
									"        } else {",
									"            amount = getRandomInt(10,20)*1000;",
									"        }",
									"        let invoice_date = new Date(invoice_after_obj.value_at);",
									"        next_date = Math.floor(invoice_date.getTime()/1000) - 24*60*60;",
									"        next_date = new Date(next_date*1000);",
									"        value_at = next_date.toISOString();",
									"        invoice_id = invoice_after_obj.invoice_id;",
									"        object_type = \"invoice\";",
									"        txn_type = \"in\";",
									"        description = \"[API][\" + txn_type + \"] transaction \" + randomChars(6);",
									"        break;",
									"    case 9:",
									"        console.log(\"Happy case\");",
									"        account_debit = list_credit_account[ranDebitPos].account_id;",
									"        pm.environment.set(\"C-ranDebitPos\",ranDebitPos);",
									"        let invoice_before_edit = pm.environment.get(\"C-invoice_before_edit\");",
									"        if(invoice_after_obj.due_amount > 100000){",
									"            amount = getRandomInt(invoice_after_obj.due_amount/3,invoice_after_obj.due_amount/2);",
									"        } else {",
									"            amount = getRandomInt(10,20)*1000;",
									"        }",
									"        value_at = today.toISOString();",
									"        invoice_id = invoice_after_obj.invoice_id;",
									"        object_type = \"invoice\";",
									"        txn_type = \"in\";",
									"        description = \"[API][\" + txn_type + \"][Invoice] transaction \" + invoice_before_edit.system_code + \" => \" + invoice_after_obj.system_code;",
									"        break;",
									"    default:",
									"        console.log(\"Missing flow\");",
									"        break;",
									"}",
									"",
									"let payload = {",
									"    \"id\":pm.environment.get(\"C-tnx_id\"),",
									"    \"account_id\":account_debit,",
									"    \"amount\":amount,",
									"    \"branch_id\":parseInt(pm.environment.get(\"C-business_id\")),",
									"    \"txn_type\":txn_type,",
									"    \"description\":description,",
									"    \"object_key\": invoice_id,",
									"    \"object_type\": object_type,",
									"    // \"payment_method\": \"string\",",
									"    \"value_at\":value_at",
									"}",
									"",
									"console.log(\"payload: \",payload);",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));",
									"pm.environment.set(\"C-tnx_obj\",payload);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ====================================== parser cURL",
									"function parseCURL(request_api){",
									"    let curl = \"\";",
									"    if(request_api.method == \"PUT\"){",
									"        curl = \"curl --location --request PUT \";",
									"    } else if(request_api.method == \"DELETE\"){",
									"        curl = \"curl --location --request DELETE \";",
									"    } else {",
									"        curl = \"curl --location \";",
									"    }",
									"    curl += \"'\" + request_api.url.protocol + \"://\"",
									"    // host",
									"    for(let i in request_api.url.host){",
									"        if(i >= request_api.url.host.length - 1){",
									"            curl += request_api.url.host[i] + \"/\";",
									"        } else {",
									"            curl += request_api.url.host[i] + \".\";",
									"        }",
									"    }",
									"    // path",
									"    for(let i in request_api.url.path){",
									"        if(i >= request_api.url.path.length - 1){",
									"            curl += request_api.url.path[i];",
									"        } else {",
									"            curl += request_api.url.path[i] + \"/\";",
									"        }",
									"    }",
									"    // query (if have)",
									"    if(\"query\" in request_api.url){",
									"        curl += \"? \";",
									"        for(let i in request_api.url.query){",
									"            if(i >= request_api.url.query.length - 1){",
									"                curl += request_api.url.query[i].key + \"=\" + request_api.url.query[i].value + \"' \";",
									"            } else {",
									"                curl += request_api.url.query[i].key + \"=\" + request_api.url.query[i].value + \"&\";",
									"            }",
									"        }",
									"    } else {",
									"        curl += \"' \";",
									"    }",
									"    // header",
									"    for(let i in request_api.header){",
									"        if(i >= request_api.header.length - 1){",
									"            curl += \"--header '\" + request_api.header[i].key + \": \" + request_api.header[i].value + \"'\";",
									"        } else {",
									"            curl += \"--header '\" + request_api.header[i].key + \": \" + request_api.header[i].value + \"' \";",
									"        }",
									"    }",
									"    switch(request_api.method){",
									"        case \"POST\":",
									"            curl += \" --data '\" + request_api.body.raw + \"'\"",
									"            break;",
									"        case \"PUT\":",
									"            curl += \" --data-raw '\" + request_api.body.raw + \"'\"",
									"            break;",
									"        default:",
									"            break;",
									"    }",
									"    console.log(curl);",
									"    return curl;",
									"}",
									"const request_api = pm.request.toJSON();",
									"parseCURL(request_api);",
									"",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"let case_ = pm.environment.get(\"C-case_\");",
									"",
									"let jsData = pm.response.json();",
									"switch(case_){",
									"    case 1: case 2:",
									"        pm.test(\"Status code is 400\", function () {",
									"            pm.response.to.have.status(400);",
									"        });",
									"",
									"        console.log(\"debug: \", jsData);",
									"",
									"        // case_++;",
									"        case_ = 9;",
									"        pm.environment.set(\"C-case_\",case_);",
									"        postman.setNextRequest(\"edit_transaction\"); // edit_transaction",
									"        break;",
									"    case 3: case 4:",
									"        pm.test(\"Status code is 400\", function () {",
									"            pm.response.to.have.status(400);",
									"        });",
									"",
									"        console.log(\"debug: \", jsData);",
									"",
									"        case_++;",
									"        pm.environment.set(\"C-case_\",case_);",
									"        postman.setNextRequest(\"edit_transaction\"); // edit_transaction",
									"        break;",
									"    case 5: case 6:",
									"        pm.test(\"Status code is 400\", function () {",
									"            pm.response.to.have.status(400);",
									"        });",
									"",
									"        console.log(\"debug: \", jsData);",
									"",
									"        case_++;",
									"        pm.environment.set(\"C-case_\",case_);",
									"        postman.setNextRequest(\"edit_transaction\"); // edit_transaction",
									"        break;",
									"    case 7: case 8:",
									"        pm.test(\"Status code is 400\", function () {",
									"            pm.response.to.have.status(400);",
									"        });",
									"",
									"        console.log(\"debug: \", jsData);",
									"",
									"        case_++;",
									"        pm.environment.set(\"C-case_\",case_);",
									"        postman.setNextRequest(\"edit_transaction\"); // edit_transaction",
									"        break;",
									"    case 9:",
									"        // console.log(\"debug: \" + JSON.stringify(jsData));",
									"        // pm.test(\"Status code is 200\", function () {",
									"        //     pm.response.to.have.status(200);",
									"        // });",
									"        pm.test(\"Status code is 200\", () => {",
									"            pm.expect(pm.response.code).to.be.oneOf([200,201]);",
									"        });",
									"",
									"        pm.environment.unset(\"C-case_\");",
									"        console.log(\"debug: \", jsData);",
									"        let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"",
									"        // update tnx_id for tnx_obj",
									"        try {",
									"            tnx_obj.tnx_id = jsData.data.id;",
									"            tnx_obj.payment_id = jsData.data.payment_id;",
									"        } catch {",
									"            console.log(\"Can't get tnx_id\");",
									"        }",
									"",
									"        pm.test(\"amount of tnx correctly! \" + tnx_obj.amount, function () {",
									"            pm.expect(tnx_obj.amount == jsData.data.amount).to.be.true;",
									"        });",
									"",
									"        pm.test(\"txn_type of tnx correctly! \" + tnx_obj.txn_type, function () {",
									"            pm.expect(tnx_obj.txn_type == jsData.data.txn_type).to.be.true;",
									"        });",
									"",
									"        pm.test(\"description of tnx correctly! \" + tnx_obj.description, function () {",
									"            pm.expect(tnx_obj.description == jsData.data.description).to.be.true;",
									"        });",
									"",
									"        pm.test(\"value_at of tnx correctly! \" + tnx_obj.value_at, function () {",
									"            // pm.expect(tnx_obj.value_at == jsData.data.value_at).to.be.true;",
									"            pm.expect(tnx_obj.value_at).to.eql(jsData.data.value_at);",
									"        });",
									"",
									"        pm.test(\"object_type of tnx correctly! \" + tnx_obj.object_type, function () {",
									"            pm.expect(tnx_obj.object_type).to.eql(jsData.data.object_type);",
									"        });",
									"",
									"        pm.test(\"object_key of tnx correctly! \" + tnx_obj.object_key, function () {",
									"            pm.expect(tnx_obj.object_key).to.eql(jsData.data.object_key);",
									"        });",
									"",
									"        testcase++;",
									"        pm.environment.set(\"C-testcase\",testcase);",
									"        pm.environment.set(\"C-tnx_obj\",tnx_obj);",
									"        postman.setNextRequest(\"get_list_transaction\"); // get_list_transaction",
									"        break;",
									"    default:",
									"        console.log(\"missing flow, end test\");",
									"        postman.setNextRequest(null);",
									"        break;",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finan_base_url}}/finan-ledger/api/v1/transaction/update/{{C-tnx_id}}",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"transaction",
								"update",
								"{{C-tnx_id}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// pm.request.headers.add({",
							"//  key: \"authorization\",",
							"//  value: \"Bearer \" + pm.environment.get(\"C-userToken\")",
							"// });",
							"",
							"// pm.request.headers.add({",
							"//  key: \"Content-Type\",",
							"//  value: \"application/json\"",
							"// });"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "payment",
			"item": [
				{
					"name": "get_list_payment",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = JSON.parse(responseBody);",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let total_payment = null;",
									"    try {",
									"        total_payment = jsData.meta.total_rows;",
									"    } catch {",
									"        console.log(\"Can't get total payment\");",
									"    }",
									"",
									"    let tnx_edit_obj = pm.environment.get(\"C-tnx_edit_obj\");",
									"    switch(testcase){",
									"        case 2:",
									"            pm.test(\"Got total payment! \" + total_payment, function () {",
									"                pm.expect(total_payment != null).to.be.true;",
									"            });",
									"            pm.environment.set(\"C-total_payment\",total_payment);",
									"            // console.log(\"total_payment: \" + total_payment);",
									"",
									"            let payment_obj = null;",
									"            for(let i in jsData.data){",
									"                if(jsData.data[i].id == tnx_edit_obj.payment_id){",
									"                    payment_obj = jsData.data[i];",
									"                    break;",
									"                }",
									"            }",
									"            pm.test(\"Got payment!\", function () {",
									"                pm.expect(payment_obj != null).to.be.true;",
									"            });",
									"            pm.environment.set(\"C-payment_obj\",payment_obj);",
									"            console.log(\"payment_obj: \", payment_obj);",
									"",
									"            postman.setNextRequest(\"get_list_invoice\"); // get_list_invoice",
									"            break;",
									"        case 4:",
									"            let old_total_payment = pm.environment.get(\"C-total_payment\");",
									"            let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"            let invoice_obj = pm.environment.get(\"C-invoice_obj\");",
									"",
									"            pm.test(\"Nothing happen with total payment \" + old_total_payment, function () {",
									"                console.log(\"Actual: \" + total_payment);",
									"                pm.expect(total_payment == old_total_payment).to.be.true;",
									"            });",
									"",
									"            let isFound = false;",
									"            for(let i in jsData.data){",
									"                if(jsData.data[i].id == tnx_obj.payment_id){",
									"                    isFound = true;",
									"                    console.log(\"debug: \", jsData.data[i]);",
									"",
									"                    pm.test(\"net_amount of payment correctly! \" + tnx_obj.amount, function () {",
									"                        console.log(\"act: \" + jsData.data[i].net_amount);",
									"                        pm.expect(tnx_obj.amount.toFixed(2) == jsData.data[i].net_amount).to.be.true;",
									"                    });",
									"                    // tnx_obj.net_amount = jsData.data[i].net_amount;",
									"",
									"                    pm.test(\"total_fee of payment is 0\", function () { // sẽ handle total_fee ở va",
									"                        pm.expect(0 == jsData.data[i].total_fee).to.be.true;",
									"                    });",
									"                    tnx_obj.total_fee = jsData.data[i].total_fee;",
									"",
									"                    pm.test(\"description of payment correctly! \" + tnx_obj.description, function () {",
									"                        console.log(\"act: \" + jsData.data[i].description);",
									"                        pm.expect(tnx_obj.description == jsData.data[i].description).to.be.true;",
									"                    });",
									"",
									"                    pm.test(\"value_at of payment correctly! \" + tnx_obj.value_at, function () {",
									"                        let act_value_at = new Date(jsData.data[i].value_at);",
									"                        console.log(\"actual value_at: \" + act_value_at.toISOString());",
									"                        pm.expect(tnx_obj.value_at.substring(0,17) == act_value_at.toISOString().substring(0,17)).to.be.true; // tạm thời lấy mốc giờ +7 nên fix cứng, sau này sẽ dùng biến",
									"                    });",
									"",
									"                    pm.test(\"object_type of payment correctly! \" + tnx_obj.object_type, function () {",
									"                        pm.expect(tnx_obj.object_type).to.eql(jsData.data[i].object_type);",
									"                    });",
									"",
									"                    pm.test(\"object_key of payment correctly! \" + tnx_obj.object_key, function () {",
									"                        pm.expect(tnx_obj.object_key).to.eql(jsData.data[i].object_key);",
									"                    });",
									"                    break;",
									"                }",
									"            }",
									"",
									"            pm.test(\"Found payment edit\", function () {",
									"                pm.expect(isFound).to.be.true;",
									"            });",
									"            pm.environment.set(\"C-tnx_obj\",tnx_obj);",
									"",
									"            postman.setNextRequest(\"get_payment_detail\"); // get_payment_detail, get_list_payment_account",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get list payment, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{finan_base_url}}/finan-ledger/api/v1/payment/list?branch_id={{C-business_id}}&page=1&page_size=100&sort",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"payment",
								"list"
							],
							"query": [
								{
									"key": "branch_id",
									"value": "{{C-business_id}}"
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "page_size",
									"value": "100"
								},
								{
									"key": "sort",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get_payment_detail",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"let payment_id = tnx_obj.payment_id;",
									"console.log(\"view detail payment: \" + payment_id);",
									"",
									"pm.environment.set(\"C-payment_id\",payment_id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    // let testcase = pm.environment.get(\"C-testcase\");",
									"    console.log(\"Debug: \" + JSON.stringify(jsData));",
									"",
									"    let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"",
									"    pm.test(\"net_amount of payment correctly! \" + tnx_obj.amount, function () {",
									"        pm.expect(tnx_obj.amount.toFixed(2) == jsData.data.net_amount).to.be.true;",
									"    });",
									"",
									"    pm.test(\"total_fee of payment is 0\", function () { // sẽ handle total_fee ở va",
									"        pm.expect(0 == jsData.data.total_fee).to.be.true;",
									"    });",
									"",
									"    pm.test(\"description of payment correctly! \" + tnx_obj.description, function () {",
									"        pm.expect(tnx_obj.description == jsData.data.description).to.be.true;",
									"    });",
									"",
									"    pm.test(\"value_at of payment correctly! \" + tnx_obj.value_at, function () {",
									"        let act_value_at = new Date(jsData.data.value_at);",
									"        console.log(\"actual value_at: \" + act_value_at.toISOString());",
									"        pm.expect(tnx_obj.value_at.substring(0,17) == act_value_at.toISOString().substring(0,17)).to.be.true;",
									"    });",
									"",
									"    pm.test(\"object_type of payment correctly! \" + tnx_obj.object_type, function () {",
									"        pm.expect(tnx_obj.object_type).to.eql(jsData.data.object_type);",
									"    });",
									"",
									"    pm.test(\"object_key of payment correctly! \" + tnx_obj.object_key, function () {",
									"        pm.expect(tnx_obj.object_key).to.eql(jsData.data.object_key);",
									"    });",
									"",
									"    postman.setNextRequest(\"get_list_payment_account\"); // get_list_payment_account",
									"} else {",
									"    console.log(\"Can't get internal contact detail, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{finan_base_url}}/finan-ledger/api/v1/payment/detail/{{C-payment_id}}?branch_id={{C-business_id}}",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"payment",
								"detail",
								"{{C-payment_id}}"
							],
							"query": [
								{
									"key": "branch_id",
									"value": "{{C-business_id}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "invoice",
			"item": [
				{
					"name": "get_list_invoice",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ============================= random number between min and max",
									"function getRandomInt(min, max) {",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = JSON.parse(responseBody);",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let total_pages = jsData.meta.total_pages;",
									"    let page = pm.environment.get(\"C-page\");",
									"",
									"    let tnx_edit_obj = pm.environment.get(\"C-tnx_edit_obj\");",
									"    let invoice_before_edit = pm.environment.get(\"C-invoice_before_edit\");",
									"    if(!invoice_before_edit){",
									"        invoice_before_edit = null;",
									"    }",
									"    let list_invoice, old_list_invoice;",
									"    let test_date = new Date(\"2024-03-24\"); // lấy invoice từ 24",
									"    switch(testcase){",
									"        case 2:",
									"            list_invoice = pm.environment.get(\"C-list_invoice\");",
									"            if(!list_invoice){",
									"                list_invoice = [];",
									"            }",
									"",
									"            for(let item in jsData.data){",
									"                // console.log(\"Invoice \" + jsData.data[item].entry_code + \" with final_status \" + jsData.data[item].final_status);",
									"                if(new Date(jsData.data[item].created_at) > test_date){",
									"                    // console.log(\"Invoice \" + jsData.data[item].entry_code + \" with created_at \" + jsData.data[item].created_at);",
									"                    list_invoice[list_invoice.length] = {",
									"                        \"invoice_id\":jsData.data[item].id,",
									"                        \"created_at\":jsData.data[item].created_at,",
									"                        \"entry_code\":jsData.data[item].entry_code,",
									"                        \"system_code\":jsData.data[item].system_code,",
									"                        \"status\":jsData.data[item].status,",
									"                        \"final_status\":jsData.data[item].final_status,",
									"                        \"payment_status\":jsData.data[item].payment_status,",
									"                        \"sub_total_amount\":jsData.data[item].sub_total_amount,",
									"                        \"total_amount\":jsData.data[item].total_amount,",
									"                        \"discount_amount\":jsData.data[item].discount_amount,",
									"                        \"total_tax_amount\":jsData.data[item].total_tax_amount,",
									"                        \"due_amount\":jsData.data[item].due_amount,",
									"                        \"paid_amount\":jsData.data[item].paid_amount,",
									"                        \"currency\":jsData.data[item].currency,",
									"                        \"contact_id\":jsData.data[item].contact_id,",
									"                        \"entry_type\":jsData.data[item].entry_type,",
									"                        \"description\":jsData.data[item].description,",
									"                        \"value_at\":jsData.data[item].value_at,",
									"                        \"due_at\":jsData.data[item].due_at,",
									"                        \"send_at\":jsData.data[item].send_at,",
									"                        \"account_id\":jsData.data[item].account_id,",
									"                        \"tax_type\":jsData.data[item].tax_type",
									"                    }",
									"                }",
									"",
									"                if(jsData.data[item].id == tnx_edit_obj.object_key){",
									"                    invoice_before_edit = jsData.data[item];",
									"                    pm.environment.set(\"C-invoice_before_edit\",invoice_before_edit);",
									"                }",
									"            }",
									"            pm.environment.set(\"C-list_invoice\",list_invoice);",
									"            break;",
									"        case 4:",
									"            old_list_invoice = pm.environment.get(\"C-old_list_invoice\");",
									"            if(!old_list_invoice){",
									"                old_list_invoice = pm.environment.get(\"C-list_invoice\");",
									"                pm.environment.unset(\"C-list_invoice\");",
									"                pm.environment.set(\"C-old_list_invoice\",old_list_invoice);",
									"            }",
									"",
									"            list_invoice = pm.environment.get(\"C-list_invoice\");",
									"            if(!list_invoice){",
									"                list_invoice = [];",
									"            }",
									"",
									"            for(let item in jsData.data){",
									"                // console.log(\"Invoice \" + jsData.data[item].entry_code + \" with final_status \" + jsData.data[item].final_status);",
									"                if(new Date(jsData.data[item].created_at) > test_date){",
									"                    // console.log(\"Invoice \" + jsData.data[item].entry_code + \" with created_at \" + jsData.data[item].created_at);",
									"                    list_invoice[list_invoice.length] = {",
									"                        \"invoice_id\":jsData.data[item].id,",
									"                        \"created_at\":jsData.data[item].created_at,",
									"                        \"entry_code\":jsData.data[item].entry_code,",
									"                        \"system_code\":jsData.data[item].system_code,",
									"                        \"status\":jsData.data[item].status,",
									"                        \"final_status\":jsData.data[item].final_status,",
									"                        \"payment_status\":jsData.data[item].payment_status,",
									"                        \"sub_total_amount\":jsData.data[item].sub_total_amount,",
									"                        \"total_amount\":jsData.data[item].total_amount,",
									"                        \"discount_amount\":jsData.data[item].discount_amount,",
									"                        \"total_tax_amount\":jsData.data[item].total_tax_amount,",
									"                        \"due_amount\":jsData.data[item].due_amount,",
									"                        \"paid_amount\":jsData.data[item].paid_amount,",
									"                        \"currency\":jsData.data[item].currency,",
									"                        \"contact_id\":jsData.data[item].contact_id,",
									"                        \"entry_type\":jsData.data[item].entry_type,",
									"                        \"description\":jsData.data[item].description,",
									"                        \"value_at\":jsData.data[item].value_at,",
									"                        \"due_at\":jsData.data[item].due_at,",
									"                        \"send_at\":jsData.data[item].send_at,",
									"                        \"account_id\":jsData.data[item].account_id,",
									"                        \"tax_type\":jsData.data[item].tax_type",
									"                    }",
									"                }",
									"            }",
									"            pm.environment.set(\"C-list_invoice\",list_invoice);",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow\");",
									"            break;",
									"    }",
									"",
									"    if(page >= total_pages){",
									"        // must clear page & page_size",
									"        pm.environment.unset(\"C-page\");",
									"        pm.environment.unset(\"C-page_size\");",
									"",
									"        let invoice_after_obj;",
									"        switch(testcase){",
									"            case 2:",
									"                pm.test(\"Got all invoice! \" + list_invoice.length, function () {",
									"                    pm.expect(list_invoice.length > 0).to.be.true;",
									"                });",
									"",
									"                pm.test(\"Got invoice before edit!\", function () {",
									"                    pm.expect(invoice_before_edit != null).to.be.true;",
									"                });",
									"                console.log(\"invoice_before_edit: \",invoice_before_edit);",
									"",
									"                let invoice_obj_status;",
									"                switch(2){ // getRandomInt(1,4)",
									"                    case 1:",
									"                        console.log(\"edit to draft invoice\");",
									"                        invoice_obj_status = \"draft\";",
									"                        break;",
									"                    case 2:",
									"                        console.log(\"edit to unsent invoice\");",
									"                        invoice_obj_status = \"unsent\";",
									"                        break;",
									"                    case 3:",
									"                        console.log(\"edit to partial_paid invoice\");",
									"                        invoice_obj_status = \"partial_paid\";",
									"                        break;",
									"                    case 4:",
									"                        console.log(\"edit to paid invoice\");",
									"                        invoice_obj_status = \"fully_paid\";",
									"                        break;",
									"                    case 5:",
									"                        console.log(\"edit to sent invoice\");",
									"                        invoice_obj_status = \"sent\";",
									"                        break;",
									"                    default:",
									"                        console.log(\"edit to overdue invoice\");",
									"                        invoice_obj_status = \"overdue\";",
									"                        break;",
									"                }",
									"",
									"                for(let i in list_invoice){",
									"                    if((list_invoice[i].final_status == invoice_obj_status || list_invoice[i].payment_status == invoice_obj_status) && list_invoice[i].invoice_id != invoice_before_edit.id){ // && list_invoice[i].system_code == \"DOIM3J9X\"",
									"                        invoice_after_obj = list_invoice[i];",
									"                        break;",
									"                    }",
									"                }",
									"",
									"                if(invoice_after_obj != null){",
									"                    pm.environment.set(\"C-invoice_after_obj\",invoice_after_obj);",
									"                    // pm.environment.set(\"C-invoice_id\",invoice_after_obj.invoice_id);",
									"",
									"                    console.log(\"=============================================\");",
									"                    console.log(\"Will edit to edit tnx link to invoice: \", invoice_after_obj);",
									"                    console.log(\"=============================================\");",
									"",
									"                    postman.setNextRequest(\"get_list_posting\"); // get_list_posting",
									"                } else {",
									"                    pm.test(\"Can't find invoice with respective status, end test\", function () {",
									"                        pm.expect(true).to.be.false;",
									"                    });",
									"",
									"                    postman.setNextRequest(null);",
									"                }",
									"                break;",
									"            case 4:",
									"                invoice_after_obj = pm.environment.get(\"C-invoice_after_obj\");",
									"                let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"",
									"                pm.test(\"Nothing happen with total invoice\", function () {",
									"                    pm.expect(list_invoice.length == old_list_invoice.length).to.be.true;",
									"                });",
									"",
									"                let today = new Date();",
									"                let isFoundBefore = false, isFoundAfter = false;",
									"                // console.log(\"debug before: \",invoice_before_edit);",
									"                // console.log(\"debug after: \",invoice_after_obj);",
									"                for(let i in list_invoice){",
									"                    if(list_invoice[i].invoice_id == invoice_before_edit.id){",
									"                        console.log(\"act before:\",list_invoice[i]);",
									"                        isFoundBefore = true;",
									"                        // mất đi transaction => tính lại finan_status, paid_amound & due_amount (tnx_edit_obj.amount)",
									"                        pm.test(\"paid_amount decrease \" + tnx_edit_obj.amount, function () {",
									"                            console.log(\"old: \" + invoice_before_edit.paid_amount);",
									"                            console.log(\"act: \" + list_invoice[i].paid_amount);",
									"                            // console.log(\"expected 2: \" + (invoice_before_edit.paid_amount - parseFloat(tnx_edit_obj.amount)));",
									"                            pm.expect(list_invoice[i].paid_amount == (invoice_before_edit.paid_amount - parseFloat(tnx_edit_obj.amount)).toFixed(2)).to.be.true;",
									"                        });",
									"",
									"                        pm.test(\"due_amount increase \" + tnx_edit_obj.amount, function () {",
									"                            console.log(\"old: \" + invoice_before_edit.due_amount);",
									"                            console.log(\"act: \" + list_invoice[i].due_amount);",
									"                            pm.expect(list_invoice[i].due_amount == (invoice_before_edit.due_amount + parseFloat(tnx_edit_obj.amount)).toFixed(2)).to.be.true;",
									"                        });",
									"                        ",
									"                        let payment_status_before = \"\";",
									"                        console.log(\"debug: \" + invoice_before_edit.total_amount);",
									"                        // console.log(\"debug1: \", invoice_before_edit);",
									"                        console.log(\"debug2: \" + (invoice_before_edit.paid_amount - parseFloat(tnx_edit_obj.amount)));",
									"                        if(0 >= invoice_before_edit.paid_amount - parseFloat(tnx_edit_obj.amount)){",
									"                            payment_status_before = \"un_paid\";",
									"                        } else {",
									"                            payment_status_before = \"partial_paid\";",
									"                        }",
									"                        pm.environment.set(\"C-payment_status_before\",payment_status_before);",
									"                        pm.test(\"payment_status update to \" + payment_status_before, function () {",
									"                            pm.expect(list_invoice[i].payment_status == payment_status_before).to.be.true;",
									"                        });",
									"",
									"                        let due_date_before = new Date(invoice_before_edit.due_at);",
									"                        let finan_status_before;",
									"                        /**",
									"                         * if payment_status_before == paid => finan_status_before == paid",
									"                         * else if due_at < today => overdue",
									"                         * else finan_status_before = payment_status_before (không còn draft & unsent)",
									"                         */",
									"                        switch(payment_status_before){",
									"                            case \"un_paid\":",
									"                                if(invoice_before_edit.unsent == null){",
									"                                    finan_status_before = \"unsent\";",
									"                                } else {",
									"                                    finan_status_before = \"sent\";",
									"                                }",
									"                                break;",
									"                            case \"partial_paid\":",
									"                                if(due_date_before < today){",
									"                                    finan_status_before = \"overdue\";",
									"                                } else {",
									"                                    finan_status_before = payment_status_before;",
									"                                }",
									"                                break;",
									"                            case \"fully_paid\":",
									"                                finan_status_before = payment_status_before;",
									"                                break;",
									"                            default:",
									"                                console.log(\"Missing payment_status: \" + payment_status_before);",
									"                                break;",
									"                        }",
									"                        pm.environment.set(\"C-finan_status_before\",finan_status_before);",
									"                        pm.test(\"final_status update to \" + finan_status_before, function () {",
									"                            pm.expect(list_invoice[i].final_status == finan_status_before).to.be.true;",
									"                        });",
									"                    }",
									"",
									"                    if(list_invoice[i].invoice_id == invoice_after_obj.invoice_id){",
									"                        console.log(\"act after:\",list_invoice[i]);",
									"                        isFoundAfter = true;",
									"                        // có thêm transaction => tính lại finan_status, paid_amount & due_amount (tnx_obj.amount)",
									"                        pm.test(\"paid_amount increase \" + tnx_obj.amount, function () {",
									"                            console.log(\"old: \" + invoice_after_obj.paid_amount);",
									"                            console.log(\"act: \" + list_invoice[i].paid_amount);",
									"                            pm.expect(list_invoice[i].paid_amount == (invoice_after_obj.paid_amount + parseFloat(tnx_obj.amount)).toFixed(2)).to.be.true;",
									"                        });",
									"",
									"                        pm.test(\"due_amount decrease \" + tnx_obj.amount, function () {",
									"                            console.log(\"old: \" + invoice_after_obj.due_amount);",
									"                            console.log(\"act: \" + list_invoice[i].due_amount);",
									"                            pm.expect(list_invoice[i].due_amount == (invoice_after_obj.due_amount - parseFloat(tnx_obj.amount)).toFixed(2)).to.be.true;",
									"                        });",
									"                        ",
									"                        let payment_status_after = \"\";",
									"                        if(invoice_after_obj.total_amount <= invoice_after_obj.paid_amount + parseFloat(tnx_obj.amount)){",
									"                            payment_status_after = \"fully_paid\";",
									"                        } else {",
									"                            payment_status_after = \"partial_paid\";",
									"                        }",
									"                        pm.environment.set(\"C-payment_status_after\",payment_status_after);",
									"                        pm.test(\"payment_status update to \" + payment_status_after, function () {",
									"                            pm.expect(list_invoice[i].payment_status == payment_status_after).to.be.true;",
									"                        });",
									"",
									"                        let due_date_after = new Date(invoice_after_obj.due_at);",
									"                        let final_status_after;",
									"                        switch(payment_status_after){",
									"                            case \"un_paid\":",
									"                                if(invoice_before_edit.unsent == null){",
									"                                    final_status_after = \"unsent\";",
									"                                } else {",
									"                                    final_status_after = \"sent\";",
									"                                }",
									"                                break;",
									"                            case \"partial_paid\":",
									"                                if(due_date_after < today){",
									"                                    final_status_after = \"overdue\";",
									"                                } else {",
									"                                    final_status_after = payment_status_after;",
									"                                }",
									"                                break;",
									"                            case \"fully_paid\":",
									"                                final_status_after = payment_status_after;",
									"                                break;",
									"                            default:",
									"                                console.log(\"Missing payment_status: \" + payment_status_after);",
									"                                break;",
									"                        }",
									"                        pm.environment.set(\"C-final_status_after\",final_status_after);",
									"                        pm.test(\"final_status update to \" + final_status_after, function () {",
									"                            pm.expect(list_invoice[i].final_status == final_status_after).to.be.true;",
									"                        });",
									"                    }",
									"                }",
									"",
									"                pm.test(\"Found invoice before edit\", function () {",
									"                    pm.expect(isFoundBefore).to.be.true;",
									"                });",
									"",
									"                pm.test(\"Found invoice after edit\", function () {",
									"                    pm.expect(isFoundAfter).to.be.true;",
									"                });",
									"",
									"                postman.setNextRequest(\"get_invoice_detail\"); // get_invoice_detail",
									"                break;",
									"            default:",
									"                console.log(\"Missing flow, end test\");",
									"                postman.setNextRequest(null);",
									"                break;",
									"        }",
									"    } else {",
									"        page++;",
									"        pm.environment.set(\"C-page\",page);",
									"",
									"        console.log(\"view next page (\" + page + \") to get more product\");",
									"        postman.setNextRequest(\"get_list_invoice\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get list product, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let page = pm.environment.get(\"C-page\");",
									"",
									"if(!page){",
									"    page = 1;",
									"    pm.environment.set(\"C-page\",page);",
									"",
									"    let page_size = 200;",
									"    pm.environment.set(\"C-page_size\",page_size);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{finan_base_url}}/finan-ledger/api/v1/invoice/list?branch_id={{C-business_id}}&page={{C-page}}&page_size={{C-page_size}}",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"invoice",
								"list"
							],
							"query": [
								{
									"key": "branch_id",
									"value": "{{C-business_id}}"
								},
								{
									"key": "page",
									"value": "{{C-page}}"
								},
								{
									"key": "page_size",
									"value": "{{C-page_size}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get_invoice_detail",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let invoice_before_edit = pm.environment.get(\"C-invoice_before_edit\");",
									"let invoice_id;",
									"switch(testcase){",
									"    case 2:",
									"        invoice_id = invoice_before_edit.id;",
									"        break;",
									"    case 4:",
									"        let isCheckAllInvoice = pm.environment.get(\"C-isCheckAllInvoice\");",
									"        if(!isCheckAllInvoice){",
									"            isCheckAllInvoice = 1;",
									"            pm.environment.set(\"C-isCheckAllInvoice\",isCheckAllInvoice);",
									"            invoice_id = pm.environment.get(\"C-invoice_before_edit\").id;",
									"        } else {",
									"            invoice_id = pm.environment.get(\"C-invoice_after_obj\").invoice_id;",
									"        }",
									"        break;",
									"    default:",
									"        console.log(\"Missing flow\");",
									"        break;",
									"}",
									"",
									"console.log(\"view detail invoice: \" + invoice_id);",
									"pm.environment.set(\"C-invoice_id\",invoice_id);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    console.log(\"Debug: \" + JSON.stringify(jsData));",
									"",
									"    let invoice_old_obj = pm.environment.get(\"C-invoice_old_obj\");",
									"    let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"    let isCheckAllInvoice = pm.environment.get(\"C-isCheckAllInvoice\");",
									"    ",
									"    switch(testcase){",
									"        case 2:",
									"            postman.setNextRequest(\"\"); // edit_transaction",
									"            break;",
									"        case 4:",
									"            let tnx_edit_obj = pm.environment.get(\"C-tnx_edit_obj\");",
									"            let invoice_before_edit = pm.environment.get(\"C-invoice_before_edit\");",
									"            let invoice_after_obj = pm.environment.get(\"C-invoice_after_obj\");",
									"            if(isCheckAllInvoice == 1){",
									"                isCheckAllInvoice++;",
									"                pm.environment.set(\"C-isCheckAllInvoice\",isCheckAllInvoice);",
									"                // before",
									"                // mất đi transaction => tính lại finan_status, paid_amound & due_amount (tnx_edit_obj.amount)",
									"                pm.test(\"paid_amount decrease \" + tnx_edit_obj.amount, function () {",
									"                    console.log(\"old: \" + invoice_before_edit.paid_amount);",
									"                    console.log(\"act: \" + jsData.data.paid_amount);",
									"                    pm.expect(jsData.data.paid_amount == (invoice_before_edit.paid_amount - parseFloat(tnx_edit_obj.amount)).toFixed(2)).to.be.true;",
									"                });",
									"",
									"                pm.test(\"due_amount increase \" + tnx_edit_obj.amount, function () {",
									"                    console.log(\"old: \" + invoice_before_edit.due_amount);",
									"                    console.log(\"act: \" + jsData.data.due_amount);",
									"                    pm.expect(jsData.data.due_amount == (invoice_before_edit.due_amount + parseFloat(tnx_edit_obj.amount)).toFixed(2)).to.be.true;",
									"                });",
									"                ",
									"                let payment_status_before = pm.environment.get(\"C-payment_status_before\");",
									"                pm.test(\"payment_status update to \" + payment_status_before, function () {",
									"                    console.log(\"act: \" + jsData.data.payment_status);",
									"                    pm.expect(jsData.data.payment_status == payment_status_before).to.be.true;",
									"                });",
									"",
									"                let finan_status_before = pm.environment.get(\"C-finan_status_before\");",
									"                pm.test(\"final_status update to \" + finan_status_before, function () {",
									"                    console.log(\"act: \" + jsData.data.final_status);",
									"                    pm.expect(jsData.data.final_status == finan_status_before).to.be.true;",
									"                });",
									"",
									"                postman.setNextRequest(\"get_invoice_detail\");",
									"            } else {",
									"                pm.environment.unset(\"C-isCheckAllInvoice\");",
									"                // after",
									"                pm.test(\"paid_amount increase \" + tnx_obj.amount, function () {",
									"                    console.log(\"old: \" + invoice_after_obj.paid_amount);",
									"                    console.log(\"act: \" + jsData.data.paid_amount);",
									"                    pm.expect(jsData.data.paid_amount == (invoice_after_obj.paid_amount + parseFloat(tnx_obj.amount)).toFixed(2)).to.be.true;",
									"                });",
									"",
									"                pm.test(\"due_amount decrease \" + tnx_obj.amount, function () {",
									"                    console.log(\"old: \" + invoice_after_obj.due_amount);",
									"                    console.log(\"act: \" + jsData.data.due_amount);",
									"                    pm.expect(jsData.data.due_amount == (invoice_after_obj.due_amount - parseFloat(tnx_obj.amount)).toFixed(2)).to.be.true;",
									"                });",
									"                ",
									"                let payment_status_after = pm.environment.get(\"C-payment_status_after\");",
									"                pm.test(\"payment_status update to \" + payment_status_after, function () {",
									"                    console.log(\"act: \" + jsData.data.payment_status);",
									"                    pm.expect(jsData.data.payment_status == payment_status_after).to.be.true;",
									"                });",
									"",
									"                let final_status_after = pm.environment.get(\"C-final_status_after\");",
									"                pm.test(\"final_status update to \" + final_status_after, function () {",
									"                    console.log(\"act: \" + jsData.data.final_status);",
									"                    pm.expect(jsData.data.final_status == final_status_after).to.be.true;",
									"                });",
									"",
									"                postman.setNextRequest(\"get_list_posting\"); // get_list_posting",
									"            }",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get invoice detail, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{finan_base_url}}/finan-ledger/api/v1/invoice/detail/{{C-invoice_id}}?branch_id={{C-business_id}}",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"invoice",
								"detail",
								"{{C-invoice_id}}"
							],
							"query": [
								{
									"key": "branch_id",
									"value": "{{C-business_id}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "posting",
			"item": [
				{
					"name": "get_list_posting",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let page = pm.environment.get(\"C-page\");",
									"",
									"if(!page){",
									"    page = 1;",
									"    pm.environment.set(\"C-page\",page);",
									"",
									"    let page_size = 500;",
									"    pm.environment.set(\"C-page_size\",page_size);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"/**",
									" * object_type: transaction, invoice",
									" * object_id => id respective with object_type (tnx_id, invoice_id)",
									" * object_id_ref => use for invoice with product/item (product_id, item_id)",
									" * is_credit",
									" * created_at",
									" * value_at",
									" */",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = JSON.parse(responseBody);",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let total_pages = 1;",
									"    try {",
									"        total_pages = jsData.meta.total_pages;",
									"    } catch {",
									"        console.log(\"currently, this branch with null data\");",
									"    }",
									"    let page = pm.environment.get(\"C-page\");",
									"",
									"    let list_posting, old_list_posting;",
									"    switch(testcase){",
									"        case 2:",
									"            list_posting = pm.environment.get(\"C-list_posting\");",
									"            if(!list_posting){",
									"                list_posting = [];",
									"            }",
									"            break;",
									"        case 4:",
									"            old_list_posting = pm.environment.get(\"C-old_list_posting\");",
									"            if(!old_list_posting){",
									"                old_list_posting = pm.environment.get(\"C-list_posting\");",
									"                pm.environment.unset(\"C-list_posting\");",
									"                pm.environment.set(\"C-old_list_posting\",old_list_posting);",
									"            }",
									"",
									"            list_posting = pm.environment.get(\"C-list_posting\");",
									"            if(!list_posting){",
									"                list_posting = [];",
									"            }",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow\");",
									"            break;",
									"    }",
									"",
									"    for(let item in jsData.data){",
									"        list_posting[list_posting.length] = {",
									"            \"posting_id\":jsData.data[item].id,",
									"            \"account_id\":jsData.data[item].account_id,",
									"            \"amount\":jsData.data[item].amount,",
									"            \"branch_id\":jsData.data[item].branch_id,",
									"            \"created_at\":jsData.data[item].created_at,",
									"            \"currency\":jsData.data[item].currency,",
									"            \"deleted_at\":jsData.data[item].deleted_at,",
									"            \"is_credit\":jsData.data[item].is_credit,",
									"            \"is_final_status\":jsData.data[item].is_final_status,",
									"            \"object_id_ref\":jsData.data[item].object_id_ref,",
									"            \"object_id\":jsData.data[item].object_id,",
									"            \"object_type\":jsData.data[item].object_type,",
									"            // \"value_at\":jsData.data[item].value_at,",
									"            \"short_desc\":jsData.data[item].short_desc",
									"        }",
									"    }",
									"    pm.environment.set(\"C-list_posting\",list_posting);",
									"",
									"    if(page >= total_pages){",
									"        // must clear page & page_size",
									"        pm.environment.unset(\"C-page\");",
									"        pm.environment.unset(\"C-page_size\");",
									"",
									"        switch(testcase){",
									"            case 2:",
									"                pm.test(\"Got all posting! \" + list_posting.length, function () {",
									"                    pm.expect(list_posting.length > 0).to.be.true;",
									"                });",
									"",
									"                postman.setNextRequest(\"get_report_cash_flow\"); // get_report_cash_flow",
									"                break;",
									"            case 4:",
									"                pm.test(\"Nothing happen with total record\", function () {",
									"                    pm.expect(list_posting.length == old_list_posting.length).to.be.true;",
									"                });",
									"",
									"                let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"                let account_receivable = pm.environment.get(\"C-account_receivable\");",
									"                // console.log(\"account_receivable: \",account_receivable);",
									"                let count = 0;",
									"                let foundAll = false;",
									"                for(let i in list_posting){",
									"                    if(list_posting[i].object_type == \"transaction\" && list_posting[i].object_id == tnx_obj.tnx_id){",
									"                        // console.log(\"list_posting[i]: \", list_posting[i]);",
									"                        if(list_posting[i].is_credit){",
									"                            count++;",
									"                            pm.test(\"Found account_receivable for credit\", function () {",
									"                                pm.expect(list_posting[i].account_id == account_receivable.id).to.be.true;",
									"                            });",
									"",
									"                            pm.test(\"--- amount correctly \" + tnx_obj.amount, function () {",
									"                                console.log(\"actual: \" + list_posting[i].amount);",
									"                                pm.expect(list_posting[i].amount.toFixed(2) == tnx_obj.amount.toFixed(2)).to.be.true;",
									"                            });",
									"                        } else {",
									"                            count++;",
									"                            pm.test(\"Found account_debit for debit\", function () {",
									"                                console.log(\"account_debit: \" + tnx_obj.account_id);",
									"                                console.log(\"act: \" + list_posting[i].account_id);",
									"                                pm.expect(list_posting[i].account_id == tnx_obj.account_id).to.be.true;",
									"                            });",
									"",
									"                            pm.test(\"--- amount correctly \" + tnx_obj.amount, function () {",
									"                                console.log(\"actual: \" + list_posting[i].amount);",
									"                                pm.expect(list_posting[i].amount.toFixed(2) == tnx_obj.amount.toFixed(2)).to.be.true;",
									"                            });",
									"                        }",
									"",
									"                        if(count == 2){",
									"                            foundAll = true;",
									"                            // break;",
									"                        } else if (count > 2){",
									"                            pm.test(\"Wrong total posting for this invoice\", function () {",
									"                                pm.expect(false).to.be.true;",
									"                            });",
									"                            break;",
									"                        }",
									"                    }",
									"                }",
									"",
									"                pm.test(\"Found all posting\", function () {",
									"                    pm.expect(foundAll).to.be.true;",
									"                });",
									"",
									"                postman.setNextRequest(\"get_report_cash_flow\"); // get_report_cash_flow",
									"                break;",
									"            default:",
									"                console.log(\"Missing flow, end test\");",
									"                postman.setNextRequest(null);",
									"                break;",
									"        }",
									"    } else {",
									"        page++;",
									"        pm.environment.set(\"C-page\",page);",
									"",
									"        console.log(\"view next page (\" + page + \") to get more posting\");",
									"        postman.setNextRequest(\"get_list_posting\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get list posting, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{finan_base_url}}​/finan-ledger/api/v1/posting/list?branch_id={{C-business_id}}&page={{C-page}}&page_size={{C-page_size}}&search=&sort=",
							"host": [
								"{{finan_base_url}}​"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"posting",
								"list"
							],
							"query": [
								{
									"key": "branch_id",
									"value": "{{C-business_id}}"
								},
								{
									"key": "page",
									"value": "{{C-page}}"
								},
								{
									"key": "page_size",
									"value": "{{C-page_size}}"
								},
								{
									"key": "search",
									"value": ""
								},
								{
									"key": "sort",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.request.headers.add({",
							" key: \"authorization\",",
							" value: \"Bearer \" + pm.environment.get(\"C-userToken\")",
							"});",
							"",
							"pm.request.headers.add({",
							" key: \"Content-Type\",",
							" value: \"application/json\"",
							"});"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "report",
			"item": [
				{
					"name": "get_report_cash_flow",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ============================= sort by key",
									"function sortByKey(array, key, type) {",
									"    if(type == \"asc\"){",
									"        return array.sort(function(a, b) {",
									"            var x = a[key]; var y = b[key];",
									"            return ((x > y) ? -1 : ((x < y) ? 1 : 0));",
									"        });",
									"    } else {",
									"        return array.sort(function(a, b) {",
									"            var x = a[key]; var y = b[key];",
									"            return ((x < y) ? -1 : ((x > y) ? 1 : 0));",
									"        });",
									"    }",
									"}",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let report_cash_flow = null;",
									"    try {",
									"        report_cash_flow = jsData.data;",
									"        /**",
									"         * db_data",
									"         * sum_card_data",
									"         * top_income_categories_data",
									"         * full_income_categories_data",
									"         * top_expense_categories_data",
									"         * full_expense_categories_data",
									"         */",
									"    } catch {",
									"        console.log(\"Can't get report cash_flow data\");",
									"    }",
									"",
									"    let total_income = 0, total_expense = 0;",
									"    let income_list = [], expense_list = [];",
									"    let exp_sum_card_data;",
									"    let full_income_categories_data;",
									"    if(\"full_income_categories_data\" in jsData.data){",
									"        full_income_categories_data = JSON.parse(JSON.stringify(jsData.data.full_income_categories_data));",
									"    } else {",
									"        full_income_categories_data = [];",
									"    }",
									"    let full_expense_categories_data;",
									"    if(\"full_expense_categories_data\" in jsData.data){",
									"        full_expense_categories_data = JSON.parse(JSON.stringify(jsData.data.full_expense_categories_data));",
									"    } else {",
									"        full_expense_categories_data = [];",
									"    }",
									"    switch(testcase){",
									"        case 2:",
									"            pm.environment.set(\"C-report_cash_flow\",report_cash_flow);",
									"            // console.log(\"report_cash_flow: \",report_cash_flow);",
									"",
									"            // ================================================ bonus check current data",
									"            // try {",
									"            //     for(let i in jsData.data.db_data){",
									"            //         if(jsData.data.db_data[i].coa_type == \"income\"){",
									"            //             income_list[income_list.length] = JSON.parse(JSON.stringify(jsData.data.db_data[i]));",
									"            //             total_income += jsData.data.db_data[i].current_income;",
									"            //         } else if (jsData.data.db_data[i].coa_type == \"expense\"){",
									"            //             expense_list[expense_list.length] = JSON.parse(JSON.stringify(jsData.data.db_data[i]));",
									"            //             total_expense += jsData.data.db_data[i].current_expense;",
									"            //         }",
									"            //     }",
									"            //     exp_sum_card_data = {",
									"            //         \"total_current_income\": total_income,",
									"            //         \"total_current_expense\": total_expense,",
									"            //         \"total_current_gap\": (total_income - total_expense)",
									"            //     }",
									"            //     console.log(\"exp_sum_card_data: \", exp_sum_card_data);",
									"",
									"            //     for(let i in income_list){",
									"            //         income_list[i].percentage = parseFloat((income_list[i].current_income/total_income*100).toFixed(2));",
									"            //         delete income_list[i]['coa_type'];",
									"            //         delete income_list[i]['current_income'];",
									"            //     }",
									"            //     console.log(\"income_list: \", sortByKey(income_list,\"percentage\",\"asc\"));",
									"",
									"            //     for(let i in expense_list){",
									"            //         expense_list[i].percentage = parseFloat((expense_list[i].current_expense/total_expense*100).toFixed(2));",
									"            //         delete expense_list[i]['coa_type'];",
									"            //         delete expense_list[i]['current_expense'];",
									"            //     }",
									"            //     console.log(\"expense_list: \", sortByKey(expense_list,\"percentage\",\"asc\"));",
									"",
									"            //     pm.test(\"sum_card_data correctly\", function () {",
									"            //         console.log(\"act data: \",JSON.stringify(jsData.data.sum_card_data));",
									"            //         console.log(\"exp data: \",JSON.stringify(exp_sum_card_data));",
									"            //         pm.expect(JSON.stringify(jsData.data.sum_card_data) == JSON.stringify(exp_sum_card_data)).to.be.true;",
									"            //     });",
									"",
									"            //     for(let i in full_income_categories_data){",
									"            //         delete full_income_categories_data[i]['current_amount'];",
									"            //     }",
									"            //     pm.test(\"full_income_categories_data correctly\", function () {",
									"            //         console.log(\"act data: \",JSON.stringify(full_income_categories_data));",
									"            //         console.log(\"exp data: \",JSON.stringify(income_list));",
									"            //         pm.expect(JSON.stringify(full_income_categories_data) == JSON.stringify(income_list)).to.be.true;",
									"            //     });",
									"",
									"            //     for(let i in full_expense_categories_data){",
									"            //         delete full_expense_categories_data[i]['current_amount'];",
									"            //     }",
									"            //     pm.test(\"full_expense_categories_data correctly\", function () {",
									"            //         console.log(\"act data: \",JSON.stringify(full_expense_categories_data));",
									"            //         console.log(\"exp data: \",JSON.stringify(expense_list));",
									"            //         pm.expect(JSON.stringify(full_expense_categories_data) == JSON.stringify(expense_list)).to.be.true;",
									"            //         // pm.expect(jsData.data.full_expense_categories_data).to.deep.include(expense_list);",
									"            //     });",
									"            // } catch {",
									"            //     console.log(\"Null data\");",
									"            // }",
									"            // ================================================ ",
									"",
									"            postman.setNextRequest(\"get_report_account\"); // get_list_transaction, get_report_account",
									"            break;",
									"        case 4:",
									"            let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"            let old_report_cash_flow = pm.environment.get(\"C-report_cash_flow\");",
									"",
									"            pm.test(\"Nothing happen!!!\", function () {",
									"                pm.expect(JSON.stringify(report_cash_flow) == JSON.stringify(old_report_cash_flow)).to.be.true;",
									"            });",
									"",
									"            postman.setNextRequest(\"get_report_account\"); // get_report_account",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get report cash_flow, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"// lấy full tháng hiện tại",
									"let today = new Date();",
									"let start_current_month = new Date(today.getFullYear(), today.getMonth(), 1);",
									"let end_current_month = new Date(today.getFullYear(), today.getMonth() + 1, 1);",
									"",
									"// lấy full tháng trước",
									"let start_last_month = new Date(today.getFullYear(), today.getMonth() - 1, 1);",
									"let end_last_month = new Date(today.getFullYear(), today.getMonth(), 1);",
									"",
									"// lấy full ngày hiện tại",
									"// let firstDay = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0 ,0, 0);",
									"// let lastDay = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 23, 59 ,59, 0);",
									"",
									"// lấy n ngày đến hiện tại",
									"// let firstDayTimestamp = Math.floor(firstDay.getTime()/1000) - 2*24*60*60;",
									"// let start_day_ago = new Date(firstDayTimestamp*1000);",
									"",
									"let current_period_start = start_current_month.toISOString();",
									"let current_period_end = end_current_month.toISOString();",
									"let previous_period_start = start_last_month.toISOString();",
									"let previous_period_end = end_last_month.toISOString();",
									"",
									"/**",
									" * currently, display error if missing previous_period_start & previous_period_end or them = \"\";",
									" */",
									"let payload = {",
									"    \"branch_id\": parseInt(pm.environment.get(\"C-business_id\")),",
									"    \"current_period_start\": current_period_start,",
									"    \"current_period_end\": current_period_end,",
									"    \"previous_period_start\": previous_period_start,",
									"    \"previous_period_end\": previous_period_end",
									"    // \"timezone\": \"Asia/Ho_Chi_Minh\" // UTC, Asia/Ho_Chi_Minh == UTC+07:00",
									"}",
									"",
									"console.log(\"payload: \",payload);",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));",
									"",
									"pm.environment.set(\"C-current_period_start\",current_period_start);",
									"pm.environment.set(\"C-current_period_end\",current_period_end);",
									"pm.environment.set(\"C-previous_period_start\",previous_period_start);",
									"pm.environment.set(\"C-previous_period_end\",previous_period_end);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finan_base_url}}/finan-ledger/api/v1/report/cash-flow",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"report",
								"cash-flow"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_report_account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ============================= sort by key",
									"function sortByKey(array, key, type) {",
									"    if(type == \"asc\"){",
									"        return array.sort(function(a, b) {",
									"            var x = a[key]; var y = b[key];",
									"            return ((x > y) ? -1 : ((x < y) ? 1 : 0));",
									"        });",
									"    } else {",
									"        return array.sort(function(a, b) {",
									"            var x = a[key]; var y = b[key];",
									"            return ((x < y) ? -1 : ((x > y) ? 1 : 0));",
									"        });",
									"    }",
									"}",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let report_account = null;",
									"    try {",
									"        report_account = jsData.data;",
									"        /**",
									"         * list account in sub_group_value = cash_and_bank",
									"         */",
									"    } catch {",
									"        console.log(\"Can't get report cash_flow data\");",
									"    }",
									"",
									"    switch(testcase){",
									"        case 2:",
									"            pm.environment.set(\"C-report_account\",report_account);",
									"",
									"            // ================================================ bonus check current data",
									"            let coa = pm.environment.get(\"C-coa\");",
									"            let cash_n_bank = [];",
									"            loop:",
									"            for(let i in coa){",
									"                for(let j in coa[i].sub_group){",
									"                    if(coa[i].sub_group[j].sub_group_value == \"cash_and_bank\"){",
									"                        cash_n_bank = coa[i].sub_group[j];",
									"                        break loop;",
									"                    }",
									"                }",
									"            }",
									"",
									"            pm.test(\"Show all account in cash_and_bank\", function () {",
									"                console.log(\"report_account.length: \" + report_account.length);",
									"                console.log(\"cash_n_bank.accounts.length: \" + cash_n_bank.accounts.length);",
									"                pm.expect(cash_n_bank.accounts.length == report_account.length).to.be.true;",
									"            });",
									"            // console.log(\"cash_n_bank: \" + JSON.stringify(cash_n_bank));",
									"            // console.log(\"report_account: \" + JSON.stringify(report_account));",
									"            ",
									"            // ================================================ ",
									"",
									"            postman.setNextRequest(\"get_report_account_receivable_paid\"); // get_report_account_receivable_paid",
									"            break;",
									"        case 4:",
									"            let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"            let list_credit_account = pm.environment.get(\"C-list_credit_account\");",
									"            let old_report_account = pm.environment.get(\"C-report_account\");",
									"            ",
									"            for(let i in list_credit_account){",
									"                if(list_credit_account[i].account_id == tnx_obj.account_id){",
									"                    tnx_obj.account_name = list_credit_account[i].account_name;",
									"                    break;",
									"                }",
									"            }",
									"            // console.log(\"debug old_report_account: \", old_report_account);",
									"            // console.log(\"debug report_account: \", report_account);",
									"",
									"            let isFound = false;",
									"            loop:",
									"            for(let j in report_account){",
									"                for(let k in old_report_account){",
									"                    if(report_account[j].id == old_report_account[k].id && report_account[j].id == tnx_obj.account_id){",
									"                        isFound = true;",
									"",
									"                        pm.test(\"Account \" + tnx_obj.account_name + \" increase debit_amount \" + tnx_obj.amount, function () {",
									"                            console.log(\"old debit_amount: \" + old_report_account[k].debit_amount);",
									"                            console.log(\"amount: \" + tnx_obj.amount);",
									"                            console.log(\"expected: \" + (old_report_account[k].debit_amount + tnx_obj.amount));",
									"                            console.log(\"new debit_amount: \" + report_account[j].debit_amount);",
									"                            pm.expect(report_account[j].debit_amount.toFixed(2) == (old_report_account[k].debit_amount + tnx_obj.amount).toFixed(2)).to.be.true;",
									"                        });",
									"                        break loop;",
									"                    }",
									"                }",
									"            }",
									"",
									"            pm.test(\"Found account \" + tnx_obj.account_name, function () {",
									"                pm.expect(isFound).to.be.true;",
									"            });",
									"",
									"            postman.setNextRequest(\"get_report_account_receivable_paid\"); // get_report_account_receivable_paid",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get report cash_flow, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"// lấy full tháng hiện tại",
									"let today = new Date();",
									"// let firstDay = new Date(today.getFullYear(), today.getMonth(), 1);",
									"let lastDay = new Date(today.getFullYear(), today.getMonth() + 1, 1);",
									"",
									"// lấy full n tháng trước",
									"let firstDay = new Date(today.getFullYear(), today.getMonth() - 3, 1);",
									"// let lastDay = new Date(today.getFullYear(), today.getMonth(), 1);",
									"",
									"// lấy full ngày hiện tại",
									"// let firstDay = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0 ,0, 0);",
									"// let lastDay = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 23, 59 ,59, 0);",
									"",
									"// lấy n ngày đến hiện tại",
									"// let firstDayTimestamp = Math.floor(firstDay.getTime()/1000) - 2*24*60*60;",
									"// let start_day_ago = new Date(firstDayTimestamp*1000);",
									"",
									"let start_time = firstDay.toISOString();",
									"let end_time = lastDay.toISOString();",
									"",
									"console.log(\"start_time: \" + start_time);",
									"console.log(\"end_time: \" + end_time);",
									"",
									"pm.environment.set(\"C-start_time\",start_time);",
									"pm.environment.set(\"C-end_time\",end_time);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"branch_id\": {{C-business_id}},\n    \"current_period_start\": \"{{C-current_period_start}}\",\n    \"current_period_end\": \"{{C-current_period_end}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finan_base_url}}/finan-ledger/api/v1/report/account",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"report",
								"account"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_report_account_receivable_paid",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let start_time = pm.environment.get(\"C-start_time\");",
									"let end_time = pm.environment.get(\"C-end_time\");",
									"",
									"let invoice_after_obj = pm.environment.get(\"C-invoice_after_obj\");",
									"let invoice_before_edit = pm.environment.get(\"C-invoice_before_edit\");",
									"",
									"console.log(\"start_time: \" + start_time);",
									"console.log(\"end_time: \" + end_time);",
									"console.log(\"invoice_before_edit created: \" + invoice_before_edit.value_at);",
									"console.log(\"invoice_after_obj created: \" + invoice_after_obj.value_at);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let paid_account_receivable = null;",
									"    try {",
									"        paid_account_receivable = jsData.data.paid_amount_by_time_range;",
									"    } catch {",
									"        console.log(\"Can't get data\");",
									"    }",
									"",
									"    switch(testcase){",
									"        case 2:",
									"            pm.test(\"Got paid_account_receivable data\", function () {",
									"                pm.expect(paid_account_receivable != null).to.be.true;",
									"            });",
									"            pm.environment.set(\"C-paid_account_receivable\",paid_account_receivable);",
									"            // console.log(\"paid_account_receivable: \",paid_account_receivable);",
									"",
									"            postman.setNextRequest(\"get_report_account_receivable_unpaid\"); //get_report_account_receivable_unpaid",
									"            break;",
									"        case 4:",
									"            let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"            let tnx_edit_obj = pm.environment.get(\"C-tnx_edit_obj\");",
									"            let old_data = pm.environment.get(\"C-paid_account_receivable\");",
									"            /**",
									"             * tnx_edit_obj.amount => số tiền đã trả ở transaction cũ",
									"             * tnx_obj.amount => số tiền trả sau khi update",
									"             * => exchange_amount = (tnx_edit_obj.amount - tnx_obj.amount)",
									"             * if exchange_amount > 0 => giảm paid_amount",
									"             * else => tăng paid_amount",
									"             * *** NOTE: cần kiểm tra value_at của invoice trước edit và invoice sau edit có thoả time range để thay đổi",
									"             */",
									"            let exchange_amount = parseFloat(tnx_obj.amount)- parseFloat(tnx_edit_obj.amount);",
									"            console.log(\"exchange_amount: \" + exchange_amount);",
									"",
									"            // unpaid_total",
									"            if(exchange_amount > 0){",
									"                pm.test(\"Total paid increase \" + exchange_amount, function () {",
									"                    console.log(\"old: \" + old_data);",
									"                    console.log(\"new: \" + paid_account_receivable);",
									"                    pm.expect(paid_account_receivable.toFixed(2) == (exchange_amount + old_data).toFixed(2)).to.be.true;",
									"                });",
									"            } else {",
									"                exchange_amount = Math.abs(exchange_amount);",
									"                pm.test(\"Total paid decrease \" + exchange_amount, function () {",
									"                    console.log(\"old: \" + old_data);",
									"                    console.log(\"new: \" + paid_account_receivable);",
									"                    pm.expect(paid_account_receivable.toFixed(2) == (old_data + exchange_amount).toFixed(2)).to.be.true;",
									"                });",
									"            }",
									"",
									"            postman.setNextRequest(\"get_report_account_receivable_unpaid\"); //get_report_account_receivable_unpaid",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get report account receivable unpaid, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"branch_id\": {{C-business_id}},\n    \"current_period_start\": \"{{C-start_time}}\",\n    \"current_period_end\": \"{{C-end_time}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finan_base_url}}/finan-ledger/api/v1/report/account-receivable-card-paid",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"report",
								"account-receivable-card-paid"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_report_account_receivable_unpaid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let unpaid_account_receivable = null;",
									"    try {",
									"        unpaid_account_receivable = jsData.data.unpaid_amount_lifetime_categories;",
									"    } catch {",
									"        console.log(\"Can't get data\");",
									"    }",
									"",
									"    switch(testcase){",
									"        case 2:",
									"            pm.test(\"Got unpaid_account_receivable data\", function () {",
									"                pm.expect(unpaid_account_receivable != null).to.be.true;",
									"            });",
									"            pm.environment.set(\"C-unpaid_account_receivable\",unpaid_account_receivable);",
									"            // console.log(\"unpaid_account_receivable: \",unpaid_account_receivable);",
									"",
									"            postman.setNextRequest(\"get_report_account_receivable_customer\"); //get_report_account_receivable_customer",
									"            break;",
									"        case 4:",
									"            let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"            let tnx_edit_obj = pm.environment.get(\"C-tnx_edit_obj\");",
									"            let invoice_before_edit = pm.environment.get(\"C-invoice_before_edit\");",
									"            let invoice_after_obj = pm.environment.get(\"C-invoice_after_obj\");",
									"            let old_data = pm.environment.get(\"C-unpaid_account_receivable\");",
									"            /**",
									"             * unpaid_total",
									"             *  - exchange_amount = tnx_obj.amount - tnx_edit_obj.amount",
									"             *    exchange_amount > 0 => unpaid decrease",
									"             *    exchange_amount < 0 => unpaid increase",
									"             */",
									"            let exchange_amount = parseFloat(tnx_obj.amount - tnx_edit_obj.amount);",
									"",
									"            // unpaid_total",
									"            if(exchange_amount > 0){",
									"                pm.test(\"Total unpaid decrease \" + exchange_amount, function () {",
									"                    console.log(\"old: \" + old_data.unpaid_total);",
									"                    console.log(\"new: \" + unpaid_account_receivable.unpaid_total);",
									"                    pm.expect(unpaid_account_receivable.unpaid_total.toFixed(2) == (old_data.unpaid_total - exchange_amount).toFixed(2)).to.be.true;",
									"                });",
									"            } else {",
									"                // exchange_amount = Math.abs(exchange_amount);",
									"                pm.test(\"Total unpaid increase \" + exchange_amount, function () {",
									"                    console.log(\"old: \" + old_data.unpaid_total);",
									"                    console.log(\"new: \" + unpaid_account_receivable.unpaid_total);",
									"                    pm.expect(unpaid_account_receivable.unpaid_total.toFixed(2) == (old_data.unpaid_total - exchange_amount).toFixed(2)).to.be.true;",
									"                });",
									"            }",
									"            pm.environment.set(\"C-exchange_amount\",exchange_amount);",
									"",
									"            /**",
									"             * due amount",
									"             *  - invoice_before_edit & invoice_after_obj cùng due_type => thay đổi theo exchange",
									"             *  - khác due_type => tăng giảm tương ứng",
									"             */",
									"            let due_date_before = new Date(invoice_before_edit.due_at);",
									"            let due_date_before_timestamp = Math.floor(due_date_before.getTime()/1000);",
									"            let due_date_after = new Date(invoice_after_obj.due_at);",
									"            let due_date_after_timestamp = Math.floor(due_date_after.getTime()/1000);",
									"            let today = new Date();",
									"            let today_timestamp = Math.floor(today.getTime()/1000);",
									"            let due_type_before,due_type_after;",
									"            // console.log(\"debug: \" + (due_date_before_timestamp - today_timestamp));",
									"            if(due_date_before_timestamp > today_timestamp){",
									"                due_type_before = \"undue\";",
									"            } else {",
									"                if(today_timestamp - due_date_before_timestamp > 60*24*60*60){",
									"                    due_type_before = \"overdue_over\";",
									"                } else if (today_timestamp - due_date_before_timestamp > 30*24*60*60){",
									"                    due_type_before = \"overdue_between\";",
									"                } else {",
									"                    due_type_before = \"overdue_less\";",
									"                }",
									"            }",
									"            pm.environment.set(\"C-due_type_before\",due_type_before);",
									"            if(due_date_after_timestamp > today_timestamp){",
									"                due_type_after = \"undue\";",
									"            } else {",
									"                if(today_timestamp - due_date_after_timestamp > 60*24*60*60){",
									"                    due_type_after = \"overdue_over\";",
									"                } else if (today_timestamp - due_date_after_timestamp > 30*24*60*60){",
									"                    due_type_after = \"overdue_between\";",
									"                } else {",
									"                    due_type_after = \"overdue_less\";",
									"                }",
									"            }",
									"            pm.environment.set(\"C-due_type_after\",due_type_after);",
									"",
									"            console.log(\"old: \",old_data);",
									"            console.log(\"new: \",unpaid_account_receivable);",
									"            if(due_type_before == due_type_after){",
									"                switch(due_type_before){",
									"                    case \"undue\":",
									"                        // unpaid_due",
									"                        pm.test(\"unpaid_due update \" + exchange_amount, function () {",
									"                            console.log(\"old: \" + old_data.unpaid_due);",
									"                            console.log(\"expected: \" + (old_data.unpaid_due + exchange_amount));",
									"                            console.log(\"new: \" + unpaid_account_receivable.unpaid_due);",
									"                            pm.expect(unpaid_account_receivable.unpaid_due.toFixed(2) == (old_data.unpaid_due - exchange_amount).toFixed(2)).to.be.true;",
									"                        });",
									"",
									"                        // unpaid_overdue_less",
									"                        pm.test(\"nothing happen unpaid_overdue_less\", function () {",
									"                            pm.expect(unpaid_account_receivable.unpaid_overdue_less == old_data.unpaid_overdue_less).to.be.true;",
									"                        });",
									"",
									"                        // unpaid_overdue_between",
									"                        pm.test(\"nothing happen unpaid_overdue_between\", function () {",
									"                            pm.expect(unpaid_account_receivable.unpaid_overdue_between == old_data.unpaid_overdue_between).to.be.true;",
									"                        });",
									"",
									"                        // unpaid_overdue_over",
									"                        pm.test(\"nothing happen unpaid_overdue_over\", function () {",
									"                            pm.expect(unpaid_account_receivable.unpaid_overdue_over == old_data.unpaid_overdue_over).to.be.true;",
									"                        });",
									"                        break;",
									"                    case \"overdue_less\":",
									"                        // unpaid_due",
									"                        pm.test(\"nothing happen unpaid_due\", function () {",
									"                            pm.expect(unpaid_account_receivable.unpaid_due == old_data.unpaid_due).to.be.true;",
									"                        });",
									"",
									"                        // unpaid_overdue_less",
									"                        pm.test(\"unpaid_overdue_less update \" + exchange_amount, function () {",
									"                            console.log(\"old: \" + old_data.unpaid_overdue_less);",
									"                            console.log(\"new: \" + unpaid_account_receivable.unpaid_overdue_less);",
									"                            pm.expect(unpaid_account_receivable.unpaid_overdue_less.toFixed(2) == (old_data.unpaid_overdue_less - exchange_amount).toFixed(2)).to.be.true;",
									"                        });",
									"",
									"                        // unpaid_overdue_between",
									"                        pm.test(\"nothing happen unpaid_overdue_between\", function () {",
									"                            pm.expect(unpaid_account_receivable.unpaid_overdue_between == old_data.unpaid_overdue_between).to.be.true;",
									"                        });",
									"",
									"                        // unpaid_overdue_over",
									"                        pm.test(\"nothing happen unpaid_overdue_over\", function () {",
									"                            pm.expect(unpaid_account_receivable.unpaid_overdue_over == old_data.unpaid_overdue_over).to.be.true;",
									"                        });",
									"                        break;",
									"                    case \"overdue_between\":",
									"                        // unpaid_due",
									"                        pm.test(\"nothing happen unpaid_due\", function () {",
									"                            pm.expect(unpaid_account_receivable.unpaid_due == old_data.unpaid_due).to.be.true;",
									"                        });",
									"",
									"                        // unpaid_overdue_less",
									"                        pm.test(\"nothing happen unpaid_overdue_less\", function () {",
									"                            pm.expect(unpaid_account_receivable.unpaid_overdue_less == old_data.unpaid_overdue_less).to.be.true;",
									"                        });",
									"",
									"                        // unpaid_overdue_between",
									"                        pm.test(\"unpaid_overdue_between updadte \" + exchange_amount, function () {",
									"                            console.log(\"old: \" + old_data.unpaid_overdue_between);",
									"                            console.log(\"new: \" + unpaid_account_receivable.unpaid_overdue_between);",
									"                            pm.expect(unpaid_account_receivable.unpaid_overdue_between.toFixed(2) == (old_data.unpaid_overdue_between - exchange_amount).toFixed(2)).to.be.true;",
									"                        });",
									"",
									"                        // unpaid_overdue_over",
									"                        pm.test(\"nothing happen unpaid_overdue_over\", function () {",
									"                            pm.expect(unpaid_account_receivable.unpaid_overdue_over == old_data.unpaid_overdue_over).to.be.true;",
									"                        });",
									"                        break;",
									"                    case \"overdue_over\":",
									"                        // unpaid_due",
									"                        pm.test(\"nothing happen unpaid_due\", function () {",
									"                            pm.expect(unpaid_account_receivable.unpaid_due == old_data.unpaid_due).to.be.true;",
									"                        });",
									"",
									"                        // unpaid_overdue_less",
									"                        pm.test(\"nothing happen unpaid_overdue_less\", function () {",
									"                            pm.expect(unpaid_account_receivable.unpaid_overdue_less == old_data.unpaid_overdue_less).to.be.true;",
									"                        });",
									"",
									"                        // unpaid_overdue_between",
									"                        pm.test(\"nothing happen unpaid_overdue_between\", function () {",
									"                            pm.expect(unpaid_account_receivable.unpaid_overdue_between == old_data.unpaid_overdue_between).to.be.true;",
									"                        });",
									"",
									"                        // unpaid_overdue_over",
									"                        pm.test(\"unpaid_overdue_over update \" + exchange_amount, function () {",
									"                            console.log(\"old: \" + old_data.unpaid_overdue_over);",
									"                            console.log(\"new: \" + unpaid_account_receivable.unpaid_overdue_over);",
									"                            pm.expect(unpaid_account_receivable.unpaid_overdue_over.toFixed(2) == (old_data.unpaid_overdue_over - exchange_amount).toFixed(2)).to.be.true;",
									"                        });",
									"                        break;",
									"                    default:",
									"                        pm.test(\"Missing due type\", function () {",
									"                            pm.expect(false).to.be.true;",
									"                        });",
									"                        break;",
									"                }",
									"            } else {",
									"                switch(due_type_before){",
									"                    case \"undue\":",
									"                        // unpaid_due",
									"                        pm.test(\"unpaid_due increase \" + tnx_edit_obj.amount, function () {",
									"                            console.log(\"old: \" + old_data.unpaid_due);",
									"                            console.log(\"expected: \" + (old_data.unpaid_due + tnx_edit_obj.amount));",
									"                            console.log(\"new: \" + unpaid_account_receivable.unpaid_due);",
									"                            pm.expect(unpaid_account_receivable.unpaid_due.toFixed(2) == (old_data.unpaid_due + tnx_edit_obj.amount).toFixed(2)).to.be.true;",
									"                        });",
									"                        break;",
									"                    case \"overdue_less\":",
									"                        // unpaid_overdue_less",
									"                        pm.test(\"unpaid_overdue_less increase \" + tnx_edit_obj.amount, function () {",
									"                            console.log(\"old: \" + old_data.unpaid_overdue_less);",
									"                            console.log(\"new: \" + unpaid_account_receivable.unpaid_overdue_less);",
									"                            pm.expect(unpaid_account_receivable.unpaid_overdue_less.toFixed(2) == (old_data.unpaid_overdue_less + tnx_edit_obj.amount).toFixed(2)).to.be.true;",
									"                        });",
									"                        break;",
									"                    case \"overdue_between\":",
									"                        // unpaid_overdue_between",
									"                        pm.test(\"unpaid_overdue_between increase \" + tnx_edit_obj.amount, function () {",
									"                            console.log(\"old: \" + old_data.unpaid_overdue_between);",
									"                            console.log(\"new: \" + unpaid_account_receivable.unpaid_overdue_between);",
									"                            pm.expect(unpaid_account_receivable.unpaid_overdue_between.toFixed(2) == (old_data.unpaid_overdue_between + tnx_edit_obj.amount).toFixed(2)).to.be.true;",
									"                        });",
									"                        break;",
									"                    case \"overdue_over\":",
									"                        // unpaid_overdue_over",
									"                        pm.test(\"unpaid_overdue_over increase \" + tnx_edit_obj.amount, function () {",
									"                            console.log(\"old: \" + old_data.unpaid_overdue_over);",
									"                            console.log(\"new: \" + unpaid_account_receivable.unpaid_overdue_over);",
									"                            pm.expect(unpaid_account_receivable.unpaid_overdue_over.toFixed(2) == (old_data.unpaid_overdue_over + tnx_edit_obj.amount).toFixed(2)).to.be.true;",
									"                        });",
									"                        break;",
									"                    default:",
									"                        pm.test(\"Missing due type\", function () {",
									"                            pm.expect(false).to.be.true;",
									"                        });",
									"                        break;",
									"                }",
									"",
									"                switch(due_type_after){",
									"                    case \"undue\":",
									"                        // unpaid_due",
									"                        pm.test(\"unpaid_due decrease \" + tnx_obj.amount, function () {",
									"                            console.log(\"old: \" + old_data.unpaid_due);",
									"                            console.log(\"expected: \" + (old_data.unpaid_due - tnx_obj.amount));",
									"                            console.log(\"new: \" + unpaid_account_receivable.unpaid_due);",
									"                            pm.expect(unpaid_account_receivable.unpaid_due.toFixed(2) == (old_data.unpaid_due - tnx_obj.amount).toFixed(2)).to.be.true;",
									"                        });",
									"                        break;",
									"                    case \"overdue_less\":",
									"                        // unpaid_overdue_less",
									"                        pm.test(\"unpaid_overdue_less decrease \" + tnx_obj.amount, function () {",
									"                            console.log(\"old: \" + old_data.unpaid_overdue_less);",
									"                            console.log(\"new: \" + unpaid_account_receivable.unpaid_overdue_less);",
									"                            pm.expect(unpaid_account_receivable.unpaid_overdue_less.toFixed(2) == (old_data.unpaid_overdue_less - tnx_obj.amount).toFixed(2)).to.be.true;",
									"                        });",
									"                        break;",
									"                    case \"overdue_between\":",
									"                        // unpaid_overdue_between",
									"                        pm.test(\"unpaid_overdue_between decrease \" + tnx_obj.amount, function () {",
									"                            console.log(\"old: \" + old_data.unpaid_overdue_between);",
									"                            console.log(\"new: \" + unpaid_account_receivable.unpaid_overdue_between);",
									"                            pm.expect(unpaid_account_receivable.unpaid_overdue_between.toFixed(2) == (old_data.unpaid_overdue_between - tnx_obj.amount).toFixed(2)).to.be.true;",
									"                        });",
									"                        break;",
									"                    case \"overdue_over\":",
									"                        // unpaid_overdue_over",
									"                        pm.test(\"unpaid_overdue_over decrease \" + tnx_obj.amount, function () {",
									"                            console.log(\"old: \" + old_data.unpaid_overdue_over);",
									"                            console.log(\"new: \" + unpaid_account_receivable.unpaid_overdue_over);",
									"                            pm.expect(unpaid_account_receivable.unpaid_overdue_over.toFixed(2) == (old_data.unpaid_overdue_over - tnx_obj.amount).toFixed(2)).to.be.true;",
									"                        });",
									"                        break;",
									"                    default:",
									"                        pm.test(\"Missing due type\", function () {",
									"                            pm.expect(false).to.be.true;",
									"                        });",
									"                        break;",
									"                }",
									"            }",
									"",
									"            postman.setNextRequest(\"get_report_account_receivable_customer\"); //get_report_account_receivable_customer",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get report account receivable unpaid, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"branch_id\": {{C-business_id}},\n    \"due_days\": 30\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finan_base_url}}/finan-ledger/api/v1/report/account-receivable-card-unpaid",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"report",
								"account-receivable-card-unpaid"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_report_account_receivable_customer",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"if(testcase != 2){",
									"    // timeout 2s to sync elastic search",
									"    setTimeout(function(){}, 2000);",
									"}",
									"",
									"let page = pm.environment.get(\"C-page\");",
									"",
									"if(!page){",
									"    page = 1;",
									"    pm.environment.set(\"C-page\",page);",
									"",
									"    let page_size = 50;",
									"    pm.environment.set(\"C-page_size\",page_size);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = JSON.parse(responseBody);",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let total_pages = jsData.meta.total_pages;",
									"    let page = pm.environment.get(\"C-page\");",
									"",
									"    let list_report_customer, old_list_report_customer;",
									"    switch(testcase){",
									"        case 2:",
									"            list_report_customer = pm.environment.get(\"C-list_report_customer\");",
									"            if(!list_report_customer){",
									"                list_report_customer = [];",
									"            }",
									"            break;",
									"        case 4: case 6:",
									"            old_list_report_customer = pm.environment.get(\"C-old_list_report_customer\");",
									"            if(!old_list_report_customer){",
									"                old_list_report_customer = pm.environment.get(\"C-list_report_customer\");",
									"                pm.environment.unset(\"C-list_report_customer\");",
									"                pm.environment.set(\"C-old_list_report_customer\",old_list_report_customer);",
									"            }",
									"",
									"            list_report_customer = pm.environment.get(\"C-list_report_customer\");",
									"            if(!list_report_customer){",
									"                list_report_customer = [];",
									"            }",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow\");",
									"            break;",
									"    }",
									"",
									"    for(let item in jsData.data){",
									"        list_report_customer[list_report_customer.length] = {",
									"            \"contact_id\":jsData.data[item].contact_id,",
									"            \"unpaid_total\":jsData.data[item].unpaid_total,",
									"            \"unpaid_due\":jsData.data[item].unpaid_due,",
									"            \"unpaid_overdue_less\":jsData.data[item].unpaid_overdue_less,",
									"            \"unpaid_overdue_between\":jsData.data[item].unpaid_overdue_between,",
									"            \"unpaid_overdue_over\":jsData.data[item].unpaid_overdue_over,",
									"            \"full_count\":jsData.data[item].full_count,",
									"            \"contact_name\":jsData.data[item].contact_info.contact_name,",
									"            \"contact_phone\":jsData.data[item].contact_info.contact_phone",
									"        }",
									"    }",
									"    pm.environment.set(\"C-list_report_customer\",list_report_customer);",
									"",
									"    if(page >= total_pages){",
									"        // must clear page & page_size",
									"        pm.environment.unset(\"C-page\");",
									"        pm.environment.unset(\"C-page_size\");",
									"",
									"        let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"        let tnx_edit_obj = pm.environment.get(\"C-tnx_edit_obj\");",
									"        let isFound = false, isFoundBefore = false, isFoundAfter = false;",
									"        let invoice_after_obj = pm.environment.get(\"C-invoice_after_obj\");",
									"        let invoice_before_edit = pm.environment.get(\"C-invoice_before_edit\");",
									"        let contact_before_edit = pm.environment.get(\"C-contact_before_edit\");",
									"        let contact_after_edit = pm.environment.get(\"C-contact_after_edit\");",
									"        switch(testcase){",
									"            case 2:",
									"                pm.test(\"Got all record! \" + list_report_customer.length, function () {",
									"                    pm.expect(list_report_customer.length > 0).to.be.true;",
									"                });",
									"",
									"                contact_before_edit = null;",
									"                contact_after_edit = null;",
									"                for(let i in list_report_customer){",
									"                    if(list_report_customer[i].contact_id == invoice_after_obj.contact_id){",
									"                        contact_after_edit = list_report_customer[i];",
									"                    } else if (list_report_customer[i].contact_id == invoice_before_edit.contact_id){",
									"                        contact_before_edit = list_report_customer[i];",
									"                    }",
									"                }",
									"                if(contact_before_edit == null){",
									"                    contact_before_edit = {",
									"                        \"contact_id\": invoice_before_edit.contact_id,",
									"                        \"system_code\": \"\",",
									"                        \"entry_code\": \"\",",
									"                        \"account_id\": \"\",",
									"                        \"status\": \"\",",
									"                        \"unpaid_total\": 0,",
									"                        \"unpaid_due\": 0,",
									"                        \"unpaid_overdue_less\": 0,",
									"                        \"unpaid_overdue_between\": 0,",
									"                        \"unpaid_overdue_over\": 0,",
									"                        \"full_count\": list_report_customer.length,",
									"                        \"contact_info\": null",
									"                    }",
									"                }",
									"                if(contact_after_edit == null){",
									"                    contact_after_edit = {",
									"                        \"contact_id\": invoice_after_obj.contact_id,",
									"                        \"system_code\": \"\",",
									"                        \"entry_code\": \"\",",
									"                        \"account_id\": \"\",",
									"                        \"status\": \"\",",
									"                        \"unpaid_total\": 0,",
									"                        \"unpaid_due\": 0,",
									"                        \"unpaid_overdue_less\": 0,",
									"                        \"unpaid_overdue_between\": 0,",
									"                        \"unpaid_overdue_over\": 0,",
									"                        \"full_count\": list_report_customer.length,",
									"                        \"contact_info\": null",
									"                    }",
									"                }",
									"                pm.environment.set(\"C-contact_after_edit\",contact_after_edit);",
									"                pm.environment.set(\"C-contact_before_edit\",contact_before_edit);",
									"",
									"                postman.setNextRequest(\"get_report_account_receivable_invoice\"); // get_report_account_receivable_invoice",
									"                break;",
									"            case 4:",
									"                /**",
									"                 * if cả 2 invoice trước và sau edit cùng thuộc 1 customer => thay đổi theo exchange_amount",
									"                 * else ",
									"                 */",
									"                pm.test(\"Nothing happen with total record\", function () {",
									"                    pm.expect(list_report_customer.length == old_list_report_customer.length).to.be.true;",
									"                });",
									"",
									"                let due_type_after = pm.environment.get(\"C-due_type_after\");",
									"                let due_type_before = pm.environment.get(\"C-due_type_before\");",
									"                let exchange_amount = pm.environment.get(\"C-exchange_amount\");",
									"                if(contact_after_edit.contact_id == contact_before_edit.contact_id){",
									"                    for(let i in list_report_customer){",
									"                        if(list_report_customer[i].contact_id == contact_before_edit.contact_id){",
									"                            isFound = true;",
									"                            console.log(\"Found \" + list_report_customer[i].contact_name + ' - ' + list_report_customer[i].contact_phone);",
									"                            ",
									"                            pm.test(\"unpaid_total update \" + exchange_amount, function () {",
									"                                console.log(\"old: \" + contact_before_edit.unpaid_total);",
									"                                console.log(\"new: \" + list_report_customer[i].unpaid_total);",
									"                                pm.expect(list_report_customer[i].unpaid_total == (contact_before_edit.unpaid_total + exchange_amount).toFixed(2)).to.be.true;",
									"                            });",
									"",
									"                            switch(due_type_before){",
									"                                case \"undue\":",
									"                                    // unpaid_due",
									"                                    pm.test(\"unpaid_due update \" + exchange_amount, function () {",
									"                                        console.log(\"old: \" + contact_before_edit.unpaid_due);",
									"                                        console.log(\"new: \" + list_report_customer[i].unpaid_due);",
									"                                        pm.expect(list_report_customer[i].unpaid_due == (contact_before_edit.unpaid_due + exchange_amount).toFixed(2)).to.be.true;",
									"                                    });",
									"",
									"                                    // unpaid_overdue_less",
									"                                    pm.test(\"nothing happen unpaid_overdue_less\", function () {",
									"                                        pm.expect(list_report_customer[i].unpaid_overdue_less == contact_before_edit.unpaid_overdue_less).to.be.true;",
									"                                    });",
									"",
									"                                    // unpaid_overdue_between",
									"                                    pm.test(\"nothing happen unpaid_overdue_between\", function () {",
									"                                        pm.expect(list_report_customer[i].unpaid_overdue_between == contact_before_edit.unpaid_overdue_between).to.be.true;",
									"                                    });",
									"",
									"                                    // unpaid_overdue_over",
									"                                    pm.test(\"nothing happen unpaid_overdue_over\", function () {",
									"                                        pm.expect(list_report_customer[i].unpaid_overdue_over == contact_before_edit.unpaid_overdue_over).to.be.true;",
									"                                    });",
									"                                    break;",
									"                                case \"overdue_less\":",
									"                                    // unpaid_due",
									"                                    pm.test(\"nothing happen unpaid_due\", function () {",
									"                                        pm.expect(list_report_customer[i].unpaid_due == contact_before_edit.unpaid_due).to.be.true;",
									"                                    });",
									"",
									"                                    // unpaid_overdue_less",
									"                                    pm.test(\"unpaid_overdue_less decrease \" + exchange_amount, function () {",
									"                                        console.log(\"old: \" + contact_before_edit.unpaid_overdue_less);",
									"                                        console.log(\"new: \" + list_report_customer[i].unpaid_overdue_less);",
									"                                        pm.expect(list_report_customer[i].unpaid_overdue_less == (contact_before_edit.unpaid_overdue_less + exchange_amount).toFixed(2)).to.be.true;",
									"                                    });",
									"",
									"                                    // unpaid_overdue_between",
									"                                    pm.test(\"nothing happen unpaid_overdue_between\", function () {",
									"                                        pm.expect(list_report_customer[i].unpaid_overdue_between == contact_before_edit.unpaid_overdue_between).to.be.true;",
									"                                    });",
									"",
									"                                    // unpaid_overdue_over",
									"                                    pm.test(\"nothing happen unpaid_overdue_over\", function () {",
									"                                        pm.expect(list_report_customer[i].unpaid_overdue_over == contact_before_edit.unpaid_overdue_over).to.be.true;",
									"                                    });",
									"                                    break;",
									"                                case \"overdue_between\":",
									"                                    // unpaid_due",
									"                                    pm.test(\"nothing happen unpaid_due\", function () {",
									"                                        pm.expect(list_report_customer[i].unpaid_due == contact_before_edit.unpaid_due).to.be.true;",
									"                                    });",
									"",
									"                                    // unpaid_overdue_less",
									"                                    pm.test(\"nothing happen unpaid_overdue_less\", function () {",
									"                                        pm.expect(list_report_customer[i].unpaid_overdue_less == contact_before_edit.unpaid_overdue_less).to.be.true;",
									"                                    });",
									"",
									"                                    // unpaid_overdue_between",
									"                                    pm.test(\"unpaid_overdue_between decrease \" + exchange_amount, function () {",
									"                                        console.log(\"old: \" + contact_before_edit.unpaid_overdue_between);",
									"                                        console.log(\"new: \" + list_report_customer[i].unpaid_overdue_between);",
									"                                        pm.expect(list_report_customer[i].unpaid_overdue_between == (contact_before_edit.unpaid_overdue_between + exchange_amount).toFixed(2)).to.be.true;",
									"                                    });",
									"",
									"                                    // unpaid_overdue_over",
									"                                    pm.test(\"nothing happen unpaid_overdue_over\", function () {",
									"                                        pm.expect(list_report_customer[i].unpaid_overdue_over == contact_before_edit.unpaid_overdue_over).to.be.true;",
									"                                    });",
									"                                    break;",
									"                                case \"overdue_over\":",
									"                                    // unpaid_due",
									"                                    pm.test(\"nothing happen unpaid_due\", function () {",
									"                                        pm.expect(list_report_customer[i].unpaid_due == contact_before_edit.unpaid_due).to.be.true;",
									"                                    });",
									"",
									"                                    // unpaid_overdue_less",
									"                                    pm.test(\"nothing happen unpaid_overdue_less\", function () {",
									"                                        pm.expect(list_report_customer[i].unpaid_overdue_less == contact_before_edit.unpaid_overdue_less).to.be.true;",
									"                                    });",
									"",
									"                                    // unpaid_overdue_between",
									"                                    pm.test(\"nothing happen unpaid_overdue_between\", function () {",
									"                                        pm.expect(list_report_customer[i].unpaid_overdue_between == contact_before_edit.unpaid_overdue_between).to.be.true;",
									"                                    });",
									"",
									"                                    // unpaid_overdue_over",
									"                                    pm.test(\"unpaid_overdue_over decrease \" + exchange_amount, function () {",
									"                                        console.log(\"old: \" + contact_before_edit.unpaid_overdue_over);",
									"                                        console.log(\"new: \" + list_report_customer[i].unpaid_overdue_over);",
									"                                        pm.expect(list_report_customer[i].unpaid_overdue_over == (contact_before_edit.unpaid_overdue_over + exchange_amount).toFixed(2)).to.be.true;",
									"                                    });",
									"                                    break;",
									"                                default:",
									"                                    pm.test(\"Missing due type\", function () {",
									"                                        pm.expect(false).to.be.true;",
									"                                    });",
									"                                    break;",
									"                            }",
									"                            break;",
									"                        }",
									"                    }",
									"",
									"                    pm.test(\"Found customer\", function () {",
									"                        pm.expect(isFound).to.be.true;",
									"                    });",
									"                } else {",
									"                    for(let i in list_report_customer){",
									"                        if(list_report_customer[i].contact_id == contact_before_edit.contact_id){",
									"                            isFoundBefore = true;",
									"                            console.log(\"Found \" + list_report_customer[i].contact_name + ' - ' + list_report_customer[i].contact_phone);",
									"                            ",
									"                            pm.test(\"unpaid_total increase \" + tnx_edit_obj.amount, function () {",
									"                                console.log(\"old: \" + contact_before_edit.unpaid_total);",
									"                                console.log(\"new: \" + list_report_customer[i].unpaid_total);",
									"                                pm.expect(list_report_customer[i].unpaid_total == (contact_before_edit.unpaid_total + tnx_edit_obj.amount).toFixed(2)).to.be.true;",
									"                            });",
									"",
									"                            switch(due_type_before){",
									"                                case \"undue\":",
									"                                    // unpaid_due",
									"                                    pm.test(\"unpaid_due increase \" + tnx_edit_obj.amount, function () {",
									"                                        console.log(\"old: \" + contact_before_edit.unpaid_due);",
									"                                        console.log(\"new: \" + list_report_customer[i].unpaid_due);",
									"                                        pm.expect(list_report_customer[i].unpaid_due == (contact_before_edit.unpaid_due + tnx_edit_obj.amount).toFixed(2)).to.be.true;",
									"                                    });",
									"                                    break;",
									"                                case \"overdue_less\":",
									"                                    // unpaid_overdue_less",
									"                                    pm.test(\"unpaid_overdue_less increase \" + tnx_edit_obj.amount, function () {",
									"                                        console.log(\"old: \" + contact_before_edit.unpaid_overdue_less);",
									"                                        console.log(\"new: \" + list_report_customer[i].unpaid_overdue_less);",
									"                                        pm.expect(list_report_customer[i].unpaid_overdue_less == (contact_before_edit.unpaid_overdue_less + tnx_edit_obj.amount).toFixed(2)).to.be.true;",
									"                                    });",
									"                                    break;",
									"                                case \"overdue_between\":",
									"                                    // unpaid_overdue_between",
									"                                    pm.test(\"unpaid_overdue_between increase \" + tnx_edit_obj.amount, function () {",
									"                                        console.log(\"old: \" + contact_before_edit.unpaid_overdue_between);",
									"                                        console.log(\"new: \" + list_report_customer[i].unpaid_overdue_between);",
									"                                        pm.expect(list_report_customer[i].unpaid_overdue_between == (contact_before_edit.unpaid_overdue_between + tnx_edit_obj.amount).toFixed(2)).to.be.true;",
									"                                    });",
									"                                    break;",
									"                                case \"overdue_over\":",
									"                                    // unpaid_overdue_over",
									"                                    pm.test(\"unpaid_overdue_over increase \" + tnx_edit_obj.amount, function () {",
									"                                        console.log(\"old: \" + contact_before_edit.unpaid_overdue_over);",
									"                                        console.log(\"new: \" + list_report_customer[i].unpaid_overdue_over);",
									"                                        pm.expect(list_report_customer[i].unpaid_overdue_over == (contact_before_edit.unpaid_overdue_over + tnx_edit_obj.amount).toFixed(2)).to.be.true;",
									"                                    });",
									"                                    break;",
									"                                default:",
									"                                    pm.test(\"Missing due type\", function () {",
									"                                        pm.expect(false).to.be.true;",
									"                                    });",
									"                                    break;",
									"                            }",
									"                            break;",
									"                        }",
									"",
									"                        if(list_report_customer[i].contact_id == contact_after_edit.contact_id){",
									"                            isFoundAfter = true;",
									"                            console.log(\"Found \" + list_report_customer[i].contact_name + ' - ' + list_report_customer[i].contact_phone);",
									"                            ",
									"                            pm.test(\"unpaid_total decrease \" + tnx_obj.amount, function () {",
									"                                console.log(\"old: \" + contact_before_edit.unpaid_total);",
									"                                console.log(\"new: \" + list_report_customer[i].unpaid_total);",
									"                                pm.expect(list_report_customer[i].unpaid_total == (contact_before_edit.unpaid_total - tnx_obj.amount).toFixed(2)).to.be.true;",
									"                            });",
									"",
									"                            switch(due_type_after){",
									"                                case \"undue\":",
									"                                    // unpaid_due",
									"                                    pm.test(\"unpaid_due decrease \" + tnx_obj.amount, function () {",
									"                                        console.log(\"old: \" + contact_before_edit.unpaid_due);",
									"                                        console.log(\"new: \" + list_report_customer[i].unpaid_due);",
									"                                        pm.expect(list_report_customer[i].unpaid_due == (contact_before_edit.unpaid_due - tnx_obj.amount).toFixed(2)).to.be.true;",
									"                                    });",
									"                                    break;",
									"                                case \"overdue_less\":",
									"                                    // unpaid_overdue_less",
									"                                    pm.test(\"unpaid_overdue_less decrease \" + tnx_obj.amount, function () {",
									"                                        console.log(\"old: \" + contact_before_edit.unpaid_overdue_less);",
									"                                        console.log(\"new: \" + list_report_customer[i].unpaid_overdue_less);",
									"                                        pm.expect(list_report_customer[i].unpaid_overdue_less == (contact_before_edit.unpaid_overdue_less - tnx_obj.amount).toFixed(2)).to.be.true;",
									"                                    });",
									"                                    break;",
									"                                case \"overdue_between\":",
									"                                    // unpaid_overdue_between",
									"                                    pm.test(\"unpaid_overdue_between decrease \" + tnx_obj.amount, function () {",
									"                                        console.log(\"old: \" + contact_before_edit.unpaid_overdue_between);",
									"                                        console.log(\"new: \" + list_report_customer[i].unpaid_overdue_between);",
									"                                        pm.expect(list_report_customer[i].unpaid_overdue_between == (contact_before_edit.unpaid_overdue_between - tnx_obj.amount).toFixed(2)).to.be.true;",
									"                                    });",
									"                                    break;",
									"                                case \"overdue_over\":",
									"                                    // unpaid_overdue_over",
									"                                    pm.test(\"unpaid_overdue_over decrease \" + tnx_obj.amount, function () {",
									"                                        console.log(\"old: \" + contact_before_edit.unpaid_overdue_over);",
									"                                        console.log(\"new: \" + list_report_customer[i].unpaid_overdue_over);",
									"                                        pm.expect(list_report_customer[i].unpaid_overdue_over == (contact_before_edit.unpaid_overdue_over - tnx_obj.amount).toFixed(2)).to.be.true;",
									"                                    });",
									"                                    break;",
									"                                default:",
									"                                    pm.test(\"Missing due type\", function () {",
									"                                        pm.expect(false).to.be.true;",
									"                                    });",
									"                                    break;",
									"                            }",
									"                            break;",
									"                        }",
									"                    }",
									"",
									"                    pm.test(\"Found customer before\", function () {",
									"                        pm.expect(isFoundBefore).to.be.true;",
									"                    });",
									"",
									"                    pm.test(\"Found customer after\", function () {",
									"                        pm.expect(isFoundAfter).to.be.true;",
									"                    });",
									"                }",
									"",
									"                postman.setNextRequest(\"get_report_account_receivable_invoice\"); // get_report_account_receivable_invoice",
									"                break;",
									"            default:",
									"                console.log(\"Missing flow, end test\");",
									"                postman.setNextRequest(null);",
									"                break;",
									"        }",
									"    } else {",
									"        page++;",
									"        pm.environment.set(\"C-page\",page);",
									"",
									"        console.log(\"view next page (\" + page + \") to get more product\");",
									"        postman.setNextRequest(\"get_report_account_receivable_customer\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get list product, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"branch_id\": {{C-business_id}},\n    \"due_days\": 30,\n    \"page\":{{C-page}},\n    \"page_size\":{{C-page_size}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finan_base_url}}/finan-ledger/api/v1/report/account-receivable-customer-unpaid",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"report",
								"account-receivable-customer-unpaid"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_report_account_receivable_invoice",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let page = pm.environment.get(\"C-page\");",
									"",
									"if(!page){",
									"    page = 1;",
									"    pm.environment.set(\"C-page\",page);",
									"",
									"    let page_size = 200;",
									"    pm.environment.set(\"C-page_size\",page_size);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = JSON.parse(responseBody);",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let total_pages = jsData.meta.total_pages;",
									"    let page = pm.environment.get(\"C-page\");",
									"",
									"    let list_report_invoice, old_list_report_invoice;",
									"    switch(testcase){",
									"        case 2:",
									"            list_report_invoice = pm.environment.get(\"C-list_report_invoice\");",
									"            if(!list_report_invoice){",
									"                list_report_invoice = [];",
									"            }",
									"            break;",
									"        case 4: case 6:",
									"            old_list_report_invoice = pm.environment.get(\"C-old_list_report_invoice\");",
									"            if(!old_list_report_invoice){",
									"                old_list_report_invoice = pm.environment.get(\"C-list_report_invoice\");",
									"                pm.environment.unset(\"C-list_report_invoice\");",
									"                pm.environment.set(\"C-old_list_report_invoice\",old_list_report_invoice);",
									"            }",
									"",
									"            list_report_invoice = pm.environment.get(\"C-list_report_invoice\");",
									"            if(!list_report_invoice){",
									"                list_report_invoice = [];",
									"            }",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow\");",
									"            break;",
									"    }",
									"",
									"    for(let item in jsData.data){",
									"        list_report_invoice[list_report_invoice.length] = {",
									"            \"invoice_id\":jsData.data[item].id,",
									"            \"entry_code\":jsData.data[item].entry_code,",
									"            \"contact_id\":jsData.data[item].contact_id,",
									"            \"contact_name\":jsData.data[item].contact_info.contact_name,",
									"            \"contact_phone\":jsData.data[item].contact_info.contact_phone,",
									"            \"invoice_created_date\":jsData.data[item].invoice_created_date,",
									"            \"invoice_due_date\":jsData.data[item].invoice_due_date,",
									"            \"unpaid_total\":jsData.data[item].unpaid_total,",
									"            \"unpaid_due\":jsData.data[item].unpaid_due,",
									"            \"unpaid_overdue_less\":jsData.data[item].unpaid_overdue_less,",
									"            \"unpaid_overdue_between\":jsData.data[item].unpaid_overdue_between,",
									"            \"unpaid_overdue_over\":jsData.data[item].unpaid_overdue_over",
									"        }",
									"    }",
									"    pm.environment.set(\"C-list_report_invoice\",list_report_invoice);",
									"",
									"    if(page >= total_pages){",
									"        // must clear page & page_size",
									"        pm.environment.unset(\"C-page\");",
									"        pm.environment.unset(\"C-page_size\");",
									"",
									"        let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"        let tnx_edit_obj = pm.environment.get(\"C-tnx_edit_obj\");",
									"        let isFoundBefore = false, isFoundAfter = false;",
									"        let invoice_after_obj = pm.environment.get(\"C-invoice_after_obj\");",
									"        let invoice_before_edit = pm.environment.get(\"C-invoice_before_edit\");",
									"        switch(testcase){",
									"            case 2:",
									"                pm.test(\"Got all record! \" + list_report_invoice.length, function () {",
									"                    pm.expect(list_report_invoice.length > 0).to.be.true;",
									"                });",
									"",
									"                ",
									"                for(let i in list_report_invoice){",
									"                    if(list_report_invoice[i].invoice_id == invoice_after_obj.invoice_id){",
									"                        isFoundBefore = true;",
									"                    } else if (list_report_invoice[i].invoice_id == invoice_before_edit.id){",
									"                        isFoundAfter = true;",
									"                    }",
									"                }",
									"                ",
									"                if(invoice_after_obj.due_amount > 0){",
									"                    // phải tồn tại trong report",
									"                    pm.test(\"Found invoice after edit\", function () {",
									"                        pm.expect(isFoundBefore).to.be.true;",
									"                    });",
									"                } else {",
									"                    // ko có trong report",
									"                    pm.test(\"Not Found invoice after edit\", function () {",
									"                        pm.expect(isFoundBefore).to.be.false;",
									"                    });",
									"                }",
									"",
									"                if(invoice_before_edit.due_amount > 0){",
									"                    // phải tồn tại trong report",
									"                    pm.test(\"Found invoice before edit\", function () {",
									"                        pm.expect(isFoundAfter).to.be.true;",
									"                    });",
									"                } else {",
									"                    // ko có trong report",
									"                    pm.test(\"Not Found invoice before edit\", function () {",
									"                        pm.expect(isFoundAfter).to.be.false;",
									"                    });",
									"                }",
									"",
									"                postman.setNextRequest(\"report_invoice_overdue\"); // report_invoice_overdue",
									"                break;",
									"            case 4:",
									"                let record_before_obj = null, record_after_obj = null;",
									"                for(let i in old_list_report_invoice){",
									"                    if(old_list_report_invoice[i].invoice_id == invoice_after_obj.invoice_id){",
									"                        record_after_obj = old_list_report_invoice[i];",
									"                    } else if (old_list_report_invoice[i].invoice_id == invoice_before_edit.id){",
									"                        record_before_obj = old_list_report_invoice[i];",
									"                    }",
									"                }",
									"",
									"                let due_type_after = pm.environment.get(\"C-due_type_after\");",
									"                let due_type_before = pm.environment.get(\"C-due_type_before\");",
									"                for(let i in list_report_invoice){",
									"                    // invoice cũ",
									"                    if(list_report_invoice[i].invoice_id == record_before_obj.invoice_id){",
									"                        isFoundBefore = true;",
									"                        console.log(\"Found \" + list_report_invoice[i].entry_code + ' of ' + list_report_invoice[i].contact_name);",
									"                        ",
									"                        pm.test(\"unpaid_total increase \" + tnx_edit_obj.amount, function () {",
									"                            console.log(\"act: \" + list_report_invoice[i].unpaid_total);",
									"                            pm.expect(list_report_invoice[i].unpaid_total == (record_obj.unpaid_total + tnx_edit_obj.amount).toFixed(2)).to.be.true;",
									"                        });",
									"",
									"                        switch(due_type_before){",
									"                            case \"undue\":",
									"                                // unpaid_due",
									"                                pm.test(\"unpaid_due increase \" + tnx_edit_obj.amount, function () {",
									"                                    console.log(\"old: \" + record_obj.unpaid_due);",
									"                                    console.log(\"act: \" + list_report_invoice[i].unpaid_due);",
									"                                    pm.expect(list_report_invoice[i].unpaid_due == (record_obj.unpaid_due + tnx_edit_obj.amount).toFixed(2)).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_less",
									"                                pm.test(\"unpaid_overdue_less == 0\", function () {",
									"                                    pm.expect(list_report_invoice[i].unpaid_overdue_less == 0).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_between",
									"                                pm.test(\"unpaid_overdue_between == 0\", function () {",
									"                                    pm.expect(list_report_invoice[i].unpaid_overdue_between == 0).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_over",
									"                                pm.test(\"unpaid_overdue_over == 0\", function () {",
									"                                    pm.expect(list_report_invoice[i].unpaid_overdue_over == 0).to.be.true;",
									"                                });",
									"                                break;",
									"                            case \"overdue_less\":",
									"                                // unpaid_due",
									"                                pm.test(\"unpaid_due == 0\", function () {",
									"                                    pm.expect(list_report_invoice[i].unpaid_due == 0).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_less",
									"                                pm.test(\"unpaid_overdue_less increase \" + tnx_edit_obj.amount, function () {",
									"                                    console.log(\"old: \" + record_obj.unpaid_overdue_less);",
									"                                    console.log(\"act: \" + list_report_invoice[i].unpaid_overdue_less);",
									"                                    pm.expect(list_report_invoice[i].unpaid_overdue_less == (record_obj.unpaid_overdue_less + tnx_edit_obj.amount).toFixed(2)).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_between",
									"                                pm.test(\"unpaid_overdue_between == 0\", function () {",
									"                                    pm.expect(list_report_invoice[i].unpaid_overdue_between == 0).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_over",
									"                                pm.test(\"unpaid_overdue_over == 0\", function () {",
									"                                    pm.expect(list_report_invoice[i].unpaid_overdue_over == 0).to.be.true;",
									"                                });",
									"                                break;",
									"                            case \"overdue_between\":",
									"                                // unpaid_due",
									"                                pm.test(\"unpaid_due == 0\", function () {",
									"                                    pm.expect(list_report_invoice[i].unpaid_due == 0).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_less",
									"                                pm.test(\"unpaid_overdue_less == 0\", function () {",
									"                                    pm.expect(list_report_invoice[i].unpaid_overdue_less == 0).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_between",
									"                                pm.test(\"unpaid_overdue_between increase \" + tnx_edit_obj.amount, function () {",
									"                                    console.log(\"old: \" + record_obj.unpaid_overdue_between);",
									"                                    console.log(\"act: \" + list_report_invoice[i].unpaid_overdue_between);",
									"                                    pm.expect(list_report_invoice[i].unpaid_overdue_between == (record_obj.unpaid_overdue_between + tnx_edit_obj.amount).toFixed(2)).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_over",
									"                                pm.test(\"unpaid_overdue_over == 0\", function () {",
									"                                    pm.expect(list_report_invoice[i].unpaid_overdue_over == 0).to.be.true;",
									"                                });",
									"                                break;",
									"                            case \"overdue_over\":",
									"                                // unpaid_due",
									"                                pm.test(\"unpaid_due == 0\", function () {",
									"                                    pm.expect(list_report_invoice[i].unpaid_due == 0).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_less",
									"                                pm.test(\"unpaid_overdue_less == 0\", function () {",
									"                                    pm.expect(list_report_invoice[i].unpaid_overdue_less == 0).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_between",
									"                                pm.test(\"unpaid_overdue_between == 0\", function () {",
									"                                    pm.expect(list_report_invoice[i].unpaid_overdue_between == 0).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_over",
									"                                pm.test(\"unpaid_overdue_over increase \" + tnx_edit_obj.amount, function () {",
									"                                    console.log(\"old: \" + record_obj.unpaid_overdue_over);",
									"                                    console.log(\"act: \" + list_report_invoice[i].unpaid_overdue_over);",
									"                                    pm.expect(list_report_invoice[i].unpaid_overdue_over == (record_obj.unpaid_overdue_over + tnx_edit_obj.amount).toFixed(2)).to.be.true;",
									"                                });",
									"                                break;",
									"                            default:",
									"                                pm.test(\"Missing due type\", function () {",
									"                                    pm.expect(false).to.be.true;",
									"                                });",
									"                                break;",
									"                        }",
									"                    }",
									"",
									"                    // invoice mới",
									"                    if(list_report_invoice[i].invoice_id == record_after_obj.invoice_id){",
									"                        isFoundAfter = true;",
									"                        console.log(\"Found \" + list_report_invoice[i].entry_code + ' of ' + list_report_invoice[i].contact_name);",
									"                        ",
									"                        pm.test(\"unpaid_total decrease \" + tnx_obj.amount, function () {",
									"                            console.log(\"act: \" + list_report_invoice[i].unpaid_total);",
									"                            pm.expect(list_report_invoice[i].unpaid_total == (record_obj.unpaid_total - tnx_obj.amount).toFixed(2)).to.be.true;",
									"                        });",
									"",
									"                        switch(due_type_after){",
									"                            case \"undue\":",
									"                                // unpaid_due",
									"                                pm.test(\"unpaid_due decrease \" + tnx_obj.amount, function () {",
									"                                    console.log(\"old: \" + record_obj.unpaid_due);",
									"                                    console.log(\"act: \" + list_report_invoice[i].unpaid_due);",
									"                                    pm.expect(list_report_invoice[i].unpaid_due == (record_obj.unpaid_due - tnx_obj.amount).toFixed(2)).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_less",
									"                                pm.test(\"unpaid_overdue_less == 0\", function () {",
									"                                    pm.expect(list_report_invoice[i].unpaid_overdue_less == 0).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_between",
									"                                pm.test(\"unpaid_overdue_between == 0\", function () {",
									"                                    pm.expect(list_report_invoice[i].unpaid_overdue_between == 0).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_over",
									"                                pm.test(\"unpaid_overdue_over == 0\", function () {",
									"                                    pm.expect(list_report_invoice[i].unpaid_overdue_over == 0).to.be.true;",
									"                                });",
									"                                break;",
									"                            case \"overdue_less\":",
									"                                // unpaid_due",
									"                                pm.test(\"unpaid_due == 0\", function () {",
									"                                    pm.expect(list_report_invoice[i].unpaid_due == 0).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_less",
									"                                pm.test(\"unpaid_overdue_less decrease \" + tnx_obj.amount, function () {",
									"                                    console.log(\"old: \" + record_obj.unpaid_overdue_less);",
									"                                    console.log(\"act: \" + list_report_invoice[i].unpaid_overdue_less);",
									"                                    pm.expect(list_report_invoice[i].unpaid_overdue_less == (record_obj.unpaid_overdue_less - tnx_obj.amount).toFixed(2)).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_between",
									"                                pm.test(\"unpaid_overdue_between == 0\", function () {",
									"                                    pm.expect(list_report_invoice[i].unpaid_overdue_between == 0).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_over",
									"                                pm.test(\"unpaid_overdue_over == 0\", function () {",
									"                                    pm.expect(list_report_invoice[i].unpaid_overdue_over == 0).to.be.true;",
									"                                });",
									"                                break;",
									"                            case \"overdue_between\":",
									"                                // unpaid_due",
									"                                pm.test(\"unpaid_due == 0\", function () {",
									"                                    pm.expect(list_report_invoice[i].unpaid_due == 0).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_less",
									"                                pm.test(\"unpaid_overdue_less == 0\", function () {",
									"                                    pm.expect(list_report_invoice[i].unpaid_overdue_less == 0).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_between",
									"                                pm.test(\"unpaid_overdue_between decrease \" + tnx_obj.amount, function () {",
									"                                    console.log(\"old: \" + record_obj.unpaid_overdue_between);",
									"                                    console.log(\"act: \" + list_report_invoice[i].unpaid_overdue_between);",
									"                                    pm.expect(list_report_invoice[i].unpaid_overdue_between == (record_obj.unpaid_overdue_between - tnx_obj.amount).toFixed(2)).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_over",
									"                                pm.test(\"unpaid_overdue_over == 0\", function () {",
									"                                    pm.expect(list_report_invoice[i].unpaid_overdue_over == 0).to.be.true;",
									"                                });",
									"                                break;",
									"                            case \"overdue_over\":",
									"                                // unpaid_due",
									"                                pm.test(\"unpaid_due == 0\", function () {",
									"                                    pm.expect(list_report_invoice[i].unpaid_due == 0).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_less",
									"                                pm.test(\"unpaid_overdue_less == 0\", function () {",
									"                                    pm.expect(list_report_invoice[i].unpaid_overdue_less == 0).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_between",
									"                                pm.test(\"unpaid_overdue_between == 0\", function () {",
									"                                    pm.expect(list_report_invoice[i].unpaid_overdue_between == 0).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_over",
									"                                pm.test(\"unpaid_overdue_over decrease \" + tnx_obj.amount, function () {",
									"                                    console.log(\"old: \" + record_obj.unpaid_overdue_over);",
									"                                    console.log(\"act: \" + list_report_invoice[i].unpaid_overdue_over);",
									"                                    pm.expect(list_report_invoice[i].unpaid_overdue_over == (record_obj.unpaid_overdue_over - tnx_obj.amount).toFixed(2)).to.be.true;",
									"                                });",
									"                                break;",
									"                            default:",
									"                                pm.test(\"Missing due type\", function () {",
									"                                    pm.expect(false).to.be.true;",
									"                                });",
									"                                break;",
									"                        }",
									"                    }",
									"",
									"                    if(isFoundAfter && isFoundBefore) break;",
									"                }",
									"",
									"                pm.test(\"Found before invoice\", function () {",
									"                    pm.expect(isFoundBefore).to.be.true;",
									"                });",
									"",
									"                pm.test(\"Found after invoice\", function () {",
									"                    pm.expect(isFoundAfter).to.be.true;",
									"                });",
									"",
									"                postman.setNextRequest(\"\"); // report_invoice_overdue",
									"                break;",
									"            default:",
									"                console.log(\"Missing flow, end test\");",
									"                postman.setNextRequest(null);",
									"                break;",
									"        }",
									"    } else {",
									"        page++;",
									"        pm.environment.set(\"C-page\",page);",
									"",
									"        console.log(\"view next page (\" + page + \") to get more product\");",
									"        postman.setNextRequest(\"get_report_account_receivable_invoice\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get list product, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"branch_id\": {{C-business_id}},\n    \"due_days\": 30,\n    \"page\": {{C-page}},\n    \"page_size\": {{C-page_size}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finan_base_url}}/finan-ledger/api/v1/report/account-receivable-invoice-unpaid",
							"host": [
								"{{finan_base_url}}"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"report",
								"account-receivable-invoice-unpaid"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.request.headers.add({",
							" key: \"authorization\",",
							" value: \"Bearer \" + pm.environment.get(\"C-userToken\")",
							"});",
							"",
							"pm.request.headers.add({",
							" key: \"Content-Type\",",
							" value: \"application/json\"",
							"});"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "home-report",
			"item": [
				{
					"name": "todo",
					"item": [
						{
							"name": "report_invoice_overdue",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"/**",
											" * Nếu invoice dc tạo ra là overdue => tăng lên 1, ngược lại thì ko tăng",
											" */",
											"",
											"let testcase = pm.environment.get(\"C-testcase\");",
											"console.log(\"Testcase: \" + testcase);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsData = pm.response.json();",
											"if(pm.response.code == 200){",
											"    let testcase = pm.environment.get(\"C-testcase\");",
											"    let total_number_overdue_invoice = null;",
											"    try {",
											"        total_number_overdue_invoice = jsData.data.total_number_overdue_invoice;",
											"    } catch {",
											"        console.log(\"Can't get data\");",
											"    }",
											"",
											"    switch(testcase){",
											"        case 2:",
											"            pm.test(\"Got total_number_overdue_invoice \" + total_number_overdue_invoice, function () {",
											"                pm.environment.set(\"C-total_number_overdue_invoice\",total_number_overdue_invoice);",
											"                pm.expect(total_number_overdue_invoice != null).to.be.true;",
											"            });",
											"",
											"            postman.setNextRequest(\"report_account_lifetime\"); //report_account_lifetime",
											"            break;",
											"        case 4:",
											"            // edit fully_paid => partial_paid có thể dẫn đến case overdue",
											"",
											"            postman.setNextRequest(\"report_account_lifetime\"); //report_account_lifetime",
											"            break;",
											"        default:",
											"            console.log(\"Missing flow, end test\");",
											"            postman.setNextRequest(null);",
											"            break;",
											"    }",
											"} else {",
											"    console.log(\"Can't get report account receivable unpaid, end test\",jsData);",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-location-timezone",
										"value": "UTC+07:00",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{C-userToken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"branch_id\": {{C-business_id}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{finan_base_url}}/finan-ledger/api/v1/report/to-do-overdue-invoice-lifetime",
									"host": [
										"{{finan_base_url}}"
									],
									"path": [
										"finan-ledger",
										"api",
										"v1",
										"report",
										"to-do-overdue-invoice-lifetime"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "account_balance",
					"item": [
						{
							"name": "report_account_lifetime",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsData = pm.response.json();",
											"if(pm.response.code == 200){",
											"    let testcase = pm.environment.get(\"C-testcase\");",
											"    let account_lifetime = null;",
											"    try {",
											"        account_lifetime = jsData;",
											"    } catch {",
											"        console.log(\"Can't get data\");",
											"    }",
											"",
											"    let old_account_lifetime = pm.environment.get(\"C-account_lifetime\");",
											"    switch(testcase){",
											"        case 2:",
											"            pm.test(\"Got account_lifetime \" + account_lifetime.sum_balance, function () {",
											"                pm.environment.set(\"C-account_lifetime\",account_lifetime);",
											"                pm.expect(account_lifetime != null).to.be.true;",
											"            });",
											"",
											"            // check data",
											"            let total_balance = 0;",
											"            for(let i in jsData.data){",
											"                total_balance += jsData.data[i].balance;",
											"            }",
											"            pm.test(\"Data correctly \" + total_balance, function () {",
											"                pm.expect(total_balance.toFixed(2) == jsData.sum_balance).to.be.true;",
											"            });",
											"",
											"            postman.setNextRequest(\"report_cash_flow_period\"); // report_cash_flow_period",
											"            break;",
											"        case 4: case 6:",
											"            /**",
											"             * - nếu tnx_obj.account_id (in - credit) tnx_obj.account_id (out - debit) trong list tăng lên => tăng tương ứng",
											"             * - ngược lại, name (remaining_accounts) sẽ tăng tương ứng",
											"            */",
											"            let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
											"            // sum_balance",
											"            console.log(\"old: \" + old_account_lifetime.sum_balance);",
											"            console.log(\"exp: \" + (old_account_lifetime.sum_balance + tnx_obj.amount));",
											"            console.log(\"act: \" + account_lifetime.sum_balance);",
											"            if(tnx_obj.txn_type == \"in\"){",
											"                // case tăng debit => tăng sum_balance",
											"                pm.test(\"sum_balance increase \" + tnx_obj.amount, function () {",
											"                    pm.expect(account_lifetime.sum_balance == old_account_lifetime.sum_balance + tnx_obj.amount).to.be.true;",
											"                });",
											"            } else {",
											"                // case tăng credit => giảm sum_balance",
											"                pm.test(\"sum_balance decrease \" + tnx_obj.amount, function () {",
											"                    pm.expect(account_lifetime.sum_balance == old_account_lifetime.sum_balance - tnx_obj.amount).to.be.true;",
											"                });",
											"            }",
											"",
											"            // data cũ",
											"            let account_obj = null;",
											"            for(let i = 0; i < old_account_lifetime.data.length; i++){",
											"                if(old_account_lifetime.data[i].id == tnx_obj.account_id){",
											"                    account_obj = old_account_lifetime.data[i];",
											"                    break;",
											"                }",
											"",
											"                if(i == old_account_lifetime.data.length - 1){",
											"                    // remaining_accounts",
											"                    account_obj = old_account_lifetime.data[i];",
											"                    break;",
											"                }",
											"            }",
											"",
											"            // data mới",
											"            let isFound = false;",
											"            for(let i in account_lifetime.data){",
											"                if(account_lifetime.data[i].id == account_obj.id){",
											"                    isFound = true;",
											"                    console.log(\"old: \" + account_obj.balance);",
											"                    console.log(\"act: \" + account_lifetime.data[i].balance);",
											"                    if(tnx_obj.txn_type == \"in\"){",
											"                        // case tăng debit => balance = debit - credit",
											"                        pm.test(\"balance of \" + account_lifetime.data[i].name + \" increase \" + tnx_obj.amount, function () {",
											"                            pm.expect(account_lifetime.data[i].balance == account_obj.balance + tnx_obj.amount).to.be.true;",
											"                        });",
											"                    } else {",
											"                        // case tăng credit",
											"                        pm.test(\"balance of \" + account_lifetime.data[i].name + \" decrease \" + tnx_obj.amount, function () {",
											"                            pm.expect(account_lifetime.data[i].balance == account_obj.balance - tnx_obj.amount).to.be.true;",
											"                        });",
											"                    }",
											"                    break;",
											"                }",
											"            }",
											"",
											"            pm.test(\"Found exchange account\", function () {",
											"                pm.expect(isFound).to.be.true;",
											"            });",
											"            ",
											"            postman.setNextRequest(\"report_cash_flow_period\"); // report_cash_flow_period",
											"            break;",
											"        default:",
											"            console.log(\"Missing flow, end test\");",
											"            postman.setNextRequest(null);",
											"            break;",
											"    }",
											"} else {",
											"    console.log(\"Can't get report account receivable unpaid, end test\",jsData);",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"/**",
											" * case handle:",
											" * - Nếu account tăng balance ko nằm trong top 5:",
											" *   + TH1: balance tăng làm cho account nhảy vào top 5 => phải show account trong top 5",
											" *   + TH2: balance tăng ko làm cho account nhảy vào top 5 => chỉ thay đổi số của remaining_accounts",
											" * Note: tạo invoice sẽ ko ảnh hưởng, chỉ ảnh hưởng bởi tnx",
											" */",
											"let testcase = pm.environment.get(\"C-testcase\");",
											"console.log(\"Testcase: \" + testcase);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-location-timezone",
										"value": "UTC+07:00",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "Bearer {{C-userToken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"branch_id\": {{C-business_id}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{finan_base_url}}/finan-ledger/api/v1/report/account-lifetime",
									"host": [
										"{{finan_base_url}}"
									],
									"path": [
										"finan-ledger",
										"api",
										"v1",
										"report",
										"account-lifetime"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "cash_flow",
					"item": [
						{
							"name": "report_cash_flow_period",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"/**",
											" * period: year, month, week",
											" */",
											"",
											"let period = \"month\";",
											"pm.environment.set(\"C-period\",period);",
											"",
											"let testcase = pm.environment.get(\"C-testcase\");",
											"console.log(\"Testcase: \" + testcase);",
											"console.log(\"period: \" + period);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsData = pm.response.json();",
											"if(pm.response.code == 200){",
											"    let testcase = pm.environment.get(\"C-testcase\");",
											"    let cash_flow_period = null;",
											"    try {",
											"        cash_flow_period = jsData.data;",
											"        /**",
											"         * period: week, month, year",
											"         * sum_card_data",
											"         * dates_data",
											"         */",
											"    } catch {",
											"        console.log(\"Can't get report cash_flow data\");",
											"    }",
											"",
											"    switch(testcase){",
											"        case 2:",
											"            pm.test(\"Got cash_flow_period \", function () {",
											"                pm.environment.set(\"C-cash_flow_period\",cash_flow_period);",
											"                pm.expect(cash_flow_period != null).to.be.true;",
											"            });",
											"",
											"            console.log(\"cash_flow_period: \", cash_flow_period);",
											"",
											"            // ================================================ bonus check current data",
											"            // waiting logic updated at phase 2",
											"            // ================================================ ",
											"",
											"            postman.setNextRequest(\"report_profit_loss_period\"); // report_profit_loss_period",
											"            break;",
											"        case 4: case 6:",
											"            let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
											"            let list_income_account = pm.environment.get(\"C-list_income_account\");",
											"            let list_expense_account = pm.environment.get(\"C-list_expense_account\");",
											"            let old_cash_flow_period = pm.environment.get(\"C-cash_flow_period\");",
											"",
											"            // hiện tại chưa chốt login nên tạm thời check phần sum_card_data",
											"            if(tnx_obj.txn_type == \"in\"){",
											"                // tăng income",
											"                pm.test(\"total_income increase \" + tnx_obj.amount, function () {",
											"                    pm.expect(cash_flow_period.sum_card_data.total_income == old_cash_flow_period.sum_card_data.total_income + parseFloat(tnx_obj.amount)).to.be.true;",
											"                });",
											"",
											"                pm.test(\"nothing happen with total_expense\", function () {",
											"                    pm.expect(cash_flow_period.sum_card_data.total_expense == old_cash_flow_period.sum_card_data.total_expense).to.be.true;",
											"                });",
											"",
											"                pm.test(\"total_gap increase \" + tnx_obj.amount, function () {",
											"                    pm.expect(cash_flow_period.sum_card_data.total_gap == old_cash_flow_period.sum_card_data.total_gap + parseFloat(tnx_obj.amount)).to.be.true;",
											"                });",
											"            } else {",
											"                // tăng expense",
											"                pm.test(\"nothing happen with total_income\", function () {",
											"                    pm.expect(cash_flow_period.sum_card_data.total_income == old_cash_flow_period.sum_card_data.total_income).to.be.true;",
											"                });",
											"",
											"                pm.test(\"total_expense increase \"  + tnx_obj.amount, function () {",
											"                    pm.expect(cash_flow_period.sum_card_data.total_expense == old_cash_flow_period.sum_card_data.total_expense + tnx_obj.amount).to.be.true;",
											"                });",
											"",
											"                pm.test(\"total_gap decrease \" + tnx_obj.amount, function () {",
											"                    pm.expect(cash_flow_period.sum_card_data.total_gap == old_cash_flow_period.sum_card_data.total_gap - tnx_obj.amount).to.be.true;",
											"                });",
											"            }",
											"",
											"            postman.setNextRequest(\"report_profit_loss_period\"); // report_profit_loss_period",
											"            break;",
											"        default:",
											"            console.log(\"Missing flow, end test\");",
											"            postman.setNextRequest(null);",
											"            break;",
											"    }",
											"} else {",
											"    console.log(\"Can't get report cash_flow, end test\",jsData);",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-location-timezone",
										"value": "UTC+07:00",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{C-userToken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"branch_id\": {{C-business_id}},\n    \"period\": \"month\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{finan_base_url}}/finan-ledger/api/v1/report/cash-flow-period",
									"host": [
										"{{finan_base_url}}"
									],
									"path": [
										"finan-ledger",
										"api",
										"v1",
										"report",
										"cash-flow-period"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "profit_n_loss",
					"item": [
						{
							"name": "report_profit_loss_period",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"/**",
											" * \"report_type\": sum,income,expense",
											" * Note: report_type = sum => hiện tại bị null dates_data",
											" * - C1: call từng loại income, expense dể lấy dates_data",
											" * - C2: wait fixing from dev",
											" * => tạm thời xử lý case sum, 2 case còn lại sẽ handle sau",
											" */",
											"let report_type = \"sum\";",
											"pm.environment.set(\"C-report_type\",report_type);",
											"",
											"let testcase = pm.environment.get(\"C-testcase\");",
											"console.log(\"Testcase: \" + testcase);",
											"console.log(\"report_type: \" + report_type);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsData = pm.response.json();",
											"if(pm.response.code == 200){",
											"    let testcase = pm.environment.get(\"C-testcase\");",
											"    let profit_loss_period = null;",
											"    try {",
											"        profit_loss_period = jsData.data;",
											"        /**",
											"         * period: week, month, year",
											"         * sum_card_data",
											"         * dates_data",
											"         */",
											"    } catch {",
											"        console.log(\"Can't get report cash_flow data\");",
											"    }",
											"",
											"    switch(testcase){",
											"        case 2:",
											"            pm.test(\"Got profit_loss_period \", function () {",
											"                pm.environment.set(\"C-profit_loss_period\",profit_loss_period);",
											"                pm.expect(profit_loss_period != null).to.be.true;",
											"            });",
											"",
											"            console.log(\"profit_loss_period: \", profit_loss_period);",
											"",
											"            // ================================================ bonus check current data",
											"            // waiting logic updated at phase 2",
											"            // ================================================ ",
											"",
											"            postman.setNextRequest(\"report_account_receivable_payable_lifetime\"); // report_account_receivable_payable_lifetime",
											"            break;",
											"        case 4: case 6:",
											"            let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
											"            let list_debit_account = pm.environment.get(\"C-list_debit_account\");",
											"            let list_credit_account = pm.environment.get(\"C-list_credit_account\");",
											"            let old_profit_loss_period = pm.environment.get(\"C-profit_loss_period\");",
											"",
											"            console.log(\"debug old_profit_loss_period: \", old_profit_loss_period);",
											"            console.log(\"debug profit_loss_period: \", profit_loss_period);",
											"",
											"            // CHƯA CÓ RULE, ĐANG ĐỢI PO DEFINE",
											"",
											"            postman.setNextRequest(\"report_account_receivable_payable_lifetime\"); // report_account_receivable_payable_lifetime",
											"            break;",
											"        default:",
											"            console.log(\"Missing flow, end test\");",
											"            postman.setNextRequest(null);",
											"            break;",
											"    }",
											"} else {",
											"    console.log(\"Can't get report cash_flow, end test\",jsData);",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-location-timezone",
										"value": "UTC+07:00",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{C-userToken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"branch_id\": {{C-business_id}},\n    \"period\": \"month\",\n    \"report_type\": \"sum\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{finan_base_url}}/finan-ledger/api/v1/report/profit-loss-period",
									"host": [
										"{{finan_base_url}}"
									],
									"path": [
										"finan-ledger",
										"api",
										"v1",
										"report",
										"profit-loss-period"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "receivable_account",
					"item": [
						{
							"name": "report_account_receivable_payable_lifetime",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"/**",
											" * API này chỉ liên quan khi tnx có link với invoice",
											" */",
											"",
											"let testcase = pm.environment.get(\"C-testcase\");",
											"console.log(\"Testcase: \" + testcase);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsData = pm.response.json();",
											"if(pm.response.code == 200){",
											"    let testcase = pm.environment.get(\"C-testcase\");",
											"    let account_receivable_payable = null;",
											"    try {",
											"        account_receivable_payable = jsData.data;",
											"    } catch {",
											"        console.log(\"Can't get data\");",
											"    }",
											"",
											"    let old_account_receivable_payable = pm.environment.get(\"C-account_receivable_payable\");",
											"    let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
											"    switch(testcase){",
											"        case 2:",
											"            pm.test(\"Got account_receivable_payable\", function () {",
											"                console.log(\"account_receivable_payable: \",account_receivable_payable);",
											"                pm.environment.set(\"C-account_receivable_payable\",account_receivable_payable);",
											"                pm.expect(account_receivable_payable != null).to.be.true;",
											"            });",
											"",
											"            testcase++;",
											"            pm.environment.set(\"C-testcase\",testcase);",
											"            postman.setNextRequest(\"edit_transaction\"); // edit_transaction",
											"            break;",
											"        case 4:",
											"            pm.test(\"total_unpaid decrease \" + tnx_obj.amount, function () {",
											"                console.log(\"old: \" + old_account_receivable_payable.total_unpaid);",
											"                console.log(\"new: \" + account_receivable_payable.total_unpaid);",
											"                pm.expect(account_receivable_payable.total_unpaid == old_account_receivable_payable.total_unpaid - tnx_obj.amount).to.be.true;",
											"            });",
											"",
											"            pm.test(\"nothing happen with total_payable \", function () {",
											"                console.log(\"old: \" + old_account_receivable_payable.total_payable);",
											"                console.log(\"new: \" + account_receivable_payable.total_payable);",
											"                pm.expect(account_receivable_payable.total_payable == old_account_receivable_payable.total_payable).to.be.true;",
											"            });",
											"",
											"            testcase++;",
											"            pm.environment.set(\"C-testcase\",testcase);",
											"            postman.setNextRequest(\"\"); // create_transaction",
											"            break;",
											"        case 6:",
											"            pm.test(\"total_unpaid decrease \" + tnx_obj.amount, function () {",
											"                console.log(\"old: \" + old_account_receivable_payable.total_unpaid);",
											"                console.log(\"new: \" + account_receivable_payable.total_unpaid);",
											"                pm.expect(account_receivable_payable.total_unpaid == old_account_receivable_payable.total_unpaid - tnx_obj.amount).to.be.true;",
											"            });",
											"",
											"            pm.test(\"nothing happen with total_payable \", function () {",
											"                console.log(\"old: \" + old_account_receivable_payable.total_payable);",
											"                console.log(\"new: \" + account_receivable_payable.total_payable);",
											"                pm.expect(account_receivable_payable.total_payable == old_account_receivable_payable.total_payable).to.be.true;",
											"            });",
											"",
											"            console.log(\"--- End Testsuite 20 ---\");",
											"            postman.setNextRequest(null);",
											"            break;",
											"        default:",
											"            console.log(\"Missing flow, end test\");",
											"            postman.setNextRequest(null);",
											"            break;",
											"    }",
											"} else {",
											"    console.log(\"Can't get report account receivable unpaid, end test\",jsData);",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-location-timezone",
										"value": "UTC+07:00",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{C-userToken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"branch_id\": {{C-business_id}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{finan_base_url}}/finan-ledger/api/v1/report/account-receivable-payable-lifetime",
									"host": [
										"{{finan_base_url}}"
									],
									"path": [
										"finan-ledger",
										"api",
										"v1",
										"report",
										"account-receivable-payable-lifetime"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	]
}