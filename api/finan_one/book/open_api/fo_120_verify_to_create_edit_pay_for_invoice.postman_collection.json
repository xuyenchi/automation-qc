{
	"info": {
		"_postman_id": "e9be314f-b8ad-4779-b996-28abd73b6f45",
		"name": "fo_120_verify_to_create_edit_pay_for_invoice",
		"description": "### Testsuite : verify to create invoice and pay for this\n\n###### Testcase:\n\n1. Authen\n    \n    1. Login => get token\n        \n    2. Verify token => get business_id\n        \n    3. Get current business => get more info\n        \n    4. Get business config => get is_pre_tax\n        \n2. Get data\n    \n    1. Get list client\n        \n    2. \\[New\\] Get list product\n        \n    3. Get list transaction\n        \n    4. Get list va / get list master account (BIDV only)\n        \n    5. Get list payment method\n        \n    6. Get list tax\n        \n3. Create invoice\n    \n    1. Check invoice detail\n        \n4. Edit invoice\n    \n    1. Check invoice detail\n        \n5. Create payment for invoice\n    \n6. Hook pay for invoice\n    \n    1. Check invoice detail\n        \n    2. Check transaction\n        \n\n###### Note:",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "282640"
	},
	"item": [
		{
			"name": "authen",
			"item": [
				{
					"name": "login",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// ============================= random characters",
									"function randomChars(length) {",
									"    var result           = '';",
									"    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
									"    var charactersLength = characters.length;",
									"    for ( var i = 0; i < length; i++ ) {",
									"      result += characters.charAt(Math.floor(Math.random() * ",
									" charactersLength));",
									"   }",
									"   return result;",
									"}",
									"",
									"let testcase = 1;",
									"console.log(\"-------- Start Testsuite 120 --------\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let platform = [\"desktop-web\",\"mobile-web\",\"mobile-app\"];",
									"let configs = pm.environment.get(\"C-configs\");",
									"let payload;",
									"if(configs.is_use_email){",
									"    payload = {",
									"        \"app_version\": \"1.0.0\",",
									"        \"device_info\": {",
									"            \"id\": randomChars(7) + \"-\" + randomChars(4) + \"-\" + randomChars(4) + \"-\" + randomChars(4) + \"-\" + randomChars(12),",
									"            \"name\": \"IP name\",",
									"            \"os\": \"iphone\"",
									"        },",
									"        \"email\": pm.environment.get(\"SER-email\"), // pm.environment.get(\"SER-email\")",
									"        \"encrypted_password\": pm.environment.get(\"SER-password\"),",
									"        \"phone_number\": \"\",",
									"        \"platform_key\": platform[0]",
									"    }",
									"} else {",
									"    payload = {",
									"        \"app_version\": \"1.0.0\",",
									"        \"device_info\": {",
									"            \"id\": randomChars(7) + \"-\" + randomChars(4) + \"-\" + randomChars(4) + \"-\" + randomChars(4) + \"-\" + randomChars(12),",
									"            \"name\": \"IP name\",",
									"            \"os\": \"iphone\"",
									"        },",
									"        \"email\":\"\", // pm.environment.get(\"SER-email\")",
									"        \"encrypted_password\": pm.environment.get(\"SER-password\"),",
									"        \"phone_number\": pm.environment.get(\"SER-phone_number\"),",
									"        \"platform_key\": platform[0]",
									"    }",
									"}",
									"",
									"console.log(\"payload: \",payload);",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));",
									"pm.environment.set(\"C-testcase\",testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    pm.test(\"System code is 102000\", function () {",
									"        pm.expect(jsData.code).to.eql(102000);",
									"    });",
									"",
									"    if(jsData.code == 102000){",
									"        let userToken = null;",
									"        try {",
									"            userToken = jsData.data.access_token;",
									"            pm.environment.set(\"C-userToken\",userToken);",
									"        } catch {",
									"            console.log(\"Can't get userToken\");",
									"        }",
									"",
									"        pm.test(\"Got userToken\", function () {",
									"            pm.expect(userToken != null).to.be.true;",
									"        });",
									"",
									"        let userInfo = jsData.data.user_info;",
									"",
									"        // show log",
									"        console.log(\"userInfo:\",JSON.stringify(userInfo));",
									"        pm.environment.set(\"C-userInfo\",userInfo);",
									"",
									"        postman.setNextRequest(\"verify_token_to_get_business\");",
									"    } else {",
									"        console.log(\"Can't get Token, end test\",jsData);",
									"        postman.setNextRequest(null);",
									"    }",
									"} else {",
									"    console.log(\"Can't login new account, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-user/api/v1/auth/login",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-user",
								"api",
								"v1",
								"auth",
								"login"
							]
						},
						"description": "Login User"
					},
					"response": []
				},
				{
					"name": "verify_token_to_get_business",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// verify token to get business",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = JSON.parse(responseBody);",
									"if(pm.response.code == 200 && jsData.code == 102000){",
									"    const jsData = pm.response.json();",
									"    let configs = pm.environment.get(\"C-configs\");",
									"    pm.environment.set(\"C-user_id\",jsData.data.user_id);",
									"",
									"    let business_id = jsData.data.headers[\"x-business-id\"];",
									"    console.log(\"business_id: \" + business_id);",
									"    pm.environment.set(\"C-business_id\",business_id);",
									"",
									"    let user_id = jsData.data.user_id;",
									"    console.log(\"user_id: \" + user_id);",
									"    pm.environment.set(\"C-user_id\",user_id);",
									"",
									"    switch(configs.feature){",
									"        case \"create_client\":",
									"            pm.execution.setNextRequest(\"create_client\");",
									"            break;",
									"        case \"edit_client\":",
									"            if(pm.environment.get(\"C-default_client\") != null){",
									"                pm.execution.setNextRequest(\"update_client\");",
									"            } else {",
									"                console.log(\"missing default_client\");",
									"                pm.execution.setNextRequest(null);",
									"            }",
									"            break;",
									"        case \"create_va\":",
									"            if(pm.environment.get(\"C-default_client\") != null){",
									"                pm.execution.setNextRequest(\"get_master_account\");",
									"            } else {",
									"                console.log(\"missing default_client\");",
									"                pm.execution.setNextRequest(null);",
									"            }",
									"            break;",
									"        case \"create_external_transfer\":",
									"        case \"create_internal_transfer\":",
									"        default:",
									"            if(pm.environment.get(\"C-default_client\") != null){",
									"                pm.execution.setNextRequest(\"get_list_va\");",
									"            } else {",
									"                console.log(\"missing default_client\");",
									"                pm.execution.setNextRequest(null);",
									"            }",
									"    }",
									"    pm.execution.setNextRequest(\"get_current_business\");",
									"} else {",
									"    console.log(\"Can't check token to get business_id, end test\");",
									"    pm.execution.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"token\": \"{{C-userToken}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-user/api/v1/auth/verify-token",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-user",
								"api",
								"v1",
								"auth",
								"verify-token"
							]
						},
						"description": "Login User"
					},
					"response": []
				},
				{
					"name": "get_current_business",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ============================= random number between min and max",
									"function getRandomInt(min, max) {",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    // console.log(\"Current business info: \", jsData.data);",
									"    let branch_id = null;",
									"    try {",
									"        branch_id = jsData.data.current_business.list_branch[0].id;",
									"        pm.environment.set(\"C-branch_id\",branch_id);",
									"    } catch {",
									"        console.log(\"Can't get branch id\");",
									"    }",
									"",
									"    pm.test(\"Got branch id \" + branch_id, function () {",
									"        pm.expect(branch_id != null).to.be.true;",
									"    });",
									"",
									"    let payment_method = null;",
									"    let list_payment_method = [];",
									"    let configs = pm.environment.get(\"C-configs\");",
									"    let test_payment_method = configs.test_payment_method;",
									"    try {",
									"        switch(test_payment_method){",
									"            case \"viet_qr_pro_mb\":",
									"                for(let i in jsData.data.list_payment_method){",
									"                    if(jsData.data.list_payment_method[i].key == test_payment_method){ ",
									"                        payment_method = jsData.data.list_payment_method[i];",
									"                        break;",
									"                    }",
									"                }",
									"                break;",
									"            case \"va_galaxy\":",
									"                for(let i in jsData.data.list_payment_method){",
									"                    if(jsData.data.list_payment_method[i].bank_account.account_number.includes(\"SBB\")){ ",
									"                        list_payment_method[list_payment_method.length] = jsData.data.list_payment_method[i];",
									"                    }",
									"                }",
									"                payment_method = list_payment_method[getRandomInt(0,list_payment_method.length -1)];",
									"                break;",
									"            case \"bank_transfer\":",
									"                for(let i in jsData.data.list_payment_method){",
									"                    if(jsData.data.list_payment_method[i].key == test_payment_method){ ",
									"                        list_payment_method[list_payment_method.length] = jsData.data.list_payment_method[i];",
									"                    }",
									"                }",
									"                payment_method = list_payment_method[getRandomInt(0,list_payment_method.length -1)];",
									"                break;",
									"            default:",
									"                console.log(\"Missing flow\");",
									"                break;",
									"        }",
									"    } catch {",
									"        console.log(\"Can't get branch id\");",
									"    }",
									"    pm.environment.set(\"C-viet_qr_payment\",payment_method);",
									"",
									"    pm.test(\"Got branch id \" + branch_id, function () {",
									"        pm.expect(branch_id != null).to.be.true;",
									"    });",
									"    ",
									"    // let testcase = pm.environment.get(\"C-testcase\");",
									"    // testcase++;",
									"    // pm.environment.set(\"C-testcase\",testcase);",
									"    postman.setNextRequest(\"get_business_config\"); // get_business_config",
									"} else {",
									"    console.log(\"Can't get business detail, end test\", jsData);",
									"    pm.execution.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-business/api/v1/business/get-current",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-business",
								"api",
								"v1",
								"business",
								"get-current"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_business_config",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ============================= random number between min and max",
									"function getRandomInt(min, max) {",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    // console.log(\"Current business config: \", jsData.data);",
									"    // let configs = pm.environment.get(\"C-configs\");",
									"    let discount_mode = null, tax_mode = null;",
									"    try {",
									"        tax_mode = jsData.data.tax_mode;",
									"        discount_mode = jsData.data.discount_mode;",
									"",
									"        pm.environment.set(\"C-discount_mode\",discount_mode);",
									"        pm.environment.set(\"C-tax_mode\",tax_mode);",
									"    } catch {",
									"        console.log(\"Can't get tax_mode, discount_mode\");",
									"    }",
									"",
									"    pm.test(\"Got config discount_mode, tax_mode\", function () {",
									"        pm.expect(tax_mode != null && discount_mode != null).to.be.true;",
									"    });",
									"",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    testcase++;",
									"    pm.environment.set(\"C-testcase\",testcase);",
									"    postman.setNextRequest(\"get_list_product\"); // get_list_clients, get_list_transaction",
									"} else {",
									"    console.log(\"Can't get business detail, end test\", jsData);",
									"    pm.execution.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-business/api/v1/invoice-setting/get-by-business?business_id={{C-business_id}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-business",
								"api",
								"v1",
								"invoice-setting",
								"get-by-business"
							],
							"query": [
								{
									"key": "business_id",
									"value": "{{C-business_id}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "client",
			"item": [
				{
					"name": "get_list_clients",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");\r",
									"console.log(\"Testcase: \" + testcase);\r",
									"\r",
									"let page = pm.environment.get(\"C-page\");\r",
									"let page_size = pm.environment.get(\"C-page_size\");\r",
									"if(!page){\r",
									"    page = 1;\r",
									"    pm.environment.set(\"C-page\",page);\r",
									"\r",
									"    page_size = 20;\r",
									"    pm.environment.set(\"C-page_size\",page_size);\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let list_func = eval(pm.environment.get(\"list_common_func\"));",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let configs = pm.environment.get(\"C-configs\");",
									"    let page = pm.environment.get(\"C-page\");",
									"    let total_pages = jsData.meta.total_pages;",
									"",
									"    let list_clients, old_list_clients;",
									"    // console.log(\"debug total record in page: \" + jsData.data.length);",
									"    switch(testcase){",
									"        case 2:",
									"            list_clients = pm.environment.get(\"C-list_clients\");",
									"            if(!list_clients){",
									"                list_clients = [];",
									"            }",
									"            break;",
									"        case 4:",
									"            old_list_clients = pm.environment.get(\"C-old_list_clients\");",
									"            if(!old_list_clients){",
									"                old_list_clients = pm.environment.get(\"C-list_clients\");",
									"                pm.environment.unset(\"C-list_clients\");",
									"                pm.environment.set(\"C-old_list_clients\",old_list_clients);",
									"            }",
									"",
									"            list_clients = pm.environment.get(\"C-list_clients\");",
									"            if(!list_clients){",
									"                list_clients = [];",
									"            }",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow\");",
									"            break;",
									"    }",
									"",
									"    for(let item in jsData.data){",
									"        list_clients[list_clients.length] = {",
									"            \"client_id\":jsData.data[item].id,",
									"            \"business_id\":jsData.data[item].business_id,",
									"            \"client_secret\":jsData.data[item].client_secret,",
									"            \"name\":jsData.data[item].name,",
									"            \"owner_id\":jsData.data[item].owner_id,",
									"            \"webhook_url\":jsData.data[item].webhook_url,",
									"            \"is_active\":jsData.data[item].is_active,",
									"            \"created_at\":jsData.data[item].created_at,",
									"            \"updated_at\":jsData.data[item].updated_at",
									"        }",
									"    }",
									"    pm.environment.set(\"C-list_clients\",list_clients);",
									"",
									"    if(page >= total_pages || page >= configs.limit_page){",
									"        // must clear page & page_size",
									"        pm.environment.unset(\"C-page\");",
									"        pm.environment.unset(\"C-page_size\");",
									"",
									"        switch(testcase){",
									"            case 2:",
									"                let client_obj = null;",
									"                try {",
									"                    client_obj = list_clients[list_func.getRandomInt(0,list_clients.length - 1)];",
									"                } catch {",
									"                    console.log(\"Have nothing client\");",
									"                }",
									"                pm.test(\"Got client_obj\", function () {",
									"                    pm.expect(client_obj != null).to.be.true;",
									"                });",
									"",
									"                if(client_obj != null){",
									"                    pm.environment.set(\"C-client_obj\",client_obj);",
									"                    console.log(\"Action with client: \", client_obj);",
									"                    pm.environment.set(\"C-client_key\",client_obj.client_secret);",
									"                    pm.environment.set(\"C-client_id\",client_obj.client_id);",
									"",
									"                    pm.execution.setNextRequest(\"\"); // get_list_transaction",
									"                } else {",
									"                    pm.execution.setNextRequest(null);",
									"                }",
									"                break;",
									"            default:",
									"                console.log(\"Missing flow, end test\");",
									"                pm.execution.setNextRequest(null);",
									"        }",
									"    } else {",
									"        page++;",
									"        pm.environment.set(\"C-page\",page);",
									"",
									"        console.log(\"view next page (\" + page + \") to get more clients\");",
									"        postman.setNextRequest(\"get_list_clients\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get list client, end test\", jsData);",
									"    pm.execution.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{f1_open_url}}/api/v1/client/get-clients",
							"host": [
								"{{f1_open_url}}"
							],
							"path": [
								"api",
								"v1",
								"client",
								"get-clients"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "product",
			"item": [
				{
					"name": "get_list_product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"let product_id;",
									"let product_name = pm.environment.get(\"V-product_name\");",
									"console.log(\"product_name 1 \" + product_name);",
									"let jsData = pm.response.json();",
									"if (pm.response.code == 200 && jsData.data.length > 0) {",
									"    let list_product = pm.environment.get(\"C-list_product\");",
									"    if (!list_product) {",
									"        list_product = [];",
									"    }",
									"",
									"    for (i in jsData.data) {",
									"        list_product[list_product.length] = {",
									"            \"id\": jsData.data[i].id,",
									"            \"item_name\": jsData.data[i].general_info.item_name,",
									"            \"sku_code\": jsData.data[i].general_info.sku_code,",
									"            \"unit\": jsData.data[i].general_info.unit,",
									"            \"sale_price\": jsData.data[i].sale_info.sale_price,",
									"            \"sale_category_code\": jsData.data[i].sale_info.sale_category_code,",
									"            \"sale_tax_code\": jsData.data[i].sale_info.sale_tax_code,",
									"            \"purchase_price\": jsData.data[i].purchase_info.purchase_price,",
									"            \"purchase_category_code\": jsData.data[i].purchase_info.purchase_category_code,",
									"            \"purchase_tax\": jsData.data[i].purchase_info.purchase_info",
									"        }",
									"    }",
									"    pm.environment.set(\"C-list_product\",list_product);",
									"    ",
									"    pm.execution.setNextRequest(\"get_list_customer\"); // get_list_transaction",
									"} else {",
									"    console.log(\"Can't get list product, try again\")",
									"    pm.execution.setNextRequest(null);",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"// Example secret key for signing, replace with your actual secret",
									"const secretKey = pm.environment.get(\"C-client_key\");",
									"console.log(\"secretKey: \" + secretKey);",
									"",
									"// function ()",
									"let today = new Date();",
									"let timestamp = Math.floor(today.getTime()/1000) + 30;",
									"console.log(\"timestamp: \" + timestamp);",
									"// Get method, URL, body, and timestamp",
									"const method = pm.request.method;",
									"let url = pm.request.url.toString().replace(\"{{f1_open_url}}\",\"\");",
									"const body = pm.request.body ? pm.request.body.raw : '';",
									"// const timestamp = pm.request.headers.get('x-timestamp');",
									"// Concatenate the components to form the message to sign",
									"const message = `${secretKey}_${method}_${url}_${body || ''}_${timestamp}`;",
									"console.log(\"Generated message: \", message);",
									"",
									"// Generate SHA256 signature",
									"const signature = CryptoJS.SHA256(message).toString(CryptoJS.enc.Hex);",
									"console.log(\"Generated signature: \", signature);",
									"",
									"pm.environment.set(\"C-timestamp\",timestamp);",
									"",
									"// Add the signature to the headers",
									"pm.request.headers.add({ key: 'x-signature', value: signature });",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-client-id",
								"value": "{{C-client_id}}",
								"type": "text"
							},
							{
								"key": "x-timestamp",
								"value": "{{C-timestamp}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{f1_open_url}}/api/v1/products?page=1&page_size=50",
							"host": [
								"{{f1_open_url}}"
							],
							"path": [
								"api",
								"v1",
								"products"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "page_size",
									"value": "50"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "customer",
			"item": [
				{
					"name": "get_list_customer",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"let configs = pm.environment.get(\"C-configs\");",
									"",
									"let page = pm.environment.get(\"C-page\");",
									"let page_size = pm.environment.get(\"C-page_size\");",
									"if(!page){",
									"    page = 1;",
									"    pm.environment.set(\"C-page\",page);",
									"",
									"    page_size = 50;",
									"    pm.environment.set(\"C-page_size\",page_size);",
									"}",
									"console.log(\"page: \" + page + \" page_size \" + page_size);",
									"",
									"// Example secret key for signing, replace with your actual secret",
									"const secretKey = pm.environment.get(\"C-client_key\");",
									"console.log(\"secretKey: \" + secretKey);",
									"",
									"// function ()",
									"let today = new Date();",
									"let timestamp = Math.floor(today.getTime()/1000) + 30;",
									"console.log(\"timestamp: \" + timestamp);",
									"// Get method, URL, body, and timestamp",
									"const method = pm.request.method;",
									"let url = pm.request.url.toString().replace(\"{{f1_open_url}}\",\"\");",
									"const body = pm.request.body ? pm.request.body.raw : '';",
									"// const timestamp = pm.request.headers.get('x-timestamp');",
									"url = url.replace(\"{{C-page}}\",page);",
									"url = url.replace(\"{{C-page_size}}\",page_size);",
									"// Concatenate the components to form the message to sign",
									"const message = `${secretKey}_${method}_${url}_${body || ''}_${timestamp}`;",
									"console.log(\"Generated message: \", message);",
									"",
									"// Generate SHA256 signature",
									"const signature = CryptoJS.SHA256(message).toString(CryptoJS.enc.Hex);",
									"console.log(\"Generated signature: \", signature);",
									"",
									"pm.environment.set(\"C-timestamp\",timestamp);",
									"",
									"// Add the signature to the headers",
									"pm.request.headers.add({ key: 'x-signature', value: signature });",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"function getRandomInt(min, max) {",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = pm.response.json();",
									"if (pm.response.code == 200) {",
									"    let configs = pm.environment.get(\"C-configs\");",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let total_pages = jsData.meta.total_pages;",
									"    let page = pm.environment.get(\"C-page\");",
									"    ",
									"    let list_customer, old_list_customer;",
									"    switch (testcase) {",
									"        case 2:",
									"            list_customer = pm.environment.get(\"C-list_customer\");",
									"            if (!list_customer) {",
									"                list_customer = [];",
									"            }",
									"            break;",
									"        case 4:",
									"            old_list_customer = pm.environment.get(\"C-old_list_customer\");",
									"            if (!old_list_customer) {",
									"                old_list_customer = pm.environment.get(\"C-list_customer\");",
									"                pm.environment.unset(\"C-list_customer\");",
									"                pm.environment.set(\"C-old_list_customer\", old_list_customer);",
									"            }",
									"",
									"            list_customer = pm.environment.get(\"C-list_customer\");",
									"            if (!list_customer) {",
									"                list_customer = [];",
									"            }",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow\");",
									"            break;",
									"    }",
									"    for (let item in jsData.data) {",
									"        list_customer[list_customer.length] = {",
									"            \"id\": jsData.data[item].customer_id,",
									"            \"name\": jsData.data[item].general_info.name,",
									"            \"code\": jsData.data[item].general_info.customer_code,",
									"            \"phone_code\": jsData.data[item].general_info.phone_code,",
									"            \"email\": jsData.data[item].general_info.email,",
									"            \"type\": jsData.data[item].general_info.type,",
									"            \"tax_code\": jsData.data[item].general_info.tax_code,",
									"            \"contact_person\": jsData.data[item].contact_person",
									"            // \"custom_tag\": jsData.data[item].custom_tag,",
									"        }",
									"        // list_customer[list_customer.length] = jsData.data[item];",
									"    }",
									"    pm.environment.set(\"C-list_customer\", list_customer);",
									"",
									"    if (page >= total_pages || page >= 1) {",
									"        pm.environment.unset(\"C-page\");",
									"        pm.environment.unset(\"C-page_size\");",
									"",
									"        let customer_obj = list_customer[getRandomInt(0,list_customer.length - 1)];",
									"        let edit_cust_obj = null;",
									"        let count = 5;",
									"        while(1){",
									"            edit_cust_obj = list_customer[getRandomInt(0,list_customer.length - 1)];",
									"",
									"            if(JSON.stringify(edit_cust_obj) != JSON.stringify(customer_obj) || count <= 5){",
									"                break;",
									"            } else {",
									"                count--;",
									"            }",
									"        }",
									"        console.log(\"Will create invoice with customer: \", customer_obj);",
									"        console.log(\"Will edit invoice with customer: \", edit_cust_obj);",
									"",
									"        pm.environment.set(\"C-customer_obj\",customer_obj);",
									"        pm.environment.set(\"C-edit_cust_obj\",edit_cust_obj);",
									"        pm.execution.setNextRequest(\"get_list_transaction\"); // get_list_transaction",
									"    } else {",
									"        page++;",
									"        pm.environment.set(\"C-page\", page);",
									"        console.log(\"view next page (\" + page + \") to get more customer\");",
									"        pm.execution.setNextRequest(\"get_list_customer\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get customer, end test\", jsData);",
									"    pm.execution.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-client-id",
								"value": "{{C-client_id}}",
								"type": "text"
							},
							{
								"key": "x-timestamp",
								"value": "{{C-timestamp}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{f1_open_url}}/api/v1/customers?page={{C-page}}&page_size={{C-page_size}}",
							"host": [
								"{{f1_open_url}}"
							],
							"path": [
								"api",
								"v1",
								"customers"
							],
							"query": [
								{
									"key": "page",
									"value": "{{C-page}}"
								},
								{
									"key": "page_size",
									"value": "{{C-page_size}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "account",
			"item": [
				{
					"name": "get_master_account",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"// Example secret key for signing, replace with your actual secret",
									"const secretKey = pm.environment.get(\"C-client_key\");",
									"console.log(\"secretKey: \" + secretKey);",
									"",
									"// function ()",
									"let today = new Date();",
									"let timestamp = Math.floor(today.getTime()/1000) + 30;",
									"console.log(\"timestamp: \" + timestamp);",
									"",
									"// Get method, URL, body, and timestamp",
									"const method = pm.request.method;",
									"const url = pm.request.url.toString().replace(\"{{f1_open_url}}\",\"\");",
									"const body = pm.request.body ? pm.request.body.raw : '';",
									"// const timestamp = pm.request.headers.get('x-timestamp');",
									"",
									"// Concatenate the components to form the message to sign",
									"const message = `${secretKey}_${method}_${url}_${body || ''}_${timestamp}`;",
									"console.log(\"Generated message: \", message);",
									"",
									"// Generate SHA256 signature",
									"const signature = CryptoJS.SHA256(message).toString(CryptoJS.enc.Hex);",
									"console.log(\"Generated signature: \", signature);",
									"",
									"pm.environment.set(\"C-timestamp\",timestamp);",
									"",
									"// Add the signature to the headers",
									"pm.request.headers.add({ key: 'x-signature', value: signature });",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let list_func = eval(pm.environment.get(\"list_common_func\"));",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let configs = pm.environment.get(\"C-configs\");",
									"",
									"    console.log(\"Debug: \", jsData);",
									"",
									"    let master_account_obj = null, list_master = [];",
									"    if(configs.test_payment_method == \"bidv\"){",
									"        console.log(\"BIDV chưa support tạo va\");",
									"        for(let i in jsData.data){",
									"            if(jsData.data[i].bank_code == \"BIDV\"){",
									"                list_master[list_master.length] = jsData.data[i];",
									"            }",
									"        }",
									"        master_account_obj = list_master[list_func.getRandomInt(0,list_master.length - 1)];   ",
									"    }",
									"",
									"    pm.test(\"Got BIDV master_account_obj\", function () {",
									"        pm.expect(master_account_obj != null).to.be.true;",
									"    });",
									"    ",
									"    if(master_account_obj != null){",
									"        pm.environment.set(\"C-master_account_obj\",master_account_obj);",
									"        console.log(\"Payment with master_account: \", master_account_obj);",
									"",
									"        // xử lý payment_method_list (chứa va_obj để thanh toán)",
									"        let payment_method_list = [];",
									"        payment_method_list[payment_method_list.length] = va_obj;",
									"        pm.environment.set(\"C-payment_method_list\",payment_method_list);",
									"        ",
									"        pm.execution.setNextRequest(\"get_list_payment_method\"); // get_list_payment_method",
									"    } else {",
									"        console.log(\"Missing master_account_obj, end test\");",
									"        pm.execution.setNextRequest(null);",
									"    }",
									"} else {",
									"    console.log(\"Can't get master account \", jsData);",
									"    pm.execution.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-client-id",
								"value": "{{C-client_id}}",
								"type": "text"
							},
							{
								"key": "x-timestamp",
								"value": "{{C-timestamp}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{f1_open_url}}/api/v1/account/get-master-account",
							"host": [
								"{{f1_open_url}}"
							],
							"path": [
								"api",
								"v1",
								"account",
								"get-master-account"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_list_va",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let list_func = eval(pm.environment.get(\"list_common_func\"));",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let configs = pm.environment.get(\"C-configs\");",
									"    let page = pm.environment.get(\"C-page\");",
									"    let total_pages = jsData.meta.total_pages;",
									"",
									"    let list_va, old_list_va, all_pm;",
									"    // console.log(\"debug total record in page: \" + jsData.data.length);",
									"    switch(testcase){",
									"        case 2:",
									"            list_va = pm.environment.get(\"C-list_va\");",
									"            all_pm = pm.environment.get(\"C-all_pm\");",
									"            if(!list_va){",
									"                list_va = [];",
									"                all_pm = [];",
									"            }",
									"            break;",
									"        case 4:",
									"            old_list_va = pm.environment.get(\"C-old_list_va\");",
									"            if(!old_list_va){",
									"                old_list_va = pm.environment.get(\"C-list_va\");",
									"                pm.environment.unset(\"C-list_va\");",
									"                pm.environment.set(\"C-old_list_va\",old_list_va);",
									"            }",
									"",
									"            list_va = pm.environment.get(\"C-list_va\");",
									"            if(!list_va){",
									"                list_va = [];",
									"            }",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow\");",
									"            break;",
									"    }",
									"",
									"    for(let item in jsData.data){",
									"        switch(configs.test_payment_method){",
									"            case \"bank_transfer\":",
									"                if(jsData.data[item].bank_code == \"SHBVN\"){",
									"                    list_va[list_va.length] = {",
									"                        \"account_number\":jsData.data[item].account_number,",
									"                        \"account_name\":jsData.data[item].account_name,",
									"                        \"bank_code\":jsData.data[item].bank_code,",
									"                        // \"usage_type\":jsData.data[item].usage_type,",
									"                        \"va_id\":jsData.data[item].id,",
									"                        \"balance_current_amount\":jsData.data[item].balance_current_amount,",
									"                        \"is_active\":jsData.data[item].is_active,",
									"                        \"reference_id\":jsData.data[item].reference_id,",
									"                        \"master_account_id\":jsData.data[item].master_account_id,",
									"                        \"bank_id\":jsData.data[item].bank_id",
									"                    }",
									"                }",
									"                break;",
									"            case \"mb\":",
									"                if(jsData.data[item].bank_code == \"MB\"){",
									"                    list_va[list_va.length] = {",
									"                        \"account_number\":jsData.data[item].account_number,",
									"                        \"account_name\":jsData.data[item].account_name,",
									"                        \"bank_code\":jsData.data[item].bank_code,",
									"                        \"usage_type\":jsData.data[item].usage_type,",
									"                        \"va_id\":jsData.data[item].id,",
									"                        \"balance_current_amount\":jsData.data[item].balance_current_amount,",
									"                        \"is_active\":jsData.data[item].is_active,",
									"                        \"reference_id\":jsData.data[item].reference_id,",
									"                        \"master_account_id\":jsData.data[item].master_account_id,",
									"                        \"bank_id\":jsData.data[item].bank_id",
									"                    }",
									"                }",
									"                break;",
									"            case \"bidv\":",
									"            default:",
									"                if(jsData.data[item].bank_code == \"BIDV\"){",
									"                    list_va[list_va.length] = {",
									"                        \"account_number\":jsData.data[item].account_number,",
									"                        \"account_name\":jsData.data[item].account_name,",
									"                        \"bank_code\":jsData.data[item].bank_code,",
									"                        \"usage_type\":jsData.data[item].usage_type,",
									"                        \"va_id\":jsData.data[item].id,",
									"                        \"balance_current_amount\":jsData.data[item].balance_current_amount,",
									"                        \"is_active\":jsData.data[item].is_active,",
									"                        \"reference_id\":jsData.data[item].reference_id,",
									"                        \"master_account_id\":jsData.data[item].master_account_id,",
									"                        \"bank_id\":jsData.data[item].bank_id",
									"                    }",
									"                }",
									"        }",
									"        ",
									"        if(testcase == 2){",
									"            all_pm[all_pm.length] = {",
									"                \"account_number\":jsData.data[item].account_number,",
									"                \"account_name\":jsData.data[item].account_name,",
									"                \"bank_code\":jsData.data[item].bank_code,",
									"                \"usage_type\":jsData.data[item].usage_type,",
									"                \"va_id\":jsData.data[item].id,",
									"                \"balance_available_amount\":jsData.data[item].balance_available_amount,",
									"                \"is_active\":jsData.data[item].is_active,",
									"                \"reference_id\":jsData.data[item].reference_id,",
									"                \"master_account_name\":jsData.data[item].master_account_name,",
									"                \"bank_id\":jsData.data[item].bank_id",
									"            }",
									"            pm.environment.set(\"C-all_pm\",all_pm);",
									"        }",
									"    }",
									"    pm.environment.set(\"C-list_va\",list_va);",
									"",
									"    if(page >= total_pages || page >= configs.limit_page){",
									"        // must clear page & page_size",
									"        pm.environment.unset(\"C-page\");",
									"        pm.environment.unset(\"C-page_size\");",
									"",
									"        let va_obj = null;",
									"        switch(testcase){",
									"            case 2:",
									"                try {",
									"                    va_obj = list_va[list_func.getRandomInt(0,list_va.length - 1)];",
									"                } catch {",
									"                    console.log(\"Have nothing va\");",
									"                }",
									"",
									"                pm.test(\"Got va_obj\", function () {",
									"                    pm.expect(va_obj != null).to.be.true;",
									"                });",
									"",
									"                // xử lý payment_method_list (chứa va_obj để thanh toán)",
									"                let payment_method_list = [];",
									"                payment_method_list[payment_method_list.length] = va_obj;",
									"                pm.environment.set(\"C-payment_method_list\",payment_method_list);",
									"",
									"                if(va_obj != null){",
									"                    pm.environment.set(\"C-va_obj\",va_obj);",
									"                    console.log(\"Payment with va: \", va_obj);",
									"                    pm.environment.set(\"C-va_id\",va_obj.va_id);",
									"",
									"                    // testcase++;",
									"                    // pm.environment.set(\"C-testcase\",testcase);",
									"                    pm.execution.setNextRequest(\"get_list_tax\"); // get_list_payment_method",
									"                } else {",
									"                    pm.execution.setNextRequest(null);",
									"                }",
									"                break;",
									"            case 4:",
									"                va_obj = pm.environment.get(\"C-va_obj\");",
									"",
									"                let new_va_obj = null;",
									"                for(let i in list_va){",
									"                    if(list_va[i].va_id == va_obj.va_id){",
									"                        new_va_obj = list_va[i];",
									"                        break;",
									"                    }",
									"                }",
									"                console.log(\"old: \", va_obj);",
									"                console.log(\"new: \", new_va_obj);",
									"",
									"                pm.execution.setNextRequest(\"get_list_transaction\"); // get_list_transaction",
									"                break;",
									"            default:",
									"                console.log(\"Missing flow, end test\");",
									"                pm.execution.setNextRequest(null);",
									"        }",
									"    } else {",
									"        page++;",
									"        pm.environment.set(\"C-page\",page);",
									"",
									"        console.log(\"view next page (\" + page + \") to get more vas\");",
									"        postman.setNextRequest(\"get_list_va\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get list va, end test\", jsData);",
									"    pm.execution.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");\r",
									"console.log(\"Testcase: \" + testcase);\r",
									"\r",
									"let page = pm.environment.get(\"C-page\");\r",
									"let page_size = pm.environment.get(\"C-page_size\");\r",
									"if(!page){\r",
									"    page = 1;\r",
									"    pm.environment.set(\"C-page\",page);\r",
									"\r",
									"    page_size = 20;\r",
									"    pm.environment.set(\"C-page_size\",page_size);\r",
									"}\r",
									"\r",
									"// Example secret key for signing, replace with your actual secret\r",
									"const secretKey = pm.environment.get(\"C-client_key\");\r",
									"console.log(\"secretKey: \" + secretKey);\r",
									"\r",
									"// function ()\r",
									"let today = new Date();\r",
									"let timestamp = Math.floor(today.getTime()/1000) + 30;\r",
									"console.log(\"timestamp: \" + timestamp);\r",
									"\r",
									"// Get method, URL, body, and timestamp\r",
									"const method = pm.request.method;\r",
									"let url = pm.request.url.toString().replace(\"{{f1_open_url}}\",\"\");\r",
									"url = url.replace(\"{{C-page}}\",page);\r",
									"url = url.replace(\"{{C-page_size}}\",page_size);\r",
									"\r",
									"const body = pm.request.body ? pm.request.body.raw : '';\r",
									"// const timestamp = pm.request.headers.get('x-timestamp');\r",
									"\r",
									"// Concatenate the components to form the message to sign\r",
									"const message = `${secretKey}_${method}_${url}_${body || ''}_${timestamp}`;\r",
									"console.log(\"Generated message: \", message);\r",
									"\r",
									"// Generate SHA256 signature\r",
									"const signature = CryptoJS.SHA256(message).toString(CryptoJS.enc.Hex);\r",
									"console.log(\"Generated signature: \", signature);\r",
									"\r",
									"pm.environment.set(\"C-timestamp\",timestamp);\r",
									"\r",
									"// Add the signature to the headers\r",
									"pm.request.headers.add({ key: 'x-signature', value: signature });\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-client-id",
								"value": "{{C-client_id}}",
								"type": "text"
							},
							{
								"key": "x-timestamp",
								"value": "{{C-timestamp}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{f1_open_url}}/api/v1/bank-accounts?page={{C-page}}&page_size={{C-page_size}}",
							"host": [
								"{{f1_open_url}}"
							],
							"path": [
								"api",
								"v1",
								"bank-accounts"
							],
							"query": [
								{
									"key": "page",
									"value": "{{C-page}}"
								},
								{
									"key": "page_size",
									"value": "{{C-page_size}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get_list_payment_method",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");\r",
									"console.log(\"Testcase: \" + testcase);\r",
									"\r",
									"let page = pm.environment.get(\"C-page\");\r",
									"let page_size = pm.environment.get(\"C-page_size\");\r",
									"if(!page){\r",
									"    page = 1;\r",
									"    pm.environment.set(\"C-page\",page);\r",
									"\r",
									"    page_size = 20;\r",
									"    pm.environment.set(\"C-page_size\",page_size);\r",
									"}\r",
									"\r",
									"// Example secret key for signing, replace with your actual secret\r",
									"const secretKey = pm.environment.get(\"C-client_key\");\r",
									"console.log(\"secretKey: \" + secretKey);\r",
									"\r",
									"// function ()\r",
									"let today = new Date();\r",
									"let timestamp = Math.floor(today.getTime()/1000) + 30;\r",
									"console.log(\"timestamp: \" + timestamp);\r",
									"\r",
									"// Get method, URL, body, and timestamp\r",
									"const method = pm.request.method;\r",
									"let url = pm.request.url.toString().replace(\"{{f1_open_url}}\",\"\");\r",
									"url = url.replace(\"{{C-page}}\",page);\r",
									"url = url.replace(\"{{C-page_size}}\",page_size);\r",
									"\r",
									"const body = pm.request.body ? pm.request.body.raw : '';\r",
									"// const timestamp = pm.request.headers.get('x-timestamp');\r",
									"\r",
									"// Concatenate the components to form the message to sign\r",
									"const message = `${secretKey}_${method}_${url}_${body || ''}_${timestamp}`;\r",
									"console.log(\"Generated message: \", message);\r",
									"\r",
									"// Generate SHA256 signature\r",
									"const signature = CryptoJS.SHA256(message).toString(CryptoJS.enc.Hex);\r",
									"console.log(\"Generated signature: \", signature);\r",
									"\r",
									"pm.environment.set(\"C-timestamp\",timestamp);\r",
									"\r",
									"// Add the signature to the headers\r",
									"pm.request.headers.add({ key: 'x-signature', value: signature });\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let list_func = eval(pm.environment.get(\"list_common_func\"));",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let configs = pm.environment.get(\"C-configs\");",
									"    let payment_method_list = pm.environment.get(\"C-payment_method_list\");",
									"    console.log(\"payment_method_list: \", payment_method_list);",
									"",
									"    let isFound = false;",
									"    for(let i in jsData.data){",
									"        if(jsData.data[i].bank_account.id == payment_method_list[0].va_id){",
									"            isFound = true;",
									"            payment_method_list[0].payment_method_id = jsData.data[i].id;",
									"            break;",
									"        }",
									"    }",
									"",
									"    pm.test(\"Got payment_method_id\", function () {",
									"        pm.environment.set(\"C-payment_method_list\",payment_method_list);",
									"        pm.expect(isFound).to.be.true;",
									"    });",
									"    ",
									"    pm.execution.setNextRequest(\"get_list_tax\"); // get_list_tax",
									"} else {",
									"    console.log(\"Can't get list va, end test\", jsData);",
									"    pm.execution.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-client-id",
								"value": "{{C-client_id}}",
								"type": "text"
							},
							{
								"key": "x-timestamp",
								"value": "{{C-timestamp}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{f1_open_url}}/api/v1/invoice/get-list-payment-method",
							"host": [
								"{{f1_open_url}}"
							],
							"path": [
								"api",
								"v1",
								"invoice",
								"get-list-payment-method"
							],
							"query": [
								{
									"key": "page",
									"value": "{{C-page}}",
									"disabled": true
								},
								{
									"key": "page_size",
									"value": "{{C-page_size}}",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "transaction",
			"item": [
				{
					"name": "get_list_transaction",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");\r",
									"console.log(\"Testcase: \" + testcase);\r",
									"\r",
									"// if(testcase == 4){\r",
									"//     setTimeout(function(){}, 5000);\r",
									"// }\r",
									"\r",
									"let page = pm.environment.get(\"C-page\");\r",
									"let page_size = pm.environment.get(\"C-page_size\");\r",
									"if(!page){\r",
									"    page = 1;\r",
									"    pm.environment.set(\"C-page\",page);\r",
									"\r",
									"    page_size = 20;\r",
									"    pm.environment.set(\"C-page_size\",page_size);\r",
									"}\r",
									"\r",
									"// Example secret key for signing, replace with your actual secret\r",
									"const secretKey = pm.environment.get(\"C-client_key\");\r",
									"console.log(\"secretKey: \" + secretKey);\r",
									"\r",
									"// function ()\r",
									"let today = new Date();\r",
									"let timestamp = Math.floor(today.getTime()/1000) + 30;\r",
									"console.log(\"timestamp: \" + timestamp);\r",
									"\r",
									"// Get method, URL, body, and timestamp\r",
									"const method = pm.request.method;\r",
									"let url = pm.request.url.toString().replace(\"{{f1_open_url}}\",\"\");\r",
									"url = url.replace(\"{{C-page}}\",page);\r",
									"url = url.replace(\"{{C-page_size}}\",page_size);\r",
									"\r",
									"const body = pm.request.body ? pm.request.body.raw : '';\r",
									"// const timestamp = pm.request.headers.get('x-timestamp');\r",
									"\r",
									"// Concatenate the components to form the message to sign\r",
									"const message = `${secretKey}_${method}_${url}_${body || ''}_${timestamp}`;\r",
									"console.log(\"Generated message: \", message);\r",
									"\r",
									"// Generate SHA256 signature\r",
									"const signature = CryptoJS.SHA256(message).toString(CryptoJS.enc.Hex);\r",
									"console.log(\"Generated signature: \", signature);\r",
									"\r",
									"pm.environment.set(\"C-timestamp\",timestamp);\r",
									"\r",
									"// Add the signature to the headers\r",
									"pm.request.headers.add({ key: 'x-signature', value: signature });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let list_func = eval(pm.environment.get(\"list_common_func\"));",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let configs = pm.environment.get(\"C-configs\");",
									"    let page = pm.environment.get(\"C-page\");",
									"    let total_pages = jsData.meta.total_pages;",
									"",
									"    let list_tnx, old_list_tnx;",
									"    // console.log(\"debug total record in page: \" + jsData.data.length);",
									"    switch(testcase){",
									"        case 2:",
									"            list_tnx = pm.environment.get(\"C-list_tnx\");",
									"            if(!list_tnx){",
									"                list_tnx = [];",
									"            }",
									"            break;",
									"        case 4:",
									"            old_list_tnx = pm.environment.get(\"C-old_list_tnx\");",
									"            if(!old_list_tnx){",
									"                old_list_tnx = pm.environment.get(\"C-list_tnx\");",
									"                pm.environment.unset(\"C-list_tnx\");",
									"                pm.environment.set(\"C-old_list_tnx\",old_list_tnx);",
									"            }",
									"",
									"            list_tnx = pm.environment.get(\"C-list_tnx\");",
									"            if(!list_tnx){",
									"                list_tnx = [];",
									"            }",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow\");",
									"            break;",
									"    }",
									"",
									"    for(let item in jsData.data){",
									"        list_tnx[list_tnx.length] = {",
									"            \"transaction_id\":jsData.data[item].transaction_id,",
									"            \"transaction_number\":jsData.data[item].transaction_number,",
									"            \"created_at\":jsData.data[item].created_at,",
									"            \"type\":jsData.data[item].type,",
									"            \"bank_remark\":jsData.data[item].bank_remark,",
									"            \"amount\":jsData.data[item].amount",
									"        }",
									"    }",
									"    pm.environment.set(\"C-list_tnx\",list_tnx);",
									"",
									"    if(page >= total_pages || page >= configs.limit_page){",
									"        // must clear page & page_size",
									"        pm.environment.unset(\"C-page\");",
									"        pm.environment.unset(\"C-page_size\");",
									"",
									"        switch(testcase){",
									"            case 2:",
									"                pm.test(\"Got total tnx!!! \" + list_tnx.length, function () {",
									"                    pm.expect(list_tnx.length > 0).to.be.true;",
									"                });",
									"",
									"                if(configs.test_payment_method == \"bidv\"){ // do BIDV chưa support payment via va",
									"                    pm.execution.setNextRequest(\"get_master_account\"); // get_master_account",
									"                } else if(configs.test_payment_method == \"mb\" || configs.test_payment_method == \"bank_transfer\") {",
									"                    pm.execution.setNextRequest(\"get_list_va\"); // get_list_va, get_list_tax",
									"                } else {",
									"                    pm.execution.setNextRequest(\"get_list_tax\"); // get_list_va, get_list_tax",
									"                }",
									"                break;",
									"            case 4:",
									"                pm.test(\"total tnx increase 1\", function () {",
									"                    pm.expect(list_tnx.length).to.eql(old_list_tnx.length + 1);",
									"                });",
									"",
									"                let payment_obj = pm.environment.get(\"C-payment_obj\");",
									"",
									"                let isFound = false, tnx_obj = null;",
									"                for(let i in jsData.data){",
									"                    if(jsData.data[i].type == \"DR\" && jsData.data[i].transaction_number == payment_obj.transaction_number){",
									"                        isFound = true;",
									"                        tnx_obj = jsData.data[i];",
									"                        // bank_remark",
									"                        pm.test(\"bank_remark is \" + payment_obj.note, function () {",
									"                            pm.expect(jsData.data[i].bank_remark).to.eql(payment_obj.note);",
									"                        });",
									"",
									"                        // amount",
									"                        pm.test(\"amount is \" + payment_obj.amount, function () {",
									"                            pm.expect(jsData.data[i].amount).to.eql(payment_obj.amount);",
									"                        });",
									"",
									"                        // created_at",
									"                        let today = new Date();",
									"                        let value_at = today.toISOString();",
									"                        pm.test(\"created_at is \" + value_at, function () {",
									"                            console.log(\"act: \" + jsData.data[i].created_at);",
									"                            pm.expect(jsData.data[i].created_at.substring(0,17)).to.eql(value_at.substring(0,17));",
									"                        });",
									"                        break;",
									"                    }",
									"                }",
									"",
									"                pm.test(\"Found new tnx\", function () {",
									"                    pm.expect(isFound).to.be.true;",
									"                });",
									"",
									"                if(isFound){",
									"                    pm.environment.set(\"C-tnx_obj\",tnx_obj);",
									"                    pm.execution.setNextRequest(\"get_transaction_detail\"); // get_transaction_detail",
									"                } else {",
									"                    // ko tạo tnx thì ko cần check detail",
									"                    pm.execution.setNextRequest(null);",
									"                }",
									"                break;",
									"            default:",
									"                console.log(\"Missing flow, end test\");",
									"                pm.execution.setNextRequest(null);",
									"        }",
									"    } else {",
									"        page++;",
									"        pm.environment.set(\"C-page\",page);",
									"",
									"        console.log(\"view next page (\" + page + \") to get more tnx\");",
									"        postman.setNextRequest(\"get_list_transaction\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get list va, end test\", jsData);",
									"    pm.execution.setNextRequest(null);",
									"}2"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-client-id",
								"value": "{{C-client_id}}",
								"type": "text"
							},
							{
								"key": "x-timestamp",
								"value": "{{C-timestamp}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{f1_open_url}}/api/v1/transaction/get-list?page={{C-page}}&page_size={{C-page_size}}",
							"host": [
								"{{f1_open_url}}"
							],
							"path": [
								"api",
								"v1",
								"transaction",
								"get-list"
							],
							"query": [
								{
									"key": "page",
									"value": "{{C-page}}"
								},
								{
									"key": "page_size",
									"value": "{{C-page_size}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get_transaction_detail",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");\r",
									"console.log(\"Testcase: \" + testcase);\r",
									"\r",
									"let tnx_obj = pm.environment.get(\"C-tnx_obj\");\r",
									"let tnx_number = tnx_obj.transaction_number;\r",
									"pm.environment.set(\"C-tnx_number\",tnx_number);\r",
									"\r",
									"// Example secret key for signing, replace with your actual secret\r",
									"const secretKey = pm.environment.get(\"C-client_key\");\r",
									"console.log(\"secretKey: \" + secretKey);\r",
									"\r",
									"// function ()\r",
									"let today = new Date();\r",
									"let timestamp = Math.floor(today.getTime()/1000) + 30;\r",
									"console.log(\"timestamp: \" + timestamp);\r",
									"\r",
									"// Get method, URL, body, and timestamp\r",
									"const method = pm.request.method;\r",
									"let url = pm.request.url.toString().replace(\"{{f1_open_url}}\",\"\");\r",
									"url = url.replace(\"{{C-tnx_number}}\",tnx_number);\r",
									"const body = pm.request.body ? pm.request.body.raw : '';\r",
									"// const timestamp = pm.request.headers.get('x-timestamp');\r",
									"\r",
									"// Concatenate the components to form the message to sign\r",
									"const message = `${secretKey}_${method}_${url}_${body || ''}_${timestamp}`;\r",
									"console.log(\"Generated message: \", message);\r",
									"\r",
									"// Generate SHA256 signature\r",
									"const signature = CryptoJS.SHA256(message).toString(CryptoJS.enc.Hex);\r",
									"console.log(\"Generated signature: \", signature);\r",
									"\r",
									"pm.environment.set(\"C-timestamp\",timestamp);\r",
									"\r",
									"// Add the signature to the headers\r",
									"pm.request.headers.add({ key: 'x-signature', value: signature });\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let configs = pm.environment.get(\"C-configs\");",
									"    let payment_obj = pm.environment.get(\"C-payment_obj\");",
									"    let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"",
									"    switch(testcase){",
									"        case 4:",
									"            console.log(\"debug: \", jsData);",
									"",
									"            console.log(\"-------- End Testsuite 118 --------\");",
									"            pm.execution.setNextRequest(null);",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            pm.execution.setNextRequest(null);",
									"    }",
									"} else {",
									"    console.log(\"Can't get payment detail, end test\", jsData);",
									"    pm.execution.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-client-id",
								"value": "{{C-client_id}}",
								"type": "text"
							},
							{
								"key": "x-timestamp",
								"value": "{{C-timestamp}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{f1_open_url}}/api/v1/transaction/detail/{{C-tnx_number}}",
							"host": [
								"{{f1_open_url}}"
							],
							"path": [
								"api",
								"v1",
								"transaction",
								"detail",
								"{{C-tnx_number}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "tax",
			"item": [
				{
					"name": "get_list_tax",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");\r",
									"console.log(\"Testcase: \" + testcase);\r",
									"\r",
									"let page = pm.environment.get(\"C-page\");\r",
									"let page_size = pm.environment.get(\"C-page_size\");\r",
									"if(!page){\r",
									"    page = 1;\r",
									"    pm.environment.set(\"C-page\",page);\r",
									"\r",
									"    page_size = 20;\r",
									"    pm.environment.set(\"C-page_size\",page_size);\r",
									"}\r",
									"\r",
									"// Example secret key for signing, replace with your actual secret\r",
									"const secretKey = pm.environment.get(\"C-client_key\");\r",
									"console.log(\"secretKey: \" + secretKey);\r",
									"\r",
									"// function ()\r",
									"let today = new Date();\r",
									"let timestamp = Math.floor(today.getTime()/1000) + 30;\r",
									"console.log(\"timestamp: \" + timestamp);\r",
									"\r",
									"// Get method, URL, body, and timestamp\r",
									"const method = pm.request.method;\r",
									"let url = pm.request.url.toString().replace(\"{{f1_open_url}}\",\"\");\r",
									"url = url.replace(\"{{C-page}}\",page);\r",
									"url = url.replace(\"{{C-page_size}}\",page_size);\r",
									"\r",
									"const body = pm.request.body ? pm.request.body.raw : '';\r",
									"// const timestamp = pm.request.headers.get('x-timestamp');\r",
									"\r",
									"// Concatenate the components to form the message to sign\r",
									"const message = `${secretKey}_${method}_${url}_${body || ''}_${timestamp}`;\r",
									"console.log(\"Generated message: \", message);\r",
									"\r",
									"// Generate SHA256 signature\r",
									"const signature = CryptoJS.SHA256(message).toString(CryptoJS.enc.Hex);\r",
									"console.log(\"Generated signature: \", signature);\r",
									"\r",
									"pm.environment.set(\"C-timestamp\",timestamp);\r",
									"\r",
									"// Add the signature to the headers\r",
									"pm.request.headers.add({ key: 'x-signature', value: signature });\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let list_func = eval(pm.environment.get(\"list_common_func\"));",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let configs = pm.environment.get(\"C-configs\");",
									"    // let page = pm.environment.get(\"C-page\");",
									"    // let total_pages = jsData.meta.total_pages;",
									"",
									"    let list_tax = [], old_list_tax;",
									"    // // console.log(\"debug total record in page: \" + jsData.data.length);",
									"    // switch(testcase){",
									"    //     case 2:",
									"    //         list_tax = pm.environment.get(\"C-list_tax\");",
									"    //         if(!list_tax){",
									"    //             list_tax = [];",
									"    //         }",
									"    //         break;",
									"    //     case 4:",
									"    //         old_list_tax = pm.environment.get(\"C-old_list_tax\");",
									"    //         if(!old_list_tax){",
									"    //             old_list_tax = pm.environment.get(\"C-list_tax\");",
									"    //             pm.environment.unset(\"C-list_tax\");",
									"    //             pm.environment.set(\"C-old_list_tax\",old_list_tax);",
									"    //         }",
									"",
									"    //         list_tax = pm.environment.get(\"C-list_tax\");",
									"    //         if(!list_tax){",
									"    //             list_tax = [];",
									"    //         }",
									"    //         break;",
									"    //     default:",
									"    //         console.log(\"Missing flow\");",
									"    //         break;",
									"    // }",
									"",
									"    for(let item in jsData.data){",
									"        list_tax[list_tax.length] = {",
									"            \"tax_id\":jsData.data[item].id,",
									"            \"business_id\":jsData.data[item].business_id,",
									"            \"name\":jsData.data[item].name,",
									"            \"rate\":jsData.data[item].rate,",
									"            \"description\":jsData.data[item].description,",
									"            \"account_id\":jsData.data[item].account_id",
									"        }",
									"    }",
									"    pm.environment.set(\"C-list_tax\",list_tax);",
									"",
									"    // if(page >= total_pages || page >= configs.limit_page){",
									"    //     // must clear page & page_size",
									"    //     pm.environment.unset(\"C-page\");",
									"    //     pm.environment.unset(\"C-page_size\");",
									"",
									"        pm.test(\"Got list_tax \" + list_tax.length, function () {",
									"            pm.expect(list_tax.length > 0).to.be.true;",
									"        });",
									"        console.log(\"tax_list: \", list_tax);",
									"",
									"        pm.execution.setNextRequest(\"create_invoice\"); // create_invoice",
									"    // } else {",
									"    //     page++;",
									"    //     pm.environment.set(\"C-page\",page);",
									"",
									"    //     console.log(\"view next page (\" + page + \") to get more tax\");",
									"    //     postman.setNextRequest(\"get_list_tax\");",
									"    // }",
									"} else {",
									"    console.log(\"Can't get list tax, end test\", jsData);",
									"    pm.execution.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-client-id",
								"value": "{{C-client_id}}",
								"type": "text"
							},
							{
								"key": "x-timestamp",
								"value": "{{C-timestamp}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{f1_open_url}}/api/v1/invoice/get-list-tax",
							"host": [
								"{{f1_open_url}}"
							],
							"path": [
								"api",
								"v1",
								"invoice",
								"get-list-tax"
							],
							"query": [
								{
									"key": "page",
									"value": "{{C-page}}",
									"disabled": true
								},
								{
									"key": "page_size",
									"value": "{{C-page_size}}",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "invoice",
			"item": [
				{
					"name": "create_invoice_old",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    console.log(\"debug: \", jsData);",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let invoice_obj = pm.environment.get(\"C-invoice_obj\");",
									"",
									"    let expected_items = [];",
									"    let exp_discount_amount = 0, exp_items_amount = 0, exp_total_amount = 0, exp_tax_amount = 0;",
									"    for(let i in invoice_obj.items){",
									"        let list_tax_i = [];",
									"        let item_tax_amount = 0; // do hiện tại chỉ có 1 tax",
									"        for(let j in invoice_obj.items[i].taxes){",
									"            list_tax_i[list_tax_i.length] = {",
									"                \"tax_id\": invoice_obj.items[i].taxes[j].tax_id,",
									"                \"rate\": invoice_obj.items[i].taxes[j].rate,",
									"                \"amount\": invoice_obj.items[i].taxes[j].amount,",
									"                \"account_id\": invoice_obj.items[i].taxes[j].account_id",
									"            }",
									"            if(\"item_tax_amount\" in invoice_obj.items[i].taxes[j]){",
									"                item_tax_amount += invoice_obj.items[i].taxes[j].item_tax_amount;",
									"            } else {",
									"                item_tax_amount += invoice_obj.items[i].taxes[j].amount;",
									"            }",
									"",
									"        }",
									"",
									"        expected_items[expected_items.length] = {",
									"            \"product_id\": invoice_obj.items[i].product_id,",
									"            \"sku_id\": invoice_obj.items[i].sku_id,",
									"            \"item_amount\": invoice_obj.items[i].item_amount,",
									"            \"discount_amount\": invoice_obj.items[i].discount_amount,",
									"            \"item_tax_amount\": item_tax_amount,",
									"            \"before_tax_amount\": invoice_obj.items[i].before_tax_amount,",
									"            \"after_tax_amount\": invoice_obj.items[i].after_tax_amount,",
									"            \"total_item_amount\": invoice_obj.items[i].total_item_amount,",
									"            \"currency\": \"\",",
									"            \"quantity\": invoice_obj.items[i].quantity,",
									"            \"account_id\": invoice_obj.items[i].account_id,",
									"            \"note\": invoice_obj.items[i].note,",
									"            \"taxes\": list_tax_i",
									"        }",
									"        exp_discount_amount += invoice_obj.items[i].discount_amount;",
									"        exp_items_amount += invoice_obj.items[i].total_item_amount;",
									"        exp_total_amount += invoice_obj.items[i].total_amount;",
									"        exp_tax_amount += item_tax_amount;",
									"        // console.log(\"debug exp_tax_amount: \" + exp_tax_amount);",
									"    }",
									"    invoice_obj.invoice_id = jsData.data.id;",
									"    invoice_obj.system_code = jsData.data.system_code;",
									"",
									"    invoice_obj.expected_items = expected_items;",
									"    invoice_obj.exp_tax_amount = exp_tax_amount;",
									"    invoice_obj.exp_discount_amount = exp_discount_amount;",
									"    invoice_obj.exp_total_amount = exp_total_amount;",
									"    invoice_obj.exp_items_amount = exp_items_amount;",
									"",
									"    // total_amount",
									"    pm.test(\"total_amount is \" + exp_total_amount, function () {",
									"        pm.expect(exp_total_amount).to.eql(jsData.data.total_amount);",
									"    });",
									"",
									"    // tax_amount",
									"    pm.test(\"tax_amount is \" + exp_tax_amount, function () {",
									"        pm.expect(exp_tax_amount).to.eql(jsData.data.tax_amount);",
									"    });",
									"",
									"    // contact_name",
									"    pm.test(\"contact_name of invoice correctly! \" + invoice_obj.customer.name, function () {",
									"        pm.expect(invoice_obj.customer.name == jsData.data.contact_info.contact_name).to.be.true;",
									"    });",
									"",
									"    // order_code",
									"    pm.test(\"order_code of invoice correctly! \" + invoice_obj.order_code, function () {",
									"        pm.expect(invoice_obj.order_code == jsData.data.order_code).to.be.true;",
									"    });",
									"    ",
									"    // reference_code",
									"    pm.test(\"reference_code of invoice correctly! \" + invoice_obj.reference_code, function () {",
									"        pm.expect(invoice_obj.reference_code == jsData.data.reference_code).to.be.true;",
									"    });",
									"",
									"    // value_at",
									"    pm.test(\"value_at of invoice correctly! \" + invoice_obj.value_at, function () {",
									"        pm.expect(invoice_obj.value_at.substring(0,19) == jsData.data.value_at.substring(0,19)).to.be.true;",
									"    });",
									"",
									"    // due_at",
									"    pm.test(\"due_at of invoice correctly! \" + invoice_obj.due_at, function () {",
									"        pm.expect(invoice_obj.due_at.substring(0,19) == jsData.data.due_at.substring(0,19)).to.be.true;",
									"    });",
									"",
									"    // payment_config",
									"",
									"    pm.environment.set(\"C-invoice_obj\",invoice_obj);",
									"    testcase++;",
									"    pm.environment.set(\"C-testcase\",testcase);",
									"    pm.execution.setNextRequest(\"get_invoice_detail\"); // get_invoice_detail",
									"} else {",
									"    console.log(\"Can't create invoice, end test\", jsData);",
									"    pm.execution.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let list_func = eval(pm.environment.get(\"list_common_func\"));\r",
									"let configs = pm.environment.get(\"C-configs\");\r",
									"\r",
									"let testcase = pm.environment.get(\"C-testcase\");\r",
									"console.log(\"Testcase: \" + testcase);\r",
									"\r",
									"// Example secret key for signing, replace with your actual secret\r",
									"const secretKey = pm.environment.get(\"C-client_key\");\r",
									"console.log(\"secretKey: \" + secretKey);\r",
									"\r",
									"let today = new Date();\r",
									"let timestamp = Math.floor(today.getTime()/1000) + 30;\r",
									"console.log(\"timestamp: \" + timestamp);\r",
									"\r",
									"// Get method, URL, body, and timestamp\r",
									"const method = pm.request.method;\r",
									"let url = pm.request.url.toString().replace(\"{{f1_open_url}}\",\"\");\r",
									"// console.log(\" ======== url: \", url);\r",
									"\r",
									"let customer_code = list_func.randomChars(8);\r",
									"\r",
									"let d30_stp = Math.floor(today.getTime()/1000) + 30*24*60*60;\r",
									"let d30 = new Date(d30_stp*1000);\r",
									"let current_timestamp = Math.floor(today.getTime()/1000);\r",
									"let past_date, past_due_date;\r",
									"let last_date_stp = Math.floor(today.getTime()/1000) - 24*60*60;\r",
									"let last_date = new Date(last_date_stp*1000);\r",
									"let next_date_stp = Math.floor(today.getTime()/1000) + 24*60*60;\r",
									"let next_date = new Date(next_date_stp*1000);\r",
									"let ranTimeCase = list_func.getRandomInt(1,6);\r",
									"pm.environment.set(\"C-ranTimeCase\",ranTimeCase);\r",
									"// console.log(\"ranTimeCase: \" + ranTimeCase);\r",
									"switch(ranTimeCase){\r",
									"    case 1:\r",
									"        // due_at + 61d < current < due_at + 91d => overdue 60-90\r",
									"        past_date = new Date((current_timestamp - 91*24*60*60)*1000);\r",
									"        past_due_date = new Date((current_timestamp - 61*24*60*60)*1000);\r",
									"        created_order_at = past_date.toISOString();\r",
									"        due_at = past_due_date.toISOString();\r",
									"        break;\r",
									"    case 2:\r",
									"        // created_order_at == current => ngay hiện tại, ko overdue\r",
									"        // include due 7d (ko tính hiện tại, tính +1 đến +7)\r",
									"        created_order_at = today.toISOString();\r",
									"        let in_7d = list_func.getRandomInt(1,7);\r",
									"        due_at = new Date((current_timestamp + in_7d*24*60*60)*1000);\r",
									"        due_at = due_at.toISOString();\r",
									"        break;\r",
									"    case 3:\r",
									"        // created_order_at > current => tương lai, ko overdue\r",
									"        // include due 7+d\r",
									"        created_order_at = next_date.toISOString();\r",
									"        let more_7d = list_func.getRandomInt(8,30);\r",
									"        due_at = new Date((current_timestamp + more_7d*24*60*60)*1000);\r",
									"        due_at = due_at.toISOString();\r",
									"        break;\r",
									"    case 4:\r",
									"        // due_at + 91d < current => overdue > 90d\r",
									"        past_date = new Date((current_timestamp - 121*24*60*60)*1000);\r",
									"        past_due_date = new Date((current_timestamp - 91*24*60*60)*1000);\r",
									"        created_order_at = past_date.toISOString();\r",
									"        due_at = past_due_date.toISOString();\r",
									"        break;\r",
									"    case 5:\r",
									"        // due_at + 31d < current < due_at + 61d => overdue 30-60\r",
									"        past_date = new Date((current_timestamp - 61*24*60*60)*1000);\r",
									"        past_due_date = new Date((current_timestamp - 31*24*60*60)*1000);\r",
									"        created_order_at = past_date.toISOString();\r",
									"        due_at = past_due_date.toISOString();\r",
									"        break;\r",
									"    default:\r",
									"        // due_at < current => overdue < 30d\r",
									"        let ranPastDay = list_func.getRandomInt(1,29);\r",
									"        past_date = new Date((current_timestamp - (ranPastDay+30)*24*60*60)*1000);\r",
									"        past_due_date = new Date((current_timestamp - ranPastDay*24*60*60)*1000);\r",
									"        created_order_at = past_date.toISOString();\r",
									"        due_at = past_due_date.toISOString();\r",
									"        break;\r",
									"}\r",
									"\r",
									"let list_tax = pm.environment.get(\"C-list_tax\");\r",
									"console.log(\"list_tax: \" + list_tax.length);\r",
									"\r",
									"let list_product = pm.environment.get(\"C-list_product\"); // hiện tại sẽ undefined, sau sẽ handle API get list product từ book\r",
									"let items = [], payment_config = [];\r",
									"let ranListPDPos;\r",
									"if(!list_product){\r",
									"    ranListPDPos = list_func.getRandomInt(1,3);\r",
									"    console.log(\"ranListPDPos: \" + ranListPDPos);\r",
									"    for(let i = 0; i < ranListPDPos; i++){\r",
									"        let randTotalTax_i = list_func.getRandomInt(0,1); // có 1 tax hoặc ko có tax\r",
									"        let randListPos_i = list_func.randNotDupe(0,list_tax.length - 1,randTotalTax_i);\r",
									"        let taxes_i = [];\r",
									"        let quantity_i = list_func.getRandomInt(1,3);\r",
									"\r",
									"        // amount của tax chỉ là tượng trưng, server sẽ tự tính lại dựa vào tax_id (cthuc hiện tại đang sai vì chưa discount)\r",
									"        for(let j in randListPos_i){\r",
									"            taxes_i[taxes_i.length] = {\r",
									"                \"account_id\": list_tax[randListPos_i[j]].account_id, // tạm thời chưa tạo ra account_id nên tạm ignore\r",
									"                \"rate\": list_tax[randListPos_i[j]].rate,\r",
									"                \"amount\": 0, // sẽ được tính lại\r",
									"                \"name\": list_tax[randListPos_i[j]].name, // field này không cần\r",
									"                \"tax_id\": list_tax[randListPos_i[j]].tax_id\r",
									"            };\r",
									"        }\r",
									"\r",
									"        items[items.length] = {\r",
									"            \"name\": \"[Open API] product \" + list_func.randomChars(8),\r",
									"            \"price\": list_func.getRandomInt(10,500)*1000,\r",
									"            \"quantity\":quantity_i,\r",
									"            // \"sku_code\": \"\",\r",
									"            \"taxes\": taxes_i\r",
									"        }\r",
									"    }\r",
									"} else {\r",
									"    console.log(\"\");\r",
									"    ranListPDPos = randNotDupe(0,list_product.length - 1,randTotalProduct);\r",
									"    for(let i in ranListPDPos){\r",
									"        let randTotalTax_i = 1// list_func.getRandomInt(0,1);\r",
									"        let randListPos_i = list_func.randNotDupe(0,list_tax.length - 1,randTotalTax_i);\r",
									"        let taxes_i = [];\r",
									"        let quantity_i = list_func.getRandomInt(1,3);\r",
									"\r",
									"        // amount của tax chỉ là tượng trưng, server sẽ tự tính lại dựa vào tax_id (cthuc hiện tại đang sai vì chưa discount)\r",
									"        for(let j in randListPos_i){\r",
									"            taxes_i[taxes_i.length] = {\r",
									"                \"account_id\": list_tax[randListPos_i[j]].account_id, // tạm thời chưa tạo ra account_id nên tạm ignore\r",
									"                \"rate\": list_tax[randListPos_i[j]].rate,\r",
									"                \"amount\": 0, // sẽ được tính lại\r",
									"                \"name\": list_tax[randListPos_i[j]].name, // field này không cần\r",
									"                \"tax_id\": list_tax[randListPos_i[j]].tax_id\r",
									"            };\r",
									"        }\r",
									"\r",
									"        items[items.length] = {\r",
									"            \"account_id\": list_product[ranListPDPos[i]].income_account_id,\r",
									"            \"item_amount\": list_product[ranListPDPos[i]].price,\r",
									"            // \"currency\": \"\",\r",
									"            \"name\": list_product[ranListPDPos[i]].name,\r",
									"            \"note\": \"[API] note for product \" + list_product[ranListPDPos[i]].name,\r",
									"            \"quantity\":quantity_i,\r",
									"            \"product_id\": list_product[ranListPDPos[i]].product_id,\r",
									"            \"sku_id\": list_product[ranListPDPos[i]].sku_id,\r",
									"            \"taxes\": taxes_i\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"let code = list_func.randomChars(5);\r",
									"let payment_method_list = pm.environment.get(\"C-payment_method_list\");\r",
									"// console.log(\"payment_method_list: \", payment_method_list);\r",
									"// for(let i in payment_method_list){ // ở script tạo, mỗi loại method chỉ lấy 1 id (MB, BIDV, Shinhan) chưa support GP\r",
									"//     payment_config[payment_config.length] = payment_method_list[i].payment_method_id;\r",
									"// }\r",
									"payment_config = [\"5431ad2c-4564-42ff-8393-abca3848debd\"];\r",
									"\r",
									"let sub_total_amount = 0;\r",
									"for(let i in items){\r",
									"    sub_total_amount += items[i].price*items[i].quantity;\r",
									"}\r",
									"\r",
									"let discounts = [];\r",
									"if(configs.create_has_discount){\r",
									"    if(list_func.getRandomInt(0,1)){ // list_func.getRandomInt(0,1)\r",
									"        discounts[discounts.length] = {\r",
									"            \"note\": \"\",\r",
									"            \"is_rate\": true,\r",
									"            \"value\": list_func.getRandomInt(10,800) / 10\r",
									"        }\r",
									"    } else {\r",
									"        discounts[discounts.length] = {\r",
									"            \"note\": \"\",\r",
									"            \"is_rate\": false,\r",
									"            \"value\": Math.ceil(sub_total_amount / list_func.getRandomInt(2,9)) // list_func.getRandomInt(2,10)\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"// tính lại giá\r",
									"let term_discount;\r",
									"let total_discount_amount = 0;\r",
									"console.log(\"sub_total_amount: \" + sub_total_amount);\r",
									"let tax_mode = pm.environment.get(\"C-tax_mode\");\r",
									"let case_;\r",
									"switch(configs.tax_create_type){\r",
									"    case \"price_excluding_tax\":\r",
									"        if(tax_mode == \"after_tax\"){\r",
									"            console.log(\"Giá chưa bao gồm thuế, giảm giá sau thuế\");\r",
									"            case_ = 3;\r",
									"        } else {\r",
									"            console.log(\"Giá chưa bao gồm thuế, giảm giá trước thuế\");\r",
									"            case_ = 1;\r",
									"        }\r",
									"        break;\r",
									"    case \"price_including_tax\":\r",
									"        if(tax_mode == \"after_tax\"){\r",
									"            console.log(\"Giá đã bao gồm thuế, giảm giá sau thuế\");\r",
									"            case_ = 4;\r",
									"        } else {\r",
									"            console.log(\"Giá đã bao gồm thuế, giảm giá trước thuế\");\r",
									"            case_ = 2;\r",
									"        }\r",
									"        break;\r",
									"    case \"tax_not_applicable\":\r",
									"    default:\r",
									"        console.log(\"Không apply thuế\");\r",
									"        case_ = 5;\r",
									"}\r",
									"\r",
									"switch(case_){\r",
									"    case 1:\r",
									"        for(let i in discounts){\r",
									"            if(discounts[i].is_rate){\r",
									"                total_discount_amount += Math.round(discounts[i].value*sub_total_amount/100);\r",
									"            } else {\r",
									"                total_discount_amount += Math.round(discounts[i].value);\r",
									"            }\r",
									"        }\r",
									"\r",
									"        // chỉ support case discount_amount - tính round cuối\r",
									"        // sum_total_item_amount = 0;\r",
									"        // for(let i in items){\r",
									"        //     sum_total_item_amount += items[i].price*items[i].quantity;\r",
									"        // }\r",
									"\r",
									"        term_discount = 0;\r",
									"        for(let i in items){\r",
									"            // total_item_amount, before_tax_amount\r",
									"            items[i].total_item_amount = items[i].price*items[i].quantity;\r",
									"            items[i].before_tax_amount = items[i].price*items[i].quantity;\r",
									"\r",
									"            // discount_amount - ko tính round cuối\r",
									"            let discount_i = 0;\r",
									"            for(let j in discounts){\r",
									"                if(discounts[j].is_rate){\r",
									"                    discount_i += Math.round(discounts[j].value*items[i].total_item_amount/100);\r",
									"                } else {\r",
									"                    discount_i += Math.round(discounts[j].value*items[i].total_item_amount/sub_total_amount);\r",
									"                }\r",
									"            }\r",
									"            items[i].discount_amount = discount_i;\r",
									"            // discount_amount - tính round cuối\r",
									"            // let item_total_discount_i = 0;\r",
									"            // if(i != items.length - 1){\r",
									"            //     for(let k in discounts){\r",
									"            //         if(discounts[k].is_rate){\r",
									"            //             // debug\r",
									"            //             item_total_discount_i += Math.round(items[i].before_tax_amount * discounts[k].value/100);\r",
									"            //             // item_total_discount_i += Math.round(items[i].total_item_amount * discounts[k].value/100);\r",
									"            //         } \r",
									"            //         else {\r",
									"            //             // item_total_discount_i += Math.round(discounts[k].value * items[i].before_tax_amount/total_net_amount);\r",
									"            //             item_total_discount_i += Math.round(discounts[k].value * items[i].total_item_amount/sum_total_item_amount);\r",
									"            //         }\r",
									"            //     }\r",
									"            //     items[i].discount_amount = item_total_discount_i;\r",
									"            //     term_discount += item_total_discount_i;\r",
									"            // } else {\r",
									"            //     for(let k in discounts){\r",
									"            //         // ở đây không cần làm tròn nữa vì chỉ là hiệu của 2 số chẵn\r",
									"            //         if(discounts[k].is_rate){ // => case này không cần tính số tổng rồi trừ lại\r",
									"            //             // item_total_discount_i += Math.round(total_net_amount * discounts[k].value/100 - term_discount);\r",
									"            //             item_total_discount_i += Math.round(items[i].before_tax_amount * discounts[k].value/100);\r",
									"            //         } else {\r",
									"            //             item_total_discount_i += Math.round(discounts[k].value - term_discount);\r",
									"            //             // item_total_discount_i += Math.round(discounts[k].value*items[i].before_tax_amount/total_net_amount);\r",
									"            //         }\r",
									"            //     }\r",
									"            //     items[i].discount_amount = item_total_discount_i;\r",
									"            // }\r",
									"\r",
									"            // item_tax_amount\r",
									"            let total_tax_amount_i = 0;\r",
									"            for(let k in items[i].taxes){\r",
									"                for(let j in list_tax){\r",
									"                    if(items[i].taxes[k].tax_id == list_tax[j].tax_id){\r",
									"                        items[i].taxes[k].item_tax_amount = Math.round(list_tax[j].rate*(items[i].total_item_amount - items[i].discount_amount)/100);\r",
									"                        // // update lại amount\r",
									"                        // items[i].taxes[k].amount = items[i].taxes[k].item_tax_amount;\r",
									"                        total_tax_amount_i += Math.round(list_tax[j].rate*(items[i].total_item_amount - items[i].discount_amount)/100);\r",
									"\r",
									"                        // overwrite tax => chỉ đúng nếu có 1 tax\r",
									"                        // items[i].taxes[j] = \r",
									"                        break;\r",
									"                    }\r",
									"                }\r",
									"            }\r",
									"\r",
									"            // after_tax_amount\r",
									"            items[i].after_tax_amount = items[i].before_tax_amount + total_tax_amount_i;\r",
									"\r",
									"            // total_amount\r",
									"            items[i].total_amount = items[i].before_tax_amount - items[i].discount_amount + total_tax_amount_i;\r",
									"        }\r",
									"        break;\r",
									"    case 2:\r",
									"        // sub_total_amount cần được tính lại giá trước thuế\r",
									"        sub_total_amount = 0;\r",
									"        sum_total_item_amount = 0;\r",
									"\r",
									"        // tính lại thuế (thuế chưa giảm giá)\r",
									"        total_net_amount = 0;\r",
									"        for(let i in items){\r",
									"            // total_item_amount\r",
									"            items[i].total_item_amount = items[i].price*items[i].quantity;\r",
									"            sum_total_item_amount += items[i].total_item_amount;\r",
									"\r",
									"            // tổng rate thuế theo item => hiện tại chỉ apply 1 thuế\r",
									"            let total_tax_rate_i = 0;\r",
									"            for(let j in items[i].taxes){\r",
									"                total_tax_rate_i += items[i].taxes[j].rate;\r",
									"            }\r",
									"            items[i].total_tax_rate_i = total_tax_rate_i;\r",
									"\r",
									"            // giá chưa thuế before_tax_amount\r",
									"            let item_net_amount_i = Math.round(items[i].total_item_amount / (1 + items[i].total_tax_rate_i/100));\r",
									"            items[i].before_tax_amount = item_net_amount_i;\r",
									"\r",
									"            total_net_amount += item_net_amount_i;\r",
									"        }\r",
									"\r",
									"        // chỉ support 1 discount trong 1 invoice\r",
									"        term_discount = 0;\r",
									"        for(let i in items){\r",
									"            // giảm giá\r",
									"            let item_total_discount_i = 0;\r",
									"            if(i != items.length - 1){\r",
									"                for(let k in discounts){\r",
									"                    if(discounts[k].is_rate){\r",
									"                        // debug\r",
									"                        item_total_discount_i += Math.round(items[i].before_tax_amount * discounts[k].value/100);\r",
									"                        // item_total_discount_i += Math.round(items[i].total_item_amount * discounts[k].value/100);\r",
									"                    } \r",
									"                    else {\r",
									"                        // item_total_discount_i += Math.round(discounts[k].value * items[i].before_tax_amount/total_net_amount);\r",
									"                        item_total_discount_i += Math.round(discounts[k].value * items[i].total_item_amount/sum_total_item_amount);\r",
									"                    }\r",
									"                }\r",
									"                items[i].discount_amount = item_total_discount_i;\r",
									"                term_discount += item_total_discount_i;\r",
									"\r",
									"            } else {\r",
									"                for(let k in discounts){\r",
									"                    // ở đây không cần làm tròn nữa vì chỉ là hiệu của 2 số chẵn\r",
									"                    if(discounts[k].is_rate){ // => case này không cần tính số tổng rồi trừ lại\r",
									"                        // item_total_discount_i += Math.round(total_net_amount * discounts[k].value/100 - term_discount);\r",
									"                        item_total_discount_i += Math.round(items[i].before_tax_amount * discounts[k].value/100);\r",
									"                    } else {\r",
									"                        item_total_discount_i += Math.round(discounts[k].value - term_discount);\r",
									"                        // item_total_discount_i += Math.round(discounts[k].value*items[i].before_tax_amount/total_net_amount);\r",
									"                    }\r",
									"                }\r",
									"                items[i].discount_amount = item_total_discount_i;\r",
									"            }\r",
									"\r",
									"            // giá sau discount => after_tax_amount\r",
									"            let item_net_amount_after_discount_i = items[i].before_tax_amount - items[i].discount_amount;\r",
									"            items[i].after_tax_amount = item_net_amount_after_discount_i;\r",
									"            sub_total_amount += item_net_amount_after_discount_i;\r",
									"\r",
									"            // tính lại thuế (thuế đã giảm giá)\r",
									"            let total_tax_amount_i = 0;\r",
									"            for(let j in items[i].taxes){\r",
									"                items[i].taxes[j].amount = Math.round(items[i].after_tax_amount * items[i].taxes[j].rate/100);\r",
									"                total_tax_amount_i += items[i].taxes[j].amount;\r",
									"            }\r",
									"\r",
									"            // total_amount\r",
									"            items[i].total_amount = items[i].before_tax_amount - items[i].discount_amount + total_tax_amount_i;\r",
									"        }\r",
									"        break;\r",
									"    case 3:\r",
									"        // sub_total_amount cần được tính lại giá sau thuế => rule mới, vẫn giữ giá trước thuế\r",
									"        sub_total_amount = 0;\r",
									"\r",
									"        for(let i in items){\r",
									"            // total_item_amount, before_tax_amount\r",
									"            items[i].total_item_amount = items[i].price*items[i].quantity;\r",
									"            items[i].before_tax_amount = items[i].price*items[i].quantity;\r",
									"\r",
									"            // item_tax_amount\r",
									"            let total_tax_amount_i = 0;\r",
									"            for(let k in items[i].taxes){\r",
									"                for(let j in list_tax){\r",
									"                    if(items[i].taxes[k].tax_id == list_tax[j].tax_id){\r",
									"                        // hiện tại chỉ apply 1 tax, nếu hơn phải update lại\r",
									"                        items[i].taxes[k].item_tax_amount = Math.round(list_tax[j].rate * items[i].total_item_amount/100);\r",
									"                        total_tax_amount_i += Math.round(list_tax[j].rate * items[i].total_item_amount/100);\r",
									"                        break;\r",
									"                    }\r",
									"                }\r",
									"            }\r",
									"\r",
									"            // after_tax_amount\r",
									"            items[i].after_tax_amount = items[i].before_tax_amount + total_tax_amount_i;\r",
									"            // sub_total_amount += items[i].after_tax_amount;\r",
									"            sub_total_amount += items[i].before_tax_amount;\r",
									"        }\r",
									"        console.log(\"new sub_total_amount: \" + sub_total_amount);\r",
									"\r",
									"        for(let i in discounts){\r",
									"            if(discounts[i].is_rate){\r",
									"                total_discount_amount += Math.round(discounts[i].value * sub_total_amount/100);\r",
									"            } else {\r",
									"                total_discount_amount += Math.round(discounts[i].value);\r",
									"            }\r",
									"        }\r",
									"\r",
									"        for(let i in items){\r",
									"            // discount_amount\r",
									"            let discount_i = 0;\r",
									"            for(let j in discounts){\r",
									"                if(discounts[j].is_rate){\r",
									"                    discount_i += Math.round(discounts[j].value * items[i].after_tax_amount/100);\r",
									"                    // discount_i += Math.round(discounts[j].value * items[i].before_tax_amount/100);\r",
									"                } else {\r",
									"                    // discount_i += Math.round(discounts[j].value * items[i].after_tax_amount/sub_total_amount);\r",
									"                    discount_i += Math.round(discounts[j].value * items[i].before_tax_amount/sub_total_amount);\r",
									"                }\r",
									"            }\r",
									"            items[i].discount_amount = discount_i;\r",
									"\r",
									"            // total_amount\r",
									"            if(items[i].taxes.length > 0){\r",
									"                items[i].total_amount = items[i].before_tax_amount - items[i].discount_amount + items[i].taxes[0].item_tax_amount;\r",
									"            } else {\r",
									"                items[i].total_amount = items[i].before_tax_amount - items[i].discount_amount;\r",
									"            }\r",
									"        }\r",
									"        break;\r",
									"    case 4:\r",
									"        // sub_total_amount cần được tính lại giá trước thuế\r",
									"        sub_total_amount = 0;\r",
									"        sum_total_item_amount = 0;\r",
									"\r",
									"        // tính lại thuế (thuế chưa giảm giá)\r",
									"        total_net_amount = 0;\r",
									"        for(let i in items){\r",
									"            // total_item_amount\r",
									"            items[i].total_item_amount = items[i].price*items[i].quantity;\r",
									"\r",
									"            sum_total_item_amount += items[i].total_item_amount;\r",
									"\r",
									"            // tổng rate thuế theo item => hiện tại chỉ apply 1 thuế\r",
									"            let total_tax_rate_i = 0;\r",
									"            for(let j in items[i].taxes){\r",
									"                total_tax_rate_i += items[i].taxes[j].rate;\r",
									"            }\r",
									"            items[i].total_tax_rate_i = total_tax_rate_i;\r",
									"\r",
									"            // giá chưa thuế before_tax_amount\r",
									"            let item_net_amount_i = Math.round(items[i].total_item_amount / (1 + items[i].total_tax_rate_i/100));\r",
									"            items[i].before_tax_amount = item_net_amount_i;\r",
									"\r",
									"            total_net_amount += item_net_amount_i;\r",
									"        }\r",
									"\r",
									"        // chỉ support 1 discount trong 1 invoice\r",
									"        term_discount = 0;\r",
									"        for(let i in items){\r",
									"            // giảm giá => tạm thời ko tính ra số cuối để trừ, nếu PO yêu cầu thì update lại\r",
									"            let item_total_discount_i = 0;\r",
									"            // if(i != items.length - 1){\r",
									"                for(let k in discounts){\r",
									"                    if(discounts[k].is_rate){\r",
									"                        // item_total_discount_i += Math.round(items[i].before_tax_amount * discounts[k].value/100);\r",
									"                        item_total_discount_i += Math.round(items[i].total_item_amount * discounts[k].value/100);\r",
									"                    } else {\r",
									"                        // item_total_discount_i += Math.round(discounts[k].value * items[i].before_tax_amount/total_net_amount);\r",
									"                        item_total_discount_i += Math.round(discounts[k].value * items[i].total_item_amount/sum_total_item_amount);\r",
									"                    }\r",
									"                }\r",
									"                items[i].discount_amount = item_total_discount_i;\r",
									"                term_discount += item_total_discount_i;\r",
									"\r",
									"            // } else {\r",
									"            //     for(let k in discounts){\r",
									"            //         // ở đây không cần làm tròn nữa vì chỉ là hiệu của 2 số chẵn\r",
									"            //         if(discounts[k].is_rate){\r",
									"            //             // item_total_discount_i += Math.round(total_net_amount * discounts[k].value/100 - term_discount);\r",
									"            //             item_total_discount_i += Math.round(total_net_amount * discounts[k].value/100 - term_discount);\r",
									"            //         } else {\r",
									"            //             item_total_discount_i += Math.round(discounts[k].value - term_discount);\r",
									"            //             // item_total_discount_i += Math.round(discounts[k].value*items[i].before_tax_amount/total_net_amount);\r",
									"            //         }\r",
									"            //     }\r",
									"            //     items[i].discount_amount = item_total_discount_i;\r",
									"            // }\r",
									"            // giá sau discount => after_tax_amount\r",
									"            let item_net_amount_after_discount_i = items[i].before_tax_amount - items[i].discount_amount;\r",
									"            items[i].after_tax_amount = item_net_amount_after_discount_i;\r",
									"            sub_total_amount += item_net_amount_after_discount_i;\r",
									"\r",
									"            // tính lại thuế (thuế đã giảm giá)\r",
									"            let total_tax_amount_i = 0;\r",
									"            for(let j in items[i].taxes){\r",
									"                items[i].taxes[j].amount = Math.round(items[i].before_tax_amount * items[i].taxes[j].rate/100);\r",
									"                total_tax_amount_i += items[i].taxes[j].amount;\r",
									"            }\r",
									"\r",
									"            // total_amount\r",
									"            items[i].total_amount = items[i].before_tax_amount - items[i].discount_amount + total_tax_amount_i;\r",
									"        }\r",
									"        break;\r",
									"    case 5:\r",
									"    default:\r",
									"        for(let i in discounts){\r",
									"            if(discounts[i].is_rate){\r",
									"                total_discount_amount += Math.round(discounts[i].value*sub_total_amount/100);\r",
									"            } else {\r",
									"                total_discount_amount += Math.round(discounts[i].value);\r",
									"            }\r",
									"        }\r",
									"\r",
									"        for(let i in items){\r",
									"            // total_item_amount, before_tax_amount\r",
									"            items[i].total_item_amount = items[i].price*items[i].quantity;\r",
									"            items[i].before_tax_amount = items[i].price*items[i].quantity;\r",
									"\r",
									"            // discount_amount\r",
									"            let discount_i = 0;\r",
									"            for(let j in discounts){\r",
									"                if(discounts[j].is_rate){\r",
									"                    discount_i += Math.round(discounts[j].value*items[i].total_item_amount/100);\r",
									"                } else {\r",
									"                    discount_i += Math.round(discounts[j].value*items[i].total_item_amount/sub_total_amount);\r",
									"                }\r",
									"            }\r",
									"            items[i].discount_amount = discount_i;\r",
									"\r",
									"            // item_tax_amount\r",
									"\r",
									"            // after_tax_amount\r",
									"            items[i].after_tax_amount = items[i].before_tax_amount;\r",
									"\r",
									"            // total_amount\r",
									"            items[i].total_amount = items[i].before_tax_amount - items[i].discount_amount;\r",
									"        }\r",
									"        break;\r",
									"}\r",
									"\r",
									"let body = {\r",
									"    \"client_id\": pm.environment.get(\"C-client_id\"),\r",
									"    \"customer\": { // customer này sẽ dc validate những field nào, nếu có mixmatch thì ghi đè hay báo lỗi\r",
									"        \"address\": \"\",\r",
									"        \"customer_code\": customer_code,\r",
									"        \"email\": \"\",\r",
									"        \"name\": \"[Open API] customer \" + customer_code,\r",
									"        \"phone\": \"\"\r",
									"    },\r",
									"    \"discounts\": discounts,\r",
									"    \"due_at\": due_at,\r",
									"    // \"id\": \"string\", => case edit\r",
									"    \"items\":items,\r",
									"    \"order_code\": \"OC-\" + code,\r",
									"    \"payment_config\": payment_config,\r",
									"    \"reference_code\": \"RC-\" + code,\r",
									"    \"tax_type\": configs.tax_create_type,\r",
									"    // \"taxes\": [{\r",
									"    //     \"account_id\": 0,\r",
									"    //     \"amount\": 0,\r",
									"    //     \"name\": \"string\",\r",
									"    //     \"rate\": 0,\r",
									"    //     \"tax_id\": \"string\"\r",
									"    // }],\r",
									"    \"value_at\": created_order_at\r",
									"}\r",
									"body = JSON.stringify(body);\r",
									"\r",
									"// Concatenate the components to form the message to sign\r",
									"const message = `${secretKey}_${method}_${url}_${body || ''}_${timestamp}`;\r",
									"console.log(\"Generated message: \", message);\r",
									"\r",
									"// Generate SHA256 signature\r",
									"const signature = CryptoJS.SHA256(message).toString(CryptoJS.enc.Hex);\r",
									"console.log(\"Generated signature: \", signature);\r",
									"\r",
									"pm.environment.set(\"C-timestamp\",timestamp);\r",
									"\r",
									"// Add the signature to the headers\r",
									"pm.request.headers.add({ key: 'x-signature', value: signature });\r",
									"\r",
									"console.log(\"payload: \",JSON.parse(body));\r",
									"pm.environment.set(\"C-payload\",body);\r",
									"pm.environment.set(\"C-invoice_obj\",JSON.parse(body));\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-client-id",
								"value": "{{C-client_id}}",
								"type": "text"
							},
							{
								"key": "x-timestamp",
								"value": "{{C-timestamp}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{f1_open_url}}/api/v1/invoice/create",
							"host": [
								"{{f1_open_url}}"
							],
							"path": [
								"api",
								"v1",
								"invoice",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "create_invoice",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    console.log(\"debug: \", jsData);",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let invoice_obj = pm.environment.get(\"C-invoice_obj\");",
									"",
									"    let expected_items = [];",
									"    let exp_discount_amount = 0, exp_items_amount = 0, exp_total_amount = 0, exp_tax_amount = 0;",
									"    for(let i in invoice_obj.items){",
									"        let item_tax_amount = 0; // do hiện tại chỉ có 1 tax",
									"",
									"        expected_items[expected_items.length] = {",
									"            \"sku_code\": invoice_obj.items[i].code,",
									"            \"sku_id\": invoice_obj.items[i].sku_id,",
									"            \"item_amount\": invoice_obj.items[i].item_amount,",
									"            \"discount_amount\": invoice_obj.items[i].discount_amount,",
									"            \"item_tax_amount\": invoice_obj.items[i].tax_amount,",
									"            \"before_tax_amount\": invoice_obj.items[i].before_tax_amount,",
									"            \"after_tax_amount\": invoice_obj.items[i].after_tax_amount,",
									"            \"total_item_amount\": invoice_obj.items[i].total_item_amount,",
									"            \"quantity\": invoice_obj.items[i].quantity,",
									"            \"note\": invoice_obj.items[i].note,",
									"            \"tax_code\": invoice_obj.items[i].tax_code,",
									"            \"tax_amount\": invoice_obj.items[i].tax_amount,",
									"        }",
									"        exp_discount_amount += invoice_obj.items[i].discount_amount;",
									"        exp_items_amount += invoice_obj.items[i].total_item_amount;",
									"        exp_total_amount += invoice_obj.items[i].total_amount;",
									"        exp_tax_amount += invoice_obj.items[i].tax_amount;",
									"        // console.log(\"debug exp_tax_amount: \" + exp_tax_amount);",
									"    }",
									"",
									"    invoice_obj.invoice_id = jsData.data.invoice_id;",
									"    invoice_obj.system_code = jsData.data.invoice_code;",
									"",
									"    // invoice_obj.expected_items = expected_items;",
									"    invoice_obj.exp_tax_amount = exp_tax_amount;",
									"    invoice_obj.exp_discount_amount = exp_discount_amount;",
									"    invoice_obj.exp_total_amount = exp_total_amount;",
									"    invoice_obj.exp_items_amount = exp_items_amount;",
									"",
									"    console.log(\"invoice_obj: \", invoice_obj);",
									"",
									"    // total_amount",
									"    pm.test(\"total_amount is \" + exp_total_amount, function () {",
									"        pm.expect(exp_total_amount).to.eql(jsData.data.total_amount);",
									"    });",
									"",
									"    // total_tax_amount",
									"    pm.test(\"tax_amount is \" + exp_tax_amount, function () {",
									"        pm.expect(exp_tax_amount).to.eql(jsData.data.total_tax_amount);",
									"    });",
									"",
									"    // total_discount_amount",
									"    pm.test(\"total_discount_amount is \" + exp_discount_amount, function () {",
									"        pm.expect(exp_discount_amount).to.eql(jsData.data.total_discount_amount);",
									"    });",
									"",
									"    // contact_name",
									"    let customer_obj = pm.environment.get(\"C-customer_obj\");",
									"    pm.test(\"contact_name of invoice correctly! \" + customer_obj.name, function () {",
									"        pm.expect(jsData.data.customer.name).to.eql(customer_obj.name);",
									"    });",
									"",
									"    // invoice_code",
									"    pm.test(\"invoice_code of invoice correctly! \" + invoice_obj.invoice_code, function () {",
									"        pm.expect(jsData.data.invoice_code).to.eql(invoice_obj.invoice_code);",
									"    });",
									"    ",
									"    // // reference_code",
									"    // pm.test(\"reference_code of invoice correctly! \" + invoice_obj.reference_code, function () {",
									"    //     pm.expect(invoice_obj.reference_code == jsData.data.reference_code).to.be.true;",
									"    // });",
									"",
									"    // transaction_date",
									"    pm.test(\"transaction_date of invoice correctly! \" + invoice_obj.transaction_date, function () {",
									"        pm.expect(invoice_obj.transaction_date.substring(0,19) == jsData.data.transaction_date.substring(0,19)).to.be.true;",
									"    });",
									"",
									"    // due_date",
									"    pm.test(\"due_date of invoice correctly! \" + invoice_obj.due_date, function () {",
									"        pm.expect(invoice_obj.due_date.substring(0,19) == jsData.data.due_date.substring(0,19)).to.be.true;",
									"    });",
									"",
									"    // payment_config",
									"",
									"    pm.environment.set(\"C-invoice_obj\",invoice_obj);",
									"    testcase++;",
									"    pm.environment.set(\"C-testcase\",testcase);",
									"    pm.execution.setNextRequest(\"get_invoice_detail\"); // get_invoice_detail",
									"} else {",
									"    console.log(\"Can't create invoice, end test\", jsData);",
									"    pm.execution.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let list_func = eval(pm.environment.get(\"list_common_func\"));\r",
									"let configs = pm.environment.get(\"C-configs\");\r",
									"\r",
									"let testcase = pm.environment.get(\"C-testcase\");\r",
									"console.log(\"Testcase: \" + testcase);\r",
									"\r",
									"// Example secret key for signing, replace with your actual secret\r",
									"const secretKey = pm.environment.get(\"C-client_key\");\r",
									"console.log(\"secretKey: \" + secretKey);\r",
									"\r",
									"let today = new Date();\r",
									"let timestamp = Math.floor(today.getTime()/1000) + 30;\r",
									"console.log(\"timestamp: \" + timestamp);\r",
									"\r",
									"// Get method, URL, body, and timestamp\r",
									"const method = pm.request.method;\r",
									"let url = pm.request.url.toString().replace(\"{{f1_open_url}}\",\"\");\r",
									"// console.log(\" ======== url: \", url);\r",
									"\r",
									"let customer_code = list_func.randomChars(8);\r",
									"\r",
									"let d30_stp = Math.floor(today.getTime()/1000) + 30*24*60*60;\r",
									"let d30 = new Date(d30_stp*1000);\r",
									"let current_timestamp = Math.floor(today.getTime()/1000);\r",
									"let past_date, past_due_date;\r",
									"let last_date_stp = Math.floor(today.getTime()/1000) - 24*60*60;\r",
									"let last_date = new Date(last_date_stp*1000);\r",
									"let next_date_stp = Math.floor(today.getTime()/1000) + 24*60*60;\r",
									"let next_date = new Date(next_date_stp*1000);\r",
									"let ranTimeCase = list_func.getRandomInt(1,6);\r",
									"pm.environment.set(\"C-ranTimeCase\",ranTimeCase);\r",
									"// console.log(\"ranTimeCase: \" + ranTimeCase);\r",
									"switch(ranTimeCase){\r",
									"    case 1:\r",
									"        // due_at + 61d < current < due_at + 91d => overdue 60-90\r",
									"        past_date = new Date((current_timestamp - 91*24*60*60)*1000);\r",
									"        past_due_date = new Date((current_timestamp - 61*24*60*60)*1000);\r",
									"        created_order_at = past_date.toISOString();\r",
									"        due_at = past_due_date.toISOString();\r",
									"        break;\r",
									"    case 2:\r",
									"        // created_order_at == current => ngay hiện tại, ko overdue\r",
									"        // include due 7d (ko tính hiện tại, tính +1 đến +7)\r",
									"        created_order_at = today.toISOString();\r",
									"        let in_7d = list_func.getRandomInt(1,7);\r",
									"        due_at = new Date((current_timestamp + in_7d*24*60*60)*1000);\r",
									"        due_at = due_at.toISOString();\r",
									"        break;\r",
									"    case 3:\r",
									"        // created_order_at > current => tương lai, ko overdue\r",
									"        // include due 7+d\r",
									"        created_order_at = next_date.toISOString();\r",
									"        let more_7d = list_func.getRandomInt(8,30);\r",
									"        due_at = new Date((current_timestamp + more_7d*24*60*60)*1000);\r",
									"        due_at = due_at.toISOString();\r",
									"        break;\r",
									"    case 4:\r",
									"        // due_at + 91d < current => overdue > 90d\r",
									"        past_date = new Date((current_timestamp - 121*24*60*60)*1000);\r",
									"        past_due_date = new Date((current_timestamp - 91*24*60*60)*1000);\r",
									"        created_order_at = past_date.toISOString();\r",
									"        due_at = past_due_date.toISOString();\r",
									"        break;\r",
									"    case 5:\r",
									"        // due_at + 31d < current < due_at + 61d => overdue 30-60\r",
									"        past_date = new Date((current_timestamp - 61*24*60*60)*1000);\r",
									"        past_due_date = new Date((current_timestamp - 31*24*60*60)*1000);\r",
									"        created_order_at = past_date.toISOString();\r",
									"        due_at = past_due_date.toISOString();\r",
									"        break;\r",
									"    default:\r",
									"        // due_at < current => overdue < 30d\r",
									"        let ranPastDay = list_func.getRandomInt(1,29);\r",
									"        past_date = new Date((current_timestamp - (ranPastDay+30)*24*60*60)*1000);\r",
									"        past_due_date = new Date((current_timestamp - ranPastDay*24*60*60)*1000);\r",
									"        created_order_at = past_date.toISOString();\r",
									"        due_at = past_due_date.toISOString();\r",
									"        break;\r",
									"}\r",
									"\r",
									"const tag_code_list = [\"TAX_CODE_10\",\"TAX_CODE_8\",\"TAX_CODE_5\",\"TAX_CODE_2\",\"TAX_CODE_0\"];\r",
									"let list_product = pm.environment.get(\"C-list_product\"); // hiện tại sẽ undefined, sau sẽ handle API get list product từ book\r",
									"\r",
									"let items = [], payment_config = [];\r",
									"let ranListPDPos;\r",
									"if(!list_product){\r",
									"    ranListPDPos = list_func.getRandomInt(1,3);\r",
									"    console.log(\"ranListPDPos: \" + ranListPDPos);\r",
									"    for(let i = 0; i < ranListPDPos; i++){\r",
									"        let quantity_i = list_func.getRandomInt(1,3);\r",
									"        let code_i = \"API-PRD-COD-\" + list_func.getRandomInt(1000,9999);\r",
									"\r",
									"        items[items.length] = {\r",
									"            \"code\":code_i,\r",
									"            \"quantity\":quantity_i,\r",
									"            \"tax_code\":tag_code_list[list_func.getRandomInt(0,tag_code_list.length - 1)],\r",
									"            \"unit_price\":list_func.getRandomInt(10,500)*1000,\r",
									"            \"note\":\"note for product \" + code_i\r",
									"        }\r",
									"    }\r",
									"} else {\r",
									"    console.log(\"Get product from list\");\r",
									"    ranListPDPos = list_func.randNotDupe(0,list_product.length - 1,list_func.getRandomInt(2,3));\r",
									"    for(let i in ranListPDPos){\r",
									"        let quantity_i = list_func.getRandomInt(1,3);\r",
									"\r",
									"        items[items.length] = {\r",
									"            \"code\":list_product[ranListPDPos[i]].sku_code,\r",
									"            \"quantity\":quantity_i,\r",
									"            \"tax_code\":tag_code_list[list_func.getRandomInt(0,tag_code_list.length - 1)],\r",
									"            \"unit_price\":list_product[ranListPDPos[i]].sale_price,\r",
									"            \"note\": \"[API] note for product \" + list_product[ranListPDPos[i]].item_name,\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"let code = list_func.randomChars(5);\r",
									"let sub_total_amount = 0;\r",
									"for(let i in items){\r",
									"    sub_total_amount += items[i].unit_price*items[i].quantity;\r",
									"}\r",
									"\r",
									"let discounts, discount_value;\r",
									"if(configs.create_has_discount){\r",
									"    if(list_func.getRandomInt(0,1)){ // list_func.getRandomInt(0,1)\r",
									"        discount_value = list_func.getRandomInt(10,800) / 10;\r",
									"        discounts = {\r",
									"            \"is_rate\": true,\r",
									"            \"value\": discount_value,\r",
									"            \"type\": \"percentage\" // percentage, amount\r",
									"        }\r",
									"    } else {\r",
									"        discount_value = Math.ceil(sub_total_amount / list_func.getRandomInt(2,9));\r",
									"        discounts = {\r",
									"            \"is_rate\": false,\r",
									"            \"value\": discount_value, // list_func.getRandomInt(2,10)\r",
									"            \"type\": \"amount\" // percentage, amount\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"// tính lại giá\r",
									"let term_discount;\r",
									"let total_discount_amount = 0;\r",
									"console.log(\"sub_total_amount: \" + sub_total_amount);\r",
									"let discount_mode = pm.environment.get(\"C-discount_mode\");\r",
									"let case_;\r",
									"switch(configs.tax_create_type){\r",
									"    case \"price_excluding_tax\":\r",
									"        if(discount_mode == \"after_tax\"){\r",
									"            console.log(\"Giá chưa bao gồm thuế, giảm giá sau thuế\");\r",
									"            case_ = 3;\r",
									"        } else {\r",
									"            console.log(\"Giá chưa bao gồm thuế, giảm giá trước thuế\");\r",
									"            case_ = 1;\r",
									"        }\r",
									"        break;\r",
									"    case \"price_including_tax\":\r",
									"        if(discount_mode == \"after_tax\"){\r",
									"            console.log(\"Giá đã bao gồm thuế, giảm giá sau thuế\");\r",
									"            case_ = 4;\r",
									"        } else {\r",
									"            console.log(\"Giá đã bao gồm thuế, giảm giá trước thuế\");\r",
									"            case_ = 2;\r",
									"        }\r",
									"        break;\r",
									"    case \"tax_not_applicable\":\r",
									"    default:\r",
									"        console.log(\"Không apply thuế\");\r",
									"        case_ = 5;\r",
									"}\r",
									"\r",
									"switch(case_){\r",
									"    case 1:\r",
									"        if(configs.create_has_discount){\r",
									"            if(discounts.is_rate){\r",
									"                total_discount_amount += Math.round(discounts.value*sub_total_amount/100);\r",
									"            } else {\r",
									"                total_discount_amount += Math.round(discounts.value);\r",
									"            }\r",
									"        } else {\r",
									"            // do nothing\r",
									"        }\r",
									"\r",
									"        term_discount = 0;\r",
									"        for(let i in items){\r",
									"            // total_item_amount, before_tax_amount\r",
									"            items[i].total_item_amount = items[i].unit_price*items[i].quantity;\r",
									"            items[i].before_tax_amount = items[i].unit_price*items[i].quantity;\r",
									"\r",
									"            // discount_amount - ko tính round cuối\r",
									"            let discount_i;\r",
									"            if(configs.create_has_discount){\r",
									"                if(discounts.is_rate){\r",
									"                    discount_i = Math.round(discounts.value*items[i].total_item_amount/100);\r",
									"                } else {\r",
									"                    discount_i = Math.round(discounts.value*items[i].total_item_amount/sub_total_amount);\r",
									"                }\r",
									"                items[i].discount_amount = discount_i;\r",
									"            } else {\r",
									"                items[i].discount_amount = 0;\r",
									"            }\r",
									"\r",
									"            // item_tax_amount\r",
									"            let total_tax_amount_i = Math.round(items[i].tax_code.replace(/\\D/g, '') *(items[i].total_item_amount - items[i].discount_amount)/100);\r",
									"            items[i].tax_amount = total_tax_amount_i;\r",
									"\r",
									"            // after_tax_amount\r",
									"            items[i].after_tax_amount = items[i].before_tax_amount + total_tax_amount_i;\r",
									"\r",
									"            // total_amount\r",
									"            items[i].total_amount = items[i].before_tax_amount - items[i].discount_amount + total_tax_amount_i;\r",
									"        }\r",
									"        break;\r",
									"    case 2:\r",
									"        // sub_total_amount cần được tính lại giá trước thuế\r",
									"        sub_total_amount = 0;\r",
									"        sum_total_item_amount = 0;\r",
									"\r",
									"        // tính lại thuế (thuế chưa giảm giá)\r",
									"        total_net_amount = 0;\r",
									"        for(let i in items){\r",
									"            // total_item_amount\r",
									"            items[i].total_item_amount = items[i].unit_price*items[i].quantity;\r",
									"            sum_total_item_amount += items[i].total_item_amount;\r",
									"\r",
									"            // giá chưa thuế before_tax_amount\r",
									"            let item_net_amount_i = Math.round(items[i].total_item_amount / (1 + items[i].tax_code.replace(/\\D/g, '')/100));\r",
									"            items[i].before_tax_amount = item_net_amount_i;\r",
									"\r",
									"            total_net_amount += item_net_amount_i;\r",
									"        }\r",
									"\r",
									"        // chỉ support 1 discount trong 1 invoice\r",
									"        term_discount = 0;\r",
									"        for(let i in items){\r",
									"            // giảm giá\r",
									"            let item_total_discount_i = 0;\r",
									"            if(configs.create_has_discount){\r",
									"                if(i != items.length - 1){\r",
									"                    if(discounts.is_rate){\r",
									"                        // debug\r",
									"                        item_total_discount_i += Math.round(items[i].before_tax_amount * discounts.value/100);\r",
									"                    } \r",
									"                    else {\r",
									"                        item_total_discount_i += Math.round(discounts.value * items[i].total_item_amount/sum_total_item_amount);\r",
									"                    }\r",
									"                    items[i].discount_amount = item_total_discount_i;\r",
									"                    term_discount += item_total_discount_i;\r",
									"\r",
									"                } else {\r",
									"                    // ở đây không cần làm tròn nữa vì chỉ là hiệu của 2 số chẵn\r",
									"                    if(discounts.is_rate){ // => case này không cần tính số tổng rồi trừ lại\r",
									"                        item_total_discount_i += Math.round(items[i].before_tax_amount * discounts.value/100);\r",
									"                    } else {\r",
									"                        item_total_discount_i += Math.round(discounts.value - term_discount);\r",
									"                    }\r",
									"                    items[i].discount_amount = item_total_discount_i;\r",
									"                }\r",
									"            } else {\r",
									"                items[i].discount_amount = 0;\r",
									"            }\r",
									"\r",
									"            // giá sau discount => after_tax_amount\r",
									"            let item_net_amount_after_discount_i = items[i].before_tax_amount - items[i].discount_amount;\r",
									"            items[i].after_tax_amount = item_net_amount_after_discount_i;\r",
									"            sub_total_amount += item_net_amount_after_discount_i;\r",
									"\r",
									"            // tính lại thuế (thuế đã giảm giá)\r",
									"            let total_tax_amount_i =  Math.round(items[i].after_tax_amount * items[i].tax_code.replace(/\\D/g, '')/100);\r",
									"            items[i].tax_amount = total_tax_amount_i;\r",
									"\r",
									"            // total_amount\r",
									"            items[i].total_amount = items[i].before_tax_amount - items[i].discount_amount + total_tax_amount_i;\r",
									"        }\r",
									"        break;\r",
									"    case 3:\r",
									"        // sub_total_amount cần được tính lại giá sau thuế => rule mới, vẫn giữ giá trước thuế\r",
									"        sub_total_amount = 0;\r",
									"\r",
									"        for(let i in items){\r",
									"            // total_item_amount, before_tax_amount\r",
									"            items[i].total_item_amount = items[i].unit_price*items[i].quantity;\r",
									"            items[i].before_tax_amount = items[i].unit_price*items[i].quantity;\r",
									"\r",
									"            // item_tax_amount\r",
									"            let total_tax_amount_i = Math.round(items[i].tax_code.replace(/\\D/g, '') * items[i].total_item_amount/100);\r",
									"            items[i].tax_amount = total_tax_amount_i;\r",
									"\r",
									"            // after_tax_amount\r",
									"            items[i].after_tax_amount = items[i].before_tax_amount + total_tax_amount_i;\r",
									"            sub_total_amount += items[i].after_tax_amount;\r",
									"            // sub_total_amount += items[i].before_tax_amount;\r",
									"        }\r",
									"        console.log(\"new sub_total_amount: \" + sub_total_amount);\r",
									"        // với case chưa bao gồm thuế và giảm giá sau thuế, phải phân bổ thuế lại theo giá đã bao gồm thuế\r",
									"\r",
									"        if(configs.create_has_discount){\r",
									"            if(discounts.is_rate){\r",
									"                total_discount_amount += Math.round(discounts.value * sub_total_amount/100);\r",
									"            } else {\r",
									"                total_discount_amount += Math.round(discounts.value);\r",
									"            }\r",
									"            console.log(\"total_discount_amount: \" + total_discount_amount);\r",
									"        }\r",
									"\r",
									"        term_discount = 0;\r",
									"        for(let i in items){\r",
									"            // discount_amount\r",
									"            let discount_i;\r",
									"            if(configs.create_has_discount){\r",
									"                if(i != items.length - 1){\r",
									"                    if(discounts.is_rate){\r",
									"                        discount_i = Math.round(discounts.value * items[i].after_tax_amount/100);\r",
									"                    } else {\r",
									"                        discount_i = Math.round(discounts.value * items[i].before_tax_amount/sub_total_amount);\r",
									"                    }\r",
									"                    term_discount += discount_i;\r",
									"                } else {\r",
									"                    discount_i = Math.round(total_discount_amount - term_discount);\r",
									"                }\r",
									"                items[i].discount_amount = discount_i;\r",
									"            } else {\r",
									"                items[i].discount_amount = 0;\r",
									"            }\r",
									"\r",
									"            // total_amount\r",
									"            items[i].total_amount = items[i].before_tax_amount - items[i].discount_amount + items[i].tax_amount;\r",
									"        }\r",
									"        break;\r",
									"    case 4:\r",
									"        // sub_total_amount cần được tính lại giá trước thuế\r",
									"        sub_total_amount = 0;\r",
									"        sum_total_item_amount = 0;\r",
									"\r",
									"        // tính lại thuế (thuế chưa giảm giá)\r",
									"        total_net_amount = 0;\r",
									"        for(let i in items){\r",
									"            // total_item_amount\r",
									"            items[i].total_item_amount = items[i].unit_price*items[i].quantity;\r",
									"\r",
									"            sum_total_item_amount += items[i].total_item_amount;\r",
									"\r",
									"            // giá chưa thuế before_tax_amount\r",
									"            let item_net_amount_i = Math.round(items[i].total_item_amount / (1 + items[i].tax_code.replace(/\\D/g, '')/100));\r",
									"            items[i].before_tax_amount = item_net_amount_i;\r",
									"\r",
									"            total_net_amount += item_net_amount_i;\r",
									"        }\r",
									"\r",
									"        // chỉ support 1 discount trong 1 invoice\r",
									"        term_discount = 0;\r",
									"        for(let i in items){\r",
									"            // giảm giá => tạm thời ko tính ra số cuối để trừ, nếu PO yêu cầu thì update lại\r",
									"            let item_total_discount_i;\r",
									"            if(configs.create_has_discount){\r",
									"                if(discounts.is_rate){\r",
									"                    item_total_discount_i = Math.round(items[i].total_item_amount * discounts.value/100);\r",
									"                } else {\r",
									"                    item_total_discount_i = Math.round(discounts.value * items[i].total_item_amount/sum_total_item_amount);\r",
									"                }\r",
									"                \r",
									"                items[i].discount_amount = item_total_discount_i;\r",
									"                term_discount += item_total_discount_i;\r",
									"            } else {\r",
									"                items[i].discount_amount = 0;\r",
									"            }\r",
									"\r",
									"            // giá sau discount => after_tax_amount\r",
									"            let item_net_amount_after_discount_i = items[i].before_tax_amount - items[i].discount_amount;\r",
									"            items[i].after_tax_amount = item_net_amount_after_discount_i;\r",
									"            sub_total_amount += item_net_amount_after_discount_i;\r",
									"\r",
									"            // tính lại thuế (thuế đã giảm giá)\r",
									"            items[i].tax_amount = Math.round(items[i].before_tax_amount * items[i].tax_code.replace(/\\D/g, '')/100);\r",
									"            let total_tax_amount_i = items[i].tax_amount;\r",
									"\r",
									"            // total_amount\r",
									"            items[i].total_amount = items[i].before_tax_amount - items[i].discount_amount + total_tax_amount_i;\r",
									"        }\r",
									"        break;\r",
									"    case 5:\r",
									"    default:\r",
									"        if(configs.create_has_discount){\r",
									"            if(discounts.is_rate){\r",
									"                total_discount_amount += Math.round(discounts.value*sub_total_amount/100);\r",
									"            } else {\r",
									"                total_discount_amount += Math.round(discounts.value);\r",
									"            }\r",
									"        }\r",
									"\r",
									"        for(let i in items){\r",
									"            // total_item_amount, before_tax_amount\r",
									"            items[i].total_item_amount = items[i].unit_price*items[i].quantity;\r",
									"            items[i].before_tax_amount = items[i].unit_price*items[i].quantity;\r",
									"\r",
									"            // discount_amount\r",
									"            let discount_i = 0;\r",
									"            if(configs.create_has_discount){\r",
									"                if(discounts.is_rate){\r",
									"                    discount_i += Math.round(discounts.value*items[i].total_item_amount/100);\r",
									"                } else {\r",
									"                    discount_i += Math.round(discounts.value*items[i].total_item_amount/sub_total_amount);\r",
									"                }\r",
									"                items[i].discount_amount = discount_i;\r",
									"            } else {\r",
									"                items[i].discount_amount = 0;\r",
									"            }\r",
									"\r",
									"            // item_tax_amount\r",
									"            items[i].tax_amount = 0;\r",
									"\r",
									"            // after_tax_amount\r",
									"            items[i].after_tax_amount = items[i].before_tax_amount;\r",
									"\r",
									"            // total_amount\r",
									"            items[i].total_amount = items[i].before_tax_amount - items[i].discount_amount;\r",
									"        }\r",
									"        break;\r",
									"}\r",
									"\r",
									"let customer_obj = pm.environment.get(\"C-customer_obj\");\r",
									"let body = {\r",
									"    \"client_id\": pm.environment.get(\"C-client_id\"),\r",
									"    \"customer\": { // customer này sẽ dc validate những field nào, nếu có mixmatch thì ghi đè hay báo lỗi\r",
									"        \"code\": customer_obj.code,\r",
									"        \"email\": \"\"\r",
									"    },\r",
									"    \"discount\": discounts,\r",
									"    \"due_date\": due_at,\r",
									"    \"items\":items,\r",
									"    \"invoice_code\": \"OC-\" + code,\r",
									"    // \"payment_config\": payment_config,\r",
									"    // \"reference_code\": \"RC-\" + code,\r",
									"    \"tax_type\": configs.tax_create_type,\r",
									"    \"transaction_date\": created_order_at,\r",
									"    \"note\":\"note for invoice OC-\" + code\r",
									"}\r",
									"body = JSON.stringify(body);\r",
									"\r",
									"// Concatenate the components to form the message to sign\r",
									"const message = `${secretKey}_${method}_${url}_${body || ''}_${timestamp}`;\r",
									"console.log(\"Generated message: \", message);\r",
									"\r",
									"// Generate SHA256 signature\r",
									"const signature = CryptoJS.SHA256(message).toString(CryptoJS.enc.Hex);\r",
									"console.log(\"Generated signature: \", signature);\r",
									"\r",
									"pm.environment.set(\"C-timestamp\",timestamp);\r",
									"\r",
									"// Add the signature to the headers\r",
									"pm.request.headers.add({ key: 'x-signature', value: signature });\r",
									"\r",
									"console.log(\"payload: \",JSON.parse(body));\r",
									"pm.environment.set(\"C-payload\",body);\r",
									"pm.environment.set(\"C-invoice_obj\",JSON.parse(body));\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-client-id",
								"value": "{{C-client_id}}",
								"type": "text"
							},
							{
								"key": "x-timestamp",
								"value": "{{C-timestamp}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{f1_open_url}}/api/v1/invoices",
							"host": [
								"{{f1_open_url}}"
							],
							"path": [
								"api",
								"v1",
								"invoices"
							]
						}
					},
					"response": []
				},
				{
					"name": "edit_invoice_old",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    console.log(\"debug: \", jsData);",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let edit_invoice_obj = pm.environment.get(\"C-edit_invoice_obj\");",
									"",
									"    let expected_items = [];",
									"    let exp_discount_amount = 0, exp_items_amount = 0, exp_total_amount = 0, exp_tax_amount = 0;",
									"    for(let i in edit_invoice_obj.items){",
									"        let list_tax_i = [];",
									"        let item_tax_amount = 0; // do hiện tại chỉ có 1 tax",
									"        for(let j in edit_invoice_obj.items[i].taxes){",
									"            list_tax_i[list_tax_i.length] = {",
									"                \"tax_id\": edit_invoice_obj.items[i].taxes[j].tax_id,",
									"                \"rate\": edit_invoice_obj.items[i].taxes[j].rate,",
									"                \"amount\": edit_invoice_obj.items[i].taxes[j].amount,",
									"                \"account_id\": edit_invoice_obj.items[i].taxes[j].account_id",
									"            }",
									"            if(\"item_tax_amount\" in edit_invoice_obj.items[i].taxes[j]){",
									"                item_tax_amount += edit_invoice_obj.items[i].taxes[j].item_tax_amount;",
									"            } else {",
									"                item_tax_amount += edit_invoice_obj.items[i].taxes[j].amount;",
									"            }",
									"",
									"        }",
									"",
									"        expected_items[expected_items.length] = {",
									"            \"product_id\": edit_invoice_obj.items[i].product_id,",
									"            \"sku_id\": edit_invoice_obj.items[i].sku_id,",
									"            \"item_amount\": edit_invoice_obj.items[i].item_amount,",
									"            \"discount_amount\": edit_invoice_obj.items[i].discount_amount,",
									"            \"item_tax_amount\": item_tax_amount,",
									"            \"before_tax_amount\": edit_invoice_obj.items[i].before_tax_amount,",
									"            \"after_tax_amount\": edit_invoice_obj.items[i].after_tax_amount,",
									"            \"total_item_amount\": edit_invoice_obj.items[i].total_item_amount,",
									"            \"currency\": \"\",",
									"            \"quantity\": edit_invoice_obj.items[i].quantity,",
									"            \"account_id\": edit_invoice_obj.items[i].account_id,",
									"            \"note\": edit_invoice_obj.items[i].note,",
									"            \"taxes\": list_tax_i",
									"        }",
									"        exp_discount_amount += edit_invoice_obj.items[i].discount_amount;",
									"        exp_items_amount += edit_invoice_obj.items[i].total_item_amount;",
									"        exp_total_amount += edit_invoice_obj.items[i].total_amount;",
									"        exp_tax_amount += item_tax_amount;",
									"        // console.log(\"debug exp_tax_amount: \" + exp_tax_amount);",
									"    }",
									"    edit_invoice_obj.invoice_id = jsData.data.id;",
									"    edit_invoice_obj.system_code = jsData.data.system_code;",
									"",
									"    edit_invoice_obj.expected_items = expected_items;",
									"    edit_invoice_obj.exp_tax_amount = exp_tax_amount;",
									"    edit_invoice_obj.exp_discount_amount = exp_discount_amount;",
									"    edit_invoice_obj.exp_total_amount = exp_total_amount;",
									"    edit_invoice_obj.exp_items_amount = exp_items_amount;",
									"",
									"    // total_amount",
									"    pm.test(\"total_amount is \" + exp_total_amount, function () {",
									"        pm.expect(exp_total_amount).to.eql(jsData.data.total_amount);",
									"    });",
									"",
									"    // tax_amount",
									"    pm.test(\"tax_amount is \" + exp_tax_amount, function () {",
									"        pm.expect(exp_tax_amount).to.eql(jsData.data.tax_amount);",
									"    });",
									"",
									"    // contact_name",
									"    pm.test(\"contact_name of invoice correctly! \" + edit_invoice_obj.customer.name, function () {",
									"        pm.expect(edit_invoice_obj.customer.name == jsData.data.contact_info.contact_name).to.be.true;",
									"    });",
									"",
									"    // order_code",
									"    pm.test(\"order_code of invoice correctly! \" + edit_invoice_obj.order_code, function () {",
									"        pm.expect(edit_invoice_obj.order_code == jsData.data.order_code).to.be.true;",
									"    });",
									"    ",
									"    // reference_code",
									"    pm.test(\"reference_code of invoice correctly! \" + edit_invoice_obj.reference_code, function () {",
									"        pm.expect(edit_invoice_obj.reference_code == jsData.data.reference_code).to.be.true;",
									"    });",
									"",
									"    // value_at",
									"    pm.test(\"value_at of invoice correctly! \" + edit_invoice_obj.value_at, function () {",
									"        pm.expect(edit_invoice_obj.value_at.substring(0,19) == jsData.data.value_at.substring(0,19)).to.be.true;",
									"    });",
									"",
									"    // due_at",
									"    pm.test(\"due_at of invoice correctly! \" + edit_invoice_obj.due_at, function () {",
									"        pm.expect(edit_invoice_obj.due_at.substring(0,19) == jsData.data.due_at.substring(0,19)).to.be.true;",
									"    });",
									"",
									"    // payment_config",
									"",
									"    pm.environment.set(\"C-edit_invoice_obj\",edit_invoice_obj);",
									"    // testcase++;",
									"    // pm.environment.set(\"C-testcase\",testcase);",
									"    pm.execution.setNextRequest(\"get_invoice_detail\"); // get_invoice_detail",
									"} else {",
									"    console.log(\"Can't create invoice, end test\", jsData);",
									"    pm.execution.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let list_func = eval(pm.environment.get(\"list_common_func\"));\r",
									"let configs = pm.environment.get(\"C-configs\");\r",
									"let invoice_obj = pm.environment.get(\"C-invoice_obj\");\r",
									"let invoice_id = invoice_obj.invoice_id;\r",
									"pm.environment.set(\"C-invoice_id\",invoice_id);\r",
									"\r",
									"let testcase = pm.environment.get(\"C-testcase\");\r",
									"console.log(\"Testcase: \" + testcase);\r",
									"\r",
									"// Example secret key for signing, replace with your actual secret\r",
									"const secretKey = pm.environment.get(\"C-client_key\");\r",
									"console.log(\"secretKey: \" + secretKey);\r",
									"\r",
									"let today = new Date();\r",
									"let timestamp = Math.floor(today.getTime()/1000) + 30;\r",
									"console.log(\"timestamp: \" + timestamp);\r",
									"\r",
									"// Get method, URL, body, and timestamp\r",
									"const method = pm.request.method;\r",
									"let url = pm.request.url.toString().replace(\"{{f1_open_url}}\",\"\");\r",
									"url = url.toString().replace(\"{{C-invoice_id}}\",invoice_id);\r",
									"// console.log(\" ======== url: \", url);\r",
									"\r",
									"let customer_code = list_func.randomChars(8);\r",
									"\r",
									"let d30_stp = Math.floor(today.getTime()/1000) + 30*24*60*60;\r",
									"let d30 = new Date(d30_stp*1000);\r",
									"let current_timestamp = Math.floor(today.getTime()/1000);\r",
									"let past_date, past_due_date;\r",
									"let last_date_stp = Math.floor(today.getTime()/1000) - 24*60*60;\r",
									"let last_date = new Date(last_date_stp*1000);\r",
									"let next_date_stp = Math.floor(today.getTime()/1000) + 24*60*60;\r",
									"let next_date = new Date(next_date_stp*1000);\r",
									"let ranTimeCase = list_func.getRandomInt(1,6);\r",
									"pm.environment.set(\"C-ranTimeCase\",ranTimeCase);\r",
									"// console.log(\"ranTimeCase: \" + ranTimeCase);\r",
									"switch(ranTimeCase){\r",
									"    case 1:\r",
									"        // due_at + 61d < current < due_at + 91d => overdue 60-90\r",
									"        past_date = new Date((current_timestamp - 91*24*60*60)*1000);\r",
									"        past_due_date = new Date((current_timestamp - 61*24*60*60)*1000);\r",
									"        created_order_at = past_date.toISOString();\r",
									"        due_at = past_due_date.toISOString();\r",
									"        break;\r",
									"    case 2:\r",
									"        // created_order_at == current => ngay hiện tại, ko overdue\r",
									"        // include due 7d (ko tính hiện tại, tính +1 đến +7)\r",
									"        created_order_at = today.toISOString();\r",
									"        let in_7d = list_func.getRandomInt(1,7);\r",
									"        due_at = new Date((current_timestamp + in_7d*24*60*60)*1000);\r",
									"        due_at = due_at.toISOString();\r",
									"        break;\r",
									"    case 3:\r",
									"        // created_order_at > current => tương lai, ko overdue\r",
									"        // include due 7+d\r",
									"        created_order_at = next_date.toISOString();\r",
									"        let more_7d = list_func.getRandomInt(8,30);\r",
									"        due_at = new Date((current_timestamp + more_7d*24*60*60)*1000);\r",
									"        due_at = due_at.toISOString();\r",
									"        break;\r",
									"    case 4:\r",
									"        // due_at + 91d < current => overdue > 90d\r",
									"        past_date = new Date((current_timestamp - 121*24*60*60)*1000);\r",
									"        past_due_date = new Date((current_timestamp - 91*24*60*60)*1000);\r",
									"        created_order_at = past_date.toISOString();\r",
									"        due_at = past_due_date.toISOString();\r",
									"        break;\r",
									"    case 5:\r",
									"        // due_at + 31d < current < due_at + 61d => overdue 30-60\r",
									"        past_date = new Date((current_timestamp - 61*24*60*60)*1000);\r",
									"        past_due_date = new Date((current_timestamp - 31*24*60*60)*1000);\r",
									"        created_order_at = past_date.toISOString();\r",
									"        due_at = past_due_date.toISOString();\r",
									"        break;\r",
									"    default:\r",
									"        // due_at < current => overdue < 30d\r",
									"        let ranPastDay = list_func.getRandomInt(1,29);\r",
									"        past_date = new Date((current_timestamp - (ranPastDay+30)*24*60*60)*1000);\r",
									"        past_due_date = new Date((current_timestamp - ranPastDay*24*60*60)*1000);\r",
									"        created_order_at = past_date.toISOString();\r",
									"        due_at = past_due_date.toISOString();\r",
									"        break;\r",
									"}\r",
									"\r",
									"let list_tax = pm.environment.get(\"C-list_tax\");\r",
									"console.log(\"list_tax: \" + list_tax.length);\r",
									"\r",
									"let list_product = pm.environment.get(\"C-list_product\"); // hiện tại sẽ undefined, sau sẽ handle API get list product từ book\r",
									"let items = [], payment_config = [];\r",
									"let ranListPDPos;\r",
									"if(!list_product){\r",
									"    ranListPDPos = list_func.getRandomInt(1,3);\r",
									"    console.log(\"ranListPDPos: \" + ranListPDPos);\r",
									"    for(let i = 0; i < ranListPDPos; i++){\r",
									"        let randTotalTax_i = list_func.getRandomInt(0,1); // có 1 tax hoặc ko có tax\r",
									"        let randListPos_i = list_func.randNotDupe(0,list_tax.length - 1,randTotalTax_i);\r",
									"        let taxes_i = [];\r",
									"        let quantity_i = list_func.getRandomInt(1,3);\r",
									"\r",
									"        // amount của tax chỉ là tượng trưng, server sẽ tự tính lại dựa vào tax_id (cthuc hiện tại đang sai vì chưa discount)\r",
									"        for(let j in randListPos_i){\r",
									"            taxes_i[taxes_i.length] = {\r",
									"                \"account_id\": list_tax[randListPos_i[j]].account_id, // tạm thời chưa tạo ra account_id nên tạm ignore\r",
									"                \"rate\": list_tax[randListPos_i[j]].rate,\r",
									"                \"amount\": 0, // sẽ được tính lại\r",
									"                \"name\": list_tax[randListPos_i[j]].name, // field này không cần\r",
									"                \"tax_id\": list_tax[randListPos_i[j]].tax_id\r",
									"            };\r",
									"        }\r",
									"\r",
									"        items[items.length] = {\r",
									"            \"name\": \"[Open API] product \" + list_func.randomChars(8),\r",
									"            \"price\": list_func.getRandomInt(10,500)*1000,\r",
									"            \"quantity\":quantity_i,\r",
									"            // \"sku_code\": \"\",\r",
									"            \"taxes\": taxes_i\r",
									"        }\r",
									"    }\r",
									"} else {\r",
									"    console.log(\"\");\r",
									"    ranListPDPos = randNotDupe(0,list_product.length - 1,randTotalProduct);\r",
									"    for(let i in ranListPDPos){\r",
									"        let randTotalTax_i = 1// list_func.getRandomInt(0,1);\r",
									"        let randListPos_i = list_func.randNotDupe(0,list_tax.length - 1,randTotalTax_i);\r",
									"        let taxes_i = [];\r",
									"        let quantity_i = list_func.getRandomInt(1,3);\r",
									"\r",
									"        // amount của tax chỉ là tượng trưng, server sẽ tự tính lại dựa vào tax_id (cthuc hiện tại đang sai vì chưa discount)\r",
									"        for(let j in randListPos_i){\r",
									"            taxes_i[taxes_i.length] = {\r",
									"                \"account_id\": list_tax[randListPos_i[j]].account_id, // tạm thời chưa tạo ra account_id nên tạm ignore\r",
									"                \"rate\": list_tax[randListPos_i[j]].rate,\r",
									"                \"amount\": 0, // sẽ được tính lại\r",
									"                \"name\": list_tax[randListPos_i[j]].name, // field này không cần\r",
									"                \"tax_id\": list_tax[randListPos_i[j]].tax_id\r",
									"            };\r",
									"        }\r",
									"\r",
									"        items[items.length] = {\r",
									"            \"account_id\": list_product[ranListPDPos[i]].income_account_id,\r",
									"            \"item_amount\": list_product[ranListPDPos[i]].price,\r",
									"            // \"currency\": \"\",\r",
									"            \"name\": list_product[ranListPDPos[i]].name,\r",
									"            \"note\": \"[API] note for product \" + list_product[ranListPDPos[i]].name,\r",
									"            \"quantity\":quantity_i,\r",
									"            \"product_id\": list_product[ranListPDPos[i]].product_id,\r",
									"            \"sku_id\": list_product[ranListPDPos[i]].sku_id,\r",
									"            \"taxes\": taxes_i\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"let code = list_func.randomChars(5);\r",
									"let payment_method_list = pm.environment.get(\"C-payment_method_list\");\r",
									"// console.log(\"payment_method_list: \", payment_method_list);\r",
									"for(let i in payment_method_list){ // ở script tạo, mỗi loại method chỉ lấy 1 id (MB, BIDV, Shinhan) chưa support GP\r",
									"    payment_config[payment_config.length] = payment_method_list[i].payment_method_id;\r",
									"}\r",
									"\r",
									"let sub_total_amount = 0;\r",
									"for(let i in items){\r",
									"    sub_total_amount += items[i].price*items[i].quantity;\r",
									"}\r",
									"\r",
									"let discounts = [];\r",
									"if(configs.edit_has_discount){\r",
									"    if(list_func.getRandomInt(0,1)){ // list_func.getRandomInt(0,1)\r",
									"        discounts[discounts.length] = {\r",
									"            \"note\": \"\",\r",
									"            \"is_rate\": true,\r",
									"            \"value\": list_func.getRandomInt(10,800) / 10\r",
									"        }\r",
									"    } else {\r",
									"        discounts[discounts.length] = {\r",
									"            \"note\": \"\",\r",
									"            \"is_rate\": false,\r",
									"            \"value\": Math.ceil(sub_total_amount / list_func.getRandomInt(2,9)) // list_func.getRandomInt(2,10)\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"// tính lại giá\r",
									"let term_discount;\r",
									"let total_discount_amount = 0;\r",
									"console.log(\"sub_total_amount: \" + sub_total_amount);\r",
									"let tax_mode = pm.environment.get(\"C-tax_mode\");\r",
									"let case_;\r",
									"switch(configs.tax_edit_type){\r",
									"    case \"price_excluding_tax\":\r",
									"        if(tax_mode == \"after_tax\"){\r",
									"            console.log(\"Giá chưa bao gồm thuế, giảm giá sau thuế\");\r",
									"            case_ = 3;\r",
									"        } else {\r",
									"            console.log(\"Giá chưa bao gồm thuế, giảm giá trước thuế\");\r",
									"            case_ = 1;\r",
									"        }\r",
									"        break;\r",
									"    case \"price_including_tax\":\r",
									"        if(tax_mode == \"after_tax\"){\r",
									"            console.log(\"Giá đã bao gồm thuế, giảm giá sau thuế\");\r",
									"            case_ = 4;\r",
									"        } else {\r",
									"            console.log(\"Giá đã bao gồm thuế, giảm giá trước thuế\");\r",
									"            case_ = 2;\r",
									"        }\r",
									"        break;\r",
									"    case \"tax_not_applicable\":\r",
									"    default:\r",
									"        console.log(\"Không apply thuế\");\r",
									"        case_ = 5;\r",
									"}\r",
									"\r",
									"switch(case_){\r",
									"    case 1:\r",
									"        for(let i in discounts){\r",
									"            if(discounts[i].is_rate){\r",
									"                total_discount_amount += Math.round(discounts[i].value*sub_total_amount/100);\r",
									"            } else {\r",
									"                total_discount_amount += Math.round(discounts[i].value);\r",
									"            }\r",
									"        }\r",
									"\r",
									"        // chỉ support case discount_amount - tính round cuối\r",
									"        // sum_total_item_amount = 0;\r",
									"        // for(let i in items){\r",
									"        //     sum_total_item_amount += items[i].price*items[i].quantity;\r",
									"        // }\r",
									"\r",
									"        term_discount = 0;\r",
									"        for(let i in items){\r",
									"            // total_item_amount, before_tax_amount\r",
									"            items[i].total_item_amount = items[i].price*items[i].quantity;\r",
									"            items[i].before_tax_amount = items[i].price*items[i].quantity;\r",
									"\r",
									"            // discount_amount - ko tính round cuối\r",
									"            let discount_i = 0;\r",
									"            for(let j in discounts){\r",
									"                if(discounts[j].is_rate){\r",
									"                    discount_i += Math.round(discounts[j].value*items[i].total_item_amount/100);\r",
									"                } else {\r",
									"                    discount_i += Math.round(discounts[j].value*items[i].total_item_amount/sub_total_amount);\r",
									"                }\r",
									"            }\r",
									"            items[i].discount_amount = discount_i;\r",
									"            // discount_amount - tính round cuối\r",
									"            // let item_total_discount_i = 0;\r",
									"            // if(i != items.length - 1){\r",
									"            //     for(let k in discounts){\r",
									"            //         if(discounts[k].is_rate){\r",
									"            //             // debug\r",
									"            //             item_total_discount_i += Math.round(items[i].before_tax_amount * discounts[k].value/100);\r",
									"            //             // item_total_discount_i += Math.round(items[i].total_item_amount * discounts[k].value/100);\r",
									"            //         } \r",
									"            //         else {\r",
									"            //             // item_total_discount_i += Math.round(discounts[k].value * items[i].before_tax_amount/total_net_amount);\r",
									"            //             item_total_discount_i += Math.round(discounts[k].value * items[i].total_item_amount/sum_total_item_amount);\r",
									"            //         }\r",
									"            //     }\r",
									"            //     items[i].discount_amount = item_total_discount_i;\r",
									"            //     term_discount += item_total_discount_i;\r",
									"            // } else {\r",
									"            //     for(let k in discounts){\r",
									"            //         // ở đây không cần làm tròn nữa vì chỉ là hiệu của 2 số chẵn\r",
									"            //         if(discounts[k].is_rate){ // => case này không cần tính số tổng rồi trừ lại\r",
									"            //             // item_total_discount_i += Math.round(total_net_amount * discounts[k].value/100 - term_discount);\r",
									"            //             item_total_discount_i += Math.round(items[i].before_tax_amount * discounts[k].value/100);\r",
									"            //         } else {\r",
									"            //             item_total_discount_i += Math.round(discounts[k].value - term_discount);\r",
									"            //             // item_total_discount_i += Math.round(discounts[k].value*items[i].before_tax_amount/total_net_amount);\r",
									"            //         }\r",
									"            //     }\r",
									"            //     items[i].discount_amount = item_total_discount_i;\r",
									"            // }\r",
									"\r",
									"            // item_tax_amount\r",
									"            let total_tax_amount_i = 0;\r",
									"            for(let k in items[i].taxes){\r",
									"                for(let j in list_tax){\r",
									"                    if(items[i].taxes[k].tax_id == list_tax[j].tax_id){\r",
									"                        items[i].taxes[k].item_tax_amount = Math.round(list_tax[j].rate*(items[i].total_item_amount - items[i].discount_amount)/100);\r",
									"                        // // update lại amount\r",
									"                        // items[i].taxes[k].amount = items[i].taxes[k].item_tax_amount;\r",
									"                        total_tax_amount_i += Math.round(list_tax[j].rate*(items[i].total_item_amount - items[i].discount_amount)/100);\r",
									"\r",
									"                        // overwrite tax => chỉ đúng nếu có 1 tax\r",
									"                        // items[i].taxes[j] = \r",
									"                        break;\r",
									"                    }\r",
									"                }\r",
									"            }\r",
									"\r",
									"            // after_tax_amount\r",
									"            items[i].after_tax_amount = items[i].before_tax_amount + total_tax_amount_i;\r",
									"\r",
									"            // total_amount\r",
									"            items[i].total_amount = items[i].before_tax_amount - items[i].discount_amount + total_tax_amount_i;\r",
									"        }\r",
									"        break;\r",
									"    case 2:\r",
									"        // sub_total_amount cần được tính lại giá trước thuế\r",
									"        sub_total_amount = 0;\r",
									"        sum_total_item_amount = 0;\r",
									"\r",
									"        // tính lại thuế (thuế chưa giảm giá)\r",
									"        total_net_amount = 0;\r",
									"        for(let i in items){\r",
									"            // total_item_amount\r",
									"            items[i].total_item_amount = items[i].price*items[i].quantity;\r",
									"            sum_total_item_amount += items[i].total_item_amount;\r",
									"\r",
									"            // tổng rate thuế theo item => hiện tại chỉ apply 1 thuế\r",
									"            let total_tax_rate_i = 0;\r",
									"            for(let j in items[i].taxes){\r",
									"                total_tax_rate_i += items[i].taxes[j].rate;\r",
									"            }\r",
									"            items[i].total_tax_rate_i = total_tax_rate_i;\r",
									"\r",
									"            // giá chưa thuế before_tax_amount\r",
									"            let item_net_amount_i = Math.round(items[i].total_item_amount / (1 + items[i].total_tax_rate_i/100));\r",
									"            items[i].before_tax_amount = item_net_amount_i;\r",
									"\r",
									"            total_net_amount += item_net_amount_i;\r",
									"        }\r",
									"\r",
									"        // chỉ support 1 discount trong 1 invoice\r",
									"        term_discount = 0;\r",
									"        for(let i in items){\r",
									"            // giảm giá\r",
									"            let item_total_discount_i = 0;\r",
									"            if(i != items.length - 1){\r",
									"                for(let k in discounts){\r",
									"                    if(discounts[k].is_rate){\r",
									"                        // debug\r",
									"                        item_total_discount_i += Math.round(items[i].before_tax_amount * discounts[k].value/100);\r",
									"                        // item_total_discount_i += Math.round(items[i].total_item_amount * discounts[k].value/100);\r",
									"                    } \r",
									"                    else {\r",
									"                        // item_total_discount_i += Math.round(discounts[k].value * items[i].before_tax_amount/total_net_amount);\r",
									"                        item_total_discount_i += Math.round(discounts[k].value * items[i].total_item_amount/sum_total_item_amount);\r",
									"                    }\r",
									"                }\r",
									"                items[i].discount_amount = item_total_discount_i;\r",
									"                term_discount += item_total_discount_i;\r",
									"\r",
									"            } else {\r",
									"                for(let k in discounts){\r",
									"                    // ở đây không cần làm tròn nữa vì chỉ là hiệu của 2 số chẵn\r",
									"                    if(discounts[k].is_rate){ // => case này không cần tính số tổng rồi trừ lại\r",
									"                        // item_total_discount_i += Math.round(total_net_amount * discounts[k].value/100 - term_discount);\r",
									"                        item_total_discount_i += Math.round(items[i].before_tax_amount * discounts[k].value/100);\r",
									"                    } else {\r",
									"                        item_total_discount_i += Math.round(discounts[k].value - term_discount);\r",
									"                        // item_total_discount_i += Math.round(discounts[k].value*items[i].before_tax_amount/total_net_amount);\r",
									"                    }\r",
									"                }\r",
									"                items[i].discount_amount = item_total_discount_i;\r",
									"            }\r",
									"\r",
									"            // giá sau discount => after_tax_amount\r",
									"            let item_net_amount_after_discount_i = items[i].before_tax_amount - items[i].discount_amount;\r",
									"            items[i].after_tax_amount = item_net_amount_after_discount_i;\r",
									"            sub_total_amount += item_net_amount_after_discount_i;\r",
									"\r",
									"            // tính lại thuế (thuế đã giảm giá)\r",
									"            let total_tax_amount_i = 0;\r",
									"            for(let j in items[i].taxes){\r",
									"                items[i].taxes[j].amount = Math.round(items[i].after_tax_amount * items[i].taxes[j].rate/100);\r",
									"                total_tax_amount_i += items[i].taxes[j].amount;\r",
									"            }\r",
									"\r",
									"            // total_amount\r",
									"            items[i].total_amount = items[i].before_tax_amount - items[i].discount_amount + total_tax_amount_i;\r",
									"        }\r",
									"        break;\r",
									"    case 3:\r",
									"        // sub_total_amount cần được tính lại giá sau thuế => rule mới, vẫn giữ giá trước thuế\r",
									"        sub_total_amount = 0;\r",
									"\r",
									"        for(let i in items){\r",
									"            // total_item_amount, before_tax_amount\r",
									"            items[i].total_item_amount = items[i].price*items[i].quantity;\r",
									"            items[i].before_tax_amount = items[i].price*items[i].quantity;\r",
									"\r",
									"            // item_tax_amount\r",
									"            let total_tax_amount_i = 0;\r",
									"            for(let k in items[i].taxes){\r",
									"                for(let j in list_tax){\r",
									"                    if(items[i].taxes[k].tax_id == list_tax[j].tax_id){\r",
									"                        // hiện tại chỉ apply 1 tax, nếu hơn phải update lại\r",
									"                        items[i].taxes[k].item_tax_amount = Math.round(list_tax[j].rate * items[i].total_item_amount/100);\r",
									"                        total_tax_amount_i += Math.round(list_tax[j].rate * items[i].total_item_amount/100);\r",
									"                        break;\r",
									"                    }\r",
									"                }\r",
									"            }\r",
									"\r",
									"            // after_tax_amount\r",
									"            items[i].after_tax_amount = items[i].before_tax_amount + total_tax_amount_i;\r",
									"            // sub_total_amount += items[i].after_tax_amount;\r",
									"            sub_total_amount += items[i].before_tax_amount;\r",
									"        }\r",
									"        console.log(\"new sub_total_amount: \" + sub_total_amount);\r",
									"\r",
									"        for(let i in discounts){\r",
									"            if(discounts[i].is_rate){\r",
									"                total_discount_amount += Math.round(discounts[i].value * sub_total_amount/100);\r",
									"            } else {\r",
									"                total_discount_amount += Math.round(discounts[i].value);\r",
									"            }\r",
									"        }\r",
									"\r",
									"        for(let i in items){\r",
									"            // discount_amount\r",
									"            let discount_i = 0;\r",
									"            for(let j in discounts){\r",
									"                if(discounts[j].is_rate){\r",
									"                    discount_i += Math.round(discounts[j].value * items[i].after_tax_amount/100);\r",
									"                    // discount_i += Math.round(discounts[j].value * items[i].before_tax_amount/100);\r",
									"                } else {\r",
									"                    // discount_i += Math.round(discounts[j].value * items[i].after_tax_amount/sub_total_amount);\r",
									"                    discount_i += Math.round(discounts[j].value * items[i].before_tax_amount/sub_total_amount);\r",
									"                }\r",
									"            }\r",
									"            items[i].discount_amount = discount_i;\r",
									"\r",
									"            // total_amount\r",
									"            if(items[i].taxes.length > 0){\r",
									"                items[i].total_amount = items[i].before_tax_amount - items[i].discount_amount + items[i].taxes[0].item_tax_amount;\r",
									"            } else {\r",
									"                items[i].total_amount = items[i].before_tax_amount - items[i].discount_amount;\r",
									"            }\r",
									"        }\r",
									"        break;\r",
									"    case 4:\r",
									"        // sub_total_amount cần được tính lại giá trước thuế\r",
									"        sub_total_amount = 0;\r",
									"        sum_total_item_amount = 0;\r",
									"\r",
									"        // tính lại thuế (thuế chưa giảm giá)\r",
									"        total_net_amount = 0;\r",
									"        for(let i in items){\r",
									"            // total_item_amount\r",
									"            items[i].total_item_amount = items[i].price*items[i].quantity;\r",
									"\r",
									"            sum_total_item_amount += items[i].total_item_amount;\r",
									"\r",
									"            // tổng rate thuế theo item => hiện tại chỉ apply 1 thuế\r",
									"            let total_tax_rate_i = 0;\r",
									"            for(let j in items[i].taxes){\r",
									"                total_tax_rate_i += items[i].taxes[j].rate;\r",
									"            }\r",
									"            items[i].total_tax_rate_i = total_tax_rate_i;\r",
									"\r",
									"            // giá chưa thuế before_tax_amount\r",
									"            let item_net_amount_i = Math.round(items[i].total_item_amount / (1 + items[i].total_tax_rate_i/100));\r",
									"            items[i].before_tax_amount = item_net_amount_i;\r",
									"\r",
									"            total_net_amount += item_net_amount_i;\r",
									"        }\r",
									"\r",
									"        // chỉ support 1 discount trong 1 invoice\r",
									"        term_discount = 0;\r",
									"        for(let i in items){\r",
									"            // giảm giá => tạm thời ko tính ra số cuối để trừ, nếu PO yêu cầu thì update lại\r",
									"            let item_total_discount_i = 0;\r",
									"            // if(i != items.length - 1){\r",
									"                for(let k in discounts){\r",
									"                    if(discounts[k].is_rate){\r",
									"                        // item_total_discount_i += Math.round(items[i].before_tax_amount * discounts[k].value/100);\r",
									"                        item_total_discount_i += Math.round(items[i].total_item_amount * discounts[k].value/100);\r",
									"                    } else {\r",
									"                        // item_total_discount_i += Math.round(discounts[k].value * items[i].before_tax_amount/total_net_amount);\r",
									"                        item_total_discount_i += Math.round(discounts[k].value * items[i].total_item_amount/sum_total_item_amount);\r",
									"                    }\r",
									"                }\r",
									"                items[i].discount_amount = item_total_discount_i;\r",
									"                term_discount += item_total_discount_i;\r",
									"\r",
									"            // } else {\r",
									"            //     for(let k in discounts){\r",
									"            //         // ở đây không cần làm tròn nữa vì chỉ là hiệu của 2 số chẵn\r",
									"            //         if(discounts[k].is_rate){\r",
									"            //             // item_total_discount_i += Math.round(total_net_amount * discounts[k].value/100 - term_discount);\r",
									"            //             item_total_discount_i += Math.round(total_net_amount * discounts[k].value/100 - term_discount);\r",
									"            //         } else {\r",
									"            //             item_total_discount_i += Math.round(discounts[k].value - term_discount);\r",
									"            //             // item_total_discount_i += Math.round(discounts[k].value*items[i].before_tax_amount/total_net_amount);\r",
									"            //         }\r",
									"            //     }\r",
									"            //     items[i].discount_amount = item_total_discount_i;\r",
									"            // }\r",
									"            // giá sau discount => after_tax_amount\r",
									"            let item_net_amount_after_discount_i = items[i].before_tax_amount - items[i].discount_amount;\r",
									"            items[i].after_tax_amount = item_net_amount_after_discount_i;\r",
									"            sub_total_amount += item_net_amount_after_discount_i;\r",
									"\r",
									"            // tính lại thuế (thuế đã giảm giá)\r",
									"            let total_tax_amount_i = 0;\r",
									"            for(let j in items[i].taxes){\r",
									"                items[i].taxes[j].amount = Math.round(items[i].before_tax_amount * items[i].taxes[j].rate/100);\r",
									"                total_tax_amount_i += items[i].taxes[j].amount;\r",
									"            }\r",
									"\r",
									"            // total_amount\r",
									"            items[i].total_amount = items[i].before_tax_amount - items[i].discount_amount + total_tax_amount_i;\r",
									"        }\r",
									"        break;\r",
									"    case 5:\r",
									"    default:\r",
									"        for(let i in discounts){\r",
									"            if(discounts[i].is_rate){\r",
									"                total_discount_amount += Math.round(discounts[i].value*sub_total_amount/100);\r",
									"            } else {\r",
									"                total_discount_amount += Math.round(discounts[i].value);\r",
									"            }\r",
									"        }\r",
									"\r",
									"        for(let i in items){\r",
									"            // total_item_amount, before_tax_amount\r",
									"            items[i].total_item_amount = items[i].price*items[i].quantity;\r",
									"            items[i].before_tax_amount = items[i].price*items[i].quantity;\r",
									"\r",
									"            // discount_amount\r",
									"            let discount_i = 0;\r",
									"            for(let j in discounts){\r",
									"                if(discounts[j].is_rate){\r",
									"                    discount_i += Math.round(discounts[j].value*items[i].total_item_amount/100);\r",
									"                } else {\r",
									"                    discount_i += Math.round(discounts[j].value*items[i].total_item_amount/sub_total_amount);\r",
									"                }\r",
									"            }\r",
									"            items[i].discount_amount = discount_i;\r",
									"\r",
									"            // item_tax_amount\r",
									"\r",
									"            // after_tax_amount\r",
									"            items[i].after_tax_amount = items[i].before_tax_amount;\r",
									"\r",
									"            // total_amount\r",
									"            items[i].total_amount = items[i].before_tax_amount - items[i].discount_amount;\r",
									"        }\r",
									"        break;\r",
									"}\r",
									"\r",
									"let body = {\r",
									"    \"client_id\": pm.environment.get(\"C-client_id\"),\r",
									"    \"customer\": { // customer này sẽ dc validate những field nào, nếu có mixmatch thì ghi đè hay báo lỗi\r",
									"        \"address\": \"\",\r",
									"        \"customer_code\": customer_code,\r",
									"        \"email\": \"\",\r",
									"        \"name\": \"[Open API][Edit] customer \" + customer_code,\r",
									"        \"phone\": \"\"\r",
									"    },\r",
									"    \"discounts\": discounts,\r",
									"    \"due_at\": due_at,\r",
									"    // \"id\": \"string\", => case edit\r",
									"    \"items\":items,\r",
									"    \"id\":invoice_id,\r",
									"    \"order_code\": \"OCE-\" + code,\r",
									"    \"payment_config\": payment_config,\r",
									"    \"reference_code\": \"RCE-\" + code,\r",
									"    \"tax_type\": configs.tax_edit_type,\r",
									"    // \"taxes\": [{\r",
									"    //     \"account_id\": 0,\r",
									"    //     \"amount\": 0,\r",
									"    //     \"name\": \"string\",\r",
									"    //     \"rate\": 0,\r",
									"    //     \"tax_id\": \"string\"\r",
									"    // }],\r",
									"    \"value_at\": created_order_at\r",
									"}\r",
									"body = JSON.stringify(body);\r",
									"\r",
									"// Concatenate the components to form the message to sign\r",
									"const message = `${secretKey}_${method}_${url}_${body || ''}_${timestamp}`;\r",
									"console.log(\"Generated message: \", message);\r",
									"\r",
									"// Generate SHA256 signature\r",
									"const signature = CryptoJS.SHA256(message).toString(CryptoJS.enc.Hex);\r",
									"console.log(\"Generated signature: \", signature);\r",
									"\r",
									"pm.environment.set(\"C-timestamp\",timestamp);\r",
									"\r",
									"// Add the signature to the headers\r",
									"pm.request.headers.add({ key: 'x-signature', value: signature });\r",
									"\r",
									"console.log(\"payload: \",JSON.parse(body));\r",
									"pm.environment.set(\"C-payload\",body);\r",
									"pm.environment.set(\"C-edit_invoice_obj\",JSON.parse(body));\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-client-id",
								"value": "{{C-client_id}}",
								"type": "text"
							},
							{
								"key": "x-timestamp",
								"value": "{{C-timestamp}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{f1_open_url}}/api/v1/invoices/{{C-invoice_id}}",
							"host": [
								"{{f1_open_url}}"
							],
							"path": [
								"api",
								"v1",
								"invoices",
								"{{C-invoice_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "edit_invoice",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    console.log(\"debug: \", jsData);",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let edit_invoice_obj = pm.environment.get(\"C-edit_invoice_obj\");",
									"",
									"    let expected_items = [];",
									"    let exp_discount_amount = 0, exp_items_amount = 0, exp_total_amount = 0, exp_tax_amount = 0;",
									"    for(let i in edit_invoice_obj.items){",
									"        let item_tax_amount = 0; // do hiện tại chỉ có 1 tax",
									"",
									"        expected_items[expected_items.length] = {",
									"            \"sku_code\": edit_invoice_obj.items[i].code,",
									"            \"sku_id\": edit_invoice_obj.items[i].sku_id,",
									"            \"item_amount\": edit_invoice_obj.items[i].item_amount,",
									"            \"discount_amount\": edit_invoice_obj.items[i].discount_amount,",
									"            \"item_tax_amount\": edit_invoice_obj.items[i].tax_amount,",
									"            \"before_tax_amount\": edit_invoice_obj.items[i].before_tax_amount,",
									"            \"after_tax_amount\": edit_invoice_obj.items[i].after_tax_amount,",
									"            \"total_item_amount\": edit_invoice_obj.items[i].total_item_amount,",
									"            \"quantity\": edit_invoice_obj.items[i].quantity,",
									"            \"note\": edit_invoice_obj.items[i].note,",
									"            \"tax_code\": edit_invoice_obj.items[i].tax_code,",
									"            \"tax_amount\": edit_invoice_obj.items[i].tax_amount,",
									"        }",
									"        exp_discount_amount += edit_invoice_obj.items[i].discount_amount;",
									"        exp_items_amount += edit_invoice_obj.items[i].total_item_amount;",
									"        exp_total_amount += edit_invoice_obj.items[i].total_amount;",
									"        exp_tax_amount += edit_invoice_obj.items[i].tax_amount;",
									"        // console.log(\"debug exp_tax_amount: \" + exp_tax_amount);",
									"    }",
									"",
									"    edit_invoice_obj.invoice_id = jsData.data.invoice_id;",
									"    edit_invoice_obj.system_code = jsData.data.invoice_code;",
									"",
									"    edit_invoice_obj.expected_items = expected_items;",
									"    edit_invoice_obj.exp_tax_amount = exp_tax_amount;",
									"    edit_invoice_obj.exp_discount_amount = exp_discount_amount;",
									"    edit_invoice_obj.exp_total_amount = exp_total_amount;",
									"    edit_invoice_obj.exp_items_amount = exp_items_amount;",
									"",
									"    console.log(\"edit_invoice_obj: \", edit_invoice_obj);",
									"",
									"    // total_amount",
									"    pm.test(\"total_amount is \" + exp_total_amount, function () {",
									"        pm.expect(exp_total_amount).to.eql(jsData.data.total_amount);",
									"    });",
									"",
									"    // total_tax_amount",
									"    pm.test(\"total_tax_amount is \" + exp_tax_amount, function () {",
									"        pm.expect(exp_tax_amount).to.eql(jsData.data.total_tax_amount);",
									"    });",
									"",
									"    // total_discount_amount",
									"    pm.test(\"total_discount_amount is \" + exp_discount_amount, function () {",
									"        pm.expect(exp_discount_amount).to.eql(jsData.data.total_discount_amount);",
									"    });",
									"",
									"    // contact_name",
									"    let edit_cust_obj = pm.environment.get(\"C-edit_cust_obj\");",
									"    pm.test(\"contact_name of invoice correctly! \" + edit_cust_obj.name, function () {",
									"        pm.expect(jsData.data.customer.name).to.eql(edit_cust_obj.name);",
									"    });",
									"",
									"    // invoice_code",
									"    pm.test(\"invoice_code of invoice correctly! \" + edit_invoice_obj.invoice_code, function () {",
									"        pm.expect(jsData.data.invoice_code).to.eql(edit_invoice_obj.invoice_code);",
									"    });",
									"    ",
									"    // // reference_code",
									"    // pm.test(\"reference_code of invoice correctly! \" + edit_invoice_obj.reference_code, function () {",
									"    //     pm.expect(edit_invoice_obj.reference_code == jsData.data.reference_code).to.be.true;",
									"    // });",
									"",
									"    // transaction_date",
									"    pm.test(\"transaction_date of invoice correctly! \" + edit_invoice_obj.transaction_date, function () {",
									"        pm.expect(edit_invoice_obj.transaction_date.substring(0,19) == jsData.data.transaction_date.substring(0,19)).to.be.true;",
									"    });",
									"",
									"    // due_date",
									"    pm.test(\"due_date of invoice correctly! \" + edit_invoice_obj.due_date, function () {",
									"        pm.expect(edit_invoice_obj.due_date.substring(0,19) == jsData.data.due_date.substring(0,19)).to.be.true;",
									"    });",
									"",
									"    // payment_config",
									"",
									"    pm.environment.set(\"C-edit_invoice_obj\",edit_invoice_obj);",
									"    // testcase++;",
									"    // pm.environment.set(\"C-testcase\",testcase);",
									"    pm.execution.setNextRequest(\"get_invoice_detail\"); // get_invoice_detail",
									"} else {",
									"    console.log(\"Can't create invoice, end test\", jsData);",
									"    pm.execution.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let list_func = eval(pm.environment.get(\"list_common_func\"));\r",
									"let configs = pm.environment.get(\"C-configs\");\r",
									"let invoice_obj = pm.environment.get(\"C-invoice_obj\");\r",
									"let invoice_id = invoice_obj.invoice_id;\r",
									"pm.environment.set(\"C-invoice_id\",invoice_id);\r",
									"\r",
									"let testcase = pm.environment.get(\"C-testcase\");\r",
									"console.log(\"Testcase: \" + testcase);\r",
									"\r",
									"// Example secret key for signing, replace with your actual secret\r",
									"const secretKey = pm.environment.get(\"C-client_key\");\r",
									"console.log(\"secretKey: \" + secretKey);\r",
									"\r",
									"let today = new Date();\r",
									"let timestamp = Math.floor(today.getTime()/1000) + 30;\r",
									"console.log(\"timestamp: \" + timestamp);\r",
									"\r",
									"// Get method, URL, body, and timestamp\r",
									"const method = pm.request.method;\r",
									"let url = pm.request.url.toString().replace(\"{{f1_open_url}}\",\"\");\r",
									"url = url.toString().replace(\"{{C-invoice_id}}\",invoice_id);\r",
									"// console.log(\" ======== url: \", url);\r",
									"\r",
									"let customer_code = list_func.randomChars(8);\r",
									"\r",
									"let d30_stp = Math.floor(today.getTime()/1000) + 30*24*60*60;\r",
									"let d30 = new Date(d30_stp*1000);\r",
									"let current_timestamp = Math.floor(today.getTime()/1000);\r",
									"let past_date, past_due_date;\r",
									"let last_date_stp = Math.floor(today.getTime()/1000) - 24*60*60;\r",
									"let last_date = new Date(last_date_stp*1000);\r",
									"let next_date_stp = Math.floor(today.getTime()/1000) + 24*60*60;\r",
									"let next_date = new Date(next_date_stp*1000);\r",
									"let ranTimeCase = list_func.getRandomInt(1,6);\r",
									"pm.environment.set(\"C-ranTimeCase\",ranTimeCase);\r",
									"// console.log(\"ranTimeCase: \" + ranTimeCase);\r",
									"switch(ranTimeCase){\r",
									"    case 1:\r",
									"        // due_at + 61d < current < due_at + 91d => overdue 60-90\r",
									"        past_date = new Date((current_timestamp - 91*24*60*60)*1000);\r",
									"        past_due_date = new Date((current_timestamp - 61*24*60*60)*1000);\r",
									"        created_order_at = past_date.toISOString();\r",
									"        due_at = past_due_date.toISOString();\r",
									"        break;\r",
									"    case 2:\r",
									"        // created_order_at == current => ngay hiện tại, ko overdue\r",
									"        // include due 7d (ko tính hiện tại, tính +1 đến +7)\r",
									"        created_order_at = today.toISOString();\r",
									"        let in_7d = list_func.getRandomInt(1,7);\r",
									"        due_at = new Date((current_timestamp + in_7d*24*60*60)*1000);\r",
									"        due_at = due_at.toISOString();\r",
									"        break;\r",
									"    case 3:\r",
									"        // created_order_at > current => tương lai, ko overdue\r",
									"        // include due 7+d\r",
									"        created_order_at = next_date.toISOString();\r",
									"        let more_7d = list_func.getRandomInt(8,30);\r",
									"        due_at = new Date((current_timestamp + more_7d*24*60*60)*1000);\r",
									"        due_at = due_at.toISOString();\r",
									"        break;\r",
									"    case 4:\r",
									"        // due_at + 91d < current => overdue > 90d\r",
									"        past_date = new Date((current_timestamp - 121*24*60*60)*1000);\r",
									"        past_due_date = new Date((current_timestamp - 91*24*60*60)*1000);\r",
									"        created_order_at = past_date.toISOString();\r",
									"        due_at = past_due_date.toISOString();\r",
									"        break;\r",
									"    case 5:\r",
									"        // due_at + 31d < current < due_at + 61d => overdue 30-60\r",
									"        past_date = new Date((current_timestamp - 61*24*60*60)*1000);\r",
									"        past_due_date = new Date((current_timestamp - 31*24*60*60)*1000);\r",
									"        created_order_at = past_date.toISOString();\r",
									"        due_at = past_due_date.toISOString();\r",
									"        break;\r",
									"    default:\r",
									"        // due_at < current => overdue < 30d\r",
									"        let ranPastDay = list_func.getRandomInt(1,29);\r",
									"        past_date = new Date((current_timestamp - (ranPastDay+30)*24*60*60)*1000);\r",
									"        past_due_date = new Date((current_timestamp - ranPastDay*24*60*60)*1000);\r",
									"        created_order_at = past_date.toISOString();\r",
									"        due_at = past_due_date.toISOString();\r",
									"        break;\r",
									"}\r",
									"\r",
									"const tag_code_list = [\"TAX_CODE_10\",\"TAX_CODE_8\",\"TAX_CODE_5\",\"TAX_CODE_2\",\"TAX_CODE_0\"];\r",
									"let list_product = pm.environment.get(\"C-list_product\"); // hiện tại sẽ undefined, sau sẽ handle API get list product từ book\r",
									"\r",
									"let items = [], payment_config = [];\r",
									"let ranListPDPos;\r",
									"if(!list_product){\r",
									"    ranListPDPos = list_func.getRandomInt(1,3);\r",
									"    console.log(\"ranListPDPos: \" + ranListPDPos);\r",
									"    for(let i = 0; i < ranListPDPos; i++){\r",
									"        let quantity_i = list_func.getRandomInt(1,3);\r",
									"        let code_i = \"API-PRD-COD-\" + list_func.getRandomInt(1000,9999);\r",
									"\r",
									"        items[items.length] = {\r",
									"            \"code\":code_i,\r",
									"            \"quantity\":quantity_i,\r",
									"            \"tax_code\":tag_code_list[list_func.getRandomInt(0,tag_code_list.length - 1)],\r",
									"            \"unit_price\":list_func.getRandomInt(10,500)*1000,\r",
									"            \"note\":\"note for product \" + code_i\r",
									"        }\r",
									"    }\r",
									"} else {\r",
									"    console.log(\"Get product from list\");\r",
									"    ranListPDPos = list_func.randNotDupe(0,list_product.length - 1,list_func.getRandomInt(2,3));\r",
									"    for(let i in ranListPDPos){\r",
									"        let quantity_i = list_func.getRandomInt(1,3);\r",
									"\r",
									"        items[items.length] = {\r",
									"            \"code\":list_product[ranListPDPos[i]].sku_code,\r",
									"            \"quantity\":quantity_i,\r",
									"            \"tax_code\":tag_code_list[list_func.getRandomInt(0,tag_code_list.length - 1)],\r",
									"            \"unit_price\":list_product[ranListPDPos[i]].sale_price,\r",
									"            \"note\": \"[API] note for product \" + list_product[ranListPDPos[i]].item_name,\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"let code = list_func.randomChars(5);\r",
									"let sub_total_amount = 0;\r",
									"for(let i in items){\r",
									"    sub_total_amount += items[i].unit_price*items[i].quantity;\r",
									"}\r",
									"\r",
									"let discounts, discount_value;\r",
									"if(configs.create_has_discount){\r",
									"    if(list_func.getRandomInt(0,1)){ // list_func.getRandomInt(0,1)\r",
									"        discount_value = list_func.getRandomInt(10,800) / 10;\r",
									"        discounts = {\r",
									"            \"is_rate\": true,\r",
									"            \"value\": discount_value,\r",
									"            \"type\": \"percentage\" // percentage, amount\r",
									"        }\r",
									"    } else {\r",
									"        discount_value = Math.ceil(sub_total_amount / list_func.getRandomInt(2,9));\r",
									"        discounts = {\r",
									"            \"is_rate\": false,\r",
									"            \"value\": discount_value, // list_func.getRandomInt(2,10)\r",
									"            \"type\": \"amount\" // percentage, amount\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"// tính lại giá\r",
									"let term_discount;\r",
									"let total_discount_amount = 0;\r",
									"console.log(\"sub_total_amount: \" + sub_total_amount);\r",
									"let discount_mode = pm.environment.get(\"C-discount_mode\");\r",
									"let case_;\r",
									"switch(configs.tax_create_type){\r",
									"    case \"price_excluding_tax\":\r",
									"        if(discount_mode == \"after_tax\"){\r",
									"            console.log(\"Giá chưa bao gồm thuế, giảm giá sau thuế\");\r",
									"            case_ = 3;\r",
									"        } else {\r",
									"            console.log(\"Giá chưa bao gồm thuế, giảm giá trước thuế\");\r",
									"            case_ = 1;\r",
									"        }\r",
									"        break;\r",
									"    case \"price_including_tax\":\r",
									"        if(discount_mode == \"after_tax\"){\r",
									"            console.log(\"Giá đã bao gồm thuế, giảm giá sau thuế\");\r",
									"            case_ = 4;\r",
									"        } else {\r",
									"            console.log(\"Giá đã bao gồm thuế, giảm giá trước thuế\");\r",
									"            case_ = 2;\r",
									"        }\r",
									"        break;\r",
									"    case \"tax_not_applicable\":\r",
									"    default:\r",
									"        console.log(\"Không apply thuế\");\r",
									"        case_ = 5;\r",
									"}\r",
									"\r",
									"switch(case_){\r",
									"    case 1:\r",
									"        if(configs.create_has_discount){\r",
									"            if(discounts.is_rate){\r",
									"                total_discount_amount += Math.round(discounts.value*sub_total_amount/100);\r",
									"            } else {\r",
									"                total_discount_amount += Math.round(discounts.value);\r",
									"            }\r",
									"        } else {\r",
									"            // do nothing\r",
									"        }\r",
									"\r",
									"        term_discount = 0;\r",
									"        for(let i in items){\r",
									"            // total_item_amount, before_tax_amount\r",
									"            items[i].total_item_amount = items[i].unit_price*items[i].quantity;\r",
									"            items[i].before_tax_amount = items[i].unit_price*items[i].quantity;\r",
									"\r",
									"            // discount_amount - ko tính round cuối\r",
									"            let discount_i;\r",
									"            if(configs.create_has_discount){\r",
									"                if(discounts.is_rate){\r",
									"                    discount_i = Math.round(discounts.value*items[i].total_item_amount/100);\r",
									"                } else {\r",
									"                    discount_i = Math.round(discounts.value*items[i].total_item_amount/sub_total_amount);\r",
									"                }\r",
									"                items[i].discount_amount = discount_i;\r",
									"            } else {\r",
									"                items[i].discount_amount = 0;\r",
									"            }\r",
									"\r",
									"            // item_tax_amount\r",
									"            let total_tax_amount_i = Math.round(items[i].tax_code.replace(/\\D/g, '') *(items[i].total_item_amount - items[i].discount_amount)/100);\r",
									"            items[i].tax_amount = total_tax_amount_i;\r",
									"\r",
									"            // after_tax_amount\r",
									"            items[i].after_tax_amount = items[i].before_tax_amount + total_tax_amount_i;\r",
									"\r",
									"            // total_amount\r",
									"            items[i].total_amount = items[i].before_tax_amount - items[i].discount_amount + total_tax_amount_i;\r",
									"        }\r",
									"        break;\r",
									"    case 2:\r",
									"        // sub_total_amount cần được tính lại giá trước thuế\r",
									"        sub_total_amount = 0;\r",
									"        sum_total_item_amount = 0;\r",
									"\r",
									"        // tính lại thuế (thuế chưa giảm giá)\r",
									"        total_net_amount = 0;\r",
									"        for(let i in items){\r",
									"            // total_item_amount\r",
									"            items[i].total_item_amount = items[i].unit_price*items[i].quantity;\r",
									"            sum_total_item_amount += items[i].total_item_amount;\r",
									"\r",
									"            // giá chưa thuế before_tax_amount\r",
									"            let item_net_amount_i = Math.round(items[i].total_item_amount / (1 + items[i].tax_code.replace(/\\D/g, '')/100));\r",
									"            items[i].before_tax_amount = item_net_amount_i;\r",
									"\r",
									"            total_net_amount += item_net_amount_i;\r",
									"        }\r",
									"\r",
									"        // chỉ support 1 discount trong 1 invoice\r",
									"        term_discount = 0;\r",
									"        for(let i in items){\r",
									"            // giảm giá\r",
									"            let item_total_discount_i = 0;\r",
									"            if(configs.create_has_discount){\r",
									"                if(i != items.length - 1){\r",
									"                    if(discounts.is_rate){\r",
									"                        // debug\r",
									"                        item_total_discount_i += Math.round(items[i].before_tax_amount * discounts.value/100);\r",
									"                    } \r",
									"                    else {\r",
									"                        item_total_discount_i += Math.round(discounts.value * items[i].total_item_amount/sum_total_item_amount);\r",
									"                    }\r",
									"                    items[i].discount_amount = item_total_discount_i;\r",
									"                    term_discount += item_total_discount_i;\r",
									"\r",
									"                } else {\r",
									"                    // ở đây không cần làm tròn nữa vì chỉ là hiệu của 2 số chẵn\r",
									"                    if(discounts.is_rate){ // => case này không cần tính số tổng rồi trừ lại\r",
									"                        item_total_discount_i += Math.round(items[i].before_tax_amount * discounts.value/100);\r",
									"                    } else {\r",
									"                        item_total_discount_i += Math.round(discounts.value - term_discount);\r",
									"                    }\r",
									"                    items[i].discount_amount = item_total_discount_i;\r",
									"                }\r",
									"            } else {\r",
									"                items[i].discount_amount = 0;\r",
									"            }\r",
									"\r",
									"            // giá sau discount => after_tax_amount\r",
									"            let item_net_amount_after_discount_i = items[i].before_tax_amount - items[i].discount_amount;\r",
									"            items[i].after_tax_amount = item_net_amount_after_discount_i;\r",
									"            sub_total_amount += item_net_amount_after_discount_i;\r",
									"\r",
									"            // tính lại thuế (thuế đã giảm giá)\r",
									"            let total_tax_amount_i =  Math.round(items[i].after_tax_amount * items[i].tax_code.replace(/\\D/g, '')/100);\r",
									"            items[i].tax_amount = total_tax_amount_i;\r",
									"\r",
									"            // total_amount\r",
									"            items[i].total_amount = items[i].before_tax_amount - items[i].discount_amount + total_tax_amount_i;\r",
									"        }\r",
									"        break;\r",
									"    case 3:\r",
									"        // sub_total_amount cần được tính lại giá sau thuế => rule mới, vẫn giữ giá trước thuế\r",
									"        sub_total_amount = 0;\r",
									"\r",
									"        for(let i in items){\r",
									"            // total_item_amount, before_tax_amount\r",
									"            items[i].total_item_amount = items[i].unit_price*items[i].quantity;\r",
									"            items[i].before_tax_amount = items[i].unit_price*items[i].quantity;\r",
									"\r",
									"            // item_tax_amount\r",
									"            let total_tax_amount_i = Math.round(items[i].tax_code.replace(/\\D/g, '') * items[i].total_item_amount/100);\r",
									"            items[i].tax_amount = total_tax_amount_i;\r",
									"\r",
									"            // after_tax_amount\r",
									"            items[i].after_tax_amount = items[i].before_tax_amount + total_tax_amount_i;\r",
									"            sub_total_amount += items[i].after_tax_amount;\r",
									"            // sub_total_amount += items[i].before_tax_amount;\r",
									"        }\r",
									"        console.log(\"new sub_total_amount: \" + sub_total_amount);\r",
									"        // với case chưa bao gồm thuế và giảm giá sau thuế, phải phân bổ thuế lại theo giá đã bao gồm thuế\r",
									"\r",
									"        if(configs.create_has_discount){\r",
									"            if(discounts.is_rate){\r",
									"                total_discount_amount += Math.round(discounts.value * sub_total_amount/100);\r",
									"            } else {\r",
									"                total_discount_amount += Math.round(discounts.value);\r",
									"            }\r",
									"            console.log(\"total_discount_amount: \" + total_discount_amount);\r",
									"        }\r",
									"\r",
									"        term_discount = 0;\r",
									"        for(let i in items){\r",
									"            // discount_amount\r",
									"            let discount_i;\r",
									"            if(configs.create_has_discount){\r",
									"                if(i != items.length - 1){\r",
									"                    if(discounts.is_rate){\r",
									"                        discount_i = Math.round(discounts.value * items[i].after_tax_amount/100);\r",
									"                    } else {\r",
									"                        discount_i = Math.round(discounts.value * items[i].before_tax_amount/sub_total_amount);\r",
									"                    }\r",
									"                    term_discount += discount_i;\r",
									"                } else {\r",
									"                    discount_i = Math.round(total_discount_amount - term_discount);\r",
									"                }\r",
									"                items[i].discount_amount = discount_i;\r",
									"            } else {\r",
									"                items[i].discount_amount = 0;\r",
									"            }\r",
									"\r",
									"            // total_amount\r",
									"            items[i].total_amount = items[i].before_tax_amount - items[i].discount_amount + items[i].tax_amount;\r",
									"        }\r",
									"        break;\r",
									"    case 4:\r",
									"        // sub_total_amount cần được tính lại giá trước thuế\r",
									"        sub_total_amount = 0;\r",
									"        sum_total_item_amount = 0;\r",
									"\r",
									"        // tính lại thuế (thuế chưa giảm giá)\r",
									"        total_net_amount = 0;\r",
									"        for(let i in items){\r",
									"            // total_item_amount\r",
									"            items[i].total_item_amount = items[i].unit_price*items[i].quantity;\r",
									"\r",
									"            sum_total_item_amount += items[i].total_item_amount;\r",
									"\r",
									"            // giá chưa thuế before_tax_amount\r",
									"            let item_net_amount_i = Math.round(items[i].total_item_amount / (1 + items[i].tax_code.replace(/\\D/g, '')/100));\r",
									"            items[i].before_tax_amount = item_net_amount_i;\r",
									"\r",
									"            total_net_amount += item_net_amount_i;\r",
									"        }\r",
									"\r",
									"        // chỉ support 1 discount trong 1 invoice\r",
									"        term_discount = 0;\r",
									"        for(let i in items){\r",
									"            // giảm giá => tạm thời ko tính ra số cuối để trừ, nếu PO yêu cầu thì update lại\r",
									"            let item_total_discount_i;\r",
									"            if(configs.create_has_discount){\r",
									"                if(discounts.is_rate){\r",
									"                    item_total_discount_i = Math.round(items[i].total_item_amount * discounts.value/100);\r",
									"                } else {\r",
									"                    item_total_discount_i = Math.round(discounts.value * items[i].total_item_amount/sum_total_item_amount);\r",
									"                }\r",
									"                \r",
									"                items[i].discount_amount = item_total_discount_i;\r",
									"                term_discount += item_total_discount_i;\r",
									"            } else {\r",
									"                items[i].discount_amount = 0;\r",
									"            }\r",
									"\r",
									"            // giá sau discount => after_tax_amount\r",
									"            let item_net_amount_after_discount_i = items[i].before_tax_amount - items[i].discount_amount;\r",
									"            items[i].after_tax_amount = item_net_amount_after_discount_i;\r",
									"            sub_total_amount += item_net_amount_after_discount_i;\r",
									"\r",
									"            // tính lại thuế (thuế đã giảm giá)\r",
									"            items[i].tax_amount = Math.round(items[i].before_tax_amount * items[i].tax_code.replace(/\\D/g, '')/100);\r",
									"            let total_tax_amount_i = items[i].tax_amount;\r",
									"\r",
									"            // total_amount\r",
									"            items[i].total_amount = items[i].before_tax_amount - items[i].discount_amount + total_tax_amount_i;\r",
									"        }\r",
									"        break;\r",
									"    case 5:\r",
									"    default:\r",
									"        if(configs.create_has_discount){\r",
									"            if(discounts.is_rate){\r",
									"                total_discount_amount += Math.round(discounts.value*sub_total_amount/100);\r",
									"            } else {\r",
									"                total_discount_amount += Math.round(discounts.value);\r",
									"            }\r",
									"        }\r",
									"\r",
									"        for(let i in items){\r",
									"            // total_item_amount, before_tax_amount\r",
									"            items[i].total_item_amount = items[i].unit_price*items[i].quantity;\r",
									"            items[i].before_tax_amount = items[i].unit_price*items[i].quantity;\r",
									"\r",
									"            // discount_amount\r",
									"            let discount_i = 0;\r",
									"            if(configs.create_has_discount){\r",
									"                if(discounts.is_rate){\r",
									"                    discount_i += Math.round(discounts.value*items[i].total_item_amount/100);\r",
									"                } else {\r",
									"                    discount_i += Math.round(discounts.value*items[i].total_item_amount/sub_total_amount);\r",
									"                }\r",
									"                items[i].discount_amount = discount_i;\r",
									"            } else {\r",
									"                items[i].discount_amount = 0;\r",
									"            }\r",
									"\r",
									"            // item_tax_amount\r",
									"            items[i].tax_amount = 0;\r",
									"\r",
									"            // after_tax_amount\r",
									"            items[i].after_tax_amount = items[i].before_tax_amount;\r",
									"\r",
									"            // total_amount\r",
									"            items[i].total_amount = items[i].before_tax_amount - items[i].discount_amount;\r",
									"        }\r",
									"        break;\r",
									"}\r",
									"\r",
									"let edit_cust_obj = pm.environment.get(\"C-edit_cust_obj\");\r",
									"let body = {\r",
									"    \"client_id\": pm.environment.get(\"C-client_id\"),\r",
									"    \"customer\": { // customer này sẽ dc validate những field nào, nếu có mixmatch thì ghi đè hay báo lỗi\r",
									"        \"code\": edit_cust_obj.code,\r",
									"        \"email\": \"\"\r",
									"    },\r",
									"    \"discount\": discounts,\r",
									"    \"due_date\": due_at,\r",
									"    \"items\":items,\r",
									"    \"invoice_code\": \"OC-\" + code,\r",
									"    // \"payment_config\": payment_config,\r",
									"    // \"reference_code\": \"RC-\" + code,\r",
									"    \"tax_type\": configs.tax_create_type,\r",
									"    \"transaction_date\": created_order_at,\r",
									"    \"note\":\"note for invoice OC-\" + code\r",
									"}\r",
									"body = JSON.stringify(body);\r",
									"\r",
									"// Concatenate the components to form the message to sign\r",
									"const message = `${secretKey}_${method}_${url}_${body || ''}_${timestamp}`;\r",
									"console.log(\"Generated message: \", message);\r",
									"\r",
									"// Generate SHA256 signature\r",
									"const signature = CryptoJS.SHA256(message).toString(CryptoJS.enc.Hex);\r",
									"console.log(\"Generated signature: \", signature);\r",
									"\r",
									"pm.environment.set(\"C-timestamp\",timestamp);\r",
									"\r",
									"// Add the signature to the headers\r",
									"pm.request.headers.add({ key: 'x-signature', value: signature });\r",
									"\r",
									"console.log(\"payload: \",JSON.parse(body));\r",
									"pm.environment.set(\"C-payload\",body);\r",
									"pm.environment.set(\"C-edit_invoice_obj\",JSON.parse(body));\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-client-id",
								"value": "{{C-client_id}}",
								"type": "text"
							},
							{
								"key": "x-timestamp",
								"value": "{{C-timestamp}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{f1_open_url}}/api/v1/invoices/{{C-invoice_id}}",
							"host": [
								"{{f1_open_url}}"
							],
							"path": [
								"api",
								"v1",
								"invoices",
								"{{C-invoice_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "pay_for_invoice_old",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    console.log(\"debug: \", jsData);",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let configs = pm.environment.get(\"C-configs\");",
									"    let payment_obj = pm.environment.get(\"C-payment_obj\");",
									"    let tnx_obj = jsData.data;",
									"    pm.environment.set(\"C-tnx_obj\",tnx_obj);",
									"",
									"    testcase++;",
									"    pm.environment.set(\"C-testcase\",testcase);",
									"    switch(configs.test_payment_method){",
									"        case \"mb\":",
									"            pm.execution.setNextRequest(\"hook_payment_mb_cash_in\"); // hook_payment_mb_cash_in",
									"            break;",
									"        case \"bank_transfer\":",
									"            pm.execution.setNextRequest(\"hook_payment_via_finesys\"); // hook_payment_via_finesys",
									"            break;",
									"        case \"bidv\":",
									"        default:",
									"            pm.execution.setNextRequest(\"hook_payment_via_finesys\"); // hook_payment_via_finesys",
									"    }",
									"} else {",
									"    console.log(\"Can't create invoice, end test\", jsData);",
									"    pm.execution.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let list_func = eval(pm.environment.get(\"list_common_func\"));\r",
									"let configs = pm.environment.get(\"C-configs\");\r",
									"\r",
									"let testcase = pm.environment.get(\"C-testcase\");\r",
									"console.log(\"Testcase: \" + testcase);\r",
									"\r",
									"// Example secret key for signing, replace with your actual secret\r",
									"const secretKey = pm.environment.get(\"C-client_key\");\r",
									"console.log(\"secretKey: \" + secretKey);\r",
									"\r",
									"let today = new Date();\r",
									"let timestamp = Math.floor(today.getTime()/1000) + 30;\r",
									"console.log(\"timestamp: \" + timestamp);\r",
									"\r",
									"// Get method, URL, body, and timestamp\r",
									"const method = pm.request.method;\r",
									"let url = pm.request.url.toString().replace(\"{{f1_open_url}}\",\"\");\r",
									"// console.log(\" ======== url: \", url);\r",
									"\r",
									"let invoice_obj = pm.environment.get(\"C-invoice_obj\");\r",
									"let payment_method_id = invoice_obj.payment_config[0];\r",
									"\r",
									"let body = {\r",
									"    \"bank_account_id\": pm.environment.get(\"C-va_id\"),\r",
									"    \"client_id\": pm.environment.get(\"C-client_id\"),\r",
									"    \"invoice_id\": pm.environment.get(\"C-invoice_id\"),\r",
									"    \"payment_method_id\": payment_method_id\r",
									"}\r",
									"body = JSON.stringify(body);\r",
									"\r",
									"// Concatenate the components to form the message to sign\r",
									"const message = `${secretKey}_${method}_${url}_${body || ''}_${timestamp}`;\r",
									"console.log(\"Generated message: \", message);\r",
									"\r",
									"// Generate SHA256 signature\r",
									"const signature = CryptoJS.SHA256(message).toString(CryptoJS.enc.Hex);\r",
									"console.log(\"Generated signature: \", signature);\r",
									"\r",
									"pm.environment.set(\"C-timestamp\",timestamp);\r",
									"\r",
									"// Add the signature to the headers\r",
									"pm.request.headers.add({ key: 'x-signature', value: signature });\r",
									"\r",
									"console.log(\"payload: \",JSON.parse(body));\r",
									"pm.environment.set(\"C-payload\",body);\r",
									"pm.environment.set(\"C-payment_obj\",JSON.parse(body));\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-client-id",
								"value": "{{C-client_id}}",
								"type": "text"
							},
							{
								"key": "x-timestamp",
								"value": "{{C-timestamp}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{f1_open_url}}/api/v1/invoice/create-payment",
							"host": [
								"{{f1_open_url}}"
							],
							"path": [
								"api",
								"v1",
								"invoice",
								"create-payment"
							]
						}
					},
					"response": []
				},
				{
					"name": "pay_for_invoice",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    console.log(\"debug: \", jsData);",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let configs = pm.environment.get(\"C-configs\");",
									"    let payment_obj = pm.environment.get(\"C-payment_obj\");",
									"    // let tnx_obj = jsData.data;",
									"    // pm.environment.set(\"C-tnx_obj\",tnx_obj);",
									"    ",
									"    payment_obj.payment_request_id = jsData.data.payment_request_id;",
									"    payment_obj.payment_request_code = jsData.data.payment_request_code;",
									"",
									"    testcase++;",
									"    pm.environment.set(\"C-testcase\",testcase);",
									"    switch(configs.test_payment_method){",
									"        case \"mb\":",
									"            payment_obj.bank_transfer_detail = jsData.data.bank_transfer_detail;",
									"",
									"            pm.environment.set(\"C-payment_obj\",payment_obj);",
									"            pm.execution.setNextRequest(\"hook_payment_mb_cash_in\"); // hook_payment_mb_cash_in",
									"            break;",
									"        case \"bank_transfer\":",
									"        case \"ewallet_momo\":",
									"        case \"card\":",
									"            payment_obj.payment_url = jsData.data.payment_url;",
									"",
									"            pm.environment.set(\"C-payment_obj\",payment_obj);",
									"            pm.execution.setNextRequest(\"hook_payment_via_finesys\"); // hook_payment_via_finesys",
									"            break;",
									"        case \"bidv\":",
									"        default:",
									"            pm.execution.setNextRequest(\"hook_payment_via_finesys\"); // hook_payment_via_finesys",
									"    }",
									"} else {",
									"    console.log(\"Can't create invoice, end test\", jsData);",
									"    pm.execution.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let list_func = eval(pm.environment.get(\"list_common_func\"));\r",
									"let configs = pm.environment.get(\"C-configs\");\r",
									"\r",
									"let testcase = pm.environment.get(\"C-testcase\");\r",
									"console.log(\"Testcase: \" + testcase);\r",
									"\r",
									"// Example secret key for signing, replace with your actual secret\r",
									"const secretKey = pm.environment.get(\"C-client_key\");\r",
									"console.log(\"secretKey: \" + secretKey);\r",
									"\r",
									"let today = new Date();\r",
									"let timestamp = Math.floor(today.getTime()/1000) + 30;\r",
									"console.log(\"timestamp: \" + timestamp);\r",
									"\r",
									"// Get method, URL, body, and timestamp\r",
									"const method = pm.request.method;\r",
									"let url = pm.request.url.toString().replace(\"{{f1_open_url}}\",\"\");\r",
									"// console.log(\" ======== url: \", url);\r",
									"\r",
									"let invoice_obj = pm.environment.get(\"C-invoice_obj\");\r",
									"// console.log(\"invoice_obj: \", invoice_obj);\r",
									"// let payment_method_id = invoice_obj.payment_config[0];\r",
									"\r",
									"let payment_method;\r",
									"switch(configs.test_payment_method){\r",
									"    case \"mb\":\r",
									"    case \"bank_transfer\":\r",
									"        payment_method = \"bank_transfer\";\r",
									"        break;\r",
									"    case \"ewallet_momo\":\r",
									"        payment_method = \"ewallet_momo\";\r",
									"        break;\r",
									"    case \"card\":\r",
									"        payment_method = \"card\";\r",
									"        break;\r",
									"    default:\r",
									"        console.log(\"Missing flow\");\r",
									"}\r",
									"\r",
									"let body = {\r",
									"    // \"bank_account_id\": pm.environment.get(\"C-va_id\"),\r",
									"    // \"client_id\": pm.environment.get(\"C-client_id\"),\r",
									"    // \"invoice_id\": pm.environment.get(\"C-invoice_id\"),\r",
									"    // \"payment_method_id\": payment_method_id,\r",
									"    //\r",
									"    \"payment_method\": payment_method,\r",
									"    \"account_id\": pm.environment.get(\"C-va_id\"),\r",
									"    \"amount\": invoice_obj.exp_total_amount,\r",
									"    \"description\": \"thanh toan don hang\",\r",
									"    \"reference_id\": pm.environment.get(\"C-invoice_id\"),\r",
									"    \"reference_type\": \"invoice\",\r",
									"    \"success_redirect_url\": \"<YOUR_SUCCESS_REDIRECT_URL>\",\r",
									"    \"failure_redirect_url\": \"<YOUR_FAILURE_REDIRECT_URL>\",\r",
									"}\r",
									"body = JSON.stringify(body);\r",
									"\r",
									"// Concatenate the components to form the message to sign\r",
									"const message = `${secretKey}_${method}_${url}_${body || ''}_${timestamp}`;\r",
									"console.log(\"Generated message: \", message);\r",
									"\r",
									"// Generate SHA256 signature\r",
									"const signature = CryptoJS.SHA256(message).toString(CryptoJS.enc.Hex);\r",
									"console.log(\"Generated signature: \", signature);\r",
									"\r",
									"pm.environment.set(\"C-timestamp\",timestamp);\r",
									"\r",
									"// Add the signature to the headers\r",
									"pm.request.headers.add({ key: 'x-signature', value: signature });\r",
									"\r",
									"console.log(\"payload: \",JSON.parse(body));\r",
									"pm.environment.set(\"C-payload\",body);\r",
									"pm.environment.set(\"C-payment_obj\",JSON.parse(body));\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-client-id",
								"value": "{{C-client_id}}",
								"type": "text"
							},
							{
								"key": "x-timestamp",
								"value": "{{C-timestamp}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{f1_open_url}}/api/v1/payments",
							"host": [
								"{{f1_open_url}}"
							],
							"path": [
								"api",
								"v1",
								"payments"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_invoice_detail",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");\r",
									"console.log(\"Testcase: \" + testcase);\r",
									"\r",
									"let invoice_id;\r",
									"switch(testcase){\r",
									"    case 3: case 6:\r",
									"        let invoice_obj = pm.environment.get(\"C-invoice_obj\");\r",
									"        invoice_id = invoice_obj.invoice_id;\r",
									"        break;\r",
									"    case 4:\r",
									"        let edit_invoice_obj = pm.environment.get(\"C-edit_invoice_obj\");\r",
									"        invoice_id = edit_invoice_obj.invoice_id;\r",
									"        break;\r",
									"    default:\r",
									"}\r",
									"pm.environment.set(\"C-invoice_id\",invoice_id);\r",
									"\r",
									"// Example secret key for signing, replace with your actual secret\r",
									"const secretKey = pm.environment.get(\"C-client_key\");\r",
									"console.log(\"secretKey: \" + secretKey);\r",
									"\r",
									"// function ()\r",
									"let today = new Date();\r",
									"let timestamp = Math.floor(today.getTime()/1000) + 30;\r",
									"console.log(\"timestamp: \" + timestamp);\r",
									"\r",
									"// Get method, URL, body, and timestamp\r",
									"const method = pm.request.method;\r",
									"let url = pm.request.url.toString().replace(\"{{f1_open_url}}\",\"\");\r",
									"url = url.replace(\"{{C-invoice_id}}\",invoice_id);\r",
									"const body = pm.request.body ? pm.request.body.raw : '';\r",
									"// const timestamp = pm.request.headers.get('x-timestamp');\r",
									"\r",
									"// Concatenate the components to form the message to sign\r",
									"const message = `${secretKey}_${method}_${url}_${body || ''}_${timestamp}`;\r",
									"console.log(\"Generated message: \", message);\r",
									"\r",
									"// Generate SHA256 signature\r",
									"const signature = CryptoJS.SHA256(message).toString(CryptoJS.enc.Hex);\r",
									"console.log(\"Generated signature: \", signature);\r",
									"\r",
									"pm.environment.set(\"C-timestamp\",timestamp);\r",
									"\r",
									"// Add the signature to the headers\r",
									"pm.request.headers.add({ key: 'x-signature', value: signature });\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let configs = pm.environment.get(\"C-configs\");",
									"    let invoice_obj = pm.environment.get(\"C-invoice_obj\");",
									"    let edit_invoice_obj = pm.environment.get(\"C-edit_invoice_obj\");",
									"",
									"    switch(testcase){",
									"        case 3:",
									"            console.log(\"debug: \", jsData);",
									"",
									"            // total_amount",
									"            pm.test(\"total_amount is \" + invoice_obj.exp_total_amount, function () {",
									"                pm.expect(invoice_obj.exp_total_amount).to.eql(jsData.data.total_amount);",
									"            });",
									"",
									"            // total_tax_amount",
									"            pm.test(\"total_tax_amount is \" + invoice_obj.exp_tax_amount, function () {",
									"                pm.expect(invoice_obj.exp_tax_amount).to.eql(jsData.data.total_tax_amount);",
									"            });",
									"",
									"            // total_discount_amount",
									"            pm.test(\"total_discount_amount is \" + invoice_obj.exp_discount_amount, function () {",
									"                pm.expect(invoice_obj.exp_discount_amount).to.eql(jsData.data.total_discount_amount);",
									"            });",
									"",
									"            // contact_name",
									"            let customer_obj = pm.environment.get(\"C-customer_obj\");",
									"            pm.test(\"contact_name of invoice correctly! \" + customer_obj.name, function () {",
									"                pm.expect(jsData.data.customer.name).to.eql(customer_obj.name);",
									"            });",
									"",
									"            // invoice_code",
									"            pm.test(\"invoice_code of invoice correctly! \" + invoice_obj.invoice_code, function () {",
									"                pm.expect(invoice_obj.invoice_code == jsData.data.invoice_code).to.be.true;",
									"            });",
									"            ",
									"            // reference_code",
									"            pm.test(\"reference_code of invoice correctly! \" + invoice_obj.reference_code, function () {",
									"                pm.expect(invoice_obj.reference_code == jsData.data.reference_code).to.be.true;",
									"            });",
									"",
									"            // transaction_date",
									"            pm.test(\"transaction_date of invoice correctly! \" + invoice_obj.transaction_date, function () {",
									"                pm.expect(invoice_obj.transaction_date.substring(0,19) == jsData.data.transaction_date.substring(0,19)).to.be.true;",
									"            });",
									"",
									"            // due_date",
									"            pm.test(\"due_date of invoice correctly! \" + invoice_obj.due_date, function () {",
									"                pm.expect(invoice_obj.due_date.substring(0,19) == jsData.data.due_date.substring(0,19)).to.be.true;",
									"            });",
									"",
									"            // payment_config",
									"",
									"            if(configs.action == \"edit_invoice\"){",
									"                testcase++;",
									"                pm.environment.set(\"C-testcase\",testcase);",
									"                pm.execution.setNextRequest(\"edit_invoice\"); // edit_invoice",
									"            } else if(configs.action == \"pay_for_invoice\"){",
									"                testcase = 5;",
									"                pm.environment.set(\"C-testcase\",testcase);",
									"                pm.execution.setNextRequest(\"pay_for_invoice\"); // pay_for_invoice",
									"            } else {",
									"                console.log(\"-------- End Testsuite 120 --------\");",
									"                pm.execution.setNextRequest(null);",
									"            }",
									"            break;",
									"        case 4:",
									"            console.log(\"debug: \", jsData);",
									"",
									"            // total_amount",
									"            pm.test(\"total_amount is \" + edit_invoice_obj.exp_total_amount, function () {",
									"                pm.expect(edit_invoice_obj.exp_total_amount).to.eql(jsData.data.total_amount);",
									"            });",
									"",
									"            // total_tax_amount",
									"            pm.test(\"total_tax_amount is \" + edit_invoice_obj.exp_tax_amount, function () {",
									"                pm.expect(edit_invoice_obj.exp_tax_amount).to.eql(jsData.data.total_tax_amount);",
									"            });",
									"",
									"            // total_discount_amount",
									"            pm.test(\"total_discount_amount is \" + edit_invoice_obj.exp_discount_amount, function () {",
									"                pm.expect(edit_invoice_obj.exp_discount_amount).to.eql(jsData.data.total_discount_amount);",
									"            });",
									"",
									"            // contact_name",
									"            let edit_cust_obj = pm.environment.get(\"C-edit_cust_obj\");",
									"            pm.test(\"contact_name of invoice correctly! \" + edit_cust_obj.name, function () {",
									"                pm.expect(jsData.data.customer.name).to.eql(edit_cust_obj.name);",
									"            });",
									"",
									"            // invoice_code",
									"            pm.test(\"invoice_code of invoice correctly! \" + edit_invoice_obj.invoice_code, function () {",
									"                pm.expect(edit_invoice_obj.invoice_code == jsData.data.invoice_code).to.be.true;",
									"            });",
									"            ",
									"            // reference_code",
									"            pm.test(\"reference_code of invoice correctly! \" + edit_invoice_obj.reference_code, function () {",
									"                pm.expect(edit_invoice_obj.reference_code == jsData.data.reference_code).to.be.true;",
									"            });",
									"",
									"            // transaction_date",
									"            pm.test(\"transaction_date of invoice correctly! \" + edit_invoice_obj.transaction_date, function () {",
									"                pm.expect(edit_invoice_obj.transaction_date.substring(0,19) == jsData.data.transaction_date.substring(0,19)).to.be.true;",
									"            });",
									"",
									"            // due_date",
									"            pm.test(\"due_date of invoice correctly! \" + edit_invoice_obj.due_date, function () {",
									"                pm.expect(edit_invoice_obj.due_date.substring(0,19) == jsData.data.due_date.substring(0,19)).to.be.true;",
									"            });",
									"",
									"            // payment_config",
									"",
									"            console.log(\"-------- End Testsuite 120 --------\");",
									"            pm.execution.setNextRequest(null);",
									"            break;",
									"        case 6:",
									"            console.log(\"debug: \", jsData);",
									"            let payment_obj = pm.environment.get(\"C-payment_obj\");",
									"            console.log(\"payment_obj: \", payment_obj);",
									"",
									"            // total_amount",
									"            pm.test(\"total_amount is \" + invoice_obj.exp_total_amount, function () {",
									"                pm.expect(invoice_obj.exp_total_amount).to.eql(jsData.data.total_amount);",
									"            });",
									"",
									"            // paid_amount",
									"            pm.test(\"paid_amount is \" + payment_obj.amount, function () {",
									"                pm.expect(payment_obj.amount).to.eql(jsData.data.paid_amount);",
									"            });",
									"",
									"            // unpaid_amount",
									"            pm.test(\"unpaid_amount is \" + (invoice_obj.exp_total_amount - payment_obj.amount), function () {",
									"                pm.expect(invoice_obj.exp_total_amount - payment_obj.amount).to.eql(jsData.data.unpaid_amount);",
									"            });",
									"",
									"            console.log(\"-------- End Testsuite 120 --------\");",
									"            pm.execution.setNextRequest(null);",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            pm.execution.setNextRequest(null);",
									"    }",
									"} else {",
									"    console.log(\"Can't get payment detail, end test\", jsData);",
									"    pm.execution.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-client-id",
								"value": "{{C-client_id}}",
								"type": "text"
							},
							{
								"key": "x-timestamp",
								"value": "{{C-timestamp}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{f1_open_url}}/api/v1/invoices/{{C-invoice_id}}",
							"host": [
								"{{f1_open_url}}"
							],
							"path": [
								"api",
								"v1",
								"invoices",
								"{{C-invoice_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "hook",
			"item": [
				{
					"name": "hook_payment_via_finesys",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function toISOStringWithTimezone(date, offset) {",
									"    const tzOffset = offset * 60; // offset in minutes",
									"    const localISOTime = new Date(date.getTime() - (date.getTimezoneOffset() * 60000));",
									"    const adjustedTime = new Date(localISOTime.getTime() + (tzOffset * 60000));",
									"    const isoString = adjustedTime.toISOString().slice(0, -1); // remove the 'Z' at the end",
									"    ",
									"    const sign = offset >= 0 ? \"+\" : \"-\";",
									"    const absOffset = Math.abs(offset);",
									"    const hours = String(Math.floor(absOffset)).padStart(2, '0');",
									"    const minutes = String(absOffset % 1 * 60).padStart(2, '0');",
									"",
									"    return `${isoString}${sign}${hours}:${minutes}`;",
									"}",
									"",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let viet_qr_payment = pm.environment.get(\"C-viet_qr_payment\");",
									"let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"let invoice_obj = pm.environment.get(\"C-invoice_obj\");",
									"let payment_obj = pm.environment.get(\"C-payment_obj\");",
									"",
									"let date = new Date();",
									"let today = toISOStringWithTimezone(date,0).substring(0,19).replace(\"T\",\" \")",
									"let next_day_stp = Math.floor(date.getTime()/1000) + 24*60*60;",
									"let next_day = new Date(next_day_stp*1000);",
									"let term_next = toISOStringWithTimezone(next_day,0).substring(0,19).replace(\"T\",\" \")",
									"",
									"let base_fee_amount = 2000 + Math.round(invoice_obj.exp_total_amount * 0.02);",
									"let net_amount = invoice_obj.exp_total_amount - base_fee_amount;",
									"let redirect_url = \"https://book-dev.finan.one/pay/\" + pm.environment.get(\"C-business_id\") + \"/invoice/\" + invoice_obj.system_code + \"/\" + payment_obj.payment_request_code;",
									"",
									"let configs = pm.environment.get(\"C-configs\");",
									"",
									"let payload;",
									"switch(configs.test_payment_method){",
									"    case \"va_galaxy\":",
									"    case \"ewallet_momo\":",
									"    case \"card\":",
									"        payload = {",
									"            \"business_id\": \"B00100000009\", // ko care",
									"            \"notify_data\": {",
									"                \"amount\": invoice_obj.exp_total_amount, // số tiền cash in",
									"                \"user_id\": \"97df335075c94e3895f34a2243e75332_597666253\", // ?",
									"                \"expired_at\": term_next, // get current+1",
									"                \"description\": \"THANH TOÁN HÓA ĐƠN \" + invoice_obj.invoice_code, // cần check lại",
									"                \"paid_amount\": invoice_obj.exp_total_amount, // = amount",
									"                \"reference_id\": payment_obj.payment_request_code, // payment_request_code khi gen QR",
									"                \"currency_code\": \"704\", // fix vnd",
									"                \"payment_details\": [",
									"                {",
									"                    \"paid_at\": today, // get current",
									"                    \"created_at\": today, // get current",
									"                    \"net_amount\": net_amount, // số tiền thực nhận",
									"                    \"payment_url\": \"https://payment.galaxypay.vn\", // link qua galaxy pay, tạm fix",
									"                    \"total_amount\": invoice_obj.exp_total_amount, // số tiền cash in",
									"                    \"currency_code\": \"704\",",
									"                    \"reconciled_at\": null,",
									"                    \"payment_method\": payment_obj.payment_method, // phương thức thanh toán",
									"                    \"payment_number\": \"001P1020240524165625VMZCCZ\", // random",
									"                    \"recipient_info\": {},",
									"                    \"base_fee_amount\": base_fee_amount, // phí",
									"                    \"markup_fee_amount\": 0,",
									"                    \"settlement_details\": [],",
									"                    \"provider_reference_id\": \"2405244733135185214416670\", // fix",
									"                    \"payment_request_status\": \"success\"",
									"                }",
									"                ],",
									"                \"payment_link_url\": null,",
									"                \"payment_link_type\": \"single\",",
									"                \"cancel_redirect_url\": redirect_url, // gán theo system code",
									"                \"payment_link_number\": \"24052416562530934959\",",
									"                \"payment_link_status\": \"paid\",",
									"                \"failure_redirect_url\": redirect_url,",
									"                \"success_redirect_url\": redirect_url,",
									"                // \"linking_account_number\": viet_qr_payment.bank_account.account_number.substring(3,viet_qr_payment.bank_account.account_number.length), // \"002110000007\"",
									"                // \"linking_bank_account_number\": viet_qr_payment.bank_account.account_number// \"1AM002110000007\"",
									"            },",
									"            \"notify_type\": \"payment_success\"",
									"        };",
									"        break;",
									"    case \"bank_transfer\": // đổi shinhan qua hook này, tạm thời dùng hook success ",
									"        payload = {",
									"            \"business_id\": \"B00200000001\", // SBH => \"B00100000010\", 1AM => B00200000001, WKT => B02900000001",
									"            \"notify_data\": {",
									"                \"amount\": invoice_obj.exp_total_amount,",
									"                \"user_id\": \"owner_1am\",",
									"                \"expired_at\": term_next,",
									"                \"description\": \"[Open API] simulate hook\",",
									"                \"paid_amount\": invoice_obj.exp_total_amount,",
									"                \"reference_id\": payment_obj.payment_request_code,",
									"                \"currency_code\": \"704\",",
									"                \"payment_details\": [",
									"                {",
									"                    \"paid_at\": today,",
									"                    \"created_at\": today,",
									"                    \"net_amount\": net_amount,",
									"                    \"payment_url\": null,",
									"                    \"total_amount\": invoice_obj.exp_total_amount,",
									"                    \"currency_code\": \"704\",",
									"                    \"reconciled_at\": null,",
									"                    \"payment_method\": \"bank_transfer\",",
									"                    // \"payment_number\": tnx_obj.payment_info.provider_payment_number,",
									"                    // \"recipient_info\": {",
									"                    //   \"qr_code\": \"00020101021238590010A0000007270129000697042401151AM0025000000100208QRIBFTTA5303704540421005802VN5909QUY LUONG62270823THANH TOAN HOA DON HD2463048E6D\",",
									"                    //   \"bank_code\": \"616\",",
									"                    //   \"account_name\": \"QUY LUONG\",",
									"                    //   \"bank_account_number\": \"1AM002500000010\"",
									"                    // },",
									"                    // \"recipient_info\":payment_obj.payment_info.qr_info,",
									"                    \"base_fee_amount\": base_fee_amount,",
									"                    \"markup_fee_amount\": 0,",
									"                    \"settlement_details\": [",
									"                    {",
									"                        \"net_amount\": net_amount,",
									"                        \"settled_at\": today,",
									"                        // \"payment_note\": tnx_obj.payment_info.payment_note,",
									"                        \"base_fee_amount\": base_fee_amount,",
									"                        \"markup_fee_amount\": 0,",
									"                        \"transaction_number\": \"002T100320240524102605PBLDYGBD\",",
									"                        \"bank_transaction_number\": \"8113VAC2405000003701\"",
									"                    }",
									"                    ],",
									"                    \"provider_reference_id\": null,",
									"                    \"payment_request_status\": \"settled\"",
									"                }",
									"                ],",
									"                \"payment_link_url\": null,",
									"                \"payment_link_type\": \"single\",",
									"                \"cancel_redirect_url\": redirect_url,",
									"                \"payment_link_number\": \"24052410233005759735\",",
									"                \"payment_link_status\": \"paid\",",
									"                \"failure_redirect_url\": redirect_url,",
									"                \"success_redirect_url\": redirect_url,",
									"                // \"linking_account_number\": tnx_obj.payment_info.provider_payment_number,",
									"                // \"linking_bank_account_number\": tnx_obj.payment_info.qr_info.account_number // account trong payment",
									"            },",
									"            \"notify_type\": \"payment_settled\"",
									"        }",
									"        break;",
									"    case \"bidv\":",
									"        payload = {",
									"            \"business_id\": \"B00100003\",",
									"            \"notify_data\": {",
									"                \"paid_at\": today,",
									"                \"qr_code\": tnx_obj.payment_info.qr_info.qr_code,",
									"                \"va_number\": \"\",",
									"                \"order_note\": \"THANH TOAN HOA DON \" + invoice_obj.invoice_code,",
									"                \"paid_amount\": invoice_obj.exp_total_amount,",
									"                \"order_amount\": invoice_obj.exp_total_amount,",
									"                \"order_ref_id\": tnx_obj.payment_request_code,",
									"                \"order_status\": \"\",",
									"                \"currency_code\": \"704\",",
									"                \"payment_number\": \"001P1120240823104530YBFFJQ\",",
									"                \"merchant_number\": \"M00100000008\",",
									"                \"reference_number\": \"001P1120240823104530YBFFJQ\"",
									"            },",
									"            \"notify_type\": \"order_finished\"",
									"        }",
									"        break;",
									"    default:",
									"        console.log(\"missing \" + configs.test_payment_method);",
									"        break;",
									"}",
									"",
									"payment_obj.net_amount = net_amount;",
									"payment_obj.base_fee_amount = base_fee_amount;",
									"pm.environment.set(\"C-payment_obj\",payment_obj);",
									"",
									"console.log(\"payload: \",payload);",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));",
									"pm.environment.set(\"C-tnx_obj\",payload);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    console.log(\"debug: \", jsData); // hook",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"",
									"    // testcase++;",
									"    // pm.environment.set(\"C-testcase\",testcase);",
									"    postman.setNextRequest(\"get_invoice_detail\"); // get_list_transaction, get_invoice_detail",
									"} else {",
									"    console.log(\"Can't call hook, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-banking/hook/v1/finesys",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-banking",
								"hook",
								"v1",
								"finesys"
							]
						}
					},
					"response": []
				},
				{
					"name": "hook_payment_mb_cash_in",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function toISOStringWithTimezone(date, offset) {",
									"    const tzOffset = offset * 60; // offset in minutes",
									"    const localISOTime = new Date(date.getTime() - (date.getTimezoneOffset() * 60000));",
									"    const adjustedTime = new Date(localISOTime.getTime() + (tzOffset * 60000));",
									"    const isoString = adjustedTime.toISOString().slice(0, -1); // remove the 'Z' at the end",
									"    ",
									"    const sign = offset >= 0 ? \"+\" : \"-\";",
									"    const absOffset = Math.abs(offset);",
									"    const hours = String(Math.floor(absOffset)).padStart(2, '0');",
									"    const minutes = String(absOffset % 1 * 60).padStart(2, '0');",
									"",
									"    return `${isoString}${sign}${hours}:${minutes}`;",
									"}",
									"",
									"// ============================= random number between min and max",
									"function getRandomInt(min, max) {",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"",
									"// ============================= random characters",
									"function randomChars(length) {",
									"    var result           = '';",
									"    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
									"    var charactersLength = characters.length;",
									"    for ( var i = 0; i < length; i++ ) {",
									"      result += characters.charAt(Math.floor(Math.random() * ",
									" charactersLength));",
									"   }",
									"   return result;",
									"}",
									"",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let date = new Date();",
									"let today = toISOStringWithTimezone(date,0).substring(0,19).replace(\"T\",\" \")",
									"let next_day_stp = Math.floor(date.getTime()/1000) + 24*60*60;",
									"let next_day = new Date(next_day_stp*1000);",
									"let term_next = toISOStringWithTimezone(next_day,0).substring(0,19).replace(\"T\",\" \")",
									"",
									"let payment_obj = pm.environment.get(\"C-payment_obj\");",
									"let invoice_obj = pm.environment.get(\"C-invoice_obj\");",
									"",
									"let payload = {",
									"    \"partner_code\": \"finan_one\", // fix",
									"    \"merchant_bank_account_id\": payment_obj.account_id, // external_account_id",
									"    \"bin_code\": \"970422\", // fix",
									"    \"partner_order_id\": payment_obj.payment_request_code,",
									"    \"amount\": payment_obj.amount,",
									"    \"txn_id\": randomChars(6), // ko map gì",
									"    \"txn_time\": today,",
									"    // \"created_at\": ,",
									"    \"bank_account_number\": payment_obj.bank_transfer_detail.account_number,",
									"    \"bank_virtual_account_number\": payment_obj.bank_transfer_detail.account_number,",
									"    \"bank_holder_name\": payment_obj.bank_transfer_detail.account_name, // account_name_custom",
									"    \"bank_note\": payment_obj.bank_transfer_detail.remark,",
									"    \"bank_ref_code\": \"\",",
									"    // \"bank_note\": \"TTB5TZL8 SOTR95P9\",",
									"    // \"bank_ref_code\": \"FT24236750010348\",",
									"    \"order_total_amount\": payment_obj.amount,",
									"    \"order_paid_amount\": payment_obj.amount,",
									"    \"order_status\": 1,",
									"    \"additional\": {",
									"        \"customer_account\": \"---\",",
									"        \"customer_name\": \"---\",",
									"        \"payment_detail\": \"---\"",
									"    },",
									"    // \"type\":\"static\",",
									"}",
									"",
									"console.log(\"payload: \",payload);",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));",
									"pm.environment.set(\"C-payment_obj\",payload); // tạm thời xử lý là payment_obj"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    console.log(\"debug: \", jsData); // hook",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"",
									"    // testcase++;",
									"    // pm.environment.set(\"C-testcase\",testcase);",
									"    postman.setNextRequest(\"get_invoice_detail\"); // get_list_transaction",
									"} else {",
									"    console.log(\"Can't call hook, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-request-id",
								"value": "62356403",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-banking/hook/v1/viet-qr-pro",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-banking",
								"hook",
								"v1",
								"viet-qr-pro"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"let configs = {",
					"    \"is_use_email\":false, // bắt buộc vì luồng này đang hard code client-id của WKT",
					"    \"limit_page\":10,",
					"    \"timeout\":12000,",
					"    \"action\":\"edit_invoice\", // create_invoice, edit_invoice, pay_for_invoice",
					"    \"is_pre_tax\":true, // đang lấy theo config business",
					"    \"tax_create_type\":\"price_including_tax\", // price_excluding_tax, price_including_tax, tax_not_applicable",
					"    \"create_has_discount\":false,",
					"    \"tax_edit_type\":\"tax_not_applicable\",",
					"    \"edit_has_discount\":true,",
					"    \"test_payment_method\":\"mb\" // mb, bidv, bank_transfer, va_galaxy (ewallet_momo, card)",
					"}",
					"",
					"pm.environment.set(\"C-configs\",configs);",
					"// console.log(\"configs: \",configs);",
					"",
					"/**",
					" * Note:",
					" * - action:",
					" *      + create_invoice: chỉ tạo invoice",
					" *      + edit_invoice: tạo invoice > edit invoice",
					" *      + pay_for_invoice: tạo invoice > thanh toán cho invoice",
					" * - test_payment_method:",
					" *      + bank_transfer: shinhan va",
					" *      + mb: mb va",
					" *      + bidv: root bidv",
					" */"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"// ====================================== parser cURL",
					"function parseCURL(request_api){",
					"    let curl = \"\";",
					"    switch(request_api.method){",
					"        case \"PUT\":",
					"            curl = \"curl --location --request PUT \";",
					"            break;",
					"        case \"PATCH\":",
					"            curl = \"curl --location --request PATCH \";",
					"            break;",
					"        case \"DELETE\":",
					"            curl = \"curl --location --request DELETE \";",
					"            break;",
					"        default:",
					"            curl = \"curl --location \";",
					"            break;",
					"    }",
					"    curl += \"'\" + request_api.url.protocol + \"://\"",
					"",
					"    // host",
					"    for(let i in request_api.url.host){",
					"        if(i >= request_api.url.host.length - 1){",
					"            curl += request_api.url.host[i] + \"/\";",
					"        } else {",
					"            curl += request_api.url.host[i] + \".\";",
					"        }",
					"    }",
					"    // path",
					"    for(let i in request_api.url.path){",
					"        if(i >= request_api.url.path.length - 1){",
					"            curl += request_api.url.path[i];",
					"        } else {",
					"            curl += request_api.url.path[i] + \"/\";",
					"        }",
					"    }",
					"    // query (if have)",
					"    if(\"query\" in request_api.url){",
					"        if(request_api.url.query.length > 0){",
					"            curl += \"?\";",
					"            for(let i in request_api.url.query){",
					"                if(i >= request_api.url.query.length - 1){",
					"                    curl += request_api.url.query[i].key + \"=\" + request_api.url.query[i].value + \"' \";",
					"                } else {",
					"                    curl += request_api.url.query[i].key + \"=\" + request_api.url.query[i].value + \"&\";",
					"                }",
					"            }",
					"        } else {",
					"            curl += \"' \";",
					"        }",
					"    } else {",
					"        curl += \"' \";",
					"    }",
					"    // header",
					"    for(let i in request_api.header){",
					"        if(i >= request_api.header.length - 1){",
					"            curl += \"--header '\" + request_api.header[i].key + \": \" + request_api.header[i].value + \"'\";",
					"        } else {",
					"            curl += \"--header '\" + request_api.header[i].key + \": \" + request_api.header[i].value + \"' \";",
					"        }",
					"    }",
					"    switch(request_api.method){",
					"        case \"POST\":",
					"            curl += \" --data '\" + request_api.body.raw + \"'\"",
					"            break;",
					"        case \"PUT\": case \"PATCH\":",
					"            curl += \" --data-raw '\" + request_api.body.raw + \"'\"",
					"            break;",
					"        default:",
					"            break;",
					"    }",
					"    console.log(curl);",
					"    return curl;",
					"}",
					"const request_api = pm.request.toJSON();",
					"// console.log(\"request_api\",request_api);",
					"parseCURL(request_api);"
				]
			}
		}
	]
}