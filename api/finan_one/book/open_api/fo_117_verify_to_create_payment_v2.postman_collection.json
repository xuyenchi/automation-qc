{
	"info": {
		"_postman_id": "642ab669-8201-47d6-9e75-a2817d0c0160",
		"name": "fo_117_verify_to_create_payment_v2",
		"description": "### Testsuite: Verify to create payment (gen QR) & hook payment\n\n###### Testcase:\n\n1. Login (F1)\n    \n2. Get data\n    \n    1. client / get list client => get 1 client to action\n        \n    2. transaction / get list transaction => get total\n        \n    3. account / get list va => get 1 va to action\n        \n    4. \\[BIDV only\\] account / get master account => get BIDV master account (\\*2)\n        \n    5. ledger_coa / get list coa => get coa account_receivable\n        \n    6. ledger_account / get list payment account => update account_id for va_obj\n        \n    7. ledger_txn / get list ledger txn => get total\n        \n    8. ledger_posting / get list posting => get list posting\n        \n    9. payment / get list payment mothod -> tìm id của quỹ tạo payment\n        \n    10. payment / get list payment -> ghi nhận danh sách payment ban đầu\n        \n3. Create payment\n    \n4. Check data\n    \n    1. account / get list va\n        \n    2. payment / get list payment sau khi create payment: increase 1\n        \n    3. payment / get payment detail => check data\n        \n5. hook payment (hook đầu bank để tạo thanh toán)\n    \n6. Check data\n    \n    1. payment/ get list payment sau khi hook data : update payment status, amount\n        \n    2. payment / get payment detail => check status update\n        \n    3. transaction / get list => increase 1\n        \n    4. transaction / get detail => data correctly\n        \n    5. ledger_account / get list payment account => update balance amout\n        \n    6. ledger_tnx / get list ledger tnx => mapping data only\n        \n    7. ledger_posting / get list posting => increase (2/4) records with correct data\n        \n7. hook to client (bonus) => manual check on Lark setting (\\*)\n    \n\n###### Note:\n\n- (\\*) setting lúc update client webhhook_url\n    \n- (\\*2) chưa support BIDV\n    \n\n\\=====\n\nCreate Payment V2\n\n1. Login (f1)\n    \n2. Get data\n    \n    1. client/ get_list_clients\n        \n    2. account / get_master_account\n        \n    3. account / get_list_va_v2 => Tìm account number để create payment\n        \n3. Create payment\n    \n    1. payment_v2 / create_payment_v2 => nếu là \"bank_transfer\" và \"viet_qr_pro_mb\" cần truyền account number\n        \n4. Get data\n    \n    1. payment_v2/ get_payment_detail_v2\n        \n5. Hook payment\n    \n6. Get data\n    \n    1. payment_v2/ get_payment_detail_v2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "17535207",
		"_collection_link": "https://warped-spaceship-122945.postman.co/workspace/Learn_API_Testing~870ffb9e-5962-40b3-8d91-530fbf3c4242/collection/17535207-642ab669-8201-47d6-9e75-a2817d0c0160?action=share&source=collection_link&creator=17535207"
	},
	"item": [
		{
			"name": "authen",
			"item": [
				{
					"name": "login",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// ============================= random characters",
									"function randomChars(length) {",
									"    var result           = '';",
									"    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
									"    var charactersLength = characters.length;",
									"    for ( var i = 0; i < length; i++ ) {",
									"      result += characters.charAt(Math.floor(Math.random() * ",
									" charactersLength));",
									"   }",
									"   return result;",
									"}",
									"",
									"let testcase = 1;",
									"console.log(\"-------- Start Testsuite 117 --------\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let platform = [\"desktop-web\",\"mobile-web\",\"mobile-app\"];",
									"let configs = pm.environment.get(\"C-configs\");",
									"let payload;",
									"if(configs.is_use_email){",
									"    payload = {",
									"        \"app_version\": \"1.0.0\",",
									"        \"device_info\": {",
									"            \"id\": randomChars(7) + \"-\" + randomChars(4) + \"-\" + randomChars(4) + \"-\" + randomChars(4) + \"-\" + randomChars(12),",
									"            \"name\": \"IP name\",",
									"            \"os\": \"iphone\"",
									"        },",
									"        \"email\": pm.environment.get(\"SER-email\"), // pm.environment.get(\"SER-email\")",
									"        \"encrypted_password\": pm.environment.get(\"SER-password\"),",
									"        \"phone_number\": \"\",",
									"        \"platform_key\": platform[0]",
									"    }",
									"} else {",
									"    payload = {",
									"        \"app_version\": \"1.0.0\",",
									"        \"device_info\": {",
									"            \"id\": randomChars(7) + \"-\" + randomChars(4) + \"-\" + randomChars(4) + \"-\" + randomChars(4) + \"-\" + randomChars(12),",
									"            \"name\": \"IP name\",",
									"            \"os\": \"iphone\"",
									"        },",
									"        \"email\":\"\", // pm.environment.get(\"SER-email\")",
									"        \"encrypted_password\": pm.environment.get(\"SER-password\"),",
									"        \"phone_number\": pm.environment.get(\"SER-phone_number\"),",
									"        \"platform_key\": platform[0]",
									"    }",
									"}",
									"",
									"console.log(\"payload: \",payload);",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));",
									"pm.environment.set(\"C-testcase\",testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    pm.test(\"System code is 102000\", function () {",
									"        pm.expect(jsData.code).to.eql(102000);",
									"    });",
									"",
									"    if(jsData.code == 102000){",
									"        let userToken = null;",
									"        try {",
									"            userToken = jsData.data.access_token;",
									"            pm.environment.set(\"C-userToken\",userToken);",
									"        } catch {",
									"            console.log(\"Can't get userToken\");",
									"        }",
									"",
									"        pm.test(\"Got userToken\", function () {",
									"            pm.expect(userToken != null).to.be.true;",
									"        });",
									"",
									"        let userInfo = jsData.data.user_info;",
									"",
									"        // show log",
									"        console.log(\"userInfo:\",JSON.stringify(userInfo));",
									"        pm.environment.set(\"C-userInfo\",userInfo);",
									"",
									"        postman.setNextRequest(\"verify_token_to_get_business\");",
									"    } else {",
									"        console.log(\"Can't get Token, end test\",jsData);",
									"        postman.setNextRequest(null);",
									"    }",
									"} else {",
									"    console.log(\"Can't login new account, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-user/api/v1/auth/login",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-user",
								"api",
								"v1",
								"auth",
								"login"
							]
						},
						"description": "Login User"
					},
					"response": []
				},
				{
					"name": "verify_token_to_get_business",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// verify token to get business",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = JSON.parse(responseBody);",
									"if(pm.response.code == 200 && jsData.code == 102000){",
									"    const jsData = pm.response.json();",
									"    let configs = pm.environment.get(\"C-configs\");",
									"    pm.environment.set(\"C-user_id\",jsData.data.user_id);",
									"",
									"    let business_id = jsData.data.headers[\"x-business-id\"];",
									"    console.log(\"business_id: \" + business_id);",
									"    pm.environment.set(\"C-business_id\",business_id);",
									"",
									"    let user_id = jsData.data.user_id;",
									"    console.log(\"user_id: \" + user_id);",
									"    pm.environment.set(\"C-user_id\",user_id);",
									"",
									"    switch(configs.feature){",
									"        case \"create_client\":",
									"            postman.setNextRequest(\"create_client\");",
									"            break;",
									"        case \"edit_client\":",
									"            if(pm.environment.get(\"C-default_client\") != null){",
									"                postman.setNextRequest(\"update_client\");",
									"            } else {",
									"                console.log(\"missing default_client\");",
									"                postman.setNextRequest(null);",
									"            }",
									"            break;",
									"        case \"create_va\":",
									"            if(pm.environment.get(\"C-default_client\") != null){",
									"                postman.setNextRequest(\"get_master_account\");",
									"            } else {",
									"                console.log(\"missing default_client\");",
									"                postman.setNextRequest(null);",
									"            }",
									"            break;",
									"        case \"create_external_transfer\":",
									"        case \"create_internal_transfer\":",
									"        default:",
									"            if(pm.environment.get(\"C-default_client\") != null){",
									"                postman.setNextRequest(\"get_list_va\");",
									"            } else {",
									"                console.log(\"missing default_client\");",
									"                postman.setNextRequest(null);",
									"            }",
									"    }",
									"    postman.setNextRequest(\"get_current_business\");",
									"} else {",
									"    console.log(\"Can't check token to get business_id, end test\");",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"token\": \"{{C-userToken}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-user/api/v1/auth/verify-token",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-user",
								"api",
								"v1",
								"auth",
								"verify-token"
							]
						},
						"description": "Login User"
					},
					"response": []
				},
				{
					"name": "get_current_business",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ============================= random number between min and max",
									"function getRandomInt(min, max) {",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    // console.log(\"Current business info: \", jsData.data);",
									"    let business_id = jsData.data.current_business.id;",
									"    pm.environment.set(\"X-business_id\", business_id);",
									"    console.log(\"business_id\", business_id)",
									"    let branch_id = null;",
									"    try {",
									"        branch_id = jsData.data.current_business.list_branch[0].id;",
									"        pm.environment.set(\"C-branch_id\",branch_id);",
									"    } catch {",
									"        console.log(\"Can't get branch id\");",
									"    }",
									"",
									"    pm.test(\"Got branch id \" + branch_id, function () {",
									"        pm.expect(branch_id != null).to.be.true;",
									"    });",
									"",
									"    let payment_method = null;",
									"    let list_payment_method = [];",
									"    let configs = pm.environment.get(\"C-configs\");",
									"    let test_payment_method = configs.test_payment_method;",
									"    try {",
									"        switch(test_payment_method){",
									"            case \"viet_qr_pro_mb\":",
									"                for(let i in jsData.data.list_payment_method){",
									"                    if(jsData.data.list_payment_method[i].key == test_payment_method){ ",
									"                        payment_method = jsData.data.list_payment_method[i];",
									"                        break;",
									"                    }",
									"                }",
									"                break;",
									"            case \"va_galaxy\":",
									"                for(let i in jsData.data.list_payment_method){",
									"                    if(jsData.data.list_payment_method[i].bank_account.account_number.includes(\"SBB\")){ ",
									"                        list_payment_method[list_payment_method.length] = jsData.data.list_payment_method[i];",
									"                    }",
									"                }",
									"                payment_method = list_payment_method[getRandomInt(0,list_payment_method.length -1)];",
									"                break;",
									"            case \"bank_transfer\":",
									"                for(let i in jsData.data.list_payment_method){",
									"                    if(jsData.data.list_payment_method[i].key == test_payment_method){ ",
									"                        list_payment_method[list_payment_method.length] = jsData.data.list_payment_method[i];",
									"                    }",
									"                }",
									"                payment_method = list_payment_method[getRandomInt(0,list_payment_method.length -1)];",
									"                break;",
									"            default:",
									"                console.log(\"Missing flow\");",
									"                break;",
									"        }",
									"    } catch {",
									"        console.log(\"Can't get branch id\");",
									"    }",
									"    pm.environment.set(\"C-viet_qr_payment\",payment_method);",
									"",
									"    pm.test(\"Got branch id \" + branch_id, function () {",
									"        pm.expect(branch_id != null).to.be.true;",
									"    });",
									"    ",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    testcase++;",
									"    pm.environment.set(\"C-testcase\",testcase);",
									"    postman.setNextRequest(\"get_master_account\"); // get_list_clients",
									"} else {",
									"    console.log(\"Can't get business detail, end test\", jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-business/api/v1/business/get-current",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-business",
								"api",
								"v1",
								"business",
								"get-current"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "client",
			"item": [
				{
					"name": "get_list_clients",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");\r",
									"console.log(\"Testcase: \" + testcase);\r",
									"\r",
									"let page = pm.environment.get(\"C-page\");\r",
									"let page_size = pm.environment.get(\"C-page_size\");\r",
									"if(!page){\r",
									"    page = 1;\r",
									"    pm.environment.set(\"C-page\",page);\r",
									"\r",
									"    page_size = 20;\r",
									"    pm.environment.set(\"C-page_size\",page_size);\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let list_func = eval(pm.environment.get(\"list_common_func\"));",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let configs = pm.environment.get(\"C-configs\");",
									"    let page = pm.environment.get(\"C-page\");",
									"    let total_pages = jsData.meta.total_pages;",
									"",
									"    let list_clients, old_list_clients;",
									"    // console.log(\"debug total record in page: \" + jsData.data.length);",
									"    switch(testcase){",
									"        case 2:",
									"            list_clients = pm.environment.get(\"C-list_clients\");",
									"            if(!list_clients){",
									"                list_clients = [];",
									"            }",
									"            break;",
									"        case 4:",
									"            old_list_clients = pm.environment.get(\"C-old_list_clients\");",
									"            if(!old_list_clients){",
									"                old_list_clients = pm.environment.get(\"C-list_clients\");",
									"                pm.environment.unset(\"C-list_clients\");",
									"                pm.environment.set(\"C-old_list_clients\",old_list_clients);",
									"            }",
									"",
									"            list_clients = pm.environment.get(\"C-list_clients\");",
									"            if(!list_clients){",
									"                list_clients = [];",
									"            }",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow\");",
									"            break;",
									"    }",
									"",
									"    for(let item in jsData.data){",
									"        list_clients[list_clients.length] = {",
									"            \"client_id\":jsData.data[item].id,",
									"            \"business_id\":jsData.data[item].business_id,",
									"            \"client_secret\":jsData.data[item].client_secret,",
									"            \"name\":jsData.data[item].name,",
									"            \"owner_id\":jsData.data[item].owner_id,",
									"            \"webhook_url\":jsData.data[item].webhook_url,",
									"            \"is_active\":jsData.data[item].is_active,",
									"            \"created_at\":jsData.data[item].created_at,",
									"            \"updated_at\":jsData.data[item].updated_at",
									"        }",
									"    }",
									"    pm.environment.set(\"C-list_clients\",list_clients);",
									"",
									"    if(page >= total_pages || page >= configs.limit_page){",
									"        // must clear page & page_size",
									"        pm.environment.unset(\"C-page\");",
									"        pm.environment.unset(\"C-page_size\");",
									"",
									"        switch(testcase){",
									"            case 2:",
									"                let client_obj = null;",
									"                try {",
									"                    client_obj = list_clients[list_func.getRandomInt(0,list_clients.length - 1)];",
									"                } catch {",
									"                    console.log(\"Have nothing client\");",
									"                }",
									"                pm.test(\"Got client_obj\", function () {",
									"                    pm.expect(client_obj != null).to.be.true;",
									"                });",
									"",
									"                if(client_obj != null){",
									"                    pm.environment.set(\"C-client_obj\",client_obj);",
									"                    console.log(\"Action with client: \", client_obj);",
									"                    pm.environment.set(\"C-client_key\",client_obj.client_secret);",
									"                    pm.environment.set(\"C-client_id\",client_obj.client_id);",
									"",
									"                   postman.setNextRequest(\"get_master_account\"); // get_list_transaction",
									"                   //postman.setNextRequest(\"get_list_va_v2\");",
									"                } else {",
									"                    postman.setNextRequest(null);",
									"                }",
									"                break;",
									"            default:",
									"                console.log(\"Missing flow, end test\");",
									"                postman.setNextRequest(null);",
									"        }",
									"    } else {",
									"        page++;",
									"        pm.environment.set(\"C-page\",page);",
									"",
									"        console.log(\"view next page (\" + page + \") to get more clients\");",
									"        postman.setNextRequest(\"get_list_clients\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get list client, end test\", jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{f1_open_url}}/api/v1/client/get-clients",
							"host": [
								"{{f1_open_url}}"
							],
							"path": [
								"api",
								"v1",
								"client",
								"get-clients"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "transaction",
			"item": [
				{
					"name": "get_list_transaction",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");\r",
									"console.log(\"Testcase: \" + testcase);\r",
									"\r",
									"\r",
									"let page = pm.environment.get(\"C-page\");\r",
									"let page_size = pm.environment.get(\"C-page_size\");\r",
									"if(!page){\r",
									"    page = 1;\r",
									"    pm.environment.set(\"C-page\",page);\r",
									"\r",
									"    page_size = 20;\r",
									"    pm.environment.set(\"C-page_size\",page_size);\r",
									"}\r",
									"\r",
									"// Example secret key for signing, replace with your actual secret\r",
									"const secretKey = pm.environment.get(\"C-client_key\");\r",
									"console.log(\"secretKey: \" + secretKey);\r",
									"\r",
									"// function ()\r",
									"let today = new Date();\r",
									"let timestamp = Math.floor(today.getTime()/1000) + 30;\r",
									"console.log(\"timestamp: \" + timestamp);\r",
									"\r",
									"// Get method, URL, body, and timestamp\r",
									"const method = pm.request.method;\r",
									"let url = pm.request.url.toString().replace(\"{{f1_open_url}}\",\"\");\r",
									"url = url.replace(\"{{C-page}}\",page);\r",
									"url = url.replace(\"{{C-page_size}}\",page_size);\r",
									"\r",
									"const body = pm.request.body ? pm.request.body.raw : '';\r",
									"// const timestamp = pm.request.headers.get('x-timestamp');\r",
									"\r",
									"// Concatenate the components to form the message to sign\r",
									"const message = `${secretKey}_${method}_${url}_${body || ''}_${timestamp}`;\r",
									"console.log(\"Generated message: \", message);\r",
									"\r",
									"// Generate SHA256 signature\r",
									"const signature = CryptoJS.SHA256(message).toString(CryptoJS.enc.Hex);\r",
									"console.log(\"Generated signature: \", signature);\r",
									"\r",
									"pm.environment.set(\"C-timestamp\",timestamp);\r",
									"\r",
									"// Add the signature to the headers\r",
									"pm.request.headers.add({ key: 'x-signature', value: signature });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let list_func = eval(pm.environment.get(\"list_common_func\"));",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let configs = pm.environment.get(\"C-configs\");",
									"    let page = pm.environment.get(\"C-page\");",
									"    let total_pages = jsData.meta.total_pages;",
									"",
									"    let list_tnx, old_list_tnx;",
									"    // console.log(\"debug total record in page: \" + jsData.data.length);",
									"    switch(testcase){",
									"        case 2:",
									"            list_tnx = pm.environment.get(\"C-list_tnx\");",
									"            if(!list_tnx){",
									"                list_tnx = [];",
									"            }",
									"            break;",
									"        case 6:",
									"            old_list_tnx = pm.environment.get(\"C-old_list_tnx\");",
									"            if(!old_list_tnx){",
									"                old_list_tnx = pm.environment.get(\"C-list_tnx\");",
									"                pm.environment.unset(\"C-list_tnx\");",
									"                pm.environment.set(\"C-old_list_tnx\",old_list_tnx);",
									"            }",
									"",
									"            list_tnx = pm.environment.get(\"C-list_tnx\");",
									"            if(!list_tnx){",
									"                list_tnx = [];",
									"            }",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow\");",
									"            break;",
									"    }",
									"",
									"    for(let item in jsData.data){",
									"        list_tnx[list_tnx.length] = {",
									"            \"transaction_id\":jsData.data[item].transaction_id,",
									"            \"transaction_number\":jsData.data[item].transaction_number,",
									"            \"created_at\":jsData.data[item].created_at,",
									"            \"type\":jsData.data[item].type,",
									"            \"bank_remark\":jsData.data[item].bank_remark,",
									"            \"amount\":jsData.data[item].amount,",
									"            \"additional_info\":jsData.data[item].additional_info",
									"        }",
									"    }",
									"    pm.environment.set(\"C-list_tnx\",list_tnx);",
									"",
									"    if(page >= total_pages || page >= configs.limit_page){",
									"        // must clear page & page_size",
									"        pm.environment.unset(\"C-page\");",
									"        pm.environment.unset(\"C-page_size\");",
									"",
									"        let total_transaction = jsData.meta.total_rows;",
									"        switch(testcase){",
									"            case 2:",
									"                pm.test(\"Got total tnx!!! \" + list_tnx.length, function () {",
									"                    pm.expect(list_tnx.length > 0).to.be.true;",
									"                });",
									"                pm.environment.set(\"C-total_transaction\",total_transaction);",
									"",
									"                if(configs.test_payment_method == \"bidv\"){ // bidv đang chưa support thanh toán ở va",
									"                    postman.setNextRequest(\"get_master_account\"); // get_master_account",
									"                } else {",
									"                    postman.setNextRequest(\"get_list_va\"); // get_list_va",
									"                }",
									"                break;",
									"            case 6:",
									"                let payment_obj = pm.environment.get(\"C-payment_obj\");",
									"                console.log(\"payment_obj: \", payment_obj);",
									"",
									"                let old_total_transaction = pm.environment.get(\"C-total_transaction\");",
									"                pm.test(\"total tnx increase 1\", function () {",
									"                    console.log(\"current_tnx: \" + total_transaction);",
									"                    console.log(\"old: \" + old_total_transaction);",
									"                    pm.expect(total_transaction).to.eql(old_total_transaction + 1);",
									"                });",
									"",
									"                let isFound = false, tnx_obj = null;",
									"                for(let i in list_tnx){",
									"                    if(configs.test_payment_method == \"mb\"){",
									"                        if(payment_obj.payment_info_other.payment_request_code == list_tnx[i].additional_info.txn_id){",
									"                            isFound = true;",
									"                            tnx_obj = list_tnx[i];",
									"                            break;",
									"                        }",
									"                    } else { // hiện tại chỉ có shinhan - BIDV chưa support",
									"                        if(payment_obj.payment_info_other.payment_request_code == list_tnx[i].additional_info.transaction_number){",
									"                            isFound = true;",
									"                            tnx_obj = list_tnx[i];",
									"                            break;",
									"                        }",
									"                    }",
									"                }",
									"",
									"                pm.test(\"Found new tnx\", function () {",
									"                    console.log(\"tnx_obj: \", tnx_obj);",
									"                    pm.expect(isFound).to.be.true;",
									"                });",
									"",
									"                if(isFound){",
									"                    payment_obj.tnx = tnx_obj;",
									"",
									"                    // type",
									"                    pm.test(\"tnx type must be CR\", function () {",
									"                        pm.expect(tnx_obj.type).to.eql(\"CR\");",
									"                    });",
									"",
									"                    // amount",
									"                    pm.test(\"tnx amount must be \" + payment_obj.payment_info.request_amount, function () {",
									"                        pm.expect(tnx_obj.amount).to.eql(payment_obj.payment_info.request_amount);",
									"                    });",
									"",
									"                    // created_at",
									"                    let today = new Date();",
									"                    let value_at = today.toISOString();",
									"                    pm.test(\"tnx created_at must be \" + value_at, function () {",
									"                        console.log(\"act: \" + tnx_obj.created_at);",
									"                        payment_obj.value_at = value_at;",
									"                        pm.expect(tnx_obj.created_at.substring(0,17)).to.eql(value_at.substring(0,17));",
									"                    });",
									"                    ",
									"                    pm.environment.set(\"C-payment_obj\",payment_obj);",
									"                    postman.setNextRequest(\"get_transaction_detail\"); // get_transaction_detail",
									"                } else {",
									"                    // ko tạo tnx thì ko cần check detail",
									"                    postman.setNextRequest(null);",
									"                }",
									"                break;",
									"            default:",
									"                console.log(\"Missing flow, end test\");",
									"                postman.setNextRequest(null);",
									"        }",
									"    } else {",
									"        page++;",
									"        pm.environment.set(\"C-page\",page);",
									"",
									"        console.log(\"view next page (\" + page + \") to get more tnx\");",
									"        postman.setNextRequest(\"get_list_transaction\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get list va, end test\", jsData);",
									"    postman.setNextRequest(null);",
									"}2"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-client-id",
								"value": "{{C-client_id}}",
								"type": "text"
							},
							{
								"key": "x-timestamp",
								"value": "{{C-timestamp}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{f1_open_url}}/api/v1/transaction/get-list?page={{C-page}}&page_size={{C-page_size}}",
							"host": [
								"{{f1_open_url}}"
							],
							"path": [
								"api",
								"v1",
								"transaction",
								"get-list"
							],
							"query": [
								{
									"key": "page",
									"value": "{{C-page}}"
								},
								{
									"key": "page_size",
									"value": "{{C-page_size}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get_transaction_detail",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");\r",
									"console.log(\"Testcase: \" + testcase);\r",
									"\r",
									"let payment_obj = pm.environment.get(\"C-payment_obj\");\r",
									"let tnx_number = payment_obj.tnx.transaction_number;\r",
									"pm.environment.set(\"C-tnx_number\",tnx_number);\r",
									"\r",
									"// Example secret key for signing, replace with your actual secret\r",
									"const secretKey = pm.environment.get(\"C-client_key\");\r",
									"console.log(\"secretKey: \" + secretKey);\r",
									"\r",
									"// function ()\r",
									"let today = new Date();\r",
									"let timestamp = Math.floor(today.getTime()/1000) + 30;\r",
									"console.log(\"timestamp: \" + timestamp);\r",
									"\r",
									"// Get method, URL, body, and timestamp\r",
									"const method = pm.request.method;\r",
									"let url = pm.request.url.toString().replace(\"{{f1_open_url}}\",\"\");\r",
									"url = url.replace(\"{{C-tnx_number}}\",tnx_number);\r",
									"const body = pm.request.body ? pm.request.body.raw : '';\r",
									"// const timestamp = pm.request.headers.get('x-timestamp');\r",
									"\r",
									"// Concatenate the components to form the message to sign\r",
									"const message = `${secretKey}_${method}_${url}_${body || ''}_${timestamp}`;\r",
									"console.log(\"Generated message: \", message);\r",
									"\r",
									"// Generate SHA256 signature\r",
									"const signature = CryptoJS.SHA256(message).toString(CryptoJS.enc.Hex);\r",
									"console.log(\"Generated signature: \", signature);\r",
									"\r",
									"pm.environment.set(\"C-timestamp\",timestamp);\r",
									"\r",
									"// Add the signature to the headers\r",
									"pm.request.headers.add({ key: 'x-signature', value: signature });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let configs = pm.environment.get(\"C-configs\");",
									"    let payment_obj = pm.environment.get(\"C-payment_obj\");",
									"",
									"    switch(testcase){",
									"        case 6:",
									"            console.log(\"debug: \", jsData);",
									"",
									"            // type",
									"            pm.test(\"tnx type must be CR\", function () {",
									"                pm.expect(jsData.data.type).to.eql(\"CR\");",
									"            });",
									"",
									"            // amount",
									"            pm.test(\"tnx amount must be \" + payment_obj.payment_info.request_amount, function () {",
									"                pm.expect(jsData.data.amount).to.eql(payment_obj.payment_info.request_amount);",
									"            });",
									"",
									"            // created_at",
									"            pm.test(\"tnx created_at must be \" + payment_obj.value_at, function () {",
									"                console.log(\"act: \" + jsData.data.created_at);",
									"                pm.expect(jsData.data.created_at.substring(0,17)).to.eql(payment_obj.value_at.substring(0,17));",
									"            });",
									"            ",
									"            postman.setNextRequest(\"get_list_payment_account\"); // get_list_payment_account",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"    }",
									"} else {",
									"    console.log(\"Can't get payment detail, end test\", jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-client-id",
								"value": "{{C-client_id}}",
								"type": "text"
							},
							{
								"key": "x-timestamp",
								"value": "{{C-timestamp}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{f1_open_url}}/api/v1/transaction/detail/{{C-tnx_number}}",
							"host": [
								"{{f1_open_url}}"
							],
							"path": [
								"api",
								"v1",
								"transaction",
								"detail",
								"{{C-tnx_number}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "account",
			"item": [
				{
					"name": "get_master_account",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"// Example secret key for signing, replace with your actual secret",
									"const secretKey = pm.environment.get(\"C-client_key\");",
									"console.log(\"secretKey: \" + secretKey);",
									"",
									"// function ()",
									"let today = new Date();",
									"let timestamp = Math.floor(today.getTime()/1000) + 30;",
									"console.log(\"timestamp: \" + timestamp);",
									"",
									"// Get method, URL, body, and timestamp",
									"const method = pm.request.method;",
									"const url = pm.request.url.toString().replace(\"{{f1_open_url}}\",\"\");",
									"const body = pm.request.body ? pm.request.body.raw : '';",
									"// const timestamp = pm.request.headers.get('x-timestamp');",
									"",
									"// Concatenate the components to form the message to sign",
									"const message = `${secretKey}_${method}_${url}_${body || ''}_${timestamp}`;",
									"console.log(\"Generated message: \", message);",
									"",
									"// Generate SHA256 signature",
									"const signature = CryptoJS.SHA256(message).toString(CryptoJS.enc.Hex);",
									"console.log(\"Generated signature: \", signature);",
									"",
									"pm.environment.set(\"C-timestamp\",timestamp);",
									"",
									"// Add the signature to the headers",
									"pm.request.headers.add({ key: 'x-signature', value: signature });",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let list_func = eval(pm.environment.get(\"list_common_func\"));",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let configs = pm.environment.get(\"C-configs\");",
									"",
									"    console.log(\"Debug: \", jsData);",
									"",
									"    let master_account_obj = null, list_master = [];",
									"    if(configs.test_payment_method == \"bidv\"){",
									"        console.log(\"BIDV chưa support tạo va\");",
									"        for(let i in jsData.data){",
									"            if(jsData.data[i].bank_code == \"BIDV\"){",
									"                list_master[list_master.length] = jsData.data[i];",
									"            }",
									"        }",
									"        master_account_obj = list_master[list_func.getRandomInt(0,list_master.length - 1)];   ",
									"    }",
									"",
									"    pm.test(\"Got BIDV master_account_obj\", function () {",
									"        pm.expect(master_account_obj != null).to.be.true;",
									"    });",
									"    ",
									"    if(master_account_obj != null){",
									"        pm.environment.set(\"C-master_account_obj\",master_account_obj);",
									"        console.log(\"Payment with master_account: \", master_account_obj);",
									"        ",
									"        postman.setNextRequest(\"get_list_va_v2\"); // create_payment",
									"    } else {",
									"        console.log(\"Missing master_account_obj, end test\");",
									"        //postman.setNextRequest(null);",
									"        postman.setNextRequest(\"get_list_va_v2\")",
									"    }",
									"} else {",
									"    console.log(\"Can't get master account \", jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-client-id",
								"value": "{{C-client_id}}",
								"type": "text"
							},
							{
								"key": "x-timestamp",
								"value": "{{C-timestamp}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{f1_open_url}}/api/v1/master-bank-accounts",
							"host": [
								"{{f1_open_url}}"
							],
							"path": [
								"api",
								"v1",
								"master-bank-accounts"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_list_va",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");\r",
									"console.log(\"Testcase: \" + testcase);\r",
									"\r",
									"let page = pm.environment.get(\"C-page\");\r",
									"let page_size = pm.environment.get(\"C-page_size\");\r",
									"if(!page){\r",
									"    page = 1;\r",
									"    pm.environment.set(\"C-page\",page);\r",
									"\r",
									"    page_size = 20;\r",
									"    pm.environment.set(\"C-page_size\",page_size);\r",
									"}\r",
									"\r",
									"// Example secret key for signing, replace with your actual secret\r",
									"const secretKey = pm.environment.get(\"C-client_key\");\r",
									"console.log(\"secretKey: \" + secretKey);\r",
									"\r",
									"// function ()\r",
									"let today = new Date();\r",
									"let timestamp = Math.floor(today.getTime()/1000) + 30;\r",
									"console.log(\"timestamp: \" + timestamp);\r",
									"\r",
									"// Get method, URL, body, and timestamp\r",
									"const method = pm.request.method;\r",
									"let url = pm.request.url.toString().replace(\"{{f1_open_url}}\",\"\");\r",
									"url = url.replace(\"{{C-page}}\",page);\r",
									"url = url.replace(\"{{C-page_size}}\",page_size);\r",
									"\r",
									"const body = pm.request.body ? pm.request.body.raw : '';\r",
									"// const timestamp = pm.request.headers.get('x-timestamp');\r",
									"\r",
									"// Concatenate the components to form the message to sign\r",
									"const message = `${secretKey}_${method}_${url}_${body || ''}_${timestamp}`;\r",
									"console.log(\"Generated message: \", message);\r",
									"\r",
									"// Generate SHA256 signature\r",
									"const signature = CryptoJS.SHA256(message).toString(CryptoJS.enc.Hex);\r",
									"console.log(\"Generated signature: \", signature);\r",
									"\r",
									"pm.environment.set(\"C-timestamp\",timestamp);\r",
									"\r",
									"// Add the signature to the headers\r",
									"pm.request.headers.add({ key: 'x-signature', value: signature });\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let list_func = eval(pm.environment.get(\"list_common_func\"));",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let configs = pm.environment.get(\"C-configs\");",
									"    let page = pm.environment.get(\"C-page\");",
									"    let total_pages = jsData.meta.total_pages;",
									"",
									"    let list_va, old_list_va;",
									"    // console.log(\"debug total record in page: \" + jsData.data.length);",
									"    switch(testcase){",
									"        case 2:",
									"            list_va = pm.environment.get(\"C-list_va\");",
									"            if(!list_va){",
									"                list_va = [];",
									"            }",
									"            break;",
									"        case 4:",
									"            old_list_va = pm.environment.get(\"C-old_list_va\");",
									"            if(!old_list_va){",
									"                old_list_va = pm.environment.get(\"C-list_va\");",
									"                pm.environment.unset(\"C-list_va\");",
									"                pm.environment.set(\"C-old_list_va\",old_list_va);",
									"            }",
									"",
									"            list_va = pm.environment.get(\"C-list_va\");",
									"            if(!list_va){",
									"                list_va = [];",
									"            }",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow\");",
									"            break;",
									"    }",
									"",
									"    for(let item in jsData.data){",
									"        switch(configs.test_payment_method){",
									"            case \"bank_transfer\":",
									"                if(jsData.data[item].bank_code == \"SHBVN\"){",
									"                    list_va[list_va.length] = {",
									"                        \"account_number\":jsData.data[item].account_number,",
									"                        \"account_name\":jsData.data[item].account_name,",
									"                        \"bank_code\":jsData.data[item].bank_code,",
									"                        \"usage_type\":jsData.data[item].usage_type,",
									"                        \"va_id\":jsData.data[item].id,",
									"                        \"balance_available_amount\":jsData.data[item].balance_available_amount,",
									"                        \"is_active\":jsData.data[item].is_active,",
									"                        \"reference_id\":jsData.data[item].reference_id,",
									"                        \"master_account_name\":jsData.data[item].master_account_name,",
									"                        \"bank_id\":jsData.data[item].bank_id",
									"                    }",
									"                }",
									"                break;",
									"            case \"mb\":",
									"                // console.log(\"Debug MB\");",
									"                if(jsData.data[item].bank_code == \"MB\"){",
									"                    list_va[list_va.length] = {",
									"                        \"account_number\":jsData.data[item].account_number,",
									"                        \"account_name\":jsData.data[item].account_name,",
									"                        \"bank_code\":jsData.data[item].bank_code,",
									"                        \"usage_type\":jsData.data[item].usage_type,",
									"                        \"va_id\":jsData.data[item].id,",
									"                        \"balance_available_amount\":jsData.data[item].balance_available_amount,",
									"                        \"is_active\":jsData.data[item].is_active,",
									"                        \"reference_id\":jsData.data[item].reference_id,",
									"                        \"master_account_name\":jsData.data[item].master_account_name,",
									"                        \"bank_id\":jsData.data[item].bank_id",
									"                    }",
									"                }",
									"                break;",
									"            case \"bidv\":",
									"            default:",
									"                if(jsData.data[item].bank_code == \"BIDV\"){",
									"                    list_va[list_va.length] = {",
									"                        \"account_number\":jsData.data[item].account_number,",
									"                        \"account_name\":jsData.data[item].account_name,",
									"                        \"bank_code\":jsData.data[item].bank_code,",
									"                        \"usage_type\":jsData.data[item].usage_type,",
									"                        \"va_id\":jsData.data[item].id,",
									"                        \"balance_available_amount\":jsData.data[item].balance_available_amount,",
									"                        \"is_active\":jsData.data[item].is_active,",
									"                        \"reference_id\":jsData.data[item].reference_id,",
									"                        \"master_account_name\":jsData.data[item].master_account_name,",
									"                        \"bank_id\":jsData.data[item].bank_id",
									"                    }",
									"                }",
									"        }",
									"    }",
									"    pm.environment.set(\"C-list_va\",list_va);",
									"",
									"    if(page >= total_pages || page >= configs.limit_page){",
									"        // must clear page & page_size",
									"        pm.environment.unset(\"C-page\");",
									"        pm.environment.unset(\"C-page_size\");",
									"",
									"        console.log(\"Debug list_va: \", list_va);",
									"",
									"        switch(testcase){",
									"            case 2:",
									"                let va_obj = null;",
									"                try {",
									"                    va_obj = list_va[list_func.getRandomInt(0,list_va.length - 1)];",
									"                } catch {",
									"                    console.log(\"Have nothing va\");",
									"                }",
									"                pm.test(\"Got va_obj\", function () {",
									"                    pm.expect(va_obj != null).to.be.true;",
									"                });",
									"",
									"                if(va_obj != null){",
									"                    pm.environment.set(\"C-va_obj\",va_obj);",
									"                    console.log(\"Action with va: \", va_obj);",
									"                    pm.environment.set(\"C-va_id\",va_obj.va_id);",
									"",
									"                    // testcase++;",
									"                    // pm.environment.set(\"C-testcase\",testcase);",
									"                    postman.setNextRequest(\"get_list_coa\"); // get_list_coa",
									"                } else {",
									"                    postman.setNextRequest(null);",
									"                }",
									"                break;",
									"            default:",
									"                console.log(\"Missing flow, end test\");",
									"                postman.setNextRequest(null);",
									"        }",
									"    } else {",
									"        page++;",
									"        pm.environment.set(\"C-page\",page);",
									"",
									"        console.log(\"view next page (\" + page + \") to get more vas\");",
									"        postman.setNextRequest(\"get_list_va\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get list va, end test\", jsData);",
									"    postman.setNextRequest(null);",
									"}",
									"",
									"",
									"console.log(\"list va shinhan\", list_va);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-client-id",
								"value": "{{C-client_id}}",
								"type": "text"
							},
							{
								"key": "x-timestamp",
								"value": "{{C-timestamp}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{f1_open_url}}/api/v1/account/get-list-virtual-account",
							"host": [
								"{{f1_open_url}}"
							],
							"path": [
								"api",
								"v1",
								"account",
								"get-list-virtual-account"
							],
							"query": [
								{
									"key": "page",
									"value": "{{C-page}}",
									"disabled": true
								},
								{
									"key": "page_size",
									"value": "{{C-page_size}}",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get_list_va_v2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let list_func = eval(pm.environment.get(\"list_common_func\"));",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if (pm.response.code == 200) {",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let configs = pm.environment.get(\"C-configs\");",
									"    let page = pm.environment.get(\"C-page\");",
									"    let total_pages = jsData.meta.total_pages;",
									"",
									"    let list_va = pm.environment.get(\"X-list_va\");",
									"    if (!list_va) {",
									"        list_va = [];",
									"    }",
									"",
									"    for (let i in jsData.data) {",
									"        switch (configs.test_payment_method) {",
									"            case \"bank_transfer\":",
									"                if (jsData.data[i].bank_code == \"SHBVN\") {",
									"                    list_va.push(jsData.data[i]);",
									"                }",
									"                break;",
									"            case \"mb\":",
									"                if (jsData.data[i].bank_code == \"MB\") {",
									"                    list_va.push(jsData.data[i]);",
									"                }",
									"                break;",
									"            case \"bidv\":",
									"                console.log(\"BIDV not support!\");",
									"                break;",
									"            default:",
									"                //console.log(\"This payment method not support\");",
									"                break;",
									"        }",
									"    }",
									"    pm.environment.set(\"X-list_va\", list_va);",
									"    let payment_method_obj = {};",
									"    Object.assign(payment_method_obj, list_va[list_func.getRandomInt(0, list_va.length - 1)]);",
									"    pm.environment.set(\"X-payment_method_obj\", payment_method_obj);",
									"    console.log(\"payment_method_obj\", payment_method_obj);",
									"    if (page >= total_pages || page >= configs.limit_page) {",
									"",
									"        pm.environment.unset(\"C-page\");",
									"        pm.environment.unset(\"C-page_size\");",
									"        postman.setNextRequest(\"create_payment_v2\");",
									"    } else {",
									"        page++;",
									"        postman.setNextRequest(\"get_list_va_v2\");",
									"    }",
									"",
									"} else {",
									"    console.log(\"Can't get list va, end test\", jsData);",
									"    postman.setNextRequest(null);",
									"}",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");\r",
									"console.log(\"Testcase: \" + testcase);\r",
									"\r",
									"let page = pm.environment.get(\"C-page\");\r",
									"let page_size = pm.environment.get(\"C-page_size\");\r",
									"if(!page){\r",
									"    page = 1;\r",
									"    pm.environment.set(\"C-page\",page);\r",
									"\r",
									"    page_size = 50;\r",
									"    pm.environment.set(\"C-page_size\",page_size);\r",
									"}\r",
									"\r",
									"// Example secret key for signing, replace with your actual secret\r",
									"const secretKey = pm.environment.get(\"C-client_key\");\r",
									"console.log(\"secretKey: \" + secretKey);\r",
									"\r",
									"// function ()\r",
									"let today = new Date();\r",
									"let timestamp = Math.floor(today.getTime()/1000) + 30;\r",
									"console.log(\"timestamp: \" + timestamp);\r",
									"\r",
									"// Get method, URL, body, and timestamp\r",
									"const method = pm.request.method;\r",
									"let url = pm.request.url.toString().replace(\"{{f1_open_url}}\",\"\");\r",
									"url = url.replace(\"{{C-page}}\",page);\r",
									"url = url.replace(\"{{C-page_size}}\",page_size);\r",
									"\r",
									"const body = pm.request.body ? pm.request.body.raw : '';\r",
									"// const timestamp = pm.request.headers.get('x-timestamp');\r",
									"\r",
									"// Concatenate the components to form the message to sign\r",
									"const message = `${secretKey}_${method}_${url}_${body || ''}_${timestamp}`;\r",
									"console.log(\"Generated message: \", message);\r",
									"\r",
									"// Generate SHA256 signature\r",
									"const signature = CryptoJS.SHA256(message).toString(CryptoJS.enc.Hex);\r",
									"console.log(\"Generated signature: \", signature);\r",
									"\r",
									"pm.environment.set(\"C-timestamp\",timestamp);\r",
									"\r",
									"// Add the signature to the headers\r",
									"pm.request.headers.add({ key: 'x-signature', value: signature });\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-client-id",
								"value": "{{C-client_id}}",
								"type": "text"
							},
							{
								"key": "x-timestamp",
								"value": "{{C-timestamp}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{f1_open_url}}/api/v1/bank-accounts",
							"host": [
								"{{f1_open_url}}"
							],
							"path": [
								"api",
								"v1",
								"bank-accounts"
							],
							"query": [
								{
									"key": "page",
									"value": "{{C-page}}",
									"disabled": true
								},
								{
									"key": "page_size",
									"value": "{{C-page_size}}",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "ledger_coa",
			"item": [
				{
					"name": "get_list_coa",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let coa = [];",
									"    try {",
									"        for(let i in jsData.data){",
									"            let sub_group_i = [];",
									"            for(let j in jsData.data[i].sub_group){",
									"                let accounts_j = [];",
									"                for(let k in jsData.data[i].sub_group[j].accounts){",
									"                    accounts_j[accounts_j.length] = {",
									"                        \"account_name\":jsData.data[i].sub_group[j].accounts[k].account_name,",
									"                        \"account_id\":jsData.data[i].sub_group[j].accounts[k].id,",
									"                        \"business_id\":jsData.data[i].sub_group[j].accounts[k].business_id,",
									"                        \"account_source\":jsData.data[i].sub_group[j].accounts[k].account_source,",
									"                        \"total_balance_amount\":jsData.data[i].sub_group[j].accounts[k].total_balance_amount,",
									"                        \"account_type\":jsData.data[i].sub_group[j].accounts[k].account_type,",
									"                        \"account_number\":jsData.data[i].sub_group[j].accounts[k].account_number,",
									"                        \"coa_type\":jsData.data[i].sub_group[j].accounts[k].coa_type,",
									"                        \"status\":jsData.data[i].sub_group[j].accounts[k].status,",
									"                        \"parent_account_id\":jsData.data[i].sub_group[j].accounts[k].parent_account_id,",
									"                        \"description\":jsData.data[i].sub_group[j].accounts[k].description,",
									"                        \"open_amount\":jsData.data[i].sub_group[j].accounts[k].open_amount,",
									"                        \"currency\":jsData.data[i].sub_group[j].accounts[k].currency",
									"                    }",
									"",
									"                    if(jsData.data[i].sub_group[j].accounts[k].account_key == \"A3001\"){",
									"                        pm.environment.set(\"C-account_receivable\",jsData.data[i].sub_group[j].accounts[k]);",
									"                    } else if(jsData.data[i].sub_group[j].accounts[k].account_key == \"D1004\"){",
									"                        pm.environment.set(\"C-account_fee\",jsData.data[i].sub_group[j].accounts[k]);",
									"                    } else if(jsData.data[i].sub_group[j].accounts[k].account_key == \"C3001\"){",
									"                        pm.environment.set(\"C-account_uncategory_income\",jsData.data[i].sub_group[j].accounts[k]);",
									"                    }",
									"                }",
									"",
									"                sub_group_i[sub_group_i.length] = {",
									"                    \"sub_group_name\":jsData.data[i].sub_group[j].name,",
									"                    \"sub_group_id\":jsData.data[i].sub_group[j].id,",
									"                    \"sub_group_value\":jsData.data[i].sub_group[j].value,",
									"                    \"sub_group_description\":jsData.data[i].sub_group[j].description,",
									"                    \"accounts\":accounts_j",
									"                }",
									"            }",
									"",
									"            coa[coa.length] = {",
									"                \"group_name\":jsData.data[i].name,",
									"                \"value\":jsData.data[i].value,",
									"                \"index\":jsData.data[i].index,",
									"                \"sub_group\":sub_group_i",
									"            }",
									"        }",
									"    } catch {",
									"        console.log(\"can't get all account in coa\");",
									"    }",
									"",
									"    pm.test(\"Got coa of this user's business\", function () {",
									"        pm.expect(coa.length > 0).to.be.true;",
									"    });",
									"",
									"    if(coa.length > 0){",
									"        // console.log(\"coa: \", coa);",
									"        pm.environment.set(\"C-coa\",coa);",
									"        let list_debit_account = [];",
									"        let list_credit_account = [];",
									"        /**",
									"         * lấy những account_id và phân loại thành debit/credit",
									"         * - credit: tài khoản (only cash & bank)",
									"         * - debit: phân loại (all)",
									"         */ ",
									"        for(let i in coa){",
									"            for(let j in coa[i].sub_group){",
									"                for(let k in coa[i].sub_group[j].accounts){",
									"                    // if(coa[i].group_name == \"income\" || coa[i].group_name == \"expense\"){ // mở điều kiện này khi cần debug tạo tnx có report cassh-flow",
									"                        list_debit_account[list_debit_account.length] = coa[i].sub_group[j].accounts[k];",
									"                    // }",
									"                    if(coa[i].sub_group[j].sub_group_value == \"cash_and_bank\"){ ",
									"                        // console.log(\"debug: \", coa[i].sub_group[j].accounts[k]);",
									"                        if(coa[i].sub_group[j].accounts[k].account_name.includes(\"[API]\")){ // do 1 số name bị null (dev chưa validation dẫn đến report sẽ không biết của account nào - report ko trả về id)",
									"                            list_credit_account[list_credit_account.length] = coa[i].sub_group[j].accounts[k];",
									"                        }",
									"                    }",
									"                }",
									"            }",
									"        }",
									"",
									"        // console.log(\"list_debit_account: \", list_debit_account);",
									"        // console.log(\"list_credit_account: \", list_credit_account);",
									"",
									"        pm.environment.set(\"C-list_debit_account\",list_debit_account);",
									"        pm.environment.set(\"C-list_credit_account\",list_credit_account);",
									"        ",
									"        let configs = pm.environment.get(\"C-configs\");",
									"        if(configs.test_payment_method == \"mb\"){",
									"            let va_obj = pm.environment.get(\"C-va_obj\");",
									"            va_obj.account_alias_id = parseInt(va_obj.reference_id);",
									"            pm.environment.set(\"C-va_obj\",va_obj);",
									"            postman.setNextRequest(\"get_list_posting\"); // get_list_posting",
									"        } else {",
									"            postman.setNextRequest(\"get_list_payment_account\"); // get_list_payment_account",
									"        }",
									"    } else {",
									"        console.log(\"Can't get list internal account, end test \");",
									"        postman.setNextRequest(null);",
									"    }",
									"} else {",
									"    console.log(\"Can't get list internal account, end test \", jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-ledger/api/v1/account/get-list-setting?business_id={{C-business_id}}&coa_type=",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-ledger",
								"api",
								"v1",
								"account",
								"get-list-setting"
							],
							"query": [
								{
									"key": "business_id",
									"value": "{{C-business_id}}"
								},
								{
									"key": "coa_type",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "ledger_account",
			"item": [
				{
					"name": "get_list_payment_account",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let va_obj = pm.environment.get(\"C-va_obj\");",
									"",
									"    let isFound = false;",
									"    switch(testcase){",
									"        case 2:",
									"            for(let i in jsData.data[0].accounts){",
									"                if(va_obj.va_id == jsData.data[0].accounts[i].external_account_id){",
									"                    isFound = true;",
									"                    va_obj.account_id = jsData.data[0].accounts[i].id;",
									"                    va_obj.total_balance_amount = jsData.data[0].accounts[i].total_balance_amount;",
									"                    break;",
									"                }",
									"            }",
									"",
									"            pm.test(\"Got account_id for va_obj\", function () {",
									"                pm.expect(isFound).to.be.true;",
									"            });",
									"            console.log(\"Update va: \", va_obj);",
									"            pm.environment.set(\"C-va_obj\",va_obj);",
									"",
									"            postman.setNextRequest(\"get_list_posting\"); // get_list_posting",
									"            break;",
									"        case 6:",
									"            let new_payment_account = null;",
									"            for(let i in jsData.data[0].accounts){",
									"                if(va_obj.va_id == jsData.data[0].accounts[i].external_account_id){",
									"                    isFound = true;",
									"                    new_payment_account = jsData.data[0].accounts[i];",
									"                    break;",
									"                }",
									"            }",
									"            console.log(\"new_payment_account: \",new_payment_account);",
									"",
									"            postman.setNextRequest(\"get_list_ledger_txn\"); // get_list_ledger_txn",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get list payment account, end test\", jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-ledger/api/v1/account/get-list-sub?business_id={{C-business_id}}&sub_account_key=A1",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-ledger",
								"api",
								"v1",
								"account",
								"get-list-sub"
							],
							"query": [
								{
									"key": "business_id",
									"value": "{{C-business_id}}"
								},
								{
									"key": "sub_account_key",
									"value": "A1"
								},
								{
									"key": "account_type",
									"value": "link_bank,va_bank,galaxy_pay",
									"description": "system, default, manual",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "ledger_transaction",
			"item": [
				{
					"name": "get_list_ledger_txn",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let page = pm.environment.get(\"C-page\");",
									"",
									"if(!page){",
									"    page = 1;",
									"    pm.environment.set(\"C-page\",page);",
									"",
									"    let page_size = 50;",
									"    pm.environment.set(\"C-page_size\",page_size);",
									"}",
									"",
									"if(testcase == 4 && page == 1){",
									"    let configs = pm.environment.get(\"C-configs\");",
									"    if(configs.test_payment_method == \"viet_qr_pro_mb\"){",
									"        // setTimeout(function(){}, configs.timeout); => tự hook ko cần timeout nữa",
									"    }",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let configs = pm.environment.get(\"C-configs\");",
									"    let total_ledger_tnx = null;",
									"    try {",
									"        total_ledger_tnx = jsData.meta.total_rows;",
									"    } catch {",
									"        console.log(\"Can't get total tnx\");",
									"    }",
									"",
									"    switch(testcase){",
									"        case 6:",
									"            let page = pm.environment.get(\"C-page\");",
									"            let list_ledger_tnx = pm.environment.get(\"C-list_ledger_tnx\");",
									"            if(!list_ledger_tnx){",
									"                list_ledger_tnx = [];",
									"            }",
									"            for(let i in jsData.data){",
									"                list_ledger_tnx.push({",
									"                    \"id\":jsData.data[i].id,",
									"                    \"payment\":jsData.data[i].payment,",
									"                    \"payment_id\":jsData.data[i].payment_id,",
									"                    \"is_txn_bank\":jsData.data[i].is_txn_bank,",
									"                    \"object_id\":jsData.data[i].object_id,",
									"                    \"object_type\":jsData.data[i].object_type,",
									"                    \"txn_type\":jsData.data[i].txn_type,",
									"                    \"amount\":jsData.data[i].amount,",
									"                    \"value_at\":jsData.data[i].value_at,",
									"                    \"account_id\":jsData.data[i].account_id,",
									"                    \"account_alias_id\":jsData.data[i].account_alias_id,",
									"                    \"category_id\":jsData.data[i].category_id,",
									"                    \"short_desc\":jsData.data[i].short_desc,",
									"                    \"is_internal_transfer\":jsData.data[i].is_internal_transfer,",
									"                    \"fee_amount\":jsData.data[i].fee_amount,",
									"                    \"tax_amount\":jsData.data[i].tax_amount",
									"                });",
									"            }",
									"            pm.environment.set(\"C-list_ledger_tnx\",list_ledger_tnx);",
									"",
									"            if(page >= jsData.meta.total_pages || page >= configs.limit_page){",
									"                pm.environment.unset(\"C-page\");",
									"",
									"                let old_total_ledger_tnx = pm.environment.get(\"C-total_ledger_tnx\");",
									"                let payment_obj = pm.environment.get(\"C-payment_obj\");",
									"                console.log(\"debug payment_obj.tnx: \", payment_obj.tnx);",
									"",
									"                let isFound = false;",
									"                for(let i in list_ledger_tnx){",
									"                    if(payment_obj.payment_info.payment_note == list_ledger_tnx[i].short_desc && list_ledger_tnx[i].is_txn_bank){ // list_ledger_tnx[i].description == payment_obj.tnx.description => hiện tại ko ghi discription cho tnx bank nữa",
									"                        payment_obj.tnx.tnx_id = list_ledger_tnx[i].id;",
									"                        // payment_obj.tnx.payment_id = list_ledger_tnx[i].payment_id;",
									"                        pm.environment.set(\"C-payment_obj.tnx\",payment_obj.tnx);",
									"                        isFound = true;",
									"                        pm.test(\"amount of tnx correctly! \" + payment_obj.tnx.amount, function () {",
									"                            pm.expect(payment_obj.tnx.amount == list_ledger_tnx[i].amount).to.be.true;",
									"                        });",
									"                        break;",
									"                    }",
									"                }",
									"",
									"                pm.test(\"Found new tnx\", function () {",
									"                    pm.expect(isFound).to.be.true;",
									"                });",
									"",
									"                pm.environment.set(\"C-payment_obj\",payment_obj);",
									"                postman.setNextRequest(\"get_list_posting\"); // get_list_posting",
									"            } else {",
									"                page++;",
									"                pm.environment.set(\"C-page\",page);",
									"",
									"                console.log(\"view next page (\" + page + \") to get more transaction\");",
									"                postman.setNextRequest(\"get_list_ledger_txn\");",
									"            }",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get list tnx, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-ledger/api/v1/transaction/get-list?page={{C-page}}&page_size={{C-page_size}}&sort&is_txn_bank=true",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-ledger",
								"api",
								"v1",
								"transaction",
								"get-list"
							],
							"query": [
								{
									"key": "page",
									"value": "{{C-page}}"
								},
								{
									"key": "page_size",
									"value": "{{C-page_size}}"
								},
								{
									"key": "sort",
									"value": null
								},
								{
									"key": "is_txn_bank",
									"value": "true"
								},
								{
									"key": "txn_type",
									"value": "in",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.request.headers.add({",
							" key: \"authorization\",",
							" value: \"Bearer \" + pm.environment.get(\"C-userToken\")",
							"});",
							"",
							"pm.request.headers.add({",
							" key: \"Content-Type\",",
							" value: \"application/json\"",
							"});"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "ledger_posting",
			"item": [
				{
					"name": "get_list_posting",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/**",
									" * hiện tại page_size limit 20 (performance issue)",
									" * => chỉ quét tối đa 5 page, hạn chế broken log file",
									" */",
									"",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let page = pm.environment.get(\"C-page\");",
									"",
									"if(!page){",
									"    page = 1;",
									"    pm.environment.set(\"C-page\",page);",
									"",
									"    let page_size = 50;",
									"    pm.environment.set(\"C-page_size\",page_size);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let total_pages = jsData.meta.total_pages;",
									"    let total_records = jsData.meta.total_rows;",
									"    let page = pm.environment.get(\"C-page\");",
									"",
									"    let list_posting, old_list_posting;",
									"    // console.log(\"debug total record in page: \" + jsData.data.length);",
									"    switch(testcase){",
									"        case 2:",
									"            list_posting = pm.environment.get(\"C-list_posting\");",
									"            if(!list_posting){",
									"                list_posting = [];",
									"            }",
									"            break;",
									"        case 6:",
									"            old_list_posting = pm.environment.get(\"C-old_list_posting\");",
									"            if(!old_list_posting){",
									"                old_list_posting = pm.environment.get(\"C-list_posting\");",
									"                pm.environment.unset(\"C-list_posting\");",
									"                pm.environment.set(\"C-old_list_posting\",old_list_posting);",
									"            }",
									"",
									"            list_posting = pm.environment.get(\"C-list_posting\");",
									"            if(!list_posting){",
									"                list_posting = [];",
									"            }",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow\");",
									"            break;",
									"    }",
									"",
									"    for(let item in jsData.data){",
									"        list_posting[list_posting.length] = {",
									"            \"posting_id\":jsData.data[item].id,",
									"            \"account_id\":jsData.data[item].account_id,",
									"            \"account_alias_id\":jsData.data[item].account_alias_id,",
									"            \"amount\":jsData.data[item].amount,",
									"            \"branch_id\":jsData.data[item].branch_id,",
									"            \"created_at\":jsData.data[item].created_at,",
									"            \"currency\":jsData.data[item].currency,",
									"            \"deleted_at\":jsData.data[item].deleted_at,",
									"            \"is_credit\":jsData.data[item].is_credit,",
									"            \"is_final_status\":jsData.data[item].is_final_status,",
									"            \"object_ref_id\":jsData.data[item].object_ref_id,",
									"            \"object_ref_type\":jsData.data[item].object_ref_type, // product (line_item), tax, discount",
									"            \"object_id\":jsData.data[item].object_id,",
									"            \"object_type\":jsData.data[item].object_type,",
									"            // \"value_at\":jsData.data[item].value_at,",
									"            \"short_desc\":jsData.data[item].short_desc",
									"        }",
									"    }",
									"    pm.environment.set(\"C-list_posting\",list_posting);",
									"",
									"    let configs = pm.environment.get(\"C-configs\");",
									"    if(page >= total_pages || page >= configs.limit_page){",
									"        // must clear page & page_size",
									"        pm.environment.unset(\"C-page\");",
									"        pm.environment.unset(\"C-page_size\");",
									"",
									"        let old_total_records;",
									"        switch(testcase){",
									"            case 2:",
									"                pm.test(\"Got all posting! \" + total_records, function () {",
									"                    pm.expect(total_records > 0).to.be.true;",
									"                });",
									"                pm.environment.set(\"C-total_posting\",total_records);",
									"",
									"                // testcase++;",
									"                // pm.environment.set(\"C-testcase\",testcase);",
									"                postman.setNextRequest(\"get_list_payment_method\"); // create_payment",
									"                break;",
									"            case 6:",
									"                let payment_obj = pm.environment.get(\"C-payment_obj\");",
									"                console.log(\"payment_obj: \", payment_obj);",
									"                let tnx_obj = payment_obj.tnx;",
									"                let va_obj = pm.environment.get(\"C-va_obj\");",
									"",
									"                let account_uncategory_income = pm.environment.get(\"C-account_uncategory_income\");",
									"",
									"                old_total_records = pm.environment.get(\"C-total_posting\");",
									"                pm.test(\"total_posting increase 2\", function () {",
									"                    pm.expect(total_records).to.eql(old_total_records + 2);",
									"                });",
									"",
									"                let foundAll = false, count = 0;",
									"                for(let i in list_posting){",
									"                    if(list_posting[i].object_type == \"transaction\" && list_posting[i].object_id == tnx_obj.tnx_id){",
									"                        // console.log(\"list_posting[i]: \", list_posting[i]);",
									"                        if(list_posting[i].is_credit){",
									"                            count++;",
									"                            pm.test(\"Found account_uncategory_income for credit\", function () {",
									"                                console.log(\"account_uncategory_income: \" + account_uncategory_income.id);",
									"                                console.log(\"act: \" + list_posting[i].account_id);",
									"                                pm.expect(list_posting[i].account_id == account_uncategory_income.id).to.be.true;",
									"                            });",
									"",
									"                            pm.test(\"--- amount correctly \" + tnx_obj.amount, function () {",
									"                                console.log(\"actual: \" + list_posting[i].amount);",
									"                                pm.expect(list_posting[i].amount.toFixed(2) == tnx_obj.amount.toFixed(2)).to.be.true;",
									"                            });",
									"                        } else {",
									"                            count++;",
									"                            if(configs.test_payment_method == \"mb\"){",
									"                                pm.test(\"Found account va for debit\", function () {",
									"                                    console.log(\"account_debit: \" + va_obj.account_alias_id);",
									"                                    console.log(\"act: \" + list_posting[i].account_alias_id);",
									"                                    pm.expect(list_posting[i].account_alias_id == va_obj.account_alias_id).to.be.true;",
									"                                });",
									"                            } else {",
									"                                pm.test(\"Found account va for debit\", function () {",
									"                                    console.log(\"account_debit: \" + va_obj.account_id);",
									"                                    console.log(\"act: \" + list_posting[i].account_id);",
									"                                    pm.expect(list_posting[i].account_id == va_obj.account_id).to.be.true;",
									"                                });",
									"                            }",
									"",
									"                            pm.test(\"--- amount correctly \" + tnx_obj.amount, function () {",
									"                                console.log(\"actual: \" + list_posting[i].amount);",
									"                                pm.expect(list_posting[i].amount.toFixed(2) == tnx_obj.amount.toFixed(2)).to.be.true;",
									"                            });",
									"                        }",
									"",
									"                        if(count == 2){",
									"                            foundAll = true;",
									"                            break;",
									"                        }",
									"                    }",
									"                }",
									"",
									"                pm.test(\"Found all posting\", function () {",
									"                    pm.expect(foundAll).to.be.true;",
									"                });",
									"",
									"                console.log(\"-------- Start Testsuite 117 --------\");",
									"                postman.setNextRequest(null);",
									"                break;",
									"            default:",
									"                console.log(\"Missing flow, end test\");",
									"                postman.setNextRequest(null);",
									"                break;",
									"        }",
									"    } else {",
									"        page++;",
									"        pm.environment.set(\"C-page\",page);",
									"",
									"        console.log(\"view next page (\" + page + \") to get more posting\");",
									"        postman.setNextRequest(\"get_list_posting\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get list posting, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-ledger/api/v1/posting/get-list?business_id={{C-business_id}}&page={{C-page}}&page_size={{C-page_size}}&search=&sort=",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-ledger",
								"api",
								"v1",
								"posting",
								"get-list"
							],
							"query": [
								{
									"key": "business_id",
									"value": "{{C-business_id}}"
								},
								{
									"key": "page",
									"value": "{{C-page}}"
								},
								{
									"key": "page_size",
									"value": "{{C-page_size}}"
								},
								{
									"key": "search",
									"value": ""
								},
								{
									"key": "sort",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "payment",
			"item": [
				{
					"name": "get_payment_list",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let page = pm.environment.get(\"C-page\");",
									"let page_size = pm.environment.get(\"C-page_size\");",
									"if(!page){",
									"    page = 1;",
									"    pm.environment.set(\"C-page\",page);",
									"",
									"    page_size = 20;",
									"    pm.environment.set(\"C-page_size\",page_size);",
									"}",
									"",
									"// Example secret key for signing, replace with your actual secret",
									"const secretKey = pm.environment.get(\"C-client_key\");",
									"console.log(\"secretKey: \" + secretKey);",
									"",
									"// function ()",
									"let today = new Date();",
									"let timestamp = Math.floor(today.getTime()/1000) + 30;",
									"console.log(\"timestamp: \" + timestamp);",
									"",
									"// Get method, URL, body, and timestamp",
									"const method = pm.request.method;",
									"let url = pm.request.url.toString().replace(\"{{f1_open_url}}\",\"\");",
									"url = url.replace(\"{{C-page}}\",page);",
									"url = url.replace(\"{{C-page_size}}\",page_size);",
									"",
									"const body = pm.request.body ? pm.request.body.raw : '';",
									"// const timestamp = pm.request.headers.get('x-timestamp');",
									"",
									"// Concatenate the components to form the message to sign",
									"const message = `${secretKey}_${method}_${url}_${body || ''}_${timestamp}`;",
									"console.log(\"Generated message: \", message);",
									"",
									"// Generate SHA256 signature",
									"const signature = CryptoJS.SHA256(message).toString(CryptoJS.enc.Hex);",
									"console.log(\"Generated signature: \", signature);",
									"",
									"pm.environment.set(\"C-timestamp\",timestamp);",
									"",
									"// Add the signature to the headers",
									"pm.request.headers.add({ key: 'x-signature', value: signature });",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseJson = pm.response.json();",
									"let page = pm.environment.get(\"C-page\");",
									"let total_pages = responseJson.meta.total_pages;",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"let configs = pm.environment.get(\"C-configs\");",
									"let payment_obj = pm.environment.get(\"C-payment_obj\");",
									"",
									"if(pm.response.code == 200){",
									"    switch(testcase){",
									"        case 2:",
									"            let list_payment = pm.environment.get(\"C-list_payment\");",
									"            if(!list_payment)",
									"                list_payment = []",
									"            for(let i in responseJson.data){",
									"                list_payment.push(responseJson.data[i]);",
									"            }",
									"            //console.log(\"list payment:\",list_payment );",
									"            let total_payment_old = pm.environment.get(\"C-total_payment_old\");",
									"            if(!total_payment_old)",
									"                total_payment_old = 0;",
									"            total_payment_old += list_payment.length;",
									"        ",
									"            pm.environment.set(\"C-total_payment_old\", total_payment_old);",
									"            console.log(\"Total payment before create new payment:\", pm.environment.get(\"C-total_payment_old\"));",
									"",
									"            if(page >= total_pages){",
									"                pm.environment.unset(\"C-page\");",
									"                ",
									"                pm.test(\"Status code is 200\", function () {",
									"                    pm.response.to.have.status(200);",
									"                });",
									"                testcase++;",
									"                pm.environment.set(\"C-testcase\", testcase);",
									"",
									"                postman.setNextRequest(\"create_payment\");",
									"            }",
									"            else{",
									"                page++;",
									"                pm.environment.set(\"C-page\", page);",
									"                postman.setNextRequest(\"get_payment_list\");",
									"            }",
									"            break;",
									"        case 4:",
									"            let list_payment_new = pm.environment.get(\"C-list_payment_new\");",
									"            if(!list_payment_new)",
									"                list_payment_new = []",
									"            for(let i in responseJson.data){",
									"                list_payment_new.push(responseJson.data[i]);",
									"            }",
									"        ",
									"            let total_payment_new = pm.environment.get(\"C-total_payment_new\");",
									"            if(!total_payment_new)",
									"                total_payment_new = 0;",
									"            total_payment_new += list_payment_new.length;",
									"            pm.environment.set(\"C-total_payment_new\", total_payment_new);",
									"            ",
									"            if(page >= total_pages){",
									"                pm.environment.unset(\"C-page\");",
									"                console.log(\"Total payment before create new payment:\", pm.environment.get(\"C-total_payment_old\"));",
									"                console.log(\"Total payment after create new payment:\", pm.environment.get(\"C-total_payment_new\"));",
									"                pm.test(\"Check after create list payment increase 1 data\", function (){",
									"                    let total_payment_old = pm.environment.get(\"C-total_payment_old\");",
									"                    let total_payment_new = pm.environment.get(\"C-total_payment_new\");",
									"                    pm.expect(total_payment_old + 1).to.eql(total_payment_new);",
									"                });",
									"            postman.setNextRequest(\"get_payment_detail\");",
									"            }",
									"            else{",
									"                page++;",
									"                pm.environment.set(\"C-page\", page);",
									"                postman.setNextRequest(\"get_payment_list\");",
									"            }",
									"            break;",
									"        case 6 :",
									"            ",
									"            ",
									"            let payment_code;",
									"            let index;",
									"            switch(configs.test_payment_method){",
									"                case \"mb\":",
									"                    payment_code = payment_obj.payment_info_other.payment_request_code;",
									"                ",
									"                    for(let i in responseJson.data){",
									"                        if(responseJson.data[i].code == payment_code)",
									"                            index = i;",
									"                    }",
									"                    console.log(responseJson.data[index]);",
									"                    if(configs.payment_type == \"paid\"){",
									"                    ",
									"                        pm.test(\"Check paid amount after hook correctly is \" + responseJson.data[index].payment_info.amount, function(){",
									"                            pm.expect(responseJson.data[index].payment_info.amount).to.eql(payment_obj.payment_info_other.amount); ",
									"                        ",
									"                        } );",
									"",
									"                        pm.test(\"Check order status is PAID\", function(){",
									"                            pm.expect(responseJson.data[index].order_status).to.eql(\"paid\");",
									"                        });",
									"                    }",
									"                    else if(configs.payment_type == \"partial_paid\"){",
									"                    ",
									"                        pm.test(\"Check partial paid amount after hook correctly is \" + responseJson.data[index].payment_info.amount, function(){",
									"                            pm.expect(responseJson.data[index].payment_info.amount).to.eql(payment_obj.payment_info_other.amount / 2); ",
									"                        ",
									"                        } );",
									"",
									"                        pm.test(\"Check order status is PARTIAL PAID\", function(){",
									"                            pm.expect(responseJson.data[index].order_status).to.eql(\"partial_paid\");",
									"                        });",
									"                    }",
									"                    else if(configs.payment_type == \"over_paid\"){",
									"                    ",
									"                        pm.test(\"Check over paid amount after hook correctly is \" + responseJson.data[index].payment_info.amount, function(){",
									"                            pm.expect(responseJson.data[index].payment_info.amount).to.eql(payment_obj.payment_info_other.amount * 2); ",
									"                            ",
									"                        } );",
									"",
									"                        pm.test(\"Check order status is PAID\", function(){",
									"                            pm.expect(responseJson.data[index].order_status).to.eql(\"paid\");",
									"                        });",
									"                    }",
									"                    else{",
									"                    ",
									"                        pm.test(\"Check over paid amount after hook correctly is \" + 0, function(){",
									"                            pm.expect(responseJson.data[index].payment_info.amount).to.eql(0); ",
									"                        } );",
									"                        pm.test(\"Check order status is UNPAID\", function(){",
									"                            pm.expect(responseJson.data[index].order_status).to.eql(\"unpaid\");",
									"                        });",
									"                    }",
									"                    postman.setNextRequest(\"get_payment_detail\");",
									"                    break;",
									"                case \"bank_transfer\":",
									"                    payment_code = payment_obj.payment_info_other.payment_request_code;",
									"                    for(let i in responseJson.data){",
									"                        if(responseJson.data[i].code == payment_code)",
									"                            index = i;",
									"                    }",
									"                    console.log(responseJson.data[index]);",
									"                    switch(configs.payment_type){",
									"                        case \"unpaid\":",
									"                            pm.test(\"Check over paid amount after hook correctly is \" + 0, function(){",
									"                            pm.expect(responseJson.data[index].payment_info.amount).to.eql(0); ",
									"                            } );",
									"                            pm.test(\"Check order status is UNPAID\", function(){",
									"                                pm.expect(responseJson.data[index].order_status).to.eql(\"unpaid\");",
									"                            });",
									"                            break;",
									"                        case \"partial_paid\":",
									"                            pm.test(\"Check partial paid amount after hook correctly is \" + responseJson.data[index].payment_info.amount, function(){",
									"                            pm.expect(responseJson.data[index].payment_info.amount).to.eql(payment_obj.payment_info_other.amount / 2); ",
									"                        ",
									"                            } );",
									"",
									"                            pm.test(\"Check order status is PARTIAL PAID\", function(){",
									"                                pm.expect(responseJson.data[index].order_status).to.eql(\"partial_paid\");",
									"                            });",
									"                        ",
									"                            break;",
									"                        case \"paid\":",
									"                            pm.test(\"Check paid amount after hook correctly is \" + responseJson.data[index].payment_info.amount, function(){",
									"                            pm.expect(responseJson.data[index].payment_info.amount).to.eql(payment_obj.payment_info_other.amount); ",
									"                        ",
									"                            } );",
									"",
									"                            pm.test(\"Check order status is PAID\", function(){",
									"                                pm.expect(responseJson.data[index].order_status).to.eql(\"paid\");",
									"                            });",
									"                            break;",
									"                        case \"over_paid\":",
									"                            pm.test(\"Check over paid amount after hook correctly is \" + responseJson.data[index].payment_info.amount, function(){",
									"                            pm.expect(responseJson.data[index].payment_info.amount).to.eql(payment_obj.payment_info_other.amount * 2); ",
									"                            ",
									"                            } );",
									"",
									"                            pm.test(\"Check order status is PAID\", function(){",
									"                                pm.expect(responseJson.data[index].order_status).to.eql(\"paid\");",
									"                            });",
									"                            break;",
									"                        default:",
									"                            console.log(\"Edge case not define!\")",
									"                            break;",
									"                        ",
									"                    }",
									"                    postman.setNextRequest(\"get_payment_detail\");",
									"                    break;",
									"                case \"bidv\":",
									"                    break;",
									"            }",
									"            break;",
									"        default:",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get list payment, end test\", responseJson);",
									"    postman.setNextRequest(null);",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-client-id",
								"value": "{{C-client_id}}",
								"type": "text"
							},
							{
								"key": "x-timestamp",
								"value": "{{C-timestamp}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{f1_open_url}}/api/v1/payment/get-list?count=true&page={{C-page}}&page_size={{C-page_size}}",
							"host": [
								"{{f1_open_url}}"
							],
							"path": [
								"api",
								"v1",
								"payment",
								"get-list"
							],
							"query": [
								{
									"key": "count",
									"value": "true"
								},
								{
									"key": "page",
									"value": "{{C-page}}"
								},
								{
									"key": "page_size",
									"value": "{{C-page_size}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "create_payment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    console.log(\"debug: \", jsData);",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let payment_obj = pm.environment.get(\"C-payment_obj\");",
									"    let configs = pm.environment.get(\"C-configs\");",
									"",
									"    // update payment_id & data",
									"    payment_obj.payment_id = jsData.data.id;",
									"    payment_obj.payment_info_other = {",
									"        \"payment_request_code\":jsData.data.payment_request_code,",
									"        \"amount\":jsData.data.amount,",
									"        \"account_name\":jsData.data.account_name,",
									"        \"account_number\":jsData.data.account_number,",
									"        \"bank_code\":jsData.data.bank_code,",
									"        \"qr\":jsData.data.qr",
									"    }",
									"    pm.environment.set(\"C-payment_obj\",payment_obj);",
									"",
									"    // payment_note",
									"    if(configs.test_payment_method == \"bank_transfer\"){",
									"        pm.test(\"QR must inlcude payment_note: \" + payment_obj.payment_info.payment_note, function () {",
									"            pm.expect(jsData.data.qr.includes(payment_obj.payment_info.payment_note)).to.be.true;",
									"        });",
									"    }",
									"",
									"    // request_amount",
									"    pm.test(\"request_amount is \" + payment_obj.payment_info.request_amount, function () {",
									"        pm.expect(jsData.data.amount).to.eql(payment_obj.payment_info.request_amount);",
									"    });",
									"",
									"    // account_name",
									"    let va_obj = pm.environment.get(\"C-va_obj\");",
									"    pm.test(\"account_name is \" + va_obj.account_name, function () {",
									"        pm.expect(jsData.data.account_name).to.eql(va_obj.account_name);",
									"    });",
									"",
									"    // account_number",
									"    pm.test(\"account_number is \" + va_obj.account_number, function () {",
									"        pm.expect(jsData.data.account_number).to.eql(va_obj.account_number);",
									"    });",
									"",
									"    testcase++;",
									"    pm.environment.set(\"C-testcase\",testcase);",
									"    postman.setNextRequest(\"get_payment_list\"); // get_payment_detail",
									"} else {",
									"    console.log(\"Can't create payment, end test\", jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");\r",
									"console.log(\"Testcase: \" + testcase);\r",
									"\r",
									"let list_func = eval(pm.environment.get(\"list_common_func\"));\r",
									"let configs = pm.environment.get(\"C-configs\");\r",
									"\r",
									"// Example secret key for signing, replace with your actual secret\r",
									"const secretKey = pm.environment.get(\"C-client_key\");\r",
									"console.log(\"secretKey: \" + secretKey);\r",
									"\r",
									"let today = new Date();\r",
									"let timestamp = Math.floor(today.getTime()/1000) + 30;\r",
									"console.log(\"timestamp: \" + timestamp);\r",
									"\r",
									"// Get method, URL, body, and timestamp\r",
									"const method = pm.request.method;\r",
									"let url = pm.request.url.toString().replace(\"{{f1_open_url}}\",\"\");\r",
									"// console.log(\" ======== url: \", url);\r",
									"\r",
									"let va_obj = pm.environment.get(\"C-va_obj\");\r",
									"console.log(\"VA bank id :---\", va_obj.bank_id);\r",
									"\r",
									"let body;\r",
									"switch(configs.test_payment_method){\r",
									"    case \"mb\":\r",
									"        body = {\r",
									"            \"payment_info\": {\r",
									"                \"payment_note\": \"[Open API][MB] test payment \" + list_func.randomChars(6),\r",
									"                \"request_amount\": list_func.getRandomInt(100,500)*1000,\r",
									"                \"currency_code\": va_obj.bank_id\r",
									"            },\r",
									"            \"bank_account_id\": va_obj.va_id,\r",
									"            \"business_id\":parseInt(pm.environment.get(\"C-business_id\"))\r",
									"            // \"ref_type\":\"invoice\",\r",
									"            // \"payment_method_id\":\"\"\r",
									"        }\r",
									"        break;\r",
									"    case \"bank_transfer\":\r",
									"    \r",
									"        body = {\r",
									"            \"payment_info\": {\r",
									"                \"payment_note\": \"[OA][SH] payment \" + list_func.randomChars(6), // \"[Open API][Shinhan] test payment \"\r",
									"                \"request_amount\": list_func.getRandomInt(100,500)*1000,\r",
									"                \"currency_code\": va_obj.bank_id\r",
									"            },\r",
									"            \"bank_account_id\": va_obj.va_id,\r",
									"            \"business_id\":parseInt(pm.environment.get(\"C-business_id\"))\r",
									"            // \"ref_type\":\"invoice\",\r",
									"            // \"payment_method_id\":\"\"\r",
									"        }\r",
									"        break;\r",
									"    case \"bidv\":\r",
									"    default:\r",
									"        let master_account_obj = pm.environment.get(\"C-master_account_obj\");\r",
									"        body = {\r",
									"            \"payment_info\": {\r",
									"                \"payment_note\": \"[Open API][BIDV] test payment \" + list_func.randomChars(6),\r",
									"                \"request_amount\": list_func.getRandomInt(100,500)*1000,\r",
									"                \"currency_code\": master_account_obj.bank_id\r",
									"            },\r",
									"            \"bank_account_id\": master_account_obj.id,\r",
									"            \"business_id\":parseInt(pm.environment.get(\"C-business_id\"))\r",
									"            // \"ref_type\":\"invoice\",\r",
									"            // \"payment_method_id\":\"\"\r",
									"        }\r",
									"}\r",
									"\r",
									"body = JSON.stringify(body);\r",
									"\r",
									"// Concatenate the components to form the message to sign\r",
									"const message = `${secretKey}_${method}_${url}_${body || ''}_${timestamp}`;\r",
									"console.log(\"Generated message: \", message);\r",
									"\r",
									"// Generate SHA256 signature\r",
									"const signature = CryptoJS.SHA256(message).toString(CryptoJS.enc.Hex);\r",
									"console.log(\"Generated signature: \", signature);\r",
									"\r",
									"pm.environment.set(\"C-timestamp\",timestamp);\r",
									"\r",
									"// Add the signature to the headers\r",
									"pm.request.headers.add({ key: 'x-signature', value: signature });\r",
									"\r",
									"console.log(\"payload: \",JSON.parse(body));\r",
									"pm.environment.set(\"C-payload\",body);\r",
									"pm.environment.set(\"C-payment_obj\",JSON.parse(body));\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-client-id",
								"value": "{{C-client_id}}",
								"type": "text"
							},
							{
								"key": "x-timestamp",
								"value": "{{C-timestamp}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{f1_open_url}}/api/v1/payment/create",
							"host": [
								"{{f1_open_url}}"
							],
							"path": [
								"api",
								"v1",
								"payment",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_payment_detail",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");\r",
									"console.log(\"Testcase: \" + testcase);\r",
									"let payment_obj = pm.environment.get(\"C-payment_obj\");\r",
									"let payment_id = payment_obj.payment_id;\r",
									"pm.environment.set(\"C-payment_id\",payment_id);\r",
									"\r",
									"// Example secret key for signing, replace with your actual secret\r",
									"const secretKey = pm.environment.get(\"C-client_key\");\r",
									"console.log(\"secretKey: \" + secretKey);\r",
									"\r",
									"// function ()\r",
									"let today = new Date();\r",
									"let timestamp = Math.floor(today.getTime()/1000) + 30;\r",
									"console.log(\"timestamp: \" + timestamp);\r",
									"\r",
									"// Get method, URL, body, and timestamp\r",
									"const method = pm.request.method;\r",
									"let url = pm.request.url.toString().replace(\"{{f1_open_url}}\",\"\");\r",
									"url = url.replace(\"{{C-payment_id}}\",payment_id);\r",
									"const body = pm.request.body ? pm.request.body.raw : '';\r",
									"// const timestamp = pm.request.headers.get('x-timestamp');\r",
									"\r",
									"// Concatenate the components to form the message to sign\r",
									"const message = `${secretKey}_${method}_${url}_${body || ''}_${timestamp}`;\r",
									"console.log(\"Generated message: \", message);\r",
									"\r",
									"// Generate SHA256 signature\r",
									"const signature = CryptoJS.SHA256(message).toString(CryptoJS.enc.Hex);\r",
									"console.log(\"Generated signature: \", signature);\r",
									"\r",
									"pm.environment.set(\"C-timestamp\",timestamp);\r",
									"\r",
									"// Add the signature to the headers\r",
									"pm.request.headers.add({ key: 'x-signature', value: signature });\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let configs = pm.environment.get(\"C-configs\");",
									"    let payment_obj = pm.environment.get(\"C-payment_obj\");",
									"    let va_obj = pm.environment.get(\"C-va_obj\");",
									"",
									"    switch(testcase){",
									"        case 4:",
									"            // business_id",
									"            let business_id = pm.environment.get(\"C-business_id\");",
									"            pm.test(\"business_id is \" + business_id, function () {",
									"                console.log(\"act: \" + jsData.data.business_id);",
									"                pm.expect(business_id == jsData.data.business_id).to.be.true;",
									"            });",
									"",
									"            console.log(\"debug: \", jsData);",
									"",
									"            // account_id",
									"            pm.test(\"account_id is \" + va_obj.va_id, function () {",
									"                pm.expect(jsData.data.account_id).to.eql(va_obj.va_id);",
									"            });",
									"",
									"            // request_amount",
									"            pm.test(\"request_amount is \" + payment_obj.payment_info.request_amount, function () {",
									"                pm.expect(jsData.data.request_amount).to.eql(payment_obj.payment_info.request_amount);",
									"            });",
									"",
									"            // note",
									"            pm.test(\"note is \" + payment_obj.payment_info.payment_note, function () {",
									"                pm.expect(jsData.data.note).to.eql(payment_obj.payment_info.payment_note);",
									"            });",
									"",
									"            // other data check later",
									"",
									"            testcase++;",
									"            pm.environment.set(\"C-testcase\",testcase);",
									"            if(configs.test_payment_method == \"bank_transfer\" || configs.test_payment_method == \"bidv\"){",
									"                postman.setNextRequest(\"hook_payment_via_finesys\"); // hook_payment_via_finesys",
									"            } else {",
									"                postman.setNextRequest(\"hook_mb_cash_in\");",
									"            }",
									"            break;",
									"        case 6:",
									"            console.log(\"debug: \", jsData);",
									"            ",
									"            postman.setNextRequest(\"get_list_transaction\");",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"    }",
									"} else {",
									"    console.log(\"Can't get payment detail, end test\", jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-client-id",
								"value": "{{C-client_id}}",
								"type": "text"
							},
							{
								"key": "x-timestamp",
								"value": "{{C-timestamp}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{f1_open_url}}/api/v1/payment/detail/{{C-payment_id}}",
							"host": [
								"{{f1_open_url}}"
							],
							"path": [
								"api",
								"v1",
								"payment",
								"detail",
								"{{C-payment_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "payment_v2",
			"item": [
				{
					"name": "get_payment_list_v2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let page = pm.environment.get(\"C-page\");",
									"let page_size = pm.environment.get(\"C-page_size\");",
									"if(!page){",
									"    page = 1;",
									"    pm.environment.set(\"C-page\",page);",
									"",
									"    page_size = 20;",
									"    pm.environment.set(\"C-page_size\",page_size);",
									"}",
									"",
									"// Example secret key for signing, replace with your actual secret",
									"const secretKey = pm.environment.get(\"C-client_key\");",
									"console.log(\"secretKey: \" + secretKey);",
									"",
									"// function ()",
									"let today = new Date();",
									"let timestamp = Math.floor(today.getTime()/1000) + 30;",
									"console.log(\"timestamp: \" + timestamp);",
									"",
									"// Get method, URL, body, and timestamp",
									"const method = pm.request.method;",
									"let url = pm.request.url.toString().replace(\"{{f1_open_url}}\",\"\");",
									"url = url.replace(\"{{C-page}}\",page);",
									"url = url.replace(\"{{C-page_size}}\",page_size);",
									"",
									"const body = pm.request.body ? pm.request.body.raw : '';",
									"// const timestamp = pm.request.headers.get('x-timestamp');",
									"",
									"// Concatenate the components to form the message to sign",
									"const message = `${secretKey}_${method}_${url}_${body || ''}_${timestamp}`;",
									"console.log(\"Generated message: \", message);",
									"",
									"// Generate SHA256 signature",
									"const signature = CryptoJS.SHA256(message).toString(CryptoJS.enc.Hex);",
									"console.log(\"Generated signature: \", signature);",
									"",
									"pm.environment.set(\"C-timestamp\",timestamp);",
									"",
									"// Add the signature to the headers",
									"pm.request.headers.add({ key: 'x-signature', value: signature });",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseJson = pm.response.json();",
									"let page = pm.environment.get(\"C-page\");",
									"let total_pages = responseJson.meta.total_pages;",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"let configs = pm.environment.get(\"C-configs\");",
									"let payment_obj = pm.environment.get(\"C-payment_obj\");",
									"",
									"if(pm.response.code == 200){",
									"    switch(testcase){",
									"        case 2:",
									"            let list_payment = pm.environment.get(\"C-list_payment\");",
									"            if(!list_payment)",
									"                list_payment = []",
									"            for(let i in responseJson.data){",
									"                list_payment.push(responseJson.data[i]);",
									"            }",
									"            //console.log(\"list payment:\",list_payment );",
									"            let total_payment_old = pm.environment.get(\"C-total_payment_old\");",
									"            if(!total_payment_old)",
									"                total_payment_old = 0;",
									"            total_payment_old += list_payment.length;",
									"        ",
									"            pm.environment.set(\"C-total_payment_old\", total_payment_old);",
									"            console.log(\"Total payment before create new payment:\", pm.environment.get(\"C-total_payment_old\"));",
									"",
									"            if(page >= total_pages){",
									"                pm.environment.unset(\"C-page\");",
									"                ",
									"                pm.test(\"Status code is 200\", function () {",
									"                    pm.response.to.have.status(200);",
									"                });",
									"                testcase++;",
									"                pm.environment.set(\"C-testcase\", testcase);",
									"",
									"                postman.setNextRequest(\"create_payment\");",
									"            }",
									"            else{",
									"                page++;",
									"                pm.environment.set(\"C-page\", page);",
									"                postman.setNextRequest(\"get_payment_list\");",
									"            }",
									"            break;",
									"        case 4:",
									"            let list_payment_new = pm.environment.get(\"C-list_payment_new\");",
									"            if(!list_payment_new)",
									"                list_payment_new = []",
									"            for(let i in responseJson.data){",
									"                list_payment_new.push(responseJson.data[i]);",
									"            }",
									"        ",
									"            let total_payment_new = pm.environment.get(\"C-total_payment_new\");",
									"            if(!total_payment_new)",
									"                total_payment_new = 0;",
									"            total_payment_new += list_payment_new.length;",
									"            pm.environment.set(\"C-total_payment_new\", total_payment_new);",
									"            ",
									"            if(page >= total_pages){",
									"                pm.environment.unset(\"C-page\");",
									"                console.log(\"Total payment before create new payment:\", pm.environment.get(\"C-total_payment_old\"));",
									"                console.log(\"Total payment after create new payment:\", pm.environment.get(\"C-total_payment_new\"));",
									"                pm.test(\"Check after create list payment increase 1 data\", function (){",
									"                    let total_payment_old = pm.environment.get(\"C-total_payment_old\");",
									"                    let total_payment_new = pm.environment.get(\"C-total_payment_new\");",
									"                    pm.expect(total_payment_old + 1).to.eql(total_payment_new);",
									"                });",
									"            postman.setNextRequest(\"get_payment_detail\");",
									"            }",
									"            else{",
									"                page++;",
									"                pm.environment.set(\"C-page\", page);",
									"                postman.setNextRequest(\"get_payment_list\");",
									"            }",
									"            break;",
									"        case 6 :",
									"            ",
									"            ",
									"            let payment_code;",
									"            let index;",
									"            switch(configs.test_payment_method){",
									"                case \"mb\":",
									"                    payment_code = payment_obj.payment_info_other.payment_request_code;",
									"                ",
									"                    for(let i in responseJson.data){",
									"                        if(responseJson.data[i].code == payment_code)",
									"                            index = i;",
									"                    }",
									"                    console.log(responseJson.data[index]);",
									"                    if(configs.payment_type == \"paid\"){",
									"                    ",
									"                        pm.test(\"Check paid amount after hook correctly is \" + responseJson.data[index].payment_info.amount, function(){",
									"                            pm.expect(responseJson.data[index].payment_info.amount).to.eql(payment_obj.payment_info_other.amount); ",
									"                        ",
									"                        } );",
									"",
									"                        pm.test(\"Check order status is PAID\", function(){",
									"                            pm.expect(responseJson.data[index].order_status).to.eql(\"paid\");",
									"                        });",
									"                    }",
									"                    else if(configs.payment_type == \"partial_paid\"){",
									"                    ",
									"                        pm.test(\"Check partial paid amount after hook correctly is \" + responseJson.data[index].payment_info.amount, function(){",
									"                            pm.expect(responseJson.data[index].payment_info.amount).to.eql(payment_obj.payment_info_other.amount / 2); ",
									"                        ",
									"                        } );",
									"",
									"                        pm.test(\"Check order status is PARTIAL PAID\", function(){",
									"                            pm.expect(responseJson.data[index].order_status).to.eql(\"partial_paid\");",
									"                        });",
									"                    }",
									"                    else if(configs.payment_type == \"over_paid\"){",
									"                    ",
									"                        pm.test(\"Check over paid amount after hook correctly is \" + responseJson.data[index].payment_info.amount, function(){",
									"                            pm.expect(responseJson.data[index].payment_info.amount).to.eql(payment_obj.payment_info_other.amount * 2); ",
									"                            ",
									"                        } );",
									"",
									"                        pm.test(\"Check order status is PAID\", function(){",
									"                            pm.expect(responseJson.data[index].order_status).to.eql(\"paid\");",
									"                        });",
									"                    }",
									"                    else{",
									"                    ",
									"                        pm.test(\"Check over paid amount after hook correctly is \" + 0, function(){",
									"                            pm.expect(responseJson.data[index].payment_info.amount).to.eql(0); ",
									"                        } );",
									"                        pm.test(\"Check order status is UNPAID\", function(){",
									"                            pm.expect(responseJson.data[index].order_status).to.eql(\"unpaid\");",
									"                        });",
									"                    }",
									"                    postman.setNextRequest(\"get_payment_detail\");",
									"                    break;",
									"                case \"bank_transfer\":",
									"                    payment_code = payment_obj.payment_info_other.payment_request_code;",
									"                    for(let i in responseJson.data){",
									"                        if(responseJson.data[i].code == payment_code)",
									"                            index = i;",
									"                    }",
									"                    console.log(responseJson.data[index]);",
									"                    switch(configs.payment_type){",
									"                        case \"unpaid\":",
									"                            pm.test(\"Check over paid amount after hook correctly is \" + 0, function(){",
									"                            pm.expect(responseJson.data[index].payment_info.amount).to.eql(0); ",
									"                            } );",
									"                            pm.test(\"Check order status is UNPAID\", function(){",
									"                                pm.expect(responseJson.data[index].order_status).to.eql(\"unpaid\");",
									"                            });",
									"                            break;",
									"                        case \"partial_paid\":",
									"                            pm.test(\"Check partial paid amount after hook correctly is \" + responseJson.data[index].payment_info.amount, function(){",
									"                            pm.expect(responseJson.data[index].payment_info.amount).to.eql(payment_obj.payment_info_other.amount / 2); ",
									"                        ",
									"                            } );",
									"",
									"                            pm.test(\"Check order status is PARTIAL PAID\", function(){",
									"                                pm.expect(responseJson.data[index].order_status).to.eql(\"partial_paid\");",
									"                            });",
									"                        ",
									"                            break;",
									"                        case \"paid\":",
									"                            pm.test(\"Check paid amount after hook correctly is \" + responseJson.data[index].payment_info.amount, function(){",
									"                            pm.expect(responseJson.data[index].payment_info.amount).to.eql(payment_obj.payment_info_other.amount); ",
									"                        ",
									"                            } );",
									"",
									"                            pm.test(\"Check order status is PAID\", function(){",
									"                                pm.expect(responseJson.data[index].order_status).to.eql(\"paid\");",
									"                            });",
									"                            break;",
									"                        case \"over_paid\":",
									"                            pm.test(\"Check over paid amount after hook correctly is \" + responseJson.data[index].payment_info.amount, function(){",
									"                            pm.expect(responseJson.data[index].payment_info.amount).to.eql(payment_obj.payment_info_other.amount * 2); ",
									"                            ",
									"                            } );",
									"",
									"                            pm.test(\"Check order status is PAID\", function(){",
									"                                pm.expect(responseJson.data[index].order_status).to.eql(\"paid\");",
									"                            });",
									"                            break;",
									"                        default:",
									"                            console.log(\"Edge case not define!\")",
									"                            break;",
									"                        ",
									"                    }",
									"                    postman.setNextRequest(\"get_payment_detail\");",
									"                    break;",
									"                case \"bidv\":",
									"                    break;",
									"            }",
									"            break;",
									"        default:",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get list payment, end test\", responseJson);",
									"    postman.setNextRequest(null);",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-client-id",
								"value": "{{C-client_id}}",
								"type": "text"
							},
							{
								"key": "x-timestamp",
								"value": "{{C-timestamp}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{f1_open_url}}/api/v1/payment/get-list?count=true&page={{C-page}}&page_size={{C-page_size}}",
							"host": [
								"{{f1_open_url}}"
							],
							"path": [
								"api",
								"v1",
								"payment",
								"get-list"
							],
							"query": [
								{
									"key": "count",
									"value": "true"
								},
								{
									"key": "page",
									"value": "{{C-page}}"
								},
								{
									"key": "page_size",
									"value": "{{C-page_size}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "create_payment_v2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"",
									"let payment_method_obj = pm.environment.get(\"X-payment_method_obj\");",
									"",
									"if (pm.response.code == 200) {",
									"    console.log(\"debug: \", jsData);",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let payment_obj = pm.environment.get(\"C-payment_obj\");",
									"    let configs = pm.environment.get(\"C-configs\");",
									"",
									"    // update payment_id & data",
									"    payment_obj.payment_request_id = jsData.data.payment_request_id;",
									"    payment_obj.payment_info_other = jsData.data;",
									"    pm.environment.set(\"C-payment_obj\", payment_obj);",
									"    console.log(\"payment_obj-----\", pm.environment.get(\"C-payment_obj\"));",
									"",
									"",
									"    if (configs.test_payment_method == \"bank_transfer\") {",
									"        pm.test(\"Payment url is null\", function () {",
									"            pm.expect(jsData.data.payment_url).to.eql(\"\");",
									"        });",
									"",
									"        pm.test(\"Account name is \" + payment_method_obj.account_name, function(){",
									"            pm.expect(jsData.data.bank_transfer_detail.account_name).to.eql(payment_method_obj.account_name);",
									"        });",
									"",
									"        pm.test(\"Account number is \" + payment_method_obj.account_number, function(){",
									"            pm.expect(jsData.data.bank_transfer_detail.account_number).to.eql(payment_method_obj.account_number);",
									"        });",
									"",
									"        pm.test(\"Payment qr is not null\", function () {",
									"            pm.expect(jsData.data.payment_url).not.eql(\"\");",
									"        });",
									"",
									"    }",
									"    if (configs.test_payment_method == \"card\" || configs.test_payment_method == \"ewallet_momo\") {",
									"        pm.test(\"Payment url not null\", function () {",
									"            pm.expect(jsData.data.payment_url).not.eql(null);",
									"        })",
									"    }",
									"",
									"    if(configs.test_payment_method == \"mb\"){",
									"        pm.test(\"Payment url is null\", function () {",
									"            pm.expect(jsData.data.payment_url).to.eql(\"\");",
									"        });",
									"",
									"        pm.test(\"Account name is \" + payment_method_obj.account_name, function(){",
									"            pm.expect(jsData.data.bank_transfer_detail.account_name).to.eql(payment_method_obj.account_name);",
									"        });",
									"",
									"        pm.test(\"Account number is \" + payment_method_obj.account_number, function(){",
									"            pm.expect(jsData.data.bank_transfer_detail.account_number).to.eql(payment_method_obj.account_number);",
									"        });",
									"",
									"    }",
									"    ",
									"    testcase++;",
									"    pm.environment.set(\"C-testcase\", testcase);",
									"    ",
									"    postman.setNextRequest(\"get_payment_detail_v2\"); // get_payment_detail",
									"} else {",
									"    console.log(\"Can't create payment, end test\", jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");\r",
									"testcase++;\r",
									"pm.environment.set(\"C-testcase\", testcase);\r",
									"console.log(\"Testcase: \" + testcase);\r",
									"\r",
									"\r",
									"let list_func = eval(pm.environment.get(\"list_common_func\"));\r",
									"let configs = pm.environment.get(\"C-configs\");\r",
									"\r",
									"// Example secret key for signing, replace with your actual secret\r",
									"const secretKey = pm.environment.get(\"C-client_key\");\r",
									"console.log(\"secretKey: \" + secretKey);\r",
									"\r",
									"let today = new Date();\r",
									"let timestamp = Math.floor(today.getTime() / 1000) + 30;\r",
									"console.log(\"timestamp: \" + timestamp);\r",
									"\r",
									"// Get method, URL, body, and timestamp\r",
									"const method = pm.request.method;\r",
									"let url = pm.request.url.toString().replace(\"{{f1_open_url}}\", \"\");\r",
									"// console.log(\" ======== url: \", url);\r",
									"\r",
									"let business_id = pm.environment.get(\"X-business_id\");\r",
									"\r",
									"let reference_id = list_func.randomChars(\"10\").toUpperCase();\r",
									"console.log(\"reference_id\", reference_id);\r",
									"\r",
									"let payment_method_obj = pm.environment.get(\"X-payment_method_obj\");\r",
									"//console.log(\"payment_method_obj\", payment_method_obj);\r",
									"let payment_method_id = payment_method_obj.id;\r",
									"//console.log(\"payment_mothod_id\", payment_method_id);\r",
									"\r",
									"let list_items = new Array(list_func.getRandomInt(1, 3));\r",
									"\r",
									"for (let i = 0; i < list_items.length; i++) {\r",
									"    list_items[i] = {\r",
									"        \"name\": \"[Open API][Product] \" + list_func.randomChars(5),\r",
									"        \"quantity\": list_func.getRandomInt(1, 3),\r",
									"        \"price\": list_func.getRandomInt(10000, 100000)\r",
									"    }\r",
									"\r",
									"}\r",
									"console.log(\"list_items\", list_items);\r",
									"console.log(\"configs.test_payment_method\", configs.test_payment_method);\r",
									"switch (configs.test_payment_method) {\r",
									"    case \"card\":\r",
									"        body = {\r",
									"            \"merchant\": {\r",
									"                \"name\": pm.variables.replaceIn(\"{{$randomFullName}}\"),\r",
									"                \"mobile_number\": pm.variables.replaceIn(\"{{$randomPhoneNumber}}\"),\r",
									"                \"address\": pm.variables.replaceIn(\"{{$randomStreetAddress}}\")\r",
									"            },\r",
									"            \"items\": list_items,\r",
									"            \"customer\": {\r",
									"                \"first_name\": pm.variables.replaceIn(\"{{$randomFirstName}}\"),\r",
									"                \"last_name\": pm.variables.replaceIn(\"{{$randomLastName}}\"),\r",
									"                \"email\": pm.variables.replaceIn(\"{{$randomEmail}}\"),\r",
									"                \"mobile_number\": pm.variables.replaceIn(\"{{$randomPhoneNumber}}\"),\r",
									"                \"address\": pm.variables.replaceIn(\"{{$randomStreetAddress}}\")\r",
									"            },\r",
									"            \"amount\": 10000,//list_func.getRandomInt(100000, 500000),\r",
									"            \"payment_method\": \"card\",\r",
									"            \"description\": \"Thanh toan don hang \" + reference_id,\r",
									"            \"reference_id\": reference_id,\r",
									"            \"success_redirect_url\": \"google.com?success=true\",\r",
									"            \"failure_redirect_url\": \"google.com?fail=true\"\r",
									"        }\r",
									"        break;\r",
									"    case \"ewallet_momo\":\r",
									"        body = {\r",
									"            \"merchant\": {\r",
									"                \"name\": pm.variables.replaceIn(\"{{$randomFullName}}\"),\r",
									"                \"mobile_number\": pm.variables.replaceIn(\"{{$randomPhoneNumber}}\"),\r",
									"                \"address\": pm.variables.replaceIn(\"{{$randomStreetAddress}}\")\r",
									"            },\r",
									"            \"items\": list_items,\r",
									"            \"customer\": {\r",
									"                \"first_name\": pm.variables.replaceIn(\"{{$randomFirstName}}\"),\r",
									"                \"last_name\": pm.variables.replaceIn(\"{{$randomLastName}}\"),\r",
									"                \"email\": pm.variables.replaceIn(\"{{$randomEmail}}\"),\r",
									"                \"mobile_number\": pm.variables.replaceIn(\"{{$randomPhoneNumber}}\"),\r",
									"                \"address\": pm.variables.replaceIn(\"{{$randomStreetAddress}}\")\r",
									"            },\r",
									"            \"amount\": 10000,//list_func.getRandomInt(100000, 500000),\r",
									"            \"payment_method\": \"ewallet_momo\",\r",
									"            \"description\": \"Thanh toan don hang \" + reference_id,\r",
									"            \"reference_id\": reference_id,\r",
									"            \"success_redirect_url\": \"google.com?success=true\",\r",
									"            \"failure_redirect_url\": \"google.com?fail=true\"\r",
									"        }\r",
									"        break;\r",
									"    case \"bank_transfer\":\r",
									"        body = {\r",
									"            \"merchant\": {\r",
									"                \"name\": pm.variables.replaceIn(\"{{$randomFullName}}\"),\r",
									"                \"mobile_number\": pm.variables.replaceIn(\"{{$randomPhoneNumber}}\"),\r",
									"                \"address\": pm.variables.replaceIn(\"{{$randomStreetAddress}}\")\r",
									"            },\r",
									"            \"items\": list_items,\r",
									"            \"customer\": {\r",
									"                \"first_name\": pm.variables.replaceIn(\"{{$randomFirstName}}\"),\r",
									"                \"last_name\": pm.variables.replaceIn(\"{{$randomLastName}}\"),\r",
									"                \"email\": pm.variables.replaceIn(\"{{$randomEmail}}\"),\r",
									"                \"mobile_number\": pm.variables.replaceIn(\"{{$randomPhoneNumber}}\"),\r",
									"                \"address\": pm.variables.replaceIn(\"{{$randomStreetAddress}}\")\r",
									"            },\r",
									"            \"amount\": 10000,//list_func.getRandomInt(100000, 500000),\r",
									"            \"payment_method\": \"bank_transfer\",\r",
									"            //\"account_number\": payment_method_obj.account_number,\r",
									"            \"account_id\": payment_method_obj.account_id,\r",
									"            \"description\": \"Thanh toan don hang \" + reference_id,\r",
									"            \"reference_id\": reference_id,\r",
									"            \"success_redirect_url\": \"google.com?success=true\",\r",
									"            \"failure_redirect_url\": \"google.com?fail=true\"\r",
									"        }\r",
									"        break;\r",
									"    case \"mb\":\r",
									"        body = {\r",
									"            \"merchant\": {\r",
									"                \"name\": pm.variables.replaceIn(\"{{$randomFullName}}\"),\r",
									"                \"mobile_number\": pm.variables.replaceIn(\"{{$randomPhoneNumber}}\"),\r",
									"                \"address\": pm.variables.replaceIn(\"{{$randomStreetAddress}}\")\r",
									"            },\r",
									"            \"items\": list_items,\r",
									"            \"customer\": {\r",
									"                \"first_name\": pm.variables.replaceIn(\"{{$randomFirstName}}\"),\r",
									"                \"last_name\": pm.variables.replaceIn(\"{{$randomLastName}}\"),\r",
									"                \"email\": pm.variables.replaceIn(\"{{$randomEmail}}\"),\r",
									"                \"mobile_number\": pm.variables.replaceIn(\"{{$randomPhoneNumber}}\"),\r",
									"                \"address\": pm.variables.replaceIn(\"{{$randomStreetAddress}}\")\r",
									"            },\r",
									"            \"amount\": 10000,//list_func.getRandomInt(100000, 500000),\r",
									"            \"payment_method\": \"bank_transfer\",//\"viet_qr_pro_mb\",\r",
									"            //\"account_number\": payment_method_obj.account_number,\r",
									"            \"account_id\": \"0c4e6886-2e58-46ed-a810-d2bea05f8975\",//payment_method_obj.id,\r",
									"            \"description\": \"Thanh toan don hang \" + reference_id,\r",
									"            \"reference_id\": reference_id,\r",
									"            \"success_redirect_url\": \"google.com?success=true\",\r",
									"            \"failure_redirect_url\": \"google.com?fail=true\"\r",
									"        }\r",
									"        break;\r",
									"    case \"bidv\":\r",
									"        console.log(\"Can't support BIDV\");\r",
									"        break;\r",
									"    default:\r",
									"        console.log(\"This payment method not support\");\r",
									"        break;\r",
									"}\r",
									"\r",
									"console.log(\"body\", body);\r",
									"body = JSON.stringify(body);\r",
									"\r",
									"// Concatenate the components to form the message to sign\r",
									"const message = `${secretKey}_${method}_${url}_${body || ''}_${timestamp}`;\r",
									"console.log(\"Generated message: \", message);\r",
									"\r",
									"// Generate SHA256 signature\r",
									"const signature = CryptoJS.SHA256(message).toString(CryptoJS.enc.Hex);\r",
									"console.log(\"Generated signature: \", signature);\r",
									"\r",
									"pm.environment.set(\"C-timestamp\", timestamp);\r",
									"\r",
									"// Add the signature to the headers\r",
									"pm.request.headers.add({ key: 'x-signature', value: signature });\r",
									"\r",
									"console.log(\"payload: \", JSON.parse(body));\r",
									"pm.environment.set(\"C-payload\", body);\r",
									"pm.environment.set(\"C-payment_obj\", JSON.parse(body));\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-client-id",
								"value": "{{C-client_id}}",
								"type": "text"
							},
							{
								"key": "x-timestamp",
								"value": "{{C-timestamp}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{f1_open_url}}/api/v1/payments",
							"host": [
								"{{f1_open_url}}"
							],
							"path": [
								"api",
								"v1",
								"payments"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_payment_detail_v2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");\r",
									"console.log(\"Testcase: \" + testcase);\r",
									"let payment_obj = pm.environment.get(\"C-payment_obj\");\r",
									"let payment_id = payment_obj.payment_request_id;\r",
									"pm.environment.set(\"C-payment_id\",payment_id);\r",
									"\r",
									"// Example secret key for signing, replace with your actual secret\r",
									"const secretKey = pm.environment.get(\"C-client_key\");\r",
									"console.log(\"secretKey: \" + secretKey);\r",
									"\r",
									"// function ()\r",
									"let today = new Date();\r",
									"let timestamp = Math.floor(today.getTime()/1000) + 30;\r",
									"console.log(\"timestamp: \" + timestamp);\r",
									"\r",
									"// Get method, URL, body, and timestamp\r",
									"const method = pm.request.method;\r",
									"let url = pm.request.url.toString().replace(\"{{f1_open_url}}\",\"\");\r",
									"url = url.replace(\"{{C-payment_id}}\",payment_id);\r",
									"const body = pm.request.body ? pm.request.body.raw : '';\r",
									"// const timestamp = pm.request.headers.get('x-timestamp');\r",
									"\r",
									"// Concatenate the components to form the message to sign\r",
									"const message = `${secretKey}_${method}_${url}_${body || ''}_${timestamp}`;\r",
									"console.log(\"Generated message: \", message);\r",
									"\r",
									"// Generate SHA256 signature\r",
									"const signature = CryptoJS.SHA256(message).toString(CryptoJS.enc.Hex);\r",
									"console.log(\"Generated signature: \", signature);\r",
									"\r",
									"pm.environment.set(\"C-timestamp\",timestamp);\r",
									"\r",
									"// Add the signature to the headers\r",
									"pm.request.headers.add({ key: 'x-signature', value: signature });\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"const jsData = pm.response.json();",
									"if (pm.response.code == 200) {",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let configs = pm.environment.get(\"C-configs\");",
									"    let payment_obj = pm.environment.get(\"C-payment_obj\");",
									"    payment_obj.payment_code = jsData.data.payment_code;",
									"    console.log(\"payment_obj\", payment_obj);",
									"    pm.environment.set(\"C-payment_obj\", payment_obj);",
									"    let va_obj = pm.environment.get(\"C-va_obj\");",
									"",
									"    console.log(\"Testcase\", testcase);",
									"    //testcase = 6;",
									"    switch (testcase) {",
									"        case 4:",
									"            console.log(\"debug: \", jsData);",
									"            pm.test(\"Total amount is \" + payment_obj.amount, function () {",
									"                pm.expect(jsData.data.total_amount).to.eql(payment_obj.amount);",
									"            });",
									"",
									"            pm.test(\"Paid amount is 0\", function () {",
									"                pm.expect(jsData.data.paid_amount).to.eql(0);",
									"            });",
									"",
									"",
									"            pm.test(\"Payment status is unpaid\", function () {",
									"                pm.expect(jsData.data.status).to.eql(\"unpaid\");",
									"            });",
									"",
									"",
									"            pm.test(\"Payment description correct \", function () {",
									"                pm.expect(jsData.data.description).to.eql(payment_obj.description);",
									"            });",
									"",
									"            pm.test(\"Payment reference_id correct \", function () {",
									"                pm.expect(jsData.data.reference_id).to.eql(payment_obj.reference_id);",
									"            });",
									"           ",
									"",
									"            pm.test(\"Payment method is \" + configs.test_payment_method, function () {",
									"                pm.expect(jsData.data.payment_method).to.eql(configs.test_payment_method);",
									"            });",
									"            ",
									"            pm.test(\"Payment obj is null\", function(){",
									"                pm.expect(jsData.data.payments).to.eql(null);",
									"            })",
									"            testcase++;",
									"            pm.environment.set(\"C-testcase\", testcase);",
									"            if (configs.test_payment_method == \"bank_transfer\" || configs.test_payment_method == \"bidv\") {",
									"                postman.setNextRequest(\"hook_payment_via_finesys\"); // hook_payment_via_finesys",
									"            }",
									"            else if (configs.test_payment_method == \"card\" || configs.test_payment_method == \"ewallet_momo\") {",
									"                postman.setNextRequest(\"hook_payment_gp_via_finesys\");",
									"            }",
									"            else {",
									"                postman.setNextRequest(\"hook_mb_cash_in\");",
									"            }",
									"            break;",
									"        case 6:",
									"            console.log(\"debug: \", jsData);",
									"            let hook_payment_obj;",
									"            switch (configs.test_payment_method) {",
									"                case \"card\":",
									"                     hook_payment_obj = pm.environment.get(\"X-hook_payment_gp_obj\");",
									"                    console.log(\"Hook data\", hook_payment_obj );",
									"                    //start test",
									"                    pm.test(\"Paid amount is \" + hook_payment_obj.notify_data.paid_amount, function () {",
									"                        pm.expect(jsData.data.paid_amount).to.eql(hook_payment_obj.notify_data.paid_amount);",
									"                    });",
									"",
									"",
									"                    pm.test(\"Payment status is \" + configs.payment_type, function () {",
									"                        pm.expect(jsData.data.status).to.eql(configs.payment_type);",
									"                    });",
									"",
									"                    pm.test(\"Payment method is \" + configs.test_payment_method, function () {",
									"                        pm.expect(jsData.data.payment_method).to.eql(configs.test_payment_method);",
									"                    });",
									"",
									"                    pm.test(\"Payment description correct \", function () {",
									"                        pm.expect(jsData.data.description).to.eql(payment_obj.description);",
									"                    });",
									"",
									"                    pm.test(\"Payment reference_id correct \", function () {",
									"                        pm.expect(jsData.data.reference_id).to.eql(payment_obj.reference_id);",
									"                    });",
									"",
									"                    //check payment obj",
									"",
									"                    pm.test(\"Payment obj amount is \" + hook_payment_obj.notify_data.paid_amount, function () {",
									"                        pm.expect(jsData.data.payments[0].amount).to.eql(hook_payment_obj.notify_data.paid_amount);",
									"                    });",
									"",
									"                    pm.test(\"Payment obj method is \" + configs.test_payment_method, function () {",
									"                        pm.expect(jsData.data.payments[0].payment_method).to.eql(configs.test_payment_method);",
									"                    });",
									"                    break;",
									"                case \"ewallet_momo\":",
									"                ",
									"                    hook_payment_obj = pm.environment.get(\"X-hook_payment_gp_obj\");",
									"                    console.log(\"Hook data\", hook_payment_obj );",
									"                   ",
									"                    pm.test(\"Paid amount is \" + hook_payment_obj.notify_data.paid_amount, function () {",
									"                        pm.expect(jsData.data.paid_amount).to.eql(hook_payment_obj.notify_data.paid_amount);",
									"                    });",
									"",
									"",
									"                    pm.test(\"Payment status is \" + configs.payment_type, function () {",
									"                        pm.expect(jsData.data.status).to.eql(configs.payment_type);",
									"                    });",
									"",
									"                    pm.test(\"Payment method is \" + configs.test_payment_method, function () {",
									"                        pm.expect(jsData.data.payment_method).to.eql(configs.test_payment_method);",
									"                    });",
									"",
									"                    pm.test(\"Payment description correct \", function () {",
									"                        pm.expect(jsData.data.description).to.eql(payment_obj.description);",
									"                    });",
									"",
									"                    pm.test(\"Payment reference_id correct \", function () {",
									"                        pm.expect(jsData.data.reference_id).to.eql(payment_obj.reference_id);",
									"                    });",
									"",
									"                    //check payment obj",
									"",
									"                    pm.test(\"Payment obj amount is \" + hook_payment_obj.notify_data.paid_amount, function () {",
									"                        pm.expect(jsData.data.payments[0].amount).to.eql(hook_payment_obj.notify_data.paid_amount);",
									"                    });",
									"",
									"                    pm.test(\"Payment obj method is \" + configs.test_payment_method, function () {",
									"                        pm.expect(jsData.data.payments[0].payment_method).to.eql(configs.test_payment_method);",
									"                    });",
									"                    break;",
									"                case \"bank_transfer\":",
									"                hook_payment_obj = pm.environment.get(\"X-hook_payment_bank_transfer_obj\");",
									"                    console.log(\"Hook data\",  hook_payment_obj);",
									"                    ",
									"                    pm.test(\"Paid amount is \" + hook_payment_obj.notify_data.paid_amount, function () {",
									"                        pm.expect(jsData.data.paid_amount).to.eql(hook_payment_obj.notify_data.paid_amount);",
									"                    });",
									"",
									"",
									"                    pm.test(\"Payment status is \" + configs.payment_type, function () {",
									"                        pm.expect(jsData.data.status).to.eql(configs.payment_type);",
									"                    });",
									"",
									"                    pm.test(\"Payment method is \" + configs.test_payment_method, function () {",
									"                        pm.expect(jsData.data.payment_method).to.eql(configs.test_payment_method);",
									"                    });",
									"",
									"                    pm.test(\"Payment description correct \", function () {",
									"                        pm.expect(jsData.data.description).to.eql(payment_obj.description);",
									"                    });",
									"",
									"                    pm.test(\"Payment reference_id correct \", function () {",
									"                        pm.expect(jsData.data.reference_id).to.eql(payment_obj.reference_id);",
									"                    });",
									"",
									"                    //check payment obj",
									"",
									"                    pm.test(\"Payment obj amount is \" + hook_payment_obj.notify_data.paid_amount, function () {",
									"                        pm.expect(jsData.data.payments[0].amount).to.eql(hook_payment_obj.notify_data.paid_amount);",
									"                    });",
									"",
									"                    pm.test(\"Payment obj method is \" + configs.test_payment_method, function () {",
									"                        pm.expect(jsData.data.payments[0].payment_method).to.eql(configs.test_payment_method);",
									"                    });",
									"                    break;",
									"                case \"mb\":",
									"                 hook_payment_obj = pm.environment.get(\"X-hook_payment_mb_obj\")",
									"                    console.log(\"Hook data\", hook_payment_obj.order_paid_amount);",
									"                    ",
									"                    pm.test(\"Paid amount is \" + hook_payment_obj.order_paid_amount, function () {",
									"                        pm.expect(jsData.data.paid_amount).to.eql(hook_payment_obj.order_paid_amount);",
									"                    });",
									"",
									"",
									"                    pm.test(\"Payment status is \" + configs.payment_type, function () {",
									"                        pm.expect(jsData.data.status).to.eql(configs.payment_type);",
									"                    });",
									"",
									"                    pm.test(\"Payment method is \" + configs.test_payment_method, function () {",
									"                        pm.expect(jsData.data.payment_method).to.eql(\"viet_qr_pro_mb\");",
									"                    });",
									"",
									"                    pm.test(\"Payment description correct \", function () {",
									"                        pm.expect(jsData.data.description).to.eql(payment_obj.description);",
									"                    });",
									"",
									"                    pm.test(\"Payment reference_id correct \", function () {",
									"                        pm.expect(jsData.data.reference_id).to.eql(payment_obj.reference_id);",
									"                    });",
									"",
									"                    //check payment obj",
									"",
									"                    pm.test(\"Payment obj amount is \" + hook_payment_obj.order_paid_amount, function () {",
									"                        pm.expect(jsData.data.payments[0].amount).to.eql(hook_payment_obj.order_paid_amount);",
									"                    });",
									"",
									"                    pm.test(\"Payment obj method is viet_qr_payment\", function () {",
									"                        pm.expect(jsData.data.payments[0].payment_method).to.eql(\"viet_qr_pro_mb\");",
									"                    });",
									"                    break;",
									"                case \"bidv\":",
									"                    break;",
									"                default:",
									"                    break;",
									"            }",
									"",
									"            postman.setNextRequest(\"\");",
									"",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"    }",
									"} else {",
									"    console.log(\"Can't get payment detail, end test\", jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-client-id",
								"value": "{{C-client_id}}",
								"type": "text"
							},
							{
								"key": "x-timestamp",
								"value": "{{C-timestamp}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{f1_open_url}}/api/v1/payments/{{C-payment_id}}",
							"host": [
								"{{f1_open_url}}"
							],
							"path": [
								"api",
								"v1",
								"payments",
								"{{C-payment_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "webhook",
			"item": [
				{
					"name": "bank_notify_to_client",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Example secret key for signing, replace with your actual secret\r",
									"const secretKey = pm.environment.get(\"C-client_key\");\r",
									"console.log(\"secretKey: \" + secretKey);\r",
									"\r",
									"let today = new Date();\r",
									"let timestamp = Math.floor(today.getTime()/1000);\r",
									"console.log(\"timestamp: \" + timestamp);\r",
									"\r",
									"// Get method, URL, body, and timestamp\r",
									"const method = pm.request.method;\r",
									"let url = pm.request.url.toString().replace(\"{{f1_open_url}}\",\"\");\r",
									"// console.log(\" ======== url: \", url);\r",
									"\r",
									"let hook_body = {\r",
									"    \"business_id\": \"325\",\r",
									"    \"notify_data\": {\r",
									"        \"bank_code\": \"616\",\r",
									"        \"account_name\": \"QUY LUONG\",\r",
									"        \"currency_code\": \"704\",\r",
									"        \"account_number\": \"029110000028\",\r",
									"        \"payment_number\": \"002P0220240524164542TFNPCT\",\r",
									"        \"payment_status\": \"success\",\r",
									"        \"transaction_at\": \"2024-05-24 16:46:55\",\r",
									"        \"adjusted_amount\": 22450,\r",
									"        \"transaction_code\": \"T1001\",\r",
									"        \"transaction_note\": \"chuyen noi bo\",\r",
									"        \"transaction_type\": \"CR\",\r",
									"        \"transaction_amount\": 10000,\r",
									"        \"transaction_number\": \"1829461756217397248\",\r",
									"        \"bank_account_number\": \"WKT029110000028\",\r",
									"        \"payment_failed_reason\": \"\"\r",
									"    },\r",
									"    \"notify_type\": \"payment_changed\"\r",
									"}\r",
									"\r",
									"let body = {\r",
									"    \"client_id\": pm.environment.get(\"C-client_id\"),\r",
									"    \"data\": JSON.stringify(hook_body),\r",
									"    \"type\": \"cashout\"\r",
									"}\r",
									"body = JSON.stringify(body);\r",
									"\r",
									"// Concatenate the components to form the message to sign\r",
									"const message = `${secretKey}_${method}_${url}_${body || ''}_${timestamp}`;\r",
									"console.log(\"Generated message: \", message);\r",
									"\r",
									"// Generate SHA256 signature\r",
									"const signature = CryptoJS.SHA256(message).toString(CryptoJS.enc.Hex);\r",
									"console.log(\"Generated signature: \", signature);\r",
									"\r",
									"pm.environment.set(\"C-timestamp\",timestamp);\r",
									"\r",
									"// Add the signature to the headers\r",
									"pm.request.headers.add({ key: 'x-signature', value: signature });\r",
									"\r",
									"console.log(\"payload: \",body);\r",
									"pm.environment.set(\"C-payload\",body);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-client-id",
								"value": "{{C-client_id}}",
								"type": "text"
							},
							{
								"key": "x-timestamp",
								"value": "{{C-timestamp}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{f1_open_url}}/api/v1/webhook/banking-notify",
							"host": [
								"{{f1_open_url}}"
							],
							"path": [
								"api",
								"v1",
								"webhook",
								"banking-notify"
							]
						}
					},
					"response": []
				},
				{
					"name": "hook_mb_cash_in",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"function toISOStringWithTimezone(date, offset) {",
									"    const tzOffset = offset * 60; // offset in minutes",
									"    const localISOTime = new Date(date.getTime() - (date.getTimezoneOffset() * 60000));",
									"    const adjustedTime = new Date(localISOTime.getTime() + (tzOffset * 60000));",
									"    const isoString = adjustedTime.toISOString().slice(0, -1); // remove the 'Z' at the end",
									"    ",
									"    const sign = offset >= 0 ? \"+\" : \"-\";",
									"    const absOffset = Math.abs(offset);",
									"    const hours = String(Math.floor(absOffset)).padStart(2, '0');",
									"    const minutes = String(absOffset % 1 * 60).padStart(2, '0');",
									"",
									"    return `${isoString}${sign}${hours}:${minutes}`;",
									"}",
									"",
									"// ============================= random number between min and max",
									"function getRandomInt(min, max) {",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"",
									"// ============================= random characters",
									"function randomChars(length) {",
									"    var result           = '';",
									"    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
									"    var charactersLength = characters.length;",
									"    for ( var i = 0; i < length; i++ ) {",
									"      result += characters.charAt(Math.floor(Math.random() * ",
									" charactersLength));",
									"   }",
									"   return result;",
									"}",
									"",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let date = new Date();",
									"let today = toISOStringWithTimezone(date,0).substring(0,19).replace(\"T\",\" \")",
									"let next_day_stp = Math.floor(date.getTime()/1000) + 24*60*60;",
									"let next_day = new Date(next_day_stp*1000);",
									"let term_next = toISOStringWithTimezone(next_day,0).substring(0,19).replace(\"T\",\" \")",
									"",
									"let configs = pm.environment.get(\"C-configs\");",
									"",
									"let payment_method_obj = pm.environment.get(\"X-payment_method_obj\");",
									"",
									"let payment_obj = pm.environment.get(\"C-payment_obj\");",
									"let payload;",
									"",
									"let paid_amount;",
									"console.log(\"paymet type\", configs.payment_type)",
									"switch (configs.payment_type) {",
									"    case \"unpaid\":",
									"        paid_amount = 0;",
									"        break;",
									"    case \"paid\":",
									"        paid_amount = payment_obj.amount;",
									"        break;",
									"    case \"partial_paid\":",
									"        paid_amount = payment_obj.amount / 2;",
									"        break;",
									"    case \"extra_paid\":",
									"        paid_amount = payment_obj.amount * 2;",
									"        break;",
									"    default:",
									"        console.log(\"Payment type invalid!\");",
									"        break;",
									"}",
									"",
									"switch(configs.test_payment_method){",
									"    case \"mb\":",
									"        payload = {",
									"            \"partner_code\": \"finan_one\", // fix",
									"            \"merchant_bank_account_id\": payment_method_obj.id,// external_account_id",
									"            \"bin_code\": \"970422\", // fix",
									"            \"partner_order_id\": \"1790646908893532160\", // ko map gì",
									"            \"ref_id\" : payment_obj.payment_code,",
									"            \"amount\": paid_amount, // payment_obj.amount,",
									"            //\"total_amount\": paid_amount,",
									"            \"txn_id\": payment_obj.payment_code, // ko map gì",
									"            \"txn_time\": today,",
									"            // \"created_at\": ,",
									"            \"bank_account_number\": payment_method_obj.account_number,",
									"            \"bank_virtual_account_number\": payment_method_obj.account_number,",
									"            \"bank_holder_name\": payment_method_obj.account_name, // account_name_custom",
									"            \"bank_note\": payment_obj.description,",
									"            \"bank_ref_code\": \"\",",
									"            // \"order_total_amount\": 16000,",
									"            \"order_paid_amount\": paid_amount,",
									"            \"order_status\": 1,",
									"            \"additional\": {",
									"                \"customer_account\": \"\",",
									"                \"customer_name\": \"\"",
									"            },",
									"            \"type\":\"static\"",
									"        }",
									"        break;",
									"    case \"bidv\":",
									"        break;",
									"    case \"bank_transfer\":",
									"        let shinhan_bank_account = pm.environment.get(\"C-shinhan_bank_account\");",
									"        payload = {",
									"            \"partner_code\": \"finan_one\", // fix",
									"            \"merchant_bank_account_id\": shinhan_bank_account.external_account_id, // external_account_id",
									"            \"bin_code\": \"970424\", // fix",
									"            \"partner_order_id\": \"1790646908893532160\", // ko map gì",
									"            \"amount\": getRandomInt(1000,3000)*1000,",
									"            \"txn_id\": \"oYigPL\", // ko map gì",
									"            \"txn_time\": today,",
									"            // \"created_at\": ,",
									"            \"bank_account_number\": shinhan_bank_account.account_number,",
									"            \"bank_virtual_account_number\": shinhan_bank_account.account_number, // shinhan_bank_account.account_number",
									"            \"bank_holder_name\": shinhan_bank_account.account_name, // account_name_custom",
									"            \"bank_note\": \"[API][Shinhan] Static QR \" + randomChars(6),",
									"            \"bank_ref_code\": \"\",",
									"            // \"order_total_amount\": 16000,",
									"            // \"order_paid_amount\": 16000,",
									"            \"order_status\": 1,",
									"            \"additional\": {",
									"                \"customer_account\": \"\",",
									"                \"customer_name\": \"\"",
									"            },",
									"            //\"type\":\"static\"",
									"        }",
									"        break;",
									"    default:",
									"}",
									"pm.environment.set(\"X-hook_payment_mb_obj\",payload);",
									"console.log(\"payload: \",payload);",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));",
									"pm.environment.set(\"C-tnx_obj\",payload); // tạm thời xử lý là tnx_obj"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    console.log(\"debug: \", jsData); // hook",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"",
									"    testcase++;",
									"    pm.environment.set(\"C-testcase\",testcase);",
									"    postman.setNextRequest(\"get_payment_detail_v2\"); // get_list_transaction",
									"} else {",
									"    console.log(\"Can't call hook, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-request-id",
								"value": "62356403",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-banking/hook/v1/viet-qr-pro",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-banking",
								"hook",
								"v1",
								"viet-qr-pro"
							]
						}
					},
					"response": []
				},
				{
					"name": "hook_payment_via_finesys",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function toISOStringWithTimezone(date, offset) {",
									"    const tzOffset = offset * 60; // offset in minutes",
									"    const localISOTime = new Date(date.getTime() - (date.getTimezoneOffset() * 60000));",
									"    const adjustedTime = new Date(localISOTime.getTime() + (tzOffset * 60000));",
									"    const isoString = adjustedTime.toISOString().slice(0, -1); // remove the 'Z' at the end",
									"",
									"    const sign = offset >= 0 ? \"+\" : \"-\";",
									"    const absOffset = Math.abs(offset);",
									"    const hours = String(Math.floor(absOffset)).padStart(2, '0');",
									"    const minutes = String(absOffset % 1 * 60).padStart(2, '0');",
									"",
									"    return `${isoString}${sign}${hours}:${minutes}`;",
									"}",
									"",
									"// ============================= random number between min and max",
									"function getRandomInt(min, max) {",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"",
									"// ============================= random characters",
									"function randomChars(length) {",
									"    var result = '';",
									"    var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
									"    var charactersLength = characters.length;",
									"    for (var i = 0; i < length; i++) {",
									"        result += characters.charAt(Math.floor(Math.random() *",
									"            charactersLength));",
									"    }",
									"    return result;",
									"}",
									"",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let date = new Date();",
									"let today = toISOStringWithTimezone(date, 0).substring(0, 19).replace(\"T\", \" \")",
									"let next_day_stp = Math.floor(date.getTime() / 1000) + 24 * 60 * 60;",
									"let next_day = new Date(next_day_stp * 1000);",
									"let term_next = toISOStringWithTimezone(next_day, 0).substring(0, 19).replace(\"T\", \" \")",
									"",
									"let configs = pm.environment.get(\"C-configs\");",
									"let payment_method_obj = pm.environment.get(\"X-payment_method_obj\");",
									"console.log(\"payment_method_obj-----\", payment_method_obj);",
									"let payment_obj = pm.environment.get(\"C-payment_obj\");",
									"let paid_amount;",
									"console.log(\"paymet type\", configs.payment_type)",
									"switch (configs.payment_type) {",
									"    case \"unpaid\":",
									"        paid_amount = 0;",
									"        break;",
									"    case \"paid\":",
									"        paid_amount = payment_obj.amount;",
									"        break;",
									"    case \"partial_paid\":",
									"        paid_amount = payment_obj.amount / 2;",
									"        break;",
									"    case \"extra_paid\":",
									"        paid_amount = payment_obj.amount * 2;",
									"        break;",
									"    default:",
									"        console.log(\"Payment type invalid!\");",
									"        break;",
									"}",
									"",
									"console.log(\"-------------payment_obj\", payment_obj);",
									"let payload;",
									"switch (configs.test_payment_method) {",
									"    case \"bank_transfer\":",
									"        let payment_obj = pm.environment.get(\"C-payment_obj\");",
									"        console.log(\"payment_obj: \", payment_obj);",
									"",
									"        let date = new Date();",
									"        let today = toISOStringWithTimezone(date, 0).substring(0, 19).replace(\"T\", \" \");",
									"        let next_day_stp = Math.floor(date.getTime() / 1000) + 24 * 60 * 60;",
									"        let next_day = new Date(next_day_stp * 1000);",
									"        let term_next = toISOStringWithTimezone(next_day, 0).substring(0, 19).replace(\"T\", \" \");",
									"",
									"        // T1001 : Chuyển cashin trực tiếp thông qua QR (non Payment Link)",
									"        // T1003: Chuyển qua payment link",
									"",
									"        // payload = {",
									"        //     \"business_id\": \"B03600000001\", // hiện tại nằm ở DB finesys",
									"        //     // \"business_id\": SBH => \"B00100000010\", 1AM => B00200000001, WKT => B03600000001 .",
									"        //     \"notify_data\": {",
									"        //         \"bank_code\": payment_method_obj.bank_code,",
									"        //         \"account_name\": payment_method_obj.account_name,//payment_obj.payment_info_other.bank_transfer_detail.account_name,//payment_method_obj.account_name,",
									"        //         \"currency_code\": \"704\",",
									"        //         \"account_number\": payment_method_obj.account_number.substring(3,payment_method_obj.account_number.length),//payment_obj.payment_info_other.bank_transfer_detail.account_number.substring(3,payment_obj.payment_info_other.bank_transfer_detail.account_number.length),//payment_method_obj.account_number,//payment_obj.payment_info_other.account_number.substring(3,payment_obj.payment_info_other.account_number.length), // tạm thời remove 3 ký tự đầu",
									"        //         \"payment_number\": \"002P0220240524164542TFNPCT\",",
									"        //         \"payment_status\": \"success\",",
									"        //         \"transaction_at\": today,",
									"        //         \"adjusted_amount\": payment_obj.amount,",
									"        //         \"transaction_code\": \"T1001\", // T1001 cash-in, T1002 cash-out (luôn truyền T1001)",
									"        //         \"transaction_note\": payment_obj.description,",
									"        //         \"transaction_type\": \"CR\", // CR cash-in , DR cash-out",
									"        //         \"transaction_amount\": paid_amount,",
									"        //         //\"reference_id\" : payment_obj.payment_code,",
									"        //         \"transaction_number\": payment_obj.payment_code,",
									"        //         \"bank_account_number\":  payment_method_obj.account_number,//payment_obj.payment_info_other.bank_transfer_detail.account_number,",
									"        //         \"payment_failed_reason\": \"\"",
									"        //     },",
									"        //     \"notify_type\": \"payment_changed\"",
									"        // }",
									"        payload = {",
									"            \"business_id\": \"B03600000001\",",
									"            \"notify_data\": {",
									"                \"amount\": payment_obj.amount         ,",
									"                \"user_id\": \"owner_1am\",",
									"                \"expired_at\": \"2024-05-25 10:23:30\",",
									"                \"description\": \"THANH TOÁN HÓA ĐƠN \" + payment_obj.reference_id,",
									"                \"paid_amount\": paid_amount,",
									"                \"reference_id\": payment_obj.payment_code,",
									"                \"currency_code\": \"704\",",
									"                \"payment_details\": [",
									"                    {",
									"                        \"paid_at\": today,",
									"                        \"created_at\": today,",
									"                        \"net_amount\": paid_amount,",
									"                        \"payment_url\": null,",
									"                        \"total_amount\": paid_amount,",
									"                        \"currency_code\": \"704\",",
									"                        \"reconciled_at\": null,",
									"                        \"payment_method\": \"bank_transfer\",",
									"                        \"payment_number\": \"002500000010\",",
									"                        \"recipient_info\": {",
									"                            \"qr_code\": payment_obj.payment_info_other.bank_transfer_detail.qr_code,",
									"                            \"bank_code\": \"SHBVN\",",
									"                            \"account_name\": payment_method_obj.account_name,",
									"                            \"bank_account_number\": payment_method_obj.account_number//\"WKT036110000011\"",
									"                        },",
									"                        \"base_fee_amount\": 0,",
									"                        \"markup_fee_amount\": 0,",
									"                        \"settlement_details\": [",
									"                            {",
									"                                \"net_amount\": paid_amount,",
									"                                \"settled_at\": today,",
									"                                \"payment_note\": \"SETTLE THANH TOAN HOA DON \" + payment_obj.reference_id,",
									"                                \"base_fee_amount\": 0,",
									"                                \"markup_fee_amount\": 0,",
									"                                \"transaction_number\": \"002T100320240524102605PBLDYGBD\",//k map j",
									"                                \"bank_transaction_number\": \"8113VAC2405000003701\"// k map j",
									"                            }",
									"                        ],",
									"                        \"provider_reference_id\": null,",
									"                        \"payment_request_status\": \"settled\"",
									"                    }",
									"                ],",
									"                \"payment_link_url\": null,",
									"                \"payment_link_type\": \"single\",",
									"                \"cancel_redirect_url\": \"https://book.finan.one/pay/2/invoice/SOUT3UQBPR5HIVM9\",",
									"                \"payment_link_number\": \"24052410233005759735\",",
									"                \"payment_link_status\": \"paid\",",
									"                \"failure_redirect_url\": \"https://book.finan.one/pay/2/invoice/SOUT3UQB/PR5HIVM9\",",
									"                \"success_redirect_url\": \"https://book.finan.one/pay/2/invoice/SOUT3UQB/PR5HIVM9\",",
									"                \"linking_account_number\": payment_method_obj.account_number.substring(3,payment_method_obj.account_number.length),",
									"                \"linking_bank_account_number\": payment_method_obj.account_number",
									"            },",
									"            \"notify_type\": \"payment_settled\"",
									"        }",
									"        break;",
									"    case \"bidv\":",
									"        break;",
									"    default:",
									"}",
									"",
									"console.log(\"payload: \", payload);",
									"pm.environment.set(\"C-payload\", JSON.stringify(payload));",
									"pm.environment.set(\"C-tnx_obj\", payload); // tạm thời xử lý là tnx_obj",
									"pm.environment.set(\"X-hook_payment_bank_transfer_obj\", payload);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    console.log(\"debug: \", jsData); // hook",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"",
									"    testcase++;",
									"    pm.environment.set(\"C-testcase\",testcase);",
									"    postman.setNextRequest(\"get_payment_detail_v2\"); // get_payment_list",
									"} else {",
									"    console.log(\"Can't call hook, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-banking/hook/v1/finesys",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-banking",
								"hook",
								"v1",
								"finesys"
							]
						}
					},
					"response": []
				},
				{
					"name": "hook_payment_gp_via_finesys",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function toISOStringWithTimezone(date, offset) {",
									"    const tzOffset = offset * 60; // offset in minutes",
									"    const localISOTime = new Date(date.getTime() - (date.getTimezoneOffset() * 60000));",
									"    const adjustedTime = new Date(localISOTime.getTime() + (tzOffset * 60000));",
									"    const isoString = adjustedTime.toISOString().slice(0, -1); // remove the 'Z' at the end",
									"",
									"    const sign = offset >= 0 ? \"+\" : \"-\";",
									"    const absOffset = Math.abs(offset);",
									"    const hours = String(Math.floor(absOffset)).padStart(2, '0');",
									"    const minutes = String(absOffset % 1 * 60).padStart(2, '0');",
									"",
									"    return `${isoString}${sign}${hours}:${minutes}`;",
									"}",
									"",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"let configs = pm.environment.get(\"C-configs\");",
									"console.log(\"paymet type\", configs.test_payment_method);",
									"",
									"",
									"",
									"",
									"//let viet_qr_payment = pm.environment.get(\"C-viet_qr_payment\");",
									"//let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"//let invoice_obj = pm.environment.get(\"C-invoice_obj\");",
									"let payment_obj = pm.environment.get(\"C-payment_obj\");",
									"",
									"",
									"let date = new Date();",
									"let today = toISOStringWithTimezone(date, 0).substring(0, 19).replace(\"T\", \" \")",
									"let next_day_stp = Math.floor(date.getTime() / 1000) + 24 * 60 * 60;",
									"let next_day = new Date(next_day_stp * 1000);",
									"let term_next = toISOStringWithTimezone(next_day, 0).substring(0, 19).replace(\"T\", \" \")",
									"",
									"//let base_fee_amount = 2000 + Math.round(tnx_obj.amount * 0.02);",
									"//let net_amount = tnx_obj.amount - base_fee_amount;",
									"let base_fee_amount = 2000 + Math.round(payment_obj.amount * 0.02);",
									"let net_amount = payment_obj.amount - base_fee_amount;",
									"",
									"let redirect_url = \"https://book-stg.finan.one/pay/\" + pm.environment.get(\"C-business_id\") + \"/invoice/\" + payment_obj.payment_request_id;",
									"",
									"let payment_method = \"\";",
									"if (configs.test_payment_method == \"bank_transfer\") {",
									"    payment_method = configs.test_payment_method;",
									"} else {",
									"    //payment_method = viet_qr_payment.key;",
									"}",
									"",
									"",
									"console.log(\"payment mothod \", configs.test_payment_method);",
									"let paid_amount;",
									"console.log(\"paymet type\", configs.payment_type)",
									"switch (configs.payment_type) {",
									"    case \"unpaid\":",
									"        paid_amount = 0;",
									"        break;",
									"    case \"paid\":",
									"        paid_amount = payment_obj.amount;",
									"        break;",
									"    case \"partial_paid\":",
									"        paid_amount = payment_obj.amount / 2;",
									"        break;",
									"    case \"extra_paid\":",
									"        paid_amount = payment_obj.amount * 2;",
									"        break;",
									"    default:",
									"        console.log(\"Payment type invalid!\");",
									"        break;",
									"}",
									"console.log(\"configs.test_payment_method\",configs.test_payment_method);",
									"console.log(\"paid amount\", paid_amount);",
									"let payload;",
									"switch (configs.test_payment_method) {",
									"    case \"card\":",
									"        payload = {",
									"            \"business_id\": \"B00100000009\", // ko care",
									"            \"notify_data\": {",
									"                \"amount\": payment_obj.amount, // số tiền cash in",
									"                \"user_id\": \"97df335075c94e3895f34a2243e75332_597666253\", // ?",
									"                \"expired_at\": term_next, // get current+1",
									"                \"description\": \"THANH TOÁN HÓA ĐƠN \" + payment_obj.payment_request_id, // cần check lại",
									"                \"paid_amount\": paid_amount, // = amount",
									"                \"reference_id\": payment_obj.payment_code, // payment_request_code khi gen QR",
									"                \"currency_code\": \"704\", // fix vnd",
									"                \"payment_details\": [",
									"                    {",
									"                        \"paid_at\": today, // get current",
									"                        \"created_at\": today, // get current",
									"                        \"net_amount\": net_amount,//net_amount, // số tiền thực nhận",
									"                        \"payment_url\": \"https://payment.galaxypay.vn\", // link qua galaxy pay, tạm fix",
									"                        \"total_amount\": paid_amount, // số tiền cash in",
									"                        \"currency_code\": \"704\",",
									"                        \"reconciled_at\": null,",
									"                        \"payment_method\": configs.test_payment_method, // phương thức thanh toán ",
									"                        \"payment_number\": \"001P1020240524165625VMZCCZ\", // random",
									"                        \"recipient_info\": {},",
									"                        \"base_fee_amount\": base_fee_amount, // phí",
									"                        \"markup_fee_amount\": 0,",
									"                        \"settlement_details\": [],",
									"                        \"provider_reference_id\": \"2405244733135185214416670\", // fix",
									"                        \"payment_request_status\": \"success\"",
									"                    }",
									"                ],",
									"                \"payment_link_url\": null,",
									"                \"payment_link_type\": \"single\",",
									"                \"cancel_redirect_url\": redirect_url, // gán theo system code",
									"                \"payment_link_number\": \"24052416562530934959\",",
									"                \"payment_link_status\": \"paid\",",
									"                \"failure_redirect_url\": redirect_url,",
									"                \"success_redirect_url\": redirect_url,",
									"                 //\"linking_account_number\": viet_qr_payment.bank_account.account_number.substring(3, viet_qr_payment.bank_account.account_number.length), // \"002110000007\"",
									"                // \"linking_bank_account_number\": viet_qr_payment.bank_account.account_number// \"1AM002110000007\"",
									"            },",
									"            \"notify_type\": \"payment_success\"",
									"        };",
									"        break;",
									"    case \"ewallet_momo\":",
									"        payload = {",
									"            \"business_id\": \"B00100000009\", // ko care",
									"            \"notify_data\": {",
									"                \"amount\": payment_obj.amount, // số tiền cash in",
									"                \"user_id\": \"97df335075c94e3895f34a2243e75332_597666253\", // ?",
									"                \"expired_at\": term_next, // get current+1",
									"                \"description\": \"THANH TOÁN HÓA ĐƠN \" + payment_obj.payment_request_id, // cần check lại",
									"                \"paid_amount\": paid_amount, // = amount",
									"                \"reference_id\": payment_obj.payment_code, // payment_request_code khi gen QR",
									"                \"currency_code\": \"704\", // fix vnd",
									"                \"payment_details\": [",
									"                    {",
									"                        \"paid_at\": today, // get current",
									"                        \"created_at\": today, // get current",
									"                        \"net_amount\": net_amount, // số tiền thực nhận",
									"                        \"payment_url\": \"https://payment.galaxypay.vn\", // link qua galaxy pay, tạm fix",
									"                        \"total_amount\": paid_amount, // số tiền cash in",
									"                        \"currency_code\": \"704\",",
									"                        \"reconciled_at\": null,",
									"                        \"payment_method\": configs.test_payment_method, // phương thức thanh toán ",
									"                        \"payment_number\": \"001P1020240524165625VMZCCZ\", // random",
									"                        \"recipient_info\": {},",
									"                        \"base_fee_amount\": base_fee_amount, // phí",
									"                        \"markup_fee_amount\": 0,",
									"                        \"settlement_details\": [],",
									"                        \"provider_reference_id\": \"2405244733135185214416670\", // fix",
									"                        \"payment_request_status\": \"success\"",
									"                    }",
									"                ],",
									"                \"payment_link_url\": null,",
									"                \"payment_link_type\": \"single\",",
									"                \"cancel_redirect_url\": redirect_url, // gán theo system code",
									"                \"payment_link_number\": \"24052416562530934959\",",
									"                \"payment_link_status\": \"paid\",",
									"                \"failure_redirect_url\": redirect_url,",
									"                \"success_redirect_url\": redirect_url,",
									"                //\"linking_account_number\": viet_qr_payment.bank_account.account_number.substring(3, viet_qr_payment.bank_account.account_number.length), // \"002110000007\"",
									"                //\"linking_bank_account_number\": viet_qr_payment.bank_account.account_number// \"1AM002110000007\"",
									"            },",
									"            \"notify_type\": \"payment_success\"",
									"        };",
									"        break;",
									"",
									"    default:",
									"        console.log(\"missing \" + configs.test_payment_method);",
									"        break;",
									"}",
									"",
									"payment_obj.net_amount = net_amount;",
									"payment_obj.base_fee_amount = base_fee_amount;",
									"pm.environment.set(\"C-payment_obj\", payment_obj);",
									"",
									"console.log(\"payload: \", payload);",
									"pm.environment.set(\"C-payload\", JSON.stringify(payload));",
									"pm.environment.set(\"X-hook_payment_gp_obj\", payload);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    console.log(\"debug: \", jsData); // hook",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"",
									"    testcase++;",
									"    pm.environment.set(\"C-testcase\",testcase);",
									"    postman.setNextRequest(\"get_payment_detail_v2\"); // get_list_transaction",
									"} else {",
									"    console.log(\"Can't call hook, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-banking/hook/v1/finesys",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-banking",
								"hook",
								"v1",
								"finesys"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"let configs = {",
					"    \"is_use_email\":false,",
					"    \"limit_page\":5,",
					"    \"timeout\":12000,",
					"    // \"client_action\":\"edit\", // create, edit",
					"    // \"feature\":\"create_external_transfer\", // create_client, edit_client, create_va, create_external_transfer, create_internal_transfer",
					"    \"test_payment_method\":\"bank_transfer\", // mb, bidv, bank_transfer - Open API  BIDV (BIDV ,chưa có va), card,ewallet_momo",
					"    \"payment_type\":\"extra_paid\" // unpaid, partial_paid, paid, extra_paid",
					"}",
					"",
					"pm.environment.set(\"C-configs\",configs);",
					"// console.log(\"configs: \",configs);"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"// ====================================== parser cURL",
					"function parseCURL(request_api){",
					"    let curl = \"\";",
					"    switch(request_api.method){",
					"        case \"PUT\":",
					"            curl = \"curl --location --request PUT \";",
					"            break;",
					"        case \"PATCH\":",
					"            curl = \"curl --location --request PATCH \";",
					"            break;",
					"        case \"DELETE\":",
					"            curl = \"curl --location --request DELETE \";",
					"            break;",
					"        default:",
					"            curl = \"curl --location \";",
					"            break;",
					"    }",
					"    curl += \"'\" + request_api.url.protocol + \"://\"",
					"",
					"    // host",
					"    for(let i in request_api.url.host){",
					"        if(i >= request_api.url.host.length - 1){",
					"            curl += request_api.url.host[i] + \"/\";",
					"        } else {",
					"            curl += request_api.url.host[i] + \".\";",
					"        }",
					"    }",
					"    // path",
					"    for(let i in request_api.url.path){",
					"        if(i >= request_api.url.path.length - 1){",
					"            curl += request_api.url.path[i];",
					"        } else {",
					"            curl += request_api.url.path[i] + \"/\";",
					"        }",
					"    }",
					"    // query (if have)",
					"    if(\"query\" in request_api.url){",
					"        if(request_api.url.query.length > 0){",
					"            curl += \"?\";",
					"            for(let i in request_api.url.query){",
					"                if(i >= request_api.url.query.length - 1){",
					"                    curl += request_api.url.query[i].key + \"=\" + request_api.url.query[i].value + \"' \";",
					"                } else {",
					"                    curl += request_api.url.query[i].key + \"=\" + request_api.url.query[i].value + \"&\";",
					"                }",
					"            }",
					"        } else {",
					"            curl += \"' \";",
					"        }",
					"    } else {",
					"        curl += \"' \";",
					"    }",
					"    // header",
					"    for(let i in request_api.header){",
					"        if(i >= request_api.header.length - 1){",
					"            curl += \"--header '\" + request_api.header[i].key + \": \" + request_api.header[i].value + \"'\";",
					"        } else {",
					"            curl += \"--header '\" + request_api.header[i].key + \": \" + request_api.header[i].value + \"' \";",
					"        }",
					"    }",
					"    switch(request_api.method){",
					"        case \"POST\":",
					"            curl += \" --data '\" + request_api.body.raw + \"'\"",
					"            break;",
					"        case \"PUT\": case \"PATCH\":",
					"            curl += \" --data-raw '\" + request_api.body.raw + \"'\"",
					"            break;",
					"        default:",
					"            break;",
					"    }",
					"    console.log(curl);",
					"    return curl;",
					"}",
					"const request_api = pm.request.toJSON();",
					"// console.log(\"request_api\",request_api);",
					"parseCURL(request_api);"
				]
			}
		}
	]
}