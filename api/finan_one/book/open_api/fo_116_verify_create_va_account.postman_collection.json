{
	"info": {
		"_postman_id": "c3e1d4ba-5786-4dcd-b825-55a0d54e5df4",
		"name": "fo_116_verify_create_va_account",
		"description": "Testsuite: Verify to create va account\n\nTestcase:\n\n1. Login (F1)\n    \n2. Get data\n    \n    1. client / get list client => get 1 client to action\n        \n    2. account / get list master account => get master account\n        \n    3. account / get list va => get list va respective withh step 2.b.\n        \n3. Create va\n    \n4. Check data\n    \n    1. account / get list va => check total va increase 1, check data\n        \n    2. accounnt / get va detail => check data",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "282640"
	},
	"item": [
		{
			"name": "authen",
			"item": [
				{
					"name": "login",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// ============================= random characters",
									"function randomChars(length) {",
									"    var result           = '';",
									"    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
									"    var charactersLength = characters.length;",
									"    for ( var i = 0; i < length; i++ ) {",
									"      result += characters.charAt(Math.floor(Math.random() * ",
									" charactersLength));",
									"   }",
									"   return result;",
									"}",
									"",
									"let testcase = 1;",
									"console.log(\"-------- Start Testsuite 116 --------\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let platform = [\"desktop-web\",\"mobile-web\",\"mobile-app\"];",
									"let configs = pm.environment.get(\"C-configs\");",
									"let payload;",
									"if(configs.is_use_email){",
									"    payload = {",
									"        \"app_version\": \"1.0.0\",",
									"        \"device_info\": {",
									"            \"id\": randomChars(7) + \"-\" + randomChars(4) + \"-\" + randomChars(4) + \"-\" + randomChars(4) + \"-\" + randomChars(12),",
									"            \"name\": \"IP name\",",
									"            \"os\": \"iphone\"",
									"        },",
									"        \"email\": pm.environment.get(\"SER-email\"), // pm.environment.get(\"SER-email\")",
									"        \"encrypted_password\": pm.environment.get(\"SER-password\"),",
									"        \"phone_number\": \"\",",
									"        \"platform_key\": platform[0]",
									"    }",
									"} else {",
									"    payload = {",
									"        \"app_version\": \"1.0.0\",",
									"        \"device_info\": {",
									"            \"id\": randomChars(7) + \"-\" + randomChars(4) + \"-\" + randomChars(4) + \"-\" + randomChars(4) + \"-\" + randomChars(12),",
									"            \"name\": \"IP name\",",
									"            \"os\": \"iphone\"",
									"        },",
									"        \"email\":\"\", // pm.environment.get(\"SER-email\")",
									"        \"encrypted_password\": pm.environment.get(\"SER-password\"),",
									"        \"phone_number\": pm.environment.get(\"SER-phone_number\"),",
									"        \"platform_key\": platform[0]",
									"    }",
									"}",
									"",
									"console.log(\"payload: \",payload);",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));",
									"pm.environment.set(\"C-testcase\",testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    pm.test(\"System code is 102000\", function () {",
									"        pm.expect(jsData.code).to.eql(102000);",
									"    });",
									"",
									"    if(jsData.code == 102000){",
									"        let userToken = null;",
									"        try {",
									"            userToken = jsData.data.access_token;",
									"            pm.environment.set(\"C-userToken\",userToken);",
									"        } catch {",
									"            console.log(\"Can't get userToken\");",
									"        }",
									"",
									"        pm.test(\"Got userToken\", function () {",
									"            pm.expect(userToken != null).to.be.true;",
									"        });",
									"",
									"        let userInfo = jsData.data.user_info;",
									"",
									"        // show log",
									"        console.log(\"userInfo:\",JSON.stringify(userInfo));",
									"        pm.environment.set(\"C-userInfo\",userInfo);",
									"",
									"        postman.setNextRequest(\"verify_token_to_get_business\");",
									"    } else {",
									"        console.log(\"Can't get Token, end test\",jsData);",
									"        postman.setNextRequest(null);",
									"    }",
									"} else {",
									"    console.log(\"Can't login new account, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-user/api/v1/auth/login",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-user",
								"api",
								"v1",
								"auth",
								"login"
							]
						},
						"description": "Login User"
					},
					"response": []
				},
				{
					"name": "verify_token_to_get_business",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// verify token to get business",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = JSON.parse(responseBody);",
									"if(pm.response.code == 200 && jsData.code == 102000){",
									"    const jsData = pm.response.json();",
									"    let configs = pm.environment.get(\"C-configs\");",
									"    pm.environment.set(\"C-user_id\",jsData.data.user_id);",
									"",
									"    let business_id = jsData.data.headers[\"x-business-id\"];",
									"    console.log(\"business_id: \" + business_id);",
									"    pm.environment.set(\"C-business_id\",business_id);",
									"",
									"    let user_id = jsData.data.user_id;",
									"    console.log(\"user_id: \" + user_id);",
									"    pm.environment.set(\"C-user_id\",user_id);",
									"",
									"    switch(configs.feature){",
									"        case \"create_client\":",
									"            postman.setNextRequest(\"create_client\");",
									"            break;",
									"        case \"edit_client\":",
									"            if(pm.environment.get(\"C-default_client\") != null){",
									"                postman.setNextRequest(\"update_client\");",
									"            } else {",
									"                console.log(\"missing default_client\");",
									"                postman.setNextRequest(null);",
									"            }",
									"            break;",
									"        case \"create_va\":",
									"            if(pm.environment.get(\"C-default_client\") != null){",
									"                postman.setNextRequest(\"get_master_account\");",
									"            } else {",
									"                console.log(\"missing default_client\");",
									"                postman.setNextRequest(null);",
									"            }",
									"            break;",
									"        case \"create_external_transfer\":",
									"        case \"create_internal_transfer\":",
									"        default:",
									"            if(pm.environment.get(\"C-default_client\") != null){",
									"                postman.setNextRequest(\"get_list_va\");",
									"            } else {",
									"                console.log(\"missing default_client\");",
									"                postman.setNextRequest(null);",
									"            }",
									"    }",
									"    postman.setNextRequest(\"get_current_business\");",
									"} else {",
									"    console.log(\"Can't check token to get business_id, end test\");",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"token\": \"{{C-userToken}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-user/api/v1/auth/verify-token",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-user",
								"api",
								"v1",
								"auth",
								"verify-token"
							]
						},
						"description": "Login User"
					},
					"response": []
				},
				{
					"name": "get_current_business",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ============================= random number between min and max",
									"function getRandomInt(min, max) {",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    // console.log(\"Current business info: \", jsData.data);",
									"    let branch_id = null;",
									"    try {",
									"        branch_id = jsData.data.current_business.list_branch[0].id;",
									"        pm.environment.set(\"C-branch_id\",branch_id);",
									"    } catch {",
									"        console.log(\"Can't get branch id\");",
									"    }",
									"",
									"    pm.test(\"Got branch id \" + branch_id, function () {",
									"        pm.expect(branch_id != null).to.be.true;",
									"    });",
									"",
									"    let payment_method = null;",
									"    let list_payment_method = [];",
									"    let configs = pm.environment.get(\"C-configs\");",
									"    let test_payment_method = configs.test_payment_method;",
									"    try {",
									"        switch(test_payment_method){",
									"            case \"viet_qr_pro_mb\":",
									"                for(let i in jsData.data.list_payment_method){",
									"                    if(jsData.data.list_payment_method[i].key == test_payment_method){ ",
									"                        payment_method = jsData.data.list_payment_method[i];",
									"                        break;",
									"                    }",
									"                }",
									"                break;",
									"            case \"va_galaxy\":",
									"                for(let i in jsData.data.list_payment_method){",
									"                    if(jsData.data.list_payment_method[i].bank_account.account_number.includes(\"SBB\")){ ",
									"                        list_payment_method[list_payment_method.length] = jsData.data.list_payment_method[i];",
									"                    }",
									"                }",
									"                payment_method = list_payment_method[getRandomInt(0,list_payment_method.length -1)];",
									"                break;",
									"            case \"bank_transfer\":",
									"                for(let i in jsData.data.list_payment_method){",
									"                    if(jsData.data.list_payment_method[i].key == test_payment_method){ ",
									"                        list_payment_method[list_payment_method.length] = jsData.data.list_payment_method[i];",
									"                    }",
									"                }",
									"                payment_method = list_payment_method[getRandomInt(0,list_payment_method.length -1)];",
									"                break;",
									"            default:",
									"                console.log(\"Missing flow\");",
									"                break;",
									"        }",
									"    } catch {",
									"        console.log(\"Can't get branch id\");",
									"    }",
									"    pm.environment.set(\"C-viet_qr_payment\",payment_method);",
									"",
									"    pm.test(\"Got branch id \" + branch_id, function () {",
									"        pm.expect(branch_id != null).to.be.true;",
									"    });",
									"    ",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    testcase++;",
									"    pm.environment.set(\"C-testcase\",testcase);",
									"    postman.setNextRequest(\"get_list_clients\");",
									"} else {",
									"    console.log(\"Can't get business detail, end test\", jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-business/api/v1/business/get-current",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-business",
								"api",
								"v1",
								"business",
								"get-current"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "client",
			"item": [
				{
					"name": "get_list_clients",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");\r",
									"console.log(\"Testcase: \" + testcase);\r",
									"\r",
									"let page = pm.environment.get(\"C-page\");\r",
									"let page_size = pm.environment.get(\"C-page_size\");\r",
									"if(!page){\r",
									"    page = 1;\r",
									"    pm.environment.set(\"C-page\",page);\r",
									"\r",
									"    page_size = 20;\r",
									"    pm.environment.set(\"C-page_size\",page_size);\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let list_func = eval(pm.environment.get(\"list_common_func\"));",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let configs = pm.environment.get(\"C-configs\");",
									"    let page = pm.environment.get(\"C-page\");",
									"    let total_pages = jsData.meta.total_pages;",
									"",
									"    let list_clients, old_list_clients;",
									"    // console.log(\"debug total record in page: \" + jsData.data.length);",
									"    switch(testcase){",
									"        case 2:",
									"            list_clients = pm.environment.get(\"C-list_clients\");",
									"            if(!list_clients){",
									"                list_clients = [];",
									"            }",
									"            break;",
									"        case 4:",
									"            old_list_clients = pm.environment.get(\"C-old_list_clients\");",
									"            if(!old_list_clients){",
									"                old_list_clients = pm.environment.get(\"C-list_clients\");",
									"                pm.environment.unset(\"C-list_clients\");",
									"                pm.environment.set(\"C-old_list_clients\",old_list_clients);",
									"            }",
									"",
									"            list_clients = pm.environment.get(\"C-list_clients\");",
									"            if(!list_clients){",
									"                list_clients = [];",
									"            }",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow\");",
									"            break;",
									"    }",
									"",
									"    for(let item in jsData.data){",
									"        list_clients[list_clients.length] = {",
									"            \"client_id\":jsData.data[item].id,",
									"            \"business_id\":jsData.data[item].business_id,",
									"            \"client_secret\":jsData.data[item].client_secret,",
									"            \"name\":jsData.data[item].name,",
									"            \"owner_id\":jsData.data[item].owner_id,",
									"            \"webhook_url\":jsData.data[item].webhook_url,",
									"            \"is_active\":jsData.data[item].is_active,",
									"            \"created_at\":jsData.data[item].created_at,",
									"            \"updated_at\":jsData.data[item].updated_at",
									"        }",
									"    }",
									"    pm.environment.set(\"C-list_clients\",list_clients);",
									"",
									"    if(page >= total_pages || page >= configs.limit_page){",
									"        // must clear page & page_size",
									"        pm.environment.unset(\"C-page\");",
									"        pm.environment.unset(\"C-page_size\");",
									"",
									"        switch(testcase){",
									"            case 2:",
									"                let client_obj = null;",
									"                try {",
									"                    client_obj = list_clients[list_func.getRandomInt(0,list_clients.length - 1)];",
									"                } catch {",
									"                    console.log(\"Have nothing client\");",
									"                }",
									"                pm.test(\"Got client_obj\", function () {",
									"                    pm.expect(client_obj != null).to.be.true;",
									"                });",
									"",
									"                if(client_obj != null){",
									"                    pm.environment.set(\"C-client_obj\",client_obj);",
									"                    console.log(\"Action with client: \", client_obj);",
									"                    pm.environment.set(\"C-client_key\",client_obj.client_secret);",
									"                    pm.environment.set(\"C-client_id\",client_obj.client_id);",
									"",
									"                    postman.setNextRequest(\"get_master_account\");",
									"                } else {",
									"                    postman.setNextRequest(null);",
									"                }",
									"                break;",
									"            default:",
									"                console.log(\"Missing flow, end test\");",
									"                postman.setNextRequest(null);",
									"        }",
									"    } else {",
									"        page++;",
									"        pm.environment.set(\"C-page\",page);",
									"",
									"        console.log(\"view next page (\" + page + \") to get more clients\");",
									"        postman.setNextRequest(\"get_list_clients\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get list client, end test\", jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{f1_open_url}}/api/v1/client/get-clients",
							"host": [
								"{{f1_open_url}}"
							],
							"path": [
								"api",
								"v1",
								"client",
								"get-clients"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "account",
			"item": [
				{
					"name": "get_master_account",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"// Example secret key for signing, replace with your actual secret",
									"const secretKey = pm.environment.get(\"C-client_key\");",
									"console.log(\"secretKey: \" + secretKey);",
									"",
									"// function ()",
									"let today = new Date();",
									"let timestamp = Math.floor(today.getTime()/1000) + 30;",
									"console.log(\"timestamp: \" + timestamp);",
									"",
									"// Get method, URL, body, and timestamp",
									"const method = pm.request.method;",
									"const url = pm.request.url.toString().replace(\"{{f1_open_url}}\",\"\");",
									"const body = pm.request.body ? pm.request.body.raw : '';",
									"// const timestamp = pm.request.headers.get('x-timestamp');",
									"",
									"// Concatenate the components to form the message to sign",
									"const message = `${secretKey}_${method}_${url}_${body || ''}_${timestamp}`;",
									"console.log(\"Generated message: \", message);",
									"",
									"// Generate SHA256 signature",
									"const signature = CryptoJS.SHA256(message).toString(CryptoJS.enc.Hex);",
									"console.log(\"Generated signature: \", signature);",
									"",
									"pm.environment.set(\"C-timestamp\",timestamp);",
									"",
									"// Add the signature to the headers",
									"pm.request.headers.add({ key: 'x-signature', value: signature });",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let list_func = eval(pm.environment.get(\"list_common_func\"));",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let configs = pm.environment.get(\"C-configs\");",
									"",
									"    console.log(\"Debug: \", jsData);",
									"",
									"    let master_account_id = null, list_master = [];",
									"    switch(configs.test_payment_method){",
									"        case \"bank_transfer\":",
									"            for(let i in jsData.data){",
									"                if(jsData.data[i].bank_code == \"SHBVN\"){",
									"                    list_master[list_master.length] = jsData.data[i];",
									"                }",
									"            }",
									"            master_account_id = list_master[list_func.getRandomInt(0,list_master.length - 1)].id;",
									"            break;",
									"        case \"mb\":",
									"            for(let i in jsData.data){",
									"                if(jsData.data[i].bank_code == \"MB\"){",
									"                    list_master[list_master.length] = jsData.data[i];",
									"                }",
									"            }",
									"            master_account_id = list_master[list_func.getRandomInt(0,list_master.length - 1)].id;",
									"            break;",
									"        case \"bidv\":",
									"        default:",
									"            console.log(\"BIDV chưa support tạo va\");",
									"            for(let i in jsData.data){",
									"                if(jsData.data[i].bank_code == \"BIDV\"){",
									"                    list_master[list_master.length] = jsData.data[i];",
									"                }",
									"            }",
									"            master_account_id = list_master[list_func.getRandomInt(0,list_master.length - 1)].id;",
									"    }",
									"",
									"    pm.test(\"Got master_account_id\", function () {",
									"        pm.expect(master_account_id != null).to.be.true;",
									"    });",
									"    ",
									"    if(master_account_id != null){",
									"        pm.environment.set(\"C-master_account_id\",master_account_id);",
									"        postman.setNextRequest(\"get_list_va\"); // get_list_va",
									"    } else {",
									"        console.log(\"Missing master_account_id, end test\");",
									"        postman.setNextRequest(null);",
									"    }",
									"} else {",
									"    console.log(\"Can't get master account \", jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-client-id",
								"value": "{{C-client_id}}",
								"type": "text"
							},
							{
								"key": "x-timestamp",
								"value": "{{C-timestamp}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{f1_open_url}}/api/v1/account/get-master-account",
							"host": [
								"{{f1_open_url}}"
							],
							"path": [
								"api",
								"v1",
								"account",
								"get-master-account"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_list_va",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");\r",
									"console.log(\"Testcase: \" + testcase);\r",
									"\r",
									"let page = pm.environment.get(\"C-page\");\r",
									"let page_size = pm.environment.get(\"C-page_size\");\r",
									"if(!page){\r",
									"    page = 1;\r",
									"    pm.environment.set(\"C-page\",page);\r",
									"\r",
									"    page_size = 20;\r",
									"    pm.environment.set(\"C-page_size\",page_size);\r",
									"}\r",
									"\r",
									"// Example secret key for signing, replace with your actual secret\r",
									"const secretKey = pm.environment.get(\"C-client_key\");\r",
									"console.log(\"secretKey: \" + secretKey);\r",
									"\r",
									"// function ()\r",
									"let today = new Date();\r",
									"let timestamp = Math.floor(today.getTime()/1000) + 30;\r",
									"console.log(\"timestamp: \" + timestamp);\r",
									"\r",
									"// Get method, URL, body, and timestamp\r",
									"const method = pm.request.method;\r",
									"let url = pm.request.url.toString().replace(\"{{f1_open_url}}\",\"\");\r",
									"url = url.replace(\"{{C-page}}\",page);\r",
									"url = url.replace(\"{{C-page_size}}\",page_size);\r",
									"\r",
									"const body = pm.request.body ? pm.request.body.raw : '';\r",
									"// const timestamp = pm.request.headers.get('x-timestamp');\r",
									"\r",
									"// Concatenate the components to form the message to sign\r",
									"const message = `${secretKey}_${method}_${url}_${body || ''}_${timestamp}`;\r",
									"console.log(\"Generated message: \", message);\r",
									"\r",
									"// Generate SHA256 signature\r",
									"const signature = CryptoJS.SHA256(message).toString(CryptoJS.enc.Hex);\r",
									"console.log(\"Generated signature: \", signature);\r",
									"\r",
									"pm.environment.set(\"C-timestamp\",timestamp);\r",
									"\r",
									"// Add the signature to the headers\r",
									"pm.request.headers.add({ key: 'x-signature', value: signature });\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let list_func = eval(pm.environment.get(\"list_common_func\"));",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let configs = pm.environment.get(\"C-configs\");",
									"    let page = pm.environment.get(\"C-page\");",
									"    let total_pages = jsData.meta.total_pages;",
									"",
									"    let list_va, old_list_va;",
									"    // console.log(\"debug total record in page: \" + jsData.data.length);",
									"    switch(testcase){",
									"        case 2:",
									"            list_va = pm.environment.get(\"C-list_va\");",
									"            if(!list_va){",
									"                list_va = [];",
									"            }",
									"            break;",
									"        case 4:",
									"            old_list_va = pm.environment.get(\"C-old_list_va\");",
									"            if(!old_list_va){",
									"                old_list_va = pm.environment.get(\"C-list_va\");",
									"                pm.environment.unset(\"C-list_va\");",
									"                pm.environment.set(\"C-old_list_va\",old_list_va);",
									"            }",
									"",
									"            list_va = pm.environment.get(\"C-list_va\");",
									"            if(!list_va){",
									"                list_va = [];",
									"            }",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow\");",
									"            break;",
									"    }",
									"",
									"    for(let item in jsData.data){",
									"        list_va[list_va.length] = {",
									"            \"account_number\":jsData.data[item].account_number,",
									"            \"account_name\":jsData.data[item].account_name,",
									"            \"bank_code\":jsData.data[item].bank_code,",
									"            \"is_active\":jsData.data[item].is_active,",
									"            \"usage_type\":jsData.data[item].usage_type,",
									"            \"static_qr_code\":jsData.data[item].static_qr_code,",
									"            \"va_id\":jsData.data[item].id,",
									"            \"balance_available_amount\":jsData.data[item].balance_available_amount,",
									"            \"reference_id\":jsData.data[item].reference_id,",
									"            \"master_account_name\":jsData.data[item].master_account_name,",
									"            \"bank_id\":jsData.data[item].bank_id",
									"        }",
									"    }",
									"    pm.environment.set(\"C-list_va\",list_va);",
									"",
									"    if(page >= total_pages || page >= configs.limit_page){",
									"        // must clear page & page_size",
									"        pm.environment.unset(\"C-page\");",
									"        pm.environment.unset(\"C-page_size\");",
									"",
									"        // let user_id = pm.environment.get(\"C-user_id\");",
									"        let va_obj = pm.environment.get(\"C-va_obj\");",
									"",
									"        let record_obj = null;",
									"        switch(testcase){",
									"            case 2:",
									"                // tạo client, cần lưu total",
									"                pm.test(\"Got total va \" + list_va.length, function () {",
									"                    pm.expect(list_va.length > 0).to.be.true;",
									"                });",
									"",
									"                testcase++;",
									"                pm.environment.set(\"C-testcase\",testcase);",
									"                postman.setNextRequest(\"create_va\"); // create_va",
									"                break;",
									"            case 4:",
									"                pm.test(\"Total va increase 1\", function () {",
									"                    console.log(\"old: \" + old_list_va.length);",
									"                    console.log(\"new: \" + list_va.length);",
									"                    pm.expect(list_va.length).to.eql(old_list_va.length + 1);",
									"                });",
									"",
									"                for(let i in list_va){",
									"                    if(list_va[i].va_id == va_obj.va_id){",
									"                        record_obj = list_va[i];",
									"                        console.log(\"debug record_obj:\", record_obj);",
									"                        break;",
									"                    }",
									"                }",
									"",
									"                // check data",
									"                if(record_obj != null){",
									"                    // account_name",
									"                    pm.test(\"account_name is \" + va_obj.name, function () {",
									"                        console.log(\"act: \" + record_obj.account_name);",
									"                        pm.expect(va_obj.name.toUpperCase() == record_obj.account_name).to.be.true;",
									"                    });",
									"",
									"                    // bank_code",
									"                    pm.test(\"bank_code is \" + va_obj.name, function () {",
									"                        pm.expect(va_obj.bank_code).to.eql(record_obj.bank_code);",
									"                    });",
									"",
									"                    // is_active",
									"                    pm.test(\"is_active must be true\", function () {",
									"                        pm.expect(record_obj.is_active).to.be.true;",
									"                    });",
									"                } else {",
									"                    pm.test(\"Can't found va\", function () {",
									"                        pm.expect(true).to.be.false;",
									"                    });",
									"                }",
									"",
									"                postman.setNextRequest(\"get_va_detail\"); // get_va_detail",
									"                break;",
									"            default:",
									"                console.log(\"Missing flow, end test\");",
									"                postman.setNextRequest(null);",
									"        }",
									"    } else {",
									"        page++;",
									"        pm.environment.set(\"C-page\",page);",
									"",
									"        console.log(\"view next page (\" + page + \") to get more va\");",
									"        postman.setNextRequest(\"get_list_va\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get list client, end test\", jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-client-id",
								"value": "{{C-client_id}}",
								"type": "text"
							},
							{
								"key": "x-timestamp",
								"value": "{{C-timestamp}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{f1_open_url}}/api/v1/account/get-list-virtual-account?page={{C-page}}&page_size={{C-page_size}}",
							"host": [
								"{{f1_open_url}}"
							],
							"path": [
								"api",
								"v1",
								"account",
								"get-list-virtual-account"
							],
							"query": [
								{
									"key": "page",
									"value": "{{C-page}}"
								},
								{
									"key": "page_size",
									"value": "{{C-page_size}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get_va_detail",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Example secret key for signing, replace with your actual secret\r",
									"const secretKey = pm.environment.get(\"C-client_key\");\r",
									"console.log(\"secretKey: \" + secretKey);\r",
									"\r",
									"let va_obj = pm.environment.get(\"C-va_obj\");\r",
									"let va_id = va_obj.va_id;\r",
									"pm.environment.set(\"C-va_id\",va_id);\r",
									"\r",
									"// function ()\r",
									"let today = new Date();\r",
									"let timestamp = Math.floor(today.getTime()/1000) + 30;\r",
									"console.log(\"timestamp: \" + timestamp);\r",
									"\r",
									"// Get method, URL, body, and timestamp\r",
									"const method = pm.request.method;\r",
									"let url = pm.request.url.toString().replace(\"{{f1_open_url}}\",\"\");\r",
									"url = url.replace(\"{{C-va_id}}\",va_id);\r",
									"const body = pm.request.body ? pm.request.body.raw : '';\r",
									"// const timestamp = pm.request.headers.get('x-timestamp');\r",
									"\r",
									"// Concatenate the components to form the message to sign\r",
									"const message = `${secretKey}_${method}_${url}_${body || ''}_${timestamp}`;\r",
									"console.log(\"Generated message: \", message);\r",
									"\r",
									"// Generate SHA256 signature\r",
									"const signature = CryptoJS.SHA256(message).toString(CryptoJS.enc.Hex);\r",
									"console.log(\"Generated signature: \", signature);\r",
									"\r",
									"pm.environment.set(\"C-timestamp\",timestamp);\r",
									"\r",
									"// Add the signature to the headers\r",
									"pm.request.headers.add({ key: 'x-signature', value: signature });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let va_obj = pm.environment.get(\"C-va_obj\");",
									"",
									"    console.log(\"debug: \", jsData);",
									"",
									"    // account_name",
									"    pm.test(\"account_name is \" + va_obj.name, function () {",
									"        console.log(\"act: \" + jsData.data.account_name);",
									"        pm.expect(va_obj.name.toUpperCase() == jsData.data.account_name).to.be.true;",
									"    });",
									"",
									"    // bank_code",
									"    pm.test(\"bank_code is \" + va_obj.name, function () {",
									"        pm.expect(va_obj.bank_code).to.eql(jsData.data.bank_code);",
									"    });",
									"",
									"    // is_active",
									"    pm.test(\"is_active must be true\", function () {",
									"        pm.expect(jsData.data.is_active).to.be.true;",
									"    });",
									"",
									"    // balance_current_amount",
									"    // pm.test(\"balance_current_amount must be 0\", function () {",
									"    //     pm.expect(jsData.data.balance_current_amount == 0).to.be.true;",
									"    // });",
									"",
									"    // balance_available_amount",
									"    pm.test(\"balance_available_amount must be 0\", function () {",
									"        pm.expect(jsData.data.balance_available_amount == 0).to.be.true;",
									"    });",
									"",
									"    // currency_code",
									"    // pm.test(\"currency_code must be VND\", function () {",
									"    //     pm.expect(jsData.data.currency_code == \"VND\").to.be.true;",
									"    // });",
									"",
									"    console.log(\"-------- End Testsuite 116 --------\");",
									"    postman.setNextRequest(null);",
									"} else {",
									"    console.log(\"Can't get va detail, end test\", jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-client-id",
								"value": "{{C-client_id}}",
								"type": "text"
							},
							{
								"key": "x-timestamp",
								"value": "{{C-timestamp}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{f1_open_url}}/api/v1/account/get-virtual-account/{{C-va_id}}",
							"host": [
								"{{f1_open_url}}"
							],
							"path": [
								"api",
								"v1",
								"account",
								"get-virtual-account",
								"{{C-va_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "create_va",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let list_func = eval(pm.environment.get(\"list_common_func\"));\r",
									"\r",
									"// Example secret key for signing, replace with your actual secret\r",
									"const secretKey = pm.environment.get(\"C-client_key\");\r",
									"console.log(\"secretKey: \" + secretKey);\r",
									"\r",
									"let today = new Date();\r",
									"let timestamp = Math.floor(today.getTime()/1000) + 30;\r",
									"console.log(\"timestamp: \" + timestamp);\r",
									"\r",
									"// Get method, URL, body, and timestamp\r",
									"const method = pm.request.method;\r",
									"let url = pm.request.url.toString().replace(\"{{f1_open_url}}\",\"\");\r",
									"// console.log(\" ======== url: \", url);\r",
									"let master_account_id = pm.environment.get(\"C-master_account_id\");\r",
									"let configs = pm.environment.get(\"C-configs\");\r",
									"\r",
									"let body;\r",
									"switch(configs.test_payment_method){\r",
									"    case \"bank_transfer\":\r",
									"        body = {\r",
									"            \"master_account_id\": master_account_id, // BIDV: f029dba1-8b80-43a9-863b-1a936ffe83db  Shinhan: 81981386-f480-4ff8-ba27-ff921779fb16  MB: 71d053b4-976a-48dc-957d-b92d0f18f075\r",
									"            \"name\": \"API SHINHAN VA ACCOUNT \" + list_func.randomChars(6),\r",
									"            \"bank_code\": \"SHBVN\" // tạm thời hard code, sau này dùng API get bank list\r",
									"        }\r",
									"        break;\r",
									"    case \"mb\":\r",
									"        body = {\r",
									"            \"master_account_id\": master_account_id, // BIDV: f029dba1-8b80-43a9-863b-1a936ffe83db  Shinhan: 81981386-f480-4ff8-ba27-ff921779fb16  MB: 71d053b4-976a-48dc-957d-b92d0f18f075\r",
									"            \"name\": \"API MB VA ACCOUNT \" + list_func.randomChars(6),\r",
									"            \"bank_code\": \"MB\" // tạm thời hard code, sau này dùng API get bank list\r",
									"        }\r",
									"        break;\r",
									"    default:\r",
									"        console.log(\"VA account chỉ support Shinhan và MB\");\r",
									"        body = {\r",
									"            \"master_account_id\": master_account_id, // BIDV: f029dba1-8b80-43a9-863b-1a936ffe83db  Shinhan: 81981386-f480-4ff8-ba27-ff921779fb16  MB: 71d053b4-976a-48dc-957d-b92d0f18f075\r",
									"            \"name\": \"API BIDV VA ACCOUNT \" + list_func.randomChars(6),\r",
									"            \"bank_code\": \"BIDV\" // thử vs BIDV phải báo lỗi\r",
									"        }\r",
									"}\r",
									"\r",
									"body = JSON.stringify(body);\r",
									"\r",
									"// Concatenate the components to form the message to sign\r",
									"const message = `${secretKey}_${method}_${url}_${body || ''}_${timestamp}`;\r",
									"console.log(\"Generated message: \", message);\r",
									"\r",
									"// Generate SHA256 signature\r",
									"const signature = CryptoJS.SHA256(message).toString(CryptoJS.enc.Hex);\r",
									"console.log(\"Generated signature: \", signature);\r",
									"\r",
									"pm.environment.set(\"C-timestamp\",timestamp);\r",
									"\r",
									"// Add the signature to the headers\r",
									"pm.request.headers.add({ key: 'x-signature', value: signature });\r",
									"\r",
									"console.log(\"payload: \",body);\r",
									"pm.environment.set(\"C-payload\",body);\r",
									"pm.environment.set(\"C-va_obj\",JSON.parse(body));\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let va_obj = pm.environment.get(\"C-va_obj\");",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let configs = pm.environment.get(\"C-configs\");",
									"    switch(configs.test_payment_method){",
									"        case \"bank_transfer\":",
									"            pm.test(\"Status code is 200\", function () {",
									"                pm.response.to.have.status(200);",
									"            });",
									"",
									"            // console.log(\"debug: \", jsData);",
									"            // save id",
									"            va_obj.va_id = jsData.data.account_id;",
									"",
									"            // account_name",
									"            pm.test(\"account_name is \" + va_obj.name, function () {",
									"                console.log(\"act: \" + jsData.data.account_name);",
									"                pm.expect(jsData.data.account_name).to.eql(va_obj.name.toUpperCase());",
									"            });",
									"",
									"            // account_number",
									"",
									"            // bank_code => tạm thời hard code",
									"            pm.test(\"bank_code is SHBVN\", function () {",
									"                pm.expect(jsData.data.bank_code).to.eql(\"SHBVN\");",
									"            });",
									"",
									"            // currency_code",
									"            pm.test(\"currency_code is 704\", function () {",
									"                pm.expect(jsData.data.currency_code).to.eql(\"704\");",
									"            });",
									"",
									"            pm.environment.set(\"C-va_obj\",va_obj);",
									"            testcase++;",
									"            pm.environment.set(\"C-testcase\",testcase);",
									"            postman.setNextRequest(\"get_list_va\");",
									"            break;",
									"        case \"mb\":",
									"            pm.test(\"Status code is 200\", function () {",
									"                pm.response.to.have.status(200);",
									"            });",
									"",
									"            // console.log(\"debug: \", jsData);",
									"            // save id",
									"            va_obj.va_id = jsData.data.account_id;",
									"",
									"            // account_name",
									"            pm.test(\"account_name is \" + va_obj.name, function () {",
									"                pm.expect(jsData.data.account_name).to.eql(va_obj.name.toUpperCase());",
									"            });",
									"",
									"            // account_number",
									"",
									"            // bank_code => tạm thời hard code",
									"            pm.test(\"bank_code is MB\", function () {",
									"                pm.expect(jsData.data.bank_code).to.eql(\"MB\");",
									"            });",
									"",
									"            // currency_code",
									"            pm.test(\"currency_code is 704\", function () {",
									"                pm.expect(jsData.data.currency_code).to.eql(\"704\");",
									"            });",
									"",
									"            pm.environment.set(\"C-va_obj\",va_obj);",
									"            testcase++;",
									"            pm.environment.set(\"C-testcase\",testcase);",
									"            postman.setNextRequest(\"get_list_va\");",
									"            break;",
									"        case \"bidv\":",
									"        default:",
									"            console.log(\"Chưa support tạo va cho BIDV - \", jsData);",
									"",
									"            pm.test(\"Status code is 400\", function () {",
									"                pm.response.to.have.status(400);",
									"            });",
									"",
									"            postman.setNextRequest(null);",
									"    }",
									"} else {",
									"    console.log(\"Can't create va, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-client-id",
								"value": "{{C-client_id}}",
								"type": "text"
							},
							{
								"key": "x-timestamp",
								"value": "{{C-timestamp}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{f1_open_url}}/api/v1/account/create-virtual-account",
							"host": [
								"{{f1_open_url}}"
							],
							"path": [
								"api",
								"v1",
								"account",
								"create-virtual-account"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"let configs = {",
					"    \"is_use_email\":true,",
					"    \"limit_page\":10,",
					"    \"timeout\":12000,",
					"    // \"client_action\":\"edit\", // create, edit",
					"    // \"feature\":\"create_external_transfer\", // create_client, edit_client, create_va, create_external_transfer, create_internal_transfer",
					"    \"test_payment_method\":\"bank_transfer\" // mb, bidv, bank_transfer - Open API chưa support GP",
					"}",
					"",
					"pm.environment.set(\"C-configs\",configs);",
					"// console.log(\"configs: \",configs);"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"// ====================================== parser cURL",
					"function parseCURL(request_api){",
					"    let curl = \"\";",
					"    switch(request_api.method){",
					"        case \"PUT\":",
					"            curl = \"curl --location --request PUT \";",
					"            break;",
					"        case \"PATCH\":",
					"            curl = \"curl --location --request PATCH \";",
					"            break;",
					"        case \"DELETE\":",
					"            curl = \"curl --location --request DELETE \";",
					"            break;",
					"        default:",
					"            curl = \"curl --location \";",
					"            break;",
					"    }",
					"    curl += \"'\" + request_api.url.protocol + \"://\"",
					"",
					"    // host",
					"    for(let i in request_api.url.host){",
					"        if(i >= request_api.url.host.length - 1){",
					"            curl += request_api.url.host[i] + \"/\";",
					"        } else {",
					"            curl += request_api.url.host[i] + \".\";",
					"        }",
					"    }",
					"    // path",
					"    for(let i in request_api.url.path){",
					"        if(i >= request_api.url.path.length - 1){",
					"            curl += request_api.url.path[i];",
					"        } else {",
					"            curl += request_api.url.path[i] + \"/\";",
					"        }",
					"    }",
					"    // query (if have)",
					"    if(\"query\" in request_api.url){",
					"        if(request_api.url.query.length > 0){",
					"            curl += \"?\";",
					"            for(let i in request_api.url.query){",
					"                if(i >= request_api.url.query.length - 1){",
					"                    curl += request_api.url.query[i].key + \"=\" + request_api.url.query[i].value + \"' \";",
					"                } else {",
					"                    curl += request_api.url.query[i].key + \"=\" + request_api.url.query[i].value + \"&\";",
					"                }",
					"            }",
					"        } else {",
					"            curl += \"' \";",
					"        }",
					"    } else {",
					"        curl += \"' \";",
					"    }",
					"    // header",
					"    for(let i in request_api.header){",
					"        if(i >= request_api.header.length - 1){",
					"            curl += \"--header '\" + request_api.header[i].key + \": \" + request_api.header[i].value + \"'\";",
					"        } else {",
					"            curl += \"--header '\" + request_api.header[i].key + \": \" + request_api.header[i].value + \"' \";",
					"        }",
					"    }",
					"    switch(request_api.method){",
					"        case \"POST\":",
					"            curl += \" --data '\" + request_api.body.raw + \"'\"",
					"            break;",
					"        case \"PUT\": case \"PATCH\":",
					"            curl += \" --data-raw '\" + request_api.body.raw + \"'\"",
					"            break;",
					"        default:",
					"            break;",
					"    }",
					"    console.log(curl);",
					"    return curl;",
					"}",
					"const request_api = pm.request.toJSON();",
					"// console.log(\"request_api\",request_api);",
					"parseCURL(request_api);"
				]
			}
		}
	]
}