{
	"info": {
		"_postman_id": "fa9def01-390e-4948-83ad-37ea8162bcf3",
		"name": "fo_120_verify_customer_flow",
		"description": "1. authen\n    \n2. get data\n    \n3. create customer\n    \n4. check",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "32564955"
	},
	"item": [
		{
			"name": "authen",
			"item": [
				{
					"name": "login",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// ============================= random characters",
									"function randomChars(length) {",
									"    var result           = '';",
									"    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
									"    var charactersLength = characters.length;",
									"    for ( var i = 0; i < length; i++ ) {",
									"      result += characters.charAt(Math.floor(Math.random() * ",
									" charactersLength));",
									"   }",
									"   return result;",
									"}",
									"",
									"let testcase = 1;",
									"console.log(\"-------- Start Testsuite 114 --------\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let platform = [\"desktop-web\",\"mobile-web\",\"mobile-app\"];",
									"let configs = pm.environment.get(\"C-configs\");",
									"let payload;",
									"if(configs.is_use_email){",
									"    payload = {",
									"        \"app_version\": \"1.0.0\",",
									"        \"device_info\": {",
									"            \"id\": randomChars(7) + \"-\" + randomChars(4) + \"-\" + randomChars(4) + \"-\" + randomChars(4) + \"-\" + randomChars(12),",
									"            \"name\": \"IP name\",",
									"            \"os\": \"iphone\"",
									"        },",
									"        \"email\": pm.environment.get(\"SER-email\"), // pm.environment.get(\"SER-email\")",
									"        \"encrypted_password\": pm.environment.get(\"SER-password\"),",
									"        \"phone_number\": \"\",",
									"        \"platform_key\": platform[0]",
									"    }",
									"} else {",
									"    payload = {",
									"        \"app_version\": \"1.0.0\",",
									"        \"device_info\": {",
									"            \"id\": randomChars(7) + \"-\" + randomChars(4) + \"-\" + randomChars(4) + \"-\" + randomChars(4) + \"-\" + randomChars(12),",
									"            \"name\": \"IP name\",",
									"            \"os\": \"iphone\"",
									"        },",
									"        \"email\":\"\", // pm.environment.get(\"SER-email\")",
									"        \"encrypted_password\": pm.environment.get(\"SER-password\"),",
									"        \"phone_number\": pm.environment.get(\"SER-phone_number\"),",
									"        \"platform_key\": platform[0]",
									"    }",
									"}",
									"",
									"console.log(\"payload: \",payload);",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));",
									"pm.environment.set(\"C-testcase\",testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    pm.test(\"System code is 102000\", function () {",
									"        pm.expect(jsData.code).to.eql(102000);",
									"    });",
									"",
									"    if(jsData.code == 102000){",
									"        let userToken = null;",
									"        try {",
									"            userToken = jsData.data.access_token;",
									"            pm.environment.set(\"C-userToken\",userToken);",
									"        } catch {",
									"            console.log(\"Can't get userToken\");",
									"        }",
									"",
									"        pm.test(\"Got userToken\", function () {",
									"            pm.expect(userToken != null).to.be.true;",
									"        });",
									"",
									"        let userInfo = jsData.data.user_info;",
									"",
									"        // show log",
									"        console.log(\"userInfo:\",JSON.stringify(userInfo));",
									"        pm.environment.set(\"C-userInfo\",userInfo);",
									"",
									"        pm.execution.setNextRequest(\"verify_token_to_get_business\");",
									"    } else {",
									"        console.log(\"Can't get Token, end test\",jsData);",
									"        pm.execution.setNextRequest(null);",
									"    }",
									"} else {",
									"    console.log(\"Can't login new account, end test\",jsData);",
									"    pm.execution.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-user/api/v1/auth/login",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-user",
								"api",
								"v1",
								"auth",
								"login"
							]
						},
						"description": "Login User"
					},
					"response": []
				},
				{
					"name": "verify_token_to_get_business",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// verify token to get business",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = JSON.parse(responseBody);",
									"if(pm.response.code == 200 && jsData.code == 102000){",
									"    const jsData = pm.response.json();",
									"    let configs = pm.environment.get(\"C-configs\");",
									"    pm.environment.set(\"C-user_id\",jsData.data.user_id);",
									"",
									"    let business_id = jsData.data.headers[\"x-business-id\"];",
									"    console.log(\"business_id: \" + business_id);",
									"    pm.environment.set(\"C-business_id\",business_id);",
									"",
									"    let user_id = jsData.data.user_id;",
									"    console.log(\"user_id: \" + user_id);",
									"    pm.environment.set(\"C-user_id\",user_id);",
									"",
									"    // switch(configs.feature){",
									"    //     case \"create_client\":",
									"    //         pm.execution.setNextRequest(\"create_client\");",
									"    //         break;",
									"    //     case \"edit_client\":",
									"    //         if(pm.environment.get(\"C-default_client\") != null){",
									"    //             pm.execution.setNextRequest(\"update_client\");",
									"    //         } else {",
									"    //             console.log(\"missing default_client\");",
									"    //             pm.execution.setNextRequest(null);",
									"    //         }",
									"    //         break;",
									"    //     case \"create_va\":",
									"    //         if(pm.environment.get(\"C-default_client\") != null){",
									"    //             pm.execution.setNextRequest(\"get_master_account\");",
									"    //         } else {",
									"    //             console.log(\"missing default_client\");",
									"    //             pm.execution.setNextRequest(null);",
									"    //         }",
									"    //         break;",
									"    //     case \"create_external_transfer\":",
									"    //     case \"create_internal_transfer\":",
									"    //     default:",
									"    //         if(pm.environment.get(\"C-default_client\") != null){",
									"    //             pm.execution.setNextRequest(\"get_list_va\");",
									"    //         } else {",
									"    //             console.log(\"missing default_client\");",
									"    //             pm.execution.setNextRequest(null);",
									"    //         }",
									"    // }",
									"    pm.execution.setNextRequest(\"get_current_business\");",
									"} else {",
									"    console.log(\"Can't check token to get business_id, end test\");",
									"    pm.execution.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"token\": \"{{C-userToken}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-user/api/v1/auth/verify-token",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-user",
								"api",
								"v1",
								"auth",
								"verify-token"
							]
						},
						"description": "Login User"
					},
					"response": []
				},
				{
					"name": "get_current_business",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ============================= random number between min and max",
									"function getRandomInt(min, max) {",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    // console.log(\"Current business info: \", jsData.data);",
									"    let branch_id = null;",
									"    try {",
									"        branch_id = jsData.data.current_business.list_branch[0].id;",
									"        pm.environment.set(\"C-branch_id\",branch_id);",
									"    } catch {",
									"        console.log(\"Can't get branch id\");",
									"    }",
									"",
									"    pm.test(\"Got branch id \" + branch_id, function () {",
									"        pm.expect(branch_id != null).to.be.true;",
									"    });",
									"",
									"    let payment_method = null;",
									"    let list_payment_method = [];",
									"    let configs = pm.environment.get(\"C-configs\");",
									"    let test_payment_method = configs.test_payment_method;",
									"    try {",
									"        switch(test_payment_method){",
									"            case \"viet_qr_pro_mb\":",
									"                for(let i in jsData.data.list_payment_method){",
									"                    if(jsData.data.list_payment_method[i].key == test_payment_method){ ",
									"                        payment_method = jsData.data.list_payment_method[i];",
									"                        break;",
									"                    }",
									"                }",
									"                break;",
									"            case \"va_galaxy\":",
									"                for(let i in jsData.data.list_payment_method){",
									"                    if(jsData.data.list_payment_method[i].bank_account.account_number.includes(\"SBB\")){ ",
									"                        list_payment_method[list_payment_method.length] = jsData.data.list_payment_method[i];",
									"                    }",
									"                }",
									"                payment_method = list_payment_method[getRandomInt(0,list_payment_method.length -1)];",
									"                break;",
									"            case \"bank_transfer\":",
									"                for(let i in jsData.data.list_payment_method){",
									"                    if(jsData.data.list_payment_method[i].key == test_payment_method){ ",
									"                        list_payment_method[list_payment_method.length] = jsData.data.list_payment_method[i];",
									"                    }",
									"                }",
									"                payment_method = list_payment_method[getRandomInt(0,list_payment_method.length -1)];",
									"                break;",
									"            default:",
									"                console.log(\"Missing flow\");",
									"                break;",
									"        }",
									"    } catch {",
									"        console.log(\"Can't get branch id\");",
									"    }",
									"    pm.environment.set(\"C-viet_qr_payment\",payment_method);",
									"",
									"    pm.test(\"Got branch id \" + branch_id, function () {",
									"        pm.expect(branch_id != null).to.be.true;",
									"    });",
									"    ",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    testcase++;",
									"    pm.environment.set(\"C-testcase\",testcase);",
									"    pm.execution.setNextRequest(\"get_list_customer\");",
									"} else {",
									"    console.log(\"Can't get business detail, end test\", jsData);",
									"    pm.execution.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-business/api/v1/business/get-current",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-business",
								"api",
								"v1",
								"business",
								"get-current"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Customer",
			"item": [
				{
					"name": "get_list_customer",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"let configs = pm.environment.get(\"C-configs\");",
									"let page = pm.environment.get(\"C-page\");",
									"let page_size = configs.page_size;",
									"console.log(\"page_size: \" + page_size);",
									"pm.environment.set(\"C-page_size\", page_size);",
									"if(!page){",
									"    page = 1;",
									"    pm.environment.set(\"C-page\", page);",
									"}",
									"console.log(\"page: \" + page + \" page_size \" + page_size);",
									"",
									"",
									"// Example secret key for signing, replace with your actual secret",
									"const secretKey = pm.environment.get(\"C-client_key\");",
									"console.log(\"secretKey: \" + secretKey);",
									"",
									"// function ()",
									"let today = new Date();",
									"let timestamp = Math.floor(today.getTime()/1000) + 30;",
									"console.log(\"timestamp: \" + timestamp);",
									"// Get method, URL, body, and timestamp",
									"const method = pm.request.method;",
									"let url = pm.request.url.toString().replace(\"{{f1_open_url}}\",\"\");",
									"const body = pm.request.body ? pm.request.body.raw : '';",
									"// const timestamp = pm.request.headers.get('x-timestamp');",
									"url = url.replace(\"{{C-page}}\",page);",
									"url = url.replace(\"{{C-page_size}}\",page_size);",
									"// Concatenate the components to form the message to sign",
									"const message = `${secretKey}_${method}_${url}_${body || ''}_${timestamp}`;",
									"console.log(\"Generated message: \", message);",
									"",
									"// Generate SHA256 signature",
									"const signature = CryptoJS.SHA256(message).toString(CryptoJS.enc.Hex);",
									"console.log(\"Generated signature: \", signature);",
									"",
									"pm.environment.set(\"C-timestamp\",timestamp);",
									"",
									"// Add the signature to the headers",
									"pm.request.headers.add({ key: 'x-signature', value: signature });",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"function getRandomInt(min, max) {",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"let jsData = pm.response.json();",
									"if (pm.response.code == 200) {",
									"    let configs = pm.environment.get(\"C-configs\");",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let total_pages = jsData.meta.total_pages;",
									"    let page = pm.environment.get(\"C-page\");",
									"    console.log(\"configs.limit_page \" + configs.limit_page + \" total_pages \" + total_pages);",
									"    let list_customer, old_list_customer;",
									"    switch (testcase) {",
									"        case 2:",
									"            list_customer = pm.environment.get(\"C-list_customer\");",
									"            if (!list_customer) {",
									"                list_customer = [];",
									"            }",
									"            break;",
									"        case 4:",
									"            old_list_customer = pm.environment.get(\"C-old_list_customer\");",
									"            if (!old_list_customer) {",
									"                old_list_customer = pm.environment.get(\"C-list_customer\");",
									"                pm.environment.unset(\"C-list_customer\");",
									"                pm.environment.set(\"C-old_list_customer\", old_list_customer);",
									"            }",
									"",
									"            list_customer = pm.environment.get(\"C-list_customer\");",
									"            if (!list_customer) {",
									"                list_customer = [];",
									"            }",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow\");",
									"            break;",
									"    }",
									"    for (let item in jsData.data) {",
									"        // list_customer[list_customer.length] = {",
									"        //     \"id\": jsData.data[item].id,",
									"        //     \"name\": jsData.data[item].name,",
									"        //     \"code\": jsData.data[item].code,",
									"        //     \"phone_number\": jsData.data[item].phone,",
									"        //     \"email\": jsData.data[item].email,",
									"        //     \"type\": jsData.data[item].type,",
									"        //     \"tax_id\": jsData.data[item].tax_code,",
									"        //     \"contact_person\": jsData.data[item].contact_person,",
									"        //     \"custom_tag\": jsData.data[item].custom_tag,",
									"",
									"        // }",
									"        list_customer[list_customer.length] = jsData.data[item];",
									"",
									"    }",
									"    pm.environment.set(\"C-list_customer\", list_customer);",
									"",
									"    if (page >= total_pages) { //>= configs.limit_page || page",
									"        pm.environment.unset(\"C-page\");",
									"        pm.environment.unset(\"C-page_size\");",
									"        let test_type = configs.test_type;",
									"        console.log(\"test_type\", test_type);",
									"        switch (test_type) {",
									"            case \"create\":",
									"                switch (testcase) {",
									"                    case 2:",
									"                        pm.test(\"Got all customer! \" + list_customer.length, function () {",
									"                            pm.expect(list_customer.length > 0).to.be.true;",
									"                        });",
									"                        testcase++;",
									"                        pm.environment.set(\"C-testcase\", testcase);",
									"                        console.log(\"testcase: \" + testcase);",
									"                        pm.execution.setNextRequest(\"create_customer\");",
									"                        break;",
									"                    case 4:",
									"                        pm.test(\"Status code is 200\", function () {",
									"                            pm.response.to.have.status(200);",
									"                        });",
									"                        let customer_obj = pm.environment.get(\"C-customer_obj\");",
									"                        let customer_obj_id = pm.environment.get(\"C-customer_obj_id\");",
									"                        console.log(\"customer_obj\", customer_obj);",
									"                        let isFound = false;",
									"                        // console.log(\"id: \", customer_obj_id);",
									"                        for (i in list_customer) {",
									"                            if (list_customer[i].id == customer_obj_id) {",
									"                                isFound = true;",
									"                                pm.test(\"Total customer increase 1: \" + list_customer.length + \" old: \" + old_list_customer.length, function () {",
									"                                    pm.expect(list_customer.length == old_list_customer.length + 1).to.be.true;",
									"                                });",
									"                                pm.test(\"System code is 102001\", function () {",
									"                                    pm.expect(jsData.code).to.eql(102000);",
									"                                });",
									"                                pm.test(\"name of customer correctly! \" + customer_obj.general_info.name, function () {",
									"                                    pm.expect(customer_obj.general_info.name == list_customer[i].name).to.be.true;",
									"                                });",
									"                                pm.test(\"Phone of customer correctly! \" + customer_obj.general_info.phone, function () {",
									"                                    pm.expect(customer_obj.general_info.phone == list_customer[i].phone).to.be.true;",
									"                                });",
									"                                pm.test(\"Email of customer correctly! \" + customer_obj.general_info.email, function () {",
									"                                    pm.expect(customer_obj.general_info.email == list_customer[i].email).to.be.true;",
									"                                });",
									"                                pm.test(\"Customer code of customer correctly! \" + customer_obj.general_info.customer_code, function () {",
									"                                    pm.expect(customer_obj.general_info.customer_code == list_customer[i].code).to.be.true;",
									"                                });",
									"                                pm.test(\"Country of customer correctly! \" + customer_obj.address.country, function () {",
									"                                    pm.expect(customer_obj.address.country == list_customer[i].address.country).to.be.true;",
									"                                });",
									"                                pm.test(\"Province of customer correctly! \" + customer_obj.address.province, function () {",
									"                                    pm.expect(customer_obj.address.province == list_customer[i].address.province).to.be.true;",
									"                                });",
									"                                pm.test(\"District of customer correctly! \" + customer_obj.address.district, function () {",
									"                                    pm.expect(customer_obj.address.district == list_customer[i].address.district).to.be.true;",
									"                                });",
									"                                pm.test(\"Ward of customer correctly! \" + customer_obj.address.ward, function () {",
									"                                    pm.expect(customer_obj.address.ward == list_customer[i].address.ward).to.be.true;",
									"                                });",
									"                                pm.test(\"Address of customer correctly! \" + customer_obj.address.street, function () {",
									"                                    pm.expect(customer_obj.address.street == list_customer[i].address.street).to.be.true;",
									"                                });",
									"                                pm.test(\"Bank Account name of customer correctly! \" + customer_obj.bank_accounts[0].name, function () {",
									"                                    pm.expect(customer_obj.bank_accounts[0].name == list_customer[i].bank_accounts[0].name).to.be.true;",
									"                                });",
									"                                pm.test(\"Bank Account holder of customer correctly! \" + customer_obj.bank_accounts[0].holder, function () {",
									"                                    pm.expect(customer_obj.bank_accounts[0].holder == list_customer[i].bank_accounts[0].holder).to.be.true;",
									"                                });",
									"                                pm.test(\"Bank Account number of customer correctly! \" + customer_obj.bank_accounts[0].number, function () {",
									"                                    pm.expect(customer_obj.bank_accounts[0].number == list_customer[i].bank_accounts[0].number).to.be.true;",
									"                                });",
									"                            }",
									"                        }",
									"                        pm.test(\"Found new contact\", function () {",
									"                            pm.expect(isFound).to.be.true;",
									"                        });",
									"                        pm.execution.setNextRequest(\"get_detail_customer\");",
									"                        break;",
									"                    default:",
									"                        console.log(\"Missing flow, end test\");",
									"                        pm.execution.setNextRequest(null);",
									"                        break;",
									"                }",
									"                break;",
									"            case \"edit\":",
									"                switch (testcase) {",
									"                    case 2:",
									"                        let customer_obj, customer_obj_id;",
									"                        if (jsData.data.length > 0) {",
									"                            customer_obj = list_customer[getRandomInt(0, list_customer.length - 1)];",
									"                            pm.environment.set(\"C-testcase\", testcase);",
									"                            pm.environment.set(\"C-customer_obj\", customer_obj);",
									"                            customer_obj_id = customer_obj.id;",
									"                            pm.environment.set(\"C-customer_obj_id\", customer_obj_id);",
									"                            console.log(\"customer_obj_id \", customer_obj_id);//đã lấy được customer obj",
									"                            testcase++;",
									"                            console.log(\"C-testcase get list to edit \", testcase);//đã lấy được customer obj",
									"                            pm.environment.set(\"C-testcase\", testcase);",
									"                            pm.execution.setNextRequest(\"edit_customer\");//chuyển tới API tiếp theo ",
									"                        } else {",
									"                            console.log(\"Must create customer first\");",
									"                            pm.execution.setNextRequest(null);",
									"                        }",
									"                        break;",
									"                    case 4:",
									"                        let customer_obj_edit = pm.environment.get(\"C-customer_obj_edit\");",
									"                        let customer_obj_edit_id = pm.environment.get(\"C-customer_obj_edit_id\");",
									"                        console.log(\"customer_obj_edit_id: \", customer_obj_edit_id);",
									"                        console.log(\"customer_obj_edit\", customer_obj_edit);",
									"                        let isFound = false;",
									"                        for (i in list_customer) {",
									"                            if (list_customer[i].id == customer_obj_edit_id) {",
									"                                isFound = true;",
									"                                pm.test(\"Total customer not increase or decrease 1: \" + list_customer.length + \" old: \" + old_list_customer.length, function () {",
									"                                    pm.expect(list_customer.length == old_list_customer.length).to.be.true;",
									"                                });",
									"                                pm.test(\"System code is 102000\", function () {",
									"                                    pm.expect(jsData.code).to.eql(102000);",
									"                                });",
									"                                pm.test(\"name of customer correctly! \" + customer_obj_edit.general_info.name, function () {",
									"                                    pm.expect(customer_obj_edit.general_info.name == list_customer[i].name).to.be.true;",
									"                                });",
									"                                pm.test(\"Phone of customer correctly! \" + customer_obj_edit.general_info.phone, function () {",
									"                                    pm.expect(customer_obj_edit.general_info.phone == list_customer[i].phone).to.be.true;",
									"                                });",
									"                                pm.test(\"Email of customer correctly! \" + customer_obj_edit.general_info.email, function () {",
									"                                    pm.expect(customer_obj_edit.general_info.email == list_customer[i].email).to.be.true;",
									"                                });",
									"                                pm.test(\"Customer code of customer correctly! \" + customer_obj_edit.general_info.customer_code, function () {",
									"                                    pm.expect(customer_obj_edit.general_info.customer_code == list_customer[i].code).to.be.true;",
									"                                });",
									"                                pm.test(\"Country of customer correctly! \" + customer_obj_edit.address.country, function () {",
									"                                    pm.expect(customer_obj_edit.address.country == list_customer[i].address.country).to.be.true;",
									"                                });",
									"                                pm.test(\"Province of customer correctly! \" + customer_obj_edit.address.province, function () {",
									"                                    pm.expect(customer_obj_edit.address.province == list_customer[i].address.province).to.be.true;",
									"                                });",
									"                                pm.test(\"District of customer correctly! \" + customer_obj_edit.address.district, function () {",
									"                                    pm.expect(customer_obj_edit.address.district == list_customer[i].address.district).to.be.true;",
									"                                });",
									"                                pm.test(\"Ward of customer correctly! \" + customer_obj_edit.address.ward, function () {",
									"                                    pm.expect(customer_obj_edit.address.ward == list_customer[i].address.ward).to.be.true;",
									"                                });",
									"                                pm.test(\"Address of customer correctly! \" + customer_obj_edit.address.street, function () {",
									"                                    pm.expect(customer_obj_edit.address.street == list_customer[i].address.street).to.be.true;",
									"                                });",
									"                                pm.test(\"Bank Account name of customer correctly! \" + customer_obj_edit.bank_accounts[0].name, function () {",
									"                                    pm.expect(customer_obj_edit.bank_accounts[0].name == list_customer[i].bank_accounts[0].name).to.be.true;",
									"                                });",
									"                                pm.test(\"Bank Account holder of customer correctly! \" + customer_obj_edit.bank_accounts[0].holder, function () {",
									"                                    pm.expect(customer_obj_edit.bank_accounts[0].holder == list_customer[i].bank_accounts[0].holder).to.be.true;",
									"                                });",
									"                                pm.test(\"Bank Account number of customer correctly! \" + customer_obj_edit.bank_accounts[0].number, function () {",
									"                                    pm.expect(customer_obj_edit.bank_accounts[0].number == list_customer[i].bank_accounts[0].number).to.be.true;",
									"                                });",
									"                            }",
									"                        }",
									"                        pm.test(\"Found new contact\", function () {",
									"                            pm.expect(isFound).to.be.true;",
									"                        });",
									"                        pm.execution.setNextRequest(\"get_detail_customer\");",
									"                        break;",
									"                    default:",
									"                        console.log(\"Missing flow, end test\");",
									"                        pm.execution.setNextRequest(null);",
									"                        break;",
									"                }",
									"                break;",
									"            case \"delete\":",
									"                switch (testcase) {",
									"                    case 2:",
									"                        let customer_obj;",
									"                        let customer_obj_id;",
									"                        if (jsData.data.length > 0) {",
									"                            customer_obj = list_customer[getRandomInt(0, list_customer.length - 1)];",
									"                            pm.environment.set(\"C-customer_obj\", customer_obj);",
									"                            customer_obj_id = customer_obj.id;",
									"                            pm.environment.set(\"C-customer_obj_id\", customer_obj_id);",
									"                            console.log(\"customer_obj_id \", customer_obj_id);//đã lấy được customer obj",
									"                            testcase++;",
									"                            console.log(\"testcase get list to delete \", testcase);//đã lấy được customer obj",
									"                            pm.environment.set(\"C-testcase\", testcase);",
									"                            pm.execution.setNextRequest(\"delete_customer\");//chuyển tới API tiếp theo ",
									"                        }",
									"                        break;",
									"                    case 4:",
									"                        console.log(\"list_customer.length: \", list_customer.length);",
									"                        console.log(\"old_list_customer.length: \", old_list_customer.length);",
									"                        pm.test(\"total customer decrease 1: \" + list_customer.length + \" old: \" + old_list_customer.length, function () {",
									"                            pm.expect(list_customer.length == old_list_customer.length - 1).to.be.true;",
									"                        });",
									"                        let customer_obj_deleted = pm.environment.get(\"C-customer_obj\"); ",
									"                        let isFound = false;",
									"                        for (let i in list_customer) {",
									"                            if (list_customer[i].id == customer_obj_deleted.id) {",
									"                                isFound = true;",
									"                                break;",
									"                            }",
									"                        }",
									"                        pm.test(\"Removed customer \" + customer_obj_deleted.name, function () {",
									"                            pm.expect(isFound).to.be.false;",
									"                        });",
									"                        console.log(\"end test delete customer \");",
									"                        pm.execution.setNextRequest(null);",
									"                        break;",
									"                    default:",
									"                        console.log(\"Missing flow, end test\");",
									"                        pm.execution.setNextRequest(null);",
									"                        break;",
									"                }",
									"                break;",
									"        }",
									"    } else {",
									"        page++;",
									"        pm.environment.set(\"C-page\", page);",
									"        console.log(\"view next page (\" + page + \") to get more customer\");",
									"        pm.execution.setNextRequest(\"get_list_customer\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get customer, end test\", jsData);",
									"    pm.execution.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-client-id",
								"value": "{{C-client_id}}"
							},
							{
								"key": "x-timestamp",
								"value": "{{C-timestamp}}"
							},
							{
								"key": "x-signature",
								"value": "56790cba81c472c326a048e4a56b48fb78ff72b92c17debff7bfe83855e974a6",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "User-Agent",
								"value": "PostmanRuntime/7.39.1"
							},
							{
								"key": "Accept",
								"value": "*/*"
							},
							{
								"key": "Cache-Control",
								"value": "no-cache"
							},
							{
								"key": "Postman-Token",
								"value": "6b075165-728a-4921-91b0-58d688d6dc2f",
								"disabled": true
							},
							{
								"key": "Host",
								"value": "api-stg.finan.one",
								"disabled": true
							},
							{
								"key": "Accept-Encoding",
								"value": "gzip, deflate, br"
							},
							{
								"key": "Connection",
								"value": "keep-alive"
							},
							{
								"key": "Content-Length",
								"value": "288",
								"disabled": true
							},
							{
								"key": "x-business-id",
								"value": "523",
								"type": "text",
								"disabled": true
							},
							{
								"key": "x-user-id",
								"value": "66d4ee47-1f7d-40aa-b542-0f35fddace1d",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{f1_open_url}}/api/v1/customers?page={{C-page}}&page_size={{C-page_size}}",
							"host": [
								"{{f1_open_url}}"
							],
							"path": [
								"api",
								"v1",
								"customers"
							],
							"query": [
								{
									"key": "page",
									"value": "{{C-page}}"
								},
								{
									"key": "page_size",
									"value": "{{C-page_size}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "create_customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"let jsData = pm.response.json();",
									"console.log(\"testcase after create customer: \" + testcase);",
									"",
									"if (pm.response.code == 200) {",
									"    let customer_obj = pm.environment.get(\"C-customer_obj\");",
									"    console.log(\"customer_obj\", customer_obj);",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"    pm.test(\"System code is 102001\", function () {",
									"        pm.expect(jsData.code).to.eql(102001);",
									"    });",
									"    pm.test(\"name of customer correctly! \" + customer_obj.general_info.name, function () {",
									"        pm.expect(customer_obj.general_info.name == jsData.data.contact_name).to.be.true;",
									"    });",
									"    pm.test(\"Phone of customer correctly! \" + customer_obj.general_info.phone, function () {",
									"        pm.expect(customer_obj.general_info.phone == jsData.data.phone_number).to.be.true;",
									"    });",
									"    pm.test(\"Email of customer correctly! \" + customer_obj.general_info.email, function () {",
									"        pm.expect(customer_obj.general_info.email == jsData.data.email).to.be.true;",
									"    });    ",
									"    pm.test(\"Customer code of customer correctly! \" + customer_obj.general_info.customer_code, function () {",
									"        pm.expect(customer_obj.general_info.customer_code == jsData.data.contact_code).to.be.true;",
									"    }); ",
									"    pm.test(\"Country of customer correctly! \" + customer_obj.address.country, function () {",
									"        pm.expect(customer_obj.address.country == jsData.data.country_name).to.be.true;",
									"    });     ",
									"    pm.test(\"Province of customer correctly! \" + customer_obj.address.province, function () {",
									"        pm.expect(customer_obj.address.province == jsData.data.area_level3_name).to.be.true;",
									"    }); ",
									"    pm.test(\"District of customer correctly! \" + customer_obj.address.district, function () {",
									"        pm.expect(customer_obj.address.district == jsData.data.area_level2_name).to.be.true;",
									"    }); ",
									"    pm.test(\"Ward of customer correctly! \" + customer_obj.address.ward, function () {",
									"        pm.expect(customer_obj.address.ward == jsData.data.area_level1_name).to.be.true;",
									"    });   ",
									"    pm.test(\"Address of customer correctly! \" + customer_obj.address.street, function () {",
									"        pm.expect(customer_obj.address.street == jsData.data.detail_address).to.be.true;",
									"    });       ",
									"    pm.test(\"Bank Account name of customer correctly! \" + customer_obj.bank_accounts[0].name, function () {",
									"        pm.expect(customer_obj.bank_accounts.name == jsData.data.bank_accounts.name).to.be.true;",
									"    });     ",
									"    pm.test(\"Bank Account holder of customer correctly! \" + customer_obj.bank_accounts[0].holder, function () {",
									"        pm.expect(customer_obj.bank_accounts.holder == jsData.data.bank_accounts.holder).to.be.true;",
									"    });   ",
									"    pm.test(\"Bank Account number of customer correctly! \" + customer_obj.bank_accounts[0].number, function () {",
									"        pm.expect(customer_obj.bank_accounts.number == jsData.data.bank_accounts.number).to.be.true;",
									"    }); ",
									"    let customer_obj_id = jsData.data.id;",
									"    console.log(\"jsData.data.id: \" + jsData.data.id);",
									"    pm.environment.set(\"C-customer_obj_id\", customer_obj_id);",
									"    testcase++;",
									"    pm.environment.set(\"C-testcase\", testcase);",
									"    console.log(\"testcase after create customer nè: \" + testcase);",
									"    pm.execution.setNextRequest(\"get_list_customer\");",
									"} else {",
									"    console.log(\"sai sai đâu đó rồi: \" + pm.response);",
									"    pm.execution.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Example secret key for signing, replace with your actual secret",
									"const secretKey = pm.environment.get(\"C-client_key\");",
									"console.log(\"secretKey: \" + secretKey);",
									"",
									"// function ()",
									"let today = new Date();",
									"let timestamp = Math.floor(today.getTime() / 1000) + 30;",
									"console.log(\"timestamp: \" + timestamp);",
									"",
									"// Get method, URL, body, and timestamp",
									"const method = pm.request.method;",
									"const url = pm.request.url.toString().replace(\"{{f1_open_url}}\", \"\");",
									"// const body = pm.request.body ? pm.request.body.raw : '';",
									"// // const timestamp = pm.request.headers.get('x-timestamp');",
									"// console.log(\"body \", body);",
									"let list_func = eval(pm.environment.get(\"list_common_func\"));",
									"let contact_person_name = \"[Contact] \" + list_func.randomChars(7);",
									"let bank_account = [\"Vietcombank\", \"Sacombank\", \"VPBank\", \"Techcombank\", \"BIDV\", \"MBBank\", \"ShinhanBank\"];",
									"let randomBank = bank_account[list_func.getRandomInt(0, bank_account.length - 1)];",
									"console.log(\"randomBank \" + randomBank);",
									"pm.environment.set(\"provinces\", [\"Hà Nội\", \"Hồ Chí Minh\", \"Đà Nẵng\", \"Bình Dương\", \"Cần Thơ\"]);",
									"pm.environment.set(\"countries\", [\"Việt Nam\", \"Lào\", \"Campuchia\", \"Thái Lan\", \"Singapore\"]);",
									"pm.environment.set(\"districts\", [\"Ba Đình\", \"Tây Hồ\", \"Cầu Giấy\", \"Thanh Xuân\", \"Hải Châu\"]);",
									"pm.environment.set(\"wards\", [\"Cầu Giấy\", \"Láng Thượng\", \"Đồng Tâm\", \"Quang Trung\", \"Nhân Chính\"]);",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Create customer Testcase: \" + testcase);",
									"let body = {",
									"    \"general_info\": {",
									"        \"name\": \"[API]\" + \"Customer \" + list_func.randomChars(7),",
									"        \"customer_code\": \"CTM\" + list_func.randomChars(4),",
									"        \"phone\": list_func.randomPhone(),",
									"        \"phone_code\": \"+84\",",
									"        \"email\": list_func.randomChars(5) + \"@example.com\",",
									"        \"type\": \"personal\",",
									"        \"tax_id\": list_func.randNotDupe(0, 9, 9),",
									"        \"contact_person\": [",
									"            {",
									"                \"name\": contact_person_name,",
									"                \"phone_number\": list_func.randomPhone(),",
									"                \"email\": contact_person_name + \"@example.com\"",
									"            }",
									"        ],",
									"        \"custom_tag\": \"VIP\"",
									"    },",
									"    \"address\": {",
									"        \"country\": pm.environment.get(\"countries\")[list_func.getRandomInt(0, pm.environment.get(\"countries\").length - 1)],",
									"        \"province\": pm.environment.get(\"provinces\")[list_func.getRandomInt(0, pm.environment.get(\"provinces\").length - 1)],",
									"        \"district\": pm.environment.get(\"districts\")[list_func.getRandomInt(0, pm.environment.get(\"districts\").length - 1)],",
									"        \"ward\": pm.environment.get(\"wards\")[list_func.getRandomInt(0, pm.environment.get(\"wards\").length - 1)],",
									"        \"street\": pm.variables.replaceIn(\"{{$randomStreetAddress}}\"),",
									"        \"zip_code\": \"100000\"",
									"    },",
									"    \"bank_accounts\": [",
									"        {",
									"            //\"code\": list_func.randNotDupe(0, 9, 3),",
									"            \"name\": randomBank,",
									"            \"holder\": contact_person_name,",
									"            \"number\": list_func.randomNumbers(13)",
									"        },",
									"        {",
									"            //\"code\": list_func.randNotDupe(0, 9, 3),",
									"            \"name\": randomBank,",
									"            \"holder\": contact_person_name,",
									"            \"number\": list_func.randomNumbers(13)",
									"        }",
									"    ]",
									"}",
									"",
									"console.log(body)",
									"body = JSON.stringify(body);",
									"console.log(\"payload: \", body)",
									"",
									"// Concatenate the components to form the message to sign",
									"const message = `${secretKey}_${method}_${url}_${body || ''}_${timestamp}`;",
									"console.log(\"Generated message: \", message);",
									"",
									"// Generate SHA256 signature",
									"const signature = CryptoJS.SHA256(message).toString(CryptoJS.enc.Hex);",
									"console.log(\"Generated signature: \", signature);",
									"",
									"pm.environment.set(\"C-timestamp\", timestamp);",
									"",
									"// Add the signature to the headers",
									"pm.environment.set(\"C-payload\", body);",
									"pm.environment.set(\"C-customer_obj\", JSON.parse(body));",
									"pm.request.headers.add({ key: 'x-signature', value: signature });",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-client-id",
								"value": "{{C-client_id}}"
							},
							{
								"key": "x-timestamp",
								"value": "{{C-timestamp}}"
							},
							{
								"key": "x-signature",
								"value": "4d0e610ec09d39649189b32de2df0282ea7debb598db57aebec66e69cd06706d",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "User-Agent",
								"value": "PostmanRuntime/7.39.1"
							},
							{
								"key": "Accept",
								"value": "*/*"
							},
							{
								"key": "Cache-Control",
								"value": "no-cache"
							},
							{
								"key": "Postman-Token",
								"value": "6b075165-728a-4921-91b0-58d688d6dc2f",
								"disabled": true
							},
							{
								"key": "Host",
								"value": "api-stg.finan.one",
								"disabled": true
							},
							{
								"key": "Accept-Encoding",
								"value": "gzip, deflate, br"
							},
							{
								"key": "Connection",
								"value": "keep-alive"
							},
							{
								"key": "Content-Length",
								"value": "288",
								"disabled": true
							},
							{
								"key": "x-business-id",
								"value": "523",
								"type": "text",
								"disabled": true
							},
							{
								"key": "x-user-id",
								"value": "66d4ee47-1f7d-40aa-b542-0f35fddace1d",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{f1_open_url}}/api/v1/customers",
							"host": [
								"{{f1_open_url}}"
							],
							"path": [
								"api",
								"v1",
								"customers"
							]
						}
					},
					"response": []
				},
				{
					"name": "edit_customer",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase edit customer: \" + testcase);",
									"const secretKey = pm.environment.get(\"C-client_key\");",
									"console.log(\"secretKey: \" + secretKey);",
									"",
									"// function ()",
									"let today = new Date();",
									"let timestamp = Math.floor(today.getTime()/1000) + 30;",
									"console.log(\"timestamp: \" + timestamp);",
									"let customer_obj_id = pm.environment.get(\"C-customer_obj_id\");",
									"console.log(\"customer_obj_id\" + customer_obj_id);",
									"// Get method, URL, body, and timestamp",
									"const method = pm.request.method;",
									"let url = pm.request.url.toString().replace(\"{{f1_open_url}}\",\"\");",
									"url = url.replace(\"{{C-customer_obj_id}}\", customer_obj_id);",
									"let list_func = eval(pm.environment.get(\"list_common_func\"));",
									"let contact_person_name = \"[Contact] \" + list_func.randomChars(7);",
									"let bank_account = [\"Vietcombank\", \"Sacombank\", \"VPBank\", \"Techcombank\", \"BIDV\", \"MBBank\", \"ShinhanBank\"];",
									"let randomBank = bank_account[list_func.getRandomInt(0, bank_account.length - 1)];",
									"console.log(\"randomBank \" + randomBank);",
									"pm.environment.set(\"provinces\", [\"Hà Nội\", \"Hồ Chí Minh\", \"Đà Nẵng\", \"Bình Dương\", \"Cần Thơ\"]);",
									"pm.environment.set(\"countries\", [\"Việt Nam\", \"Lào\", \"Campuchia\", \"Thái Lan\", \"Singapore\"]);",
									"pm.environment.set(\"districts\", [\"Ba Đình\", \"Tây Hồ\", \"Cầu Giấy\", \"Thanh Xuân\", \"Hải Châu\"]);",
									"pm.environment.set(\"wards\", [\"Cầu Giấy\", \"Láng Thượng\", \"Đồng Tâm\", \"Quang Trung\", \"Nhân Chính\"]);",
									"//const body = pm.request.body ? pm.request.body.raw : '';",
									"// const timestamp = pm.request.headers.get('x-timestamp');",
									"let body = {",
									"    \"general_info\": {",
									"        \"name\": \"[API.EDIT]\" + \"Customer \" + list_func.randomChars(7),",
									"        \"customer_code\": \"CTM\" + list_func.randomChars(4),",
									"        \"phone\": list_func.randomPhone(),",
									"        \"phone_code\": \"+84\",",
									"        \"email\": list_func.randomChars(5) + \"@example.com\",",
									"        \"type\": \"personal\",",
									"        \"tax_id\": list_func.randNotDupe(0, 9, 9),",
									"        \"contact_person\": [",
									"            {",
									"                \"name\": contact_person_name,",
									"                \"phone_number\": list_func.randomPhone(),",
									"                \"email\": contact_person_name + \"@example.com\"",
									"            }",
									"        ],",
									"        \"custom_tag\": \"VIP\"",
									"    },",
									"    \"address\": {",
									"        \"country\": pm.environment.get(\"countries\")[list_func.getRandomInt(0, pm.environment.get(\"countries\").length - 1)],",
									"        \"province\": pm.environment.get(\"provinces\")[list_func.getRandomInt(0, pm.environment.get(\"provinces\").length - 1)],",
									"        \"district\": pm.environment.get(\"districts\")[list_func.getRandomInt(0, pm.environment.get(\"districts\").length - 1)],",
									"        \"ward\": pm.environment.get(\"wards\")[list_func.getRandomInt(0, pm.environment.get(\"wards\").length - 1)],",
									"        \"street\": pm.variables.replaceIn(\"{{$randomStreetAddress}}\"),",
									"        \"zip_code\": \"100000\"",
									"    },",
									"    \"bank_accounts\": [",
									"        {",
									"            //\"code\": list_func.randNotDupe(0, 9, 3),",
									"            \"name\": randomBank,",
									"            \"holder\": contact_person_name,",
									"            \"number\": list_func.randomNumbers(13)",
									"        },",
									"        {",
									"            //\"code\": list_func.randNotDupe(0, 9, 3),",
									"            \"name\": randomBank,",
									"            \"holder\": contact_person_name,",
									"            \"number\": list_func.randomNumbers(13)",
									"        }",
									"    ]",
									"}",
									"console.log(body)",
									"body = JSON.stringify(body);",
									"console.log(\"payload: \", body)",
									"// Concatenate the components to form the message to sign",
									"const message = `${secretKey}_${method}_${url}_${body || ''}_${timestamp}`;",
									"console.log(\"Generated message: \", message);",
									"",
									"// Generate SHA256 signature",
									"const signature = CryptoJS.SHA256(message).toString(CryptoJS.enc.Hex);",
									"console.log(\"Generated signature: \", signature);",
									"",
									"pm.environment.set(\"C-timestamp\",timestamp);",
									"pm.environment.set(\"C-payload\", body);",
									"pm.environment.set(\"C-customer_obj_edit\", JSON.parse(body));",
									"// Add the signature to the headers",
									"pm.request.headers.add({ key: 'x-signature', value: signature });",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"let jsData = pm.response.json();",
									"console.log(\"testcase after create customer: \" + testcase);",
									"",
									"if (pm.response.code == 200) {",
									"    let customer_obj_edit = pm.environment.get(\"C-customer_obj_edit\");",
									"    console.log(\"customer_obj_edit\", customer_obj_edit);",
									"    console.log(\"Response: \", jsData);",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"    pm.test(\"System code is 102001\", function () {",
									"        pm.expect(jsData.code).to.eql(102001);",
									"    });",
									"    pm.test(\"name of customer correctly! \" + customer_obj_edit.general_info.name, function () {",
									"        pm.expect(customer_obj_edit.general_info.name == jsData.data.contact_name).to.be.true;",
									"    });",
									"    pm.test(\"Phone of customer correctly! \" + customer_obj_edit.general_info.phone, function () {",
									"        pm.expect(customer_obj_edit.general_info.phone == jsData.data.phone_number).to.be.true;",
									"    });",
									"    pm.test(\"Email of customer correctly! \" + customer_obj_edit.general_info.email, function () {",
									"        pm.expect(customer_obj_edit.general_info.email == jsData.data.email).to.be.true;",
									"    });    ",
									"    pm.test(\"Customer code of customer correctly! \" + customer_obj_edit.general_info.customer_code, function () {",
									"        pm.expect(customer_obj_edit.general_info.customer_code == jsData.data.contact_code).to.be.true;",
									"    }); ",
									"    pm.test(\"Country of customer correctly! \" + customer_obj_edit.address.country, function () {",
									"        pm.expect(customer_obj_edit.address.country == jsData.data.country_name).to.be.true;",
									"    });     ",
									"    pm.test(\"Province of customer correctly! \" + customer_obj_edit.address.province, function () {",
									"        pm.expect(customer_obj_edit.address.province == jsData.data.area_level3_name).to.be.true;",
									"    }); ",
									"    pm.test(\"District of customer correctly! \" + customer_obj_edit.address.district, function () {",
									"        pm.expect(customer_obj_edit.address.district == jsData.data.area_level2_name).to.be.true;",
									"    }); ",
									"    pm.test(\"Ward of customer correctly! \" + customer_obj_edit.address.ward, function () {",
									"        pm.expect(customer_obj_edit.address.ward == jsData.data.area_level1_name).to.be.true;",
									"    });   ",
									"    pm.test(\"Address of customer correctly! \" + customer_obj_edit.address.street, function () {",
									"        pm.expect(customer_obj_edit.address.street == jsData.data.detail_address).to.be.true;",
									"    });       ",
									"    pm.test(\"Bank Account name of customer correctly! \" + customer_obj_edit.bank_accounts[0].name, function () {",
									"        pm.expect(customer_obj_edit.bank_accounts.name == jsData.data.bank_accounts.name).to.be.true;",
									"    });     ",
									"    pm.test(\"Bank Account holder of customer correctly! \" + customer_obj_edit.bank_accounts[0].holder, function () {",
									"        pm.expect(customer_obj_edit.bank_accounts.holder == jsData.data.bank_accounts.holder).to.be.true;",
									"    });   ",
									"    pm.test(\"Bank Account number of customer correctly! \" + customer_obj_edit.bank_accounts[0].number, function () {",
									"        pm.expect(customer_obj_edit.bank_accounts.number == jsData.data.bank_accounts.number).to.be.true;",
									"    }); ",
									"    let customer_obj_edit_id = jsData.data.id;",
									"    // console.log(\"jsData.data.name: \" + jsData.data.contact_name);",
									"    console.log(\"customer_obj_edit_id: \" + customer_obj_edit_id);",
									"    pm.environment.set(\"C-customer_obj_edit_id\", customer_obj_edit_id);",
									"    testcase++;",
									"    pm.environment.set(\"C-testcase\", testcase);",
									"    console.log(\"testcase after edit customer nè: \" + testcase);",
									"    pm.execution.setNextRequest(\"get_list_customer\");",
									"} else {",
									"    console.log(\"sai sai đâu đó rồi: \" + pm.response);",
									"    pm.execution.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-client-id",
								"value": "{{C-client_id}}"
							},
							{
								"key": "x-timestamp",
								"value": "{{C-timestamp}}"
							},
							{
								"key": "x-signature",
								"value": "4d0e610ec09d39649189b32de2df0282ea7debb598db57aebec66e69cd06706d",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "User-Agent",
								"value": "PostmanRuntime/7.39.1"
							},
							{
								"key": "Accept",
								"value": "*/*"
							},
							{
								"key": "Cache-Control",
								"value": "no-cache"
							},
							{
								"key": "Postman-Token",
								"value": "6b075165-728a-4921-91b0-58d688d6dc2f",
								"disabled": true
							},
							{
								"key": "Host",
								"value": "api-stg.finan.one",
								"disabled": true
							},
							{
								"key": "Accept-Encoding",
								"value": "gzip, deflate, br"
							},
							{
								"key": "Connection",
								"value": "keep-alive"
							},
							{
								"key": "Content-Length",
								"value": "288",
								"disabled": true
							},
							{
								"key": "x-business-id",
								"value": "523",
								"type": "text",
								"disabled": true
							},
							{
								"key": "x-user-id",
								"value": "66d4ee47-1f7d-40aa-b542-0f35fddace1d",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{f1_open_url}}/api/v1/customers/{{C-customer_obj_id}}",
							"host": [
								"{{f1_open_url}}"
							],
							"path": [
								"api",
								"v1",
								"customers",
								"{{C-customer_obj_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_detail_customer",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"let customer_obj_id = pm.environment.get(\"C-customer_obj_id\");",
									"let customer_obj_edit_id = pm.environment.get(\"C-customer_obj_edit_id\");",
									"",
									"// Example secret key for signing, replace with your actual secret",
									"const secretKey = pm.environment.get(\"C-client_key\");",
									"console.log(\"secretKey: \" + secretKey);",
									"",
									"// function ()",
									"let today = new Date();",
									"let timestamp = Math.floor(today.getTime()/1000) + 30;",
									"console.log(\"timestamp: \" + timestamp);",
									"",
									"// Get method, URL, body, and timestamp",
									"const method = pm.request.method;",
									"let url = pm.request.url.toString().replace(\"{{f1_open_url}}\",\"\");",
									"url = url.replace(\"{{C-customer_obj_id}}\", customer_obj_id);",
									"url = url.replace(\"{{C-customer_obj_edit_id}}\", customer_obj_edit_id);",
									"",
									"// url = url.replace(\"{{C-page_size}}\",page_size);",
									"let configs = pm.environment.get(\"C-configs\");",
									"console.log(\"config: \", configs);",
									"switch (configs.test_type){",
									"    case \"create\": ",
									"        customer_id = customer_obj_id;",
									"        pm.environment.set(\"C-customer_id\", customer_id);",
									"        url = url.replace(\"{{C-customer_id}}\", customer_id);",
									"",
									"        break;",
									"    case \"edit\":",
									"        customer_id = customer_obj_edit_id;",
									"        pm.environment.set(\"C-customer_id\", customer_id);",
									"        url = url.replace(\"{{C-customer_id}}\", customer_id);",
									"        console.log(\"customer_id\" + customer_id);",
									"       break;",
									"    default: ",
									"    console.log(\"can't parse customer_id\"); ",
									"        break;",
									"}",
									"",
									"const body = pm.request.body ? pm.request.body.raw : '';",
									"// const timestamp = pm.request.headers.get('x-timestamp');",
									"",
									"// Concatenate the components to form the message to sign",
									"const message = `${secretKey}_${method}_${url}_${body || ''}_${timestamp}`;",
									"console.log(\"Generated message: \", message);",
									"",
									"// Generate SHA256 signature",
									"const signature = CryptoJS.SHA256(message).toString(CryptoJS.enc.Hex);",
									"console.log(\"Generated signature: \", signature);",
									"",
									"pm.environment.set(\"C-timestamp\",timestamp);",
									"",
									"// Add the signature to the headers",
									"pm.request.headers.add({ key: 'x-signature', value: signature });",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"testcase get detail customer: \" + testcase);",
									"let jsData = pm.response.json();",
									"let customer_obj_id = pm.environment.get(\"C-customer_obj_id\");",
									"let configs = pm.environment.get(\"C-configs\");",
									"console.log(\"config: \", configs);",
									"if (pm.response.code == 200) {",
									"    switch (configs.test_type) {",
									"        case \"create\":",
									"            let customer_obj = pm.environment.get(\"C-customer_obj\");",
									"            pm.test(\"System code is 102000\", function () {",
									"                pm.expect(jsData.code).to.eql(102000);",
									"            });",
									"            pm.test(\"name of customer correctly! \" + customer_obj.general_info.name, function () {",
									"                pm.expect(customer_obj.general_info.name == jsData.data.name).to.be.true;",
									"            });",
									"            pm.test(\"Phone of customer correctly! \" + customer_obj.general_info.phone, function () {",
									"                pm.expect(customer_obj.general_info.phone == jsData.data.phone).to.be.true;",
									"            });",
									"            pm.test(\"Email of customer correctly! \" + customer_obj.general_info.email, function () {",
									"                pm.expect(customer_obj.general_info.email == jsData.data.email).to.be.true;",
									"            });",
									"            pm.test(\"Customer code of customer correctly! \" + customer_obj.general_info.customer_code, function () {",
									"                pm.expect(customer_obj.general_info.customer_code == jsData.data.code).to.be.true;",
									"            });",
									"            pm.test(\"Country of customer correctly! \" + customer_obj.address.country, function () {",
									"                pm.expect(customer_obj.address.country == jsData.data.address.country).to.be.true;",
									"            });",
									"            pm.test(\"Province of customer correctly! \" + customer_obj.address.province, function () {",
									"                pm.expect(customer_obj.address.province == jsData.data.address.province).to.be.true;",
									"            });",
									"            pm.test(\"District of customer correctly! \" + customer_obj.address.district, function () {",
									"                pm.expect(customer_obj.address.district == jsData.data.address.district).to.be.true;",
									"            });",
									"            pm.test(\"Ward of customer correctly! \" + customer_obj.address.ward, function () {",
									"                pm.expect(customer_obj.address.ward == jsData.data.address.ward).to.be.true;",
									"            });",
									"            pm.test(\"Address of customer correctly! \" + customer_obj.address.street, function () {",
									"                pm.expect(customer_obj.address.street == jsData.data.address.street).to.be.true;",
									"            });",
									"            pm.test(\"Bank Account name of customer correctly! \" + customer_obj.bank_accounts[0].name, function () {",
									"                pm.expect(customer_obj.bank_accounts[0].name == jsData.data.bank_accounts[0].name).to.be.true;",
									"            });",
									"            pm.test(\"Bank Account holder of customer correctly! \" + customer_obj.bank_accounts[0].holder, function () {",
									"                pm.expect(customer_obj.bank_accounts[0].holder == jsData.data.bank_accounts[0].holder).to.be.true;",
									"            });",
									"            pm.test(\"Bank Account number of customer correctly! \" + customer_obj.bank_accounts[0].number, function () {",
									"                pm.expect(customer_obj.bank_accounts[0].number == jsData.data.bank_accounts[0].number).to.be.true;",
									"            });",
									"            console.log(\"Dont test data of customer: \" + customer_obj.general_info.name);",
									"            pm.execution.setNextRequest(null);",
									"            break;",
									"        case \"edit\":",
									"            console.log(\"jsData\", jsData);",
									"            let customer_obj_edit = pm.environment.get(\"C-customer_obj_edit\");",
									"            pm.test(\"System code is 102000\", function () {",
									"                pm.expect(jsData.code).to.eql(102000);",
									"            });",
									"            pm.test(\"name of customer correctly! \" + customer_obj_edit.general_info.name, function () {",
									"                pm.expect(customer_obj_edit.general_info.name == jsData.data.name).to.be.true;",
									"            });",
									"            pm.test(\"Phone of customer correctly! \" + customer_obj_edit.general_info.phone, function () {",
									"                pm.expect(customer_obj_edit.general_info.phone == jsData.data.phone).to.be.true;",
									"            });",
									"            pm.test(\"Email of customer correctly! \" + customer_obj_edit.general_info.email, function () {",
									"                pm.expect(customer_obj_edit.general_info.email == jsData.data.email).to.be.true;",
									"            });",
									"            pm.test(\"Customer code of customer correctly! \" + customer_obj_edit.general_info.customer_code, function () {",
									"                pm.expect(customer_obj_edit.general_info.customer_code == jsData.data.code).to.be.true;",
									"            });",
									"            pm.test(\"Country of customer correctly! \" + customer_obj_edit.address.country, function () {",
									"                pm.expect(customer_obj_edit.address.country == jsData.data.address.country).to.be.true;",
									"            });",
									"            pm.test(\"Province of customer correctly! \" + customer_obj_edit.address.province, function () {",
									"                pm.expect(customer_obj_edit.address.province == jsData.data.address.province).to.be.true;",
									"            });",
									"            pm.test(\"District of customer correctly! \" + customer_obj_edit.address.district, function () {",
									"                pm.expect(customer_obj_edit.address.district == jsData.data.address.district).to.be.true;",
									"            });",
									"            pm.test(\"Ward of customer correctly! \" + customer_obj_edit.address.ward, function () {",
									"                pm.expect(customer_obj_edit.address.ward == jsData.data.address.ward).to.be.true;",
									"            });",
									"            pm.test(\"Address of customer correctly! \" + customer_obj_edit.address.street, function () {",
									"                pm.expect(customer_obj_edit.address.street == jsData.data.address.street).to.be.true;",
									"            });",
									"            pm.test(\"Bank Account name of customer correctly! \" + customer_obj_edit.bank_accounts[0].name, function () {",
									"                pm.expect(customer_obj_edit.bank_accounts[0].name == jsData.data.bank_accounts[0].name).to.be.true;",
									"            });",
									"            pm.test(\"Bank Account holder of customer correctly! \" + customer_obj_edit.bank_accounts[0].holder, function () {",
									"                pm.expect(customer_obj_edit.bank_accounts[0].holder == jsData.data.bank_accounts[0].holder).to.be.true;",
									"            });",
									"            pm.test(\"Bank Account number of customer correctly! \" + customer_obj_edit.bank_accounts[0].number, function () {",
									"                pm.expect(customer_obj_edit.bank_accounts[0].number == jsData.data.bank_accounts[0].number).to.be.true;",
									"            });",
									"            console.log(\"Done test data of customer: \" + customer_obj_edit.general_info.name);",
									"            pm.execution.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"can't get detail customer: \");",
									"    pm.execution.setNextRequest(null);",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-client-id",
								"value": "{{C-client_id}}"
							},
							{
								"key": "x-timestamp",
								"value": "{{C-timestamp}}"
							},
							{
								"key": "x-signature",
								"value": "56790cba81c472c326a048e4a56b48fb78ff72b92c17debff7bfe83855e974a6",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "User-Agent",
								"value": "PostmanRuntime/7.39.1"
							},
							{
								"key": "Accept",
								"value": "*/*"
							},
							{
								"key": "Cache-Control",
								"value": "no-cache"
							},
							{
								"key": "Postman-Token",
								"value": "6b075165-728a-4921-91b0-58d688d6dc2f",
								"disabled": true
							},
							{
								"key": "Host",
								"value": "api-stg.finan.one",
								"disabled": true
							},
							{
								"key": "Accept-Encoding",
								"value": "gzip, deflate, br"
							},
							{
								"key": "Connection",
								"value": "keep-alive"
							},
							{
								"key": "Content-Length",
								"value": "288",
								"disabled": true
							},
							{
								"key": "x-business-id",
								"value": "523",
								"type": "text",
								"disabled": true
							},
							{
								"key": "x-user-id",
								"value": "66d4ee47-1f7d-40aa-b542-0f35fddace1d",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{f1_open_url}}/api/v1/customers/{{C-customer_id}}",
							"host": [
								"{{f1_open_url}}"
							],
							"path": [
								"api",
								"v1",
								"customers",
								"{{C-customer_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete_customer",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase delete customer: \" + testcase);",
									"const secretKey = pm.environment.get(\"C-client_key\");",
									"console.log(\"secretKey: \" + secretKey);",
									"",
									"// function ()",
									"let today = new Date();",
									"let timestamp = Math.floor(today.getTime()/1000) + 30;",
									"console.log(\"timestamp: \" + timestamp);",
									"let customer_obj_id = pm.environment.get(\"C-customer_obj_id\");",
									"console.log(\"customer_obj_id\" + customer_obj_id);",
									"// Get method, URL, body, and timestamp",
									"const method = pm.request.method;",
									"let url = pm.request.url.toString().replace(\"{{f1_open_url}}\",\"\");",
									"url = url.replace(\"{{C-customer_obj_id}}\", customer_obj_id);",
									"const body = pm.request.body ? pm.request.body.raw : '';",
									"// const timestamp = pm.request.headers.get('x-timestamp');",
									"// Concatenate the components to form the message to sign",
									"const message = `${secretKey}_${method}_${url}_${body || ''}_${timestamp}`;",
									"console.log(\"Generated message: \", message);",
									"",
									"// Generate SHA256 signature",
									"const signature = CryptoJS.SHA256(message).toString(CryptoJS.enc.Hex);",
									"console.log(\"Generated signature: \", signature);",
									"",
									"pm.environment.set(\"C-timestamp\",timestamp);",
									"// Add the signature to the headers",
									"pm.request.headers.add({ key: 'x-signature', value: signature });",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code == 200) {",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    testcase++;",
									"    pm.environment.set(\"C-testcase\", testcase);",
									"    console.log(\"testcase after delete customer: \" + testcase);",
									"    pm.test(\"Successfull to delete contact & status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"    pm.execution.setNextRequest(\"get_list_customer\");",
									"}else{",
									"    console.log(\"fail to delete customer, try again\", pm.response);",
									"    pm.execution.setNextRequest(null);",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-client-id",
								"value": "{{C-client_id}}"
							},
							{
								"key": "x-timestamp",
								"value": "{{C-timestamp}}"
							},
							{
								"key": "x-signature",
								"value": "56790cba81c472c326a048e4a56b48fb78ff72b92c17debff7bfe83855e974a6",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "User-Agent",
								"value": "PostmanRuntime/7.39.1"
							},
							{
								"key": "Accept",
								"value": "*/*"
							},
							{
								"key": "Cache-Control",
								"value": "no-cache"
							},
							{
								"key": "Postman-Token",
								"value": "6b075165-728a-4921-91b0-58d688d6dc2f",
								"disabled": true
							},
							{
								"key": "Host",
								"value": "api-stg.finan.one",
								"disabled": true
							},
							{
								"key": "Accept-Encoding",
								"value": "gzip, deflate, br"
							},
							{
								"key": "Connection",
								"value": "keep-alive"
							},
							{
								"key": "Content-Length",
								"value": "288",
								"disabled": true
							},
							{
								"key": "x-business-id",
								"value": "523",
								"type": "text",
								"disabled": true
							},
							{
								"key": "x-user-id",
								"value": "66d4ee47-1f7d-40aa-b542-0f35fddace1d",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{f1_open_url}}/api/v1/customers/{{C-customer_obj_id}}",
							"host": [
								"{{f1_open_url}}"
							],
							"path": [
								"api",
								"v1",
								"customers",
								"{{C-customer_obj_id}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"let configs = {",
					"    \"test_type\" : \"delete\", //\"create\", \"delete\" , \"edit\" ",
					"    \"page_size\" : 50,",
					"    \"limit_page\":5,",
					"    \"timeout\":12000, ",
					"}",
					"",
					"pm.environment.set(\"C-configs\",configs);",
					"console.log(\"configs: \",configs);"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"// ====================================== parser cURL",
					"function parseCURL(request_api){",
					"    let curl = \"\";",
					"    switch(request_api.method){",
					"        case \"PUT\":",
					"            curl = \"curl --location --request PUT \";",
					"            break;",
					"        case \"PATCH\":",
					"            curl = \"curl --location --request PATCH \";",
					"            break;",
					"        case \"DELETE\":",
					"            curl = \"curl --location --request DELETE \";",
					"            break;",
					"        default:",
					"            curl = \"curl --location \";",
					"            break;",
					"    }",
					"    curl += \"'\" + request_api.url.protocol + \"://\"",
					"    // host",
					"    for(let i in request_api.url.host){",
					"        if(i >= request_api.url.host.length - 1){",
					"            curl += request_api.url.host[i] + \"/\";",
					"        } else {",
					"            curl += request_api.url.host[i] + \".\";",
					"        }",
					"    }",
					"    // path",
					"    for(let i in request_api.url.path){",
					"        if(i >= request_api.url.path.length - 1){",
					"            curl += request_api.url.path[i];",
					"        } else {",
					"            curl += request_api.url.path[i] + \"/\";",
					"        }",
					"    }",
					"    // query (if have)",
					"    if(\"query\" in request_api.url){",
					"        if(request_api.url.length > 0){",
					"            curl += \"? \";",
					"            for(let i in request_api.url.query){",
					"                if(i >= request_api.url.query.length - 1){",
					"                    curl += request_api.url.query[i].key + \"=\" + request_api.url.query[i].value + \"' \";",
					"                } else {",
					"                    curl += request_api.url.query[i].key + \"=\" + request_api.url.query[i].value + \"&\";",
					"                }",
					"            }",
					"        } else {",
					"            curl += \"' \";",
					"        }",
					"    } else {",
					"        curl += \"' \";",
					"    }",
					"    // header",
					"    for(let i in request_api.header){",
					"        if(i >= request_api.header.length - 1){",
					"            curl += \"--header '\" + request_api.header[i].key + \": \" + request_api.header[i].value + \"'\";",
					"        } else {",
					"            curl += \"--header '\" + request_api.header[i].key + \": \" + request_api.header[i].value + \"' \";",
					"        }",
					"    }",
					"    switch(request_api.method){",
					"        case \"POST\":",
					"            curl += \" --data '\" + request_api.body.raw + \"'\"",
					"            break;",
					"        case \"PUT\": case \"PATCH\":",
					"            curl += \" --data-raw '\" + request_api.body.raw + \"'\"",
					"            break;",
					"        default:",
					"            break;",
					"    }",
					"    console.log(curl);",
					"    return curl;",
					"}",
					"const request_api = pm.request.toJSON();",
					"parseCURL(request_api);"
				]
			}
		}
	]
}