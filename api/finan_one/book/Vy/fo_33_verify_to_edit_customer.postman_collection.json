{
	"info": {
		"_postman_id": "3fbb886e-959d-454a-98c7-0a4d00d9cf00",
		"name": "fo_33_verify_to_edit_customer",
		"description": "1. authen\n    \n2. get data\n    \n    1. location tree\n        \n    2. contact - get list contact\n        \n3. Edit\n    \n    1. unhappycase: edit null data\n        \n    2. unhappycase: edit with wrong format mail\n        \n    3. unhappycase: edit with wrong format phone number\n        \n    4. Happycase: valid data\n        \n4. check data\n    \n    1. contact/ get list contact - matching data\n        \n    2. contact/ get contact detail - matching data",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "32564955"
	},
	"item": [
		{
			"name": "authen",
			"item": [
				{
					"name": "login",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// ============================= random characters",
									"function randomChars(length) {",
									"    var result           = '';",
									"    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
									"    var charactersLength = characters.length;",
									"    for ( var i = 0; i < length; i++ ) {",
									"      result += characters.charAt(Math.floor(Math.random() * ",
									" charactersLength));",
									"   }",
									"   return result;",
									"}",
									"",
									"let testcase = 1;",
									"console.log(\"-------- Start Testsuite 112 --------\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let platform = [\"desktop-web\",\"mobile-web\",\"mobile-app\"];",
									"let configs = pm.environment.get(\"C-configs\");",
									"let payload;",
									"if(configs.is_use_email){",
									"    payload = {",
									"        \"app_version\": \"1.0.0\",",
									"        \"device_info\": {",
									"            \"id\": randomChars(7) + \"-\" + randomChars(4) + \"-\" + randomChars(4) + \"-\" + randomChars(4) + \"-\" + randomChars(12),",
									"            \"name\": \"IP name\",",
									"            \"os\": \"iphone\"",
									"        },",
									"        \"email\": pm.environment.get(\"SER-email\"), // pm.environment.get(\"SER-email\")",
									"        \"encrypted_password\": pm.environment.get(\"SER-password\"),",
									"        \"phone_number\": \"\",",
									"        \"platform_key\": platform[0]",
									"    }",
									"} else {",
									"    payload = {",
									"        \"app_version\": \"1.0.0\",",
									"        \"device_info\": {",
									"            \"id\": randomChars(7) + \"-\" + randomChars(4) + \"-\" + randomChars(4) + \"-\" + randomChars(4) + \"-\" + randomChars(12),",
									"            \"name\": \"IP name\",",
									"            \"os\": \"iphone\"",
									"        },",
									"        \"email\":\"\", // pm.environment.get(\"SER-email\")",
									"        \"encrypted_password\": pm.environment.get(\"SER-password\"),",
									"        \"phone_number\": pm.environment.get(\"SER-phone_number\"),",
									"        \"platform_key\": platform[0]",
									"    }",
									"}",
									"",
									"console.log(\"payload: \",payload);",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));",
									"pm.environment.set(\"C-testcase\",testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    pm.test(\"System code is 102000\", function () {",
									"        pm.expect(jsData.code).to.eql(102000);",
									"    });",
									"",
									"    if(jsData.code == 102000){",
									"        let userToken = null;",
									"        try {",
									"            userToken = jsData.data.access_token;",
									"            pm.environment.set(\"C-userToken\",userToken);",
									"        } catch {",
									"            console.log(\"Can't get userToken\");",
									"        }",
									"",
									"        pm.test(\"Got userToken\", function () {",
									"            pm.expect(userToken != null).to.be.true;",
									"        });",
									"",
									"        let userInfo = jsData.data.user_info;",
									"",
									"        // show log",
									"        console.log(\"userInfo:\",JSON.stringify(userInfo));",
									"        pm.environment.set(\"C-userInfo\",userInfo);",
									"",
									"        postman.setNextRequest(\"verify_token_to_get_business\");",
									"    } else {",
									"        console.log(\"Can't get Token, end test\",jsData);",
									"        postman.setNextRequest(null);",
									"    }",
									"} else {",
									"    console.log(\"Can't login new account, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-user/api/v1/auth/login",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-user",
								"api",
								"v1",
								"auth",
								"login"
							]
						},
						"description": "Login User"
					},
					"response": []
				},
				{
					"name": "verify_token_to_get_business",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// verify token to get business",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = JSON.parse(responseBody);",
									"if(pm.response.code == 200 && jsData.code == 102000){",
									"    const jsData = pm.response.json();",
									"    pm.environment.set(\"C-user_id\",jsData.data.user_id);",
									"",
									"    let business_id = jsData.data.headers[\"x-business-id\"];",
									"    console.log(\"business_id: \" + business_id);",
									"    pm.environment.set(\"C-business_id\",business_id);",
									"",
									"    postman.setNextRequest(\"get_current_business\");",
									"} else {",
									"    console.log(\"Can't check token to get business_id, end test\");",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"token\": \"{{C-userToken}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-user/api/v1/auth/verify-token",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-user",
								"api",
								"v1",
								"auth",
								"verify-token"
							]
						},
						"description": "Login User"
					},
					"response": []
				},
				{
					"name": "get_current_business",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ============================= random number between min and max",
									"function getRandomInt(min, max) {",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    // console.log(\"Current business info: \", jsData.data);",
									"    let payment_method = null;",
									"    let list_payment_method = [];",
									"    let configs = pm.environment.get(\"C-configs\");",
									"    let test_payment_method = configs.test_payment_method;",
									"    try {",
									"        switch(test_payment_method){",
									"            case \"viet_qr_pro_mb\":",
									"                for(let i in jsData.data.list_payment_method){",
									"                    if(jsData.data.list_payment_method[i].key == test_payment_method && jsData.data.list_payment_method[i].bank_account.account_number.includes(\"VQRQ\")){ ",
									"                        // payment_method = jsData.data.list_payment_method[i];",
									"                        // break;",
									"                        list_payment_method[list_payment_method.length] = jsData.data.list_payment_method[i];",
									"                    }",
									"                }",
									"                payment_method = list_payment_method[getRandomInt(0,list_payment_method.length -1)];",
									"                break;",
									"            case \"va_galaxy\":",
									"                for(let i in jsData.data.list_payment_method){",
									"                    if(jsData.data.list_payment_method[i].bank_account.account_number.includes(\"SBB\")){ ",
									"                        list_payment_method[list_payment_method.length] = jsData.data.list_payment_method[i];",
									"                    }",
									"                }",
									"                payment_method = list_payment_method[getRandomInt(0,list_payment_method.length -1)];",
									"                break;",
									"            case \"bank_transfer\":",
									"                for(let i in jsData.data.list_payment_method){",
									"                    if(jsData.data.list_payment_method[i].key == test_payment_method){ ",
									"                        list_payment_method[list_payment_method.length] = jsData.data.list_payment_method[i];",
									"                    }",
									"                }",
									"                payment_method = list_payment_method[getRandomInt(0,list_payment_method.length -1)];",
									"                break;",
									"            default:",
									"                console.log(\"Missing flow\");",
									"                break;",
									"        }",
									"    } catch {",
									"        console.log(\"Can't get branch id\");",
									"    }",
									"    pm.environment.set(\"C-viet_qr_payment\",payment_method);",
									"",
									"    let branch_id = null, filter_branch_id = null, list_branch = [];",
									"    try {",
									"        list_branch = jsData.data.current_business.list_branch;",
									"        branch_id = list_branch[getRandomInt(0,list_branch.length - 1)].id;",
									"        if(configs.is_the_same_branch){",
									"            filter_branch_id = branch_id;",
									"        } else {",
									"            while(1){",
									"                filter_branch_id = list_branch[getRandomInt(0,list_branch.length - 1)].id;",
									"",
									"                if(branch_id != filter_branch_id) break;",
									"            }",
									"            // for(let i in list_branch){",
									"            //     if(list_branch[i].id != branch_id){",
									"            //         filter_branch_id = list_branch[i].id;",
									"            //         break;",
									"            //     }",
									"            // }",
									"        }",
									"        console.log(\"branch_id: \" + branch_id);",
									"        console.log(\"filter_branch_id: \" + filter_branch_id);",
									"        pm.environment.set(\"C-branch_id\",branch_id);",
									"        pm.environment.set(\"C-filter_branch_id\",filter_branch_id);",
									"    } catch {",
									"        console.log(\"Can't get branch id\");",
									"    }",
									"",
									"    pm.test(\"Got all branch \" + list_branch.length, function () {",
									"        pm.expect(list_branch != null).to.be.true;",
									"    });",
									"    pm.environment.set(\"C-list_branch\",list_branch);",
									"",
									"    pm.test(\"Got branch id \" + branch_id, function () {",
									"        pm.expect(branch_id != null).to.be.true;",
									"    });",
									"    ",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    testcase++;",
									"    pm.environment.set(\"C-testcase\",testcase);",
									"    postman.setNextRequest(\"get_location\");",
									"} else {",
									"    console.log(\"Can't get business detail, end test\", jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-business/api/v1/business/get-current",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-business",
								"api",
								"v1",
								"business",
								"get-current"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "contact",
			"item": [
				{
					"name": "get_list_contact",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase is: \"+ testcase);",
									"",
									"let page = pm.environment.get(\"C-page\");",
									"",
									"if(!page){",
									"    page = 1;",
									"    pm.environment.set(\"C-page\", page)",
									"",
									"    let page_size = 5;",
									"    pm.environment.set(\"C-page_size\", page_size);",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"function getRandomInt(min, max) {",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"let jsData = pm.response.json();",
									"if(pm.response.code == 200 && jsData.code == 102000){",
									"    let page = pm.environment.get(\"C-page\");",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let total_pages  = jsData.meta.total_pages;",
									"    let list_contact, list_old_contact;",
									"",
									"switch(testcase){",
									"    case 2: ",
									"        list_contact = pm.environment.get(\"C-list_contact\");",
									"        if(!list_contact){",
									"            list_contact = [];",
									"            pm.environment.set(\"C-list_contact\", list_contact);",
									"        }",
									"        break;",
									"    case 4:",
									"        list_old_contact = pm.environment.get(\"C-list_old_contact\");",
									"        if(!list_old_contact){",
									"            list_old_contact = pm.environment.get(\"C-list_contact\");",
									"            pm.environment.unset(\"C-list_contact\");",
									"            pm.environment.set(\"C-list_old_contact\", list_old_contact)",
									"        }",
									"        list_contact = pm.environment.get(\"C-list_contact\");",
									"        if(!list_contact){",
									"            list_contact = [];     ",
									"        }",
									"        break;",
									"    default:",
									"        console.log(\"Sai sai ở đâu đó rồi: \", jsData);     ",
									"        break;",
									"   }",
									"   for(i in jsData.data){",
									"        if(jsData.data[i].contact_name.includes(\"[API]\")){",
									"            list_contact[list_contact.length] = {",
									"                \"name\" : jsData.data[i].contact_name,",
									"                \"id\" : jsData.data[i].id,",
									"                \"phone_number\" : jsData.data[i].phone_number,",
									"                \"email\" : jsData.data[i].email,",
									"                \"gender\" : jsData.data[i].gender,",
									"                \"loc_lvl1\": jsData.data[i].area_level1_name,",
									"                \"loc_lvl2\": jsData.data[i].area_level2_name,",
									"                \"loc_lvl3\": jsData.data[i].area_level3_name",
									"            }",
									"        }    ",
									"    }",
									"    pm.environment.set(\"C-list_contact\", list_contact);",
									"    if(page >= total_pages){",
									"        pm.environment.unset(\"C-page\");",
									"        pm.environment.unset(\"C-page_size\");",
									"        switch(testcase){",
									"            case 2: ",
									"                console.log(\"debug case 4\");",
									"                pm.test(\"Total contact: \" + list_contact.length, function () {",
									"                    pm.expect(list_contact.length > 0).to.be.true;",
									"                });",
									"                if(list_contact.length > 0){",
									"                    let get_contact_edit = list_contact[getRandomInt(0, list_contact.length -1)]// lấy thằng này đi edit ",
									"                    let contact_id = get_contact_edit.id;",
									"                    let contact_name = get_contact_edit.name;",
									"                    pm.environment.set(\"C-contact_name\", contact_name);",
									"                    pm.environment.set(\"C-contact_id\", contact_id);",
									"                    pm.environment.set(\"get_contact_edit\", get_contact_edit);",
									"                    testcase ++",
									"                    pm.environment.set(\"C-testcase\",testcase);",
									"                    postman.setNextRequest(\"edit_contact\");",
									"                }else{",
									"                    console.log(\"Must create customer first\", jsData);",
									"                    postman.setNextRequest(null);",
									"                }",
									"                break;",
									"            case 4: ",
									"                let list_contact_obj = pm.environment.get(\"C-list_contact_obj\");",
									"                let contact_id = pm.environment.get(\"C-contact_id\");",
									"                let contact_name = pm.environment.get(\"C-contact_name\");",
									"                pm.test(\"List contact not increase or decrease | actual total contact after edit: \" + list_contact.length, function () {",
									"                    pm.expect(list_contact.length == list_old_contact.length).to.be.true;",
									"                });            ",
									"                for(i in list_contact){",
									"                    if (list_contact[i].id == contact_id){",
									"                        console.log(\"đã tìm thấy \"+ list_contact[i].name);",
									"                        pm.test(\"At list contact, check contact name | \" + list_contact_obj.contact_name, function () {",
									"                            pm.expect(list_contact_obj.contact_name == list_contact[i].name).to.be.true;",
									"                        });",
									"                        pm.test(\"At list contact, check contact phone | \" + list_contact_obj.phone_number, function () {",
									"                            pm.expect(list_contact_obj.phone_number == list_contact[i].phone_number).to.be.true;",
									"                        });",
									"                        pm.test(\"At list contact, check contact email | \" + list_contact_obj.email, function () {",
									"                            pm.expect(list_contact_obj.email == list_contact[i].email).to.be.true;",
									"                        });",
									"                        pm.test(\"At list contact, check contact city | \" + list_contact_obj.area_level1_name, function () {",
									"                            pm.expect(list_contact_obj.area_level1_name == list_contact[i].loc_lvl1).to.be.true;",
									"                        });",
									"                        pm.test(\"At list contact, check contact district | \" + list_contact_obj.area_level2_name, function () {",
									"                            pm.expect(list_contact_obj.area_level2_name == list_contact[i].loc_lvl2).to.be.true;",
									"                        });",
									"                        pm.test(\"At list contact, check contact ward | \" + list_contact_obj.area_level3_name, function () {",
									"                            pm.expect(list_contact_obj.area_level3_name == list_contact[i].loc_lvl3).to.be.true;",
									"                        });",
									"                        postman.setNextRequest(\"get_detail_contact\");",
									"                    }",
									"                }",
									"                break;",
									"            default:",
									"                console.log(\"missing flow\");",
									"                postman.setNextRequest(null)",
									"                break;",
									"            }",
									"    }else{",
									"        page++;",
									"        pm.environment.set(\"C-page\", page);",
									"        postman.setNextRequest(\"get_list_contact\");",
									"    }",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "accept-language",
								"value": "en-US,en;q=0.9,vi-VN;q=0.8,vi;q=0.7"
							},
							{
								"key": "authorization",
								"value": "Bearer {{C-userToken}}"
							},
							{
								"key": "origin",
								"value": "https://book-stg.finan.one"
							},
							{
								"key": "priority",
								"value": "u=1, i"
							},
							{
								"key": "referer",
								"value": "https://book-stg.finan.one/"
							},
							{
								"key": "sec-ch-ua",
								"value": "\"Not)A;Brand\";v=\"99\", \"Google Chrome\";v=\"127\", \"Chromium\";v=\"127\""
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?0"
							},
							{
								"key": "sec-ch-ua-platform",
								"value": "\"macOS\""
							},
							{
								"key": "sec-fetch-dest",
								"value": "empty"
							},
							{
								"key": "sec-fetch-mode",
								"value": "cors"
							},
							{
								"key": "sec-fetch-site",
								"value": "same-site"
							},
							{
								"key": "user-agent",
								"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.0.0 Safari/537.36"
							},
							{
								"key": "x-locale",
								"value": "vi"
							},
							{
								"key": "x-location-timezone",
								"value": "Asia/Ho_Chi_Minh"
							},
							{
								"key": "x-platform-key",
								"value": "desktop-web"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-business/api/v1/contact/get-list?page={{C-page}}&page_size={{C-page_size}}&business_id={{C-business_id}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-business",
								"api",
								"v1",
								"contact",
								"get-list"
							],
							"query": [
								{
									"key": "page",
									"value": "{{C-page}}"
								},
								{
									"key": "page_size",
									"value": "{{C-page_size}}"
								},
								{
									"key": "sort",
									"value": "",
									"disabled": true
								},
								{
									"key": "search",
									"value": "",
									"disabled": true
								},
								{
									"key": "business_id",
									"value": "{{C-business_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "edit_contact",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// random number between min and max",
									"function getRandomInt(min, max) {",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"",
									"// console.log(\"view detail contact: \" + contact_id);",
									"",
									"//random characters",
									"function randomChars(length) {",
									"    var result = '';",
									"    var characters = 'HGFJHFHHGFYTFUYGIUAHHJGUYKGKUI8972492';",
									"    var charactersLength = characters.length;",
									"    for (var i = 0; i < length; i++) {",
									"        result += characters.charAt(Math.floor(Math.random() *",
									"            charactersLength));",
									"    }",
									"    return result;",
									"}",
									"",
									"",
									"// ============================= random phone number",
									"let randomPhone = () => {",
									"    let phoneNumber = \"\";",
									"    let viettel = ['86', '96', '97', '98', '32', '33', '34', '35', '36', '37', '38', '39'];",
									"    let vina = ['88', '81', '82', '83', '84', '85', '91', '94'];",
									"    let mobi = ['89', '90', '93', '70', '76', '77', '78', '79'];",
									"    let vinamobile = ['92', '56', '58'];",
									"    let gmobile = ['99', '59'];",
									"    let itelecom = ['87'];",
									"    let phoneFormat = ['0'];//'+84','0'",
									"    phoneNumber += phoneFormat[getRandomInt(0, phoneFormat.length - 1)];",
									"    let allNet = [...viettel, ...vina, ...mobi, ...vinamobile, ...gmobile, ...itelecom];",
									"    phoneNumber += allNet[getRandomInt(0, allNet.length)];",
									"    for (let i = 0; i < 7; i++) {",
									"        phoneNumber += getRandomInt(0, 9);",
									"    }",
									"    return phoneNumber;",
									"}",
									"// function randomGender() {",
									"//     const genders = [\"male\", \"female\"];",
									"//     return genders[Math.floor(Math.random() * genders.length)];",
									"// }",
									"",
									"// // Gọi hàm để sinh ra giới tính ngẫu nhiên",
									"// let getGender = randomGender();",
									"",
									"// // Lưu trữ giới tính vào biến toàn cục để sử dụng trong request",
									"// pm.globals.set(\"randomGender\", getGender);",
									"",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"testcase edit contact is \"+ testcase);",
									"let case_ = pm.environment.get(\"C-case_\");",
									"if(!case_){",
									"    case_ = 1;",
									"    pm.environment.set(\"C-case_\",case_);",
									"}",
									"let city = pm.environment.get(\"C-city\");",
									"let district = pm.environment.get(\"C-district\");",
									"let ward = pm.environment.get(\"C-ward\");",
									"let type_of_customer = [\"personal\", \"company\"];",
									"console.log(\"city \" + city + \" district \" + district + \" ward \"+ ward);",
									"",
									"let name, phone_number, loc_lv1, loc_lv2, loc_lv3, gender, email;",
									"switch(case_){",
									"    case 1: // edit null data ",
									"        console.log(\"unhappycase: edit null data \")",
									"        name = \"\";",
									"        phone_number = \"\";",
									"        loc_lv1 = \"\";",
									"        loc_lv2 = \"\";",
									"        loc_lv3 = \"\";",
									"        email = \"\";",
									"        break;",
									"",
									"    case 2: ",
									"        console.log(\"unhappycase: edit with wrong format email\")",
									"        name = \"[API][Edit] Khách hàng sai format email \" + randomChars(5);",
									"        phone_number = randomPhone();",
									"        loc_lv1 = city;",
									"        loc_lv2 = district;",
									"        loc_lv3 = ward;",
									"        email = randomChars(4);",
									"        break;",
									"    ",
									"    case 3: ",
									"        console.log(\"unhappycase: edit with wrong format phone number \")",
									"        name = \"[API][Edit] Khách hàng sai format phone \" + randomChars(5);",
									"        phone_number = randomChars(5);",
									"        loc_lv1 = city;",
									"        loc_lv2 = district;",
									"        loc_lv3 = ward;",
									"        email = randomChars(5) +\"@finanteam.testinator.com\";",
									"        break;",
									"    ",
									"    case 4:",
									"        console.log(\"Happycase:valid data \")",
									"        name = \"[API][Edit] Khách hàng \" + randomChars(5);",
									"        phone_number = randomPhone();",
									"        loc_lv1 = city;",
									"        loc_lv2 = district;",
									"        loc_lv3 = ward;",
									"        email = randomChars(5) +\"@finanteam.testinator.com\";",
									"        break;    ",
									"    ",
									"    default:",
									"        console.log(\"Missing flow\");",
									"        break;",
									"}",
									"let payload = {",
									"    \"area_level1_name\" : loc_lv1,",
									"    \"area_level2_name\": loc_lv2,",
									"    \"area_level3_name\" : loc_lv3,",
									"    \"avatar\" : \"\",",
									"    \"birthday\" : \"\",",
									"    \"contact_name\" : name,",
									"    \"detail_address\" : \"\",",
									"    \"invoice_email_template_id\" :  null,",
									"    \"payment_email_template_id\" : null,",
									"    \"tax_code\" : \"\",",
									"    \"type\" : type_of_customer[getRandomInt(0,type_of_customer.length -1)],",
									"    \"invoice_config\" : {",
									"        \"due_date_config\": {",
									"            \"after_days_issue_date\": 0,",
									"            \"on_invoice_issue_date\": true",
									"        }",
									"    },",
									"    \"payment_info\" : [],",
									"    \"email\" : email,",
									"    \"phone_number\" : phone_number",
									"}",
									"pm.environment.set(\"C-payload\", JSON.stringify(payload));",
									"pm.environment.set(\"C-list_contact_obj\", payload);//payload update",
									"console.log(\"payload: \", payload);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"let jsData = pm.response.json();",
									"let case_ = pm.environment.get(\"C-case_\")",
									"let list_contact_obj = pm.environment.get(\"C-list_contact_obj\")",
									"",
									"switch(case_){",
									"    case 1: ",
									"        pm.test(\"Edit should be fail, all field are null!, status code must be 400\", function () {",
									"            pm.response.to.have.status(400);",
									"        });",
									"        case_ ++ ",
									"        pm.environment.set(\"C-case_\", case_);",
									"        postman.setNextRequest(\"edit_contact\");",
									"        break;",
									"    case 2: ",
									"        pm.test(\"Edit should be fail, email has wrong format!\", function () {",
									"            pm.response.to.have.status(400);",
									"        });",
									"        pm.test(\"Edit fail, email has wrong format\", function () {",
									"            pm.expect(jsData.message.content.includes(\"code=104000 params=[]: email must email \"));",
									"        });",
									"        console.log(\"Case 2: jsData \", jsData)",
									"        case_ ++ ",
									"        pm.environment.set(\"C-case_\", case_);",
									"        postman.setNextRequest(\"edit_contact\");",
									"        break;",
									"    case 3: ",
									"        pm.test(\"Edit should be fail, phone number has wrong format, status code must be 400!\", function () {",
									"            pm.response.to.have.status(400);",
									"        });",
									"        pm.test(\"Edit fail, phone number has wrong format\", function () {",
									"            pm.expect(jsData.message.content.includes(\"code=104000 params=[]:  phone_number must phone_number\"));",
									"        });",
									"        case_ ++ ",
									"        pm.environment.set(\"C-case_\", case_);",
									"        postman.setNextRequest(\"edit_contact\");",
									"        break;",
									"    case 4: ",
									"        if(pm.response.code == 200 && jsData.code == 102000) {",
									"            pm.test(\"Edit sucessfull!\", function () {",
									"                pm.response.to.have.status(200);",
									"            });",
									"            pm.test(\"Edited successfully! Let's check CONTACT NAME \" + list_contact_obj.contact_name, function () {",
									"                pm.expect(list_contact_obj.contact_name == jsData.data.contact_name).to.be.true;",
									"            });",
									"            pm.test(\"Edited successfully! Let's check CONTACT EMAIL \" + list_contact_obj.email, function () {",
									"                pm.expect(list_contact_obj.email == jsData.data.email).to.be.true;",
									"            });",
									"            pm.test(\"Edited successfully! Let's check CONTACT PHONE \" + list_contact_obj.phone_number, function () {",
									"                pm.expect(list_contact_obj.phone_number == jsData.data.phone_number).to.be.true;",
									"            });",
									"            testcase ++",
									"            console.log(\"Case 4: jsData \", jsData)",
									"            pm.environment.set(\"C-testcase\",testcase);",
									"            postman.setNextRequest(\"get_list_contact\");",
									"        }else{",
									"            console.log(\"edit contact fail with happycase \" , jsData);",
									"            postman.setNextRequest(null);",
									"        }",
									"        break;",
									"    default:",
									"        console.log(\"missing flow, end test\");",
									"        break;",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{C-userToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "accept",
								"value": "*/*",
								"disabled": true
							},
							{
								"key": "accept-language",
								"value": "en-US,en;q=0.9,vi-VN;q=0.8,vi;q=0.7"
							},
							{
								"key": "authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJGTyBVc2VyIiwic3ViIjoiOTdkZjMzNTAtNzVjOS00ZTM4LTk1ZjMtNGEyMjQzZTc1MzMyIiwiYXVkIjpbIkZPIFVzZXIiXSwiZXhwIjoxNzI2OTc4OTcxLCJuYmYiOjE3MjQzODY5NzEsImlhdCI6MTcyNDM4Njk3MSwib3JnX2lkIjoiMiIsImJ1c2luZXNzX2lkIjoiMiIsImRldmljZV9pZCI6ImUzNjBhOTczLTdjYjEtNDk2ZS1iYzU1LWJhZTBmYmFkZmJiNCIsInBsYXRmb3JtX2tleSI6IndlYi1ib29rIiwidXNlcl9pZCI6Ijk3ZGYzMzUwLTc1YzktNGUzOC05NWYzLTRhMjI0M2U3NTMzMiIsImxvZ2luX21ldGhvZCI6InBhc3N3b3JkIiwiYXBwX3ZlcnNpb24iOiIxLjEuMSIsInNlY3VyaXR5X3JvbGUiOjAsInJlZnJlc2hfdG9rZW5faWQiOiJhMzUwMmM5ZC01YmI0LTRjODAtOGQ2ZS04MGUwNzI5MTJhY2MifQ.2C85kcTTzPeGLpLRDDzdM2GAVkX4No3246e-ibagK7Y",
								"disabled": true
							},
							{
								"key": "content-type",
								"value": "application/json"
							},
							{
								"key": "origin",
								"value": "https://book.finan.one"
							},
							{
								"key": "priority",
								"value": "u=1, i"
							},
							{
								"key": "referer",
								"value": "https://book.finan.one/"
							},
							{
								"key": "sec-ch-ua",
								"value": "\"Not)A;Brand\";v=\"99\", \"Google Chrome\";v=\"127\", \"Chromium\";v=\"127\""
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?0"
							},
							{
								"key": "sec-ch-ua-platform",
								"value": "\"macOS\""
							},
							{
								"key": "sec-fetch-dest",
								"value": "empty"
							},
							{
								"key": "sec-fetch-mode",
								"value": "cors"
							},
							{
								"key": "sec-fetch-site",
								"value": "same-site"
							},
							{
								"key": "user-agent",
								"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.0.0 Safari/537.36"
							},
							{
								"key": "x-locale",
								"value": "vi"
							},
							{
								"key": "x-location-timezone",
								"value": "Asia/Ho_Chi_Minh"
							},
							{
								"key": "x-platform-key",
								"value": "desktop-web"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-business/api/v1/contact/update/{{C-contact_id}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-business",
								"api",
								"v1",
								"contact",
								"update",
								"{{C-contact_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_detail_contact",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase get detail contact is: \"+ testcase);",
									"",
									"let list_contact_obj = pm.environment.get(\"C-list_contact_obj\");",
									"let contact_id = pm.environment.get(\"C-contact_id\");",
									"console.log(\"contact obj: \",  list_contact_obj);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"let jsData = pm.response.json();",
									"",
									"if(pm.response.code == 200){",
									"    let list_contact_obj = pm.environment.get(\"C-list_contact_obj\");",
									"    ",
									"    pm.test(\"At contact detail, check contact name | \" + list_contact_obj.contact_name, function () {",
									"        pm.expect(list_contact_obj.contact_name == jsData.data.contact_name).to.be.true;",
									"    });",
									"    pm.test(\"At contact detail, check contact phone | \" + list_contact_obj.phone_number, function () {",
									"        pm.expect(list_contact_obj.phone_number == jsData.data.phone_number).to.be.true;",
									"    });",
									"     pm.test(\"At contact detail, check contact email | \" + list_contact_obj.email, function () {",
									"        pm.expect(list_contact_obj.email == jsData.data.email).to.be.true;",
									"    });",
									"    pm.test(\"At contact detail, check contact city | \" + list_contact_obj.area_level1_name, function () {",
									"        pm.expect(list_contact_obj.area_level1_name == jsData.data.area_level1_name).to.be.true;",
									"    });",
									"    pm.test(\"At contact detail, check contact district | \" + list_contact_obj.area_level2_name, function () {",
									"        pm.expect(list_contact_obj.area_level2_name == jsData.data.area_level2_name).to.be.true;",
									"    });",
									"    pm.test(\"At contact detail, check contact ward | \" + list_contact_obj.area_level3_name, function () {",
									"        pm.expect(list_contact_obj.area_level3_name == jsData.data.area_level3_name).to.be.true;",
									"    });",
									"    console.log(\"<3 <3 <3 pé Vy end test edit contact <3 <3 <3\");",
									"    postman.setNextRequest(null);",
									"}else{",
									"    console.log(\"sai sai đâu đó roài \"+ jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{C-userToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "accept-language",
								"value": "en-US,en;q=0.9,vi-VN;q=0.8,vi;q=0.7"
							},
							{
								"key": "authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJGTyBVc2VyIiwic3ViIjoiNTI1MTQ1MWItZTFkNi00YTgzLWJhZjUtNWJmODM0MDM0YzUzIiwiYXVkIjpbIkZPIFVzZXIiXSwiZXhwIjoxNzI3NDA5ODM2LCJuYmYiOjE3MjQ4MTc4MzYsImlhdCI6MTcyNDgxNzgzNiwib3JnX2lkIjoiMTgiLCJidXNpbmVzc19pZCI6IjE4IiwiZGV2aWNlX2lkIjoiNmRkYmIzMTMtYmY3NS00OWViLTlmZjAtMDg1M2QzYjIwNmFhIiwicGxhdGZvcm1fa2V5Ijoid2ViLWJvb2siLCJ1c2VyX2lkIjoiNTI1MTQ1MWItZTFkNi00YTgzLWJhZjUtNWJmODM0MDM0YzUzIiwibG9naW5fbWV0aG9kIjoicGFzc3dvcmQiLCJhcHBfdmVyc2lvbiI6IjEuMS4xIiwic2VjdXJpdHlfcm9sZSI6MCwicmVmcmVzaF90b2tlbl9pZCI6Ijg0ZDU1ZTNlLTE5OGEtNDRiZi1iZWRlLTlmNjY2YTg2MmY0YyJ9.83y1Be4D8aLMP3fT_HlO6xJ6JSCKWsiO_nDkc1nQJl4",
								"disabled": true
							},
							{
								"key": "origin",
								"value": "https://book-stg.finan.one"
							},
							{
								"key": "priority",
								"value": "u=1, i"
							},
							{
								"key": "referer",
								"value": "https://book-stg.finan.one/"
							},
							{
								"key": "sec-ch-ua",
								"value": "\"Not)A;Brand\";v=\"99\", \"Google Chrome\";v=\"127\", \"Chromium\";v=\"127\""
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?0"
							},
							{
								"key": "sec-ch-ua-platform",
								"value": "\"macOS\""
							},
							{
								"key": "sec-fetch-dest",
								"value": "empty"
							},
							{
								"key": "sec-fetch-mode",
								"value": "cors"
							},
							{
								"key": "sec-fetch-site",
								"value": "same-site"
							},
							{
								"key": "user-agent",
								"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.0.0 Safari/537.36"
							},
							{
								"key": "x-locale",
								"value": "vi"
							},
							{
								"key": "x-location-timezone",
								"value": "Asia/Ho_Chi_Minh"
							},
							{
								"key": "x-platform-key",
								"value": "desktop-web"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-business/api/v1/contact/get-one/{{C-contact_id}}?business_id={{C-business_id}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-business",
								"api",
								"v1",
								"contact",
								"get-one",
								"{{C-contact_id}}"
							],
							"query": [
								{
									"key": "business_id",
									"value": "{{C-business_id}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "location tree",
			"item": [
				{
					"name": "get_location",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let loc_lvl, parent_short_id;\r",
									"let case_ = pm.environment.get(\"C-case_\");\r",
									"if(!case_){\r",
									"    case_ = 1;\r",
									"    pm.environment.set(\"C-case_\", case_);\r",
									"}\r",
									"console.log(\"C-case_ now is: \" + case_);\r",
									"\r",
									"\r",
									"switch(case_){\r",
									"    case 1:\r",
									"        console.log(\"Lấy danh sách tính/thành phố\");\r",
									"        loc_lvl = 1;\r",
									"        parent_short_id = \"\";\r",
									"        break;\r",
									"    case 2:\r",
									"        let city_obj = pm.environment.get(\"C-city_obj\");\r",
									"        console.log(\"Lấy danh sách Quận/huyện của tinh/thành phố: \" + pm.environment.get(\"C-city\"));\r",
									"        console.log(\"debug2\");\r",
									"        loc_lvl = 2;\r",
									"        console.log(\"debug2.1\");\r",
									"\r",
									"        parent_short_id = city_obj.short_id;\r",
									"        break;\r",
									"    case 3:\r",
									"        let district_obj = pm.environment.get(\"C-district_obj\");\r",
									"        console.log(\"Lấy danh sách Phường/xã của quận: \" + district_obj.name);\r",
									"        loc_lvl = 3;\r",
									"        parent_short_id = district_obj.short_id;\r",
									"        break;\r",
									"    default:\r",
									"        console.log(\"Can't get location\");\r",
									"        break;\r",
									"}\r",
									"pm.environment.set(\"C-loc_lvl\", loc_lvl);\r",
									"pm.environment.set(\"C-parent_short_id\", parent_short_id);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"function getRandomInt(min, max) {\r",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;\r",
									"}\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const jsData = pm.response.json();\r",
									"\r",
									"if(pm.response.code == 200 && jsData.code == 102000){\r",
									"    let case_ = pm.environment.get(\"C-case_\");\r",
									"    let city_obj, district_obj, ward_obj;\r",
									"\r",
									"    switch(case_) {\r",
									"        case 1:\r",
									"            city_obj = jsData.data[getRandomInt(0, jsData.meta.total_rows - 1)];\r",
									"            console.log(\"city_obj\", city_obj);\r",
									"            pm.environment.set(\"C-city\", city_obj.name);\r",
									"            pm.environment.set(\"C-city_obj\", city_obj);\r",
									"            case_ ++;\r",
									"            pm.environment.set(\"C-case_\", case_);\r",
									"            postman.setNextRequest(\"get_location\");\r",
									"            break;\r",
									"\r",
									"        case 2:\r",
									"            city_obj = pm.environment.get(\"C-city_obj\");\r",
									"            district_obj = jsData.data[getRandomInt(0,jsData.meta.total_rows - 1)];\r",
									"            console.log(\"district_obj\", district_obj);\r",
									"            console.log(\"Quận/huyen \"+ district_obj.name + \" của tinh/thành phố: \"+ city_obj.name);\r",
									"            pm.environment.set(\"C-district\", district_obj.name);\r",
									"            pm.environment.set(\"C-district_obj\", district_obj);\r",
									"            case_ ++;\r",
									"            pm.environment.set(\"C-case_\", case_);\r",
									"            postman.setNextRequest(\"get_location\");\r",
									"            break;\r",
									"\r",
									"        case 3:\r",
									"            district_obj = pm.environment.get(\"C-district_obj\");\r",
									"            ward_obj = jsData.data[getRandomInt(0,jsData.meta.total_rows - 1)];\r",
									"            console.log(\"Phường/xã: \"+ ward_obj.name + \" Của quận/huyện: \"+ district_obj.name);\r",
									"            pm.environment.set(\"C-ward\", ward_obj.name);\r",
									"            pm.environment.set(\"C-ward_obj\", ward_obj);\r",
									"            pm.environment.unset(\"C-case_\");\r",
									"            postman.setNextRequest(\"get_list_contact\");\r",
									"            break;\r",
									"        \r",
									"        default:\r",
									"            console.log(\"Missing flow, end test\");\r",
									"            postman.setNextRequest(null);        \r",
									"            break;\r",
									"    }\r",
									"}else{\r",
									"    console.log(\"Can't get location tree, end test\", jsData);\r",
									"    postman.setNextRequest(null);\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-common/api/v1/vn-location/get-list?loc_lvl={{C-loc_lvl}}&parent_short_id={{C-parent_short_id}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-common",
								"api",
								"v1",
								"vn-location",
								"get-list"
							],
							"query": [
								{
									"key": "loc_lvl",
									"value": "{{C-loc_lvl}}"
								},
								{
									"key": "parent_short_id",
									"value": "{{C-parent_short_id}}"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"let configs = {",
					"    \"is_use_email\":true,",
					"    \"limit_page\":5,",
					"    \"timeout\":12000, // miliseconds => timeout to call API",
					"    \"is_buyer_gen\":false,",
					"    \"test_payment_method\":\"va_galaxy\" // bank_transfer, viet_qr_pro_mb, va_galaxy",
					"}",
					"",
					"pm.environment.set(\"C-configs\",configs);",
					"// console.log(\"configs: \",configs);"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"// ====================================== parser cURL",
					"function parseCURL(request_api){",
					"    let curl = \"\";",
					"    switch(request_api.method){",
					"        case \"PUT\":",
					"            curl = \"curl --location --request PUT \";",
					"            break;",
					"        case \"PATCH\":",
					"            curl = \"curl --location --request PATCH \";",
					"            break;",
					"        case \"DELETE\":",
					"            curl = \"curl --location --request DELETE \";",
					"            break;",
					"        default:",
					"            curl = \"curl --location \";",
					"            break;",
					"    }",
					"    curl += \"'\" + request_api.url.protocol + \"://\"",
					"    // host",
					"    for(let i in request_api.url.host){",
					"        if(i >= request_api.url.host.length - 1){",
					"            curl += request_api.url.host[i] + \"/\";",
					"        } else {",
					"            curl += request_api.url.host[i] + \".\";",
					"        }",
					"    }",
					"    // path",
					"    for(let i in request_api.url.path){",
					"        if(i >= request_api.url.path.length - 1){",
					"            curl += request_api.url.path[i];",
					"        } else {",
					"            curl += request_api.url.path[i] + \"/\";",
					"        }",
					"    }",
					"    // query (if have)",
					"    if(\"query\" in request_api.url){",
					"        if(request_api.url.length > 0){",
					"            curl += \"? \";",
					"            for(let i in request_api.url.query){",
					"                if(i >= request_api.url.query.length - 1){",
					"                    curl += request_api.url.query[i].key + \"=\" + request_api.url.query[i].value + \"' \";",
					"                } else {",
					"                    curl += request_api.url.query[i].key + \"=\" + request_api.url.query[i].value + \"&\";",
					"                }",
					"            }",
					"        } else {",
					"            curl += \"' \";",
					"        }",
					"    } else {",
					"        curl += \"' \";",
					"    }",
					"    // header",
					"    for(let i in request_api.header){",
					"        if(i >= request_api.header.length - 1){",
					"            curl += \"--header '\" + request_api.header[i].key + \": \" + request_api.header[i].value + \"'\";",
					"        } else {",
					"            curl += \"--header '\" + request_api.header[i].key + \": \" + request_api.header[i].value + \"' \";",
					"        }",
					"    }",
					"    switch(request_api.method){",
					"        case \"POST\":",
					"            curl += \" --data '\" + request_api.body.raw + \"'\"",
					"            break;",
					"        case \"PUT\": case \"PATCH\":",
					"            curl += \" --data-raw '\" + request_api.body.raw + \"'\"",
					"            break;",
					"        default:",
					"            break;",
					"    }",
					"    console.log(curl);",
					"    return curl;",
					"}",
					"const request_api = pm.request.toJSON();",
					"parseCURL(request_api);"
				]
			}
		}
	]
}