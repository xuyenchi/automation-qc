{
	"info": {
		"_postman_id": "0695e795-c8d2-40ee-8d85-b3ba0ee20f1b",
		"name": "fo_51_verify_to_create_viet_qr_to_payment_for_invoice",
		"description": "Testsuite: Verify to create new transaction via bank account (QR)\n\nTestcase:\n\n1. Login with owner account\n    \n2. Get data\n    \n    1. account coa / get list account\n        \n    2. account bank / get list bank account\n        \n    3. invoice / get list invoice => get invoice had payment_account_id & un_paid/partital_paid status\n        \n    4. invoice / get invoice detail => update more data for invoice at 2.c.\n        \n    5. Posting / Get list posting => get total posting\n        \n    6. payment / get list payment => get total\n        \n    7. \\[NY\\] home-report / cash flow => get data\n        \n    8. \\[NY\\] home-report / account receivable unpaid => get data (only account_receivable)\n        \n    9. \\[NY\\]home-report / account receivable customer => get data (only account_receivable)\n        \n    10. \\[NY\\] home-report / account life time => get data\n        \n    11. \\[NY\\] home-report / cash-flow period => get data\n        \n    12. \\[NY\\] home-report / profit loss period => get data (income & expense)\n        \n    13. report-app / balance_n_forecast / get chart balance_change => get data\n        \n    14. report-app / balance_n_forecast / get forecast dashboard=> get data\n        \n    15. report-app / cash flow / get cash flow chart => get data\n        \n    16. report-app / cash flow / get cash flow table => get data\n        \n    17. report-app / invoice / get receivable invoice => get data\n        \n    18. report-app / invoice / get receivable customer => get data\n        \n    19. report-app / bill / get payable bill => get data\n        \n    20. report-app / bill / get payable supplier => get data\n        \n    21. report-app / sales / get profit chart => get data\n        \n    22. report-app / sales / get income report => get data\n        \n    23. report-app / sales / get product report => get data\n        \n    24. report-app / sales / get expense chart => get data\n        \n    25. report-app / sales / get expense report => get data\n        \n    26. Transaction / Get list transaction => get total transaction\n        \n3. Create transaction\n    \n    1. payment / gen payment QR\n        \n    2. payment / gen payment QR by buyer\n        \n    3. (\\*) hook / pay for this QR\n        \n4. Check data\n    \n    1. Transaction / Get list transaction => have new record (\\*2)\n        \n    2. Transaction / Get transaction detail => data correctly\n        \n    3. \\[New\\] payment / get list payment => increase 1\n        \n    4. \\[New\\] payment / get payment detail => data correctly\n        \n    5. Account cash_n_bank / Get list account => check respective banlance_amount\n        \n    6. Invoice / Get list invoice => check invoice status at 2.c\n        \n    7. Invoice / Get invoice detail => update data\n        \n    8. Posting / get list posting => have 2 new posting (account receivable & account debit)\n        \n    9. report-app / balance_n_forecast / get chart balance_change => check data\n        \n    10. report-app / balance_n_forecast / get forecast dashboard=> check data\n        \n    11. report-app / cash flow / get cash flow chart => check data\n        \n    12. report-app / cash flow / get cash flow table => check data\n        \n    13. report-app / invoice / get receivable invoice => check data\n        \n    14. report-app / invoice / get receivable customer => check data\n        \n    15. report-app / bill / get payable bill => check data\n        \n    16. report-app / bill / get payable supplier => check data\n        \n    17. report-app / sales / get profit chart => check data\n        \n    18. report-app / sales / get income report => check data\n        \n    19. report-app / sales / get product report => check data\n        \n    20. report-app / sales / get expense chart => check data\n        \n    21. report-app / sales / get expense report => check data\n        \n\nNote:\n\n- ~~Không cần call HOOK, server sẽ tự động hook sau 10s để payment sau khi gen QR => tự hook để ghi nhận bút toán~~ => MB 10s sẽ tự hook để thanh toán, còn Shinhan & GP cần phải tự hook\n    \n- (\\*) nếu gen QR galaxy pay / shinhan thì phải tự call hook\n    \n- (\\*2) Nếu hook có phí sẽ sinh ra 2 transactions\n    \n- CHƯA HANDLE REPROT KHI TRANSACTION CÓ TAX / PHÍ",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "282640"
	},
	"item": [
		{
			"name": "authen",
			"item": [
				{
					"name": "login",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// ============================= random characters",
									"function randomChars(length) {",
									"    var result           = '';",
									"    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
									"    var charactersLength = characters.length;",
									"    for ( var i = 0; i < length; i++ ) {",
									"      result += characters.charAt(Math.floor(Math.random() * ",
									" charactersLength));",
									"   }",
									"   return result;",
									"}",
									"",
									"let testcase = 1;",
									"console.log(\"-------- Start Testsuite 51 --------\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let platform = [\"desktop-web\",\"mobile-web\",\"mobile-app\"];",
									"let configs = pm.environment.get(\"C-configs\");",
									"let payload;",
									"if(configs.is_use_email){",
									"    payload = {",
									"        \"app_version\": \"1.0.0\",",
									"        \"device_info\": {",
									"            \"id\": randomChars(7) + \"-\" + randomChars(4) + \"-\" + randomChars(4) + \"-\" + randomChars(4) + \"-\" + randomChars(12),",
									"            \"name\": \"IP name\",",
									"            \"os\": \"iphone\"",
									"        },",
									"        \"email\": pm.environment.get(\"SER-email\"), // pm.environment.get(\"SER-email\")",
									"        \"encrypted_password\": pm.environment.get(\"SER-password\"),",
									"        \"phone_number\": \"\",",
									"        \"platform_key\": platform[0]",
									"    }",
									"} else {",
									"    payload = {",
									"        \"app_version\": \"1.0.0\",",
									"        \"device_info\": {",
									"            \"id\": randomChars(7) + \"-\" + randomChars(4) + \"-\" + randomChars(4) + \"-\" + randomChars(4) + \"-\" + randomChars(12),",
									"            \"name\": \"IP name\",",
									"            \"os\": \"iphone\"",
									"        },",
									"        \"email\":\"\", // pm.environment.get(\"SER-email\")",
									"        \"encrypted_password\": pm.environment.get(\"SER-password\"),",
									"        \"phone_number\": pm.environment.get(\"SER-phone_number\"),",
									"        \"platform_key\": platform[0]",
									"    }",
									"}",
									"",
									"console.log(\"payload: \",payload);",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));",
									"pm.environment.set(\"C-testcase\",testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    pm.test(\"System code is 102000\", function () {",
									"        pm.expect(jsData.code).to.eql(102000);",
									"    });",
									"",
									"    if(jsData.code == 102000){",
									"        let userToken = null;",
									"        try {",
									"            userToken = jsData.data.access_token;",
									"            pm.environment.set(\"C-userToken\",userToken);",
									"        } catch {",
									"            console.log(\"Can't get userToken\");",
									"        }",
									"",
									"        pm.test(\"Got userToken\", function () {",
									"            pm.expect(userToken != null).to.be.true;",
									"        });",
									"",
									"        let userInfo = jsData.data.user_info;",
									"",
									"        // show log",
									"        console.log(\"userInfo:\",JSON.stringify(userInfo));",
									"        pm.environment.set(\"C-userInfo\",userInfo);",
									"",
									"        postman.setNextRequest(\"verify_token_to_get_business\");",
									"    } else {",
									"        console.log(\"Can't get Token, end test\",jsData);",
									"        postman.setNextRequest(null);",
									"    }",
									"} else {",
									"    console.log(\"Can't login new account, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-user/api/v1/auth/login",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-user",
								"api",
								"v1",
								"auth",
								"login"
							]
						},
						"description": "Login User"
					},
					"response": []
				},
				{
					"name": "verify_token_to_get_business",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// verify token to get business",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = JSON.parse(responseBody);",
									"if(pm.response.code == 200 && jsData.code == 102000){",
									"    const jsData = pm.response.json();",
									"    pm.environment.set(\"C-user_id\",jsData.data.user_id);",
									"",
									"    let business_id = jsData.data.headers[\"x-business-id\"];",
									"    console.log(\"business_id: \" + business_id);",
									"    pm.environment.set(\"C-business_id\",business_id);",
									"",
									"    postman.setNextRequest(\"get_current_business\");",
									"} else {",
									"    console.log(\"Can't check token to get business_id, end test\");",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"token\": \"{{C-userToken}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-user/api/v1/auth/verify-token",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-user",
								"api",
								"v1",
								"auth",
								"verify-token"
							]
						},
						"description": "Login User"
					},
					"response": []
				},
				{
					"name": "get_business_detail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ============================= random number between min and max",
									"function getRandomInt(min, max) {",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    // console.log(\"Current business info: \", jsData.data);",
									"    let branch_id = null;",
									"    try {",
									"        branch_id = jsData.data.current_business.list_branch[0].id;",
									"        pm.environment.set(\"C-branch_id\",branch_id);",
									"    } catch {",
									"        console.log(\"Can't get branch id\");",
									"    }",
									"",
									"    pm.test(\"Got branch id \" + branch_id, function () {",
									"        pm.expect(branch_id != null).to.be.true;",
									"    });",
									"",
									"    let payment_method = null;",
									"    let list_payment_method = [];",
									"    let configs = pm.environment.get(\"C-configs\");",
									"    let test_payment_method = configs.test_payment_method;",
									"    try {",
									"        switch(test_payment_method){",
									"            case \"viet_qr_pro_mb\":",
									"                for(let i in jsData.data.list_payment_method){",
									"                    if(jsData.data.list_payment_method[i].key == test_payment_method){ ",
									"                        payment_method = jsData.data.list_payment_method[i];",
									"                        break;",
									"                    }",
									"                }",
									"                break;",
									"            case \"va_galaxy\":",
									"                for(let i in jsData.data.list_payment_method){",
									"                    if(jsData.data.list_payment_method[i].bank_account.account_number.includes(\"SBB\")){ ",
									"                        list_payment_method[list_payment_method.length] = jsData.data.list_payment_method[i];",
									"                    }",
									"                }",
									"                payment_method = list_payment_method[getRandomInt(0,list_payment_method.length -1)];",
									"                break;",
									"            case \"bank_transfer\":",
									"                for(let i in jsData.data.list_payment_method){",
									"                    if(jsData.data.list_payment_method[i].key == test_payment_method){ ",
									"                        list_payment_method[list_payment_method.length] = jsData.data.list_payment_method[i];",
									"                    }",
									"                }",
									"                payment_method = list_payment_method[getRandomInt(0,list_payment_method.length -1)];",
									"                break;",
									"            default:",
									"                console.log(\"Missing flow\");",
									"                break;",
									"        }",
									"    } catch {",
									"        console.log(\"Can't get branch id\");",
									"    }",
									"    pm.environment.set(\"C-viet_qr_payment\",payment_method);",
									"",
									"    pm.test(\"Got branch id \" + branch_id, function () {",
									"        pm.expect(branch_id != null).to.be.true;",
									"    });",
									"    ",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    testcase++;",
									"    pm.environment.set(\"C-testcase\",testcase);",
									"    postman.setNextRequest(\"get_list_internal_account\");",
									"} else {",
									"    console.log(\"Can't get business detail, end test\", jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-business/api/v1/business/get-one/{{C-business_id}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-business",
								"api",
								"v1",
								"business",
								"get-one",
								"{{C-business_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_current_business",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ============================= random number between min and max",
									"function getRandomInt(min, max) {",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    // console.log(\"Current business info: \", jsData.data);",
									"    let branch_id = null;",
									"    try {",
									"        branch_id = jsData.data.current_business.list_branch[0].id;",
									"        pm.environment.set(\"C-branch_id\",branch_id);",
									"    } catch {",
									"        console.log(\"Can't get branch id\");",
									"    }",
									"",
									"    pm.test(\"Got branch id \" + branch_id, function () {",
									"        pm.expect(branch_id != null).to.be.true;",
									"    });",
									"",
									"    let payment_method = null;",
									"    let list_payment_method = [];",
									"    let configs = pm.environment.get(\"C-configs\");",
									"    let test_payment_method = configs.test_payment_method;",
									"    try {",
									"        switch(test_payment_method){",
									"            case \"viet_qr_pro_mb\":",
									"                for(let i in jsData.data.list_payment_method){",
									"                    if(jsData.data.list_payment_method[i].key == test_payment_method && jsData.data.list_payment_method[i].bank_account.account_number.includes(\"VQRQ\")){ ",
									"                        // payment_method = jsData.data.list_payment_method[i];",
									"                        // break;",
									"                        list_payment_method[list_payment_method.length] = jsData.data.list_payment_method[i];",
									"                    }",
									"                }",
									"                payment_method = list_payment_method[getRandomInt(0,list_payment_method.length -1)];",
									"                break;",
									"            case \"va_galaxy\":",
									"                for(let i in jsData.data.list_payment_method){",
									"                    if(jsData.data.list_payment_method[i].bank_account.account_number.includes(\"SBB\")){ ",
									"                        list_payment_method[list_payment_method.length] = jsData.data.list_payment_method[i];",
									"                    }",
									"                }",
									"                payment_method = list_payment_method[getRandomInt(0,list_payment_method.length -1)];",
									"                break;",
									"            case \"bank_transfer\":",
									"                for(let i in jsData.data.list_payment_method){",
									"                    if(jsData.data.list_payment_method[i].key == test_payment_method){ ",
									"                        list_payment_method[list_payment_method.length] = jsData.data.list_payment_method[i];",
									"                    }",
									"                }",
									"                payment_method = list_payment_method[getRandomInt(0,list_payment_method.length -1)];",
									"                break;",
									"            case \"bidv\":",
									"                for(let i in jsData.data.list_payment_method){",
									"                    if(jsData.data.list_payment_method[i].bank_account.bank_code == \"BIDV\"){ ",
									"                        list_payment_method[list_payment_method.length] = jsData.data.list_payment_method[i];",
									"                    }",
									"                }",
									"                payment_method = list_payment_method[getRandomInt(0,list_payment_method.length -1)];",
									"                break;",
									"            default:",
									"                console.log(\"Missing flow\");",
									"                break;",
									"        }",
									"    } catch {",
									"        console.log(\"Can't get branch id\");",
									"    }",
									"    pm.environment.set(\"C-viet_qr_payment\",payment_method);",
									"",
									"    pm.test(\"Got branch id \" + branch_id, function () {",
									"        pm.expect(branch_id != null).to.be.true;",
									"    });",
									"    ",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    testcase++;",
									"    pm.environment.set(\"C-testcase\",testcase);",
									"    postman.setNextRequest(\"get_list_internal_account\");",
									"} else {",
									"    console.log(\"Can't get business detail, end test\", jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-business/api/v1/business/get-current",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-business",
								"api",
								"v1",
								"business",
								"get-current"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "account coa",
			"item": [
				{
					"name": "get_list_internal_account",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let coa = [];",
									"    try {",
									"        for(let i in jsData.data){",
									"            let sub_group_i = [];",
									"            for(let j in jsData.data[i].sub_group){",
									"                let accounts_j = [];",
									"                for(let k in jsData.data[i].sub_group[j].accounts){",
									"                    accounts_j[accounts_j.length] = {",
									"                        \"account_name\":jsData.data[i].sub_group[j].accounts[k].account_name,",
									"                        \"account_id\":jsData.data[i].sub_group[j].accounts[k].id,",
									"                        \"business_id\":jsData.data[i].sub_group[j].accounts[k].business_id,",
									"                        \"account_source\":jsData.data[i].sub_group[j].accounts[k].account_source,",
									"                        \"total_balance_amount\":jsData.data[i].sub_group[j].accounts[k].total_balance_amount,",
									"                        \"account_type\":jsData.data[i].sub_group[j].accounts[k].account_type,",
									"                        \"account_number\":jsData.data[i].sub_group[j].accounts[k].account_number,",
									"                        \"coa_type\":jsData.data[i].sub_group[j].accounts[k].coa_type,",
									"                        \"status\":jsData.data[i].sub_group[j].accounts[k].status,",
									"                        \"parent_account_id\":jsData.data[i].sub_group[j].accounts[k].parent_account_id,",
									"                        \"description\":jsData.data[i].sub_group[j].accounts[k].description,",
									"                        \"open_amount\":jsData.data[i].sub_group[j].accounts[k].open_amount,",
									"                        \"currency\":jsData.data[i].sub_group[j].accounts[k].currency",
									"                    }",
									"",
									"                    if(jsData.data[i].sub_group[j].accounts[k].account_key == \"A3001\"){",
									"                        pm.environment.set(\"C-account_receivable\",jsData.data[i].sub_group[j].accounts[k]);",
									"                    } else if(jsData.data[i].sub_group[j].accounts[k].account_key == \"D1004\"){",
									"                        pm.environment.set(\"C-account_fee\",jsData.data[i].sub_group[j].accounts[k]);",
									"                    }",
									"                }",
									"",
									"                sub_group_i[sub_group_i.length] = {",
									"                    \"sub_group_name\":jsData.data[i].sub_group[j].name,",
									"                    \"sub_group_id\":jsData.data[i].sub_group[j].id,",
									"                    \"sub_group_value\":jsData.data[i].sub_group[j].value,",
									"                    \"sub_group_description\":jsData.data[i].sub_group[j].description,",
									"                    \"accounts\":accounts_j",
									"                }",
									"            }",
									"",
									"            coa[coa.length] = {",
									"                \"group_name\":jsData.data[i].name,",
									"                \"value\":jsData.data[i].value,",
									"                \"index\":jsData.data[i].index,",
									"                \"sub_group\":sub_group_i",
									"            }",
									"        }",
									"    } catch {",
									"        console.log(\"can't get all account in coa\");",
									"    }",
									"",
									"    pm.test(\"Got coa of this user's business\", function () {",
									"        pm.expect(coa.length > 0).to.be.true;",
									"    });",
									"",
									"    if(coa.length > 0){",
									"        // console.log(\"coa: \", coa);",
									"        pm.environment.set(\"C-coa\",coa);",
									"        let list_debit_account = [];",
									"        let list_credit_account = [];",
									"        /**",
									"         * lấy những account_id và phân loại thành debit/credit",
									"         * - credit: tài khoản (only cash & bank)",
									"         * - debit: phân loại (all)",
									"         */ ",
									"        for(let i in coa){",
									"            for(let j in coa[i].sub_group){",
									"                for(let k in coa[i].sub_group[j].accounts){",
									"                    // if(coa[i].group_name == \"income\" || coa[i].group_name == \"expense\"){ // mở điều kiện này khi cần debug tạo tnx có report cassh-flow",
									"                        list_debit_account[list_debit_account.length] = coa[i].sub_group[j].accounts[k];",
									"                    // }",
									"                    if(coa[i].sub_group[j].sub_group_value == \"cash_and_bank\"){ ",
									"                        // console.log(\"debug: \", coa[i].sub_group[j].accounts[k]);",
									"                        if(coa[i].sub_group[j].accounts[k].account_name.includes(\"[API]\")){ // do 1 số name bị null (dev chưa validation dẫn đến report sẽ không biết của account nào - report ko trả về id)",
									"                            list_credit_account[list_credit_account.length] = coa[i].sub_group[j].accounts[k];",
									"                        }",
									"                    }",
									"                }",
									"            }",
									"        }",
									"",
									"        // console.log(\"list_debit_account: \", list_debit_account);",
									"        // console.log(\"list_credit_account: \", list_credit_account);",
									"",
									"        pm.environment.set(\"C-list_debit_account\",list_debit_account);",
									"        pm.environment.set(\"C-list_credit_account\",list_credit_account);",
									"        ",
									"        postman.setNextRequest(\"get_list_payment_account\"); // get_list_payment_account",
									"    } else {",
									"        console.log(\"Can't get list internal account, end test \");",
									"        postman.setNextRequest(null);",
									"    }",
									"} else {",
									"    console.log(\"Can't get list internal account, end test \", jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{finone_url}}​/fo-ledger/api/v1/account/get-list-setting?business_id={{C-business_id}}&coa_type=",
							"host": [
								"{{finone_url}}​"
							],
							"path": [
								"fo-ledger",
								"api",
								"v1",
								"account",
								"get-list-setting"
							],
							"query": [
								{
									"key": "business_id",
									"value": "{{C-business_id}}"
								},
								{
									"key": "coa_type",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get_internal_account_detail",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/**",
									" * Only check credit_account",
									" */",
									"",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let list_internal_account = pm.environment.get(\"C-list_internal_account\");",
									"let pos = pm.environment.get(\"C-pos\");",
									"if(!pos){",
									"    pos = 0;",
									"    pm.environment.set(\"C-pos\",pos);",
									"}",
									"",
									"let internal_account_id = list_internal_account[pos].account_id;",
									"console.log(\"view detail account: \" + account_id);",
									"",
									"pm.environment.set(\"C-internal_account_id\",internal_account_id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    const jsData = pm.response.json();",
									"    // let testcase = pm.environment.get(\"C-testcase\");",
									"    console.log(\"Debug: \" + JSON.stringify(jsData));",
									"",
									"    let list_internal_account = pm.environment.get(\"C-list_internal_account\");",
									"    let pos = pm.environment.get(\"C-pos\");",
									"",
									"    if(pos >= list_internal_account.length - 1){",
									"        pm.environment.unset(\"C-pos\");",
									"",
									"        postman.setNextRequest(\"get_list_tax\"); // get_list_tax",
									"    } else {",
									"        pos++;",
									"        pm.environment.set(\"C-pos\",pos);",
									"",
									"        postman.setNextRequest(\"get_internal_account_detail\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get internal account detail, end test\");",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{finone_url}}​​/fo-ledger/api/v1/account/get-one/{{C-internal_account_id}}",
							"host": [
								"{{finone_url}}​​"
							],
							"path": [
								"fo-ledger",
								"api",
								"v1",
								"account",
								"get-one",
								"{{C-internal_account_id}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.request.headers.add({",
							" key: \"authorization\",",
							" value: \"Bearer \" + pm.environment.get(\"C-userToken\")",
							"});",
							"",
							"pm.request.headers.add({",
							" key: \"Content-Type\",",
							" value: \"application/json\"",
							"});"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "account cash_n_bank",
			"item": [
				{
					"name": "get_list_payment_account",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"",
									"    let list_bank_account = [];",
									"    for(let j in jsData.data[0].accounts){",
									"        // if(jsData.data[0].accounts[j].provider_id != \"\"){ // remove va bank account out list",
									"            list_bank_account[list_bank_account.length] = {",
									"                \"account_id\":jsData.data[0].accounts[j].id,",
									"                \"account_name\":jsData.data[0].accounts[j].account_name,",
									"                \"account_number\":jsData.data[0].accounts[j].account_number,",
									"                \"account_name_custom\":jsData.data[0].accounts[j].account_name_custom,",
									"                \"account_key\":jsData.data[0].accounts[j].account_key,",
									"                \"account_type\":jsData.data[0].accounts[j].account_type,",
									"                \"status\":jsData.data[0].accounts[j].status,",
									"                \"external_account_id\":jsData.data[0].accounts[j].external_account_id,",
									"                \"provider_id\":jsData.data[0].accounts[j].provider_id,",
									"                \"total_balance_amount\":jsData.data[0].accounts[j].total_balance_amount",
									"            }",
									"        // }",
									"    }",
									"",
									"    switch(testcase){",
									"        case 2:",
									"            pm.test(\"Got list bank account\", function () {",
									"                pm.expect(list_bank_account.length > 0).to.be.true;",
									"            });",
									"",
									"            pm.environment.set(\"C-list_bank_account\",list_bank_account);",
									"",
									"            postman.setNextRequest(\"get_list_invoice\"); // get_list_invoice",
									"            break;",
									"        case 4:",
									"            let old_list_bank_account = pm.environment.get(\"C-list_bank_account\");",
									"            let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"            let configs = pm.environment.get(\"C-configs\");",
									"",
									"            let expected_balance_amout, expected_account_name;",
									"            for(let j in old_list_bank_account){",
									"                if(tnx_obj.account_debit == old_list_bank_account[j].account_id){",
									"                    if(configs.test_payment_method == \"viet_qr_pro_mb\" || configs.test_payment_method == \"bidv\"){",
									"                        expected_balance_amout = old_list_bank_account[j].total_balance_amount + tnx_obj.amount;",
									"                    } else {",
									"                        expected_balance_amout = old_list_bank_account[j].total_balance_amount + tnx_obj.after_fee_amount;",
									"                    }",
									"                    expected_account_name = old_list_bank_account[j].account_name;",
									"                    break;",
									"                }",
									"            }",
									"",
									"            let actual_balance_amout;",
									"            for(let j in jsData.data[0].accounts){",
									"                if(tnx_obj.account_debit == jsData.data[0].accounts[j].id){",
									"                    actual_balance_amout = jsData.data[0].accounts[j].total_balance_amount;",
									"                    break;",
									"                }",
									"            }",
									"",
									"            pm.test(\"total_balance_amount of \" + expected_account_name + \" increase \" + tnx_obj.amount, function () {",
									"                console.log(\"act: \" + actual_balance_amout);",
									"                console.log(\"exp: \" + expected_balance_amout);",
									"                pm.expect(actual_balance_amout == expected_balance_amout).to.be.true;",
									"            });",
									"",
									"            postman.setNextRequest(\"get_list_invoice\"); // get_list_invoice",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get list payment account, end test\", jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-ledger/api/v1/account/get-list-sub?sub_account_key=A1&account_type=link_bank,va_bank,galaxy_pay",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-ledger",
								"api",
								"v1",
								"account",
								"get-list-sub"
							],
							"query": [
								{
									"key": "sub_account_key",
									"value": "A1"
								},
								{
									"key": "account_type",
									"value": "link_bank,va_bank,galaxy_pay",
									"description": "manual"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get_list_bank_transaction",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-banking/api/v1/payment-request/get-list?page=1&page_size=50&sort=&search=&from_time=&to_time=&payment_method=&status=",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-banking",
								"api",
								"v1",
								"payment-request",
								"get-list"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "page_size",
									"value": "50"
								},
								{
									"key": "sort",
									"value": ""
								},
								{
									"key": "search",
									"value": ""
								},
								{
									"key": "from_time",
									"value": ""
								},
								{
									"key": "to_time",
									"value": ""
								},
								{
									"key": "payment_method",
									"value": "",
									"description": "ewallet_zalopay,credit_card,ewallet_momo"
								},
								{
									"key": "status",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "invoice",
			"item": [
				{
					"name": "get_list_invoice",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ============================= random number between min and max",
									"function getRandomInt(min, max) {",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = JSON.parse(responseBody);",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let total_pages = 1;",
									"    try {",
									"        total_pages = jsData.meta.total_pages;",
									"    } catch {",
									"        console.log(\"currently, this branch with null data\");",
									"    }",
									"    let page = pm.environment.get(\"C-page\");",
									"",
									"    let list_invoice, new_invoice_obj;",
									"    let isFound = false;",
									"    switch(testcase){",
									"        case 2:",
									"            list_invoice = pm.environment.get(\"C-list_invoice\");",
									"            if(!list_invoice){",
									"                list_invoice = [];",
									"            }",
									"",
									"            // let test_day = new Date(\"2024-05-17T07:00:00.000Z\");",
									"            for(let item in jsData.data){",
									"                if(jsData.data[item].cart_status == \"saved\" && jsData.data[item].total_amount != 0){ // && jsData.data[item].payment_account_id != 0",
									"",
									"                    // get list invoice create after \"2024-03-15T09:00:00.000Z\"",
									"                    // let created_at_i = new Date(jsData.data[item].created_at);",
									"                    if(jsData.data[item].payment_status != \"fully_paid\"){ // && test_day < created_at_i && jsData.data[item].payment_account_id == 1000531 tạm handle gen QR vs invoice còn nợ, fix payment account đang thanh toán dc (1000531, 1001914) => sẽ loại bỏ vì ko fix 1 payment_id cho invoice nữa, jsData.data[item].created_at > \"2024-03-24T16:00:00.000Z\"",
									"                        list_invoice[list_invoice.length] = {",
									"                            \"invoice_id\":jsData.data[item].id,",
									"                            \"order_code\":jsData.data[item].order_code,",
									"                            \"system_code\":jsData.data[item].system_code,",
									"                            \"created_at\":jsData.data[item].created_at,",
									"                            \"cart_status\":jsData.data[item].cart_status,",
									"                            \"payment_status\":jsData.data[item].payment_status,",
									"                            \"items_amount\":jsData.data[item].items_amount,",
									"                            \"total_amount\":jsData.data[item].total_amount,",
									"                            \"discount_amount\":jsData.data[item].discount_amount,",
									"                            \"tax_amount\":jsData.data[item].tax_amount,",
									"                            \"payment_due_amount\":jsData.data[item].payment_due_amount,",
									"                            \"paid_amount\":jsData.data[item].paid_amount,",
									"                            // \"entry_type\":jsData.data[item].entry_type,",
									"                            // \"description\":jsData.data[item].description,",
									"                            \"value_at\":jsData.data[item].value_at,",
									"                            \"due_at\":jsData.data[item].due_at,",
									"                            // \"send_at\":jsData.data[item].send_at,",
									"                            \"account_id\":jsData.data[item].account_id,",
									"                            \"tax_type\":jsData.data[item].tax_type,",
									"                            \"email\":jsData.data[item].email,",
									"                            \"payment_config\":jsData.data[item].payment_config,",
									"                            \"contact_id\":jsData.data[item].contact_id,",
									"                            \"contact_name\":jsData.data[item].contact_info.contact_name",
									"                            // \"contact_phone\":jsData.data[item].contact_info.contact_phone",
									"                            // \"payment_account_id\":jsData.data[item].payment_account_id",
									"                        }",
									"                    }",
									"                }",
									"            }",
									"            pm.environment.set(\"C-list_invoice\",list_invoice);",
									"            break;",
									"        case 4:",
									"        let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"            for(let item in jsData.data){",
									"                if(jsData.data[item].id == tnx_obj.object_id){",
									"                    isFound = true;",
									"                    new_invoice_obj = jsData.data[item];",
									"                    break;",
									"                }",
									"            }",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow\");",
									"            break;",
									"    }",
									"",
									"    if(page >= total_pages || isFound){",
									"        // must clear page & page_size",
									"        pm.environment.unset(\"C-page\");",
									"        pm.environment.unset(\"C-page_size\");",
									"",
									"        let invoice_obj;",
									"        switch(testcase){",
									"            case 2:",
									"                pm.test(\"Got all invoice! \" + list_invoice.length, function () {",
									"                    pm.expect(list_invoice.length > 0).to.be.true;",
									"                });",
									"                invoice_obj = list_invoice[getRandomInt(0,list_invoice.length - 1)];",
									"",
									"                // thêm lọc random invoice dc gen QR (partial_paid - had bank tnx, partial_paid - had manual tnx, un_paid)",
									"",
									"                pm.environment.set(\"C-invoice_obj\",invoice_obj);",
									"                console.log(\"=============================================\");",
									"                console.log(\"Will create QR transaction with invoice \",invoice_obj);",
									"                // console.log(\"--- value_at: \" + invoice_obj.value_at);",
									"                // console.log(\"--- due_at: \" + invoice_obj.due_at);",
									"                // console.log(\"--- total_amount: \" + invoice_obj.total_amount);",
									"                // console.log(\"--- paid_amount: \" + invoice_obj.paid_amount);",
									"                console.log(\"=============================================\");",
									"",
									"                if(list_invoice.length > 0){",
									"                    postman.setNextRequest(\"get_list_posting\"); // get_list_posting",
									"                } else {",
									"                    pm.test(\"DON'T HAVE INVOICE TO PAYMENT\", function () {",
									"                        pm.expect(true).to.be.false;",
									"                    });",
									"                    postman.setNextRequest(null);",
									"                }",
									"                break;",
									"            case 4:",
									"                invoice_obj = pm.environment.get(\"C-invoice_obj\");",
									"                let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"                ",
									"                pm.test(\"Update paid_amount \" + tnx_obj.amount, function () {",
									"                    // console.log(\"old: \", invoice_obj);",
									"                    // console.log(\"new: \", new_invoice_obj);",
									"                    pm.expect((invoice_obj.paid_amount + tnx_obj.amount).toFixed(2) == new_invoice_obj.paid_amount.toFixed(2)).to.be.true;",
									"                });",
									"",
									"                pm.test(\"Update payment_due_amount (số tiền còn nợ) - decrease \" + tnx_obj.amount, function () {",
									"                    console.log(\"act: \" + new_invoice_obj.payment_due_amount);",
									"                    console.log(\"exp: \" + (invoice_obj.payment_due_amount - tnx_obj.amount));",
									"                    pm.expect((invoice_obj.payment_due_amount - tnx_obj.amount).toFixed(2) == new_invoice_obj.payment_due_amount.toFixed(2)).to.be.true;",
									"                });",
									"",
									"                let isFullyPaid = pm.environment.get(\"C-isFullyPaid\");",
									"                if(isFullyPaid){",
									"                    pm.test(\"Update payment_status to fully_paid\", function () {",
									"                        pm.expect(\"fully_paid\" == new_invoice_obj.payment_status).to.be.true;",
									"                    });",
									"                } else {",
									"                    pm.test(\"Update payment_status to partial_paid\", function () {",
									"                        pm.expect(\"partial_paid\" == new_invoice_obj.payment_status).to.be.true;",
									"                    });",
									"                }",
									"",
									"                pm.test(\"Found invoice\", function () {",
									"                    pm.expect(isFound).to.be.true;",
									"                });",
									"",
									"                postman.setNextRequest(\"get_invoice_detail\"); // get_invoice_detail",
									"                break;",
									"            default:",
									"                console.log(\"Missing flow, end test\");",
									"                postman.setNextRequest(null);",
									"                break;",
									"        }",
									"    } else {",
									"        page++;",
									"        pm.environment.set(\"C-page\",page);",
									"",
									"        console.log(\"view next page (\" + page + \") to get more invoice\");",
									"        postman.setNextRequest(\"get_list_invoice\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get list invoice, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let page = pm.environment.get(\"C-page\");",
									"",
									"if(!page){",
									"    page = 1;",
									"    pm.environment.set(\"C-page\",page);",
									"",
									"    let page_size = 50;",
									"    pm.environment.set(\"C-page_size\",page_size);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/invoice/get-list?business_id={{C-business_id}}&page={{C-page}}&page_size={{C-page_size}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"invoice",
								"get-list"
							],
							"query": [
								{
									"key": "business_id",
									"value": "{{C-business_id}}"
								},
								{
									"key": "page",
									"value": "{{C-page}}"
								},
								{
									"key": "page_size",
									"value": "{{C-page_size}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get_invoice_detail",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let invoice_obj = pm.environment.get(\"C-invoice_obj\");",
									"let invoice_id = invoice_obj.invoice_id;",
									"console.log(\"view detail invoice: \" + invoice_id);",
									"",
									"pm.environment.set(\"C-invoice_id\",invoice_id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    // let testcase = pm.environment.get(\"C-testcase\");",
									"    console.log(\"Debug: \" + JSON.stringify(jsData));",
									"",
									"    let invoice_obj = pm.environment.get(\"C-invoice_obj\");",
									"    let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"    ",
									"    pm.test(\"Update paid_amount \" + tnx_obj.amount, function () {",
									"        // console.log(\"old: \", invoice_obj);",
									"        // console.log(\"new: \", jsData.data);",
									"        pm.expect((invoice_obj.paid_amount + tnx_obj.amount).toFixed(2) == jsData.data.paid_amount.toFixed(2)).to.be.true;",
									"    });",
									"",
									"    pm.test(\"Update payment_due_amount (số tiền còn nợ) - decrease \" + tnx_obj.amount, function () {",
									"        // console.log(\"old: \", invoice_obj);",
									"        // console.log(\"new: \", jsData.data);",
									"        pm.expect((invoice_obj.payment_due_amount - tnx_obj.amount).toFixed(2) == jsData.data.payment_due_amount.toFixed(2)).to.be.true;",
									"    });",
									"",
									"    let isFullyPaid = pm.environment.get(\"C-isFullyPaid\");",
									"    if(isFullyPaid){",
									"        pm.test(\"Update payment_status to fully_paid\", function () {",
									"            pm.expect(\"fully_paid\" == jsData.data.payment_status).to.be.true;",
									"        });",
									"    } else {",
									"        pm.test(\"Update payment_status to partial_paid\", function () {",
									"            pm.expect(\"partial_paid\" == jsData.data.payment_status).to.be.true;",
									"        });",
									"    }",
									"",
									"    postman.setNextRequest(\"get_list_posting\"); // get_list_posting",
									"} else {",
									"    console.log(\"Can't get invoice detail, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/invoice/get-one/{{C-invoice_id}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"invoice",
								"get-one",
								"{{C-invoice_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "transaction",
			"item": [
				{
					"name": "get_list_transaction",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let page = pm.environment.get(\"C-page\");",
									"",
									"if(!page){",
									"    page = 1;",
									"    pm.environment.set(\"C-page\",page);",
									"",
									"    let page_size = 50;",
									"    pm.environment.set(\"C-page_size\",page_size);",
									"}",
									"",
									"if(testcase == 4 && page == 1){",
									"    let configs = pm.environment.get(\"C-configs\");",
									"    if(configs.test_payment_method == \"viet_qr_pro_mb\"){",
									"        // setTimeout(function(){}, configs.timeout); => tự hook ko cần timeout nữa",
									"    }",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let configs = pm.environment.get(\"C-configs\");",
									"    let total_tnx = null;",
									"    try {",
									"        total_tnx = jsData.meta.total_rows;",
									"    } catch {",
									"        console.log(\"Can't get total tnx\");",
									"    }",
									"",
									"    switch(testcase){",
									"        case 2:",
									"            pm.environment.unset(\"C-page\");",
									"",
									"            pm.test(\"Got total tnx! \" + total_tnx, function () {",
									"                pm.expect(total_tnx != null).to.be.true;",
									"            });",
									"            pm.environment.set(\"C-total_tnx\",total_tnx);",
									"            console.log(\"total_tnx: \" + total_tnx);",
									"",
									"            testcase++;",
									"            pm.environment.set(\"C-testcase\",testcase);",
									"            ",
									"            if(configs.is_buyer_gen){",
									"                postman.setNextRequest(\"gen_viet_qr_by_buyer\"); // gen_viet_qr_by_buyer",
									"            } else {",
									"                postman.setNextRequest(\"gen_viet_qr\"); // gen_viet_qr",
									"            }",
									"            break;",
									"        case 4:",
									"            let page = pm.environment.get(\"C-page\");",
									"            let list_tnx = pm.environment.get(\"C-list_tnx\");",
									"            if(!list_tnx){",
									"                list_tnx = [];",
									"            }",
									"            for(let i in jsData.data){",
									"                list_tnx.push({",
									"                    \"id\":jsData.data[i].id,",
									"                    \"payment\":jsData.data[i].payment,",
									"                    \"payment_id\":jsData.data[i].payment_id,",
									"                    \"is_txn_bank\":jsData.data[i].is_txn_bank,",
									"                    \"object_id\":jsData.data[i].object_id,",
									"                    \"object_type\":jsData.data[i].object_type,",
									"                    \"txn_type\":jsData.data[i].txn_type,",
									"                    \"amount\":jsData.data[i].amount,",
									"                    \"value_at\":jsData.data[i].value_at,",
									"                    \"account_id\":jsData.data[i].account_id,",
									"                    \"account_alias_id\":jsData.data[i].account_alias_id,",
									"                    \"category_id\":jsData.data[i].category_id,",
									"                    \"short_desc\":jsData.data[i].short_desc,",
									"                    \"is_internal_transfer\":jsData.data[i].is_internal_transfer,",
									"                    \"fee_amount\":jsData.data[i].fee_amount,",
									"                    \"tax_amount\":jsData.data[i].tax_amount",
									"                });",
									"            }",
									"            pm.environment.set(\"C-list_tnx\",list_tnx);",
									"",
									"            if(page >= jsData.meta.total_pages || page >= configs.limit_page){",
									"                pm.environment.unset(\"C-page\");",
									"",
									"                let old_total_tnx = pm.environment.get(\"C-total_tnx\");",
									"                let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"                console.log(\"debug tnx_obj: \", tnx_obj);",
									"",
									"                let isFound = false;",
									"                if(configs.test_payment_method == \"viet_qr_pro_mb\" || configs.test_payment_method == \"bidv\"){",
									"                    pm.test(\"Total tnx increase 1\", function () {",
									"                        console.log(\"Actual: \" + total_tnx);",
									"                        console.log(\"Expected: \" + (old_total_tnx + 1));",
									"                        pm.expect(total_tnx == old_total_tnx + 1).to.be.true;",
									"                    });",
									"                    ",
									"                    for(let i in list_tnx){",
									"                        if(tnx_obj.object_id == list_tnx[i].object_id && list_tnx[i].is_txn_bank){ // list_tnx[i].description == tnx_obj.description => hiện tại ko ghi discription cho tnx bank nữa",
									"                            tnx_obj.tnx_id = list_tnx[i].id;",
									"                            tnx_obj.payment_id = list_tnx[i].payment_id;",
									"                            pm.environment.set(\"C-tnx_obj\",tnx_obj);",
									"                            isFound = true;",
									"                            pm.test(\"amount of tnx correctly! \" + tnx_obj.amount, function () {",
									"                                pm.expect(tnx_obj.amount == list_tnx[i].amount).to.be.true;",
									"                            });",
									"",
									"                            pm.test(\"txn_type of tnx correctly! \" + tnx_obj.txn_type, function () {",
									"                                pm.expect(tnx_obj.txn_type == list_tnx[i].txn_type).to.be.true;",
									"                            });",
									"",
									"                            pm.test(\"account_id of tnx correctly! \" + tnx_obj.account_debit, function () {",
									"                                pm.expect(tnx_obj.account_debit == list_tnx[i].account_id).to.be.true;",
									"                            });",
									"",
									"                            pm.test(\"category_id of tnx correctly! \" + tnx_obj.account_credit, function () {",
									"                                pm.expect(tnx_obj.account_credit == list_tnx[i].category_id).to.be.true;",
									"                            });",
									"",
									"                            pm.test(\"value_at of tnx correctly! \" + tnx_obj.value_at.substring(0,19), function () {",
									"                                let act_value_at = list_tnx[i].value_at.substring(0,19);",
									"                                console.log(\"actual value_at: \" + act_value_at);",
									"                                pm.expect(tnx_obj.value_at.substring(0,16) == act_value_at.substring(0,16)).to.be.true; // tạm thời lấy mốc giờ +7 nên fix cứng, sau này sẽ dùng biến",
									"                            });",
									"",
									"                            pm.test(\"object_id of tnx correctly! \" + tnx_obj.object_id, function () {",
									"                                pm.expect(tnx_obj.object_type).to.eql(list_tnx[i].object_type);",
									"                            });",
									"",
									"                            // payment_method => chỉ trả trong payment object",
									"                            // pm.test(\"payment_method of tnx is ! `bank_transfer`\", function () {",
									"                            //     pm.expect(\"bank_transfer\").to.eql(list_tnx[i].payment_method);",
									"                            // });",
									"                            break;",
									"                        }",
									"                    }",
									"                } else {",
									"                    pm.test(\"Total tnx increase 2\", function () {",
									"                        console.log(\"Actual: \" + total_tnx);",
									"                        console.log(\"Expected: \" + (old_total_tnx + 2));",
									"                        pm.expect(total_tnx == old_total_tnx + 2).to.be.true;",
									"                    });",
									"                    ",
									"                    let payment_tnx = null, fee_tnx = null;",
									"                    let count_tnx = 0;",
									"                    for(let i in list_tnx){",
									"                        if(list_tnx[i].payment != null){",
									"                            if((tnx_obj.object_id == list_tnx[i].object_id || tnx_obj.object_id == list_tnx[i].payment.object_id) && list_tnx[i].is_txn_bank){ // xử lý tạm vì có thể bị miss payment",
									"                                count_tnx++;",
									"                                if(list_tnx[i].txn_type == \"in\"){",
									"                                    payment_tnx = list_tnx[i];",
									"                                    // console.log(\"payment_tnx:\",payment_tnx);",
									"                                } else {",
									"                                    fee_tnx = list_tnx[i];",
									"                                    // console.log(\"fee_tnx:\",fee_tnx);",
									"                                }",
									"                            }",
									"                        } else {",
									"                            if(tnx_obj.object_id == list_tnx[i].object_id && list_tnx[i].is_txn_bank){ // xử lý tạm vì có thể bị miss payment",
									"                                count_tnx++;",
									"                                if(list_tnx[i].txn_type == \"in\"){",
									"                                    payment_tnx = list_tnx[i];",
									"                                    // console.log(\"payment_tnx:\",payment_tnx);",
									"                                } else {",
									"                                    fee_tnx = list_tnx[i];",
									"                                    // console.log(\"fee_tnx:\",fee_tnx);",
									"                                }",
									"                            }",
									"                        }",
									"",
									"                        if(count_tnx == 2){",
									"                            isFound = true;",
									"                            break;",
									"                        }",
									"                    }",
									"",
									"                    try {",
									"                        tnx_obj.tnx_payment_id = payment_tnx.id;",
									"                        // console.log(\"payment_tnx: \", payment_tnx);",
									"                        tnx_obj.tnx_fee_id = fee_tnx.id;",
									"                        // console.log(\"fee_tnx: \", fee_tnx);",
									"                        tnx_obj.payment_id = payment_tnx.payment_id;",
									"                        console.log(\"payment_id: \", payment_tnx.payment_id);",
									"                    } catch {",
									"                        console.log(\"missing info\");",
									"                    }",
									"                    pm.environment.set(\"C-tnx_obj\",tnx_obj);",
									"                    ",
									"                    pm.test(\"amount of tnx correctly! \" + tnx_obj.amount, function () {",
									"                        pm.expect(tnx_obj.amount == payment_tnx.amount).to.be.true;",
									"                    });",
									"",
									"                    pm.test(\"base_fee_amount of tnx correctly! \" + tnx_obj.base_fee_amount, function () {",
									"                        pm.expect(tnx_obj.base_fee_amount == fee_tnx.amount).to.be.true;",
									"                    });",
									"",
									"                    pm.test(\"account_id of payment_tnx correctly! \" + tnx_obj.account_debit, function () {",
									"                        pm.expect(tnx_obj.account_debit == payment_tnx.account_id).to.be.true;",
									"                    });",
									"",
									"                    pm.test(\"category_id of payment_tnx correctly! \" + tnx_obj.account_credit, function () {",
									"                        pm.expect(tnx_obj.account_credit == payment_tnx.category_id).to.be.true;",
									"                    });",
									"",
									"                    pm.test(\"account_id of fee_tnx correctly! \" + tnx_obj.account_debit, function () {",
									"                        pm.expect(tnx_obj.account_debit == fee_tnx.account_id).to.be.true;",
									"                    });",
									"",
									"                    let account_fee = pm.environment.get(\"C-account_fee\");",
									"                    pm.test(\"category_id of fee_tnx correctly! \" + tnx_obj.account_credit, function () {",
									"                        pm.expect(account_fee.id == fee_tnx.category_id).to.be.true;",
									"                    });",
									"",
									"                    pm.test(\"value_at of tnx correctly! \" + tnx_obj.value_at.substring(0,19), function () {",
									"                        let act_value_at = payment_tnx.value_at.substring(0,19);",
									"                        console.log(\"actual value_at: \" + act_value_at);",
									"                        pm.expect(tnx_obj.value_at.substring(0,16) == act_value_at.substring(0,16)).to.be.true; // tạm thời lấy mốc giờ +7 nên fix cứng, sau này sẽ dùng biến",
									"                    });",
									"",
									"                    pm.test(\"object_type of payment_tnx correctly! \" + tnx_obj.object_type, function () {",
									"                        pm.expect(tnx_obj.object_type).to.eql(payment_tnx.object_type);",
									"                    });",
									"",
									"                    pm.test(\"object_type of fee_tnx correctly! \", function () {",
									"                        pm.expect(\"transaction\").to.eql(fee_tnx.object_type);",
									"                    });",
									"",
									"                    pm.test(\"object_id of payment_tnx correctly! \" + tnx_obj.object_id, function () {",
									"                        pm.expect(tnx_obj.object_id).to.eql(payment_tnx.object_id);",
									"                    });",
									"",
									"                    pm.test(\"object_id of fee_tnx correctly! \" + tnx_obj.object_id, function () {",
									"                        pm.expect(tnx_obj.tnx_payment_id).to.eql(fee_tnx.object_id);",
									"                    });",
									"                }",
									"",
									"                pm.test(\"Found new(2) tnx\", function () {",
									"                    pm.expect(isFound).to.be.true;",
									"                });",
									"",
									"                if(isFound){",
									"                    postman.setNextRequest(\"get_transaction_detail\"); // get_transaction_detail (get tnx detail đang lỗi nên tạm thời skip) get_report_cash_flow",
									"                } else {",
									"                    postman.setNextRequest(null);",
									"                }",
									"            } else {",
									"                page++;",
									"                pm.environment.set(\"C-page\",page);",
									"",
									"                console.log(\"view next page (\" + page + \") to get more transaction\");",
									"                postman.setNextRequest(\"get_list_transaction\");",
									"            }",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get list tnx, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-ledger/api/v1/transaction/get-list?page={{C-page}}&page_size={{C-page_size}}&sort&is_txn_bank=true",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-ledger",
								"api",
								"v1",
								"transaction",
								"get-list"
							],
							"query": [
								{
									"key": "page",
									"value": "{{C-page}}"
								},
								{
									"key": "page_size",
									"value": "{{C-page_size}}"
								},
								{
									"key": "sort",
									"value": null
								},
								{
									"key": "is_txn_bank",
									"value": "true"
								},
								{
									"key": "txn_type",
									"value": "in",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get_transaction_detail",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"",
									"let configs = pm.environment.get(\"C-configs\");",
									"let tnx_id;",
									"if(configs.test_payment_method == \"viet_qr_pro_mb\" || configs.test_payment_method == \"bidv\"){",
									"    tnx_id = tnx_obj.tnx_id;",
									"} else {",
									"    let count_check = pm.environment.get(\"C-count_check\");",
									"    if(!count_check){",
									"        count_check = 1;",
									"        pm.environment.set(\"C-count_check\",count_check);",
									"",
									"        tnx_id = tnx_obj.tnx_payment_id;",
									"        console.log(\"Check detail payment tnx\");",
									"    } else {",
									"        tnx_id = tnx_obj.tnx_fee_id;",
									"        console.log(\"Check detail fee tnx\");",
									"    }",
									"}",
									"console.log(\"view detail tnx: \" + tnx_id);",
									"",
									"pm.environment.set(\"C-tnx_id\",tnx_id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    // let testcase = pm.environment.get(\"C-testcase\");",
									"    let configs = pm.environment.get(\"C-configs\");",
									"    console.log(\"Debug: \" + JSON.stringify(jsData));",
									"    let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"",
									"    if(configs.test_payment_method == \"viet_qr_pro_mb\" || configs.test_payment_method == \"bidv\"){",
									"        pm.test(\"amount of tnx correctly! \" + tnx_obj.amount, function () {",
									"            pm.expect(tnx_obj.amount == jsData.data.amount).to.be.true;",
									"        });",
									"",
									"        pm.test(\"txn_type of tnx correctly! \" + tnx_obj.txn_type, function () {",
									"            pm.expect(tnx_obj.txn_type == jsData.data.txn_type).to.be.true;",
									"        });",
									"",
									"        // dev ko lưu description ở tnx nữa => chuyển qua payment",
									"        // pm.test(\"description of tnx correctly! \" + tnx_obj.description, function () {",
									"        //     pm.expect(tnx_obj.description == jsData.data.description).to.be.true;",
									"        // });",
									"",
									"        pm.test(\"value_at of tnx correctly! \" + tnx_obj.value_at.substring(0,19), function () {",
									"            let act_value_at = jsData.data.value_at.substring(0,19);",
									"            console.log(\"actual value_at: \" + act_value_at);",
									"            pm.expect(tnx_obj.value_at.substring(0,16) == act_value_at.substring(0,16)).to.be.true;",
									"        });",
									"",
									"        pm.test(\"object_type of tnx correctly! \" + tnx_obj.object_type, function () {",
									"            pm.expect(tnx_obj.object_type).to.eql(jsData.data.object_type);",
									"        });",
									"",
									"        pm.test(\"object_id of tnx correctly! \" + tnx_obj.object_id, function () {",
									"            pm.expect(tnx_obj.object_id).to.eql(jsData.data.object_id);",
									"        });",
									"",
									"        // payment_method => chỉ trả trong payment object",
									"        // pm.test(\"payment_method of tnx is bank_transfer\", function () {",
									"        //     pm.expect(\"bank_transfer\").to.eql(jsData.data.payment_method);",
									"        // });",
									"",
									"        postman.setNextRequest(\"get_list_payment\"); // get_list_payment",
									"    } else {",
									"        let count_check = pm.environment.get(\"C-count_check\");",
									"",
									"        if(count_check == 1){",
									"            count_check++;",
									"            pm.test(\"amount of tnx correctly! \" + tnx_obj.amount, function () {",
									"                pm.expect(tnx_obj.amount == jsData.data.amount).to.be.true;",
									"            });",
									"",
									"            pm.test(\"value_at of tnx correctly! \" + tnx_obj.value_at.substring(0,19), function () {",
									"                let act_value_at = jsData.data.value_at.substring(0,19);",
									"                console.log(\"actual value_at: \" + act_value_at);",
									"                pm.expect(tnx_obj.value_at.substring(0,16) == act_value_at.substring(0,16)).to.be.true;",
									"            });",
									"",
									"            pm.test(\"object_type of tnx correctly! \" + tnx_obj.object_type, function () {",
									"                pm.expect(tnx_obj.object_type).to.eql(jsData.data.object_type);",
									"            });",
									"",
									"            pm.test(\"object_id of tnx correctly! \" + tnx_obj.object_id, function () {",
									"                pm.expect(tnx_obj.object_id).to.eql(jsData.data.object_id);",
									"            });",
									"",
									"            pm.environment.set(\"C-count_check\",count_check);",
									"            postman.setNextRequest(\"get_transaction_detail\"); // get_transaction_detail",
									"        } else {",
									"            pm.environment.unset(\"C-count_check\");",
									"            pm.test(\"amount of tnx correctly! \" + tnx_obj.base_fee_amount, function () {",
									"                pm.expect(tnx_obj.base_fee_amount == jsData.data.amount).to.be.true;",
									"            });",
									"",
									"            pm.test(\"value_at of tnx correctly! \" + tnx_obj.value_at.substring(0,19), function () {",
									"                let act_value_at = jsData.data.value_at.substring(0,19);",
									"                console.log(\"actual value_at: \" + act_value_at);",
									"                pm.expect(tnx_obj.value_at.substring(0,16) == act_value_at.substring(0,16)).to.be.true;",
									"            });",
									"",
									"            pm.test(\"object_type of tnx correctly! \" + tnx_obj.object_type, function () {",
									"                pm.expect(\"transaction\").to.eql(jsData.data.object_type);",
									"            });",
									"",
									"            pm.test(\"object_id of tnx correctly! \" + tnx_obj.object_id, function () {",
									"                pm.expect(tnx_obj.tnx_payment_id).to.eql(jsData.data.object_id);",
									"            });",
									"",
									"            postman.setNextRequest(\"get_list_payment\"); // get_list_payment",
									"        }",
									"    }",
									"} else {",
									"    console.log(\"Can't get internal contact detail, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{finone_url}}/fo-ledger/api/v1/transaction/get-one/{{C-tnx_id}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-ledger",
								"api",
								"v1",
								"transaction",
								"get-one",
								"{{C-tnx_id}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.request.headers.add({",
							" key: \"authorization\",",
							" value: \"Bearer \" + pm.environment.get(\"C-userToken\")",
							"});",
							"",
							"pm.request.headers.add({",
							" key: \"Content-Type\",",
							" value: \"application/json\"",
							"});"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "notification",
			"item": [
				{
					"name": "get_list_notification",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "authorization",
								"value": "Bearer {{C-userToken}}"
							},
							{
								"key": "x-locale",
								"value": "vi"
							},
							{
								"key": "x-location-timezone",
								"value": "Asia/Ho_Chi_Minh"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-notification/api/v1/notification/get-list?page={{C-page}}&page_size={{C-page}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-notification",
								"api",
								"v1",
								"notification",
								"get-list"
							],
							"query": [
								{
									"key": "page",
									"value": "{{C-page}}"
								},
								{
									"key": "page_size",
									"value": "{{C-page}}"
								}
							]
						},
						"description": "Generated from cURL: curl 'https://stg-api.finan.one/fo-notification/api/v1/notification/get-list?page=1&page_size=10' \\\n  -H 'authority: stg-api.finan.one' \\\n  -H 'accept: */*' \\\n  -H 'accept-language: en-US,en;q=0.9,vi;q=0.8' \\\n  -H 'authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJGTyBVc2VyIiwic3ViIjoiYmY4NmNmZDQtMzljNi00Yzg4LTliNGMtMGZiMGI5MzYxMGJmIiwiYXVkIjpbIkZPIFVzZXIiXSwiZXhwIjoxNzI2MDQ4NDk0LCJuYmYiOjE3MjM0NTY0OTQsImlhdCI6MTcyMzQ1NjQ5NCwib3JnX2lkIjoiMTM0IiwiYnVzaW5lc3NfaWQiOiIxMzQiLCJkZXZpY2VfaWQiOiJlNzY2MWRhYy0wNDVkLTQxMTMtYjE5NC03ZTBlNzI0MzQ1ZGYiLCJwbGF0Zm9ybV9rZXkiOiJkZXNrdG9wLXdlYiIsInVzZXJfaWQiOiJiZjg2Y2ZkNC0zOWM2LTRjODgtOWI0Yy0wZmIwYjkzNjEwYmYiLCJsb2dpbl9tZXRob2QiOiJwYXNzd29yZCIsImFwcF92ZXJzaW9uIjoiMS4xLjEiLCJzZWN1cml0eV9yb2xlIjowLCJyZWZyZXNoX3Rva2VuX2lkIjoiZmRhOWIyZTEtOGY0Ni00NjAyLWI4YzItMWQ3YzQ1OTU3MjM0In0.Cxjo7GDneFHXJb60u_zpe_Rt3Yq6KmFc8CcmMivwdhc' \\\n  -H 'origin: https://book-stg.finan.one' \\\n  -H 'referer: https://book-stg.finan.one/' \\\n  -H 'sec-ch-ua: \"Google Chrome\";v=\"113\", \"Chromium\";v=\"113\", \"Not-A.Brand\";v=\"24\"' \\\n  -H 'sec-ch-ua-mobile: ?0' \\\n  -H 'sec-ch-ua-platform: \"macOS\"' \\\n  -H 'sec-fetch-dest: empty' \\\n  -H 'sec-fetch-mode: cors' \\\n  -H 'sec-fetch-site: same-site' \\\n  -H 'user-agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.0.0 Safari/537.36' \\\n  -H 'x-locale: vi' \\\n  -H 'x-location-timezone: Asia/Ho_Chi_Minh' \\\n  -H 'x-platform-key: desktop-web' \\\n  --compressed"
					},
					"response": []
				}
			]
		},
		{
			"name": "posting",
			"item": [
				{
					"name": "get_list_posting",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let page = pm.environment.get(\"C-page\");",
									"",
									"if(!page){",
									"    page = 1;",
									"    pm.environment.set(\"C-page\",page);",
									"",
									"    let page_size = 50;",
									"    pm.environment.set(\"C-page_size\",page_size);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"/**",
									" * object_type: transaction, invoice",
									" * object_id => id respective with object_type (tnx_id, invoice_id)",
									" * object_id_ref => use for invoice with product/item (product_id, item_id)",
									" * is_credit",
									" * created_at",
									" * value_at",
									" */",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = JSON.parse(responseBody);",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let total_pages = 1;",
									"    let total_records = 0;",
									"    try {",
									"        total_pages = jsData.meta.total_pages;",
									"        total_records = jsData.meta.total_rows;",
									"    } catch {",
									"        console.log(\"currently, this branch with null data\");",
									"    }",
									"    let page = pm.environment.get(\"C-page\");",
									"",
									"    let list_posting, old_list_posting;",
									"    switch(testcase){",
									"        case 2:",
									"            list_posting = pm.environment.get(\"C-list_posting\");",
									"            if(!list_posting){",
									"                list_posting = [];",
									"            }",
									"            break;",
									"        case 4:",
									"            old_list_posting = pm.environment.get(\"C-old_list_posting\");",
									"            if(!old_list_posting){",
									"                old_list_posting = pm.environment.get(\"C-list_posting\");",
									"                pm.environment.unset(\"C-list_posting\");",
									"                pm.environment.set(\"C-old_list_posting\",old_list_posting);",
									"            }",
									"",
									"            list_posting = pm.environment.get(\"C-list_posting\");",
									"            if(!list_posting){",
									"                list_posting = [];",
									"            }",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow\");",
									"            break;",
									"    }",
									"",
									"    for(let item in jsData.data){",
									"        list_posting[list_posting.length] = {",
									"            \"posting_id\":jsData.data[item].id,",
									"            \"account_id\":jsData.data[item].account_id,",
									"            \"amount\":jsData.data[item].amount,",
									"            \"branch_id\":jsData.data[item].branch_id,",
									"            \"created_at\":jsData.data[item].created_at,",
									"            \"currency\":jsData.data[item].currency,",
									"            \"deleted_at\":jsData.data[item].deleted_at,",
									"            \"is_credit\":jsData.data[item].is_credit,",
									"            \"is_final_status\":jsData.data[item].is_final_status,",
									"            \"object_id_ref\":jsData.data[item].object_id_ref,",
									"            \"object_id\":jsData.data[item].object_id,",
									"            \"object_type\":jsData.data[item].object_type,",
									"            // \"value_at\":jsData.data[item].value_at,",
									"            \"short_desc\":jsData.data[item].short_desc",
									"        }",
									"    }",
									"    pm.environment.set(\"C-list_posting\",list_posting);",
									"",
									"    let configs = pm.environment.get(\"C-configs\");",
									"    if(page >= total_pages || page >= configs.limit_page){",
									"        // must clear page & page_size",
									"        pm.environment.unset(\"C-page\");",
									"        pm.environment.unset(\"C-page_size\");",
									"",
									"        switch(testcase){",
									"            case 2:",
									"                pm.test(\"Got all posting! \" + list_posting.length, function () {",
									"                    pm.expect(list_posting.length > 0).to.be.true;",
									"                });",
									"                pm.environment.set(\"C-total_records\",total_records);",
									"",
									"                postman.setNextRequest(\"get_list_payment\"); // get_list_payment",
									"                break;",
									"            case 4:",
									"                let old_total_records = pm.environment.get(\"C-total_records\");",
									"                let configs = pm.environment.get(\"C-configs\");",
									"                let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"                console.log(\"tnx_obj: \",tnx_obj);",
									"                let payment_obj = pm.environment.get(\"C-payment_obj\");",
									"                let account_receivable = pm.environment.get(\"C-account_receivable\");",
									"                // console.log(\"account_receivable: \",account_receivable);",
									"                let account_fee = pm.environment.get(\"C-account_fee\");",
									"                // console.log(\"account_fee: \",account_fee);",
									"                let count = 0;",
									"                let foundAll = false;",
									"",
									"                if(configs.test_payment_method == \"viet_qr_pro_mb\" || configs.test_payment_method == \"bidv\"){",
									"                    pm.test(\"Have 2 new records\", function () {",
									"                        console.log(\"old: \" + old_total_records);",
									"                        console.log(\"new: \" + total_records);",
									"                        pm.expect(total_records == old_total_records + 2).to.be.true;",
									"                    });",
									"",
									"                    for(let i in list_posting){",
									"                        if(list_posting[i].object_type == \"transaction\" && list_posting[i].object_id == tnx_obj.tnx_id){",
									"                            // console.log(\"list_posting[i]: \", list_posting[i]);",
									"                            if(list_posting[i].is_credit){",
									"                                count++;",
									"                                pm.test(\"Found account_receivable for credit\", function () {",
									"                                    pm.expect(list_posting[i].account_id == account_receivable.id).to.be.true;",
									"                                });",
									"",
									"                                pm.test(\"--- amount correctly \" + tnx_obj.amount, function () {",
									"                                    console.log(\"actual: \" + list_posting[i].amount);",
									"                                    pm.expect(list_posting[i].amount.toFixed(2) == tnx_obj.amount.toFixed(2)).to.be.true;",
									"                                });",
									"                            } else {",
									"                                count++;",
									"                                pm.test(\"Found account_debit for debit\", function () {",
									"                                    // console.log(\"account_debit: \" + tnx_obj.account_debit);",
									"                                    pm.expect(list_posting[i].account_id == tnx_obj.account_debit).to.be.true;",
									"                                });",
									"",
									"                                pm.test(\"--- amount correctly \" + tnx_obj.amount, function () {",
									"                                    console.log(\"actual: \" + list_posting[i].amount);",
									"                                    pm.expect(list_posting[i].amount.toFixed(2) == tnx_obj.amount.toFixed(2)).to.be.true;",
									"                                });",
									"                            }",
									"",
									"                            if(count == 2){",
									"                                foundAll = true;",
									"                                break;",
									"                            }",
									"                        }",
									"                    }",
									"                } else {",
									"                    // need handle case fee = 0",
									"                    pm.test(\"Have 4 new records\", function () {",
									"                        console.log(\"old: \" + old_total_records);",
									"                        console.log(\"new: \" + total_records);",
									"                        pm.expect(total_records == old_total_records + 4).to.be.true;",
									"                    });",
									"",
									"                    for(let i in list_posting){",
									"                        if(list_posting[i].object_type == \"transaction\" && list_posting[i].object_id == tnx_obj.tnx_payment_id){",
									"                            // console.log(\"list_posting[i]: \", list_posting[i]);",
									"                            count++;",
									"                            console.log(\"posting \" + count + \": \", list_posting[i]);",
									"                            if(list_posting[i].is_credit){",
									"                                pm.test(\"Found account_receivable for credit - amount correctly \" + tnx_obj.amount, function () {",
									"                                    console.log(\"actual: \" + list_posting[i].amount);",
									"                                    pm.expect(list_posting[i].amount == tnx_obj.amount && list_posting[i].account_id == account_receivable.id).to.be.true;",
									"                                });",
									"                            } else {",
									"                                pm.test(\"Found bank account for debit - amount correctly \" + tnx_obj.amount, function () {",
									"                                    console.log(\"actual: \" + list_posting[i].amount);",
									"                                    pm.expect(list_posting[i].amount == tnx_obj.amount && list_posting[i].account_id == tnx_obj.account_debit).to.be.true;",
									"                                });",
									"                            }",
									"                        } else if(list_posting[i].object_type == \"transaction\" && list_posting[i].object_id == tnx_obj.tnx_fee_id){",
									"                            count++;",
									"                            console.log(\"posting \" + count + \": \", list_posting[i]);",
									"                            if(list_posting[i].is_credit){",
									"                                pm.test(\"Found bank account for credit - amount correctly \" + tnx_obj.fee_amount, function () {",
									"                                    console.log(\"actual: \" + list_posting[i].amount);",
									"                                    pm.expect(list_posting[i].amount == tnx_obj.fee_amount && list_posting[i].account_id == tnx_obj.account_debit).to.be.true;",
									"                                });",
									"                            } else {",
									"                                pm.test(\"Found account_fee for debit - amount correctly \" + tnx_obj.fee_amount, function () {",
									"                                    console.log(\"actual: \" + list_posting[i].amount);",
									"                                    console.log(\"list_posting[i].account_id: \" + list_posting[i].account_id);",
									"                                    console.log(\"account_fee.id: \" + account_fee.id);",
									"                                    pm.expect(list_posting[i].amount == tnx_obj.fee_amount && list_posting[i].account_id == account_fee.id).to.be.true;",
									"                                });",
									"                            }",
									"                        }",
									"",
									"                        if(count == 4){",
									"                            foundAll = true;",
									"                            break;",
									"                        }",
									"                    }",
									"                }",
									"",
									"                pm.test(\"Found all posting\", function () {",
									"                    pm.expect(foundAll).to.be.true;",
									"                });",
									"",
									"                if(configs.is_check_report){",
									"                    postman.setNextRequest(\"get_chart_balance_change\"); // get_report_cash_flow , get_chart_balance_change",
									"                } else {",
									"                    console.log(\"-------- End Testsuite 51 --------\");",
									"                    postman.setNextRequest(null);",
									"                }",
									"                break;",
									"            default:",
									"                console.log(\"Missing flow, end test\");",
									"                postman.setNextRequest(null);",
									"                break;",
									"        }",
									"    } else {",
									"        page++;",
									"        pm.environment.set(\"C-page\",page);",
									"",
									"        console.log(\"view next page (\" + page + \") to get more posting\");",
									"        postman.setNextRequest(\"get_list_posting\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get list posting, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-ledger/api/v1/posting/get-list?page={{C-page}}&page_size={{C-page_size}}&search=&sort=",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-ledger",
								"api",
								"v1",
								"posting",
								"get-list"
							],
							"query": [
								{
									"key": "page",
									"value": "{{C-page}}"
								},
								{
									"key": "page_size",
									"value": "{{C-page_size}}"
								},
								{
									"key": "search",
									"value": ""
								},
								{
									"key": "sort",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.request.headers.add({",
							" key: \"authorization\",",
							" value: \"Bearer \" + pm.environment.get(\"C-userToken\")",
							"});",
							"",
							"pm.request.headers.add({",
							" key: \"Content-Type\",",
							" value: \"application/json\"",
							"});"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "payment",
			"item": [
				{
					"name": "get_list_payment",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let page = pm.environment.get(\"C-page\");",
									"",
									"if(!page){",
									"    page = 1;",
									"    pm.environment.set(\"C-page\",page);",
									"",
									"    let page_size = 50;",
									"    pm.environment.set(\"C-page_size\",page_size);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = JSON.parse(responseBody);",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let configs = pm.environment.get(\"C-configs\");",
									"",
									"    let total_payment = null;",
									"    try {",
									"        total_payment = jsData.meta.total_rows;",
									"    } catch {",
									"        console.log(\"Can't get total payment\");",
									"    }",
									"",
									"    switch(testcase){",
									"        case 2:",
									"            pm.environment.unset(\"C-page\");",
									"            ",
									"            pm.test(\"Got total payment! \" + total_payment, function () {",
									"                pm.expect(total_payment != null).to.be.true;",
									"            });",
									"            pm.environment.set(\"C-total_payment\",total_payment);",
									"            console.log(\"total_payment: \" + total_payment);",
									"",
									"            if(configs.is_check_report){",
									"                postman.setNextRequest(\"get_chart_balance_change\"); // get_chart_balance_change",
									"            } else {",
									"                postman.setNextRequest(\"get_list_transaction\"); // get_list_transaction",
									"            }",
									"            break;",
									"        case 4:",
									"            let page = pm.environment.get(\"C-page\");",
									"            let list_payment = pm.environment.get(\"C-list_payment\");",
									"            if(!list_payment){",
									"                list_payment = [];",
									"            }",
									"            for(let i in jsData.data){",
									"                list_payment.push({",
									"                    \"id\":jsData.data[i].id,",
									"                    \"before_fee_amount\":jsData.data[i].before_fee_amount,",
									"                    \"after_fee_amount\":jsData.data[i].after_fee_amount,",
									"                    \"fee_amount\":jsData.data[i].fee_amount,",
									"                    \"payment_method\":jsData.data[i].payment_method,",
									"                    \"status\":jsData.data[i].status,",
									"                    \"description\":jsData.data[i].description,",
									"                    \"value_at\":jsData.data[i].value_at,",
									"                    \"object_type\":jsData.data[i].object_type,",
									"                    \"object_id\":jsData.data[i].object_id,",
									"                    \"is_txn_bank\":jsData.data[i].is_txn_bank,",
									"                    \"bank_transaction_id\":jsData.data[i].bank_transaction_id,",
									"                    \"account_id\":jsData.data[i].account_id",
									"                });",
									"            }",
									"            pm.environment.set(\"C-list_payment\",list_payment);",
									"",
									"            if(page >= jsData.meta.total_pages || page >= configs.limit_page){",
									"                pm.environment.unset(\"C-page\");",
									"",
									"                let old_total_payment = pm.environment.get(\"C-total_payment\");",
									"                let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"                let payment_obj = pm.environment.get(\"C-payment_obj\");",
									"",
									"                pm.test(\"Total tnx increase 1\", function () {",
									"                    console.log(\"Actual: \" + total_payment);",
									"                    console.log(\"Expected: \" + (old_total_payment + 1));",
									"                    pm.expect(total_payment == old_total_payment + 1).to.be.true;",
									"                });",
									"",
									"                let isFound = false;",
									"                let act_payment_obj = null;",
									"                console.log(\"tnx_obj.payment_id: \" + tnx_obj.payment_id);",
									"                for(let i in list_payment){",
									"                    // console.log(\"list_payment[i].id: \" + list_payment[i].id);",
									"                    if(tnx_obj.payment_id == list_payment[i].id){",
									"                        isFound = true;",
									"                        act_payment_obj = list_payment[i];",
									"                        console.log(\"act_payment_obj: \", act_payment_obj);",
									"                        break;",
									"                    }",
									"                }",
									"",
									"                pm.test(\"Found new payment\", function () {",
									"                    pm.expect(isFound).to.be.true;",
									"                });",
									"",
									"                if(configs.test_payment_method == \"viet_qr_pro_mb\" || configs.test_payment_method == \"bidv\"){",
									"                    pm.test(\"after_fee_amount of payment correctly! \" + tnx_obj.amount, function () {",
									"                        console.log(\"act: \" + act_payment_obj.after_fee_amount);",
									"                        pm.expect(tnx_obj.amount == act_payment_obj.after_fee_amount).to.be.true;",
									"                    });",
									"                    // tnx_obj.after_fee_amount = act_payment_obj.after_fee_amount;",
									"",
									"                    pm.test(\"fee_amount of payment is 0\", function () { // sẽ handle fee_amount ở va",
									"                        pm.expect(0 == act_payment_obj.fee_amount).to.be.true;",
									"                    });",
									"                    tnx_obj.fee_amount = act_payment_obj.fee_amount;",
									"",
									"                    // payment ko trả về category",
									"                    // pm.test(\"category_id of payment is: \" + tnx_obj.account_credit, function () {",
									"                    //     console.log(\"act: \" + act_payment_obj.category_id);",
									"                    //     pm.expect(tnx_obj.account_credit == act_payment_obj.category_id).to.be.true;",
									"                    // });",
									"                } else {",
									"                    pm.test(\"before_fee_amount of payment correctly! \" + tnx_obj.amount, function () {",
									"                        console.log(\"act: \" + act_payment_obj.before_fee_amount);",
									"                        pm.expect(tnx_obj.amount == act_payment_obj.before_fee_amount).to.be.true;",
									"                    });",
									"",
									"                    pm.test(\"after_fee_amount of payment correctly! \" + payment_obj.notify_data.payment_details[0].net_amount, function () {",
									"                        console.log(\"act: \" + act_payment_obj.after_fee_amount);",
									"                        pm.expect(payment_obj.notify_data.payment_details[0].net_amount == act_payment_obj.after_fee_amount).to.be.true;",
									"                    });",
									"                    tnx_obj.after_fee_amount = act_payment_obj.after_fee_amount;",
									"",
									"                    pm.test(\"fee_amount of payment is \" + payment_obj.notify_data.payment_details[0].base_fee_amount, function () { // sẽ handle fee_amount ở va",
									"                        pm.expect(payment_obj.notify_data.payment_details[0].base_fee_amount == act_payment_obj.fee_amount).to.be.true;",
									"                    });",
									"                    tnx_obj.fee_amount = act_payment_obj.fee_amount;",
									"                }",
									"",
									"                pm.test(\"status of payment is success! \", function () {",
									"                    console.log(\"act: \" + act_payment_obj.status);",
									"                    pm.expect(\"success\" == act_payment_obj.status).to.be.true;",
									"                });",
									"",
									"                pm.test(\"description of payment correctly! \" + tnx_obj.description, function () {",
									"                    console.log(\"act: \" + act_payment_obj.description);",
									"                    pm.expect(tnx_obj.description == act_payment_obj.description).to.be.true;",
									"                });",
									"",
									"                pm.test(\"account_id of payment is: \" + tnx_obj.account_debit, function () {",
									"                    console.log(\"act: \" + act_payment_obj.account_id);",
									"                    pm.expect(tnx_obj.account_debit == act_payment_obj.account_id).to.be.true;",
									"                });",
									"",
									"                pm.test(\"value_at of payment correctly! \" + tnx_obj.value_at, function () {",
									"                    let act_value_at = act_payment_obj.value_at;",
									"                    console.log(\"actual value_at: \" + act_value_at.substring(0,19));",
									"                    pm.expect(tnx_obj.value_at.substring(0,16) == act_value_at.substring(0,16)).to.be.true; // tạm thời lấy mốc giờ +7 nên fix cứng, sau này sẽ dùng biến",
									"                });",
									"",
									"                pm.test(\"object_type of payment correctly! \" + tnx_obj.object_type, function () {",
									"                    pm.expect(tnx_obj.object_type).to.eql(act_payment_obj.object_type);",
									"                });",
									"",
									"                pm.test(\"object_id of payment correctly! \" + tnx_obj.object_id, function () {",
									"                    pm.expect(tnx_obj.object_id).to.eql(act_payment_obj.object_id);",
									"                });",
									"",
									"                pm.test(\"payment_method of payment is \" + tnx_obj.payment_method, function () {",
									"                    pm.expect(tnx_obj.payment_method).to.eql(act_payment_obj.payment_method);",
									"                });",
									"",
									"                pm.environment.set(\"C-tnx_obj\",tnx_obj);",
									"",
									"                postman.setNextRequest(\"get_payment_detail\"); // get_payment_detail",
									"            } else {",
									"                page++;",
									"                pm.environment.set(\"C-page\",page);",
									"",
									"                console.log(\"view next page (\" + page + \") to get more payment\");",
									"                postman.setNextRequest(\"get_list_payment\");",
									"            }",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get list payment, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-ledger/api/v1/payment/get-list?business_id={{C-business_id}}&page={{C-page}}&page_size={{C-page_size}}&sort",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-ledger",
								"api",
								"v1",
								"payment",
								"get-list"
							],
							"query": [
								{
									"key": "business_id",
									"value": "{{C-business_id}}"
								},
								{
									"key": "page",
									"value": "{{C-page}}"
								},
								{
									"key": "page_size",
									"value": "{{C-page_size}}"
								},
								{
									"key": "sort",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get_payment_detail",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"let payment_id = tnx_obj.payment_id;",
									"console.log(\"view detail payment: \" + payment_id);",
									"",
									"pm.environment.set(\"C-payment_id\",payment_id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    // let testcase = pm.environment.get(\"C-testcase\");",
									"    let configs = pm.environment.get(\"C-configs\");",
									"    // console.log(\"Debug: \" + JSON.stringify(jsData));",
									"",
									"    let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"",
									"    if(configs.test_payment_method == \"viet_qr_pro_mb\" || configs.test_payment_method == \"bidv\"){",
									"        pm.test(\"after_fee_amount of payment correctly! \" + tnx_obj.amount, function () {",
									"            pm.expect(tnx_obj.amount == jsData.data.after_fee_amount).to.be.true;",
									"        });",
									"",
									"        pm.test(\"fee_amount of payment is 0\", function () { // sẽ handle fee_amount ở va",
									"            pm.expect(0 == jsData.data.fee_amount).to.be.true;",
									"        });",
									"",
									"        pm.test(\"value_at of payment correctly! \" + tnx_obj.value_at, function () {",
									"            let act_value_at = jsData.data.value_at;",
									"            console.log(\"actual value_at: \" + act_value_at);",
									"            pm.expect(tnx_obj.value_at.substring(0,19) == act_value_at.toISOString().substring(0,19)).to.be.true;",
									"        });",
									"    } else {",
									"        pm.test(\"after_fee_amount of payment correctly! \" + tnx_obj.after_fee_amount, function () {",
									"            pm.expect(tnx_obj.after_fee_amount == jsData.data.after_fee_amount).to.be.true;",
									"        });",
									"",
									"        pm.test(\"fee_amount of payment is \" + tnx_obj.fee_amount, function () { // sẽ handle fee_amount ở va",
									"            pm.expect(tnx_obj.fee_amount == jsData.data.fee_amount).to.be.true;",
									"        });",
									"",
									"        pm.test(\"value_at of payment correctly! \" + tnx_obj.value_at, function () {",
									"            let act_value_at = jsData.data.value_at;",
									"            console.log(\"actual value_at: \" + act_value_at);",
									"            pm.expect(tnx_obj.value_at.substring(0,16) == act_value_at.substring(0,16)).to.be.true;",
									"        });        ",
									"    }",
									"",
									"    pm.test(\"status of payment is success! \", function () {",
									"        console.log(\"act: \" + jsData.data.status);",
									"        pm.expect(\"success\" == jsData.data.status).to.be.true;",
									"    });",
									"",
									"    pm.test(\"account_id of payment is: \" + tnx_obj.account_debit, function () {",
									"        console.log(\"act: \" + jsData.data.account_id);",
									"        pm.expect(tnx_obj.account_debit == jsData.data.account_id).to.be.true;",
									"    });",
									"",
									"    pm.test(\"object_type of payment correctly! \" + tnx_obj.object_type, function () {",
									"        pm.expect(tnx_obj.object_type).to.eql(jsData.data.object_type);",
									"    });",
									"",
									"    pm.test(\"object_id of payment correctly! \" + tnx_obj.object_id, function () {",
									"        pm.expect(tnx_obj.object_id).to.eql(jsData.data.object_id);",
									"    });",
									"",
									"    pm.test(\"payment_method of payment correctly! \" + tnx_obj.payment_method, function () {",
									"        pm.expect(tnx_obj.payment_method).to.eql(jsData.data.payment_method);",
									"    });",
									"",
									"    postman.setNextRequest(\"get_list_payment_account\"); // get_list_payment_account",
									"} else {",
									"    console.log(\"Can't get internal contact detail, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-ledger/api/v1/payment/get-one/{{C-payment_id}}?business_id={{C-business_id}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-ledger",
								"api",
								"v1",
								"payment",
								"get-one",
								"{{C-payment_id}}"
							],
							"query": [
								{
									"key": "business_id",
									"value": "{{C-business_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "gen_viet_qr_by_buyer",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// ============================= random number between min and max",
									"function getRandomInt(min, max) {",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"",
									"/**",
									" * encryptString",
									" */",
									"function encryptString(keyHex, plaintext) {",
									"    const key = CryptoJS.enc.Utf8.parse(keyHex);",
									"    const iv = CryptoJS.lib.WordArray.random(128 / 8);",
									"",
									"    const encrypted = CryptoJS.AES.encrypt(CryptoJS.enc.Utf8.parse(plaintext), key, {",
									"        iv: iv,",
									"        mode: CryptoJS.mode.CFB,",
									"        padding: CryptoJS.pad.NoPadding",
									"    });",
									"",
									"    const ciphertextWithIVHex = iv.toString() + encrypted.ciphertext.toString();",
									"    return ciphertextWithIVHex;",
									"}",
									"",
									"const key = pm.environment.get(\"secret_key\"); // Make sure your key is 32 bytes long",
									"console.log(\"key: \" + key);",
									"let viet_qr_payment = pm.environment.get(\"C-viet_qr_payment\");",
									"let invoice_obj = pm.environment.get(\"C-invoice_obj\");",
									"",
									"let amount;",
									"if(invoice_obj.total_amount > 100000){",
									"    amount = Math.round(getRandomInt(invoice_obj.total_amount/3,invoice_obj.total_amount/2));",
									"} else {",
									"    amount = getRandomInt(10,20)*1000;",
									"}",
									"",
									"const payload_data = {",
									"    // \"provider_code\": viet_qr_payment.provider_code,",
									"    // \"payment_method\": viet_qr_payment.key,",
									"    \"ref_id\": invoice_obj.system_code,",
									"    \"ref_type\":\"invoice\",",
									"    \"business_id\":parseInt(pm.environment.get(\"C-business_id\")),",
									"    // \"bank_account_id\": viet_qr_payment.bank_account.id,",
									"    \"payment_method_id\": viet_qr_payment.id,",
									"    \"payment_info\": {",
									"        \"payment_note\" : \"THANH TOÁN INVOICE \" + invoice_obj.system_code,",
									"        \"request_amount\" : amount,",
									"        \"currency_code\" : \"VND\"",
									"    },",
									"    \"success_redirect_url\" : \"https://book-dev.finan.one/overview\",",
									"    \"failure_redirect_url\" : \"https://book-dev.finan.one/overview\",",
									"    \"cancel_redirect_url\"  : \"https://book-dev.finan.one/overview\"",
									"}",
									"console.log(\"payload_data:\", payload_data);",
									"",
									"const raw_data = JSON.stringify(payload_data);",
									"",
									"const encryptedText = encryptString(key, raw_data);",
									"// console.log(\"Encrypted:\" + encryptedText);",
									"let payload = {",
									"    \"payload\":encryptedText",
									"}",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));",
									"pm.environment.set(\"C-gen_qr_obj\",payload_data);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"function toISOStringWithTimezone(date, offset) {",
									"    const tzOffset = offset * 60; // offset in minutes",
									"    const localISOTime = new Date(date.getTime() - (date.getTimezoneOffset() * 60000));",
									"    const adjustedTime = new Date(localISOTime.getTime() + (tzOffset * 60000));",
									"    const isoString = adjustedTime.toISOString().slice(0, -1); // remove the 'Z' at the end",
									"    ",
									"    const sign = offset >= 0 ? \"+\" : \"-\";",
									"    const absOffset = Math.abs(offset);",
									"    const hours = String(Math.floor(absOffset)).padStart(2, '0');",
									"    const minutes = String(absOffset % 1 * 60).padStart(2, '0');",
									"",
									"    return `${isoString}${sign}${hours}:${minutes}`;",
									"}",
									"",
									"let jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    console.log(\"debug: \", jsData); // hook",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let invoice_obj = pm.environment.get(\"C-invoice_obj\");",
									"",
									"    let gen_qr_obj = pm.environment.get(\"C-gen_qr_obj\");",
									"    let viet_qr_payment = pm.environment.get(\"C-viet_qr_payment\");",
									"    let list_bank_account = pm.environment.get(\"C-list_bank_account\");",
									"    ",
									"    pm.test(\"request_amount correctly \" + gen_qr_obj.payment_info.request_amount, function () {",
									"        console.log(\"act: \" + jsData.data.payment_info.request_amount);",
									"        pm.expect(gen_qr_obj.payment_info.request_amount == jsData.data.payment_info.request_amount).to.be.true;",
									"    });",
									"",
									"    pm.test(\"account_number correctly \" + viet_qr_payment.bank_account.account_number, function () {",
									"        console.log(\"act: \" + jsData.data.linking_bank_account.account_number);",
									"        pm.expect(jsData.data.linking_bank_account.account_number == viet_qr_payment.bank_account.account_number).to.be.true;",
									"    });",
									"",
									"    pm.test(\"account_name correctly \" + viet_qr_payment.bank_account.account_name, function () {",
									"        console.log(\"act: \" + jsData.data.linking_bank_account.account_name);",
									"        pm.expect(jsData.data.linking_bank_account.account_name == viet_qr_payment.bank_account.account_name).to.be.true;",
									"    });",
									"",
									"    // pm.test(\"bank_account_id correctly \" + gen_qr_obj.bank_account_id, function () {",
									"    //     console.log(\"act: \" + jsData.data.bank_account_id);",
									"    //     pm.expect(jsData.data.bank_account_id == gen_qr_obj.bank_account_id).to.be.true;",
									"    // });",
									"",
									"    let today = new Date();",
									"    let account_receivable = pm.environment.get(\"C-account_receivable\");",
									"    let account_debit_id;",
									"    for(let i in list_bank_account){",
									"        if(list_bank_account[i].account_name == viet_qr_payment.bank_account.account_name && list_bank_account[i].external_account_id == viet_qr_payment.bank_account.id){",
									"            account_debit_id = list_bank_account[i].account_id;",
									"            break;",
									"        }",
									"    }",
									"    let tnx_obj = {",
									"        \"object_id\":invoice_obj.invoice_id,",
									"        \"object_type\":\"invoice\",",
									"        \"account_credit\":account_receivable.id,",
									"        \"account_debit\":account_debit_id, // đợi update API get list payment account",
									"        \"amount\":gen_qr_obj.payment_info.request_amount,",
									"        \"branch_id\":pm.environment.get(\"C-branch_id\"),",
									"        \"payment_request_code\":jsData.data.payment_request_code,",
									"        \"payment_info\":jsData.data.payment_info,",
									"        \"txn_type\":\"in\",",
									"        \"description\":\"TTINV \" + invoice_obj.system_code,",
									"        \"payment_note\":jsData.data.payment_info.payment_note,",
									"        \"payment_method\":viet_qr_payment.key,",
									"        \"value_at\":toISOStringWithTimezone(today,0)",
									"    }",
									"    pm.environment.set(\"C-tnx_obj\",tnx_obj);",
									"    console.log(\"tnx_obj\",tnx_obj);",
									"",
									"    let configs = pm.environment.get(\"C-configs\");",
									"    if(configs.test_payment_method == \"bank_transfer\" || configs.test_payment_method == \"va_galaxy\" || configs.test_payment_method == \"bidv\"){",
									"        postman.setNextRequest(\"hook_payment_via_finesys\"); // hook_payment_via_viet_qr, hook_payment_via_finesys",
									"    } ",
									"    // else if(configs.test_payment_method == \"bidv\") {",
									"    //     postman.setNextRequest(\"hook_payment_bidv_via_finesys\"); // hook_payment_via_viet_qr, hook_payment_bidv_via_finesys",
									"    // } ",
									"    else {",
									"        // testcase++;",
									"        // pm.environment.set(\"C-testcase\",testcase);",
									"        postman.setNextRequest(\"hook_payment_mb_cash_in\"); // get_list_transaction, hook_payment_mb_cash_in",
									"    }",
									"} else {",
									"    console.log(\"Can't gen vietQR, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-banking/api/v1/buyer/payment-request/create",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-banking",
								"api",
								"v1",
								"buyer",
								"payment-request",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "gen_viet_qr",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"function toISOStringWithTimezone(date, offset) {",
									"    const tzOffset = offset * 60; // offset in minutes",
									"    const localISOTime = new Date(date.getTime() - (date.getTimezoneOffset() * 60000));",
									"    const adjustedTime = new Date(localISOTime.getTime() + (tzOffset * 60000));",
									"    const isoString = adjustedTime.toISOString().slice(0, -1); // remove the 'Z' at the end",
									"    ",
									"    const sign = offset >= 0 ? \"+\" : \"-\";",
									"    const absOffset = Math.abs(offset);",
									"    const hours = String(Math.floor(absOffset)).padStart(2, '0');",
									"    const minutes = String(absOffset % 1 * 60).padStart(2, '0');",
									"",
									"    return `${isoString}${sign}${hours}:${minutes}`;",
									"}",
									"",
									"let jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    console.log(\"debug: \", jsData); // hook",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let invoice_obj = pm.environment.get(\"C-invoice_obj\");",
									"",
									"    let gen_qr_obj = pm.environment.get(\"C-gen_qr_obj\");",
									"    let viet_qr_payment = pm.environment.get(\"C-viet_qr_payment\");",
									"    let list_bank_account = pm.environment.get(\"C-list_bank_account\");",
									"",
									"    pm.test(\"request_amount correctly \" + gen_qr_obj.payment_info.request_amount, function () {",
									"        console.log(\"act: \" + jsData.data.payment_info.request_amount);",
									"        pm.expect(gen_qr_obj.payment_info.request_amount == jsData.data.payment_info.request_amount).to.be.true;",
									"    });",
									"",
									"    // pm.test(\"account_number correctly \" + viet_qr_payment.bank_account.account_number, function () {",
									"    //     console.log(\"act: \" + jsData.data.payment_info.qr_info.account_number);",
									"    //     pm.expect(jsData.data.payment_info.qr_info.account_number == viet_qr_payment.bank_account.account_number).to.be.true;",
									"    // });",
									"",
									"    // pm.test(\"account_name correctly \" + viet_qr_payment.bank_account.account_name, function () {",
									"    //     console.log(\"act: \" + jsData.data.payment_info.qr_info.account_name);",
									"    //     pm.expect(jsData.data.payment_info.qr_info.account_name == viet_qr_payment.bank_account.account_name).to.be.true;",
									"    // });",
									"",
									"    pm.test(\"account_number correctly \" + viet_qr_payment.bank_account.account_number, function () {",
									"        console.log(\"act: \" + jsData.data.linking_bank_account.account_number);",
									"        pm.expect(jsData.data.linking_bank_account.account_number == viet_qr_payment.bank_account.account_number).to.be.true;",
									"    });",
									"",
									"    pm.test(\"account_name correctly \" + viet_qr_payment.bank_account.account_name, function () {",
									"        console.log(\"act: \" + jsData.data.linking_bank_account.account_name);",
									"        pm.expect(jsData.data.linking_bank_account.account_name == viet_qr_payment.bank_account.account_name).to.be.true;",
									"    });",
									"",
									"    // pm.test(\"bank_account_id correctly \" + gen_qr_obj.bank_account_id, function () {",
									"    //     console.log(\"act: \" + jsData.data.bank_account_id);",
									"    //     pm.expect(jsData.data.bank_account_id == gen_qr_obj.bank_account_id).to.be.true;",
									"    // });",
									"",
									"    let today = new Date();",
									"    let account_receivable = pm.environment.get(\"C-account_receivable\");",
									"    let account_debit_id;",
									"    // console.log(\"viet_qr_payment:\",viet_qr_payment);",
									"    // console.log(\"=======================\");",
									"    // console.log(\"list_bank_account:\",list_bank_account);",
									"    for(let i in list_bank_account){",
									"        if(list_bank_account[i].account_name == viet_qr_payment.bank_account.account_name && list_bank_account[i].external_account_id == viet_qr_payment.bank_account.id){",
									"            account_debit_id = list_bank_account[i].account_id;",
									"            break;",
									"        }",
									"    }",
									"    let tnx_obj = {",
									"        \"object_id\":invoice_obj.invoice_id,",
									"        \"object_type\":\"invoice\",",
									"        \"account_credit\":account_receivable.id,",
									"        \"account_debit\":account_debit_id, // đợi update API get list payment account",
									"        \"amount\":gen_qr_obj.payment_info.request_amount,",
									"        \"branch_id\":pm.environment.get(\"C-branch_id\"),",
									"        \"txn_type\":\"in\",",
									"        \"payment_request_code\":jsData.data.payment_request_code,",
									"        \"payment_info\":jsData.data.payment_info,",
									"        \"description\":\"TTINV \" + invoice_obj.system_code,",
									"        \"payment_note\":jsData.data.payment_info.payment_note,",
									"        \"payment_method\":viet_qr_payment.key,",
									"        \"linking_bank_account\":jsData.data.linking_bank_account,",
									"        \"value_at\":toISOStringWithTimezone(today,0)",
									"    }",
									"    pm.environment.set(\"C-tnx_obj\",tnx_obj);",
									"    console.log(\"tnx_obj\",tnx_obj);",
									"",
									"    let configs = pm.environment.get(\"C-configs\");",
									"    if(configs.test_payment_method == \"bank_transfer\" || configs.test_payment_method == \"va_galaxy\" || configs.test_payment_method == \"bidv\"){",
									"        postman.setNextRequest(\"hook_payment_via_finesys\"); // hook_payment_via_finesys",
									"    } ",
									"    // else if(configs.test_payment_method == \"bidv\") {",
									"    //     postman.setNextRequest(\"hook_payment_bidv_via_finesys\"); // hook_payment_via_viet_qr, hook_payment_bidv_via_finesys",
									"    // } ",
									"    else {",
									"        // testcase++;",
									"        // pm.environment.set(\"C-testcase\",testcase);",
									"        postman.setNextRequest(\"hook_payment_mb_cash_in\"); // get_list_transaction, hook_payment_mb_cash_in",
									"    }",
									"} else {",
									"    console.log(\"Can't gen vietQR, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// ============================= random number between min and max",
									"function getRandomInt(min, max) {",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let viet_qr_payment = pm.environment.get(\"C-viet_qr_payment\");",
									"let invoice_obj = pm.environment.get(\"C-invoice_obj\");",
									"",
									"let amount;",
									"if(invoice_obj.total_amount > 100000){",
									"    amount = Math.round(getRandomInt(invoice_obj.total_amount/3,invoice_obj.total_amount/2));",
									"} else {",
									"    if(invoice_obj.total_amount < 20000){",
									"        amount = invoice_obj.total_amount; // rơi vào case này thì phải fully_paid;",
									"        pm.environment.set(\"C-isFullyPaid\",true);",
									"    } else {",
									"        amount = getRandomInt(10,20)*1000;",
									"    }",
									"}",
									"",
									"let payload = {",
									"    // \"provider_code\": viet_qr_payment.provider_code, // sẽ thay provider_code & payment_method => payment_method_id (lấy từ config invoice/contact)",
									"    // \"payment_method\": viet_qr_payment.key,",
									"    \"ref_id\": invoice_obj.system_code,",
									"    \"ref_type\":\"invoice\",",
									"    \"payment_method_id\": viet_qr_payment.id,",
									"    // \"bank_account_id\": viet_qr_payment.bank_account.id,",
									"    \"payment_info\": {",
									"        \"payment_note\" : \"THANH TOÁN INVOICE \" + invoice_obj.system_code,",
									"        \"request_amount\" : amount,",
									"        \"currency_code\" : \"VND\"",
									"    },",
									"    \"success_redirect_url\" : \"https://book-dev.finan.one/overview\",",
									"    \"failure_redirect_url\" : \"https://book-dev.finan.one/overview\",",
									"    \"cancel_redirect_url\"  : \"https://book-dev.finan.one/overview\"",
									"}",
									"",
									"console.log(\"payload: \",payload);",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));",
									"pm.environment.set(\"C-gen_qr_obj\",payload);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}"
						},
						"url": {
							"raw": "{{finone_url}}/fo-banking/api/v1/payment-request/create",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-banking",
								"api",
								"v1",
								"payment-request",
								"create"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "hook",
			"item": [
				{
					"name": "hook_payment_via_finesys",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function toISOStringWithTimezone(date, offset) {",
									"    const tzOffset = offset * 60; // offset in minutes",
									"    const localISOTime = new Date(date.getTime() - (date.getTimezoneOffset() * 60000));",
									"    const adjustedTime = new Date(localISOTime.getTime() + (tzOffset * 60000));",
									"    const isoString = adjustedTime.toISOString().slice(0, -1); // remove the 'Z' at the end",
									"    ",
									"    const sign = offset >= 0 ? \"+\" : \"-\";",
									"    const absOffset = Math.abs(offset);",
									"    const hours = String(Math.floor(absOffset)).padStart(2, '0');",
									"    const minutes = String(absOffset % 1 * 60).padStart(2, '0');",
									"",
									"    return `${isoString}${sign}${hours}:${minutes}`;",
									"}",
									"",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let viet_qr_payment = pm.environment.get(\"C-viet_qr_payment\");",
									"let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"let invoice_obj = pm.environment.get(\"C-invoice_obj\");",
									"",
									"let date = new Date();",
									"let today = toISOStringWithTimezone(date,0).substring(0,19).replace(\"T\",\" \")",
									"let next_day_stp = Math.floor(date.getTime()/1000) + 24*60*60;",
									"let next_day = new Date(next_day_stp*1000);",
									"let term_next = toISOStringWithTimezone(next_day,0).substring(0,19).replace(\"T\",\" \")",
									"",
									"let base_fee_amount = 2000 + Math.round(tnx_obj.amount * 0.02);",
									"let net_amount = tnx_obj.amount - base_fee_amount;",
									"let redirect_url = \"https://book-dev.finan.one/pay/\" + pm.environment.get(\"C-business_id\") + \"/invoice/\" + invoice_obj.system_code + \"/\" + tnx_obj.payment_request_code;",
									"",
									"let configs = pm.environment.get(\"C-configs\");",
									"let payment_method = \"\";",
									"if(configs.test_payment_method == \"bank_transfer\"){",
									"    payment_method = configs.test_payment_method;",
									"} else {",
									"    payment_method = viet_qr_payment.key;",
									"}",
									"",
									"// Hook cash out",
									"// let payload_cash_out = {",
									"//   \"business_id\": \"B00200000001\", // ko care",
									"//   \"notify_data\": {",
									"//     \"bank_code\": tnx_obj.payment_info.qr_info.bank_id, // ",
									"//     \"account_name\": tnx_obj.payment_info.qr_info.account_name, //",
									"//     \"currency_code\": \"704\", // => fix vnd",
									"//     \"account_number\": tnx_obj.payment_info.provider_payment_number, //",
									"//     \"payment_number\": \"002P0320240524102605CCWTRT\", // ko care",
									"//     \"payment_status\": \"success\",",
									"//     \"transaction_at\": today, // get current",
									"//     \"adjusted_amount\": 29450,  // ko care (nếu có vấn đề thì tính toán lại)",
									"//     \"transaction_code\": \"T1003\",  // ko care",
									"//     \"transaction_note\": \"THANH TOAN HOA DON HD24 FT24145703405061-VND-TGTT-VO THI TUONG VAN\",  // cần check lại",
									"//     \"transaction_type\": \"CR\", // CR - credit",
									"//     \"transaction_amount\": 2100, // => tnx amount",
									"//     \"transaction_number\": \"002T100320240524102605PBLDYGBD\", // ko care",
									"//     \"bank_account_number\": \"1AM002110000007\", // => bank_account coa",
									"//     \"payment_failed_reason\": \"\"",
									"//   },",
									"//   \"notify_type\": \"payment_changed\"",
									"// }",
									"",
									"let payload;",
									"switch(configs.test_payment_method){",
									"    case \"\":",
									"        payload = {",
									"            \"business_id\": \"B00100000009\", // ko care",
									"            \"notify_data\": {",
									"                \"amount\": tnx_obj.amount, // số tiền cash in",
									"                \"user_id\": \"97df335075c94e3895f34a2243e75332_597666253\", // ?",
									"                \"expired_at\": term_next, // get current+1",
									"                \"description\": \"THANH TOÁN HÓA ĐƠN \" + invoice_obj.order_code, // cần check lại",
									"                \"paid_amount\": tnx_obj.amount, // = amount",
									"                \"reference_id\": tnx_obj.payment_request_code, // payment_request_code khi gen QR",
									"                \"currency_code\": \"704\", // fix vnd",
									"                \"payment_details\": [",
									"                {",
									"                    \"paid_at\": today, // get current",
									"                    \"created_at\": today, // get current",
									"                    \"net_amount\": net_amount, // số tiền thực nhận",
									"                    \"payment_url\": \"https://payment.galaxypay.vn\", // link qua galaxy pay, tạm fix",
									"                    \"total_amount\": tnx_obj.amount, // số tiền cash in",
									"                    \"currency_code\": \"704\",",
									"                    \"reconciled_at\": null,",
									"                    \"payment_method\": payment_method, // phương thức thanh toán",
									"                    \"payment_number\": \"001P1020240524165625VMZCCZ\", // random",
									"                    \"recipient_info\": {},",
									"                    \"base_fee_amount\": base_fee_amount, // phí",
									"                    \"markup_fee_amount\": 0,",
									"                    \"settlement_details\": [],",
									"                    \"provider_reference_id\": \"2405244733135185214416670\", // fix",
									"                    \"payment_request_status\": \"success\"",
									"                }",
									"                ],",
									"                \"payment_link_url\": null,",
									"                \"payment_link_type\": \"single\",",
									"                \"cancel_redirect_url\": redirect_url, // gán theo system code",
									"                \"payment_link_number\": \"24052416562530934959\",",
									"                \"payment_link_status\": \"paid\",",
									"                \"failure_redirect_url\": redirect_url,",
									"                \"success_redirect_url\": redirect_url,",
									"                \"linking_account_number\": tnx_obj.payment_info.provider_payment_number,",
									"                \"linking_bank_account_number\": tnx_obj.payment_info.qr_info.account_number // account trong payment",
									"            },",
									"            \"notify_type\": \"payment_success\"",
									"        };",
									"        break;",
									"    case \"va_galaxy\":",
									"        payload = {",
									"            \"business_id\": \"B00100000009\", // ko care",
									"            \"notify_data\": {",
									"                \"amount\": tnx_obj.amount, // số tiền cash in",
									"                \"user_id\": \"97df335075c94e3895f34a2243e75332_597666253\", // ?",
									"                \"expired_at\": term_next, // get current+1",
									"                \"description\": \"THANH TOÁN HÓA ĐƠN \" + invoice_obj.order_code, // cần check lại",
									"                \"paid_amount\": tnx_obj.amount, // = amount",
									"                \"reference_id\": tnx_obj.payment_request_code, // payment_request_code khi gen QR",
									"                \"currency_code\": \"704\", // fix vnd",
									"                \"payment_details\": [",
									"                {",
									"                    \"paid_at\": today, // get current",
									"                    \"created_at\": today, // get current",
									"                    \"net_amount\": net_amount, // số tiền thực nhận",
									"                    \"payment_url\": \"https://payment.galaxypay.vn\", // link qua galaxy pay, tạm fix",
									"                    \"total_amount\": tnx_obj.amount, // số tiền cash in",
									"                    \"currency_code\": \"704\",",
									"                    \"reconciled_at\": null,",
									"                    \"payment_method\": payment_method, // phương thức thanh toán",
									"                    \"payment_number\": \"001P1020240524165625VMZCCZ\", // random",
									"                    \"recipient_info\": {},",
									"                    \"base_fee_amount\": base_fee_amount, // phí",
									"                    \"markup_fee_amount\": 0,",
									"                    \"settlement_details\": [],",
									"                    \"provider_reference_id\": \"2405244733135185214416670\", // fix",
									"                    \"payment_request_status\": \"success\"",
									"                }",
									"                ],",
									"                \"payment_link_url\": null,",
									"                \"payment_link_type\": \"single\",",
									"                \"cancel_redirect_url\": redirect_url, // gán theo system code",
									"                \"payment_link_number\": \"24052416562530934959\",",
									"                \"payment_link_status\": \"paid\",",
									"                \"failure_redirect_url\": redirect_url,",
									"                \"success_redirect_url\": redirect_url,",
									"                \"linking_account_number\": viet_qr_payment.bank_account.account_number.substring(3,viet_qr_payment.bank_account.account_number.length), // \"002110000007\"",
									"                \"linking_bank_account_number\": viet_qr_payment.bank_account.account_number// \"1AM002110000007\"",
									"            },",
									"            \"notify_type\": \"payment_success\"",
									"        };",
									"        break;",
									"    case \"bank_transfer\": // đổi shinhan qua hook này, tạm thời dùng hook success",
									"        payload = {",
									"            \"business_id\": \"B00200000001\",",
									"            \"notify_data\": {",
									"                \"amount\": tnx_obj.amount,",
									"                \"user_id\": \"owner_1am\",",
									"                \"expired_at\": term_next,",
									"                \"description\": \"THANH TOÁN HÓA ĐƠN \" + invoice_obj.order_code,",
									"                \"paid_amount\": tnx_obj.amount,",
									"                \"reference_id\": tnx_obj.payment_request_code,",
									"                \"currency_code\": \"704\",",
									"                \"payment_details\": [",
									"                {",
									"                    \"paid_at\": today,",
									"                    \"created_at\": today,",
									"                    \"net_amount\": net_amount,",
									"                    \"payment_url\": null,",
									"                    \"total_amount\": tnx_obj.amount,",
									"                    \"currency_code\": \"704\",",
									"                    \"reconciled_at\": null,",
									"                    \"payment_method\": payment_method,",
									"                    \"payment_number\": \"002500000010\",",
									"                    // \"recipient_info\": {",
									"                    //   \"qr_code\": \"00020101021238590010A0000007270129000697042401151AM0025000000100208QRIBFTTA5303704540421005802VN5909QUY LUONG62270823THANH TOAN HOA DON HD2463048E6D\",",
									"                    //   \"bank_code\": \"616\",",
									"                    //   \"account_name\": \"QUY LUONG\",",
									"                    //   \"bank_account_number\": \"1AM002500000010\"",
									"                    // },",
									"                    \"recipient_info\":tnx_obj.payment_info.qr_info,",
									"                    \"base_fee_amount\": base_fee_amount,",
									"                    \"markup_fee_amount\": 0,",
									"                    \"settlement_details\": [",
									"                    {",
									"                        \"net_amount\": net_amount,",
									"                        \"settled_at\": today,",
									"                        \"payment_note\": \"THANH TOAN HOA DON \" + invoice_obj.order_code,",
									"                        \"base_fee_amount\": base_fee_amount,",
									"                        \"markup_fee_amount\": 0,",
									"                        \"transaction_number\": \"002T100320240524102605PBLDYGBD\",",
									"                        \"bank_transaction_number\": \"8113VAC2405000003701\"",
									"                    }",
									"                    ],",
									"                    \"provider_reference_id\": null,",
									"                    \"payment_request_status\": \"settled\"",
									"                }",
									"                ],",
									"                \"payment_link_url\": null,",
									"                \"payment_link_type\": \"single\",",
									"                \"cancel_redirect_url\": redirect_url,",
									"                \"payment_link_number\": \"24052410233005759735\",",
									"                \"payment_link_status\": \"paid\",",
									"                \"failure_redirect_url\": redirect_url,",
									"                \"success_redirect_url\": redirect_url,",
									"                \"linking_account_number\": tnx_obj.payment_info.provider_payment_number,",
									"                \"linking_bank_account_number\": tnx_obj.payment_info.qr_info.account_number // account trong payment",
									"            },",
									"            \"notify_type\": \"payment_settled\"",
									"        }",
									"        break;",
									"    case \"bidv\":",
									"        payload = {",
									"            \"business_id\": \"B00100003\",",
									"            \"notify_data\": {",
									"                \"paid_at\": today,",
									"                \"qr_code\": tnx_obj.payment_info.qr_info.qr_code,",
									"                \"va_number\": \"\",",
									"                \"order_note\": \"THANH TOAN HOA DON \" + invoice_obj.order_code,",
									"                \"paid_amount\": tnx_obj.amount,",
									"                \"order_amount\": tnx_obj.amount,",
									"                \"order_ref_id\": tnx_obj.payment_request_code,",
									"                \"order_status\": \"\",",
									"                \"currency_code\": \"704\",",
									"                \"payment_number\": \"001P1120240823104530YBFFJQ\",",
									"                \"merchant_number\": \"M00100000008\",",
									"                \"reference_number\": \"001P1120240823104530YBFFJQ\"",
									"            },",
									"            \"notify_type\": \"order_finished\"",
									"        }",
									"        break;",
									"    default:",
									"        console.log(\"missing \" + configs.test_payment_method);",
									"        break;",
									"}",
									"",
									"tnx_obj.net_amount = net_amount;",
									"tnx_obj.base_fee_amount = base_fee_amount;",
									"pm.environment.set(\"C-tnx_obj\",tnx_obj);",
									"",
									"console.log(\"payload: \",payload);",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));",
									"pm.environment.set(\"C-payment_obj\",payload);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    console.log(\"debug: \", jsData); // hook",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"",
									"    testcase++;",
									"    pm.environment.set(\"C-testcase\",testcase);",
									"    postman.setNextRequest(\"get_list_transaction\"); // get_list_transaction",
									"} else {",
									"    console.log(\"Can't call hook, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-banking/hook/v1/finesys",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-banking",
								"hook",
								"v1",
								"finesys"
							]
						}
					},
					"response": []
				},
				{
					"name": "hook_payment_bidv_via_finesys",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function toISOStringWithTimezone(date, offset) {",
									"    const tzOffset = offset * 60; // offset in minutes",
									"    const localISOTime = new Date(date.getTime() - (date.getTimezoneOffset() * 60000));",
									"    const adjustedTime = new Date(localISOTime.getTime() + (tzOffset * 60000));",
									"    const isoString = adjustedTime.toISOString().slice(0, -1); // remove the 'Z' at the end",
									"    ",
									"    const sign = offset >= 0 ? \"+\" : \"-\";",
									"    const absOffset = Math.abs(offset);",
									"    const hours = String(Math.floor(absOffset)).padStart(2, '0');",
									"    const minutes = String(absOffset % 1 * 60).padStart(2, '0');",
									"",
									"    return `${isoString}${sign}${hours}:${minutes}`;",
									"}",
									"",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let viet_qr_payment = pm.environment.get(\"C-viet_qr_payment\");",
									"let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"let invoice_obj = pm.environment.get(\"C-invoice_obj\");",
									"",
									"let date = new Date();",
									"let today = toISOStringWithTimezone(date,0).substring(0,19).replace(\"T\",\" \")",
									"let next_day_stp = Math.floor(date.getTime()/1000) + 24*60*60;",
									"let next_day = new Date(next_day_stp*1000);",
									"let term_next = toISOStringWithTimezone(next_day,0).substring(0,19).replace(\"T\",\" \")",
									"",
									"let base_fee_amount = 2000 + Math.round(tnx_obj.amount * 0.02);",
									"let net_amount = tnx_obj.amount - base_fee_amount;",
									"let redirect_url = \"https://book-dev.finan.one/pay/\" + pm.environment.get(\"C-business_id\") + \"/invoice/\" + invoice_obj.system_code + \"/\" + tnx_obj.payment_request_code;",
									"",
									"let configs = pm.environment.get(\"C-configs\");",
									"let payment_method = \"\";",
									"if(configs.test_payment_method == \"bank_transfer\"){",
									"    payment_method = configs.test_payment_method;",
									"} else {",
									"    payment_method = viet_qr_payment.key;",
									"}",
									"",
									"let payload;",
									"switch(configs.test_payment_method){",
									"    case \"bidv\":",
									"        payload = {",
									"            \"amount\": net_amount,",
									"            \"bankDate\": today,",
									"            \"customerId\": \"minhnv\",",
									"            \"description\": tnx_obj.payment_note,",
									"            \"currency\": \"704\",",
									"            \"sourceNumber\": \"bidv\",",
									"            \"referenceId\": \"\",",
									"            \"payDate\": today",
									"        }",
									"        break;",
									"    default:",
									"        console.log(\"missing \" + configs.test_payment_method);",
									"        break;",
									"}",
									"",
									"tnx_obj.net_amount = net_amount;",
									"tnx_obj.base_fee_amount = base_fee_amount;",
									"pm.environment.set(\"C-tnx_obj\",tnx_obj);",
									"",
									"console.log(\"payload: \",payload);",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));",
									"pm.environment.set(\"C-payment_obj\",payload);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    console.log(\"debug: \", jsData); // hook",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"",
									"    testcase++;",
									"    pm.environment.set(\"C-testcase\",testcase);",
									"    postman.setNextRequest(\"get_list_transaction\"); // get_list_transaction",
									"} else {",
									"    console.log(\"Can't call hook, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://stg-finesys.finan.vn/api/v1/adapter/bidv/notify-invoice",
							"protocol": "https",
							"host": [
								"stg-finesys",
								"finan",
								"vn"
							],
							"path": [
								"api",
								"v1",
								"adapter",
								"bidv",
								"notify-invoice"
							]
						}
					},
					"response": []
				},
				{
					"name": "hook_payment_mb_cash_in",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function toISOStringWithTimezone(date, offset) {",
									"    const tzOffset = offset * 60; // offset in minutes",
									"    const localISOTime = new Date(date.getTime() - (date.getTimezoneOffset() * 60000));",
									"    const adjustedTime = new Date(localISOTime.getTime() + (tzOffset * 60000));",
									"    const isoString = adjustedTime.toISOString().slice(0, -1); // remove the 'Z' at the end",
									"    ",
									"    const sign = offset >= 0 ? \"+\" : \"-\";",
									"    const absOffset = Math.abs(offset);",
									"    const hours = String(Math.floor(absOffset)).padStart(2, '0');",
									"    const minutes = String(absOffset % 1 * 60).padStart(2, '0');",
									"",
									"    return `${isoString}${sign}${hours}:${minutes}`;",
									"}",
									"",
									"// ============================= random number between min and max",
									"function getRandomInt(min, max) {",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"",
									"// ============================= random characters",
									"function randomChars(length) {",
									"    var result           = '';",
									"    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
									"    var charactersLength = characters.length;",
									"    for ( var i = 0; i < length; i++ ) {",
									"      result += characters.charAt(Math.floor(Math.random() * ",
									" charactersLength));",
									"   }",
									"   return result;",
									"}",
									"",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let date = new Date();",
									"let today = toISOStringWithTimezone(date,0).substring(0,19).replace(\"T\",\" \")",
									"let next_day_stp = Math.floor(date.getTime()/1000) + 24*60*60;",
									"let next_day = new Date(next_day_stp*1000);",
									"let term_next = toISOStringWithTimezone(next_day,0).substring(0,19).replace(\"T\",\" \")",
									"",
									"let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"let invoice_obj = pm.environment.get(\"C-invoice_obj\");",
									"",
									"let payload = {",
									"    \"partner_code\": \"finan_one\", // fix",
									"    \"merchant_bank_account_id\": tnx_obj.linking_bank_account.id, // external_account_id",
									"    \"bin_code\": \"970422\", // fix",
									"    \"partner_order_id\": tnx_obj.payment_request_code,",
									"    \"amount\": tnx_obj.amount,",
									"    \"txn_id\": randomChars(6), // ko map gì",
									"    \"txn_time\": today,",
									"    // \"created_at\": ,",
									"    \"bank_account_number\": tnx_obj.payment_info.qr_info.account_number,",
									"    \"bank_virtual_account_number\": tnx_obj.payment_info.qr_info.account_number,",
									"    \"bank_holder_name\": tnx_obj.payment_info.qr_info.account_name, // account_name_custom",
									"    \"bank_note\": \"THANH TOÁN HÓA ĐƠN \" + invoice_obj.order_code,",
									"    \"bank_ref_code\": \"\",",
									"    // \"bank_note\": \"TTB5TZL8 SOTR95P9\",",
									"    // \"bank_ref_code\": \"FT24236750010348\",",
									"    \"order_total_amount\": tnx_obj.amount,",
									"    \"order_paid_amount\": tnx_obj.amount,",
									"    \"order_status\": 1,",
									"    \"additional\": {",
									"        \"customer_account\": \"---\",",
									"        \"customer_name\": \"---\",",
									"        \"payment_detail\": \"---\"",
									"    },",
									"    // \"type\":\"static\",",
									"}",
									"",
									"console.log(\"payload: \",payload);",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));",
									"pm.environment.set(\"C-payment_obj\",payload); // tạm thời xử lý là tnx_obj"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    console.log(\"debug: \", jsData); // hook",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"",
									"    testcase++;",
									"    pm.environment.set(\"C-testcase\",testcase);",
									"    postman.setNextRequest(\"get_list_transaction\"); // get_list_transaction",
									"} else {",
									"    console.log(\"Can't call hook, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-request-id",
								"value": "62356403",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-banking/hook/v1/viet-qr-pro",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-banking",
								"hook",
								"v1",
								"viet-qr-pro"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "home-report",
			"item": [
				{
					"name": "get_report_cash_flow",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ============================= sort by key",
									"function sortByKey(array, key, type) {",
									"    if(type == \"asc\"){",
									"        return array.sort(function(a, b) {",
									"            var x = a[key]; var y = b[key];",
									"            return ((x > y) ? -1 : ((x < y) ? 1 : 0));",
									"        });",
									"    } else {",
									"        return array.sort(function(a, b) {",
									"            var x = a[key]; var y = b[key];",
									"            return ((x < y) ? -1 : ((x > y) ? 1 : 0));",
									"        });",
									"    }",
									"}",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let report_cash_flow = null;",
									"    try {",
									"        report_cash_flow = jsData.data;",
									"        /**",
									"         * db_data",
									"         * sum_card_data",
									"         * top_income_categories_data",
									"         * full_income_categories_data",
									"         * top_expense_categories_data",
									"         * full_expense_categories_data",
									"         */",
									"    } catch {",
									"        console.log(\"Can't get report cash_flow data\");",
									"    }",
									"",
									"    let total_income = 0, total_expense = 0;",
									"    let income_list = [], expense_list = [];",
									"    let exp_sum_card_data;",
									"    let full_income_categories_data;",
									"    if(\"full_income_categories_data\" in jsData.data){",
									"        full_income_categories_data = JSON.parse(JSON.stringify(jsData.data.full_income_categories_data));",
									"    } else {",
									"        full_income_categories_data = [];",
									"    }",
									"    let full_expense_categories_data;",
									"    if(\"full_expense_categories_data\" in jsData.data){",
									"        full_expense_categories_data = JSON.parse(JSON.stringify(jsData.data.full_expense_categories_data));",
									"    } else {",
									"        full_expense_categories_data = [];",
									"    }",
									"    switch(testcase){",
									"        case 2:",
									"            pm.environment.set(\"C-report_cash_flow\",report_cash_flow);",
									"            // console.log(\"report_cash_flow: \",report_cash_flow);",
									"",
									"            // ================================================ bonus check current data",
									"            // try {",
									"            //     for(let i in jsData.data.db_data){",
									"            //         if(jsData.data.db_data[i].coa_type == \"income\"){",
									"            //             income_list[income_list.length] = JSON.parse(JSON.stringify(jsData.data.db_data[i]));",
									"            //             total_income += jsData.data.db_data[i].current_income;",
									"            //         } else if (jsData.data.db_data[i].coa_type == \"expense\"){",
									"            //             expense_list[expense_list.length] = JSON.parse(JSON.stringify(jsData.data.db_data[i]));",
									"            //             total_expense += jsData.data.db_data[i].current_expense;",
									"            //         }",
									"            //     }",
									"            //     exp_sum_card_data = {",
									"            //         \"total_current_income\": total_income,",
									"            //         \"total_current_expense\": total_expense,",
									"            //         \"total_current_gap\": (total_income - total_expense)",
									"            //     }",
									"            //     console.log(\"exp_sum_card_data: \", exp_sum_card_data);",
									"",
									"            //     for(let i in income_list){",
									"            //         income_list[i].percentage = parseFloat((income_list[i].current_income/total_income*100).toFixed(2));",
									"            //         delete income_list[i]['coa_type'];",
									"            //         delete income_list[i]['current_income'];",
									"            //     }",
									"            //     console.log(\"income_list: \", sortByKey(income_list,\"percentage\",\"asc\"));",
									"",
									"            //     for(let i in expense_list){",
									"            //         expense_list[i].percentage = parseFloat((expense_list[i].current_expense/total_expense*100).toFixed(2));",
									"            //         delete expense_list[i]['coa_type'];",
									"            //         delete expense_list[i]['current_expense'];",
									"            //     }",
									"            //     console.log(\"expense_list: \", sortByKey(expense_list,\"percentage\",\"asc\"));",
									"",
									"            //     pm.test(\"sum_card_data correctly\", function () {",
									"            //         console.log(\"act data: \",JSON.stringify(jsData.data.sum_card_data));",
									"            //         console.log(\"exp data: \",JSON.stringify(exp_sum_card_data));",
									"            //         pm.expect(JSON.stringify(jsData.data.sum_card_data) == JSON.stringify(exp_sum_card_data)).to.be.true;",
									"            //     });",
									"",
									"            //     for(let i in full_income_categories_data){",
									"            //         delete full_income_categories_data[i]['current_amount'];",
									"            //     }",
									"            //     pm.test(\"full_income_categories_data correctly\", function () {",
									"            //         console.log(\"act data: \",JSON.stringify(full_income_categories_data));",
									"            //         console.log(\"exp data: \",JSON.stringify(income_list));",
									"            //         pm.expect(JSON.stringify(full_income_categories_data) == JSON.stringify(income_list)).to.be.true;",
									"            //     });",
									"",
									"            //     for(let i in full_expense_categories_data){",
									"            //         delete full_expense_categories_data[i]['current_amount'];",
									"            //     }",
									"            //     pm.test(\"full_expense_categories_data correctly\", function () {",
									"            //         console.log(\"act data: \",JSON.stringify(full_expense_categories_data));",
									"            //         console.log(\"exp data: \",JSON.stringify(expense_list));",
									"            //         pm.expect(JSON.stringify(full_expense_categories_data) == JSON.stringify(expense_list)).to.be.true;",
									"            //         // pm.expect(jsData.data.full_expense_categories_data).to.deep.include(expense_list);",
									"            //     });",
									"            // } catch {",
									"            //     console.log(\"Null data\");",
									"            // }",
									"            // ================================================ ",
									"",
									"            postman.setNextRequest(\"get_report_account_receivable_unpaid\"); // get_report_account_receivable_unpaid",
									"            break;",
									"        case 4: case 6:",
									"            let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"            let old_report_cash_flow = pm.environment.get(\"C-report_cash_flow\");",
									"",
									"            /**",
									"             * Đạt PO update 22Mar: đầu lấy COA ko phải từ income & expense nữa mà lấy từ cash & Bank",
									"             * => đợi PO update lại rule",
									"             */",
									"            // pm.test(\"Nothing happen!!!\", function () {",
									"            //     console.log(\"old: \" + JSON.stringify(old_report_cash_flow));",
									"            //     console.log(\"new: \" + JSON.stringify(report_cash_flow));",
									"            //     pm.expect(JSON.stringify(report_cash_flow) == JSON.stringify(old_report_cash_flow)).to.be.true;",
									"            // });",
									"",
									"            postman.setNextRequest(\"get_report_account_receivable_unpaid\"); // get_report_account_receivable_unpaid",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get report cash_flow, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"// lấy full tháng hiện tại",
									"let today = new Date();",
									"let start_current_month = new Date(today.getFullYear(), today.getMonth(), 1);",
									"let end_current_month = new Date(today.getFullYear(), today.getMonth() + 1, 1);",
									"",
									"// lấy full tháng trước",
									"let start_last_month = new Date(today.getFullYear(), today.getMonth() - 1, 1);",
									"let end_last_month = new Date(today.getFullYear(), today.getMonth(), 1);",
									"",
									"// lấy full ngày hiện tại",
									"// let firstDay = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0 ,0, 0);",
									"// let lastDay = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 23, 59 ,59, 0);",
									"",
									"// lấy n ngày đến hiện tại",
									"// let firstDayTimestamp = Math.floor(firstDay.getTime()/1000) - 2*24*60*60;",
									"// let start_day_ago = new Date(firstDayTimestamp*1000);",
									"",
									"let current_period_start = start_current_month.toISOString();",
									"let current_period_end = end_current_month.toISOString();",
									"let previous_period_start = start_last_month.toISOString();",
									"let previous_period_end = end_last_month.toISOString();",
									"",
									"/**",
									" * currently, display error if missing previous_period_start & previous_period_end or them = \"\";",
									" */",
									"let payload = {",
									"    \"branch_id\": pm.environment.get(\"C-branch_id\"),",
									"    \"business_id\": parseInt(pm.environment.get(\"C-business_id\")),",
									"    \"current_period_start\": current_period_start,",
									"    \"current_period_end\": current_period_end,",
									"    \"previous_period_start\": previous_period_start,",
									"    \"previous_period_end\": previous_period_end",
									"    // \"timezone\": \"Asia/Ho_Chi_Minh\" // UTC, Asia/Ho_Chi_Minh == UTC+07:00",
									"}",
									"",
									"console.log(\"payload: \",payload);",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));",
									"",
									"pm.environment.set(\"C-current_period_start\",current_period_start);",
									"pm.environment.set(\"C-current_period_end\",current_period_end);",
									"pm.environment.set(\"C-previous_period_start\",previous_period_start);",
									"pm.environment.set(\"C-previous_period_end\",previous_period_end);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-ledger/api/v1/report/cash-flow",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-ledger",
								"api",
								"v1",
								"report",
								"cash-flow"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_report_account_receivable_unpaid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ============================= get last day (Sun is end of Week)",
									"function getLastDayOfCurrentWeek() {",
									"    const now = new Date();",
									"    const lastDay = new Date(now);",
									"    const daysUntilSunday = 7 - now.getDay();  // if Saturday is end, change 7 => 6",
									"    lastDay.setDate(now.getDate() + daysUntilSunday);",
									"    return lastDay;",
									"}",
									"",
									"// ============================= get first day (Sun is end of Week)",
									"function getFirstDayOfCurrentWeek() {",
									"    const now = new Date();",
									"    const firstDay = new Date(now);",
									"    firstDay.setDate(now.getDate() - now.getDay() + 1);  // if Saturday is end, remove +1",
									"    return firstDay;",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let unpaid_account_receivable = null;",
									"    try {",
									"        unpaid_account_receivable = jsData.data.unpaid_amount_lifetime_categories;",
									"    } catch {",
									"        console.log(\"Can't get data\");",
									"    }",
									"",
									"    switch(testcase){",
									"        case 2:",
									"            pm.test(\"Got unpaid_account_receivable data\", function () {",
									"                pm.expect(unpaid_account_receivable != null).to.be.true;",
									"            });",
									"            pm.environment.set(\"C-unpaid_account_receivable\",unpaid_account_receivable);",
									"            // console.log(\"unpaid_account_receivable: \",unpaid_account_receivable);",
									"",
									"            postman.setNextRequest(\"get_report_account_receivable_customer\"); //get_report_account_receivable_customer",
									"            break;",
									"        case 4: case 6:",
									"            let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"            let invoice_obj = pm.environment.get(\"C-invoice_obj\");",
									"            let old_data = pm.environment.get(\"C-unpaid_account_receivable\");",
									"            let paid_amount = parseFloat(tnx_obj.amount);",
									"",
									"            // unpaid_total",
									"            pm.test(\"Total unpaid decrease \" + paid_amount, function () {",
									"                console.log(\"old: \" + old_data.unpaid_total);",
									"                console.log(\"new: \" + unpaid_account_receivable.unpaid_total);",
									"                pm.expect(unpaid_account_receivable.unpaid_total.toFixed(2) == (old_data.unpaid_total - paid_amount).toFixed(2)).to.be.true;",
									"            });",
									"",
									"            let due_date = new Date(invoice_obj.due_at);",
									"            let due_date_timestamp = Math.floor(due_date.getTime()/1000);",
									"            let today = new Date();",
									"            let today_timestamp = Math.floor(today.getTime()/1000);",
									"            let last_day_of_current_week = getLastDayOfCurrentWeek();",
									"            let last_day_of_current_week_stp = Math.floor(last_day_of_current_week.getTime()/1000);",
									"            let first_day_of_current_week = getFirstDayOfCurrentWeek();",
									"            let first_day_of_current_week_stp = Math.floor(first_day_of_current_week.getTime()/1000);",
									"            let due_type;",
									"            // console.log(\"debug: \" + (due_date_timestamp - today_timestamp));",
									"            if(due_date_timestamp > today_timestamp){",
									"                if(due_date_timestamp < last_day_of_current_week_stp){",
									"                    due_type = \"undue_n_7d\";",
									"                } else {",
									"                    due_type = \"undue\";",
									"                }",
									"            } else {",
									"                if(today_timestamp - due_date_timestamp > 90*24*60*60){",
									"                    due_type = \"overdue_over\";",
									"                } else if (today_timestamp - due_date_timestamp > 60*24*60*60){",
									"                    due_type = \"overdue_between\";",
									"                } else if (today_timestamp - due_date_timestamp > 30*24*60*60){",
									"                    due_type = \"overdue_less\";",
									"                } else {",
									"                    if(due_date_timestamp > first_day_of_current_week_stp){",
									"                        due_type = \"due_n_7d\";",
									"                    } else {",
									"                        due_type = \"due\";",
									"                    }",
									"                }",
									"            }",
									"            pm.environment.set(\"C-due_type\",due_type);",
									"",
									"            console.log(\"old: \",old_data);",
									"            console.log(\"new: \",unpaid_account_receivable);",
									"            switch(due_type){",
									"                case \"due\": case \"due_n_7d\":",
									"                    // unpaid_due",
									"                    pm.test(\"unpaid_due decrease \" + paid_amount, function () {",
									"                        console.log(\"old: \" + old_data.unpaid_due);",
									"                        console.log(\"expected: \" + (old_data.unpaid_due - paid_amount));",
									"                        console.log(\"new: \" + unpaid_account_receivable.unpaid_due);",
									"                        pm.expect(unpaid_account_receivable.unpaid_due.toFixed(2) == (old_data.unpaid_due - paid_amount).toFixed(2)).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_less",
									"                    pm.test(\"nothing happen unpaid_overdue_less\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_less == old_data.unpaid_overdue_less).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_between",
									"                    pm.test(\"nothing happen unpaid_overdue_between\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_between == old_data.unpaid_overdue_between).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_over",
									"                    pm.test(\"nothing happen unpaid_overdue_over\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_over == old_data.unpaid_overdue_over).to.be.true;",
									"                    });",
									"                    break;",
									"                case \"overdue_less\":",
									"                    // unpaid_due",
									"                    pm.test(\"nothing happen unpaid_due\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_due == old_data.unpaid_due).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_less",
									"                    pm.test(\"unpaid_overdue_less decrease \" + paid_amount, function () {",
									"                        console.log(\"old: \" + old_data.unpaid_overdue_less);",
									"                        console.log(\"new: \" + unpaid_account_receivable.unpaid_overdue_less);",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_less.toFixed(2) == (old_data.unpaid_overdue_less - paid_amount).toFixed(2)).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_between",
									"                    pm.test(\"nothing happen unpaid_overdue_between\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_between == old_data.unpaid_overdue_between).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_over",
									"                    pm.test(\"nothing happen unpaid_overdue_over\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_over == old_data.unpaid_overdue_over).to.be.true;",
									"                    });",
									"                    break;",
									"                case \"overdue_between\":",
									"                    // unpaid_due",
									"                    pm.test(\"nothing happen unpaid_due\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_due == old_data.unpaid_due).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_less",
									"                    pm.test(\"nothing happen unpaid_overdue_less\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_less == old_data.unpaid_overdue_less).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_between",
									"                    pm.test(\"unpaid_overdue_between decrease \" + paid_amount, function () {",
									"                        console.log(\"old: \" + old_data.unpaid_overdue_between);",
									"                        console.log(\"new: \" + unpaid_account_receivable.unpaid_overdue_between);",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_between.toFixed(2) == (old_data.unpaid_overdue_between - paid_amount).toFixed(2)).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_over",
									"                    pm.test(\"nothing happen unpaid_overdue_over\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_over == old_data.unpaid_overdue_over).to.be.true;",
									"                    });",
									"                    break;",
									"                case \"overdue_over\":",
									"                    // unpaid_due",
									"                    pm.test(\"nothing happen unpaid_due\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_due == old_data.unpaid_due).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_less",
									"                    pm.test(\"nothing happen unpaid_overdue_less\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_less == old_data.unpaid_overdue_less).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_between",
									"                    pm.test(\"unpaid_overdue_between decrease\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_between == old_data.unpaid_overdue_between).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_over",
									"                    pm.test(\"unpaid_overdue_over decrease \" + paid_amount, function () {",
									"                        console.log(\"old: \" + old_data.unpaid_overdue_over);",
									"                        console.log(\"new: \" + unpaid_account_receivable.unpaid_overdue_over);",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_over.toFixed(2) == (old_data.unpaid_overdue_over - paid_amount).toFixed(2)).to.be.true;",
									"                    });",
									"                    break;",
									"                default:",
									"                    // unpaid_due",
									"                    pm.test(\"nothing happen unpaid_due\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_due == old_data.unpaid_due).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_less",
									"                    pm.test(\"nothing happen unpaid_overdue_less\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_less == old_data.unpaid_overdue_less).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_between",
									"                    pm.test(\"nothing happen unpaid_overdue_between\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_between == old_data.unpaid_overdue_between).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_over",
									"                    pm.test(\"nothing happen unpaid_overdue_over\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_over == old_data.unpaid_overdue_over).to.be.true;",
									"                    });",
									"                    break;",
									"            }",
									"",
									"            if(due_type == \"undue_n_7d\"){",
									"                // unpaid_overdue_more_than_today",
									"                pm.test(\"nothing happen unpaid_overdue_more_than_today\", function () {",
									"                    pm.expect(unpaid_account_receivable.unpaid_overdue_more_than_today == old_data.unpaid_overdue_more_than_today).to.be.true;",
									"                });",
									"",
									"                // unpaid_overdue_less_than_today",
									"                pm.test(\"unpaid_overdue_less_than_today decrease \" + paid_amount, function () {",
									"                    console.log(\"old: \" + old_data.unpaid_overdue_less_than_today);",
									"                    console.log(\"expected: \" + (old_data.unpaid_overdue_less_than_today - paid_amount));",
									"                    console.log(\"new: \" + unpaid_account_receivable.unpaid_overdue_less_than_today);",
									"                    pm.expect(unpaid_account_receivable.unpaid_overdue_less_than_today == old_data.unpaid_overdue_less_than_today - paid_amount).to.be.true;",
									"                });",
									"",
									"                // unpaid_overdue_in_week",
									"                pm.test(\"unpaid_overdue_in_week decrease \" + paid_amount, function () {",
									"                    console.log(\"old: \" + old_data.unpaid_overdue_in_week);",
									"                    console.log(\"expected: \" + (old_data.unpaid_overdue_in_week - paid_amount));",
									"                    console.log(\"new: \" + unpaid_account_receivable.unpaid_overdue_in_week);",
									"                    pm.expect(unpaid_account_receivable.unpaid_overdue_in_week == old_data.unpaid_overdue_in_week - paid_amount).to.be.true;",
									"                });",
									"            } else if(due_type == \"due_n_7d\"){",
									"                // unpaid_overdue_more_than_today",
									"                pm.test(\"unpaid_overdue_more_than_today decrease \" + paid_amount, function () {",
									"                    console.log(\"old: \" + old_data.unpaid_overdue_more_than_today);",
									"                    console.log(\"expected: \" + (old_data.unpaid_overdue_more_than_today - paid_amount));",
									"                    console.log(\"new: \" + unpaid_account_receivable.unpaid_overdue_more_than_today);",
									"                    pm.expect(unpaid_account_receivable.unpaid_overdue_more_than_today == old_data.unpaid_overdue_more_than_today - paid_amount).to.be.true;",
									"                });",
									"",
									"                // unpaid_overdue_less_than_today",
									"                pm.test(\"nothing happen unpaid_overdue_less_than_today\", function () {",
									"                    pm.expect(unpaid_account_receivable.unpaid_overdue_less_than_today == old_data.unpaid_overdue_less_than_today).to.be.true;",
									"                });",
									"",
									"                // unpaid_overdue_in_week",
									"                pm.test(\"unpaid_overdue_in_week increase \" + paid_amount, function () {",
									"                    console.log(\"old: \" + old_data.unpaid_overdue_in_week);",
									"                    console.log(\"expected: \" + (old_data.unpaid_overdue_in_week - paid_amount));",
									"                    console.log(\"new: \" + unpaid_account_receivable.unpaid_overdue_in_week);",
									"                    pm.expect(unpaid_account_receivable.unpaid_overdue_in_week == old_data.unpaid_overdue_in_week - paid_amount).to.be.true;",
									"                });",
									"            } else if (due_type == \"undue\"){",
									"                // unpaid_overdue_more_than_today",
									"                pm.test(\"nothing happen unpaid_overdue_more_than_today\", function () {",
									"                    pm.expect(unpaid_account_receivable.unpaid_overdue_more_than_today == old_data.unpaid_overdue_more_than_today).to.be.true;",
									"                });",
									"",
									"                // unpaid_overdue_less_than_today",
									"                pm.test(\"unpaid_overdue_less_than_today increase \" + paid_amount, function () {",
									"                    console.log(\"old: \" + old_data.unpaid_overdue_less_than_today);",
									"                    console.log(\"expected: \" + (old_data.unpaid_overdue_less_than_today - paid_amount));",
									"                    console.log(\"new: \" + unpaid_account_receivable.unpaid_overdue_less_than_today);",
									"                    pm.expect(unpaid_account_receivable.unpaid_overdue_less_than_today == old_data.unpaid_overdue_less_than_today - paid_amount).to.be.true;",
									"                });",
									"",
									"                // unpaid_overdue_in_week",
									"                pm.test(\"nothing happen unpaid_overdue_in_week\", function () {",
									"                    pm.expect(unpaid_account_receivable.unpaid_overdue_in_week == old_data.unpaid_overdue_in_week).to.be.true;",
									"                });",
									"            } else {",
									"                // unpaid_overdue_more_than_today",
									"                pm.test(\"unpaid_overdue_more_than_today increase \" + paid_amount, function () {",
									"                    console.log(\"old: \" + old_data.unpaid_overdue_more_than_today);",
									"                    console.log(\"expected: \" + (old_data.unpaid_overdue_more_than_today - paid_amount));",
									"                    console.log(\"new: \" + unpaid_account_receivable.unpaid_overdue_more_than_today);",
									"                    pm.expect(unpaid_account_receivable.unpaid_overdue_more_than_today == old_data.unpaid_overdue_more_than_today - paid_amount).to.be.true;",
									"                });",
									"",
									"                // unpaid_overdue_less_than_today",
									"                pm.test(\"nothing happen unpaid_overdue_less_than_today\", function () {",
									"                    pm.expect(unpaid_account_receivable.unpaid_overdue_less_than_today == old_data.unpaid_overdue_less_than_today).to.be.true;",
									"                });",
									"",
									"                // unpaid_overdue_in_week",
									"                pm.test(\"nothing happen unpaid_overdue_in_week\", function () {",
									"                    pm.expect(unpaid_account_receivable.unpaid_overdue_in_week == old_data.unpaid_overdue_in_week).to.be.true;",
									"                });",
									"            }",
									"",
									"            postman.setNextRequest(\"get_report_account_receivable_customer\"); // get_report_account_receivable_customer",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get report account receivable unpaid, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let payload = {",
									"    \"account_key\": \"account_receivable\",",
									"    \"branch_id\": pm.environment.get(\"C-branch_id\"),",
									"    \"business_id\": parseInt(pm.environment.get(\"C-business_id\"))",
									"    //   \"current_period_end\": \"string\",",
									"    //   \"current_period_start\": \"string\",",
									"    // \"page\": 1,",
									"    // \"page_size\": 20,",
									"    //   \"period\": \"string\",  // old due_days",
									"    //   \"previous_period_end\": \"string\",",
									"    //   \"previous_period_start\": \"string\",",
									"    //   \"report_type\": \"string\",",
									"    // \"timezone\": \"UTC+07:00\"",
									"}",
									"",
									"console.log(\"payload: \",payload);",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));",
									"pm.environment.set(\"C-report_obj\",payload);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/report/account-receivable-card-unpaid",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"report",
								"account-receivable-card-unpaid"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_report_account_receivable_customer",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"if(testcase != 2){",
									"    // timeout 2s to sync elastic search",
									"    setTimeout(function(){}, 2000);",
									"}",
									"",
									"let page = pm.environment.get(\"C-page\");",
									"",
									"if(!page){",
									"    page = 1;",
									"    pm.environment.set(\"C-page\",page);",
									"",
									"    let page_size = 20;",
									"    pm.environment.set(\"C-page_size\",page_size);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = JSON.parse(responseBody);",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let total_pages = jsData.meta.total_pages;",
									"    let page = pm.environment.get(\"C-page\");",
									"",
									"    let list_report_customer, old_list_report_customer;",
									"    switch(testcase){",
									"        case 2:",
									"            list_report_customer = pm.environment.get(\"C-list_report_customer\");",
									"            if(!list_report_customer){",
									"                list_report_customer = [];",
									"            }",
									"            break;",
									"        case 4: case 6:",
									"            old_list_report_customer = pm.environment.get(\"C-old_list_report_customer\");",
									"            if(!old_list_report_customer){",
									"                old_list_report_customer = pm.environment.get(\"C-list_report_customer\");",
									"                pm.environment.unset(\"C-list_report_customer\");",
									"                pm.environment.set(\"C-old_list_report_customer\",old_list_report_customer);",
									"            }",
									"",
									"            list_report_customer = pm.environment.get(\"C-list_report_customer\");",
									"            if(!list_report_customer){",
									"                list_report_customer = [];",
									"            }",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow\");",
									"            break;",
									"    }",
									"",
									"    for(let item in jsData.data){",
									"        list_report_customer[list_report_customer.length] = {",
									"            \"contact_id\":jsData.data[item].contact_id,",
									"            \"unpaid_total\":jsData.data[item].unpaid_total,",
									"            \"unpaid_due\":jsData.data[item].unpaid_due,",
									"            \"unpaid_overdue_less\":jsData.data[item].unpaid_overdue_less,",
									"            \"unpaid_overdue_between\":jsData.data[item].unpaid_overdue_between,",
									"            \"unpaid_overdue_over\":jsData.data[item].unpaid_overdue_over,",
									"            \"full_count\":jsData.data[item].full_count,",
									"            \"contact_name\":jsData.data[item].contact_info.contact_name,",
									"            \"contact_phone\":jsData.data[item].contact_info.contact_phone",
									"        }",
									"    }",
									"    pm.environment.set(\"C-list_report_customer\",list_report_customer);",
									"",
									"    if(page >= total_pages){",
									"        // must clear page & page_size",
									"        pm.environment.unset(\"C-page\");",
									"        pm.environment.unset(\"C-page_size\");",
									"",
									"        let invoice_obj = pm.environment.get(\"C-invoice_obj\");",
									"        let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"        let isFound = false, hasRecord = false;",
									"        switch(testcase){",
									"            case 2:",
									"                pm.test(\"Got all record! \" + list_report_customer.length, function () {",
									"                    pm.expect(list_report_customer.length > 0).to.be.true;",
									"                });",
									"",
									"                // console.log(\"list_report_customer: \",list_report_customer);",
									"",
									"                postman.setNextRequest(\"report_account_lifetime\"); // report_account_lifetime",
									"                break;",
									"            case 4: case 6:",
									"                let record_obj = null;",
									"                console.log(\"contact_id: \" + invoice_obj.contact_id);",
									"                for(let i in old_list_report_customer){",
									"                    if(old_list_report_customer[i].contact_id == invoice_obj.contact_id){",
									"                        record_obj = old_list_report_customer[i];",
									"                        break;",
									"                    }",
									"                }",
									"                // console.log(\"old_list_report_customer: \", old_list_report_customer);",
									"",
									"                pm.test(\"Nothing happen with total record\", function () {",
									"                    pm.expect(list_report_customer.length == old_list_report_customer.length).to.be.true;",
									"                });",
									"",
									"                let due_type = pm.environment.get(\"C-due_type\");",
									"                for(let i in list_report_customer){",
									"                    if(list_report_customer[i].contact_id == invoice_obj.contact_id){",
									"                        isFound = true;",
									"                        console.log(\"Found \" + list_report_customer[i].contact_name + ' - ' + list_report_customer[i].contact_phone);",
									"                        ",
									"                        pm.test(\"unpaid_total decrease \" + tnx_obj.amount, function () {",
									"                            console.log(\"exp: \" + (record_obj.unpaid_total - tnx_obj.amount));",
									"                            console.log(\"new: \" + list_report_customer[i].unpaid_total);",
									"                            pm.expect(list_report_customer[i].unpaid_total == record_obj.unpaid_total - tnx_obj.amount).to.be.true;",
									"                        });",
									"",
									"                        switch(due_type){",
									"                            case \"due\": case \"due_n_7d\":",
									"                                // unpaid_due",
									"                                pm.test(\"unpaid_due decrease \" + tnx_obj.amount, function () {",
									"                                    console.log(\"old: \" + record_obj.unpaid_due);",
									"                                    console.log(\"new: \" + list_report_customer[i].unpaid_due);",
									"                                    pm.expect(list_report_customer[i].unpaid_due == record_obj.unpaid_due - tnx_obj.amount).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_less",
									"                                pm.test(\"nothing happen unpaid_overdue_less\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_less == record_obj.unpaid_overdue_less).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_between",
									"                                pm.test(\"nothing happen unpaid_overdue_between\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_between == record_obj.unpaid_overdue_between).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_over",
									"                                pm.test(\"nothing happen unpaid_overdue_over\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_over == record_obj.unpaid_overdue_over).to.be.true;",
									"                                });",
									"                                break;",
									"                            case \"overdue_less\":",
									"                                // unpaid_due",
									"                                pm.test(\"nothing happen unpaid_due\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_due == record_obj.unpaid_due).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_less",
									"                                pm.test(\"unpaid_overdue_less decrease \" + tnx_obj.amount, function () {",
									"                                    console.log(\"old: \" + record_obj.unpaid_overdue_less);",
									"                                    console.log(\"new: \" + list_report_customer[i].unpaid_overdue_less);",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_less == (record_obj.unpaid_overdue_less - tnx_obj.amount).toFixed(2)).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_between",
									"                                pm.test(\"nothing happen unpaid_overdue_between\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_between == record_obj.unpaid_overdue_between).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_over",
									"                                pm.test(\"nothing happen unpaid_overdue_over\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_over == record_obj.unpaid_overdue_over).to.be.true;",
									"                                });",
									"                                break;",
									"                            case \"overdue_between\":",
									"                                // unpaid_due",
									"                                pm.test(\"nothing happen unpaid_due\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_due == record_obj.unpaid_due).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_less",
									"                                pm.test(\"nothing happen unpaid_overdue_less\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_less == record_obj.unpaid_overdue_less).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_between",
									"                                pm.test(\"unpaid_overdue_between decrease \" + tnx_obj.amount, function () {",
									"                                    console.log(\"old: \" + record_obj.unpaid_overdue_between);",
									"                                    console.log(\"new: \" + list_report_customer[i].unpaid_overdue_between);",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_between == (record_obj.unpaid_overdue_between - tnx_obj.amount).toFixed(2)).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_over",
									"                                pm.test(\"nothing happen unpaid_overdue_over\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_over == record_obj.unpaid_overdue_over).to.be.true;",
									"                                });",
									"                                break;",
									"                            case \"overdue_over\":",
									"                                // unpaid_due",
									"                                pm.test(\"nothing happen unpaid_due\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_due == record_obj.unpaid_due).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_less",
									"                                pm.test(\"nothing happen unpaid_overdue_less\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_less == record_obj.unpaid_overdue_less).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_between",
									"                                pm.test(\"nothing happen unpaid_overdue_between\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_between == record_obj.unpaid_overdue_between).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_over",
									"                                pm.test(\"unpaid_overdue_over decrease \" + tnx_obj.amount, function () {",
									"                                    console.log(\"old: \" + record_obj.unpaid_overdue_over);",
									"                                    console.log(\"new: \" + list_report_customer[i].unpaid_overdue_over);",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_over == (record_obj.unpaid_overdue_over - tnx_obj.amount).toFixed(2)).to.be.true;",
									"                                });",
									"                                break;",
									"                            default:",
									"                                // unpaid_due",
									"                                pm.test(\"nothing happen unpaid_due\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_due == record_obj.unpaid_due).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_less",
									"                                pm.test(\"nothing happen unpaid_overdue_less\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_less == record_obj.unpaid_overdue_less).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_between",
									"                                pm.test(\"nothing happen unpaid_overdue_between\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_between == record_obj.unpaid_overdue_between).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_over",
									"                                pm.test(\"nothing happen unpaid_overdue_over\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_over == record_obj.unpaid_overdue_over).to.be.true;",
									"                                });",
									"                                break;",
									"                        }",
									"                        break;",
									"                    }",
									"                }",
									"",
									"                pm.test(\"Found new customer\", function () {",
									"                    pm.expect(isFound).to.be.true;",
									"                });",
									"",
									"                postman.setNextRequest(\"report_account_lifetime\"); // report_account_lifetime",
									"                break;",
									"            default:",
									"                console.log(\"Missing flow, end test\");",
									"                postman.setNextRequest(null);",
									"                break;",
									"        }",
									"    } else {",
									"        page++;",
									"        pm.environment.set(\"C-page\",page);",
									"",
									"        console.log(\"view next page (\" + page + \") to get more product\");",
									"        postman.setNextRequest(\"get_report_account_receivable_customer\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get list product, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"account_key\": \"account_receivable\",\n    \"branch_id\": \"{{C-branch_id}}\",\n    \"business_id\": {{C-business_id}},\n    \"page\": {{C-page}},\n    \"page_size\": {{C-page_size}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/report/account-receivable-customer-unpaid",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"report",
								"account-receivable-customer-unpaid"
							]
						}
					},
					"response": []
				},
				{
					"name": "report_account_lifetime",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ====================================== parser cURL",
									"function parseCURL(request_api){",
									"    let curl = \"\";",
									"    switch(request_api.method){",
									"        case \"PUT\":",
									"            curl = \"curl --location --request PUT \";",
									"            break;",
									"        case \"PATCH\":",
									"            curl = \"curl --location --request PATCH \";",
									"            break;",
									"        case \"DELETE\":",
									"            curl = \"curl --location --request DELETE \";",
									"            break;",
									"        default:",
									"            curl = \"curl --location \";",
									"            break;",
									"    }",
									"    curl += \"'\" + request_api.url.protocol + \"://\"",
									"    // host",
									"    for(let i in request_api.url.host){",
									"        if(i >= request_api.url.host.length - 1){",
									"            curl += request_api.url.host[i] + \"/\";",
									"        } else {",
									"            curl += request_api.url.host[i] + \".\";",
									"        }",
									"    }",
									"    // path",
									"    for(let i in request_api.url.path){",
									"        if(i >= request_api.url.path.length - 1){",
									"            curl += request_api.url.path[i];",
									"        } else {",
									"            curl += request_api.url.path[i] + \"/\";",
									"        }",
									"    }",
									"    // query (if have)",
									"    if(\"query\" in request_api.url){",
									"        if(request_api.url.length > 0){",
									"            curl += \"? \";",
									"            for(let i in request_api.url.query){",
									"                if(i >= request_api.url.query.length - 1){",
									"                    curl += request_api.url.query[i].key + \"=\" + request_api.url.query[i].value + \"' \";",
									"                } else {",
									"                    curl += request_api.url.query[i].key + \"=\" + request_api.url.query[i].value + \"&\";",
									"                }",
									"            }",
									"        } else {",
									"            curl += \"' \";",
									"        }",
									"    } else {",
									"        curl += \"' \";",
									"    }",
									"    // header",
									"    for(let i in request_api.header){",
									"        if(i >= request_api.header.length - 1){",
									"            curl += \"--header '\" + request_api.header[i].key + \": \" + request_api.header[i].value + \"'\";",
									"        } else {",
									"            curl += \"--header '\" + request_api.header[i].key + \": \" + request_api.header[i].value + \"' \";",
									"        }",
									"    }",
									"    switch(request_api.method){",
									"        case \"POST\":",
									"            curl += \" --data '\" + request_api.body.raw + \"'\"",
									"            break;",
									"        case \"PUT\": case \"PATCH\":",
									"            curl += \" --data-raw '\" + request_api.body.raw + \"'\"",
									"            break;",
									"        default:",
									"            break;",
									"    }",
									"    console.log(curl);",
									"    return curl;",
									"}",
									"const request_api = pm.request.toJSON();",
									"parseCURL(request_api);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let account_lifetime = null;",
									"    try {",
									"        account_lifetime = jsData.data;",
									"    } catch {",
									"        console.log(\"Can't get data\");",
									"    }",
									"",
									"    let old_account_lifetime = pm.environment.get(\"C-account_lifetime\");",
									"    switch(testcase){",
									"        case 2:",
									"            pm.test(\"Got account_lifetime \" + account_lifetime.sum_balance, function () {",
									"                pm.environment.set(\"C-account_lifetime\",account_lifetime);",
									"                pm.expect(account_lifetime != null).to.be.true;",
									"            });",
									"",
									"            // check data",
									"            let total_balance = 0;",
									"            for(let i in jsData.data.data){",
									"                total_balance += jsData.data.data[i].balance;",
									"            }",
									"            pm.test(\"Data correctly \" + total_balance, function () {",
									"                pm.expect(total_balance.toFixed(2) == jsData.data.sum_balance).to.be.true;",
									"            });",
									"",
									"            postman.setNextRequest(\"report_cash_flow_period\"); // report_cash_flow_period, get_list_transaction",
									"            break;",
									"        case 4: case 6:",
									"            /**",
									"             * - nếu tnx_obj.account_id (in - credit) tnx_obj.account_id (out - debit) trong list tăng lên => tăng tương ứng",
									"             * - ngược lại, name (remaining_accounts) sẽ tăng tương ứng",
									"            */",
									"            let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"            // sum_balance",
									"            console.log(\"old: \" + old_account_lifetime.sum_balance);",
									"            console.log(\"exp: \" + (old_account_lifetime.sum_balance + tnx_obj.amount));",
									"            console.log(\"act: \" + account_lifetime.sum_balance);",
									"            if(tnx_obj.txn_type == \"in\"){",
									"                // case tăng debit => tăng sum_balance",
									"                pm.test(\"sum_balance increase \" + tnx_obj.amount, function () {",
									"                    pm.expect(account_lifetime.sum_balance == old_account_lifetime.sum_balance + tnx_obj.amount).to.be.true;",
									"                });",
									"            } else {",
									"                // case tăng credit => giảm sum_balance",
									"                pm.test(\"sum_balance decrease \" + tnx_obj.amount, function () {",
									"                    pm.expect(account_lifetime.sum_balance == old_account_lifetime.sum_balance - tnx_obj.amount).to.be.true;",
									"                });",
									"            }",
									"",
									"            // data cũ",
									"            let account_obj = null;",
									"            for(let i = 0; i < old_account_lifetime.data.length; i++){",
									"                if(old_account_lifetime.data[i].id == tnx_obj.account_id){",
									"                    account_obj = old_account_lifetime.data[i];",
									"                    break;",
									"                }",
									"",
									"                if(i == old_account_lifetime.data.length - 1){",
									"                    // remaining_accounts",
									"                    account_obj = old_account_lifetime.data[i];",
									"                    break;",
									"                }",
									"            }",
									"",
									"            // data mới",
									"            let isFound = false;",
									"            for(let i in account_lifetime.data){",
									"                if(account_lifetime.data[i].id == account_obj.id){",
									"                    isFound = true;",
									"                    console.log(\"old: \" + account_obj.balance);",
									"                    console.log(\"act: \" + account_lifetime.data[i].balance);",
									"                    if(tnx_obj.txn_type == \"in\"){",
									"                        // case tăng debit => balance = debit - credit",
									"                        pm.test(\"balance of \" + account_lifetime.data[i].account_name + \" increase \" + tnx_obj.amount, function () {",
									"                            pm.expect(account_lifetime.data[i].balance == account_obj.balance + tnx_obj.amount).to.be.true;",
									"                        });",
									"                    } else {",
									"                        // case tăng credit",
									"                        pm.test(\"balance of \" + account_lifetime.data[i].account_name + \" decrease \" + tnx_obj.amount, function () {",
									"                            pm.expect(account_lifetime.data[i].balance == account_obj.balance - tnx_obj.amount).to.be.true;",
									"                        });",
									"                    }",
									"                    break;",
									"                }",
									"            }",
									"",
									"            pm.test(\"Found exchange account\", function () {",
									"                pm.expect(isFound).to.be.true;",
									"            });",
									"            ",
									"            postman.setNextRequest(\"report_cash_flow_period\"); // report_cash_flow_period",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get report account receivable unpaid, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/**",
									" * case handle:",
									" * - Nếu account tăng balance ko nằm trong top 5:",
									" *   + TH1: balance tăng làm cho account nhảy vào top 5 => phải show account trong top 5",
									" *   + TH2: balance tăng ko làm cho account nhảy vào top 5 => chỉ thay đổi số của remaining_accounts",
									" * Note: tạo invoice sẽ ko ảnh hưởng, chỉ ảnh hưởng bởi tnx",
									" */",
									"",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"if(testcase == 4){",
									"    // setTimeout(function(){}, 5000); // timeout 5s khi chưa có đủ 5 records",
									"}",
									"",
									"let payload = {",
									"    \"branch_id\": pm.environment.get(\"C-branch_id\"),",
									"    \"business_id\": parseInt(pm.environment.get(\"C-business_id\"))",
									"}",
									"",
									"console.log(\"payload: \",payload);",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-location-timezone",
								"value": "UTC+07:00",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-ledger/api/v1/report/account-lifetime",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-ledger",
								"api",
								"v1",
								"report",
								"account-lifetime"
							]
						}
					},
					"response": []
				},
				{
					"name": "report_cash_flow_period",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/**",
									" * period: year, month, week",
									" */",
									"",
									"let period = \"month\";",
									"pm.environment.set(\"C-period\",period);",
									"",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"console.log(\"period: \" + period);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let cash_flow_period = null;",
									"    try {",
									"        cash_flow_period = jsData.data;",
									"        /**",
									"         * period: week, month, year",
									"         * sum_card_data",
									"         * dates_data",
									"         */",
									"    } catch {",
									"        console.log(\"Can't get report cash_flow data\");",
									"    }",
									"",
									"    switch(testcase){",
									"        case 2:",
									"            pm.test(\"Got cash_flow_period \", function () {",
									"                pm.expect(cash_flow_period != null).to.be.true;",
									"            });",
									"            pm.environment.set(\"C-cash_flow_period\",cash_flow_period);",
									"            console.log(\"cash_flow_period: \", cash_flow_period);",
									"",
									"            // ================================================ bonus check current data",
									"            // waiting logic updated at phase 2",
									"            // ================================================ ",
									"",
									"            postman.setNextRequest(\"report_profit_loss_period\"); // report_profit_loss_period, get_list_transaction",
									"            break;",
									"        case 4: case 6:",
									"            let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"            let old_cash_flow_period = pm.environment.get(\"C-cash_flow_period\");",
									"            // console.log(\"old_cash_flow_period:\",old_cash_flow_period);",
									"            // console.log(\"===================\");",
									"            // console.log(\"cash_flow_period:\",cash_flow_period);",
									"",
									"            // tăng income",
									"            pm.test(\"total_income increase \" + tnx_obj.amount, function () {",
									"                console.log(\"old: \" + old_cash_flow_period.sum_card_data.total_income);",
									"                console.log(\"new: \" + cash_flow_period.sum_card_data.total_income);",
									"                pm.expect(cash_flow_period.sum_card_data.total_income == old_cash_flow_period.sum_card_data.total_income + tnx_obj.amount).to.be.true;",
									"            });",
									"",
									"            pm.test(\"nothing happen with total_expense\", function () {",
									"                console.log(\"old: \" + old_cash_flow_period.sum_card_data.total_expense);",
									"                console.log(\"new: \" + cash_flow_period.sum_card_data.total_expense);",
									"                pm.expect(cash_flow_period.sum_card_data.total_expense == old_cash_flow_period.sum_card_data.total_expense).to.be.true;",
									"            });",
									"",
									"            pm.test(\"total_gap increase \" + tnx_obj.amount, function () {",
									"                console.log(\"old: \" + old_cash_flow_period.sum_card_data.total_gap);",
									"                console.log(\"new: \" + cash_flow_period.sum_card_data.total_gap);",
									"                pm.expect(cash_flow_period.sum_card_data.total_gap == old_cash_flow_period.sum_card_data.total_gap + tnx_obj.amount).to.be.true;",
									"            });",
									"",
									"            // thay đổi ngày tương ứng",
									"            let tnx_date = tnx_obj.value_at.substring(0,10);",
									"            let old_date = null, act_date = null;",
									"            for(let i in cash_flow_period.dates_data){",
									"                let day_i = cash_flow_period.dates_data[i].date.substring(0,10);",
									"                if(day_i == tnx_date){",
									"                    act_date = cash_flow_period.dates_data[i];",
									"                    break;",
									"                }",
									"            }",
									"",
									"            for(let i in old_cash_flow_period.dates_data){",
									"                let day_i = old_cash_flow_period.dates_data[i].date.substring(0,10);",
									"                if(day_i == tnx_date){",
									"                    old_date = old_cash_flow_period.dates_data[i];",
									"                    break;",
									"                }",
									"            }",
									"",
									"            if(old_date != null && act_date != null){",
									"                console.log(\"act_date: \",act_date);",
									"                console.log(\"old_date: \",old_date);",
									"                pm.test(\"income at \" + tnx_date + \" increase \" + tnx_obj.amount, function () {",
									"                    pm.expect(act_date.income == old_date.income + tnx_obj.amount).to.be.true;",
									"                });",
									"",
									"                pm.test(\"gap at \" + tnx_date + \" increase \" + tnx_obj.amount, function () {",
									"                    pm.expect(act_date.gap == old_date.gap + tnx_obj.amount).to.be.true;",
									"                });",
									"            }",
									"",
									"            postman.setNextRequest(\"report_profit_loss_period\"); // report_profit_loss_period",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get report cash_flow, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-location-timezone",
								"value": "UTC+07:00"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"branch_id\": \"{{C-branch_id}}\",\n    \"business_id\": {{C-business_id}},\n    \"period\": \"{{C-period}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-ledger/api/v1/report/cash-flow-period",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-ledger",
								"api",
								"v1",
								"report",
								"cash-flow-period"
							]
						}
					},
					"response": []
				},
				{
					"name": "report_profit_loss_period",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/**",
									" * \"report_type\": sum,income,expense",
									" * Note: report_type = sum => hiện tại bị null dates_data",
									" * - C1: call từng loại income, expense dể lấy dates_data",
									" * - C2: wait fixing from dev",
									" * => tạm thời xử lý case sum, 2 case còn lại sẽ handle sau",
									" */",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let full_check = pm.environment.get(\"C-full_check\");",
									"if(!full_check){",
									"    full_check = 1;",
									"    pm.environment.set(\"C-full_check\",full_check);",
									"    report_type = \"income\";",
									"} else {",
									"    report_type = \"expense\";",
									"}",
									"pm.environment.set(\"C-report_type\",report_type);",
									"console.log(\"full_check: \" + full_check);",
									"console.log(\"report_type: \" + report_type);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let full_check = pm.environment.get(\"C-full_check\");",
									"    let profit_period = null, loss_period = null;",
									"    try {",
									"        if(full_check == 1){",
									"            profit_period = jsData.data;",
									"        } else {",
									"            loss_period = jsData.data;",
									"        }",
									"        /**",
									"         * period: week, month, year",
									"         * sum_card_data",
									"         * dates_data",
									"         */",
									"    } catch {",
									"        console.log(\"Can't get report cash_flow data\");",
									"    }",
									"",
									"    switch(testcase){",
									"        case 2:",
									"            if(full_check == 1){",
									"                pm.test(\"Got profit_period \", function () {",
									"                    pm.environment.set(\"C-profit_period\",profit_period);",
									"                    pm.expect(profit_period != null).to.be.true;",
									"                });",
									"                pm.environment.set(\"C-profit_period\",profit_period);",
									"                // console.log(\"profit_period: \", profit_period);",
									"",
									"                full_check++;",
									"                pm.environment.set(\"C-full_check\",full_check);",
									"                postman.setNextRequest(\"report_profit_loss_period\");",
									"            } else {",
									"                pm.test(\"Got loss_period \", function () {",
									"                    pm.environment.set(\"C-loss_period\",loss_period);",
									"                    pm.expect(loss_period != null).to.be.true;",
									"                });",
									"                pm.environment.set(\"C-loss_period\",loss_period);",
									"                // console.log(\"loss_period: \", loss_period);",
									"",
									"                pm.environment.unset(\"C-full_check\");",
									"                postman.setNextRequest(\"report_chart_balance_change\"); // report_chart_balance_change",
									"            }",
									"            break;",
									"        case 4: case 6:",
									"            let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"            let tnx_date = tnx_obj.value_at.substring(0,10);",
									"            ",
									"            if(full_check == 1){",
									"                let old_profit_period = pm.environment.get(\"C-profit_period\");",
									"                // KHÔNG THAY ĐỔI INCOME KHI TẠO TRANSACTION CHO INVOICE, VÌ KHI TẠO INVOICE ĐÃ GHI RỒI",
									"                // nothing happen",
									"                pm.test(\"Nothing happen!!!\", function () {",
									"                    pm.expect(JSON.stringify(profit_period) == JSON.stringify(old_profit_period)).to.be.true;",
									"                });",
									"",
									"                // // có thay đổi => total_income increase",
									"                // pm.test(\"total_income increase \" + tnx_obj.amount, function () {",
									"                //     pm.expect(profit_period.sum_card_data.total_income == old_profit_period.sum_card_data.total_income + tnx_obj.amount).to.be.true;",
									"                // });",
									"                // // thay đổi ngày tương ứng",
									"                // let old_date = null, act_date = null;",
									"                // for(let i in profit_period.dates_data){",
									"                //     let day_i = profit_period.dates_data[i].date.substring(0,10);",
									"                //     if(day_i == tnx_date){",
									"                //         act_date = profit_period.dates_data[i];",
									"                //         break;",
									"                //     }",
									"                // }",
									"",
									"                // for(let i in old_profit_period.dates_data){",
									"                //     let day_i = old_profit_period.dates_data[i].date.substring(0,10);",
									"                //     if(day_i == tnx_date){",
									"                //         old_date = old_profit_period.dates_data[i];",
									"                //         break;",
									"                //     }",
									"                // }",
									"",
									"                // if(old_date != null && act_date != null){",
									"                //     console.log(\"act_date: \",act_date);",
									"                //     console.log(\"old_date: \",old_date);",
									"                //     pm.test(\"income at \" + tnx_date + \" increase \" + tnx_obj.amount, function () {",
									"                //         pm.expect(act_date.income == old_date.income + tnx_obj.amount).to.be.true;",
									"                //     });",
									"                // }",
									"",
									"                full_check++;",
									"                pm.environment.set(\"C-full_check\",full_check);",
									"                postman.setNextRequest(\"report_profit_loss_period\");",
									"            } else {",
									"                let old_loss_period = pm.environment.get(\"C-loss_period\");",
									"                // console.log(\"debug old_loss_period: \", old_loss_period);",
									"                // console.log(\"debug loss_period: \", loss_period);",
									"                if(tnx_obj.txn_type == \"out\"){",
									"                    // có thay đổi => total_expense increase",
									"                    pm.test(\"total_expense increase \" + tnx_obj.amount, function () {",
									"                        pm.expect(loss_period.sum_card_data.total_expense == old_loss_period.sum_card_data.total_expense + tnx_obj.amount).to.be.true;",
									"                    });",
									"                    // thay đổi ngày tương ứng",
									"                    let old_date = null, act_date = null;",
									"                    for(let i in loss_period.dates_data){",
									"                        let day_i = loss_period.dates_data[i].date.substring(0,10);",
									"                        if(day_i == tnx_date){",
									"                            act_date = loss_period.dates_data[i];",
									"                            break;",
									"                        }",
									"                    }",
									"",
									"                    for(let i in old_loss_period.dates_data){",
									"                        let day_i = old_loss_period.dates_data[i].date.substring(0,10);",
									"                        if(day_i == tnx_date){",
									"                            old_date = old_loss_period.dates_data[i];",
									"                            break;",
									"                        }",
									"                    }",
									"",
									"                    if(old_date != null && act_date != null){",
									"                        console.log(\"act_date: \",act_date);",
									"                        console.log(\"old_date: \",old_date);",
									"                        pm.test(\"expense at \" + tnx_date + \" increase \" + tnx_obj.amount, function () {",
									"                            pm.expect(act_date.expense == old_date.expense + tnx_obj.amount).to.be.true;",
									"                        });",
									"                    }",
									"                } else {",
									"                    // nothing happen",
									"                    pm.test(\"Nothing happen!!!\", function () {",
									"                        pm.expect(JSON.stringify(loss_period) == JSON.stringify(old_loss_period)).to.be.true;",
									"                    });",
									"                }",
									"",
									"                pm.environment.unset(\"C-full_check\");",
									"                postman.setNextRequest(\"report_chart_balance_change\"); // report_chart_balance_change",
									"            }",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get report cash_flow, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-location-timezone",
								"value": "UTC+07:00"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"branch_id\": \"{{C-branch_id}}\",\n    \"business_id\": {{C-business_id}},\n    \"period\": \"{{C-period}}\",\n    \"report_type\": \"{{C-report_type}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-ledger/api/v1/report/profit-loss-period",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-ledger",
								"api",
								"v1",
								"report",
								"profit-loss-period"
							]
						}
					},
					"response": []
				},
				{
					"name": "report_chart_balance_change",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/**",
									" * \"report_type\": sum,income,expense",
									" * Note: report_type = sum => hiện tại bị null dates_data",
									" * - C1: call từng loại income, expense dể lấy dates_data",
									" * - C2: wait fixing from dev",
									" * => tạm thời xử lý case sum, 2 case còn lại sẽ handle sau",
									" * period thêm 1 số filter: quarter, l7d, l30d, l90d",
									" */",
									"let report_type = \"sum\";",
									"pm.environment.set(\"C-report_type\",report_type);",
									"",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"console.log(\"report_type: \" + report_type);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let chart_balance_change = null;",
									"    try {",
									"        chart_balance_change = jsData.data;",
									"        /**",
									"         * period: week, month, year",
									"         * sum_card_data",
									"         * dates_data",
									"         */",
									"    } catch {",
									"        console.log(\"Can't get report cash_flow data\");",
									"    }",
									"",
									"    switch(testcase){",
									"        case 2:",
									"            pm.test(\"Got chart_balance_change \", function () {",
									"                pm.environment.set(\"C-chart_balance_change\",chart_balance_change);",
									"                pm.expect(chart_balance_change != null).to.be.true;",
									"            });",
									"",
									"            console.log(\"chart_balance_change: \", chart_balance_change);",
									"",
									"            // ================================================ bonus check current data",
									"            // waiting logic updated at phase 2",
									"            // ================================================ ",
									"",
									"            postman.setNextRequest(\"get_chart_balance_change\"); // get_chart_balance_change",
									"            break;",
									"        case 4: case 6:",
									"            let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"            let old_chart_balance_change = pm.environment.get(\"C-chart_balance_change\");",
									"            // console.log(\"debug old_chart_balance_change: \", old_chart_balance_change);",
									"            // console.log(\"debug chart_balance_change: \", chart_balance_change);",
									"",
									"            let tnx_date = tnx_obj.value_at.substring(0,10);",
									"            let old_date = null, act_date = null;",
									"            for(let i in chart_balance_change.dates_data){",
									"                let day_i = chart_balance_change.dates_data[i].date.substring(0,10);",
									"                if(day_i == tnx_date){",
									"                    act_date = chart_balance_change.dates_data[i];",
									"                    break;",
									"                }",
									"            }",
									"",
									"            for(let i in old_chart_balance_change.dates_data){",
									"                let day_i = old_chart_balance_change.dates_data[i].date.substring(0,10);",
									"                if(day_i == tnx_date){",
									"                    old_date = old_chart_balance_change.dates_data[i];",
									"                    break;",
									"                }",
									"            }",
									"",
									"            // có thay đổi => total_debit increase",
									"            pm.test(\"total_debit increase \" + tnx_obj.amount, function () {",
									"                pm.expect(chart_balance_change.sum_card_data.total_debit == old_chart_balance_change.sum_card_data.total_debit + tnx_obj.amount).to.be.true;",
									"            });",
									"            // thay đổi ngày tương ứng",
									"            if(old_date != null && act_date != null){",
									"                console.log(\"act_date: \",act_date);",
									"                console.log(\"old_date: \",old_date);",
									"                pm.test(\"debit_amount at \" + tnx_date + \" increase \" + tnx_obj.amount, function () {",
									"                    pm.expect(act_date.debit_amount == old_date.debit_amount + tnx_obj.amount).to.be.true;",
									"                });",
									"",
									"                pm.test(\"end_amount at \" + tnx_date + \" increase \" + tnx_obj.amount, function () {",
									"                    pm.expect(act_date.end_amount == old_date.end_amount + tnx_obj.amount).to.be.true;",
									"                });",
									"",
									"                pm.test(\"gap at \" + tnx_date + \" increase \" + tnx_obj.amount, function () {",
									"                    pm.expect(act_date.gap == old_date.gap + tnx_obj.amount).to.be.true;",
									"                });",
									"            }",
									"",
									"            console.log(\"-------- End Testsuite 48 --------\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get report cash_flow, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-location-timezone",
								"value": "UTC+07:00"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"branch_id\": \"{{C-branch_id}}\",\n    \"business_id\": {{C-business_id}},\n    \"period\": \"{{C-period}}\",\n    \"report_type\": \"{{C-report_type}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-ledger/api/v1/report/chart-balance-change",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-ledger",
								"api",
								"v1",
								"report",
								"chart-balance-change"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.request.headers.add({",
							" key: \"authorization\",",
							" value: \"Bearer \" + pm.environment.get(\"C-userToken\")",
							"});",
							"",
							"pm.request.headers.add({",
							" key: \"Content-Type\",",
							" value: \"application/json\"",
							"});"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "report-app",
			"item": [
				{
					"name": "balance_n_forecast_widget",
					"item": [
						{
							"name": "get_chart_balance_change",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let testcase = pm.environment.get(\"C-testcase\");",
											"console.log(\"Testcase: \" + testcase);",
											"",
											"// let configs = pm.environment.get(\"C-configs\");",
											"",
											"let payload;",
											"switch(testcase){",
											"    case 2:",
											"        let is_get_last = pm.environment.get(\"C-is_get_last\");",
											"        if(!is_get_last){",
											"            is_get_last = false;",
											"            pm.environment.set(\"C-is_get_last\",is_get_last);",
											"            ",
											"            payload = {",
											"                \"business_id\": parseInt(pm.environment.get(\"C-business_id\")),",
											"                \"period\": \"last_month\", // last_month, month",
											"                \"account_ids\": []",
											"            }",
											"        } else {",
											"            payload = {",
											"                \"business_id\": parseInt(pm.environment.get(\"C-business_id\")),",
											"                \"period\": \"month\", // last_month, month",
											"                \"account_ids\": []",
											"            }",
											"        }",
											"        break;",
											"    case 4:",
											"        payload = {",
											"            \"business_id\": parseInt(pm.environment.get(\"C-business_id\")),",
											"            \"period\": \"month\", // last_month, month",
											"            \"account_ids\": []",
											"        }",
											"        break;",
											"    default:",
											"        console.log(\"Missing flow\");",
											"}",
											"",
											"console.log(\"payload: \",payload);",
											"pm.environment.set(\"C-payload\",JSON.stringify(payload));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// ============================= getFirstDayOfMonth",
											"function getFirstDayOfMonth(date_timestamp){",
											"  let setDate = new Date(date_timestamp*1000);",
											"  let getDate = new Date(setDate.getFullYear(), setDate.getMonth(), 1);",
											"  return getDate.toISOString();",
											"}",
											"",
											"// ============================= getLastDayOfMonth",
											"function getLastDayOfMonth(date_timestamp){",
											"  let setDate = new Date(date_timestamp*1000);",
											"  let firstDayOfNextMonth = new Date(setDate.getFullYear(), setDate.getMonth() + 1, 1);",
											"  let lastDayOfMonth = new Date(firstDayOfNextMonth - 1);",
											"  return lastDayOfMonth.toISOString();",
											"}",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsData = pm.response.json();",
											"if(pm.response.code == 200){",
											"    let testcase = pm.environment.get(\"C-testcase\");",
											"",
											"    let chart_balance_change = null;",
											"    let chart_balance_change_last_month = pm.environment.get(\"C-chart_balance_change_last_month\");",
											"    let tnx_obj, tnx_date;",
											"    switch(testcase){",
											"        case 2:",
											"            let is_get_last = pm.environment.get(\"C-is_get_last\");",
											"",
											"            if(!is_get_last){",
											"                is_get_last = true;",
											"                pm.environment.set(\"C-is_get_last\",is_get_last);",
											"",
											"                chart_balance_change_last_month = jsData.data.sum_card_data;",
											"                pm.environment.set(\"C-chart_balance_change_last_month\",chart_balance_change_last_month);",
											"",
											"                postman.setNextRequest(\"get_chart_balance_change\");",
											"            } else {",
											"                pm.environment.unset(\"C-is_get_last\");",
											"                ",
											"                chart_balance_change = jsData.data;",
											"                pm.test(\"Got chart_balance_change\", function () {",
											"                    // sum_card_data.total_balance_amount",
											"                    // dates_data",
											"                    pm.environment.set(\"C-chart_balance_change\",chart_balance_change);",
											"                    pm.expect(chart_balance_change != null).to.be.true;",
											"                });",
											"",
											"                // check data chart & table",
											"                let sum_table = {",
											"                    \"total_debit\":0,",
											"                    \"total_credit\":0,",
											"                    \"current_total_debit\":0,",
											"                    \"current_total_credit\":0,",
											"                    \"total_balance_amount\":0,",
											"                }",
											"                let month_obj = {",
											"                    \"start_amount\":0,",
											"                    \"end_amount\":0",
											"                }",
											"                for(let i in jsData.data.dates_data){",
											"                    sum_table.current_total_debit += jsData.data.dates_data[i].debit_amount;",
											"                    sum_table.current_total_credit += jsData.data.dates_data[i].credit_amount;",
											"",
											"                    console.log(\"Date: \" + jsData.data.dates_data[i].date);",
											"                    if(i != 0){",
											"                        // start của ngày hôm nay lả end của ngày hôm trước",
											"                        pm.test(\"--- start_amount must be \" + jsData.data.dates_data[i-1].end_amount, function () {",
											"                            pm.expect(jsData.data.dates_data[i-1].end_amount).to.eql(jsData.data.dates_data[i].start_amount);",
											"                        });",
											"",
											"                        if(i == jsData.data.dates_data.length - 1){",
											"                            month_obj.end_amount = jsData.data.dates_data[i].end_amount;",
											"                        }",
											"                    } else {",
											"                        // start của ngày đầu tháng là total_balance_amount của tháng trước",
											"                        pm.test(\"--- start_amount must be \" + chart_balance_change_last_month.total_balance_amount, function () {",
											"                            pm.expect(chart_balance_change_last_month.total_balance_amount).to.eql(jsData.data.dates_data[i].start_amount);",
											"                        });",
											"                        month_obj.start_amount = chart_balance_change_last_month.total_balance_amount;",
											"                    } ",
											"",
											"                    // gap =  debit_amount - credit_amount",
											"                    pm.test(\"--- gap must be \" + (jsData.data.dates_data[i].debit_amount - jsData.data.dates_data[i].credit_amount), function () {",
											"                        // console.log(\"act gap: \" + jsData.data.dates_data[i].gap);",
											"                        pm.expect(jsData.data.dates_data[i].gap).to.eql(jsData.data.dates_data[i].debit_amount - jsData.data.dates_data[i].credit_amount);",
											"                    });",
											"",
											"                    // end_amount = start_amount + gap",
											"                    pm.test(\"--- end_amount must be \" + (jsData.data.dates_data[i].start_amount + jsData.data.dates_data[i].gap), function () {",
											"                        pm.expect(jsData.data.dates_data[i].end_amount).to.eql(jsData.data.dates_data[i].start_amount + jsData.data.dates_data[i].gap);",
											"                    });",
											"                }",
											"",
											"                // current_total_debit",
											"                pm.test(\"current_total_debit must be \" + sum_table.current_total_debit, function () {",
											"                    pm.expect(jsData.data.sum_card_data.current_total_debit).to.eql(sum_table.current_total_debit);",
											"                });",
											"",
											"                // current_total_credit",
											"                pm.test(\"current_total_credit must be \" + sum_table.current_total_credit, function () {",
											"                    pm.expect(jsData.data.sum_card_data.current_total_credit).to.eql(sum_table.current_total_credit);",
											"                });",
											"",
											"                // total_debit = last_month.total_debit + month.current_total_debit",
											"                // console.log(\"last month data: \", chart_balance_change_last_month);",
											"                pm.test(\"total_debit must be \" + (chart_balance_change_last_month.total_debit + sum_table.current_total_debit), function () {",
											"                    pm.expect(jsData.data.sum_card_data.total_debit).to.eql(chart_balance_change_last_month.total_debit + sum_table.current_total_debit);",
											"                });",
											"",
											"                // total_credit = last_month.total_credit + month.current_total_credit",
											"                pm.test(\"total_credit must be \" + (chart_balance_change_last_month.total_credit + sum_table.current_total_credit), function () {",
											"                    pm.expect(jsData.data.sum_card_data.total_credit).to.eql(chart_balance_change_last_month.total_credit + sum_table.current_total_credit);",
											"                });",
											"",
											"                // total_balance_amount = total_debit - total_credit",
											"                pm.test(\"total_balance_amount must be \" + (jsData.data.sum_card_data.total_debit - jsData.data.sum_card_data.total_credit), function () {",
											"                    pm.expect(jsData.data.sum_card_data.total_balance_amount).to.eql(jsData.data.sum_card_data.total_debit - jsData.data.sum_card_data.total_credit);",
											"                });",
											"",
											"                pm.environment.set(\"C-month_obj\",month_obj);",
											"                postman.setNextRequest(\"get_forecast_dashboard\"); // get_forecast_dashboard",
											"            }",
											"            break;",
											"        case 4:",
											"            tnx_obj = pm.environment.get(\"C-tnx_obj\");",
											"            tnx_date = tnx_obj.value_at;",
											"            console.log(\"tnx_date: \" + tnx_date);",
											"            let old_chart_balance_change = pm.environment.get(\"C-chart_balance_change\");",
											"            chart_balance_change = jsData.data;",
											"            // console.log(\"old_chart_balance_change: \", old_chart_balance_change);",
											"            // console.log(\"chart_balance_change: \", chart_balance_change);",
											"",
											"            let today = new Date();",
											"            let today_tmp = Math.floor(today.getTime()/1000);",
											"            let firstDayOfThisMonth = getFirstDayOfMonth(today_tmp);",
											"            let lastDayOfThisMonth = getLastDayOfMonth(today_tmp);",
											"            if(tnx_date < firstDayOfThisMonth || tnx_date > lastDayOfThisMonth){",
											"                // nothing happen",
											"                pm.test(\"Nothing happen!!!\", function () {",
											"                    pm.expect(JSON.stringify(chart_balance_change) == JSON.stringify(old_chart_balance_change)).to.be.true;",
											"                });",
											"            } else {",
											"                tnx_date = tnx_date.substring(0,10);",
											"                let exp_change = tnx_obj.amount;",
											"                // có thay đổi => total_income increase",
											"                if(tnx_obj.txn_type == \"in\"){",
											"                    // total_debit",
											"                    pm.test(\"total_debit increase \" + exp_change, function () {",
											"                        pm.expect(chart_balance_change.sum_card_data.total_debit == old_chart_balance_change.sum_card_data.total_debit + exp_change).to.be.true;",
											"                    });",
											"",
											"                    // current_total_debit",
											"                    pm.test(\"current_total_debit increase \" + exp_change, function () {",
											"                        pm.expect(chart_balance_change.sum_card_data.current_total_debit == old_chart_balance_change.sum_card_data.current_total_debit + exp_change).to.be.true;",
											"                    });",
											"",
											"                    // total_balance_amount",
											"                    pm.test(\"total_balance_amount increase \" + exp_change, function () {",
											"                        pm.expect(chart_balance_change.sum_card_data.total_balance_amount == old_chart_balance_change.sum_card_data.total_balance_amount + exp_change).to.be.true;",
											"                    });",
											"",
											"                    // thay đổi ngày tương ứng",
											"                    let old_date = null, act_date = null;",
											"                    for(let i in chart_balance_change.dates_data){",
											"                        let day_i = chart_balance_change.dates_data[i].date.substring(0,10);",
											"                        if(day_i == tnx_date){",
											"                            act_date = chart_balance_change.dates_data[i];",
											"                            break;",
											"                        }",
											"                    }",
											"",
											"                    for(let i in old_chart_balance_change.dates_data){",
											"                        let day_i = old_chart_balance_change.dates_data[i].date.substring(0,10);",
											"                        if(day_i == tnx_date){",
											"                            old_date = old_chart_balance_change.dates_data[i];",
											"                            break;",
											"                        }",
											"                    }",
											"",
											"                    if(old_date != null && act_date != null){",
											"                        console.log(\"act_date: \",act_date);",
											"                        console.log(\"old_date: \",old_date);",
											"                        // debit_amount",
											"                        pm.test(\"debit_amount at \" + tnx_date + \" increase \" + exp_change, function () {",
											"                            pm.expect(act_date.debit_amount == old_date.debit_amount + exp_change).to.be.true;",
											"                        });",
											"",
											"                        // end_amount",
											"                        pm.test(\"end_amount at \" + tnx_date + \" increase \" + exp_change, function () {",
											"                            pm.expect(act_date.end_amount == old_date.end_amount + exp_change).to.be.true;",
											"                        });",
											"                    }",
											"                } else {",
											"                    // total_credit",
											"                    pm.test(\"total_debit increase \" + exp_change, function () {",
											"                        pm.expect(chart_balance_change.sum_card_data.total_credit == old_chart_balance_change.sum_card_data.total_credit + exp_change).to.be.true;",
											"                    });",
											"",
											"                    // current_total_credit",
											"                    pm.test(\"current_total_credit increase \" + exp_change, function () {",
											"                        pm.expect(chart_balance_change.sum_card_data.current_total_credit == old_chart_balance_change.sum_card_data.current_total_credit + exp_change).to.be.true;",
											"                    });",
											"",
											"                    // total_balance_amount",
											"                    pm.test(\"total_balance_amount descrease \" + exp_change, function () {",
											"                        pm.expect(chart_balance_change.sum_card_data.total_balance_amount == old_chart_balance_change.sum_card_data.total_balance_amount - exp_change).to.be.true;",
											"                    });",
											"",
											"                    // thay đổi ngày tương ứng",
											"                    let old_date = null, act_date = null;",
											"                    for(let i in chart_balance_change.dates_data){",
											"                        let day_i = chart_balance_change.dates_data[i].date.substring(0,10);",
											"                        if(day_i == tnx_date){",
											"                            act_date = chart_balance_change.dates_data[i];",
											"                            break;",
											"                        }",
											"                    }",
											"",
											"                    for(let i in old_chart_balance_change.dates_data){",
											"                        let day_i = old_chart_balance_change.dates_data[i].date.substring(0,10);",
											"                        if(day_i == tnx_date){",
											"                            old_date = old_chart_balance_change.dates_data[i];",
											"                            break;",
											"                        }",
											"                    }",
											"",
											"                    if(old_date != null && act_date != null){",
											"                        console.log(\"act_date: \",act_date);",
											"                        console.log(\"old_date: \",old_date);",
											"                        // credit_amount",
											"                        pm.test(\"credit_amount at \" + tnx_date + \" increase \" + exp_change, function () {",
											"                            pm.expect(act_date.credit_amount == old_date.credit_amount + exp_change).to.be.true;",
											"                        });",
											"                        ",
											"                        // end_amount",
											"                        pm.test(\"end_amount at \" + tnx_date + \" descrease \" + exp_change, function () {",
											"                            pm.expect(act_date.end_amount == old_date.end_amount - exp_change).to.be.true;",
											"                        });",
											"                    }",
											"                }",
											"            }",
											"",
											"            postman.setNextRequest(\"get_forecast_dashboard\"); // get_forecast_dashboard",
											"            break;",
											"        default:",
											"            console.log(\"Missing flow, end test\");",
											"            postman.setNextRequest(null);",
											"            break;",
											"    }",
											"} else {",
											"    console.log(\"Can't get chart balance change, end test\",jsData);",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "authorization",
										"value": "Bearer {{C-userToken}}"
									},
									{
										"key": "x-locale",
										"value": "en",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{C-payload}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{finone_url}}/fo-ledger/api/v1/report/chart-balance-change",
									"host": [
										"{{finone_url}}"
									],
									"path": [
										"fo-ledger",
										"api",
										"v1",
										"report",
										"chart-balance-change"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_chart_balance_change_branch",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let testcase = pm.environment.get(\"C-testcase\");",
											"console.log(\"Testcase: \" + testcase);",
											"",
											"let payload;",
											"switch (testcase) {",
											"    case 2:",
											"        let is_get_last = pm.environment.get(\"C-is_get_last\");",
											"        if (!is_get_last) {",
											"            is_get_last = false;",
											"            pm.environment.set(\"C-is_get_last\", is_get_last);",
											"",
											"            payload = {",
											"                \"business_id\": parseInt(pm.environment.get(\"C-business_id\")),",
											"                \"branch_id\":pm.environment.get(\"C-branch_id\"),",
											"                \"period\": \"last_month\", // last_month, month",
											"                \"account_ids\": []",
											"            }",
											"        } else {",
											"            payload = {",
											"                \"business_id\": parseInt(pm.environment.get(\"C-business_id\")),",
											"                \"branch_id\":pm.environment.get(\"C-branch_id\"),",
											"                \"period\": \"month\", // last_month, month",
											"                \"account_ids\": []",
											"            }",
											"        }",
											"        break;",
											"    case 4:",
											"        payload = {",
											"            \"business_id\": parseInt(pm.environment.get(\"C-business_id\")),",
											"            \"branch_id\":pm.environment.get(\"C-branch_id\"),",
											"            \"period\": \"month\", // last_month, month",
											"            \"account_ids\": []",
											"        }",
											"        break;",
											"    default:",
											"        console.log(\"Missing flow\");",
											"}",
											"",
											"console.log(\"payload: \", payload);",
											"pm.environment.set(\"C-payload\", JSON.stringify(payload));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsData = pm.response.json();",
											"if(pm.response.code == 200){",
											"    let testcase = pm.environment.get(\"C-testcase\");",
											"",
											"    let chart_balance_change = null;",
											"    let chart_balance_change_last_month = pm.environment.get(\"C-chart_balance_change_last_month\");",
											"    let invoice_obj, invoice_date;",
											"    switch(testcase){",
											"        case 2:",
											"            let is_get_last = pm.environment.get(\"C-is_get_last\");",
											"",
											"            if(!is_get_last){",
											"                is_get_last = true;",
											"                pm.environment.set(\"C-is_get_last\",is_get_last);",
											"",
											"                chart_balance_change_last_month = jsData.data.sum_card_data;",
											"                pm.environment.set(\"C-chart_balance_change_last_month\",chart_balance_change_last_month);",
											"",
											"                postman.setNextRequest(\"get_chart_balance_change\");",
											"            } else {",
											"                chart_balance_change = jsData.data;",
											"                pm.test(\"Got chart_balance_change \", function () {",
											"                    // sum_card_data.total_balance_amount",
											"                    // dates_data",
											"                    pm.environment.set(\"C-chart_balance_change\",chart_balance_change);",
											"                    pm.expect(chart_balance_change != null).to.be.true;",
											"                });",
											"",
											"                // check data chart & table",
											"                let sum_table = {",
											"                    \"total_debit\":0,",
											"                    \"total_credit\":0,",
											"                    \"current_total_debit\":0,",
											"                    \"current_total_credit\":0,",
											"                    \"total_balance_amount\":0,",
											"                }",
											"                for(let i in jsData.data.dates_data){",
											"                    sum_table.current_total_debit += jsData.data.dates_data[i].debit_amount;",
											"                    sum_table.current_total_credit += jsData.data.dates_data[i].credit_amount;",
											"",
											"                    console.log(\"Date: \" + jsData.data.dates_data[i].date);",
											"                    if(i != 0){",
											"                        // start của ngày hôm nay lả end của ngày hôm trước",
											"                        pm.test(\"--- start_amount must be \" + jsData.data.dates_data[i-1].end_amount, function () {",
											"                            pm.expect(jsData.data.dates_data[i-1].end_amount).to.eql(jsData.data.dates_data[i].start_amount);",
											"                        });",
											"                    } else {",
											"                        // start của ngày đầu tháng là total_balance_amount của tháng trước",
											"                        pm.test(\"--- start_amount must be \" + chart_balance_change_last_month.total_balance_amount, function () {",
											"                            pm.expect(chart_balance_change_last_month.total_balance_amount).to.eql(jsData.data.dates_data[i].start_amount);",
											"                        });",
											"                    }",
											"",
											"                    // gap =  debit_amount - credit_amount",
											"                    pm.test(\"--- gap must be \" + (jsData.data.dates_data[i].debit_amount - jsData.data.dates_data[i].credit_amount), function () {",
											"                        // console.log(\"act gap: \" + jsData.data.dates_data[i].gap);",
											"                        pm.expect(jsData.data.dates_data[i].gap).to.eql(jsData.data.dates_data[i].debit_amount - jsData.data.dates_data[i].credit_amount);",
											"                    });",
											"",
											"                    // end_amount = start_amount + gap",
											"                    pm.test(\"--- end_amount must be \" + (jsData.data.dates_data[i].start_amount + jsData.data.dates_data[i].gap), function () {",
											"                        pm.expect(jsData.data.dates_data[i].end_amount).to.eql(jsData.data.dates_data[i].start_amount + jsData.data.dates_data[i].gap);",
											"                    });",
											"                }",
											"",
											"                // current_total_debit",
											"                pm.test(\"current_total_debit must be \" + sum_table.current_total_debit, function () {",
											"                    pm.expect(jsData.data.sum_card_data.current_total_debit).to.eql(sum_table.current_total_debit);",
											"                });",
											"",
											"                // current_total_credit",
											"                pm.test(\"current_total_credit must be \" + sum_table.current_total_credit, function () {",
											"                    pm.expect(jsData.data.sum_card_data.current_total_credit).to.eql(sum_table.current_total_credit);",
											"                });",
											"",
											"                // total_debit = last_month.total_debit + month.current_total_debit",
											"                // console.log(\"last month data: \", chart_balance_change_last_month);",
											"                pm.test(\"total_debit must be \" + (chart_balance_change_last_month.total_debit + sum_table.current_total_debit), function () {",
											"                    pm.expect(jsData.data.sum_card_data.total_debit).to.eql(chart_balance_change_last_month.total_debit + sum_table.current_total_debit);",
											"                });",
											"",
											"                // total_credit = last_month.total_credit + month.current_total_credit",
											"                pm.test(\"total_credit must be \" + (chart_balance_change_last_month.total_credit + sum_table.current_total_credit), function () {",
											"                    pm.expect(jsData.data.sum_card_data.total_credit).to.eql(chart_balance_change_last_month.total_credit + sum_table.current_total_credit);",
											"                });",
											"",
											"                // total_balance_amount = total_debit - total_credit",
											"                pm.test(\"total_balance_amount must be \" + (jsData.data.sum_card_data.total_debit - jsData.data.sum_card_data.total_credit), function () {",
											"                    pm.expect(jsData.data.sum_card_data.total_balance_amount).to.eql(jsData.data.sum_card_data.total_debit - jsData.data.sum_card_data.total_credit);",
											"                });",
											"",
											"                postman.setNextRequest(\"get_forecast_dashboard\"); // get_forecast_dashboard",
											"            }",
											"            break;",
											"        case 4:",
											"            invoice_obj = pm.environment.get(\"C-invoice_obj\");",
											"            invoice_date = invoice_obj.value_at;",
											"            console.log(\"invoice_date: \" + invoice_date);",
											"",
											"            if(full_check == 1){",
											"                let old_profit_period = pm.environment.get(\"C-profit_period\");",
											"                // console.log(\"debug old_loss_period: \", old_profit_period);",
											"                // console.log(\"debug loss_period: \", profit_period);",
											"",
											"                // do thời gian lọc là tháng hiện tại => chỉ thay đổi khi value_at nằm trong tháng hiện tại",
											"                let today = new Date();",
											"                let today_tmp = Math.floor(today.getTime()/1000);",
											"                let firstDayOfThisMonth = getFirstDayOfMonth(today_tmp);",
											"                let lastDayOfThisMonth = getLastDayOfMonth(today_tmp);",
											"                if(invoice_date < firstDayOfThisMonth || invoice_date > lastDayOfThisMonth){",
											"                    // nothing happen",
											"                    pm.test(\"Nothing happen!!!\", function () {",
											"                        pm.expect(JSON.stringify(profit_period) == JSON.stringify(old_profit_period)).to.be.true;",
											"                    });",
											"                } else {",
											"                    invoice_date = invoice_date.substring(0,10);",
											"",
											"                    let income_product = 0, income_discount = 0;",
											"                    for(let i in invoice_obj.items){",
											"                        income_product += invoice_obj.items[i].before_tax_amount;",
											"                        income_discount += invoice_obj.items[i].discount_amount;",
											"                    }",
											"                    let exp_change = income_product - income_discount;",
											"                    // có thay đổi => total_income increase",
											"                    pm.test(\"total_income increase \" + exp_change, function () {",
											"                        pm.expect(profit_period.sum_card_data.total_income == old_profit_period.sum_card_data.total_income + exp_change).to.be.true;",
											"                    });",
											"                    // thay đổi ngày tương ứng",
											"                    let old_date = null, act_date = null;",
											"                    for(let i in profit_period.dates_data){",
											"                        let day_i = profit_period.dates_data[i].date.substring(0,10);",
											"                        if(day_i == invoice_date){",
											"                            act_date = profit_period.dates_data[i];",
											"                            break;",
											"                        }",
											"                    }",
											"",
											"                    for(let i in old_profit_period.dates_data){",
											"                        let day_i = old_profit_period.dates_data[i].date.substring(0,10);",
											"                        if(day_i == invoice_date){",
											"                            old_date = old_profit_period.dates_data[i];",
											"                            break;",
											"                        }",
											"                    }",
											"",
											"                    if(old_date != null && act_date != null){",
											"                        console.log(\"act_date: \",act_date);",
											"                        console.log(\"old_date: \",old_date);",
											"                        pm.test(\"income at \" + invoice_date + \" increase \" + exp_change, function () {",
											"                            pm.expect(act_date.income == old_date.income + exp_change).to.be.true;",
											"                        });",
											"                    }",
											"                }",
											"",
											"                full_check++;",
											"                pm.environment.set(\"C-full_check\",full_check);",
											"                postman.setNextRequest(\"report_profit_loss_period\");",
											"            } else {",
											"                let old_loss_period = pm.environment.get(\"C-loss_period\");",
											"                // console.log(\"debug old_loss_period: \", old_loss_period);",
											"                // console.log(\"debug loss_period: \", loss_period);",
											"                ",
											"                pm.test(\"Nothing happen!!!\", function () {",
											"                    pm.expect(JSON.stringify(loss_period) == JSON.stringify(old_loss_period)).to.be.true;",
											"                });",
											"",
											"                pm.environment.unset(\"C-full_check\");",
											"",
											"                console.log(\"-------- End Testsuite 06 --------\");",
											"                postman.setNextRequest(null);",
											"            }",
											"            break;",
											"        default:",
											"            console.log(\"Missing flow, end test\");",
											"            postman.setNextRequest(null);",
											"            break;",
											"    }",
											"} else {",
											"    console.log(\"Can't get chart balance change, end test\",jsData);",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "authorization",
										"value": "Bearer {{C-userToken}}"
									},
									{
										"key": "x-locale",
										"value": "en",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{C-payload}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{finone_url}}/fo-ledger/api/v1/report/chart-balance-change",
									"host": [
										"{{finone_url}}"
									],
									"path": [
										"fo-ledger",
										"api",
										"v1",
										"report",
										"chart-balance-change"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_forecast_dashboard",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let testcase = pm.environment.get(\"C-testcase\");",
											"console.log(\"Testcase: \" + testcase);",
											"",
											"let payload = {",
											"    \"business_id\": parseInt(pm.environment.get(\"C-business_id\")),",
											"    \"current_period_start\": pm.environment.get(\"C-current_period_start\"),",
											"    \"current_period_end\": pm.environment.get(\"C-current_period_end\")",
											"}",
											"",
											"console.log(\"payload: \",payload);",
											"pm.environment.set(\"C-payload\",JSON.stringify(payload));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsData = pm.response.json();",
											"if(pm.response.code == 200){",
											"    let testcase = pm.environment.get(\"C-testcase\");",
											"",
											"    let forecast_dashboard = null;",
											"    let tnx_obj, tnx_date;",
											"    switch(testcase){",
											"        case 2:",
											"            forecast_dashboard = jsData.data;",
											"            pm.test(\"Got forecast_dashboard \", function () {",
											"                pm.environment.set(\"C-forecast_dashboard\",forecast_dashboard);",
											"                pm.expect(forecast_dashboard != null).to.be.true;",
											"            });",
											"            console.log(\"forecast_dashboard: \",forecast_dashboard);",
											"",
											"            postman.setNextRequest(\"get_cash_flow_chart\"); // get_cash_flow_chart",
											"            break;",
											"        case 4:",
											"            let old_forecast_dashboard = pm.environment.get(\"C-forecast_dashboard\");",
											"            forecast_dashboard = jsData.data;",
											"            console.log(\"old_forecast_dashboard: \", old_forecast_dashboard);",
											"            console.log(\"forecast_dashboard: \", forecast_dashboard);",
											"",
											"            let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
											"            ",
											"            if(tnx_obj.txn_type == \"in\"){",
											"                // total_balance",
											"                pm.test(\"total_balance increase \" + tnx_obj.amount, function () {",
											"                    pm.expect(old_forecast_dashboard.total_balance + tnx_obj.amount == forecast_dashboard.total_balance).to.be.true;",
											"                });",
											"",
											"                // forecasted_balance",
											"                pm.test(\"forecasted_balance increase \" + tnx_obj.amount, function () {",
											"                    pm.expect(old_forecast_dashboard.forecasted_balance + tnx_obj.amount == forecast_dashboard.forecasted_balance).to.be.true;",
											"                });",
											"            } else {",
											"                // total_balance",
											"                pm.test(\"total_balance decrease \" + tnx_obj.amount, function () {",
											"                    pm.expect(old_forecast_dashboard.total_balance - tnx_obj.amount == forecast_dashboard.total_balance).to.be.true;",
											"                });",
											"",
											"                // forecasted_balance",
											"                pm.test(\"forecasted_balance decrease \" + tnx_obj.amount, function () {",
											"                    pm.expect(old_forecast_dashboard.forecasted_balance - tnx_obj.amount == forecast_dashboard.forecasted_balance).to.be.true;",
											"                });",
											"            }",
											"",
											"            postman.setNextRequest(\"get_cash_flow_chart\"); // get_cash_flow_chart",
											"            break;",
											"        default:",
											"            console.log(\"Missing flow, end test\");",
											"            postman.setNextRequest(null);",
											"            break;",
											"    }",
											"} else {",
											"    console.log(\"Can't get forecast dashboard, end test\",jsData);",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "authorization",
										"value": "Bearer {{C-userToken}}"
									},
									{
										"key": "x-locale",
										"value": "en"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{C-payload}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{finone_url}}/fo-ledger/api/v1/report/forecast-dashboard",
									"host": [
										"{{finone_url}}"
									],
									"path": [
										"fo-ledger",
										"api",
										"v1",
										"report",
										"forecast-dashboard"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_forecast_dashboard_branch",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let testcase = pm.environment.get(\"C-testcase\");",
											"console.log(\"Testcase: \" + testcase);",
											"",
											"let payload = {",
											"    \"business_id\": parseInt(pm.environment.get(\"C-business_id\")),",
											"    \"branch_id\":pm.environment.get(\"C-branch_id\"),",
											"    \"current_period_start\": pm.environment.get(\"C-current_period_start\"),",
											"    \"current_period_end\": pm.environment.get(\"C-current_period_end\")",
											"}",
											"",
											"console.log(\"payload: \",payload);",
											"pm.environment.set(\"C-payload\",JSON.stringify(payload));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsData = pm.response.json();",
											"if(pm.response.code == 200){",
											"    let testcase = pm.environment.get(\"C-testcase\");",
											"",
											"    let forecast_dashboard = null;",
											"    let invoice_obj, invoice_date;",
											"    switch(testcase){",
											"        case 2:",
											"            forecast_dashboard = jsData.data;",
											"            pm.test(\"Got forecast_dashboard \", function () {",
											"                pm.environment.set(\"C-forecast_dashboard\",forecast_dashboard);",
											"                pm.expect(forecast_dashboard != null).to.be.true;",
											"            });",
											"            console.log(\"forecast_dashboard: \",forecast_dashboard);",
											"",
											"            postman.setNextRequest(\"\"); // get_cash_flow_chart",
											"            break;",
											"        default:",
											"            console.log(\"Missing flow, end test\");",
											"            postman.setNextRequest(null);",
											"            break;",
											"    }",
											"} else {",
											"    console.log(\"Can't get forecast dashboard, end test\",jsData);",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "authorization",
										"value": "Bearer {{C-userToken}}"
									},
									{
										"key": "x-locale",
										"value": "en"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{C-payload}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{finone_url}}/fo-ledger/api/v1/report/forecast-dashboard",
									"host": [
										"{{finone_url}}"
									],
									"path": [
										"fo-ledger",
										"api",
										"v1",
										"report",
										"forecast-dashboard"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "cash_flow_widget",
					"item": [
						{
							"name": "get_cash_flow_chart",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let testcase = pm.environment.get(\"C-testcase\");",
											"console.log(\"Testcase: \" + testcase);",
											"",
											"let configs = pm.environment.get(\"C-configs\");",
											"let payload = {",
											"    \"business_id\": parseInt(pm.environment.get(\"C-business_id\")),",
											"    \"period\": configs.period",
											"}",
											"",
											"console.log(\"payload: \",payload);",
											"pm.environment.set(\"C-payload\",JSON.stringify(payload));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// ============================= getFirstDayOfMonth",
											"function getFirstDayOfMonth(date_timestamp){",
											"  let setDate = new Date(date_timestamp*1000);",
											"  let getDate = new Date(setDate.getFullYear(), setDate.getMonth(), 1);",
											"  return getDate.toISOString();",
											"}",
											"",
											"// ============================= getLastDayOfMonth",
											"function getLastDayOfMonth(date_timestamp){",
											"  let setDate = new Date(date_timestamp*1000);",
											"  let firstDayOfNextMonth = new Date(setDate.getFullYear(), setDate.getMonth() + 1, 1);",
											"  let lastDayOfMonth = new Date(firstDayOfNextMonth - 1);",
											"  return lastDayOfMonth.toISOString();",
											"}",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsData = pm.response.json();",
											"if(pm.response.code == 200){",
											"    let testcase = pm.environment.get(\"C-testcase\");",
											"",
											"    let chart_cash_flow = null;",
											"    let tnx_obj, tnx_date;",
											"    switch(testcase){",
											"        case 2:",
											"            chart_cash_flow = jsData.data;",
											"            pm.test(\"Got chart_cash_flow \", function () {",
											"                // sum_card_data.total_balance_amount",
											"                // dates_data",
											"                pm.environment.set(\"C-chart_cash_flow\",chart_cash_flow);",
											"                pm.expect(chart_cash_flow != null).to.be.true;",
											"            });",
											"",
											"            // check data chart & table",
											"            let sum_table = {",
											"                \"total_income\":0,",
											"                \"total_expense\":0,",
											"                \"total_gap\":0,",
											"                \"total_profit\":0",
											"            }",
											"            for(let i in jsData.data.dates_data){",
											"                sum_table.total_income += jsData.data.dates_data[i].income;",
											"                sum_table.total_expense += jsData.data.dates_data[i].expense;",
											"",
											"                // console.log(\"Date: \" + jsData.data.dates_data[i].date);",
											"",
											"                // gap =  debit_amount - credit_amount",
											"                // pm.test(\"--- gap must be \" + (jsData.data.dates_data[i].income - jsData.data.dates_data[i].expense), function () {",
											"                //     // console.log(\"act gap: \" + jsData.data.dates_data[i].gap);",
											"                //     pm.expect(jsData.data.dates_data[i].gap).to.eql(jsData.data.dates_data[i].income - jsData.data.dates_data[i].expense);",
											"                // });",
											"",
											"                // profit => chưa define",
											"            }",
											"",
											"            // total_income",
											"            pm.test(\"total_income must be \" + sum_table.total_income, function () {",
											"                pm.expect(jsData.data.sum_card_data.total_income).to.eql(sum_table.total_income);",
											"            });",
											"",
											"            // total_expense",
											"            pm.test(\"total_expense must be \" + sum_table.total_expense, function () {",
											"                pm.expect(jsData.data.sum_card_data.total_expense).to.eql(sum_table.total_expense);",
											"            });",
											"",
											"            // total_gap = total_income - total_expense",
											"            // pm.test(\"total_gap must be \" + (jsData.data.sum_card_data.total_income - jsData.data.sum_card_data.total_expense), function () {",
											"            //     pm.expect(jsData.data.sum_card_data.total_gap).to.eql(jsData.data.sum_card_data.total_income - jsData.data.sum_card_data.total_expense);",
											"            // });",
											"",
											"            // total_profit => chưa define",
											"",
											"            postman.setNextRequest(\"get_cash_flow_table\"); // get_cash_flow_table",
											"            break;",
											"        case 4:",
											"            tnx_obj = pm.environment.get(\"C-tnx_obj\");",
											"            tnx_date = tnx_obj.value_at;",
											"            console.log(\"tnx_date: \" + tnx_date);",
											"            let old_chart_cash_flow = pm.environment.get(\"C-chart_cash_flow\");",
											"            chart_cash_flow = jsData.data;",
											"            // do thời gian lọc là tháng hiện tại => chỉ thay đổi khi value_at nằm trong tháng hiện tại",
											"            let today = new Date();",
											"            let today_tmp = Math.floor(today.getTime()/1000);",
											"            let firstDayOfThisMonth = getFirstDayOfMonth(today_tmp);",
											"            let lastDayOfThisMonth = getLastDayOfMonth(today_tmp);",
											"            if(tnx_date < firstDayOfThisMonth || tnx_date > lastDayOfThisMonth){",
											"                // nothing happen",
											"                pm.test(\"Nothing happen!!!\", function () {",
											"                    pm.expect(JSON.stringify(chart_cash_flow) == JSON.stringify(old_chart_cash_flow)).to.be.true;",
											"                });",
											"            } else {",
											"                tnx_date = tnx_date.substring(0,10);",
											"",
											"                let exp_change = tnx_obj.amount;",
											"                // có thay đổi => total_income increase",
											"                if(tnx_obj.txn_type == \"in\"){",
											"                    // total_income",
											"                    pm.test(\"total_income increase \" + exp_change, function () {",
											"                        pm.expect(chart_cash_flow.sum_card_data.total_income == old_chart_cash_flow.sum_card_data.total_income + exp_change).to.be.true;",
											"                    });",
											"",
											"                    // total_gap (chênh lệch tháng cũ với tháng hiện tại)",
											"                    pm.test(\"total_gap increase \" + exp_change, function () {",
											"                        pm.expect(chart_cash_flow.sum_card_data.total_gap == old_chart_cash_flow.sum_card_data.total_gap + exp_change).to.be.true;",
											"                    });",
											"",
											"                    // total_profit = total_income - total_expense",
											"                    pm.test(\"total_profit increase \" + exp_change, function () {",
											"                        pm.expect(chart_cash_flow.sum_card_data.total_profit == old_chart_cash_flow.sum_card_data.total_profit + exp_change).to.be.true;",
											"                    });",
											"",
											"                    // thay đổi ngày tương ứng",
											"                    let old_date = null, act_date = null;",
											"                    for(let i in chart_cash_flow.dates_data){",
											"                        let day_i = chart_cash_flow.dates_data[i].date.substring(0,10);",
											"                        if(day_i == tnx_date){",
											"                            act_date = chart_cash_flow.dates_data[i];",
											"                            break;",
											"                        }",
											"                    }",
											"",
											"                    for(let i in old_chart_cash_flow.dates_data){",
											"                        let day_i = old_chart_cash_flow.dates_data[i].date.substring(0,10);",
											"                        if(day_i == tnx_date){",
											"                            old_date = old_chart_cash_flow.dates_data[i];",
											"                            break;",
											"                        }",
											"                    }",
											"",
											"                    if(old_date != null && act_date != null){",
											"                        console.log(\"act_date: \",act_date);",
											"                        console.log(\"old_date: \",old_date);",
											"                        // income",
											"                        pm.test(\"income at \" + tnx_date + \" increase \" + exp_change, function () {",
											"                            pm.expect(act_date.income == old_date.income + exp_change).to.be.true;",
											"                        });",
											"                        // gap",
											"                        pm.test(\"gap at \" + tnx_date + \" increase \" + exp_change, function () {",
											"                            pm.expect(act_date.gap == old_date.gap + exp_change).to.be.true;",
											"                        });",
											"                    }",
											"                } else {",
											"                    // total_expense",
											"                    pm.test(\"total_expense increase \" + exp_change, function () {",
											"                        pm.expect(chart_cash_flow.sum_card_data.total_expense == old_chart_cash_flow.sum_card_data.total_expense + exp_change).to.be.true;",
											"                    });",
											"",
											"                    // total_gap",
											"                    pm.test(\"total_gap decrease \" + exp_change, function () {",
											"                        pm.expect(chart_cash_flow.sum_card_data.total_gap == old_chart_cash_flow.sum_card_data.total_gap - exp_change).to.be.true;",
											"                    });",
											"",
											"                    // total_profit = total_income - total_expense",
											"                    pm.test(\"total_profit decrease \" + exp_change, function () {",
											"                        pm.expect(chart_cash_flow.sum_card_data.total_profit == old_chart_cash_flow.sum_card_data.total_profit - exp_change).to.be.true;",
											"                    });",
											"",
											"                    // thay đổi ngày tương ứng",
											"                    let old_date = null, act_date = null;",
											"                    for(let i in chart_cash_flow.dates_data){",
											"                        let day_i = chart_cash_flow.dates_data[i].date.substring(0,10);",
											"                        if(day_i == tnx_date){",
											"                            act_date = chart_cash_flow.dates_data[i];",
											"                            break;",
											"                        }",
											"                    }",
											"",
											"                    for(let i in old_chart_cash_flow.dates_data){",
											"                        let day_i = old_chart_cash_flow.dates_data[i].date.substring(0,10);",
											"                        if(day_i == tnx_date){",
											"                            old_date = old_chart_cash_flow.dates_data[i];",
											"                            break;",
											"                        }",
											"                    }",
											"",
											"                    if(old_date != null && act_date != null){",
											"                        console.log(\"act_date: \",act_date);",
											"                        console.log(\"old_date: \",old_date);",
											"                        // expense",
											"                        pm.test(\"expense at \" + tnx_date + \" increase \" + exp_change, function () {",
											"                            pm.expect(act_date.expense == old_date.expense + exp_change).to.be.true;",
											"                        });",
											"                        // gap",
											"                        pm.test(\"gap at \" + tnx_date + \" decrease \" + exp_change, function () {",
											"                            pm.expect(act_date.gap == old_date.gap - exp_change).to.be.true;",
											"                        });",
											"                    }",
											"                }",
											"            }",
											"",
											"            postman.setNextRequest(\"get_cash_flow_table\"); // get_cash_flow_table",
											"            break;",
											"        default:",
											"            console.log(\"Missing flow, end test\");",
											"            postman.setNextRequest(null);",
											"            break;",
											"    }",
											"} else {",
											"    console.log(\"Can't get chart cash flow, end test\",jsData);",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "authorization",
										"value": "Bearer {{C-userToken}}"
									},
									{
										"key": "x-locale",
										"value": "en"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{C-payload}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{finone_url}}/fo-ledger/api/v1/report/cash-flow-period",
									"host": [
										"{{finone_url}}"
									],
									"path": [
										"fo-ledger",
										"api",
										"v1",
										"report",
										"cash-flow-period"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_cash_flow_chart_branch",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let testcase = pm.environment.get(\"C-testcase\");",
											"console.log(\"Testcase: \" + testcase);",
											"",
											"let payload = {",
											"    \"business_id\": parseInt(pm.environment.get(\"C-business_id\")),",
											"    \"branch_id\":pm.environment.get(\"C-branch_id\"),",
											"    \"period\": \"month\"",
											"}",
											"",
											"console.log(\"payload: \",payload);",
											"pm.environment.set(\"C-payload\",JSON.stringify(payload));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsData = pm.response.json();",
											"if(pm.response.code == 200){",
											"    let testcase = pm.environment.get(\"C-testcase\");",
											"",
											"    let chart_cash_flow = null;",
											"    let invoice_obj, invoice_date;",
											"    switch(testcase){",
											"        case 2:",
											"            chart_cash_flow = jsData.data;",
											"            pm.test(\"Got chart_cash_flow \", function () {",
											"                // sum_card_data.total_balance_amount",
											"                // dates_data",
											"                pm.environment.set(\"C-chart_cash_flow\",chart_cash_flow);",
											"                pm.expect(chart_cash_flow != null).to.be.true;",
											"            });",
											"",
											"            // check data chart & table",
											"            let sum_table = {",
											"                \"total_income\":0,",
											"                \"total_expense\":0,",
											"                \"total_gap\":0,",
											"                \"total_profit\":0",
											"            }",
											"            for(let i in jsData.data.dates_data){",
											"                sum_table.total_income += jsData.data.dates_data[i].income;",
											"                sum_table.total_expense += jsData.data.dates_data[i].expense;",
											"",
											"                console.log(\"Date: \" + jsData.data.dates_data[i].date);",
											"",
											"                // gap =  debit_amount - credit_amount",
											"                pm.test(\"--- gap must be \" + (jsData.data.dates_data[i].income - jsData.data.dates_data[i].expense), function () {",
											"                    // console.log(\"act gap: \" + jsData.data.dates_data[i].gap);",
											"                    pm.expect(jsData.data.dates_data[i].gap).to.eql(jsData.data.dates_data[i].income - jsData.data.dates_data[i].expense);",
											"                });",
											"",
											"                // profit => chưa define",
											"            }",
											"",
											"            // total_income",
											"            pm.test(\"total_income must be \" + sum_table.total_income, function () {",
											"                pm.expect(jsData.data.sum_card_data.total_income).to.eql(sum_table.total_income);",
											"            });",
											"",
											"            // total_expense",
											"            pm.test(\"total_expense must be \" + sum_table.total_expense, function () {",
											"                pm.expect(jsData.data.sum_card_data.total_expense).to.eql(sum_table.total_expense);",
											"            });",
											"",
											"            // total_gap = total_income - total_expense",
											"            pm.test(\"total_gap must be \" + (jsData.data.sum_card_data.total_income - jsData.data.sum_card_data.total_expense), function () {",
											"                pm.expect(jsData.data.sum_card_data.total_gap).to.eql(jsData.data.sum_card_data.total_income - jsData.data.sum_card_data.total_expense);",
											"            });",
											"",
											"            // total_profit => chưa define",
											"",
											"            postman.setNextRequest(\"get_cash_flow_table\"); // get_cash_flow_table",
											"            break;",
											"        case 5:",
											"            invoice_obj = pm.environment.get(\"C-invoice_obj\");",
											"            invoice_date = invoice_obj.value_at.substring(0,10);",
											"            // Invoice sẽ tăng profit (income), Bill sẽ tăng loss (chi phí)",
											"            ",
											"            if(full_check == 1){",
											"                let old_profit_period = pm.environment.get(\"C-profit_period\");",
											"                // console.log(\"debug old_loss_period: \", old_profit_period);",
											"                // console.log(\"debug loss_period: \", profit_period);",
											"",
											"                pm.test(\"Nothing happen!!!\", function () {",
											"                    pm.expect(JSON.stringify(profit_period) == JSON.stringify(old_profit_period)).to.be.true;",
											"                });",
											"",
											"                full_check++;",
											"                pm.environment.set(\"C-full_check\",full_check);",
											"                postman.setNextRequest(\"report_profit_loss_period\");",
											"            } else {",
											"                let old_loss_period = pm.environment.get(\"C-loss_period\");",
											"                // console.log(\"debug old_loss_period: \", old_loss_period);",
											"                // console.log(\"debug loss_period: \", loss_period);",
											"                ",
											"                pm.test(\"Nothing happen!!!\", function () {",
											"                    pm.expect(JSON.stringify(loss_period) == JSON.stringify(old_loss_period)).to.be.true;",
											"                });",
											"",
											"                pm.environment.unset(\"C-full_check\");",
											"",
											"                testcase++;",
											"                pm.environment.set(\"C-testcase\",testcase);",
											"                postman.setNextRequest(\"calculate_invoice\"); // calculate_invoice",
											"            }",
											"            break;",
											"        case 8:",
											"            invoice_obj = pm.environment.get(\"C-invoice_obj\");",
											"            invoice_date = invoice_obj.value_at;",
											"            console.log(\"invoice_date: \" + invoice_date);",
											"",
											"            if(full_check == 1){",
											"                let old_profit_period = pm.environment.get(\"C-profit_period\");",
											"                // console.log(\"debug old_loss_period: \", old_profit_period);",
											"                // console.log(\"debug loss_period: \", profit_period);",
											"",
											"                // do thời gian lọc là tháng hiện tại => chỉ thay đổi khi value_at nằm trong tháng hiện tại",
											"                let today = new Date();",
											"                let today_tmp = Math.floor(today.getTime()/1000);",
											"                let firstDayOfThisMonth = getFirstDayOfMonth(today_tmp);",
											"                let lastDayOfThisMonth = getLastDayOfMonth(today_tmp);",
											"                if(invoice_date < firstDayOfThisMonth || invoice_date > lastDayOfThisMonth){",
											"                    // nothing happen",
											"                    pm.test(\"Nothing happen!!!\", function () {",
											"                        pm.expect(JSON.stringify(profit_period) == JSON.stringify(old_profit_period)).to.be.true;",
											"                    });",
											"                } else {",
											"                    invoice_date = invoice_date.substring(0,10);",
											"",
											"                    let income_product = 0, income_discount = 0;",
											"                    for(let i in invoice_obj.items){",
											"                        income_product += invoice_obj.items[i].before_tax_amount;",
											"                        income_discount += invoice_obj.items[i].discount_amount;",
											"                    }",
											"                    let exp_change = income_product - income_discount;",
											"                    // có thay đổi => total_income increase",
											"                    pm.test(\"total_income increase \" + exp_change, function () {",
											"                        pm.expect(profit_period.sum_card_data.total_income == old_profit_period.sum_card_data.total_income + exp_change).to.be.true;",
											"                    });",
											"                    // thay đổi ngày tương ứng",
											"                    let old_date = null, act_date = null;",
											"                    for(let i in profit_period.dates_data){",
											"                        let day_i = profit_period.dates_data[i].date.substring(0,10);",
											"                        if(day_i == invoice_date){",
											"                            act_date = profit_period.dates_data[i];",
											"                            break;",
											"                        }",
											"                    }",
											"",
											"                    for(let i in old_profit_period.dates_data){",
											"                        let day_i = old_profit_period.dates_data[i].date.substring(0,10);",
											"                        if(day_i == invoice_date){",
											"                            old_date = old_profit_period.dates_data[i];",
											"                            break;",
											"                        }",
											"                    }",
											"",
											"                    if(old_date != null && act_date != null){",
											"                        console.log(\"act_date: \",act_date);",
											"                        console.log(\"old_date: \",old_date);",
											"                        pm.test(\"income at \" + invoice_date + \" increase \" + exp_change, function () {",
											"                            pm.expect(act_date.income == old_date.income + exp_change).to.be.true;",
											"                        });",
											"                    }",
											"                }",
											"",
											"                full_check++;",
											"                pm.environment.set(\"C-full_check\",full_check);",
											"                postman.setNextRequest(\"report_profit_loss_period\");",
											"            } else {",
											"                let old_loss_period = pm.environment.get(\"C-loss_period\");",
											"                // console.log(\"debug old_loss_period: \", old_loss_period);",
											"                // console.log(\"debug loss_period: \", loss_period);",
											"                ",
											"                pm.test(\"Nothing happen!!!\", function () {",
											"                    pm.expect(JSON.stringify(loss_period) == JSON.stringify(old_loss_period)).to.be.true;",
											"                });",
											"",
											"                pm.environment.unset(\"C-full_check\");",
											"",
											"                console.log(\"-------- End Testsuite 06 --------\");",
											"                postman.setNextRequest(null);",
											"            }",
											"            break;",
											"        default:",
											"            console.log(\"Missing flow, end test\");",
											"            postman.setNextRequest(null);",
											"            break;",
											"    }",
											"} else {",
											"    console.log(\"Can't get chart balance change, end test\",jsData);",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "authorization",
										"value": "Bearer {{C-userToken}}"
									},
									{
										"key": "x-locale",
										"value": "en"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{C-payload}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{finone_url}}/fo-ledger/api/v1/report/cash-flow-period",
									"host": [
										"{{finone_url}}"
									],
									"path": [
										"fo-ledger",
										"api",
										"v1",
										"report",
										"cash-flow-period"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_cash_flow_table",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsData = pm.response.json();",
											"if(pm.response.code == 200){",
											"    let testcase = pm.environment.get(\"C-testcase\");",
											"",
											"    let chart_cash_flow = pm.environment.get(\"C-chart_cash_flow\");",
											"    let table_cash_flow = null;",
											"    let table_cash_flow_last_month = pm.environment.get(\"C-table_cash_flow_last_month\");",
											"    switch(testcase){",
											"        case 2:",
											"            let is_get_last = pm.environment.get(\"C-is_get_last\");",
											"",
											"            if(!is_get_last){",
											"                is_get_last = true;",
											"                pm.environment.set(\"C-is_get_last\",is_get_last);",
											"",
											"                table_cash_flow_last_month = jsData.data;",
											"                pm.environment.set(\"C-table_cash_flow_last_month\",table_cash_flow_last_month);",
											"",
											"                postman.setNextRequest(\"get_cash_flow_table\");",
											"            } else {",
											"                pm.environment.unset(\"C-is_get_last\");",
											"                ",
											"                table_cash_flow = jsData.data;",
											"                pm.test(\"Got table_cash_flow \", function () {",
											"                    // sum_card_data.total_balance_amount",
											"                    // dates_data",
											"                    pm.environment.set(\"C-table_cash_flow\",table_cash_flow);",
											"                    pm.expect(table_cash_flow != null).to.be.true;",
											"                });",
											"",
											"                // compare data chart & table",
											"                // console.log(\"chart_cash_flow: \" , chart_cash_flow);",
											"                // console.log(\"table_cash_flow: \" , table_cash_flow);",
											"",
											"                // credit_amount",
											"                pm.test(\"credit_amount must be \" + chart_cash_flow.sum_card_data.total_income, function () {",
											"                    console.log(\"act: \" + jsData.data.sum_card_data.credit_amount);",
											"                    pm.expect(chart_cash_flow.sum_card_data.total_income).to.eql(jsData.data.sum_card_data.credit_amount);",
											"                });",
											"",
											"                // debit_amount",
											"                pm.test(\"debit_amount must be \" + chart_cash_flow.sum_card_data.total_expense, function () {",
											"                    console.log(\"act: \" + jsData.data.sum_card_data.debit_amount);",
											"                    pm.expect(chart_cash_flow.sum_card_data.total_expense).to.eql(jsData.data.sum_card_data.debit_amount);",
											"                });",
											"",
											"                let month_obj = pm.environment.get(\"C-month_obj\");",
											"                // start_amount",
											"                pm.test(\"start_amount must be \" + month_obj.start_amount, function () {",
											"                    console.log(\"act: \" + jsData.data.sum_card_data.start_amount);",
											"                    pm.expect(month_obj.start_amount).to.eql(jsData.data.sum_card_data.start_amount);",
											"                });",
											"",
											"                // end_amount",
											"                pm.test(\"end_amount must be \" + month_obj.end_amount, function () {",
											"                    console.log(\"act: \" + jsData.data.sum_card_data.end_amount);",
											"                    pm.expect(month_obj.end_amount).to.eql(jsData.data.sum_card_data.end_amount);",
											"                });",
											"",
											"                // percentage_change => tính sao đây",
											"                // let percentage_change = table_cash_flow_last_month.balance;",
											"                for(let i in table_cash_flow_last_month.income_categories_data){",
											"                    for(let j in table_cash_flow.income_categories_data){",
											"                        if(table_cash_flow_last_month.income_categories_data[i].id == table_cash_flow.income_categories_data[j].id){",
											"                            let percentage_change_ij = 0;",
											"",
											"                            console.log(\"--- last balance: \" + table_cash_flow_last_month.income_categories_data[i].balance);",
											"                            console.log(\"--- current balance: \" + table_cash_flow.income_categories_data[j].balance)",
											"                            percentage_change_ij = Math.round((table_cash_flow.income_categories_data[j].balance/table_cash_flow_last_month.income_categories_data[i].balance - 1)*100);",
											"                            console.log(\"--- percentage_change_ij: \" + percentage_change_ij);",
											"",
											"                            // income_categories_data",
											"                            pm.test(\"income account_name:  \" + table_cash_flow_last_month.income_categories_data[i].account_name + \" has percentage_change \" + percentage_change_ij, function () {",
											"                                console.log(\"act: \" + table_cash_flow.income_categories_data[j].percentage_change);",
											"                                pm.expect(percentage_change_ij).to.eql(table_cash_flow.income_categories_data[j].percentage_change);",
											"                            });",
											"                        }",
											"                    }",
											"                }",
											"",
											"                for(let i in table_cash_flow_last_month.expense_categories_data){",
											"                    for(let j in table_cash_flow.expense_categories_data){",
											"                        if(table_cash_flow_last_month.expense_categories_data[i].id == table_cash_flow.expense_categories_data[j].id){",
											"",
											"                            console.log(\"--- last balance: \" + table_cash_flow_last_month.expense_categories_data[i].balance);",
											"                            console.log(\"--- current balance: \" + table_cash_flow.expense_categories_data[j].balance)",
											"                            percentage_change_ij = Math.round((table_cash_flow.expense_categories_data[j].balance/table_cash_flow_last_month.expense_categories_data[i].balance - 1)*100);",
											"                            console.log(\"--- percentage_change_ij: \" + percentage_change_ij);",
											"",
											"                            // expense_categories_data",
											"                            pm.test(\"expense account_name:  \" + table_cash_flow_last_month.expense_categories_data[i].account_name + \" has percentage_change \" + percentage_change_ij, function () {",
											"                                console.log(\"act: \" + table_cash_flow.expense_categories_data[j].percentage_change);",
											"                                pm.expect(percentage_change_ij).to.eql(table_cash_flow.expense_categories_data[j].percentage_change);",
											"                            });",
											"                        }",
											"                    }",
											"                }",
											"                // pm.test(\"percentage_change must be \" + month_obj.end_amount, function () {",
											"                //     console.log(\"act: \" + jsData.data.sum_card_data.end_amount);",
											"                //     pm.expect(month_obj.end_amount).to.eql(jsData.data.sum_card_data.end_amount);",
											"                // });",
											"",
											"                postman.setNextRequest(\"get_receivable_invoice\"); // get_receivable_invoice",
											"            }",
											"            break;",
											"        case 4:",
											"            let old_table_cash_flow = pm.environment.get(\"C-table_cash_flow\");",
											"            table_cash_flow = jsData.data;",
											"            let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
											"            console.log(\"old: \", old_table_cash_flow.sum_card_data);",
											"            console.log(\"new: \", table_cash_flow.sum_card_data);",
											"",
											"            if(tnx_obj.txn_type == \"in\"){",
											"                // tăng credit_amount (đầu phân loại ngược lại đầu quỹ)",
											"                pm.test(\"credit_amount increase \" + tnx_obj.amount, function () {",
											"                    console.log(\"act: \" + table_cash_flow.sum_card_data.credit_amount);",
											"                    pm.expect(old_table_cash_flow.sum_card_data.credit_amount + tnx_obj.amount).to.eql(table_cash_flow.sum_card_data.credit_amount);",
											"                });",
											"",
											"                // tăng end_amount",
											"                pm.test(\"end_amount increase \" + tnx_obj.amount, function () {",
											"                    console.log(\"act: \" + table_cash_flow.sum_card_data.end_amount);",
											"                    pm.expect(old_table_cash_flow.sum_card_data.end_amount + tnx_obj.amount).to.eql(table_cash_flow.sum_card_data.end_amount);",
											"                });",
											"",
											"                // income_categories_data",
											"                let new_cat = null, old_cat = null;",
											"                for(let i in old_table_cash_flow.income_categories_data){",
											"                    if(old_table_cash_flow.income_categories_data[i].id == tnx_obj.category_id){",
											"                        old_cat = old_table_cash_flow.income_categories_data[i];",
											"                        break;",
											"                    }",
											"                }",
											"",
											"                for(let i in table_cash_flow.income_categories_data){",
											"                    if(table_cash_flow.income_categories_data[i].id == tnx_obj.category_id){",
											"                        new_cat = table_cash_flow.income_categories_data[i];",
											"                        break;",
											"                    }",
											"                }",
											"",
											"                if(old_cat != null && new_cat != null){",
											"                    console.log(\"old_cat: \",old_cat);",
											"                    console.log(\"new_cat: \",new_cat);",
											"                    // balance = credit - debit",
											"                    pm.test(\"balance of \" + old_cat.account_name + \" increase \" + tnx_obj.amount, function () {",
											"                        pm.expect(new_cat.balance == old_cat.balance + tnx_obj.amount).to.be.true;",
											"                    });",
											"                }",
											"            } else {",
											"                // tăng debit_amount (đầu phân loại ngược lại đầu quỹ)",
											"                pm.test(\"debit_amount increase \" + tnx_obj.amount, function () {",
											"                    console.log(\"act: \" + table_cash_flow.sum_card_data.debit_amount);",
											"                    pm.expect(old_table_cash_flow.sum_card_data.debit_amount + tnx_obj.amount).to.eql(table_cash_flow.sum_card_data.debit_amount);",
											"                });",
											"",
											"                // giảm end_amount",
											"                pm.test(\"end_amount decrease \" + tnx_obj.amount, function () {",
											"                    console.log(\"act: \" + table_cash_flow.sum_card_data.end_amount);",
											"                    pm.expect(old_table_cash_flow.sum_card_data.end_amount - tnx_obj.amount).to.eql(table_cash_flow.sum_card_data.end_amount);",
											"                });",
											"",
											"                // expense_categories_data",
											"                let new_cat = null, old_cat = null;",
											"                for(let i in old_table_cash_flow.expense_categories_data){",
											"                    if(old_table_cash_flow.expense_categories_data[i].id == tnx_obj.category_id){",
											"                        old_cat = old_table_cash_flow.expense_categories_data[i];",
											"                        break;",
											"                    }",
											"                }",
											"",
											"                for(let i in table_cash_flow.expense_categories_data){",
											"                    if(table_cash_flow.expense_categories_data[i].id == tnx_obj.category_id){",
											"                        new_cat = table_cash_flow.expense_categories_data[i];",
											"                        break;",
											"                    }",
											"                }",
											"",
											"                if(old_cat != null && new_cat != null){",
											"                    console.log(\"old_cat: \",old_cat);",
											"                    console.log(\"new_cat: \",new_cat);",
											"                    // balance = debit - credit",
											"                    pm.test(\"balance of \" + old_cat.account_name + \" increase \" + tnx_obj.amount, function () {",
											"                        pm.expect(new_cat.balance == old_cat.balance + tnx_obj.amount).to.be.true;",
											"                    });",
											"                }",
											"            }",
											"",
											"            postman.setNextRequest(\"get_receivable_invoice\"); // get_receivable_invoice",
											"            break;",
											"        default:",
											"            console.log(\"Missing flow, end test\");",
											"            postman.setNextRequest(null);",
											"            break;",
											"    }",
											"} else {",
											"    console.log(\"Can't get table cash flow, end test\",jsData);",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let testcase = pm.environment.get(\"C-testcase\");",
											"console.log(\"Testcase: \" + testcase);",
											"",
											"let payload;",
											"switch(testcase){",
											"    case 2:",
											"        let is_get_last = pm.environment.get(\"C-is_get_last\");",
											"        if(!is_get_last){",
											"            is_get_last = false;",
											"            pm.environment.set(\"C-is_get_last\",is_get_last);",
											"            ",
											"            payload = {",
											"                \"business_id\": parseInt(pm.environment.get(\"C-business_id\")),",
											"                \"current_period_start\": pm.environment.get(\"C-previous_period_start\"),",
											"                \"current_period_end\": pm.environment.get(\"C-previous_period_end\")",
											"            }",
											"        } else {",
											"            payload = {",
											"                \"business_id\": parseInt(pm.environment.get(\"C-business_id\")),",
											"                \"current_period_start\": pm.environment.get(\"C-current_period_start\"),",
											"                \"current_period_end\": pm.environment.get(\"C-current_period_end\")",
											"            }",
											"        }",
											"        break;",
											"    case 4:",
											"        payload = {",
											"            \"business_id\": parseInt(pm.environment.get(\"C-business_id\")),",
											"            \"current_period_start\": pm.environment.get(\"C-current_period_start\"),",
											"            \"current_period_end\": pm.environment.get(\"C-current_period_end\")",
											"        }",
											"        break;",
											"    default:",
											"        console.log(\"Missing flow\");",
											"}",
											"",
											"console.log(\"payload: \",payload);",
											"pm.environment.set(\"C-payload\",JSON.stringify(payload));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "authorization",
										"value": "Bearer {{C-userToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{C-payload}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{finone_url}}/fo-ledger/api/v1/report/cash-flow-detail",
									"host": [
										"{{finone_url}}"
									],
									"path": [
										"fo-ledger",
										"api",
										"v1",
										"report",
										"cash-flow-detail"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_cash_flow_table_branch",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsData = pm.response.json();",
											"if(pm.response.code == 200){",
											"    let testcase = pm.environment.get(\"C-testcase\");",
											"",
											"    let chart_cash_flow = pm.environment.get(\"C-chart_cash_flow\");",
											"    let table_cash_flow = null;",
											"    let invoice_obj, invoice_date;",
											"    switch(testcase){",
											"        case 2:",
											"            table_cash_flow = jsData.data;",
											"            pm.test(\"Got table_cash_flow \", function () {",
											"                // sum_card_data.total_balance_amount",
											"                // dates_data",
											"                pm.environment.set(\"C-table_cash_flow\",table_cash_flow);",
											"                pm.expect(table_cash_flow != null).to.be.true;",
											"            });",
											"",
											"            // compare data chart & table",
											"            // console.log(\"chart_cash_flow: \" , chart_cash_flow);",
											"            // console.log(\"table_cash_flow: \" , table_cash_flow);",
											"",
											"            // credit_amount",
											"            pm.test(\"credit_amount must be \" + chart_cash_flow.sum_card_data.total_income, function () {",
											"                console.log(\"act: \" + jsData.data.sum_card_data.credit_amount);",
											"                pm.expect(chart_cash_flow.sum_card_data.total_income).to.eql(jsData.data.sum_card_data.credit_amount);",
											"            });",
											"",
											"            // debit_amount",
											"            pm.test(\"debit_amount must be \" + chart_cash_flow.sum_card_data.total_expense, function () {",
											"                console.log(\"act: \" + jsData.data.sum_card_data.debit_amount);",
											"                pm.expect(chart_cash_flow.sum_card_data.total_expense).to.eql(jsData.data.sum_card_data.debit_amount);",
											"            });",
											"",
											"            let month_obj = pm.environment.get(\"C-month_obj\");",
											"            // start_amount",
											"            pm.test(\"start_amount must be \" + month_obj.start_amount, function () {",
											"                console.log(\"act: \" + jsData.data.sum_card_data.start_amount);",
											"                pm.expect(month_obj.start_amount).to.eql(jsData.data.sum_card_data.start_amount);",
											"            });",
											"",
											"            // end_amount",
											"            pm.test(\"end_amount must be \" + month_obj.end_amount, function () {",
											"                console.log(\"act: \" + jsData.data.sum_card_data.end_amount);",
											"                pm.expect(month_obj.end_amount).to.eql(jsData.data.sum_card_data.end_amount);",
											"            });",
											"",
											"            postman.setNextRequest(\"\"); // get_receivable_invoice",
											"            break;",
											"        default:",
											"            console.log(\"Missing flow, end test\");",
											"            postman.setNextRequest(null);",
											"            break;",
											"    }",
											"} else {",
											"    console.log(\"Can't get table cash flow, end test\",jsData);",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let testcase = pm.environment.get(\"C-testcase\");",
											"console.log(\"Testcase: \" + testcase);",
											"",
											"let payload = {",
											"    \"business_id\": parseInt(pm.environment.get(\"C-business_id\")),",
											"    \"branch_id\":pm.environment.get(\"C-branch_id\"),",
											"    \"current_period_start\": pm.environment.get(\"C-current_period_start\"),",
											"    \"current_period_end\": pm.environment.get(\"C-current_period_end\")",
											"}",
											"",
											"console.log(\"payload: \",payload);",
											"pm.environment.set(\"C-payload\",JSON.stringify(payload));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "authorization",
										"value": "Bearer {{C-userToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{C-payload}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{finone_url}}/fo-ledger/api/v1/report/cash-flow-detail",
									"host": [
										"{{finone_url}}"
									],
									"path": [
										"fo-ledger",
										"api",
										"v1",
										"report",
										"cash-flow-detail"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "invoice_widget",
					"item": [
						{
							"name": "get_receivable_invoice",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let testcase = pm.environment.get(\"C-testcase\");",
											"console.log(\"Testcase: \" + testcase);",
											"",
											"let payload = {",
											"    \"account_key\": \"A3001\", // account_receivable => A3001, account_payable => B1001",
											"    // \"branch_id\": pm.environment.get(\"C-branch_id\"),",
											"    \"business_id\": parseInt(pm.environment.get(\"C-business_id\"))",
											"    //   \"current_period_end\": \"string\",",
											"    //   \"current_period_start\": \"string\",",
											"    // \"page\": 1,",
											"    // \"page_size\": 20,",
											"    //   \"period\": \"string\",  // old due_days",
											"    //   \"previous_period_end\": \"string\",",
											"    //   \"previous_period_start\": \"string\",",
											"    //   \"report_type\": \"string\",",
											"    // \"timezone\": \"UTC+07:00\"",
											"}",
											"",
											"console.log(\"payload: \",payload);",
											"pm.environment.set(\"C-payload\",JSON.stringify(payload));",
											"pm.environment.set(\"C-report_obj\",payload);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// ============================= get last day (Sun is end of Week)",
											"function getLastDayOfCurrentWeek() {",
											"    const now = new Date();",
											"    const lastDay = new Date(now);",
											"    const daysUntilSunday = 7 - now.getDay();  // if Saturday is end, change 7 => 6",
											"    lastDay.setDate(now.getDate() + daysUntilSunday);",
											"    return lastDay;",
											"}",
											"",
											"// ============================= get first day (Sun is end of Week)",
											"function getFirstDayOfCurrentWeek() {",
											"    const now = new Date();",
											"    const firstDay = new Date(now);",
											"    firstDay.setDate(now.getDate() - now.getDay() + 1);  // if Saturday is end, remove +1",
											"    return firstDay;",
											"}",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsData = pm.response.json();",
											"if(pm.response.code == 200){",
											"    let testcase = pm.environment.get(\"C-testcase\");",
											"    let unpaid_account_receivable = null;",
											"    try {",
											"        unpaid_account_receivable = jsData.data.unpaid_amount_lifetime_categories;",
											"    } catch {",
											"        console.log(\"Can't get data\");",
											"    }",
											"",
											"    switch(testcase){",
											"        case 2:",
											"            pm.test(\"Got unpaid_account_receivable data\", function () {",
											"                pm.environment.set(\"C-unpaid_account_receivable\",unpaid_account_receivable);",
											"                pm.expect(unpaid_account_receivable != null).to.be.true;",
											"            });",
											"            console.log(\"unpaid_account_receivable: \", unpaid_account_receivable);",
											"",
											"            postman.setNextRequest(\"get_receivable_customer\"); //get_receivable_customer",
											"            break;",
											"        case 4:",
											"            let old_data = pm.environment.get(\"C-unpaid_account_receivable\");",
											"",
											"            pm.test(\"Nothing happen!\", function () {",
											"                console.log(\"old: \", old_data);",
											"                console.log(\"new: \", unpaid_account_receivable);",
											"                pm.expect(JSON.stringify(unpaid_account_receivable) == JSON.stringify(old_data)).to.be.true;",
											"            });",
											"",
											"            // update new data",
											"            pm.environment.set(\"C-unpaid_account_receivable\",unpaid_account_receivable);",
											"",
											"            postman.setNextRequest(\"get_receivable_customer\"); // get_receivable_customer",
											"            break;",
											"        default:",
											"            console.log(\"Missing flow, end test\");",
											"            postman.setNextRequest(null);",
											"            break;",
											"    }",
											"} else {",
											"    console.log(\"Can't get report account receivable unpaid, end test\",jsData);",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{C-userToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{C-payload}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{finone_url}}/fo-order/api/v1/report/account-receivable-card-unpaid",
									"host": [
										"{{finone_url}}"
									],
									"path": [
										"fo-order",
										"api",
										"v1",
										"report",
										"account-receivable-card-unpaid"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_receivable_customer",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let testcase = pm.environment.get(\"C-testcase\");",
											"console.log(\"Testcase: \" + testcase);",
											"",
											"let page = pm.environment.get(\"C-page\");",
											"",
											"let page_size = 50;",
											"if(!page){",
											"    page = 1;",
											"    pm.environment.set(\"C-page\",page);",
											"    pm.environment.set(\"C-page_size\",page_size);",
											"}",
											"",
											"let payload = {",
											"    \"account_key\": \"A3001\",",
											"    // \"branch_id\": pm.environment.get(\"C-branch_id\"),",
											"    \"business_id\": parseInt(pm.environment.get(\"C-business_id\")),",
											"    \"page\": page,",
											"    \"page_size\": page_size",
											"}",
											"",
											"console.log(\"payload: \",payload);",
											"pm.environment.set(\"C-payload\",JSON.stringify(payload));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"let jsData = JSON.parse(responseBody);",
											"if(pm.response.code == 200){",
											"    let testcase = pm.environment.get(\"C-testcase\");",
											"    let total_pages = jsData.meta.total_pages;",
											"    let page = pm.environment.get(\"C-page\");",
											"",
											"    let list_reveivable_customer, old_list_reveivable_customer;",
											"    switch(testcase){",
											"        case 2:",
											"            list_reveivable_customer = pm.environment.get(\"C-list_reveivable_customer\");",
											"            if(!list_reveivable_customer){",
											"                list_reveivable_customer = [];",
											"            }",
											"            break;",
											"        case 4:",
											"            old_list_reveivable_customer = pm.environment.get(\"C-old_list_reveivable_customer\");",
											"            if(!old_list_reveivable_customer){",
											"                old_list_reveivable_customer = pm.environment.get(\"C-list_reveivable_customer\");",
											"                pm.environment.unset(\"C-list_reveivable_customer\");",
											"                pm.environment.set(\"C-old_list_reveivable_customer\",old_list_reveivable_customer);",
											"            }",
											"",
											"            list_reveivable_customer = pm.environment.get(\"C-list_reveivable_customer\");",
											"            if(!list_reveivable_customer){",
											"                list_reveivable_customer = [];",
											"            }",
											"            break;",
											"        default:",
											"            console.log(\"Missing flow\");",
											"            break;",
											"    }",
											"",
											"    for(let item in jsData.data){",
											"        list_reveivable_customer[list_reveivable_customer.length] = {",
											"            \"contact_id\":jsData.data[item].contact_id,",
											"            \"unpaid_total\":jsData.data[item].unpaid_total,",
											"            \"unpaid_due\":jsData.data[item].unpaid_due,",
											"            \"unpaid_overdue_less\":jsData.data[item].unpaid_overdue_less,",
											"            \"unpaid_overdue_between\":jsData.data[item].unpaid_overdue_between,",
											"            \"unpaid_overdue_over\":jsData.data[item].unpaid_overdue_over,",
											"            \"full_count\":jsData.data[item].full_count,",
											"            \"contact_name\":jsData.data[item].contact_info.contact_name,",
											"            \"contact_phone\":jsData.data[item].contact_info.contact_phone",
											"        }",
											"    }",
											"    pm.environment.set(\"C-list_reveivable_customer\",list_reveivable_customer);",
											"",
											"    if(page >= total_pages){",
											"        // must clear page & page_size",
											"        pm.environment.unset(\"C-page\");",
											"        pm.environment.unset(\"C-page_size\");",
											"",
											"        let invoice_obj = pm.environment.get(\"C-invoice_obj\");",
											"        let contact_id = invoice_obj.contact_id;",
											"        console.log(\"contact_id: \" + contact_id);",
											"",
											"        let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
											"        let total_amount;",
											"        let isFound = false, hasRecord = false;",
											"        switch(testcase){",
											"            case 2:",
											"                pm.test(\"Got all record! \" + list_reveivable_customer.length, function () {",
											"                    pm.expect(list_reveivable_customer.length > 0).to.be.true;",
											"                });",
											"                console.log(\"total record: \" + list_reveivable_customer.length);",
											"",
											"                postman.setNextRequest(\"get_payable_bill\"); // get_list_tnx, get_payable_bill",
											"                break;",
											"            case 4:",
											"                total_amount = tnx_obj.amount;",
											"                let record_obj = null;",
											"                let inList = false;",
											"                for(let i in old_list_reveivable_customer){",
											"                    if(old_list_reveivable_customer[i].contact_id == contact_id){",
											"                        inList = true;",
											"                        record_obj = old_list_reveivable_customer[i];",
											"                        break;",
											"                    }",
											"                }",
											"",
											"                if(inList){",
											"                    pm.test(\"Nothing happen with total record\", function () {",
											"                        console.log(\"total old: \" + old_list_reveivable_customer.length);",
											"                        console.log(\"total new: \" + list_reveivable_customer.length);",
											"                        pm.expect(list_reveivable_customer.length == old_list_reveivable_customer.length).to.be.true;",
											"                    });",
											"                } else {",
											"                    pm.test(\"Total record increase 1\", function () {",
											"                        pm.expect(list_reveivable_customer.length == old_list_reveivable_customer.length + 1).to.be.true;",
											"                    });",
											"                    record_obj = {",
											"                        \"contact_id\":tnx_obj.contact_id,",
											"                        \"unpaid_total\":0,",
											"                        \"unpaid_due\":0,",
											"                        \"unpaid_overdue_less\":0,",
											"                        \"unpaid_overdue_between\":0,",
											"                        \"unpaid_overdue_over\":0,",
											"                        \"full_count\":0,",
											"                        \"contact_name\":null,",
											"                        \"contact_phone\":null",
											"                    }",
											"                }",
											"",
											"                let due_type = pm.environment.get(\"C-due_type\");",
											"                for(let i in list_reveivable_customer){",
											"                    if(list_reveivable_customer[i].contact_id == contact_id){",
											"                        isFound = true;",
											"                        console.log(\"Found \" + list_reveivable_customer[i].contact_name + ' - ' + list_reveivable_customer[i].contact_phone);",
											"                        ",
											"                        pm.test(\"unpaid_total decrease \" + total_amount, function () {",
											"                            console.log(\"old: \" + record_obj.unpaid_total);",
											"                            console.log(\"expected: \" + (record_obj.unpaid_total + total_amount));",
											"                            console.log(\"new: \" + list_reveivable_customer[i].unpaid_total);",
											"                            pm.expect(list_reveivable_customer[i].unpaid_total.toFixed(2) == (record_obj.unpaid_total - total_amount).toFixed(2)).to.be.true;",
											"                        });",
											"",
											"                        switch(due_type){",
											"                            case \"due\": case \"due_n_7d\":",
											"                                // unpaid_due",
											"                                pm.test(\"unpaid_due decrease \" + total_amount, function () {",
											"                                    console.log(\"old: \" + record_obj.unpaid_due);",
											"                                    console.log(\"new: \" + list_reveivable_customer[i].unpaid_due);",
											"                                    pm.expect(list_reveivable_customer[i].unpaid_due.toFixed(2) == (record_obj.unpaid_due - total_amount).toFixed(2)).to.be.true;",
											"                                });",
											"",
											"                                // unpaid_overdue_less",
											"                                pm.test(\"nothing happen unpaid_overdue_less\", function () {",
											"                                    pm.expect(list_reveivable_customer[i].unpaid_overdue_less == record_obj.unpaid_overdue_less).to.be.true;",
											"                                });",
											"",
											"                                // unpaid_overdue_between",
											"                                pm.test(\"nothing happen unpaid_overdue_between\", function () {",
											"                                    pm.expect(list_reveivable_customer[i].unpaid_overdue_between == record_obj.unpaid_overdue_between).to.be.true;",
											"                                });",
											"",
											"                                // unpaid_overdue_over",
											"                                pm.test(\"nothing happen unpaid_overdue_over\", function () {",
											"                                    pm.expect(list_reveivable_customer[i].unpaid_overdue_over == record_obj.unpaid_overdue_over).to.be.true;",
											"                                });",
											"                                break;",
											"                            case \"overdue_less\":",
											"                                // unpaid_due",
											"                                pm.test(\"nothing happen unpaid_due\", function () {",
											"                                    pm.expect(list_reveivable_customer[i].unpaid_due == record_obj.unpaid_due).to.be.true;",
											"                                });",
											"",
											"                                // unpaid_overdue_less",
											"                                pm.test(\"unpaid_overdue_less decrease \" + total_amount, function () {",
											"                                    console.log(\"old: \" + record_obj.unpaid_overdue_less);",
											"                                    console.log(\"new: \" + list_reveivable_customer[i].unpaid_overdue_less);",
											"                                    pm.expect(list_reveivable_customer[i].unpaid_overdue_less.toFixed(2) == (record_obj.unpaid_overdue_less - total_amount).toFixed(2)).to.be.true;",
											"                                });",
											"",
											"                                // unpaid_overdue_between",
											"                                pm.test(\"nothing happen unpaid_overdue_between\", function () {",
											"                                    pm.expect(list_reveivable_customer[i].unpaid_overdue_between == record_obj.unpaid_overdue_between).to.be.true;",
											"                                });",
											"",
											"                                // unpaid_overdue_over",
											"                                pm.test(\"nothing happen unpaid_overdue_over\", function () {",
											"                                    pm.expect(list_reveivable_customer[i].unpaid_overdue_over == record_obj.unpaid_overdue_over).to.be.true;",
											"                                });",
											"                                break;",
											"                            case \"overdue_between\":",
											"                                // unpaid_due",
											"                                pm.test(\"nothing happen unpaid_due\", function () {",
											"                                    pm.expect(list_reveivable_customer[i].unpaid_due == record_obj.unpaid_due).to.be.true;",
											"                                });",
											"",
											"                                // unpaid_overdue_less",
											"                                pm.test(\"nothing happen unpaid_overdue_less\", function () {",
											"                                    pm.expect(list_reveivable_customer[i].unpaid_overdue_less == record_obj.unpaid_overdue_less).to.be.true;",
											"                                });",
											"",
											"                                // unpaid_overdue_between",
											"                                pm.test(\"unpaid_overdue_between decrease \" + total_amount, function () {",
											"                                    console.log(\"old: \" + record_obj.unpaid_overdue_between);",
											"                                    console.log(\"new: \" + list_reveivable_customer[i].unpaid_overdue_between);",
											"                                    pm.expect(list_reveivable_customer[i].unpaid_overdue_between.toFixed(2) == (record_obj.unpaid_overdue_between - total_amount).toFixed(2)).to.be.true;",
											"                                });",
											"",
											"                                // unpaid_overdue_over",
											"                                pm.test(\"nothing happen unpaid_overdue_over\", function () {",
											"                                    pm.expect(list_reveivable_customer[i].unpaid_overdue_over == record_obj.unpaid_overdue_over).to.be.true;",
											"                                });",
											"                                break;",
											"                            case \"overdue_over\":",
											"                                // unpaid_due",
											"                                pm.test(\"nothing happen unpaid_due\", function () {",
											"                                    pm.expect(list_reveivable_customer[i].unpaid_due == record_obj.unpaid_due).to.be.true;",
											"                                });",
											"",
											"                                // unpaid_overdue_less",
											"                                pm.test(\"nothing happen unpaid_overdue_less\", function () {",
											"                                    pm.expect(list_reveivable_customer[i].unpaid_overdue_less == record_obj.unpaid_overdue_less).to.be.true;",
											"                                });",
											"",
											"                                // unpaid_overdue_between",
											"                                pm.test(\"nothing happen unpaid_overdue_between\", function () {",
											"                                    pm.expect(list_reveivable_customer[i].unpaid_overdue_between == record_obj.unpaid_overdue_between).to.be.true;",
											"                                });",
											"",
											"                                // unpaid_overdue_over",
											"                                pm.test(\"unpaid_overdue_over decrease \" + total_amount, function () {",
											"                                    console.log(\"old: \" + record_obj.unpaid_overdue_over);",
											"                                    console.log(\"new: \" + list_reveivable_customer[i].unpaid_overdue_over);",
											"                                    pm.expect(list_reveivable_customer[i].unpaid_overdue_over.toFixed(2) == (record_obj.unpaid_overdue_over - total_amount).toFixed(2)).to.be.true;",
											"                                });",
											"                                break;",
											"                            default:",
											"                                // unpaid_due",
											"                                pm.test(\"nothing happen unpaid_due\", function () {",
											"                                    pm.expect(list_reveivable_customer[i].unpaid_due == record_obj.unpaid_due).to.be.true;",
											"                                });",
											"",
											"                                // unpaid_overdue_less",
											"                                pm.test(\"nothing happen unpaid_overdue_less\", function () {",
											"                                    pm.expect(list_reveivable_customer[i].unpaid_overdue_less == record_obj.unpaid_overdue_less).to.be.true;",
											"                                });",
											"",
											"                                // unpaid_overdue_between",
											"                                pm.test(\"nothing happen unpaid_overdue_between\", function () {",
											"                                    pm.expect(list_reveivable_customer[i].unpaid_overdue_between == record_obj.unpaid_overdue_between).to.be.true;",
											"                                });",
											"",
											"                                // unpaid_overdue_over",
											"                                pm.test(\"nothing happen unpaid_overdue_over\", function () {",
											"                                    pm.expect(list_reveivable_customer[i].unpaid_overdue_over == record_obj.unpaid_overdue_over).to.be.true;",
											"                                });",
											"                                break;",
											"                        }",
											"                        break;",
											"                    }",
											"                }",
											"                // let new_record_obj = null;",
											"                // for(let i in list_reveivable_customer){",
											"                //     if(list_reveivable_customer[i].contact_id == contact_id){",
											"                //         isFound = true;",
											"                //         new_record_obj = list_reveivable_customer[i];",
											"                //         break;",
											"                //     }",
											"                // }",
											"",
											"                // console.log(\"old: \" , record_obj);",
											"                // console.log(\"new: \" , new_record_obj);",
											"",
											"                pm.test(\"Found customer \" + record_obj.contact_name, function () {",
											"                    pm.expect(isFound).to.be.true;",
											"                });",
											"",
											"                // clear old data to update at next case",
											"                pm.environment.unset(\"C-old_list_reveivable_customer\");",
											"",
											"                postman.setNextRequest(\"get_payable_bill\"); // get_payable_bill",
											"                break;",
											"            default:",
											"                console.log(\"Missing flow, end test\");",
											"                postman.setNextRequest(null);",
											"                break;",
											"        }",
											"    } else {",
											"        page++;",
											"        pm.environment.set(\"C-page\",page);",
											"",
											"        console.log(\"view next page (\" + page + \") to get more product\");",
											"        postman.setNextRequest(\"get_report_account_receivable_customer\");",
											"    }",
											"} else {",
											"    console.log(\"Can't get list product, end test\",jsData);",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{C-userToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{C-payload}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{finone_url}}/fo-order/api/v1/report/account-receivable-customer-unpaid",
									"host": [
										"{{finone_url}}"
									],
									"path": [
										"fo-order",
										"api",
										"v1",
										"report",
										"account-receivable-customer-unpaid"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "bill_widget",
					"item": [
						{
							"name": "get_payable_bill",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let testcase = pm.environment.get(\"C-testcase\");",
											"console.log(\"Testcase: \" + testcase);",
											"",
											"let payload = {",
											"    \"account_key\": \"B1001\", // account_receivable => A3001, account_payable => B1001",
											"    // \"branch_id\": pm.environment.get(\"C-branch_id\"),",
											"    \"business_id\": parseInt(pm.environment.get(\"C-business_id\"))",
											"    //   \"current_period_end\": \"string\",",
											"    //   \"current_period_start\": \"string\",",
											"    // \"page\": 1,",
											"    // \"page_size\": 20,",
											"    //   \"period\": \"string\",  // old due_days",
											"    //   \"previous_period_end\": \"string\",",
											"    //   \"previous_period_start\": \"string\",",
											"    //   \"report_type\": \"string\",",
											"    // \"timezone\": \"UTC+07:00\"",
											"}",
											"",
											"console.log(\"payload: \",payload);",
											"pm.environment.set(\"C-payload\",JSON.stringify(payload));",
											"pm.environment.set(\"C-report_obj\",payload);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// ============================= get last day (Sun is end of Week)",
											"function getLastDayOfCurrentWeek() {",
											"    const now = new Date();",
											"    const lastDay = new Date(now);",
											"    const daysUntilSunday = 7 - now.getDay();  // if Saturday is end, change 7 => 6",
											"    lastDay.setDate(now.getDate() + daysUntilSunday);",
											"    return lastDay;",
											"}",
											"",
											"// ============================= get first day (Sun is end of Week)",
											"function getFirstDayOfCurrentWeek() {",
											"    const now = new Date();",
											"    const firstDay = new Date(now);",
											"    firstDay.setDate(now.getDate() - now.getDay() + 1);  // if Saturday is end, remove +1",
											"    return firstDay;",
											"}",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsData = pm.response.json();",
											"if(pm.response.code == 200){",
											"    let testcase = pm.environment.get(\"C-testcase\");",
											"    let unpaid_account_payable = null;",
											"    try {",
											"        unpaid_account_payable = jsData.data.unpaid_amount_lifetime_categories;",
											"    } catch {",
											"        console.log(\"Can't get data\");",
											"    }",
											"",
											"    switch(testcase){",
											"        case 2:",
											"            pm.test(\"Got unpaid_account_payable data\", function () {",
											"                pm.environment.set(\"C-unpaid_account_payable\",unpaid_account_payable);",
											"                pm.expect(unpaid_account_payable != null).to.be.true;",
											"            });",
											"            console.log(\"unpaid_account_payable: \", unpaid_account_payable);",
											"",
											"            postman.setNextRequest(\"get_payable_supplier\"); // get_payable_supplier",
											"            break;",
											"        case 4:",
											"            let old_data = pm.environment.get(\"C-unpaid_account_payable\");",
											"",
											"            // thanh toán invoice thì ko ảnh hưởng gì bill",
											"            pm.test(\"Nothing happen!!!\", function () {",
											"                console.log(\"old: \", old_data);",
											"                console.log(\"new: \", unpaid_account_payable);",
											"                pm.expect(JSON.stringify(unpaid_account_payable) == JSON.stringify(old_data)).to.be.true;",
											"            });",
											"",
											"            // update new data",
											"            // pm.environment.set(\"C-unpaid_account_payable\",unpaid_account_payable);",
											"",
											"            postman.setNextRequest(\"get_payable_supplier\"); // get_payable_supplier",
											"            break;",
											"        default:",
											"            console.log(\"Missing flow, end test\");",
											"            postman.setNextRequest(null);",
											"            break;",
											"    }",
											"} else {",
											"    console.log(\"Can't get report account receivable unpaid, end test\",jsData);",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{C-userToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{C-payload}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{finone_url}}/fo-order/api/v1/report/account-receivable-card-unpaid",
									"host": [
										"{{finone_url}}"
									],
									"path": [
										"fo-order",
										"api",
										"v1",
										"report",
										"account-receivable-card-unpaid"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_payable_supplier",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let testcase = pm.environment.get(\"C-testcase\");",
											"console.log(\"Testcase: \" + testcase);",
											"",
											"let page = pm.environment.get(\"C-page\");",
											"",
											"let page_size = 50;",
											"if(!page){",
											"    page = 1;",
											"    pm.environment.set(\"C-page\",page);",
											"    pm.environment.set(\"C-page_size\",page_size);",
											"}",
											"",
											"let payload = {",
											"    \"account_key\": \"B1001\",",
											"    // \"branch_id\": pm.environment.get(\"C-branch_id\"),",
											"    \"business_id\": parseInt(pm.environment.get(\"C-business_id\")),",
											"    \"page\": page,",
											"    \"page_size\": page_size",
											"}",
											"",
											"console.log(\"payload: \",payload);",
											"pm.environment.set(\"C-payload\",JSON.stringify(payload));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"let jsData = JSON.parse(responseBody);",
											"if(pm.response.code == 200){",
											"    let testcase = pm.environment.get(\"C-testcase\");",
											"    let total_pages = jsData.meta.total_pages;",
											"    let page = pm.environment.get(\"C-page\");",
											"",
											"    let list_report_supplier, old_list_report_supplier;",
											"    switch(testcase){",
											"        case 2:",
											"            list_report_supplier = pm.environment.get(\"C-list_report_supplier\");",
											"            if(!list_report_supplier){",
											"                list_report_supplier = [];",
											"            }",
											"            break;",
											"        case 4:",
											"            old_list_report_supplier = pm.environment.get(\"C-old_list_report_supplier\");",
											"            if(!old_list_report_supplier){",
											"                old_list_report_supplier = pm.environment.get(\"C-list_report_supplier\");",
											"                pm.environment.unset(\"C-list_report_supplier\");",
											"                pm.environment.set(\"C-old_list_report_supplier\",old_list_report_supplier);",
											"            }",
											"",
											"            list_report_supplier = pm.environment.get(\"C-list_report_supplier\");",
											"            if(!list_report_supplier){",
											"                list_report_supplier = [];",
											"            }",
											"            break;",
											"        default:",
											"            console.log(\"Missing flow\");",
											"            break;",
											"    }",
											"",
											"    for(let item in jsData.data){",
											"        list_report_supplier[list_report_supplier.length] = {",
											"            \"contact_id\":jsData.data[item].contact_id,",
											"            \"unpaid_total\":jsData.data[item].unpaid_total,",
											"            \"unpaid_due\":jsData.data[item].unpaid_due,",
											"            \"unpaid_overdue_less\":jsData.data[item].unpaid_overdue_less,",
											"            \"unpaid_overdue_between\":jsData.data[item].unpaid_overdue_between,",
											"            \"unpaid_overdue_over\":jsData.data[item].unpaid_overdue_over,",
											"            \"full_count\":jsData.data[item].full_count,",
											"            \"contact_name\":jsData.data[item].contact_info.contact_name,",
											"            \"contact_phone\":jsData.data[item].contact_info.contact_phone",
											"        }",
											"    }",
											"    pm.environment.set(\"C-list_report_supplier\",list_report_supplier);",
											"",
											"    if(page >= total_pages){",
											"        // must clear page & page_size",
											"        pm.environment.unset(\"C-page\");",
											"        pm.environment.unset(\"C-page_size\");",
											"",
											"        let contact_id = pm.environment.get(\"C-contact_id\");",
											"        let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
											"        let total_amount;",
											"        let isFound = false, hasRecord = false;",
											"        switch(testcase){",
											"            case 2:",
											"                pm.test(\"Got all record! \" + list_report_supplier.length, function () {",
											"                    pm.expect(list_report_supplier.length > 0).to.be.true;",
											"                });",
											"",
											"                postman.setNextRequest(\"get_profit_n_loss\"); // get_profit_n_loss",
											"                break;",
											"            case 4:",
											"                // thanh toán invoice thì ko ảnh hưởng gì supplier",
											"                pm.test(\"Nothing happen with total record\", function () {",
											"                    pm.expect(list_report_supplier.length == old_list_report_supplier.length).to.be.true;",
											"                });",
											"",
											"                postman.setNextRequest(\"get_profit_n_loss\"); // get_profit_n_loss",
											"                break;",
											"            default:",
											"                console.log(\"Missing flow, end test\");",
											"                postman.setNextRequest(null);",
											"                break;",
											"        }",
											"    } else {",
											"        page++;",
											"        pm.environment.set(\"C-page\",page);",
											"",
											"        console.log(\"view next page (\" + page + \") to get more product\");",
											"        postman.setNextRequest(\"get_report_account_receivable_customer\");",
											"    }",
											"} else {",
											"    console.log(\"Can't get list product, end test\",jsData);",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{C-userToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{C-payload}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{finone_url}}/fo-order/api/v1/report/account-receivable-customer-unpaid",
									"host": [
										"{{finone_url}}"
									],
									"path": [
										"fo-order",
										"api",
										"v1",
										"report",
										"account-receivable-customer-unpaid"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "P_n_L",
					"item": [
						{
							"name": "get_profit_n_loss",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let testcase = pm.environment.get(\"C-testcase\");",
											"console.log(\"Testcase: \" + testcase);",
											"",
											"let payload;",
											"switch(testcase){",
											"    case 2:",
											"        let is_get_last = pm.environment.get(\"C-is_get_last\");",
											"        if(!is_get_last){",
											"            is_get_last = false;",
											"            pm.environment.set(\"C-is_get_last\",is_get_last);",
											"            ",
											"            payload = {",
											"                \"business_id\": parseInt(pm.environment.get(\"C-business_id\")),",
											"                \"current_period_start\": pm.environment.get(\"C-previous_period_start\"), // current_period_start, previous_period_start",
											"                \"current_period_end\": pm.environment.get(\"C-previous_period_end\") // current_period_end, previous_period_end",
											"            }",
											"        } else {",
											"            payload = {",
											"                \"business_id\": parseInt(pm.environment.get(\"C-business_id\")),",
											"                \"current_period_start\": pm.environment.get(\"C-current_period_start\"), // current_period_start, previous_period_start",
											"                \"current_period_end\": pm.environment.get(\"C-current_period_end\") // current_period_end, previous_period_end",
											"            }",
											"        }",
											"        break;",
											"    case 4:",
											"        payload = {",
											"            \"business_id\": parseInt(pm.environment.get(\"C-business_id\")),",
											"            \"current_period_start\": pm.environment.get(\"C-current_period_start\"), // current_period_start, previous_period_start",
											"            \"current_period_end\": pm.environment.get(\"C-current_period_end\") // current_period_end, previous_period_end",
											"        }",
											"        break;",
											"    default:",
											"        console.log(\"Missing flow\");",
											"}",
											"",
											"console.log(\"payload: \",payload);",
											"pm.environment.set(\"C-payload\",JSON.stringify(payload));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// ============================= getFirstDayOfMonth",
											"function getFirstDayOfMonth(date_timestamp){",
											"  let setDate = new Date(date_timestamp*1000);",
											"  let getDate = new Date(setDate.getFullYear(), setDate.getMonth(), 1);",
											"  return getDate.toISOString();",
											"}",
											"",
											"// ============================= getLastDayOfMonth",
											"function getLastDayOfMonth(date_timestamp){",
											"  let setDate = new Date(date_timestamp*1000);",
											"  let firstDayOfNextMonth = new Date(setDate.getFullYear(), setDate.getMonth() + 1, 1);",
											"  let lastDayOfMonth = new Date(firstDayOfNextMonth - 1);",
											"  return lastDayOfMonth.toISOString();",
											"}",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsData = pm.response.json();",
											"if(pm.response.code == 200){",
											"    let testcase = pm.environment.get(\"C-testcase\");",
											"",
											"    let profit_n_loss_app = null;",
											"    let profit_n_loss_app_last_month;",
											"    switch(testcase){",
											"        case 2:",
											"            let is_get_last = pm.environment.get(\"C-is_get_last\");",
											"",
											"            if(!is_get_last){",
											"                is_get_last = true;",
											"                pm.environment.set(\"C-is_get_last\",is_get_last);",
											"",
											"                profit_n_loss_app_last_month = jsData.data.sum_card_data;",
											"                pm.environment.set(\"C-profit_n_loss_app_last_month\",profit_n_loss_app_last_month);",
											"",
											"                postman.setNextRequest(\"get_profit_n_loss\");",
											"            } else {",
											"                pm.environment.unset(\"C-is_get_last\");",
											"",
											"                profit_n_loss_app = jsData.data.sum_card_data; // chỉ check phần summary",
											"                pm.test(\"Got profit_n_loss_app \", function () {",
											"                    // sum_card_data.total_balance_amount",
											"                    // dates_data",
											"                    pm.environment.set(\"C-profit_n_loss_app\",profit_n_loss_app);",
											"                    pm.expect(profit_n_loss_app != null).to.be.true;",
											"                });",
											"                console.log(\"profit_n_loss_app: \" , profit_n_loss_app);",
											"",
											"                // check data chart & table",
											"                let sum_table = {",
											"                    \"total_profit\":0,",
											"                    \"total_income\":0,",
											"                    \"total_expense\":0,",
											"                    \"total_gap\":0",
											"                }",
											"                // let pnl_month_obj = {",
											"                //     \"start_amount\":0,",
											"                //     \"end_amount\":0",
											"                // }",
											"                for(let i in jsData.data.dates_data){",
											"                    sum_table.total_profit += jsData.data.dates_data[i].gap;",
											"                    sum_table.total_income += jsData.data.dates_data[i].income;",
											"                    sum_table.total_expense += jsData.data.dates_data[i].expense;",
											"",
											"                //     // gap =  income - expense",
											"                //     pm.test(\"Date: \" + jsData.data.dates_data[i].date + \"- gap must be \" + (jsData.data.dates_data[i].income - jsData.data.dates_data[i].expense), function () {",
											"                //         // console.log(\"act gap: \" + jsData.data.dates_data[i].gap);",
											"                //         pm.expect(jsData.data.dates_data[i].gap).to.eql(jsData.data.dates_data[i].income - jsData.data.dates_data[i].expense);",
											"                //     });",
											"                }",
											"",
											"                // // total_profit",
											"                // pm.test(\"total_profit must be \" + sum_table.total_profit, function () {",
											"                //     pm.expect(jsData.data.sum_card_data.total_profit).to.eql(sum_table.total_profit);",
											"                // });",
											"",
											"                // total_income",
											"                pm.test(\"total_income must be \" + sum_table.total_income, function () {",
											"                    pm.expect(jsData.data.sum_card_data.total_income).to.eql(sum_table.total_income);",
											"                });",
											"",
											"                // total_expense",
											"                pm.test(\"total_expense must be \" + sum_table.total_expense, function () {",
											"                    pm.expect(jsData.data.sum_card_data.total_expense).to.eql(sum_table.total_expense);",
											"                });",
											"",
											"                // total_gap = last_month.total_profit",
											"                profit_n_loss_app_last_month = pm.environment.get(\"C-profit_n_loss_app_last_month\");",
											"                pm.test(\"total_gap must be \" + profit_n_loss_app_last_month.total_profit, function () {",
											"                    pm.expect(jsData.data.sum_card_data.total_gap).to.eql(profit_n_loss_app_last_month.total_profit);",
											"                });",
											"",
											"                // pm.environment.set(\"C-month_obj\",month_obj);",
											"                postman.setNextRequest(\"get_profit_chart\"); // get_profit_chart",
											"            }",
											"            break;",
											"        case 4:",
											"            let old_profit_n_loss_app = pm.environment.get(\"C-profit_n_loss_app\");",
											"            profit_n_loss_app = jsData.data.sum_card_data;",
											"            console.log(\"old: \", old_profit_n_loss_app);",
											"            console.log(\"new: \", profit_n_loss_app);",
											"",
											"            let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
											"            tnx_obj = pm.environment.get(\"C-tnx_obj\");",
											"            tnx_date = tnx_obj.value_at;",
											"            console.log(\"tnx_date: \" + tnx_date);",
											"",
											"            // thanh toán cho invoice sẽ ko ảnh hưởng data vì khi create đã dc ghi nhận",
											"            pm.test(\"Nothing happen!!!\", function () {",
											"                pm.expect(JSON.stringify(old_profit_n_loss_app) == JSON.stringify(profit_n_loss_app)).to.be.true;",
											"            });",
											"",
											"            // do thời gian lọc là tháng hiện tại => chỉ thay đổi khi value_at nằm trong tháng hiện tại",
											"            // let today = new Date();",
											"            // let today_tmp = Math.floor(today.getTime()/1000);",
											"            // let firstDayOfThisMonth = getFirstDayOfMonth(today_tmp);",
											"            // let lastDayOfThisMonth = getLastDayOfMonth(today_tmp);",
											"            // if(tnx_date < firstDayOfThisMonth || tnx_date > lastDayOfThisMonth){",
											"            //     // nothing happen",
											"            //     pm.test(\"Nothing happen!!!\", function () {",
											"            //         pm.expect(JSON.stringify(profit_n_loss_app) == JSON.stringify(old_profit_n_loss_app)).to.be.true;",
											"            //     });",
											"            // } else {",
											"            //     tnx_date = tnx_date.substring(0,10);",
											"",
											"            //     let exp_change = tnx_obj.amount;",
											"            //     // có thay đổi => total_income increase",
											"            //     if(tnx_obj.txn_type == \"in\"){",
											"            //         // total_income",
											"            //         pm.test(\"total_income increase \" + exp_change, function () {",
											"            //             console.log(\"expected: \" + (old_profit_n_loss_app.total_income + exp_change));",
											"            //             pm.expect(profit_n_loss_app.total_income == old_profit_n_loss_app.total_income + exp_change).to.be.true;",
											"            //         });",
											"",
											"            //         // total_profit => chart này ko cần trả profit",
											"            //         // pm.test(\"total_profit increase \" + exp_change, function () {",
											"            //         //     pm.expect(profit_n_loss_app.total_profit == old_profit_n_loss_app.total_profit + exp_change).to.be.true;",
											"            //         // });",
											"",
											"            //         // thay đổi ngày tương ứng",
											"            //         // let old_date = null, act_date = null;",
											"            //         // for(let i in profit_n_loss_app.dates_data){",
											"            //         //     let day_i = profit_n_loss_app.dates_data[i].date.substring(0,10);",
											"            //         //     if(day_i == tnx_date){",
											"            //         //         act_date = profit_n_loss_app.dates_data[i];",
											"            //         //         break;",
											"            //         //     }",
											"            //         // }",
											"",
											"            //         // for(let i in old_profit_n_loss_app.dates_data){",
											"            //         //     let day_i = old_profit_n_loss_app.dates_data[i].date.substring(0,10);",
											"            //         //     if(day_i == tnx_date){",
											"            //         //         old_date = old_profit_n_loss_app.dates_data[i];",
											"            //         //         break;",
											"            //         //     }",
											"            //         // }",
											"",
											"            //         // if(old_date != null && act_date != null){",
											"            //         //     console.log(\"act_date: \",act_date);",
											"            //         //     console.log(\"old_date: \",old_date);",
											"            //         //     // income",
											"            //         //     pm.test(\"income at \" + tnx_date + \" increase \" + exp_change, function () {",
											"            //         //         pm.expect(act_date.income == old_date.income + exp_change).to.be.true;",
											"            //         //     });",
											"            //         //     // gap",
											"            //         //     pm.test(\"gap at \" + tnx_date + \" increase \" + exp_change, function () {",
											"            //         //         pm.expect(act_date.gap == old_date.gap + exp_change).to.be.true;",
											"            //         //     });",
											"            //         // }",
											"            //     } else {",
											"            //         // total_expense",
											"            //         pm.test(\"total_expense increase \" + exp_change, function () {",
											"            //             pm.expect(profit_n_loss_app.total_expense == old_profit_n_loss_app.total_expense + exp_change).to.be.true;",
											"            //         });",
											"",
											"            //         // total_profit",
											"            //         pm.test(\"total_profit decrease \" + exp_change, function () {",
											"            //             pm.expect(profit_n_loss_app.total_profit == old_profit_n_loss_app.total_profit - exp_change).to.be.true;",
											"            //         });",
											"",
											"            //         // thay đổi ngày tương ứng",
											"            //         // let old_date = null, act_date = null;",
											"            //         // for(let i in profit_n_loss_app.dates_data){",
											"            //         //     let day_i = profit_n_loss_app.dates_data[i].date.substring(0,10);",
											"            //         //     if(day_i == tnx_date){",
											"            //         //         act_date = profit_n_loss_app.dates_data[i];",
											"            //         //         break;",
											"            //         //     }",
											"            //         // }",
											"",
											"            //         // for(let i in old_profit_n_loss_app.dates_data){",
											"            //         //     let day_i = old_profit_n_loss_app.dates_data[i].date.substring(0,10);",
											"            //         //     if(day_i == tnx_date){",
											"            //         //         old_date = old_profit_n_loss_app.dates_data[i];",
											"            //         //         break;",
											"            //         //     }",
											"            //         // }",
											"",
											"            //         // if(old_date != null && act_date != null){",
											"            //         //     console.log(\"act_date: \",act_date);",
											"            //         //     console.log(\"old_date: \",old_date);",
											"            //         //     // expense",
											"            //         //     pm.test(\"expense at \" + tnx_date + \" increase \" + exp_change, function () {",
											"            //         //         pm.expect(act_date.expense == old_date.expense + exp_change).to.be.true;",
											"            //         //     });",
											"            //         //     // gap",
											"            //         //     pm.test(\"gap at \" + tnx_date + \" decrease \" + exp_change, function () {",
											"            //         //         pm.expect(act_date.gap == old_date.gap - exp_change).to.be.true;",
											"            //         //     });",
											"            //         // }",
											"            //     }",
											"            // }",
											"",
											"            postman.setNextRequest(\"get_profit_chart\"); // get_profit_chart",
											"            break;",
											"        default:",
											"            console.log(\"Missing flow, end test\");",
											"            postman.setNextRequest(null);",
											"            break;",
											"    }",
											"} else {",
											"    console.log(\"Can't get profit and loss on app, end test\",jsData);",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "authorization",
										"value": "Bearer {{C-userToken}}",
										"type": "text"
									},
									{
										"key": "x-location-timezone",
										"value": "Asia/Saigon",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{C-payload}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{finone_url}}/fo-ledger/api/v1/report/chart-profit-loss-detail",
									"host": [
										"{{finone_url}}"
									],
									"path": [
										"fo-ledger",
										"api",
										"v1",
										"report",
										"chart-profit-loss-detail"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_profit_n_loss_branch",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let testcase = pm.environment.get(\"C-testcase\");",
											"console.log(\"Testcase: \" + testcase);",
											"",
											"let payload = {",
											"    \"business_id\": parseInt(pm.environment.get(\"C-business_id\")),",
											"    \"branch_id\": pm.environment.get(\"C-branch_id\"),",
											"    \"current_period_start\": pm.environment.get(\"C-current_period_start\"),",
											"    \"current_period_end\": pm.environment.get(\"C-current_period_end\")",
											"}",
											"",
											"console.log(\"payload: \",payload);",
											"pm.environment.set(\"C-payload\",JSON.stringify(payload));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsData = pm.response.json();",
											"if(pm.response.code == 200){",
											"    let testcase = pm.environment.get(\"C-testcase\");",
											"",
											"    let profit_n_loss_app = null;",
											"    let invoice_obj, invoice_date;",
											"    switch(testcase){",
											"        case 2:",
											"            profit_n_loss_app = jsData.data.sum_card_data; // chỉ check phần summary",
											"            pm.test(\"Got profit_n_loss_app \", function () {",
											"                // sum_card_data.total_balance_amount",
											"                // dates_data",
											"                pm.environment.set(\"C-profit_n_loss_app\",profit_n_loss_app);",
											"                pm.expect(profit_n_loss_app != null).to.be.true;",
											"            });",
											"            console.log(\"profit_n_loss_app: \" , profit_n_loss_app);",
											"",
											"            postman.setNextRequest(\"get_profit_chart\"); // get_profit_chart",
											"            break;",
											"        default:",
											"            console.log(\"Missing flow, end test\");",
											"            postman.setNextRequest(null);",
											"            break;",
											"    }",
											"} else {",
											"    console.log(\"Can't get profit and loss on app, end test\",jsData);",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "authorization",
										"value": "Bearer {{C-userToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{C-payload}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{finone_url}}/fo-ledger/api/v1/report/chart-profit-loss-detail",
									"host": [
										"{{finone_url}}"
									],
									"path": [
										"fo-ledger",
										"api",
										"v1",
										"report",
										"chart-profit-loss-detail"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "sales",
					"item": [
						{
							"name": "get_profit_chart",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let testcase = pm.environment.get(\"C-testcase\");",
											"console.log(\"Testcase: \" + testcase);",
											"",
											"let payload;",
											"switch(testcase){",
											"    case 2:",
											"        let is_get_last = pm.environment.get(\"C-is_get_last\");",
											"        if(!is_get_last){",
											"            is_get_last = false;",
											"            pm.environment.set(\"C-is_get_last\",is_get_last);",
											"            ",
											"            payload = {",
											"                \"business_id\": parseInt(pm.environment.get(\"C-business_id\")),",
											"                \"period\": \"last_month\",",
											"                \"report_type\": \"income\" // expense, income",
											"            }",
											"        } else {",
											"            payload = {",
											"                \"business_id\": parseInt(pm.environment.get(\"C-business_id\")),",
											"                \"period\": \"month\",",
											"                \"report_type\": \"income\" // expense, income",
											"            }",
											"        }",
											"        break;",
											"    case 4:",
											"        payload = {",
											"            \"business_id\": parseInt(pm.environment.get(\"C-business_id\")),",
											"            \"period\": \"month\",",
											"            \"report_type\": \"income\" // expense, income",
											"        }",
											"        break;",
											"    default:",
											"        console.log(\"Missing flow\");",
											"}",
											"",
											"console.log(\"payload: \",payload);",
											"pm.environment.set(\"C-payload\",JSON.stringify(payload));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// ============================= getFirstDayOfMonth",
											"function getFirstDayOfMonth(date_timestamp){",
											"  let setDate = new Date(date_timestamp*1000);",
											"  let getDate = new Date(setDate.getFullYear(), setDate.getMonth(), 1);",
											"  return getDate.toISOString();",
											"}",
											"",
											"// ============================= getLastDayOfMonth",
											"function getLastDayOfMonth(date_timestamp){",
											"  let setDate = new Date(date_timestamp*1000);",
											"  let firstDayOfNextMonth = new Date(setDate.getFullYear(), setDate.getMonth() + 1, 1);",
											"  let lastDayOfMonth = new Date(firstDayOfNextMonth - 1);",
											"  return lastDayOfMonth.toISOString();",
											"}",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsData = pm.response.json();",
											"if(pm.response.code == 200){",
											"    let testcase = pm.environment.get(\"C-testcase\");",
											"",
											"    let profit_period = null;",
											"    try {",
											"        profit_period = jsData.data;",
											"        /**",
											"         * period: week, month, year",
											"         * sum_card_data",
											"         * dates_data",
											"         */",
											"    } catch {",
											"        console.log(\"Can't get report cash_flow data\");",
											"    }",
											"",
											"    let tnx_obj, tnx_date;",
											"    switch(testcase){",
											"        case 2:",
											"            let is_get_last = pm.environment.get(\"C-is_get_last\");",
											"",
											"            if(!is_get_last){",
											"                is_get_last = true;",
											"                pm.environment.set(\"C-is_get_last\",is_get_last);",
											"",
											"                profit_period_last_month = jsData.data;",
											"                pm.environment.set(\"C-profit_period_last_month\",profit_period_last_month);",
											"",
											"                postman.setNextRequest(\"get_profit_chart\");",
											"            } else {",
											"                pm.environment.unset(\"C-is_get_last\");",
											"",
											"                profit_period = jsData.data;",
											"                pm.test(\"Got profit_period \", function () {",
											"                    // sum_card_data.total_balance_amount",
											"                    // dates_data",
											"                    pm.environment.set(\"C-profit_period\",profit_period);",
											"                    pm.expect(profit_period != null).to.be.true;",
											"                });",
											"                // console.log(\"profit_period: \" , profit_period);",
											"",
											"                // check data chart & table",
											"                let sum_table = {",
											"                    \"total_income\":0,",
											"                    \"total_expense\":0,",
											"                    \"total_gap\":0,",
											"                    \"total_profit\":0",
											"                }",
											"                // let pnl_month_obj = {",
											"                //     \"start_amount\":0,",
											"                //     \"end_amount\":0",
											"                // }",
											"                for(let i in jsData.data.dates_data){",
											"                    sum_table.total_income += jsData.data.dates_data[i].income;",
											"                    sum_table.total_expense += jsData.data.dates_data[i].expense;",
											"                    sum_table.total_gap += jsData.data.dates_data[i].gap;",
											"                    sum_table.total_profit += jsData.data.dates_data[i].profit;",
											"",
											"                    // previous_profit =  last_month.profit",
											"                    pm.test(\"Date: \" + jsData.data.dates_data[i].date + \"- previous_profit must be \" + profit_period_last_month.dates_data[i].profit, function () {",
											"                        // console.log(\"act gap: \" + jsData.data.dates_data[i].gap);",
											"                        pm.expect(jsData.data.dates_data[i].previous_profit).to.eql(profit_period_last_month.dates_data[i].profit);",
											"                    });",
											"",
											"                    // gap",
											"                    pm.test(\"--- gap must be \" + (jsData.data.dates_data[i].income - jsData.data.dates_data[i].expense), function () {",
											"                        // console.log(\"act gap: \" + jsData.data.dates_data[i].gap);",
											"                        pm.expect(jsData.data.dates_data[i].gap).to.eql(jsData.data.dates_data[i].income - jsData.data.dates_data[i].expense);",
											"                    });",
											"",
											"                    // profit",
											"                }",
											"",
											"                // total_profit",
											"                pm.test(\"total_profit must be \" + sum_table.total_profit, function () {",
											"                    pm.expect(jsData.data.sum_card_data.total_profit).to.eql(sum_table.total_profit);",
											"                });",
											"",
											"                // total_income",
											"                pm.test(\"total_income must be \" + sum_table.total_income, function () {",
											"                    pm.expect(jsData.data.sum_card_data.total_income).to.eql(sum_table.total_income);",
											"                });",
											"",
											"                // total_expense",
											"                pm.test(\"total_expense must be \" + sum_table.total_expense, function () {",
											"                    pm.expect(jsData.data.sum_card_data.total_expense).to.eql(sum_table.total_expense);",
											"                });",
											"",
											"                // total_previous_profit = last_month.total_profit",
											"                profit_period_last_month = pm.environment.get(\"C-profit_period_last_month\");",
											"                pm.test(\"total_previous_profit must be \" + profit_period_last_month.sum_card_data.total_profit, function () {",
											"                    pm.expect(jsData.data.sum_card_data.total_previous_profit).to.eql(profit_period_last_month.sum_card_data.total_profit);",
											"                });",
											"",
											"                // pm.environment.set(\"C-month_obj\",month_obj);",
											"                postman.setNextRequest(\"get_income_report\"); // get_income_report",
											"            }",
											"            break;",
											"        case 4:",
											"            tnx_obj = pm.environment.get(\"C-tnx_obj\");",
											"            tnx_date = tnx_obj.value_at;",
											"            console.log(\"tnx_date: \" + tnx_date);",
											"            // do thời gian lọc là tháng hiện tại => chỉ thay đổi khi value_at nằm trong tháng hiện tại",
											"",
											"            let old_profit_period = pm.environment.get(\"C-profit_period\");",
											"            profit_period = jsData.data;",
											"",
											"            // thanh toán cho invoice sẽ ko ảnh hưởng data vì khi create đã dc ghi nhận",
											"            pm.test(\"Nothing happen!!!\", function () {",
											"                pm.expect(JSON.stringify(profit_period) == JSON.stringify(old_profit_period)).to.be.true;",
											"            });",
											"",
											"            // let today = new Date();",
											"            // let today_tmp = Math.floor(today.getTime()/1000);",
											"            // let firstDayOfThisMonth = getFirstDayOfMonth(today_tmp);",
											"            // let lastDayOfThisMonth = getLastDayOfMonth(today_tmp);",
											"            // if(tnx_date < firstDayOfThisMonth || tnx_date > lastDayOfThisMonth){",
											"            //     // nothing happen",
											"            //     pm.test(\"Nothing happen!!!\", function () {",
											"            //         pm.expect(JSON.stringify(profit_period) == JSON.stringify(old_profit_period)).to.be.true;",
											"            //     });",
											"            // } else {",
											"            //     tnx_date = tnx_date.substring(0,10);",
											"",
											"            //     let exp_change = tnx_obj.amount;",
											"            //     if(tnx_obj.txn_type == \"in\"){",
											"            //         // có thay đổi => total_income increase",
											"            //         pm.test(\"total_income increase \" + exp_change, function () {",
											"            //             pm.expect(profit_period.sum_card_data.total_income == old_profit_period.sum_card_data.total_income + exp_change).to.be.true;",
											"            //         });",
											"",
											"            //         // total_profit",
											"            //         pm.test(\"total_profit increase \" + exp_change, function () {",
											"            //             pm.expect(profit_period.sum_card_data.total_profit == old_profit_period.sum_card_data.total_profit + exp_change).to.be.true;",
											"            //         });",
											"",
											"            //         // thay đổi ngày tương ứng",
											"            //         let old_date = null, act_date = null;",
											"            //         for(let i in profit_period.dates_data){",
											"            //             let day_i = profit_period.dates_data[i].date.substring(0,10);",
											"            //             if(day_i == tnx_date){",
											"            //                 act_date = profit_period.dates_data[i];",
											"            //                 break;",
											"            //             }",
											"            //         }",
											"",
											"            //         for(let i in old_profit_period.dates_data){",
											"            //             let day_i = old_profit_period.dates_data[i].date.substring(0,10);",
											"            //             if(day_i == tnx_date){",
											"            //                 old_date = old_profit_period.dates_data[i];",
											"            //                 break;",
											"            //             }",
											"            //         }",
											"",
											"            //         if(old_date != null && act_date != null){",
											"            //             console.log(\"act_date: \",act_date);",
											"            //             console.log(\"old_date: \",old_date);",
											"            //             // income",
											"            //             pm.test(\"income at \" + tnx_date + \" increase \" + exp_change, function () {",
											"            //                 pm.expect(act_date.income == old_date.income + exp_change).to.be.true;",
											"            //             });",
											"",
											"            //             // profit",
											"            //             pm.test(\"profit at \" + tnx_date + \" increase \" + exp_change, function () {",
											"            //                 pm.expect(act_date.profit == old_date.profit + exp_change).to.be.true;",
											"            //             });",
											"            //         }",
											"            //     } else {",
											"            //         // có thay đổi => total_expense increase",
											"            //         pm.test(\"total_expense increase \" + exp_change, function () {",
											"            //             pm.expect(profit_period.sum_card_data.total_expense == old_profit_period.sum_card_data.total_expense + exp_change).to.be.true;",
											"            //         });",
											"",
											"            //         // total_profit descrease",
											"            //         pm.test(\"total_profit decrease \" + exp_change, function () {",
											"            //             pm.expect(profit_period.sum_card_data.total_profit == old_profit_period.sum_card_data.total_profit - exp_change).to.be.true;",
											"            //         });",
											"",
											"            //         // thay đổi ngày tương ứng",
											"            //         let old_date = null, act_date = null;",
											"            //         for(let i in profit_period.dates_data){",
											"            //             let day_i = profit_period.dates_data[i].date.substring(0,10);",
											"            //             if(day_i == tnx_date){",
											"            //                 act_date = profit_period.dates_data[i];",
											"            //                 break;",
											"            //             }",
											"            //         }",
											"",
											"            //         for(let i in old_profit_period.dates_data){",
											"            //             let day_i = old_profit_period.dates_data[i].date.substring(0,10);",
											"            //             if(day_i == tnx_date){",
											"            //                 old_date = old_profit_period.dates_data[i];",
											"            //                 break;",
											"            //             }",
											"            //         }",
											"",
											"            //         if(old_date != null && act_date != null){",
											"            //             console.log(\"act_date: \",act_date);",
											"            //             console.log(\"old_date: \",old_date);",
											"            //             // expense",
											"            //             pm.test(\"expense at \" + tnx_date + \" increase \" + exp_change, function () {",
											"            //                 pm.expect(act_date.expense == old_date.expense + exp_change).to.be.true;",
											"            //             });",
											"",
											"            //             // profit",
											"            //             pm.test(\"profit at \" + tnx_date + \" decrease \" + exp_change, function () {",
											"            //                 pm.expect(act_date.profit == old_date.profit - exp_change).to.be.true;",
											"            //             });",
											"            //         }",
											"            //     }",
											"            // }",
											"",
											"            postman.setNextRequest(\"get_income_report\"); // get_income_report",
											"            break;",
											"        default:",
											"            console.log(\"Missing flow, end test\");",
											"            postman.setNextRequest(null);",
											"            break;",
											"    }",
											"} else {",
											"    console.log(\"Can't get report P&L period, end test\",jsData);",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-location-timezone",
										"value": "Asia/Saigon"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{C-userToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{C-payload}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{finone_url}}/fo-ledger/api/v1/report/profit-loss-period",
									"host": [
										"{{finone_url}}"
									],
									"path": [
										"fo-ledger",
										"api",
										"v1",
										"report",
										"profit-loss-period"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_profit_chart_branch",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let testcase = pm.environment.get(\"C-testcase\");",
											"console.log(\"Testcase: \" + testcase);",
											"",
											"let payload = {",
											"    \"business_id\": parseInt(pm.environment.get(\"C-business_id\")),",
											"    \"branch_id\": pm.environment.get(\"C-branch_id\"),",
											"    \"period\": \"month\",",
											"    \"report_type\": \"profit\" // expense, profit",
											"}",
											"",
											"console.log(\"payload: \",payload);",
											"pm.environment.set(\"C-payload\",JSON.stringify(payload));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// ============================= getFirstDayOfMonth",
											"function getFirstDayOfMonth(date_timestamp){",
											"  let setDate = new Date(date_timestamp*1000);",
											"  let getDate = new Date(setDate.getFullYear(), setDate.getMonth(), 1);",
											"  return getDate.toISOString();",
											"}",
											"",
											"// ============================= getLastDayOfMonth",
											"function getLastDayOfMonth(date_timestamp){",
											"  let setDate = new Date(date_timestamp*1000);",
											"  let firstDayOfNextMonth = new Date(setDate.getFullYear(), setDate.getMonth() + 1, 1);",
											"  let lastDayOfMonth = new Date(firstDayOfNextMonth - 1);",
											"  return lastDayOfMonth.toISOString();",
											"}",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsData = pm.response.json();",
											"if(pm.response.code == 200){",
											"    let testcase = pm.environment.get(\"C-testcase\");",
											"",
											"    let profit_period = null;",
											"    try {",
											"        profit_period = jsData.data;",
											"        /**",
											"         * period: week, month, year",
											"         * sum_card_data",
											"         * dates_data",
											"         */",
											"    } catch {",
											"        console.log(\"Can't get report cash_flow data\");",
											"    }",
											"",
											"    let invoice_obj, invoice_date;",
											"    switch(testcase){",
											"        case 2:",
											"            pm.test(\"Got profit_period \", function () {",
											"                pm.environment.set(\"C-profit_period\",profit_period);",
											"                pm.expect(profit_period != null).to.be.true;",
											"            });",
											"            pm.environment.set(\"C-profit_period\",profit_period);",
											"            console.log(\"profit_period: \", profit_period);",
											"",
											"",
											"            postman.setNextRequest(\"get_income_report\"); // get_income_report",
											"            break;",
											"        case 5:",
											"            invoice_obj = pm.environment.get(\"C-invoice_obj\");",
											"            invoice_date = invoice_obj.value_at.substring(0,10);",
											"            // Invoice sẽ tăng profit (income), Bill sẽ tăng loss (chi phí)",
											"            ",
											"            // if(full_check == 1){",
											"            //     let old_profit_period = pm.environment.get(\"C-profit_period\");",
											"            //     // console.log(\"debug old_loss_period: \", old_profit_period);",
											"            //     // console.log(\"debug loss_period: \", profit_period);",
											"",
											"            //     pm.test(\"Nothing happen!!!\", function () {",
											"            //         pm.expect(JSON.stringify(profit_period) == JSON.stringify(old_profit_period)).to.be.true;",
											"            //     });",
											"",
											"            //     full_check++;",
											"            //     pm.environment.set(\"C-full_check\",full_check);",
											"            //     postman.setNextRequest(\"report_profit_loss_period\");",
											"            // } else {",
											"            //     let old_loss_period = pm.environment.get(\"C-loss_period\");",
											"            //     // console.log(\"debug old_loss_period: \", old_loss_period);",
											"            //     // console.log(\"debug loss_period: \", loss_period);",
											"                ",
											"            //     pm.test(\"Nothing happen!!!\", function () {",
											"            //         pm.expect(JSON.stringify(loss_period) == JSON.stringify(old_loss_period)).to.be.true;",
											"            //     });",
											"",
											"            //     pm.environment.unset(\"C-full_check\");",
											"",
											"            //     testcase++;",
											"            //     pm.environment.set(\"C-testcase\",testcase);",
											"            //     postman.setNextRequest(\"calculate_invoice\"); // calculate_invoice",
											"            // }",
											"            break;",
											"        case 8:",
											"            invoice_obj = pm.environment.get(\"C-invoice_obj\");",
											"            invoice_date = invoice_obj.value_at;",
											"            console.log(\"invoice_date: \" + invoice_date);",
											"",
											"            // if(full_check == 1){",
											"            //     let old_profit_period = pm.environment.get(\"C-profit_period\");",
											"            //     // console.log(\"debug old_loss_period: \", old_profit_period);",
											"            //     // console.log(\"debug loss_period: \", profit_period);",
											"",
											"            //     // do thời gian lọc là tháng hiện tại => chỉ thay đổi khi value_at nằm trong tháng hiện tại",
											"            //     let today = new Date();",
											"            //     let today_tmp = Math.floor(today.getTime()/1000);",
											"            //     let firstDayOfThisMonth = getFirstDayOfMonth(today_tmp);",
											"            //     let lastDayOfThisMonth = getLastDayOfMonth(today_tmp);",
											"            //     if(invoice_date < firstDayOfThisMonth || invoice_date > lastDayOfThisMonth){",
											"            //         // nothing happen",
											"            //         pm.test(\"Nothing happen!!!\", function () {",
											"            //             pm.expect(JSON.stringify(profit_period) == JSON.stringify(old_profit_period)).to.be.true;",
											"            //         });",
											"            //     } else {",
											"            //         invoice_date = invoice_date.substring(0,10);",
											"",
											"            //         let income_product = 0, income_discount = 0;",
											"            //         for(let i in invoice_obj.items){",
											"            //             income_product += invoice_obj.items[i].before_tax_amount;",
											"            //             income_discount += invoice_obj.items[i].discount_amount;",
											"            //         }",
											"            //         let exp_change = income_product - income_discount;",
											"            //         // có thay đổi => total_income increase",
											"            //         pm.test(\"total_income increase \" + exp_change, function () {",
											"            //             pm.expect(profit_period.sum_card_data.total_income == old_profit_period.sum_card_data.total_income + exp_change).to.be.true;",
											"            //         });",
											"            //         // thay đổi ngày tương ứng",
											"            //         let old_date = null, act_date = null;",
											"            //         for(let i in profit_period.dates_data){",
											"            //             let day_i = profit_period.dates_data[i].date.substring(0,10);",
											"            //             if(day_i == invoice_date){",
											"            //                 act_date = profit_period.dates_data[i];",
											"            //                 break;",
											"            //             }",
											"            //         }",
											"",
											"            //         for(let i in old_profit_period.dates_data){",
											"            //             let day_i = old_profit_period.dates_data[i].date.substring(0,10);",
											"            //             if(day_i == invoice_date){",
											"            //                 old_date = old_profit_period.dates_data[i];",
											"            //                 break;",
											"            //             }",
											"            //         }",
											"",
											"            //         if(old_date != null && act_date != null){",
											"            //             console.log(\"act_date: \",act_date);",
											"            //             console.log(\"old_date: \",old_date);",
											"            //             pm.test(\"income at \" + invoice_date + \" increase \" + exp_change, function () {",
											"            //                 pm.expect(act_date.income == old_date.income + exp_change).to.be.true;",
											"            //             });",
											"            //         }",
											"            //     }",
											"",
											"            //     full_check++;",
											"            //     pm.environment.set(\"C-full_check\",full_check);",
											"            //     postman.setNextRequest(\"report_profit_loss_period\");",
											"            // } else {",
											"            //     let old_loss_period = pm.environment.get(\"C-loss_period\");",
											"            //     // console.log(\"debug old_loss_period: \", old_loss_period);",
											"            //     // console.log(\"debug loss_period: \", loss_period);",
											"                ",
											"            //     pm.test(\"Nothing happen!!!\", function () {",
											"            //         pm.expect(JSON.stringify(loss_period) == JSON.stringify(old_loss_period)).to.be.true;",
											"            //     });",
											"",
											"            //     pm.environment.unset(\"C-full_check\");",
											"",
											"            //     console.log(\"-------- End Testsuite 06 --------\");",
											"            //     postman.setNextRequest(null);",
											"            // }",
											"            break;",
											"        default:",
											"            console.log(\"Missing flow, end test\");",
											"            postman.setNextRequest(null);",
											"            break;",
											"    }",
											"} else {",
											"    console.log(\"Can't get report P&L period, end test\",jsData);",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-location-timezone",
										"value": "UTC+07:00"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{C-userToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{C-payload}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{finone_url}}/fo-ledger/api/v1/report/profit-loss-period",
									"host": [
										"{{finone_url}}"
									],
									"path": [
										"fo-ledger",
										"api",
										"v1",
										"report",
										"profit-loss-period"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_income_report",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let testcase = pm.environment.get(\"C-testcase\");",
											"console.log(\"Testcase: \" + testcase);",
											"",
											"let configs = pm.environment.get(\"C-configs\");",
											"let payload = {",
											"    // \"branch_id\": pm.environment.get(\"C-branch_id\"),",
											"    \"business_id\": parseInt(pm.environment.get(\"C-business_id\")),",
											"    \"report_type\": \"income\",",
											"    \"period\": configs.period",
											"    // \"current_period_start\": current_period_start,",
											"    // \"current_period_end\": current_period_end",
											"}",
											"",
											"console.log(\"payload: \",payload);",
											"pm.environment.set(\"C-payload\",JSON.stringify(payload));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// ============================= sort by key",
											"function sortByKey(array, key, type) {",
											"    if(type == \"asc\"){",
											"        return array.sort(function(a, b) {",
											"            var x = a[key]; var y = b[key];",
											"            return ((x > y) ? -1 : ((x < y) ? 1 : 0));",
											"        });",
											"    } else {",
											"        return array.sort(function(a, b) {",
											"            var x = a[key]; var y = b[key];",
											"            return ((x < y) ? -1 : ((x > y) ? 1 : 0));",
											"        });",
											"    }",
											"}",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsData = pm.response.json();",
											"if(pm.response.code == 200){",
											"    let testcase = pm.environment.get(\"C-testcase\");",
											"    let report_income = null;",
											"    try {",
											"        report_income = jsData.data;",
											"    } catch {",
											"        console.log(\"Can't get report cash_flow data\");",
											"    }",
											"",
											"    let old_report_income = pm.environment.get(\"C-report_income\");",
											"    switch(testcase){",
											"        case 2:",
											"            pm.test(\"Got report_income\", function () {",
											"                pm.expect(report_income != null).to.be.true;",
											"            });",
											"            pm.environment.set(\"C-report_income\",report_income);",
											"            console.log(\"report_income: \", report_income);",
											"",
											"            postman.setNextRequest(\"get_product_report\"); // get_product_report",
											"            break;",
											"        case 4:",
											"            console.log(\"old_report_income: \",old_report_income);",
											"            console.log(\"===================\");",
											"            console.log(\"report_income: \",report_income);",
											"",
											"            let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
											"            old_report_income = pm.environment.get(\"C-report_income\");",
											"",
											"            if(tnx_obj.txn_type == \"in\"){",
											"                let new_cat = null, old_cat = null;",
											"                for(let i in old_report_income){",
											"                    if(old_report_income[i].coa_id == tnx_obj.category_id){",
											"                        old_cat = old_report_income[i];",
											"                        break;",
											"                    }",
											"                }",
											"",
											"                for(let i in report_income){",
											"                    if(report_income[i].coa_id == tnx_obj.category_id){",
											"                        new_cat = report_income[i];",
											"                        break;",
											"                    }",
											"                }",
											"",
											"                console.log(\"old_cat: \",old_cat);",
											"                console.log(\"new_cat: \",new_cat);",
											"                if(old_cat != null && new_cat != null){",
											"                    // balance = debit - credit",
											"                    pm.test(\"balance of \" + old_cat.coa_name + \" increase \" + tnx_obj.amount, function () {",
											"                        pm.expect(new_cat.total_amount == old_cat.total_amount + tnx_obj.amount).to.be.true;",
											"                    });",
											"                } else {",
											"                    // CHỔ NÀY KHẢ NĂNG SẼ LỖI NẾU CATEGORY NHẢY VÀO TOP HOẶC BỊ OUT KHỎI TOP VÌ ACTION",
											"                    pm.test(\"Nothing happen!!\", function () {",
											"                        pm.expect(JSON.stringify(report_income) == JSON.stringify(old_report_income)).to.be.true;",
											"                    });",
											"                }",
											"            } else {",
											"                pm.test(\"Nothing happen!!\", function () {",
											"                    pm.expect(JSON.stringify(report_income) == JSON.stringify(old_report_income)).to.be.true;",
											"                });",
											"            }",
											"",
											"            postman.setNextRequest(\"get_product_report\"); // get_product_report",
											"            break;",
											"        default:",
											"            console.log(\"Missing flow, end test\");",
											"            postman.setNextRequest(null);",
											"            break;",
											"    }",
											"} else {",
											"    console.log(\"Can't get report cash_flow, end test\",jsData);",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{C-userToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{C-payload}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{finone_url}}/fo-ledger/api/v1/report/summary-by-category",
									"host": [
										"{{finone_url}}"
									],
									"path": [
										"fo-ledger",
										"api",
										"v1",
										"report",
										"summary-by-category"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_income_report_branch",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let testcase = pm.environment.get(\"C-testcase\");",
											"console.log(\"Testcase: \" + testcase);",
											"",
											"let payload = {",
											"    // \"branch_id\": pm.environment.get(\"C-branch_id\"),",
											"    \"business_id\": parseInt(pm.environment.get(\"C-business_id\")),",
											"    \"report_type\": \"income\",",
											"    \"period\": \"month\"",
											"    // \"current_period_start\": current_period_start,",
											"    // \"current_period_end\": current_period_end",
											"}",
											"",
											"console.log(\"payload: \",payload);",
											"pm.environment.set(\"C-payload\",JSON.stringify(payload));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// ============================= sort by key",
											"function sortByKey(array, key, type) {",
											"    if(type == \"asc\"){",
											"        return array.sort(function(a, b) {",
											"            var x = a[key]; var y = b[key];",
											"            return ((x > y) ? -1 : ((x < y) ? 1 : 0));",
											"        });",
											"    } else {",
											"        return array.sort(function(a, b) {",
											"            var x = a[key]; var y = b[key];",
											"            return ((x < y) ? -1 : ((x > y) ? 1 : 0));",
											"        });",
											"    }",
											"}",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsData = pm.response.json();",
											"if(pm.response.code == 200){",
											"    let testcase = pm.environment.get(\"C-testcase\");",
											"    let report_income = null;",
											"    try {",
											"        report_income = jsData.data;",
											"    } catch {",
											"        console.log(\"Can't get report cash_flow data\");",
											"    }",
											"",
											"    let old_report_income;",
											"    switch(testcase){",
											"        case 2:",
											"            pm.test(\"Got report_income\", function () {",
											"                pm.expect(report_income != null).to.be.true;",
											"            });",
											"            pm.environment.set(\"C-report_income\",report_income);",
											"            console.log(\"report_income: \", report_income);",
											"",
											"            postman.setNextRequest(\"\"); // get_product_report",
											"            break;",
											"        case 8:",
											"            let ranTimeCase = pm.environment.get(\"C-ranTimeCase\");",
											"            // hiện tại report đang lấy thời gian 1 tháng hiện tại => chỉ handle với case ranTimeCase == 2;",
											"            if(ranTimeCase == 2){",
											"                let invoice_obj = pm.environment.get(\"C-invoice_obj\");",
											"                old_report_income = pm.environment.get(\"C-report_income\");",
											"                /**",
											"                 * Check rule:",
											"                 * - Xử lý data cho invoice_obj: sum amount của tất cả product cùng coa",
											"                 * - IF line_item trong invoice_obj có tồn tại trong old_report_income => thay đổi total_amount tương ứng",
											"                 * - ELSE:",
											"                 *    - IF line_item trong invoice_obj có tồn tại trong report_income => so sánh total_amount của product tương ứng với old_report_income (*)",
											"                 * Note:",
											"                 * (*) Cách so sánh: report_income[i].total_amount - invoice_obj.items[item].before_tax_amount < min(old_report_income.amount)",
											"                 */",
											"",
											"                console.log(\"invoice_obj: \", invoice_obj);",
											"                console.log(\"===================\");",
											"                console.log(\"old_report_income: \",old_report_income);",
											"                console.log(\"===================\");",
											"                console.log(\"report_income: \",report_income);",
											"",
											"                let list_item_objs = [];",
											"                for(let item in invoice_obj.items){",
											"                    if(list_item_objs.length == 0){",
											"                        list_item_objs[list_item_objs.length] = {",
											"                            \"account_id\":invoice_obj.items[item].account_id,",
											"                            \"name\":invoice_obj.items[item].name,",
											"                            \"before_tax_amount\":invoice_obj.items[item].before_tax_amount",
											"                        }",
											"                    } else {",
											"                        let is_found_item = false;",
											"                        for(let i in list_item_objs){",
											"                            if(list_item_objs[i].account_id == invoice_obj.items[item].account_id){",
											"                                is_found_item = true;",
											"                                list_item_objs[i].before_tax_amount += invoice_obj.items[item].before_tax_amount;",
											"                                break;",
											"                            }",
											"                        }",
											"",
											"                        if(!is_found_item){",
											"                            list_item_objs[list_item_objs.length] = {",
											"                                \"account_id\":invoice_obj.items[item].account_id,",
											"                                \"name\":invoice_obj.items[item].name,",
											"                                \"before_tax_amount\":invoice_obj.items[item].before_tax_amount",
											"                            }",
											"                        }",
											"                    }",
											"                }",
											"                console.log(\"===================\");",
											"                console.log(\"list_item_objs: \",list_item_objs);",
											"",
											"                let old_list_objs = [];",
											"                for(let i in old_report_income){",
											"                    for(let item in list_item_objs){",
											"                        if(old_report_income[i].coa_id == list_item_objs[item].account_id){",
											"                            console.log(\"Find product \" + list_item_objs[item].name + \" with coa \" + old_report_income[i].coa_name + \" in report!\");",
											"                            old_list_objs[old_list_objs.length] = old_report_income[i];",
											"",
											"                            old_list_objs[old_list_objs.length - 1 ].amount = list_item_objs[item].before_tax_amount;",
											"                            // ở đây ko break vì có thể có nhiều product;",
											"                        }",
											"                    }",
											"                }",
											"",
											"                let count = 0;",
											"                if(old_list_objs.length > 0){",
											"                    for(let i in old_list_objs){",
											"                        for(let j in report_income){",
											"                            if(old_list_objs[i].coa_id == report_income[j].coa_id){",
											"                                count++;",
											"                                pm.test(\"coa_name \" + old_list_objs[i].coa_name + \" increase \" + old_list_objs[i].amount, function () {",
											"                                    pm.expect(report_income[j].total_amount).to.eql(old_list_objs[i].total_amount + old_list_objs[i].amount);",
											"                                });",
											"                                break;",
											"                            }",
											"                        }",
											"                    }",
											"",
											"                    // check total",
											"                } else {",
											"                    let new_list_objs = [];",
											"                    for(let i in report_income){",
											"                        for(let item in list_item_objs){",
											"                            if(report_income[i].coa_id == list_item_objs[item].account_id){",
											"                                new_list_objs[new_list_objs.length] = report_income[i];",
											"",
											"                                new_list_objs[new_list_objs.length - 1 ].amount = list_item_objs[item].before_tax_amount;",
											"                                // ở đây ko break vì có thể có nhiều product;",
											"                            }",
											"                        }",
											"                    }",
											"",
											"                    if(new_list_objs.length > 0){",
											"                        for(let i in new_list_objs){",
											"                            for(let j in report_income){",
											"                                if(new_list_objs[i].coa_id == report_income[j].coa_id){",
											"                                    pm.test(\"coa_name \" + new_list_objs[i].coa_name + \" increase \" + new_list_objs[i].amount, function () {",
											"                                        pm.expect(old_report_income[old_report_income.length - 1].total_amount > new_list_objs[i].total_amount + new_list_objs[i].amount).to.be.true;",
											"                                    });",
											"                                    break;",
											"                                }",
											"                            }",
											"                        }",
											"                    }",
											"                }",
											"            } else {",
											"                // pm.test(\"Nothing happen with report_income\", function () {",
											"                //     pm.expect(JSON.stringify(report_income) == JSON.stringify(old_report_income)).to.be.true;",
											"                // });",
											"            }",
											"         ",
											"            // console.log(\"-------- End Testsuite 06 --------\");",
											"            postman.setNextRequest(\"report_profit_loss_period\");",
											"            break;",
											"        case 5:",
											"            old_report_income = pm.environment.get(\"C-report_income\");",
											"            pm.test(\"Nothing happen with report_income\", function () {",
											"                console.log(\"old_report_income: \",old_report_income);",
											"                console.log(\"===================\");",
											"                console.log(\"report_income: \",report_income);",
											"                pm.expect(JSON.stringify(report_income) == JSON.stringify(old_report_income)).to.be.true;",
											"            });",
											"            ",
											"            postman.setNextRequest(\"report_profit_loss_period\"); // report_profit_loss_period",
											"            break;",
											"        default:",
											"            console.log(\"Missing flow, end test\");",
											"            postman.setNextRequest(null);",
											"            break;",
											"    }",
											"} else {",
											"    console.log(\"Can't get report cash_flow, end test\",jsData);",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{C-userToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{C-payload}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{finone_url}}/fo-ledger/api/v1/report/summary-by-category",
									"host": [
										"{{finone_url}}"
									],
									"path": [
										"fo-ledger",
										"api",
										"v1",
										"report",
										"summary-by-category"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_product_report",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let testcase = pm.environment.get(\"C-testcase\");",
											"console.log(\"Testcase: \" + testcase);",
											"",
											"let payload = {",
											"    // \"branch_id\": pm.environment.get(\"C-branch_id\"),",
											"    \"business_id\": parseInt(pm.environment.get(\"C-business_id\")),",
											"    \"current_period_start\": pm.environment.get(\"C-current_period_start\"),",
											"    \"current_period_end\": pm.environment.get(\"C-current_period_end\")",
											"}",
											"",
											"console.log(\"payload: \",payload);",
											"pm.environment.set(\"C-payload\",JSON.stringify(payload));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsData = pm.response.json();",
											"if(pm.response.code == 200){",
											"    let testcase = pm.environment.get(\"C-testcase\");",
											"    let report_product = null;",
											"    try {",
											"        report_product = jsData.data;",
											"    } catch {",
											"        console.log(\"Can't get report cash_flow data\");",
											"    }",
											"",
											"    let old_report_product;",
											"    switch(testcase){",
											"        case 2:",
											"            pm.test(\"Got report_product\", function () {",
											"                pm.expect(report_product != null).to.be.true;",
											"            });",
											"            pm.environment.set(\"C-report_product\",report_product);",
											"            // console.log(\"report_product: \", report_product);",
											"",
											"            postman.setNextRequest(\"get_expense_chart\"); // get_expense_chart",
											"            break;",
											"        case 4:",
											"            let old_report_product = pm.environment.get(\"C-report_product\");",
											"            report_product = jsData.data;",
											"",
											"            pm.test(\"Nothing happen!!!\", function () {",
											"                pm.expect(JSON.stringify(old_report_product) == JSON.stringify(report_product)).to.be.true;",
											"            });",
											"",
											"            postman.setNextRequest(\"get_expense_chart\"); // get_expense_chart",
											"            break;",
											"        default:",
											"            console.log(\"Missing flow, end test\");",
											"            postman.setNextRequest(null);",
											"            break;",
											"    }",
											"} else {",
											"    console.log(\"Can't get report product, end test\",jsData);",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "authorization",
										"value": "Bearer {{C-userToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{C-payload}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{finone_url}}/fo-order/api/v1/report/top-selling-product",
									"host": [
										"{{finone_url}}"
									],
									"path": [
										"fo-order",
										"api",
										"v1",
										"report",
										"top-selling-product"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "expenses",
					"item": [
						{
							"name": "get_expense_chart",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let testcase = pm.environment.get(\"C-testcase\");",
											"console.log(\"Testcase: \" + testcase);",
											"",
											"let configs = pm.environment.get(\"C-configs\");",
											"let payload = {",
											"    \"business_id\": parseInt(pm.environment.get(\"C-business_id\")),",
											"    \"period\": configs.period,",
											"    \"report_type\": \"expense\"",
											"}",
											"",
											"console.log(\"payload: \",payload);",
											"pm.environment.set(\"C-payload\",JSON.stringify(payload));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// ============================= getFirstDayOfMonth",
											"function getFirstDayOfMonth(date_timestamp){",
											"  let setDate = new Date(date_timestamp*1000);",
											"  let getDate = new Date(setDate.getFullYear(), setDate.getMonth(), 1);",
											"  return getDate.toISOString();",
											"}",
											"",
											"// ============================= getLastDayOfMonth",
											"function getLastDayOfMonth(date_timestamp){",
											"  let setDate = new Date(date_timestamp*1000);",
											"  let firstDayOfNextMonth = new Date(setDate.getFullYear(), setDate.getMonth() + 1, 1);",
											"  let lastDayOfMonth = new Date(firstDayOfNextMonth - 1);",
											"  return lastDayOfMonth.toISOString();",
											"}",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsData = pm.response.json();",
											"if(pm.response.code == 200){",
											"    let testcase = pm.environment.get(\"C-testcase\");",
											"",
											"    let loss_period = null;",
											"    try {",
											"        loss_period = jsData.data;",
											"        /**",
											"         * period: week, month, year",
											"         * sum_card_data",
											"         * dates_data",
											"         */",
											"    } catch {",
											"        console.log(\"Can't get expense chart data\");",
											"    }",
											"",
											"    let invoice_obj, invoice_date;",
											"    switch(testcase){",
											"        case 2:",
											"            pm.test(\"Got loss_period \", function () {",
											"                pm.environment.set(\"C-loss_period\",loss_period);",
											"                pm.expect(loss_period != null).to.be.true;",
											"            });",
											"            pm.environment.set(\"C-loss_period\",loss_period);",
											"            console.log(\"loss_period: \", loss_period);",
											"",
											"            postman.setNextRequest(\"get_expense_report\"); // get_expense_report",
											"            break;",
											"        case 4:",
											"            tnx_obj = pm.environment.get(\"C-tnx_obj\");",
											"            tnx_date = tnx_obj.value_at;",
											"            console.log(\"tnx_date: \" + tnx_date);",
											"            // do thời gian lọc là tháng hiện tại => chỉ thay đổi khi value_at nằm trong tháng hiện tại",
											"",
											"            let old_loss_period = pm.environment.get(\"C-loss_period\");",
											"            loss_period = jsData.data;",
											"",
											"            let today = new Date();",
											"            let today_tmp = Math.floor(today.getTime()/1000);",
											"            let firstDayOfThisMonth = getFirstDayOfMonth(today_tmp);",
											"            let lastDayOfThisMonth = getLastDayOfMonth(today_tmp);",
											"            if(tnx_date < firstDayOfThisMonth || tnx_date > lastDayOfThisMonth){",
											"                // nothing happen",
											"                pm.test(\"Nothing happen!!!\", function () {",
											"                    pm.expect(JSON.stringify(loss_period) == JSON.stringify(old_loss_period)).to.be.true;",
											"                });",
											"            } else {",
											"                tnx_date = tnx_date.substring(0,10);",
											"",
											"                let exp_change = tnx_obj.amount;",
											"                if(tnx_obj.txn_type == \"out\"){",
											"                    // có thay đổi => total_income increase",
											"                    pm.test(\"total_expense increase \" + exp_change, function () {",
											"                        pm.expect(loss_period.sum_card_data.total_expense == old_loss_period.sum_card_data.total_expense + exp_change).to.be.true;",
											"                    });",
											"",
											"                    // // total_profit",
											"                    // pm.test(\"total_profit decrease \" + exp_change, function () {",
											"                    //     pm.expect(loss_period.sum_card_data.total_profit == old_loss_period.sum_card_data.total_profit - exp_change).to.be.true;",
											"                    // });",
											"",
											"                    // thay đổi ngày tương ứng",
											"                    let old_date = null, act_date = null;",
											"                    for(let i in loss_period.dates_data){",
											"                        let day_i = loss_period.dates_data[i].date.substring(0,10);",
											"                        if(day_i == tnx_date){",
											"                            act_date = loss_period.dates_data[i];",
											"                            break;",
											"                        }",
											"                    }",
											"",
											"                    for(let i in old_loss_period.dates_data){",
											"                        let day_i = old_loss_period.dates_data[i].date.substring(0,10);",
											"                        if(day_i == tnx_date){",
											"                            old_date = old_loss_period.dates_data[i];",
											"                            break;",
											"                        }",
											"                    }",
											"",
											"                    if(old_date != null && act_date != null){",
											"                        console.log(\"act_date: \",act_date);",
											"                        console.log(\"old_date: \",old_date);",
											"                        // expense",
											"                        pm.test(\"expense at \" + tnx_date + \" increase \" + exp_change, function () {",
											"                            pm.expect(act_date.expense == old_date.expense + exp_change).to.be.true;",
											"                        });",
											"",
											"                        // // profit",
											"                        // pm.test(\"profit at \" + tnx_date + \" decrease \" + exp_change, function () {",
											"                        //     pm.expect(act_date.profit == old_date.profit - exp_change).to.be.true;",
											"                        // });",
											"                    }",
											"                } else {",
											"                    pm.test(\"Nothing happen!!\", function () {",
											"                        pm.expect(JSON.stringify(loss_period) == JSON.stringify(old_loss_period)).to.be.true;",
											"                    });",
											"                }",
											"            }",
											"",
											"            postman.setNextRequest(\"get_expense_report\"); // get_expense_report",
											"            break;",
											"        default:",
											"            console.log(\"Missing flow, end test\");",
											"            postman.setNextRequest(null);",
											"            break;",
											"    }",
											"} else {",
											"    console.log(\"Can't get report P&L period, end test\",jsData);",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-location-timezone",
										"value": "Asia/Saigon"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{C-userToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{C-payload}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{finone_url}}/fo-ledger/api/v1/report/profit-loss-period",
									"host": [
										"{{finone_url}}"
									],
									"path": [
										"fo-ledger",
										"api",
										"v1",
										"report",
										"profit-loss-period"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_expense_report",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let testcase = pm.environment.get(\"C-testcase\");",
											"console.log(\"Testcase: \" + testcase);",
											"",
											"let payload = {",
											"    // \"branch_id\": pm.environment.get(\"C-branch_id\"),",
											"    \"business_id\": parseInt(pm.environment.get(\"C-business_id\")),",
											"    \"report_type\": \"expense\",",
											"    \"period\": \"month\"",
											"    // \"current_period_start\": current_period_start,",
											"    // \"current_period_end\": current_period_end",
											"}",
											"",
											"console.log(\"payload: \",payload);",
											"pm.environment.set(\"C-payload\",JSON.stringify(payload));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// ============================= sort by key",
											"function sortByKey(array, key, type) {",
											"    if(type == \"asc\"){",
											"        return array.sort(function(a, b) {",
											"            var x = a[key]; var y = b[key];",
											"            return ((x > y) ? -1 : ((x < y) ? 1 : 0));",
											"        });",
											"    } else {",
											"        return array.sort(function(a, b) {",
											"            var x = a[key]; var y = b[key];",
											"            return ((x < y) ? -1 : ((x > y) ? 1 : 0));",
											"        });",
											"    }",
											"}",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsData = pm.response.json();",
											"if(pm.response.code == 200){",
											"    let testcase = pm.environment.get(\"C-testcase\");",
											"    let report_expense = null;",
											"    try {",
											"        report_expense = jsData.data;",
											"    } catch {",
											"        console.log(\"Can't get report cash_flow data\");",
											"    }",
											"",
											"    let old_report_expense = pm.environment.get(\"C-report_expense\");",
											"    switch(testcase){",
											"        case 2:",
											"            pm.test(\"Got report_expense\", function () {",
											"                pm.expect(report_expense != null).to.be.true;",
											"            });",
											"            pm.environment.set(\"C-report_expense\",report_expense);",
											"            console.log(\"report_expense: \",report_expense);",
											"",
											"            postman.setNextRequest(\"get_list_transaction\"); // get_list_transaction",
											"            break;",
											"        case 4:",
											"            console.log(\"old_report_expense: \",old_report_expense);",
											"            console.log(\"===================\");",
											"            console.log(\"report_expense: \",report_expense);",
											"",
											"            let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
											"            old_report_expense = pm.environment.get(\"C-report_expense\");",
											"",
											"            if(tnx_obj.txn_type == \"out\"){",
											"                let new_cat = null, old_cat = null;",
											"                for(let i in old_report_expense){",
											"                    if(old_report_expense[i].coa_id == tnx_obj.category_id){",
											"                        old_cat = old_report_expense[i];",
											"                        break;",
											"                    }",
											"                }",
											"",
											"                for(let i in report_expense){",
											"                    if(report_expense[i].coa_id == tnx_obj.category_id){",
											"                        new_cat = report_expense[i];",
											"                        break;",
											"                    }",
											"                }",
											"",
											"                console.log(\"old_cat: \",old_cat);",
											"                console.log(\"new_cat: \",new_cat);",
											"                if(old_cat != null && new_cat != null){",
											"                    // balance = debit - credit",
											"                    pm.test(\"balance of \" + old_cat.coa_name + \" increase \" + tnx_obj.amount, function () {",
											"                        pm.expect(new_cat.total_amount == old_cat.total_amount + tnx_obj.amount).to.be.true;",
											"                    });",
											"                } else {",
											"                    // CHỔ NÀY KHẢ NĂNG SẼ LỖI NẾU CATEGORY NHẢY VÀO TOP HOẶC BỊ OUT KHỎI TOP VÌ ACTION",
											"                    pm.test(\"Nothing happen!!\", function () {",
											"                        pm.expect(JSON.stringify(report_expense) == JSON.stringify(old_report_expense)).to.be.true;",
											"                    });",
											"                }",
											"            } else {",
											"                pm.test(\"Nothing happen!!\", function () {",
											"                    pm.expect(JSON.stringify(report_expense) == JSON.stringify(old_report_expense)).to.be.true;",
											"                });",
											"            }",
											"         ",
											"            console.log(\"-------- End Testsuite 51 --------\");",
											"            postman.setNextRequest(null);",
											"            break;",
											"        default:",
											"            console.log(\"Missing flow, end test\");",
											"            postman.setNextRequest(null);",
											"            break;",
											"    }",
											"} else {",
											"    console.log(\"Can't get report cash_flow, end test\",jsData);",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{C-userToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{C-payload}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{finone_url}}/fo-ledger/api/v1/report/summary-by-category",
									"host": [
										"{{finone_url}}"
									],
									"path": [
										"fo-ledger",
										"api",
										"v1",
										"report",
										"summary-by-category"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "recent_transactions",
					"item": [],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"/**",
									" * chỉ cần check UI vì ở đây là API trả",
									" *  - list transaction",
									" *  - list invoice (!= fully_paid)",
									" *  - list bill (!= fully_paid)",
									" */"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"// lấy full tháng hiện tại",
							"let today = new Date();",
							"let start_current_month = new Date(today.getFullYear(), today.getMonth(), 1);",
							"let end_current_month = new Date(today.getFullYear(), today.getMonth() + 1, 1);",
							"",
							"// lấy full tháng trước",
							"let start_last_month = new Date(today.getFullYear(), today.getMonth() - 1, 1);",
							"let end_last_month = new Date(today.getFullYear(), today.getMonth(), 1);",
							"",
							"// lấy full ngày hiện tại",
							"// let firstDay = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0 ,0, 0);",
							"// let lastDay = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 23, 59 ,59, 0);",
							"",
							"// lấy n ngày đến hiện tại",
							"// let firstDayTimestamp = Math.floor(firstDay.getTime()/1000) - 2*24*60*60;",
							"// let start_day_ago = new Date(firstDayTimestamp*1000);",
							"",
							"let current_period_start = start_current_month.toISOString();",
							"let current_period_end = end_current_month.toISOString();",
							"let previous_period_start = start_last_month.toISOString();",
							"let previous_period_end = end_last_month.toISOString();",
							"",
							"pm.environment.set(\"C-current_period_start\",current_period_start);",
							"pm.environment.set(\"C-current_period_end\",current_period_end);",
							"pm.environment.set(\"C-previous_period_start\",previous_period_start);",
							"pm.environment.set(\"C-previous_period_end\",previous_period_end);"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"let configs = {",
					"    \"is_use_email\":true,",
					"    \"limit_page\":5,",
					"    \"timeout\":12000, // miliseconds => timeout to call API",
					"    \"is_buyer_gen\":false,",
					"    \"period\":\"month\",",
					"    \"final_hook_is_failed\":false,",
					"    \"is_check_report\":false,",
					"    \"test_payment_method\":\"va_galaxy\" // bank_transfer, viet_qr_pro_mb, va_galaxy, \"bidv\"",
					"}",
					"",
					"pm.environment.set(\"C-configs\",configs);",
					"// console.log(\"configs: \",configs);"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"// ====================================== parser cURL",
					"function parseCURL(request_api){",
					"    let curl = \"\";",
					"    switch(request_api.method){",
					"        case \"PUT\":",
					"            curl = \"curl --location --request PUT \";",
					"            break;",
					"        case \"PATCH\":",
					"            curl = \"curl --location --request PATCH \";",
					"            break;",
					"        case \"DELETE\":",
					"            curl = \"curl --location --request DELETE \";",
					"            break;",
					"        default:",
					"            curl = \"curl --location \";",
					"            break;",
					"    }",
					"    curl += \"'\" + request_api.url.protocol + \"://\"",
					"    // host",
					"    for(let i in request_api.url.host){",
					"        if(i >= request_api.url.host.length - 1){",
					"            curl += request_api.url.host[i] + \"/\";",
					"        } else {",
					"            curl += request_api.url.host[i] + \".\";",
					"        }",
					"    }",
					"    // path",
					"    for(let i in request_api.url.path){",
					"        if(i >= request_api.url.path.length - 1){",
					"            curl += request_api.url.path[i];",
					"        } else {",
					"            curl += request_api.url.path[i] + \"/\";",
					"        }",
					"    }",
					"    // query (if have)",
					"    if(\"query\" in request_api.url){",
					"        if(request_api.url.length > 0){",
					"            curl += \"? \";",
					"            for(let i in request_api.url.query){",
					"                if(i >= request_api.url.query.length - 1){",
					"                    curl += request_api.url.query[i].key + \"=\" + request_api.url.query[i].value + \"' \";",
					"                } else {",
					"                    curl += request_api.url.query[i].key + \"=\" + request_api.url.query[i].value + \"&\";",
					"                }",
					"            }",
					"        } else {",
					"            curl += \"' \";",
					"        }",
					"    } else {",
					"        curl += \"' \";",
					"    }",
					"    // header",
					"    for(let i in request_api.header){",
					"        if(i >= request_api.header.length - 1){",
					"            curl += \"--header '\" + request_api.header[i].key + \": \" + request_api.header[i].value + \"'\";",
					"        } else {",
					"            curl += \"--header '\" + request_api.header[i].key + \": \" + request_api.header[i].value + \"' \";",
					"        }",
					"    }",
					"    switch(request_api.method){",
					"        case \"POST\":",
					"            curl += \" --data '\" + request_api.body.raw + \"'\"",
					"            break;",
					"        case \"PUT\": case \"PATCH\":",
					"            curl += \" --data-raw '\" + request_api.body.raw + \"'\"",
					"            break;",
					"        default:",
					"            break;",
					"    }",
					"    console.log(curl);",
					"    return curl;",
					"}",
					"const request_api = pm.request.toJSON();",
					"parseCURL(request_api);"
				]
			}
		}
	]
}