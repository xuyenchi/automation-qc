{
	"info": {
		"_postman_id": "7612859a-11e6-4b21-a26b-2a4e6cbfd54b",
		"name": "fo_80_verify_to_create_POS_product",
		"description": "### Testsuite: create POS product\n\n###### Testcase:\n\n1. Login with owner account\n    \n2. Get data:\n    \n    1. brand / get list brand => get data only\n        \n    2. category / get list category => get data only\n        \n    3. placement / get list placement => get data only\n        \n    4. tag / get list tag => get data only\n        \n    5. tax / get list tax => get data only\n        \n    6. Inventory / Get list inventory (sku in stock) => get data\n        \n    7. Inventory / Get inventory overview => get data\n        \n    8. \\[NY\\] Batch / Get list batch => get data\n        \n    9. \\[NY\\] Batch / Get batch overview => get data\n        \n    10. \\[Pending\\] Báo cáo UI / Kho hàng - Tổng quan / Get stock overview\n        \n    11. \\[Pending\\] Báo cáo UI / Kho hàng - Tổng quan / Get stock list records\n        \n    12. \\[Pending\\] Sổ kho / Get po detail list\n        \n    13. \\[Pending\\] Sổ kho / Get po summary\n        \n    14. \\[Pending\\] Sổ nhập hàng / Get list import po (type = in)\n        \n    15. \\[Pending\\] Sổ xuất hàng / Get list import po (type = out)\n        \n    16. product / Get list product => get total products\n        \n3. Create new basic product (non_variant)\n    \n4. Check data:\n    \n    1. Product UI / Get all products => increase 1\n        \n    2. Product UI / Get product detail => data correctly\n        \n    3. Inventory / Get list inventory (sku in stock) => increase 1 sku(s)\n        \n    4. Inventory / Get inventory overview => data correctly\n        \n    5. \\[NY\\] Batch / Get list batch => phụ thuộc product_type\n        \n    6. \\[NY\\] Batch / Get batch overview => phụ thuộc product_type\n        \n    7. \\[Pending\\] Warehouse UI / Product / Get sku history => had new record (khởi tạo)\n        \n    8. Inventory / Get sku stock summary => updated\n        \n    9. \\[Pending\\] Sổ kho / Get po detail list => had new 1 record\n        \n    10. \\[Pending\\] Sổ kho / Get po summary => updated\n        \n    11. \\[Pending\\] Sổ nhập hàng / Get list import po (type = in) => nothing happen (khởi tạo ko ghi vào sổ nhập)\n        \n5. Create new variant product\n    \n6. Check data:\n    \n    1. Product UI / Get all products => increase respective\n        \n    2. Product UI / Get product detail => data correctly\n        \n    3. Inventory / Get list inventory (sku in stock) => increase n sku(s)\n        \n    4. Inventory / Get inventory overview => data correctly\n        \n    5. \\[NY\\] Batch / Get list batch => phụ thuộc product_type\n        \n    6. \\[NY\\] Batch / Get batch overview => phụ thuộc product_type\n        \n    7. \\[Pending\\] Warehouse UI / Product / Get all sku in stock => increase respective sku\n        \n    8. \\[Pending\\] Warehouse UI / Product / Get sku(s) history => had new record (khởi tạo)\n        \n    9. \\[Pending\\] Warehouse UI / Product / Get sku stock summary => updated\n        \n    10. \\[Pending\\] Sổ kho / Get po detail list => had new respective record (the same sku)\n        \n    11. \\[Pending\\] Sổ kho / Get po summary => updated\n        \n    12. \\[Pending\\] Sổ nhập hàng / Get list import po (type = in) => nothing happen (khởi tạo ko ghi vào sổ nhập)\n        \n\n###### Note:\n\n- Hiện tại chưa handle tax khi create product, sẽ update sau\n    \n- Need handle batch default when create product\n    \n- Need break to 3 flows\n    \n    - physical product\n        \n    - batch_product: có lô, không thể nhập tồn kho ban đầu\n        \n    - imeil_product: không có uom,",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "282640"
	},
	"item": [
		{
			"name": "authen",
			"item": [
				{
					"name": "login",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// ============================= random characters",
									"function randomChars(length) {",
									"    var result           = '';",
									"    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
									"    var charactersLength = characters.length;",
									"    for ( var i = 0; i < length; i++ ) {",
									"        result += characters.charAt(Math.floor(Math.random() * charactersLength));",
									"    }",
									"   return result;",
									"}",
									"",
									"let testcase = 1;",
									"console.log(\"-------- Start Testsuite 80 --------\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let platform = [\"desktop-web\",\"mobile-web\",\"mobile-app\"];",
									"let configs = pm.environment.get(\"C-configs\");",
									"let payload;",
									"if(configs.is_use_email){",
									"    payload = {",
									"        \"app_version\": \"1.0.0\",",
									"        \"device_info\": {",
									"            \"id\": randomChars(7) + \"-\" + randomChars(4) + \"-\" + randomChars(4) + \"-\" + randomChars(4) + \"-\" + randomChars(12),",
									"            \"name\": \"IP name\",",
									"            \"os\": \"iphone\"",
									"        },",
									"        \"email\": pm.environment.get(\"SER-email\"), // pm.environment.get(\"SER-email\")",
									"        \"encrypted_password\": pm.environment.get(\"SER-password\"),",
									"        \"phone_number\": \"\",",
									"        \"platform_key\": platform[0]",
									"    }",
									"} else {",
									"    payload = {",
									"        \"app_version\": \"1.0.0\",",
									"        \"device_info\": {",
									"            \"id\": randomChars(7) + \"-\" + randomChars(4) + \"-\" + randomChars(4) + \"-\" + randomChars(4) + \"-\" + randomChars(12),",
									"            \"name\": \"IP name\",",
									"            \"os\": \"iphone\"",
									"        },",
									"        \"email\":\"\", // pm.environment.get(\"SER-email\")",
									"        \"encrypted_password\": pm.environment.get(\"SER-password\"),",
									"        \"phone_number\": pm.environment.get(\"SER-phone_number\"),",
									"        \"platform_key\": platform[0]",
									"    }",
									"}",
									"",
									"console.log(\"payload: \",payload);",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));",
									"pm.environment.set(\"C-testcase\",testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    pm.test(\"System code is 102000\", function () {",
									"        pm.expect(jsData.code).to.eql(102000);",
									"    });",
									"",
									"    if(jsData.code == 102000){",
									"        let userToken = null;",
									"        try {",
									"            userToken = jsData.data.access_token;",
									"            pm.environment.set(\"C-userToken\",userToken);",
									"        } catch {",
									"            console.log(\"Can't get userToken\");",
									"        }",
									"",
									"        pm.test(\"Got userToken\", function () {",
									"            pm.expect(userToken != null).to.be.true;",
									"        });",
									"",
									"        let userInfo = jsData.data.user_info;",
									"",
									"        // show log",
									"        console.log(\"userInfo:\",JSON.stringify(userInfo));",
									"        pm.environment.set(\"C-userInfo\",userInfo);",
									"",
									"        postman.setNextRequest(\"verify_token_to_get_business\");",
									"    } else {",
									"        console.log(\"Can't get Token, end test\",jsData);",
									"        postman.setNextRequest(null);",
									"    }",
									"} else {",
									"    console.log(\"Can't login new account, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "x-locale",
								"value": "<string>",
								"description": "locale",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-user/api/v1/auth/login",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-user",
								"api",
								"v1",
								"auth",
								"login"
							]
						},
						"description": "Login User"
					},
					"response": []
				},
				{
					"name": "verify_token_to_get_business",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// verify token to get business",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = JSON.parse(responseBody);",
									"if(pm.response.code == 200 && jsData.code == 102000){",
									"    const jsData = pm.response.json();",
									"    pm.environment.set(\"C-user_id\",jsData.data.user_id);",
									"",
									"    let business_id = jsData.data.headers[\"x-business-id\"];",
									"    console.log(\"business_id: \" + business_id);",
									"    pm.environment.set(\"C-business_id\",business_id);",
									"",
									"    postman.setNextRequest(\"get_current_business\");",
									"} else {",
									"    console.log(\"Can't check token to get business_id, end test\");",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"token\": \"{{C-userToken}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-user/api/v1/auth/verify-token",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-user",
								"api",
								"v1",
								"auth",
								"verify-token"
							]
						},
						"description": "Login User"
					},
					"response": []
				},
				{
					"name": "get_current_business",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    // console.log(\"Current business info: \", jsData.data);",
									"    let configs = pm.environment.get(\"C-configs\");",
									"    let branch_id = null, list_branch = null;",
									"    try {",
									"        for(let i in jsData.data.current_business.list_branch){",
									"            if(jsData.data.current_business.list_branch[i].is_default == configs.is_default_branch){",
									"                branch_id = jsData.data.current_business.list_branch[i].id; // tạm thời handle fix branch, sau này thay đổi tuỳ theo yêu cầu",
									"                pm.environment.set(\"C-branch_id\",branch_id);",
									"                break;",
									"            }",
									"        }",
									"        list_branch = jsData.data.current_business.list_branch;",
									"    } catch {",
									"        console.log(\"Can't get branch id\");",
									"    }",
									"",
									"    pm.test(\"Got all branch \" + list_branch.length, function () {",
									"        pm.expect(list_branch != null).to.be.true;",
									"    });",
									"    pm.environment.set(\"C-list_branch\",list_branch);",
									"",
									"    pm.test(\"Got branch id \" + branch_id, function () {",
									"        pm.expect(branch_id != null).to.be.true;",
									"    });",
									"",
									"    let payment_method_list = [];",
									"    for(let i in jsData.data.list_payment_method){",
									"        if(jsData.data.list_payment_method[i].is_active){",
									"            payment_method_list[payment_method_list.length] = jsData.data.list_payment_method[i];",
									"        }",
									"    }",
									"",
									"    pm.test(\"Got payment_method_list \" + payment_method_list.length, function () {",
									"        pm.expect(payment_method_list.length > 0).to.be.true;",
									"    });",
									"    pm.environment.set(\"C-payment_method_list\",payment_method_list);",
									"    ",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    testcase++;",
									"    pm.environment.set(\"C-testcase\",testcase);",
									"    postman.setNextRequest(\"get_list_brand\"); // get_list_brand",
									"} else {",
									"    console.log(\"Can't get business detail, end test\", jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-business/api/v1/business/get-current",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-business",
								"api",
								"v1",
								"business",
								"get-current"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "brand",
			"item": [
				{
					"name": "get_list_brand",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"// let page = pm.environment.get(\"C-page\");",
									"",
									"// if(!page){",
									"//     page = 1;",
									"//     pm.environment.set(\"C-page\",page);",
									"",
									"//     let page_size = 50;",
									"//     pm.environment.set(\"C-page_size\",page_size);",
									"// }"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ============================= random number between min and max",
									"function getRandomInt(min, max) {",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = pm.response.json();",
									"if(pm.response.code == 200 && jsData.code == 102000){",
									"    // let testcase = pm.environment.get(\"C-testcase\");",
									"    let list_brand = jsData.data;",
									"",
									"    let brand_obj = list_brand[getRandomInt(0,list_brand.length - 1)];",
									"    console.log(\"Create product in brand: \",brand_obj);",
									"    pm.environment.set(\"C-brand_obj\",brand_obj);",
									"",
									"    postman.setNextRequest(\"get_list_category\"); // get_list_category",
									"} else {",
									"    console.log(\"Can't get list brand, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-business/api/v1/brand/get-list?page=1&page_size=50&search=&sort=",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-business",
								"api",
								"v1",
								"brand",
								"get-list"
							],
							"query": [
								{
									"key": "business_id",
									"value": "{{C-business_id}}",
									"disabled": true
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "page_size",
									"value": "50"
								},
								{
									"key": "search",
									"value": ""
								},
								{
									"key": "sort",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "category",
			"item": [
				{
					"name": "get_list_category",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let page = pm.environment.get(\"C-page\");",
									"",
									"if(!page){",
									"    page = 1;",
									"    pm.environment.set(\"C-page\",page);",
									"",
									"    let page_size = 50;",
									"    pm.environment.set(\"C-page_size\",page_size);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ============================= random number between min and max",
									"function getRandomInt(min, max) {",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = pm.response.json();",
									"if(pm.response.code == 200 && jsData.code == 102000){",
									"    // let testcase = pm.environment.get(\"C-testcase\");",
									"    let total_pages = jsData.meta.total_pages;",
									"    let page = pm.environment.get(\"C-page\");",
									"",
									"    let list_category = pm.environment.get(\"C-list_category\");",
									"    if(!list_category){",
									"        list_category = [];",
									"    }",
									"",
									"    for(let i in jsData.data){",
									"        if(jsData.data[i].parent_id == \"00000000-0000-0000-0000-000000000000\"){",
									"        list_category[list_category.length] = {",
									"                \"category_id\":jsData.data[i].id,",
									"                \"list_cate\":[],",
									"                \"category_name\":jsData.data[i].category_name",
									"            }",
									"        }",
									"    }",
									"    for(let i in jsData.data){",
									"        for(let j in list_category){",
									"            if(jsData.data[i].parent_id == list_category[j].category_id){",
									"                list_category[j].list_cate[list_category[j].list_cate.length] = {",
									"                    \"category_id\":jsData.data[i].id,",
									"                    \"category_name\":jsData.data[i].category_name",
									"                }",
									"            }",
									"        }",
									"    }",
									"    pm.environment.set(\"C-list_category\",list_category);",
									"",
									"    if(page >= total_pages){",
									"        pm.environment.unset(\"C-page\");",
									"        console.log(\"list_category: \",list_category);",
									"",
									"        let exp_list_category = [];",
									"        for(let i in list_category){",
									"            if(list_category[i].list_cate.length > 0){",
									"                for(let j in list_category[i].list_cate){",
									"                    exp_list_category[exp_list_category.length] = {",
									"                        \"category_id\":list_category[i].list_cate[j].category_id,",
									"                        \"category_name\":list_category[i].list_cate[j].category_name,",
									"                        \"is_root\": false",
									"                    }",
									"                }",
									"            } else {",
									"                exp_list_category[exp_list_category.length] = {",
									"                    \"category_id\":list_category[i].category_id,",
									"                    \"category_name\":list_category[i].category_name,",
									"                    \"is_root\": true",
									"                }",
									"            }",
									"        }",
									"",
									"        let category_obj = exp_list_category[getRandomInt(0,exp_list_category.length - 1)];",
									"        console.log(\"Create product in category: \",category_obj);",
									"        pm.environment.set(\"C-category_obj\",category_obj);",
									"",
									"        postman.setNextRequest(\"get_list_placement\"); // get_list_placement",
									"    } else {",
									"        page++;",
									"        pm.environment.set(\"C-page\",page);",
									"",
									"        console.log(\"view next page (\" + page + \") to get more category\");",
									"        postman.setNextRequest(\"get_list_category\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get list category, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-business/api/v1/category/get-list?page={{C-page}}&page_size={{C-page_size}}&search=&sort=",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-business",
								"api",
								"v1",
								"category",
								"get-list"
							],
							"query": [
								{
									"key": "business_id",
									"value": "{{C-business_id}}",
									"disabled": true
								},
								{
									"key": "page",
									"value": "{{C-page}}"
								},
								{
									"key": "page_size",
									"value": "{{C-page_size}}"
								},
								{
									"key": "search",
									"value": ""
								},
								{
									"key": "sort",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "placement",
			"item": [
				{
					"name": "get_list_placement",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"// let page = pm.environment.get(\"C-page\");",
									"",
									"// if(!page){",
									"//     page = 1;",
									"//     pm.environment.set(\"C-page\",page);",
									"",
									"//     let page_size = 50;",
									"//     pm.environment.set(\"C-page_size\",page_size);",
									"// }"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ============================= random number between min and max",
									"function getRandomInt(min, max) {",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"",
									"/**",
									" *  =============================  func randNotDupe(min, max, total)",
									" * total: số lượng random, ko dc nhỏ hơn max-min+1",
									" * return: array",
									" */",
									"function randNotDupe(min, max, total){",
									"  let arrNum = []; // new empty array",
									"  let n, p;",
									"  for (let i = 0; i < total; i++) {",
									"    do {",
									"      n = Math.floor(Math.random() * (max - min + 1)) + min;",
									"      p = arrNum.includes(n);",
									"      if(!p){",
									"        arrNum.push(n);",
									"      }",
									"    }",
									"    while(p);",
									"  }",
									"  return arrNum;",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = pm.response.json();",
									"if(pm.response.code == 200 && jsData.code == 102000){",
									"    // let testcase = pm.environment.get(\"C-testcase\");",
									"    let list_placement = jsData.data;",
									"",
									"    let total_placements = getRandomInt(1,list_placement.length - 1);",
									"    let list_rand = randNotDupe(0,list_placement.length - 1,total_placements)",
									"    let placement_array_obj = [];",
									"    for(let i in list_rand){",
									"        placement_array_obj[placement_array_obj.length] = list_placement[list_rand[i]];",
									"    }",
									"    ",
									"    console.log(\"Create product with placement(s): \",placement_array_obj);",
									"    pm.environment.set(\"C-placement_array_obj\",placement_array_obj);",
									"",
									"    postman.setNextRequest(\"get_list_tag\"); // get_list_tag",
									"} else {",
									"    console.log(\"Can't get list placement, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-business/api/v1/placement/get-list?page=1&page_size=50",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-business",
								"api",
								"v1",
								"placement",
								"get-list"
							],
							"query": [
								{
									"key": "business_id",
									"value": "{{C-business_id}}",
									"disabled": true
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "page_size",
									"value": "50"
								},
								{
									"key": "search",
									"value": "",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "tag",
			"item": [
				{
					"name": "get_list_tag",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"// let page = pm.environment.get(\"C-page\");",
									"",
									"// if(!page){",
									"//     page = 1;",
									"//     pm.environment.set(\"C-page\",page);",
									"",
									"//     let page_size = 50;",
									"//     pm.environment.set(\"C-page_size\",page_size);",
									"// }"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ============================= random number between min and max",
									"function getRandomInt(min, max) {",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"",
									"/**",
									" *  =============================  func randNotDupe(min, max, total)",
									" * total: số lượng random, ko dc nhỏ hơn max-min+1",
									" * return: array",
									" */",
									"function randNotDupe(min, max, total){",
									"  let arrNum = []; // new empty array",
									"  let n, p;",
									"  for (let i = 0; i < total; i++) {",
									"    do {",
									"      n = Math.floor(Math.random() * (max - min + 1)) + min;",
									"      p = arrNum.includes(n);",
									"      if(!p){",
									"        arrNum.push(n);",
									"      }",
									"    }",
									"    while(p);",
									"  }",
									"  return arrNum;",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = pm.response.json();",
									"if(pm.response.code == 200 && jsData.code == 102000){",
									"    // let testcase = pm.environment.get(\"C-testcase\");",
									"    let list_tag = jsData.data;",
									"",
									"    let total_tags = getRandomInt(1,list_tag.length - 1);",
									"    let list_rand = randNotDupe(0,list_tag.length - 1,total_tags)",
									"    let tag_array_obj = [];",
									"    for(let i in list_rand){",
									"        tag_array_obj[tag_array_obj.length] = list_tag[list_rand[i]];",
									"    }",
									"    ",
									"    console.log(\"Create product with tag(s): \",tag_array_obj);",
									"    pm.environment.set(\"C-tag_array_obj\",tag_array_obj);",
									"",
									"    postman.setNextRequest(\"get_list_tax\"); // get_list_tax",
									"} else {",
									"    console.log(\"Can't get list tag, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-business/api/v1/tag/get-list?page=1&page_size=50&search=&sort=",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-business",
								"api",
								"v1",
								"tag",
								"get-list"
							],
							"query": [
								{
									"key": "business_id",
									"value": "{{C-business_id}}",
									"disabled": true
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "page_size",
									"value": "50"
								},
								{
									"key": "search",
									"value": ""
								},
								{
									"key": "sort",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "tax",
			"item": [
				{
					"name": "get_list_tax",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = JSON.parse(responseBody);",
									"if(pm.response.code == 200 && jsData.code == 102000){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let total_pages = jsData.meta.total_pages;",
									"    let page = pm.environment.get(\"C-page\");",
									"",
									"    let list_tax = pm.environment.get(\"C-list_tax\");",
									"    if(!list_tax){",
									"        list_tax = [];",
									"    }",
									"",
									"    for(let item in jsData.data){",
									"        if(jsData.data[item].description.includes(\"[API]\")){",
									"            list_tax[list_tax.length] = {",
									"                \"tax_id\":jsData.data[item].id,",
									"                \"name\":jsData.data[item].name,",
									"                \"rate\":jsData.data[item].rate,",
									"                \"account_id\":jsData.data[item].account_id,",
									"                \"description\":jsData.data[item].description",
									"            }",
									"        }",
									"    }",
									"    pm.environment.set(\"C-list_tax\",list_tax);",
									"    console.log(\"debug: \", list_tax);",
									"",
									"    if(page >= total_pages){",
									"        // must clear page & page_size",
									"        pm.environment.unset(\"C-page\");",
									"        pm.environment.unset(\"C-page_size\");",
									"",
									"        pm.test(\"Got all tax! \" + list_tax.length, function () {",
									"            pm.expect(list_tax.length > 0).to.be.true;",
									"        });",
									"",
									"        postman.setNextRequest(\"get_list_inventory\"); // get_list_inventory",
									"    } else {",
									"        page++;",
									"        pm.environment.set(\"C-page\",page);",
									"",
									"        console.log(\"view next page (\" + page + \") to get more tax\");",
									"        postman.setNextRequest(\"get_list_tax\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get list tax, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let page = pm.environment.get(\"C-page\");",
									"",
									"if(!page){",
									"    page = 1;",
									"    pm.environment.set(\"C-page\",page);",
									"",
									"    let page_size = 50;",
									"    pm.environment.set(\"C-page_size\",page_size);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-business/api/v1/tax/get-list?business_id={{C-business_id}}&page={{C-page}}&page_size={{C-page_size}}&option=&status=",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-business",
								"api",
								"v1",
								"tax",
								"get-list"
							],
							"query": [
								{
									"key": "business_id",
									"value": "{{C-business_id}}"
								},
								{
									"key": "page",
									"value": "{{C-page}}"
								},
								{
									"key": "page_size",
									"value": "{{C-page_size}}"
								},
								{
									"key": "option",
									"value": ""
								},
								{
									"key": "status",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "product",
			"item": [
				{
					"name": "get_list_product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ============================= sort by key",
									"function sortByKey(array, key) {",
									"    return array.sort(function(a, b) {",
									"        var x = a[key]; var y = b[key];",
									"        return ((x < y) ? -1 : ((x > y) ? 1 : 0));",
									"    });",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = JSON.parse(responseBody);",
									"if(pm.response.code == 200 && jsData.code == 102000){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let configs = pm.environment.get(\"C-configs\");",
									"    let total_products = jsData.meta.total_rows;",
									"",
									"    switch(testcase){",
									"        case 2:",
									"            pm.test(\"Got total_products! \" + total_products, function () {",
									"                pm.expect(total_products > 0).to.be.true;",
									"            });",
									"            pm.environment.set(\"C-total_products\",total_products);",
									"",
									"            // testcase++;",
									"            testcase = 5;",
									"            pm.environment.set(\"C-testcase\",testcase);",
									"            postman.setNextRequest(\"create_product\"); // create_product",
									"            break;",
									"        case 4: case 6:",
									"            let old_total_products = pm.environment.get(\"C-total_products\");",
									"            let product_obj = pm.environment.get(\"C-product_obj\");",
									"",
									"            pm.test(\"Total product increase 1\", function () {",
									"                pm.expect(total_products == old_total_products + 1).to.be.true;",
									"            });",
									"",
									"            let isFound = false;",
									"            for(let k in jsData.data){",
									"                if(jsData.data[k].id == product_obj.product_id){",
									"                    isFound = true;",
									"                    // console.log(\"debug: \", jsData.data[k]);",
									"",
									"                    pm.test(\"product_name of product correctly! \" + product_obj.product_name, function () {",
									"                        pm.expect(product_obj.product_name == jsData.data[k].product_name).to.be.true;",
									"                    });",
									"",
									"                    // product_type tạm thời là physical, sau này sẽ handle thêm value: commbo, add-on",
									"                    // pm.test(\"product_type of product correctly! \" + product_obj.product_type, function () {",
									"                    //     pm.expect(product_obj.product_type == jsData.data[k].product_type).to.be.true;",
									"                    // });",
									"",
									"                    pm.test(\"short_desc of product correctly! \" + product_obj.short_desc, function () {",
									"                        pm.expect(product_obj.short_desc == jsData.data[k].short_desc).to.be.true;",
									"                    });",
									"",
									"                    // uom product => sẽ bỏ, chỉ uom theo sku",
									"                    // pm.test(\"uom of product correctly! \" + product_obj.uom, function () {",
									"                    //     pm.expect(product_obj.uom == jsData.data[k].uom).to.be.true;",
									"                    // });",
									"",
									"                    pm.test(\"apply_tax of product correctly! \" + product_obj.apply_tax, function () {",
									"                        pm.expect(product_obj.apply_tax == jsData.data[k].apply_tax).to.be.true;",
									"                    });",
									"",
									"                    // track_inventory => tầng sku",
									"                    // pm.test(\"track_inventory of product correctly! \" + product_obj.track_inventory, function () {",
									"                    //     pm.expect(product_obj.track_inventory == jsData.data[k].track_inventory).to.be.true;",
									"                    // });",
									"",
									"                    // apply_tax_category_sales => false (only book)",
									"                    pm.test(\"apply_tax_category_sales of product must be false!\", function () {",
									"                        pm.expect(jsData.data[k].apply_tax_category_sales).to.be.false;",
									"                    });",
									"",
									"                    // apply_tax_category_income => false (only book)",
									"                    pm.test(\"apply_tax_category_income of product must be false!\", function () {",
									"                        pm.expect(jsData.data[k].apply_tax_category_income).to.be.false;",
									"                    });",
									"",
									"                    // is_price_including_tax => false (only book)",
									"                    pm.test(\"is_price_including_tax of product must be false!\", function () {",
									"                        pm.expect(jsData.data[k].is_price_including_tax).to.be.false;",
									"                    });",
									"",
									"                    // category_id",
									"                    pm.test(\"category_id of product correctly! \" + product_obj.category_id, function () {",
									"                        pm.expect(product_obj.category_id == jsData.data[k].category_id).to.be.true;",
									"                    });",
									"",
									"                    // brand_id",
									"                    pm.test(\"brand_id of product correctly! \" + product_obj.brand_id, function () {",
									"                        pm.expect(product_obj.brand_id == jsData.data[k].brand_id).to.be.true;",
									"                    });",
									"",
									"                    // placement => tạm thời là object => sẽ update thành array object",
									"                    let placement_array_obj = pm.environment.get(\"C-placement_array_obj\");",
									"                    let expect_placement_list = [], actual_placement_list = [];",
									"                    for(let m in jsData.data[k].placements){",
									"                        actual_placement_list[actual_placement_list.length] = {",
									"                            \"placement_name\":jsData.data[k].placements[m].placement_name",
									"                        }",
									"                    }",
									"                    for(let n in product_obj.placements){",
									"                        for(let l in placement_array_obj){",
									"                            if(product_obj.placements[n] == placement_array_obj[l].id){",
									"                                expect_placement_list[expect_placement_list.length] = {",
									"                                    \"placement_name\":placement_array_obj[l].placement_name",
									"                                }",
									"                                break;",
									"                            }",
									"                        }",
									"                    }",
									"                    pm.test(\"placements of product correctly!\", function () {",
									"                        console.log(\"act placements: \", sortByKey(actual_placement_list,\"placement_name\"));",
									"                        console.log(\"exp placements: \", sortByKey(expect_placement_list,\"placement_name\"));",
									"                        pm.expect(JSON.stringify(actual_placement_list)).to.eql(JSON.stringify(expect_placement_list));",
									"                    });",
									"",
									"                    // tag",
									"                    let tag_array_obj = pm.environment.get(\"C-tag_array_obj\");",
									"                    let expect_tag_list = [], actual_tag_list = [];",
									"                    for(let m in jsData.data[k].tags){",
									"                        actual_tag_list[actual_tag_list.length] = {",
									"                            \"tag_name\":jsData.data[k].tags[m].tag_name",
									"                        }",
									"                    }",
									"                    for(let n in product_obj.tags){",
									"                        for(let l in tag_array_obj){",
									"                            if(product_obj.tags[n] == tag_array_obj[l].id){",
									"                                expect_tag_list[expect_tag_list.length] = {",
									"                                    \"tag_name\":tag_array_obj[l].tag_name",
									"                                }",
									"                                break;",
									"                            }",
									"                        }",
									"                    }",
									"                    pm.test(\"tags of product correctly!\", function () {",
									"                        console.log(\"act tags: \", sortByKey(actual_tag_list,\"tag_name\"));",
									"                        console.log(\"exp tags: \", sortByKey(expect_tag_list,\"tag_name\"));",
									"                        pm.expect(JSON.stringify(actual_tag_list)).to.eql(JSON.stringify(expect_tag_list));",
									"                    });",
									"",
									"                    // delivering_quantity => khi tạo sản phẩm thì sẽ là 0",
									"                    pm.test(\"delivering_quantity of sku \" + product_obj.product_name + \" is 0!\", function () {",
									"                        console.log(\"act: \" + jsData.data[k].delivering_quantity);",
									"                        pm.expect(0).to.eql(jsData.data[k].delivering_quantity);",
									"                    });",
									"",
									"                    /**",
									"                     * list_sku",
									"                     * - sku_name, sku_code => dùng để mapping, lưu lại id",
									"                     * - sale_price, cost_price, selling_price, can_pick_quantity",
									"                     * - is_hidden, is_in_business, priority",
									"                     * - weight, weight_unit",
									"                     * - list_attributes",
									"                     * - list_uoms",
									"                     */ ",
									"                    let total_sku = product_obj.list_sku.length;",
									"                    let minPrice_k = 9999999, maxPrice_k = 0;",
									"                    let count = 0;",
									"                    for(let i in jsData.data[k].list_sku){",
									"                        for(let j in product_obj.list_sku){",
									"                            if(jsData.data[k].list_sku[i].sku_code == product_obj.list_sku[j].sku_code && jsData.data[k].list_sku[i].sku_name == product_obj.list_sku[j].sku_name){",
									"                                count++;",
									"                                product_obj.list_sku[j].sku_id = jsData.data[k].list_sku[i].id;",
									"",
									"                                // allow_negative_inventory",
									"                                pm.test(\"--- allow_negative_inventory of sku \" + product_obj.list_sku[j].sku_name + \" is correct! \" + product_obj.list_sku[j].allow_negative_inventory, function () {",
									"                                    pm.expect(product_obj.list_sku[j].allow_negative_inventory).to.eql(jsData.data[k].list_sku[i].allow_negative_inventory);",
									"                                });",
									"",
									"                                // sale_price",
									"                                pm.test(\"--- sale_price of sku \" + product_obj.list_sku[j].sku_name + \" is correct! \" + product_obj.list_sku[j].sale_price, function () {",
									"                                    pm.expect(product_obj.list_sku[j].sale_price).to.eql(jsData.data[k].list_sku[i].sale_price);",
									"                                });",
									"",
									"                                if(minPrice_k > product_obj.list_sku[j].sale_price){",
									"                                    minPrice_k = product_obj.list_sku[j].sale_price;",
									"                                }",
									"                                if(maxPrice_k < product_obj.list_sku[j].sale_price){",
									"                                    maxPrice_k = product_obj.list_sku[j].sale_price;",
									"                                }",
									"",
									"                                // cost_price",
									"                                pm.test(\"--- cost_price of sku \" + product_obj.list_sku[j].sku_name + \" is correct! \" + product_obj.list_sku[j].cost_price, function () {",
									"                                    pm.expect(product_obj.list_sku[j].cost_price).to.eql(jsData.data[k].list_sku[i].cost_price);",
									"                                });",
									"",
									"                                // can_pick_quantity => hiệu của tồn kho và lưu không bán (hiện tại chưa có setup lưu ko bán lúc tạo) => move vào inventory",
									"                                // pm.test(\"--- can_pick_quantity of sku \" + product_obj.list_sku[j].sku_name + \" is correct! \" + product_obj.list_sku[j].can_pick_quantity, function () {",
									"                                //     console.log(\"act: \" + jsData.data[k].list_sku[i].can_pick_quantity);",
									"                                //     pm.expect(product_obj.list_sku[j].can_pick_quantity).to.eql(jsData.data[k].list_sku[i].can_pick_quantity);",
									"                                // });",
									"                                // kiểm tra inventory từng sku",
									"                                if(product_obj.list_sku[j].track_inventory){",
									"                                    pm.test(\"--- can_pick_quantity of sku \" + product_obj.list_sku[j].sku_name + \" is correct! \" + product_obj.list_sku[j].can_pick_quantity, function () {",
									"                                        console.log(\"act: \" + jsData.data[k].list_sku[i].inventory.total_can_pick_quantity);",
									"                                        pm.expect(product_obj.list_sku[j].can_pick_quantity).to.eql(jsData.data[k].list_sku[i].inventory.total_can_pick_quantity);",
									"                                    });",
									"                                } else {",
									"                                    // trả về ko hay ko trả về?",
									"                                    pm.test(\"--- can_pick_quantity of sku \" + product_obj.list_sku[j].sku_name + \" is 0! \", function () {",
									"                                        console.log(\"act: \" + jsData.data[k].list_sku[i].inventory.total_can_pick_quantity);",
									"                                        pm.expect(0).to.eql(jsData.data[k].list_sku[i].inventory.total_can_pick_quantity);",
									"                                    });",
									"                                }",
									"                                ",
									"                                // kiểm tra inventory từng branch trong sku",
									"                                let count_branch_i = 0;",
									"                                for(let m in jsData.data[k].list_sku[i].list_branches){",
									"                                    for(let n in product_obj.list_sku[j].branches){",
									"                                        if(product_obj.list_sku[j].branches[n].branch_id == jsData.data[k].list_sku[i].list_branches[m].branch_id){",
									"                                            count_branch_i++;",
									"                                            if(product_obj.list_sku[j].track_inventory){",
									"                                                pm.test(\"------ inventory_quantity of sku \" + product_obj.list_sku[j].sku_name + \" at branch \" + jsData.data[k].list_sku[i].list_branches[m].branch_name + \" is correct! \" + product_obj.list_sku[j].branches[n].inventory_quantity, function () {",
									"                                                    console.log(\"act: \" + jsData.data[k].list_sku[i].list_branches[m].inventory_quantity);",
									"                                                    pm.expect(product_obj.list_sku[j].branches[n].inventory_quantity).to.eql(jsData.data[k].list_sku[i].list_branches[m].inventory_quantity);",
									"                                                });",
									"                                            } else {",
									"                                                // trả về ko hay ko trả về?",
									"                                                pm.test(\"------ inventory_quantity of sku \" + product_obj.list_sku[j].sku_name + \" at branch \" + jsData.data[k].list_sku[i].list_branches[m].branch_name + \" is 0! \", function () {",
									"                                                    console.log(\"act: \" + jsData.data[k].list_sku[i].list_branches[m].inventory_quantity);",
									"                                                    pm.expect(0).to.eql(jsData.data[k].list_sku[i].list_branches[m].inventory_quantity);",
									"                                                });",
									"                                            }",
									"                                            break;",
									"                                        }",
									"                                    }",
									"                                }",
									"                                pm.test(\"--- Found all branch of \" + product_obj.list_sku[j].sku_name, function () {",
									"                                    pm.expect(product_obj.list_sku[j].branches.length).to.eql(count_branch_i);",
									"                                });",
									"",
									"                                // delivering_quantity => khi tạo sản phẩm thì sẽ là 0",
									"                                // pm.test(\"--- delivering_quantity of sku \" + product_obj.list_sku[j].sku_name + \" is 0!\", function () {",
									"                                //     console.log(\"act: \" + jsData.data[k].list_sku[i].delivering_quantity);",
									"                                //     pm.expect(0).to.eql(jsData.data[k].list_sku[i].delivering_quantity);",
									"                                // });",
									"",
									"                                // selling_price",
									"                                pm.test(\"--- selling_price of sku \" + product_obj.list_sku[j].sku_name + \" is correct! \" + product_obj.list_sku[j].selling_price, function () {",
									"                                    pm.expect(product_obj.list_sku[j].selling_price).to.eql(jsData.data[k].list_sku[i].selling_price);",
									"                                });",
									"",
									"                                // is_hidden",
									"                                pm.test(\"--- is_hidden of sku \" + product_obj.list_sku[j].sku_name + \" is correct! \" + product_obj.list_sku[j].is_hidden, function () {",
									"                                    pm.expect(product_obj.list_sku[j].is_hidden).to.eql(jsData.data[k].list_sku[i].is_hidden);",
									"                                });",
									"",
									"                                // is_in_business",
									"                                pm.test(\"--- is_in_business of sku \" + product_obj.list_sku[j].sku_name + \" is correct! \" + product_obj.list_sku[j].is_in_business, function () {",
									"                                    pm.expect(product_obj.list_sku[j].is_in_business).to.eql(jsData.data[k].list_sku[i].is_in_business);",
									"                                });",
									"",
									"                                // priority => ko cần thiết???",
									"                                // pm.test(\"--- priority of sku \" + product_obj.list_sku[j].sku_name + \" is correct! \" + product_obj.list_sku[j].priority, function () {",
									"                                //     pm.expect(product_obj.list_sku[j].priority).to.eql(jsData.data[k].list_sku[i].priority);",
									"                                // });",
									"",
									"                                // weight => ko show ở list",
									"                                // pm.test(\"--- weight of sku \" + product_obj.list_sku[j].sku_name + \" is correct! \" + product_obj.list_sku[j].weight, function () {",
									"                                //     pm.expect(product_obj.list_sku[j].weight).to.eql(jsData.data[k].list_sku[i].weight);",
									"                                // });",
									"",
									"                                // weight_unit => ko show ở list",
									"                                // pm.test(\"--- weight_unit of sku \" + product_obj.list_sku[j].sku_name + \" is correct! \" + product_obj.list_sku[j].weight_unit, function () {",
									"                                //     pm.expect(product_obj.list_sku[j].weight_unit).to.eql(jsData.data[k].list_sku[i].weight_unit);",
									"                                // });",
									"",
									"                                // list_attributes => sau khi tạo sẽ về trang list nên server đang ko trả về và cũng ko cần thiết check",
									"                                let act_list_attributes_i = [], exp_list_attributes_j = [];",
									"                                for(let m in jsData.data[k].list_sku[i].list_attributes){",
									"                                    act_list_attributes_i[act_list_attributes_i.length] = {",
									"                                        \"attribute_name\":jsData.data[k].list_sku[i].list_attributes[m].attribute_name",
									"                                    }",
									"                                }",
									"                                for(let n in product_obj.list_sku[j].attributes){",
									"                                    exp_list_attributes_j[exp_list_attributes_j.length] = {",
									"                                        \"attribute_name\":product_obj.list_sku[j].attributes[n].attribute",
									"                                    }",
									"                                }",
									"                                pm.test(\"--- list_attributes of sku \" + product_obj.list_sku[j].sku_name + \" is correct!\", function () {",
									"                                    console.log(\"act list_attributes: \", sortByKey(act_list_attributes_i,\"attribute_name\"));",
									"                                    console.log(\"exp list_attributes: \", sortByKey(exp_list_attributes_j,\"attribute_name\"));",
									"                                    pm.expect(JSON.stringify(act_list_attributes_i)).to.eql(JSON.stringify(exp_list_attributes_j));",
									"                                });",
									"",
									"                                // list_uoms => ",
									"                                if(configs.product_type != \"imei_product\"){",
									"                                    let act_list_uoms_i = [], exp_list_uoms_j = [];",
									"                                    for(let m in jsData.data[k].list_sku[i].list_uoms){",
									"                                        act_list_uoms_i[act_list_uoms_i.length] = {",
									"                                            \"uom_name\":jsData.data[k].list_sku[i].list_uoms[m].uom_name,",
									"                                            \"quantity\":jsData.data[k].list_sku[i].list_uoms[m].quantity,",
									"                                            \"sale_price\":jsData.data[k].list_sku[i].list_uoms[m].sale_price,",
									"                                            \"cost_price\":jsData.data[k].list_sku[i].list_uoms[m].cost_price",
									"                                        }",
									"                                    }",
									"                                    if(\"uoms\" in product_obj.list_sku[j]){",
									"                                        for(let n in product_obj.list_sku[j].uoms){",
									"                                            exp_list_uoms_j[exp_list_uoms_j.length] = {",
									"                                                \"uom_name\":product_obj.list_sku[j].uoms[n].name,",
									"                                                \"quantity\":product_obj.list_sku[j].uoms[n].quantity,",
									"                                                \"sale_price\":product_obj.list_sku[j].uoms[n].sale_price,",
									"                                                \"cost_price\":product_obj.list_sku[j].uoms[n].cost_price",
									"                                            }",
									"                                        }",
									"                                    } else {",
									"                                        exp_list_uoms_j = null;",
									"                                    }",
									"                                    pm.test(\"--- list_uoms of sku \" + product_obj.list_sku[j].sku_name + \" is correct!\", function () {",
									"                                        console.log(\"act list_uoms: \", sortByKey(act_list_uoms_i,\"uom_name\"));",
									"                                        console.log(\"exp list_uoms: \", sortByKey(exp_list_uoms_j,\"uom_name\"));",
									"                                        pm.expect(JSON.stringify(act_list_uoms_i)).to.eql(JSON.stringify(exp_list_uoms_j));",
									"                                    });",
									"                                }",
									"                                break;",
									"                            }",
									"                        }",
									"                    }",
									"",
									"                    // max_sale_price, min_sale_price",
									"                    pm.test(\"max_sale_price of sku \" + product_obj.product_name + \" is \" + maxPrice_k, function () {",
									"                        console.log(\"act: \" + jsData.data[k].max_sale_price);",
									"                        pm.expect(maxPrice_k).to.eql(jsData.data[k].max_sale_price);",
									"                    });",
									"                    pm.test(\"min_sale_price of sku \" + product_obj.product_name + \" is \" + minPrice_k, function () {",
									"                        console.log(\"act: \" + jsData.data[k].min_sale_price);",
									"                        pm.expect(minPrice_k).to.eql(jsData.data[k].min_sale_price);",
									"                    });",
									"",
									"                    pm.test(\"Found all SKU! \" + total_sku, function () {",
									"                        pm.expect(count).to.eql(total_sku);",
									"                    });",
									"                    break;",
									"                }",
									"            }",
									"",
									"            pm.test(\"Found new product\", function () {",
									"                pm.expect(isFound).to.be.true;",
									"            });",
									"            pm.environment.set(\"C-product_obj\",product_obj);",
									"",
									"            // lưu lại data để run case sau",
									"            pm.environment.set(\"C-total_products\",total_products);",
									"",
									"            postman.setNextRequest(\"get_product_detail\");",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get list product, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"// let page = pm.environment.get(\"C-page\");",
									"",
									"// if(!page){",
									"//     page = 1;",
									"//     pm.environment.set(\"C-page\",page);",
									"",
									"//     let page_size = 50;",
									"//     pm.environment.set(\"C-page_size\",page_size);",
									"// }",
									"",
									"// lấy ngay page đầu tiên vì rule sản phẩm tạo ra phải ở đầu trang"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-business/api/v1/product/get-list?business_id={{C-business_id}}&page=1&page_size=50&search=&sort=",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-business",
								"api",
								"v1",
								"product",
								"get-list"
							],
							"query": [
								{
									"key": "business_id",
									"value": "{{C-business_id}}"
								},
								{
									"key": "page",
									"value": "1",
									"description": "{{C-page}}"
								},
								{
									"key": "page_size",
									"value": "50",
									"description": "{{C-page_size}}"
								},
								{
									"key": "search",
									"value": ""
								},
								{
									"key": "sort",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get_product_detail",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let product_obj = pm.environment.get(\"C-product_obj\");",
									"let product_id = product_obj.product_id;",
									"console.log(\"view detail product: \" + product_id);",
									"",
									"pm.environment.set(\"C-product_id\",product_id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ============================= sort by key",
									"function sortByKey(array, key) {",
									"    return array.sort(function(a, b) {",
									"        var x = a[key]; var y = b[key];",
									"        return ((x < y) ? -1 : ((x > y) ? 1 : 0));",
									"    });",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200 && jsData.code == 102000){",
									"    // let testcase = pm.environment.get(\"C-testcase\");",
									"    let configs = pm.environment.get(\"C-configs\");",
									"    // console.log(\"Debug: \",jsData.data);",
									"",
									"    let product_obj = pm.environment.get(\"C-product_obj\");",
									"",
									"    pm.test(\"product_name of product correctly! \" + product_obj.product_name, function () {",
									"        pm.expect(product_obj.product_name == jsData.data.product_name).to.be.true;",
									"    });",
									"",
									"    // product_type tạm thời là physical, sau này sẽ handle thêm value: commbo, add-on",
									"    // pm.test(\"product_type of product correctly! \" + product_obj.product_type, function () {",
									"    //     pm.expect(product_obj.product_type == jsData.data.product_type).to.be.true;",
									"    // });",
									"",
									"    pm.test(\"short_desc of product correctly! \" + product_obj.short_desc, function () {",
									"        pm.expect(product_obj.short_desc == jsData.data.short_desc).to.be.true;",
									"    });",
									"",
									"    pm.test(\"apply_tax of product correctly! \" + product_obj.apply_tax, function () {",
									"        pm.expect(product_obj.apply_tax == jsData.data.apply_tax).to.be.true;",
									"    });",
									"",
									"    // track_inventory => tầng sku",
									"    // pm.test(\"track_inventory of product correctly! \" + product_obj.track_inventory, function () {",
									"    //     pm.expect(product_obj.track_inventory == jsData.data.track_inventory).to.be.true;",
									"    // });",
									"",
									"    // apply_tax_category_sales => false (only book)",
									"    pm.test(\"apply_tax_category_sales of product must be false!\", function () {",
									"        pm.expect(jsData.data.apply_tax_category_sales).to.be.false;",
									"    });",
									"",
									"    // apply_tax_category_income => false (only book)",
									"    pm.test(\"apply_tax_category_income of product must be false!\", function () {",
									"        pm.expect(jsData.data.apply_tax_category_income).to.be.false;",
									"    });",
									"",
									"    // is_price_including_tax => false (only book)",
									"    pm.test(\"is_price_including_tax of product must be false!\", function () {",
									"        pm.expect(jsData.data.is_price_including_tax).to.be.false;",
									"    });",
									"",
									"    // category_id",
									"    pm.test(\"category_id of product correctly! \" + product_obj.category_id, function () {",
									"        pm.expect(product_obj.category_id == jsData.data.category_id).to.be.true;",
									"    });",
									"",
									"    // brand_id",
									"    pm.test(\"brand_id of product correctly! \" + product_obj.brand_id, function () {",
									"        pm.expect(product_obj.brand_id == jsData.data.brand_id).to.be.true;",
									"    });",
									"",
									"    // placement => tạm thời là object => sẽ update thành array object",
									"    let placement_array_obj = pm.environment.get(\"C-placement_array_obj\");",
									"    let expect_placement_list = [], actual_placement_list = [];",
									"    for(let m in jsData.data.placements){",
									"        actual_placement_list[actual_placement_list.length] = {",
									"            \"placement_name\":jsData.data.placements[m].placement_name",
									"        }",
									"    }",
									"    for(let n in product_obj.placements){",
									"        for(let l in placement_array_obj){",
									"            if(product_obj.placements[n] == placement_array_obj[l].id){",
									"                expect_placement_list[expect_placement_list.length] = {",
									"                    \"placement_name\":placement_array_obj[l].placement_name",
									"                }",
									"                break;",
									"            }",
									"        }",
									"    }",
									"    pm.test(\"placements of product correctly!\", function () {",
									"        console.log(\"act placements: \", sortByKey(actual_placement_list,\"placement_name\"));",
									"        console.log(\"exp placements: \", sortByKey(expect_placement_list,\"placement_name\"));",
									"        pm.expect(JSON.stringify(actual_placement_list)).to.eql(JSON.stringify(expect_placement_list));",
									"    });",
									"",
									"    // tag",
									"    let tag_array_obj = pm.environment.get(\"C-tag_array_obj\");",
									"    let expect_tag_list = [], actual_tag_list = [];",
									"    for(let m in jsData.data.tags){",
									"        actual_tag_list[actual_tag_list.length] = {",
									"            \"tag_name\":jsData.data.tags[m].tag_name",
									"        }",
									"    }",
									"    for(let n in product_obj.tags){",
									"        for(let l in tag_array_obj){",
									"            if(product_obj.tags[n] == tag_array_obj[l].id){",
									"                expect_tag_list[expect_tag_list.length] = {",
									"                    \"tag_name\":tag_array_obj[l].tag_name",
									"                }",
									"                break;",
									"            }",
									"        }",
									"    }",
									"    pm.test(\"tags of product correctly!\", function () {",
									"        console.log(\"act tags: \", sortByKey(actual_tag_list,\"tag_name\"));",
									"        console.log(\"exp tags: \", sortByKey(expect_tag_list,\"tag_name\"));",
									"        pm.expect(JSON.stringify(actual_tag_list)).to.eql(JSON.stringify(expect_tag_list));",
									"    });",
									"",
									"    /**",
									"     * list_sku",
									"     * - sku_name, sku_code => dùng để mapping, lưu lại id",
									"     * - sale_price, cost_price, selling_price, can_pick_quantity",
									"     * - is_hidden, is_in_business, priority",
									"     * - weight, weight_unit",
									"     * - list_attributes",
									"     * - list_uoms",
									"     */ ",
									"    let total_sku = product_obj.list_sku.length;",
									"    let minPrice = 9999999, maxPrice = 0;",
									"    let count = 0;",
									"    for(let i in jsData.data.list_sku){",
									"        for(let j in product_obj.list_sku){",
									"            if(jsData.data.list_sku[i].sku_code == product_obj.list_sku[j].sku_code && jsData.data.list_sku[i].sku_name == product_obj.list_sku[j].sku_name){",
									"                count++;",
									"                product_obj.list_sku[j].sku_id = jsData.data.list_sku[i].id;",
									"                console.log(\"------------------ sku: \" + product_obj.list_sku[j].sku_name);",
									"",
									"                // allow_negative_inventory",
									"                pm.test(\"--- allow_negative_inventory of sku \" + product_obj.list_sku[j].sku_name + \" is correct! \" + product_obj.list_sku[j].allow_negative_inventory, function () {",
									"                    pm.expect(product_obj.list_sku[j].allow_negative_inventory).to.eql(jsData.data.list_sku[i].allow_negative_inventory);",
									"                });",
									"",
									"                // sale_price",
									"                pm.test(\"--- sale_price of sku \" + product_obj.list_sku[j].sku_name + \" is correct! \" + product_obj.list_sku[j].sale_price, function () {",
									"                    pm.expect(product_obj.list_sku[j].sale_price).to.eql(jsData.data.list_sku[i].sale_price);",
									"                });",
									"",
									"                if(minPrice > product_obj.list_sku[j].sale_price){",
									"                    minPrice = product_obj.list_sku[j].sale_price;",
									"                }",
									"                if(maxPrice < product_obj.list_sku[j].sale_price){",
									"                    maxPrice = product_obj.list_sku[j].sale_price;",
									"                }",
									"",
									"                // cost_price",
									"                pm.test(\"--- cost_price of sku \" + product_obj.list_sku[j].sku_name + \" is correct! \" + product_obj.list_sku[j].cost_price, function () {",
									"                    pm.expect(product_obj.list_sku[j].cost_price).to.eql(jsData.data.list_sku[i].cost_price);",
									"                });",
									"",
									"                // can_pick_quantity",
									"                if(product_obj.list_sku[j].track_inventory){",
									"                    pm.test(\"--- can_pick_quantity of sku \" + product_obj.list_sku[j].sku_name + \" is correct! \" + product_obj.list_sku[j].can_pick_quantity, function () {",
									"                        console.log(\"act: \" + jsData.data.list_sku[i].inventory.total_can_pick_quantity);",
									"                        pm.expect(product_obj.list_sku[j].can_pick_quantity).to.eql(jsData.data.list_sku[i].inventory.total_can_pick_quantity);",
									"                    });",
									"                } else {",
									"                    pm.test(\"--- can_pick_quantity of sku \" + product_obj.list_sku[j].sku_name + \" is 0! \", function () {",
									"                        console.log(\"act: \" + jsData.data.list_sku[i].inventory.total_can_pick_quantity);",
									"                        pm.expect(0).to.eql(jsData.data.list_sku[i].inventory.total_can_pick_quantity);",
									"                    });",
									"                }",
									"",
									"                // kiểm tra inventory từng branch trong sku",
									"                let count_branch_i = 0;",
									"                for(let m in jsData.data.list_sku[i].list_branches){",
									"                    for(let n in product_obj.list_sku[j].branches){",
									"                        if(product_obj.list_sku[j].branches[n].branch_id == jsData.data.list_sku[i].list_branches[m].branch_id){",
									"                            count_branch_i++;",
									"                            if(product_obj.list_sku[j].track_inventory){",
									"                                pm.test(\"------ inventory_quantity of sku \" + product_obj.list_sku[j].sku_name + \" at branch \" + jsData.data.list_sku[i].list_branches[m].branch_name + \" is correct! \" + product_obj.list_sku[j].branches[n].inventory_quantity, function () {",
									"                                    console.log(\"act: \" + jsData.data.list_sku[i].list_branches[m].inventory_quantity);",
									"                                    pm.expect(product_obj.list_sku[j].branches[n].inventory_quantity).to.eql(jsData.data.list_sku[i].list_branches[m].inventory_quantity);",
									"                                });",
									"                            } else {",
									"                                pm.test(\"------ inventory_quantity of sku \" + product_obj.list_sku[j].sku_name + \" at branch \" + jsData.data.list_sku[i].list_branches[m].branch_name + \" is 0! \", function () {",
									"                                    console.log(\"act: \" + jsData.data.list_sku[i].list_branches[m].inventory_quantity);",
									"                                    pm.expect(0).to.eql(jsData.data.list_sku[i].list_branches[m].inventory_quantity);",
									"                                });",
									"                            }",
									"                            break;",
									"                        }",
									"                    }",
									"                }",
									"                pm.test(\"--- Found all branch of \" + product_obj.list_sku[j].sku_name, function () {",
									"                    pm.expect(product_obj.list_sku[j].branches.length).to.eql(count_branch_i);",
									"                });",
									"",
									"                // selling_price",
									"                pm.test(\"--- selling_price of sku \" + product_obj.list_sku[j].sku_name + \" is correct! \" + product_obj.list_sku[j].selling_price, function () {",
									"                    pm.expect(product_obj.list_sku[j].selling_price).to.eql(jsData.data.list_sku[i].selling_price);",
									"                });",
									"",
									"                // is_hidden",
									"                pm.test(\"--- is_hidden of sku \" + product_obj.list_sku[j].sku_name + \" is correct! \" + product_obj.list_sku[j].is_hidden, function () {",
									"                    pm.expect(product_obj.list_sku[j].is_hidden).to.eql(jsData.data.list_sku[i].is_hidden);",
									"                });",
									"",
									"                // track_inventory",
									"                pm.test(\"--- track_inventory of sku \" + product_obj.list_sku[j].sku_name + \" is correct! \" + product_obj.list_sku[j].track_inventory, function () {",
									"                    pm.expect(product_obj.list_sku[j].track_inventory).to.eql(jsData.data.list_sku[i].track_inventory);",
									"                });",
									"",
									"                // is_in_business",
									"                pm.test(\"--- is_in_business of sku \" + product_obj.list_sku[j].sku_name + \" is correct! \" + product_obj.list_sku[j].is_in_business, function () {",
									"                    // console.log(\"act: \" + jsData.data.list_sku[i].is_in_business);",
									"                    pm.expect(product_obj.list_sku[j].is_in_business).to.eql(jsData.data.list_sku[i].is_in_business);",
									"                });",
									"",
									"                // priority => ko cần thiết???",
									"                // pm.test(\"--- priority of sku \" + product_obj.list_sku[j].sku_name + \" is correct! \" + product_obj.list_sku[j].priority, function () {",
									"                //     pm.expect(product_obj.list_sku[j].priority).to.eql(jsData.data.list_sku[i].priority);",
									"                // });",
									"",
									"                // weight => ko show ở list",
									"                pm.test(\"--- weight of sku \" + product_obj.list_sku[j].sku_name + \" is correct! \" + product_obj.list_sku[j].weight, function () {",
									"                    pm.expect(product_obj.list_sku[j].weight).to.eql(jsData.data.list_sku[i].weight);",
									"                });",
									"",
									"                // weight_unit => ko show ở list",
									"                pm.test(\"--- weight_unit of sku \" + product_obj.list_sku[j].sku_name + \" is correct! \" + product_obj.list_sku[j].weight_unit, function () {",
									"                    pm.expect(product_obj.list_sku[j].weight_unit).to.eql(jsData.data.list_sku[i].weight_unit);",
									"                });",
									"",
									"                // list_attributes => sau khi tạo sẽ về trang list nên server đang ko trả về và cũng ko cần thiết check",
									"                let act_list_attributes_i = [], exp_list_attributes_j = [];",
									"                for(let m in jsData.data.list_sku[i].list_attributes){",
									"                    act_list_attributes_i[act_list_attributes_i.length] = {",
									"                        \"attribute_name\":jsData.data.list_sku[i].list_attributes[m].attribute_name",
									"                    }",
									"                }",
									"                for(let n in product_obj.list_sku[j].attributes){",
									"                    exp_list_attributes_j[exp_list_attributes_j.length] = {",
									"                        \"attribute_name\":product_obj.list_sku[j].attributes[n].attribute",
									"                    }",
									"                }",
									"                pm.test(\"--- list_attributes of sku \" + product_obj.list_sku[j].sku_name + \" is correct!\", function () {",
									"                    console.log(\"act list_attributes: \", sortByKey(act_list_attributes_i,\"attribute_name\"));",
									"                    console.log(\"exp list_attributes: \", sortByKey(exp_list_attributes_j,\"attribute_name\"));",
									"                    pm.expect(JSON.stringify(act_list_attributes_i)).to.eql(JSON.stringify(exp_list_attributes_j));",
									"                });",
									"",
									"                // uom",
									"                if(configs.product_type != \"imei_product\"){",
									"                    pm.test(\"--- uom of sku \" + product_obj.list_sku[j].sku_name + \" is correct! \" + product_obj.list_sku[j].uom, function () {",
									"                        pm.expect(product_obj.list_sku[j].uom).to.eql(jsData.data.list_sku[i].uom);",
									"                    });",
									"",
									"                    // list_uoms => sau khi tạo sẽ về trang list nên server đang ko trả về và cũng ko cần thiết check",
									"                    let act_list_uoms_i = [], exp_list_uoms_j = [];",
									"                    for(let m in jsData.data.list_sku[i].list_uoms){",
									"                        act_list_uoms_i[act_list_uoms_i.length] = {",
									"                            \"uom_name\":jsData.data.list_sku[i].list_uoms[m].uom_name",
									"                        }",
									"                    }",
									"                    if(\"uoms\" in product_obj.list_sku[j]){",
									"                        for(let n in product_obj.list_sku[j].uoms){",
									"                            exp_list_uoms_j[exp_list_uoms_j.length] = {",
									"                                \"uom_name\":product_obj.list_sku[j].uoms[n].name",
									"                            }",
									"                        }",
									"                    } else {",
									"                        exp_list_uoms_j = null;",
									"                    }",
									"                    pm.test(\"--- list_uoms of sku \" + product_obj.list_sku[j].sku_name + \" is correct!\", function () {",
									"                        console.log(\"act list_uoms: \", sortByKey(act_list_uoms_i,\"uom_name\"));",
									"                        console.log(\"exp list_uoms: \", sortByKey(exp_list_uoms_j,\"uom_name\"));",
									"                        pm.expect(JSON.stringify(act_list_uoms_i)).to.eql(JSON.stringify(exp_list_uoms_j));",
									"                    });",
									"                }",
									"                break;",
									"            }",
									"        }",
									"    }",
									"",
									"    // max_sale_price, min_sale_price",
									"    pm.test(\"max_sale_price of sku \" + product_obj.product_name + \" is \" + maxPrice, function () {",
									"        console.log(\"act: \" + jsData.data.max_sale_price);",
									"        pm.expect(maxPrice).to.eql(jsData.data.max_sale_price);",
									"    });",
									"    pm.test(\"min_sale_price of sku \" + product_obj.product_name + \" is \" + minPrice, function () {",
									"        console.log(\"act: \" + jsData.data.min_sale_price);",
									"        pm.expect(minPrice).to.eql(jsData.data.min_sale_price);",
									"    });",
									"",
									"    pm.test(\"Found all SKU! \" + total_sku, function () {",
									"        pm.expect(count).to.eql(total_sku);",
									"    });",
									"",
									"    postman.setNextRequest(\"get_list_inventory\"); // get_list_inventory",
									"} else {",
									"    console.log(\"Can't get internal contact detail, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "authorization",
								"value": "Bearer {{C-userToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-business/api/v1/product/get-one/{{C-product_id}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-business",
								"api",
								"v1",
								"product",
								"get-one",
								"{{C-product_id}}"
							],
							"query": [
								{
									"key": "business_id",
									"value": "{{C-business_id}}",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "create_product",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/**",
									" *  =============================  func randNotDupe(min, max, total)",
									" * total: số lượng random, ko dc nhỏ hơn max-min+1",
									" * return: array",
									" */",
									"function randNotDupe(min, max, total){",
									"  let arrNum = []; // new empty array",
									"  let n, p;",
									"  for (let i = 0; i < total; i++) {",
									"    do {",
									"      n = Math.floor(Math.random() * (max - min + 1)) + min;",
									"      p = arrNum.includes(n);",
									"      if(!p){",
									"        arrNum.push(n);",
									"      }",
									"    }",
									"    while(p);",
									"  }",
									"  return arrNum;",
									"}",
									"",
									"// ============================= random number between min and max",
									"function getRandomInt(min, max) {",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"",
									"// ============================= random characters",
									"function randomChars(length) {",
									"    var result           = '';",
									"    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
									"    var charactersLength = characters.length;",
									"    for ( var i = 0; i < length; i++ ) {",
									"      result += characters.charAt(Math.floor(Math.random() * charactersLength));",
									"   }",
									"   return result;",
									"}",
									"",
									"// ============================= combineAttributes",
									"function combineAttributes(attributes) {",
									"    const result = [];",
									"",
									"    function generateCombination(currentCombination, index) {",
									"        if (index === attributes.length) {",
									"            result.push(currentCombination.join(\" - \"));",
									"            return;",
									"        }",
									"",
									"        for (const value of attributes[index].value) {",
									"            generateCombination([...currentCombination, value], index + 1);",
									"        }",
									"    }",
									"",
									"    generateCombination([], 0);",
									"    return result;",
									"}",
									"function combineAttributes2(attributes) {",
									"    const result = [];",
									"",
									"    function generateCombination(currentCombination, index) {",
									"        if (index === attributes.length) {",
									"            result.push(currentCombination.join(\" - \"));",
									"            return;",
									"        }",
									"",
									"        for (const attribute of attributes[index].list_attribute) {",
									"            generateCombination([...currentCombination, attribute.name], index + 1);",
									"        }",
									"    }",
									"",
									"    generateCombination([], 0);",
									"    return result;",
									"}",
									"",
									"/**",
									" * income_account_id: Phân loại doanh thu => group = \"income\"",
									" * expense_account_id: Phân loại chi phí => group = \"expense\"",
									" */",
									"",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"let case_ = pm.environment.get(\"C-case_\");",
									"if(!case_){",
									"    case_ = 5;",
									"    pm.environment.set(\"C-case_\",case_);",
									"}",
									"console.log(\"Testcase: \" + testcase + \".\" + case_);",
									"",
									"let today = new Date();",
									"let next_date_stp = Math.floor(today.getTime()/1000) + 24*60*60;",
									"let next_date = new Date(next_date_stp*1000);",
									"",
									"let configs = pm.environment.get(\"C-configs\");",
									"let weight_unit_list = [\"gram\",\"kg\"];",
									"let weight_unit = weight_unit_list[getRandomInt(0,1)];",
									"let weight;",
									"if(weight_unit == \"kg\"){",
									"    weight = getRandomInt(1,10)/20;",
									"} else {",
									"    weight = getRandomInt(10,500);",
									"}",
									"",
									"let list_tax = pm.environment.get(\"C-list_tax\");",
									"// console.log(\"debug list_tax: \", list_tax);",
									"",
									"const default_uom = [\"Lon\",\"Lốc\",\"Thùng\"];",
									"const default_attribute = [{",
									"    \"name\":\"Màu sắc\",",
									"    \"value\":[\"Đỏ\", \"Cam\", \"Vàng\", \"Tím\", \"Trắng\", \"Xanh\", \"Hồng\"]",
									"},{",
									"    \"name\":\"Kích thước\",",
									"    \"value\":[\"XXXL\", \"XXL\", \"XL\", \"L\", \"M\", \"S\", \"XS\"]",
									"},{",
									"    \"name\":\"Hình dạng\",",
									"    \"value\":[\"Vuông\",\"Tròn\",\"Thoi\",\"Tam giác\",\"Chữ Nhật\"]",
									"},{",
									"    \"name\":\"Loại\",",
									"    \"value\":[\"1\",\"2\",\"3\",\"4\",\"5\"]",
									"}];",
									"",
									"let product_name, product_price, cost_price, product_code, product_quantity;",
									"let uom, list_sku = [], list_uom = [], uoms = [], list_variant = [], payload;",
									"",
									"let list_branch = pm.environment.get(\"C-list_branch\");",
									"",
									"let random_total_attribue = getRandomInt(1,default_attribute.length);",
									"let random_pos_attribue = randNotDupe(0,default_attribute.length - 1, random_total_attribue);",
									"let uom_branch_1 = [], uom_branch_2 = []; // term uom",
									"let track_inventory = true;",
									"switch(testcase){",
									"    case 3:",
									"        let list_branches_i, can_pick_quantity_i;",
									"        switch(configs.product_type){",
									"            case \"physical\":",
									"                console.log(\"Create physical - single product, include uom\");",
									"                product_name = \"[API] physical non_variant \" + randomChars(8);",
									"                product_price = getRandomInt(500,1990)*100;",
									"                cost_price = product_price/2;",
									"                product_code = \"PRD\" + randomChars(5);",
									"",
									"                // hiện tại uom gốc không nhất thiết phải nhỏ nhất => FIX UOM gốc là đơn vị nhỏ nhất",
									"                uom = default_uom[0]; //getRandomInt(0,default_uom.length -1)",
									"                console.log(\"uom: \" + uom);",
									"                switch(uom){",
									"                    case \"Lon\":",
									"                        list_uom = [{",
									"                            \"name\":\"Lốc\",",
									"                            \"quantity\": 6",
									"                        },{",
									"                            \"name\":\"Thùng\",",
									"                            \"quantity\": 24",
									"                        }];",
									"                        break;",
									"                    case \"Lốc\":",
									"                        list_uom = [{",
									"                            \"name\":\"Lon\",",
									"                            \"quantity\":parseFloat((1/6).toFixed(2))",
									"                        },{",
									"                            \"name\":\"Thùng\",",
									"                            \"quantity\": 4",
									"                        }];",
									"                        uoms = [{",
									"                            \"name\":\"Lon\",",
									"                            \"price\": Math.round(product_price/6),",
									"                            \"quantity\":parseFloat((1/6).toFixed(2))",
									"                        },{",
									"                            \"name\":\"Thùng\",",
									"                            \"price\": product_price*4,",
									"                            \"quantity\": 4",
									"                        }];",
									"                        break;",
									"                    case \"Thùng\":",
									"                        list_uom = [{",
									"                            \"name\":\"Lon\",",
									"                            \"quantity\":parseFloat((1/24).toFixed(2))",
									"                        },{",
									"                            \"name\":\"Lốc\",",
									"                            \"quantity\":parseFloat((1/4).toFixed(2))",
									"                        }];",
									"                        uoms = [{",
									"                            \"name\":\"Lon\",",
									"                            \"price\":Math.round(product_price/24),",
									"                            \"quantity\":parseFloat((1/24).toFixed(2))",
									"                        },{",
									"                            \"name\":\"Lốc\",",
									"                            \"price\": Math.round(product_price/4),",
									"                            \"quantity\":parseFloat((1/4).toFixed(2))",
									"                        }];",
									"                        break;",
									"                    default:",
									"                        console.log(\"missing flow\");",
									"                        break;",
									"                }",
									"                // console.log(\"debug list_uom: \",list_uom);",
									"                // physical product thì ko có batch",
									"                ",
									"                list_branches_i = [];",
									"                can_pick_quantity_i = 0;",
									"                for(let j in list_branch){",
									"                    let randome_ij = getRandomInt(5,50);",
									"                    list_branches_i[list_branches_i.length] = {",
									"                        \"branch_id\":list_branch[j].id,",
									"                        \"inventory_quantity\": randome_ij,",
									"                        \"is_in_business\": true",
									"                    }",
									"                    can_pick_quantity_i += randome_ij;",
									"                }",
									"                switch(uom){",
									"                    case \"Lon\":",
									"                        uoms = [{",
									"                            \"name\":\"Lốc\",",
									"                            \"sale_price\": product_price*6,",
									"                            \"cost_price\": cost_price*6,",
									"                            \"quantity\": 6",
									"                        },{",
									"                            \"name\":\"Thùng\",",
									"                            \"sale_price\": product_price*24,",
									"                            \"cost_price\": cost_price*24,",
									"                            \"quantity\": 24",
									"                        }];",
									"                        break;",
									"                    case \"Lốc\":",
									"                        uoms = [{",
									"                            \"name\":\"Lon\",",
									"                            \"sale_price\": Math.round(product_price/6),",
									"                            \"cost_price\": Math.round(cost_price/6),",
									"                            \"quantity\": parseFloat((1/6).toFixed(2))",
									"                        },{",
									"                            \"name\":\"Thùng\",",
									"                            \"sale_price\": product_price*4,",
									"                            \"cost_price\": cost_price*4,",
									"                            \"quantity\": 4",
									"                        }];",
									"                        break;",
									"                    case \"Thùng\":",
									"                        uoms = [{",
									"                            \"name\":\"Lon\",",
									"                            \"sale_price\": Math.round(product_price/24),",
									"                            \"cost_price\": Math.round(cost_price/24),",
									"                            \"quantity\": parseFloat((1/24).toFixed(2))",
									"                        },{",
									"                            \"name\":\"Lốc\",",
									"                            \"sale_price\": Math.round(product_price/4),",
									"                            \"cost_price\": Math.round(cost_price/4),",
									"                            \"quantity\": parseFloat((1/4).toFixed(2))",
									"                        }];",
									"                        break;",
									"                    default:",
									"                        console.log(\"missing flow\");",
									"                        break;",
									"                }",
									"",
									"                if(getRandomInt(0,1)){ // getRandomInt(0,1)",
									"                    track_inventory = false;",
									"                }",
									"",
									"                list_sku = [{",
									"                    \"allow_negative_inventory\": true, // chấp nhận khi bị âm",
									"                    \"attributes\": [],",
									"                    \"bar_code\": \"\",",
									"                    \"can_pick_quantity\": can_pick_quantity_i, // có thể mua",
									"                    \"cost_price\": cost_price,",
									"                    \"images\": [],",
									"                    \"initial_inventory_quantity\": can_pick_quantity_i, // tồn kho ban đầu?",
									"                    \"is_hidden\": false,",
									"                    \"is_in_business\": true,",
									"                    \"priority\": 0, // case này chỉ có đúng 1 sku",
									"                    // \"product_id\": \"string\",",
									"                    \"sale_price\": product_price,",
									"                    \"selling_price\": Math.round(product_price*0.9),",
									"                    \"sku_code\": product_code,",
									"                    \"sku_name\": product_name,",
									"                    \"track_inventory\": track_inventory,",
									"                    \"branches\":list_branches_i,",
									"                    \"uom\": uom,",
									"                    \"uoms\": uoms,",
									"                    \"warning_quantity\": 0,",
									"                    \"weight\":weight,",
									"                    \"weight_unit\": weight_unit,",
									"                    \"wholesales\": [] // giá sĩ",
									"                }];",
									"                break;",
									"            case \"batch_product\":",
									"                console.log(\"Create batch_product - single product, include uom\");",
									"                product_name = \"[API] batch non_variant \" + randomChars(8);",
									"                product_price = getRandomInt(500,1990)*100;",
									"                cost_price = product_price/2;",
									"                product_code = \"PRD\" + randomChars(5);",
									"",
									"                // hiện tại uom gốc không nhất thiết phải nhỏ nhất => FIX UOM gốc là đơn vị nhỏ nhất",
									"                uom = default_uom[0]; //getRandomInt(0,default_uom.length -1)",
									"                console.log(\"uom: \" + uom);",
									"                switch(uom){",
									"                    case \"Lon\":",
									"                        list_uom = [{",
									"                            \"name\":\"Lốc\",",
									"                            \"quantity\": 6",
									"                        },{",
									"                            \"name\":\"Thùng\",",
									"                            \"quantity\": 24",
									"                        }];",
									"                        break;",
									"                    case \"Lốc\":",
									"                        list_uom = [{",
									"                            \"name\":\"Lon\",",
									"                            \"quantity\":parseFloat((1/6).toFixed(2))",
									"                        },{",
									"                            \"name\":\"Thùng\",",
									"                            \"quantity\": 4",
									"                        }];",
									"                        uoms = [{",
									"                            \"name\":\"Lon\",",
									"                            \"price\": Math.round(product_price/6),",
									"                            \"quantity\":parseFloat((1/6).toFixed(2))",
									"                        },{",
									"                            \"name\":\"Thùng\",",
									"                            \"price\": product_price*4,",
									"                            \"quantity\": 4",
									"                        }];",
									"                        break;",
									"                    case \"Thùng\":",
									"                        list_uom = [{",
									"                            \"name\":\"Lon\",",
									"                            \"quantity\":parseFloat((1/24).toFixed(2))",
									"                        },{",
									"                            \"name\":\"Lốc\",",
									"                            \"quantity\":parseFloat((1/4).toFixed(2))",
									"                        }];",
									"                        uoms = [{",
									"                            \"name\":\"Lon\",",
									"                            \"price\":Math.round(product_price/24),",
									"                            \"quantity\":parseFloat((1/24).toFixed(2))",
									"                        },{",
									"                            \"name\":\"Lốc\",",
									"                            \"price\": Math.round(product_price/4),",
									"                            \"quantity\":parseFloat((1/4).toFixed(2))",
									"                        }];",
									"                        break;",
									"                    default:",
									"                        console.log(\"missing flow\");",
									"                        break;",
									"                }",
									"                // console.log(\"debug list_uom: \",list_uom);",
									"",
									"                list_branches_i = [];",
									"                can_pick_quantity_i = 0;",
									"                for(let j in list_branch){",
									"                    let randome_ij = 0; // getRandomInt(5,50); // bắt buộc luôn là 0, phải tạo batch nhập hàng mới dc => OPEN API thì validate",
									"                    list_branches_i[list_branches_i.length] = {",
									"                        \"branch_id\":list_branch[j].id,",
									"                        \"inventory_quantity\": randome_ij,",
									"                        \"is_in_business\": true",
									"                    }",
									"                    can_pick_quantity_i += randome_ij;",
									"                }",
									"                switch(uom){",
									"                    case \"Lon\":",
									"                        uoms = [{",
									"                            \"name\":\"Lốc\",",
									"                            \"sale_price\": product_price*6,",
									"                            \"cost_price\": cost_price*6,",
									"                            \"quantity\": 6",
									"                        },{",
									"                            \"name\":\"Thùng\",",
									"                            \"sale_price\": product_price*24,",
									"                            \"cost_price\": cost_price*24,",
									"                            \"quantity\": 24",
									"                        }];",
									"                        break;",
									"                    case \"Lốc\":",
									"                        uoms = [{",
									"                            \"name\":\"Lon\",",
									"                            \"sale_price\": Math.round(product_price/6),",
									"                            \"cost_price\": Math.round(cost_price/6),",
									"                            \"quantity\": parseFloat((1/6).toFixed(2))",
									"                        },{",
									"                            \"name\":\"Thùng\",",
									"                            \"sale_price\": product_price*4,",
									"                            \"cost_price\": cost_price*4,",
									"                            \"quantity\": 4",
									"                        }];",
									"                        break;",
									"                    case \"Thùng\":",
									"                        uoms = [{",
									"                            \"name\":\"Lon\",",
									"                            \"sale_price\": Math.round(product_price/24),",
									"                            \"cost_price\": Math.round(cost_price/24),",
									"                            \"quantity\": parseFloat((1/24).toFixed(2))",
									"                        },{",
									"                            \"name\":\"Lốc\",",
									"                            \"sale_price\": Math.round(product_price/4),",
									"                            \"cost_price\": Math.round(cost_price/4),",
									"                            \"quantity\": parseFloat((1/4).toFixed(2))",
									"                        }];",
									"                        break;",
									"                    default:",
									"                        console.log(\"missing flow\");",
									"                        break;",
									"                }",
									"",
									"                // track_inventory bắt buộc true cho case này => OPEN API thì cần validate nếu false phải trả về lỗi",
									"",
									"                list_sku = [{",
									"                    \"allow_negative_inventory\": true, // chấp nhận khi bị âm",
									"                    \"attributes\": [],",
									"                    \"bar_code\": \"\",",
									"                    \"can_pick_quantity\": can_pick_quantity_i, // có thể mua",
									"                    \"cost_price\": cost_price,",
									"                    \"images\": [],",
									"                    \"initial_inventory_quantity\": can_pick_quantity_i, // tồn kho ban đầu?",
									"                    \"is_hidden\": false,",
									"                    \"is_in_business\": true,",
									"                    \"priority\": 0, // case này chỉ có đúng 1 sku",
									"                    // \"product_id\": \"string\",",
									"                    \"sale_price\": product_price,",
									"                    \"selling_price\": Math.round(product_price*0.9),",
									"                    \"sku_code\": product_code,",
									"                    \"sku_name\": product_name,",
									"                    \"track_inventory\": track_inventory,",
									"                    \"branches\":list_branches_i,",
									"                    \"uom\": uom,",
									"                    \"uoms\": uoms,",
									"                    \"warning_quantity\": 0,",
									"                    \"weight\":weight,",
									"                    \"weight_unit\": weight_unit,",
									"                    \"wholesales\": [] // giá sĩ",
									"                }];",
									"                break;",
									"            case \"imei_product\":",
									"                console.log(\"Create imei_product - single product, include uom\");",
									"                product_name = \"[API] imei non_variant \" + randomChars(8);",
									"                product_price = getRandomInt(500,1990)*100;",
									"                cost_price = product_price/2;",
									"                product_code = \"PRD\" + randomChars(5);",
									"",
									"                // imei product ko có uom, ko có batch",
									"                // uom = default_uom[0]; //getRandomInt(0,default_uom.length -1)",
									"                // console.log(\"uom: \" + uom);",
									"                // switch(uom){",
									"                //     case \"Lon\":",
									"                //         list_uom = [{",
									"                //             \"name\":\"Lốc\",",
									"                //             \"quantity\": 6",
									"                //         },{",
									"                //             \"name\":\"Thùng\",",
									"                //             \"quantity\": 24",
									"                //         }];",
									"                //         break;",
									"                //     case \"Lốc\":",
									"                //         list_uom = [{",
									"                //             \"name\":\"Lon\",",
									"                //             \"quantity\":parseFloat((1/6).toFixed(2))",
									"                //         },{",
									"                //             \"name\":\"Thùng\",",
									"                //             \"quantity\": 4",
									"                //         }];",
									"                //         uoms = [{",
									"                //             \"name\":\"Lon\",",
									"                //             \"price\": Math.round(product_price/6),",
									"                //             \"quantity\":parseFloat((1/6).toFixed(2))",
									"                //         },{",
									"                //             \"name\":\"Thùng\",",
									"                //             \"price\": product_price*4,",
									"                //             \"quantity\": 4",
									"                //         }];",
									"                //         break;",
									"                //     case \"Thùng\":",
									"                //         list_uom = [{",
									"                //             \"name\":\"Lon\",",
									"                //             \"quantity\":parseFloat((1/24).toFixed(2))",
									"                //         },{",
									"                //             \"name\":\"Lốc\",",
									"                //             \"quantity\":parseFloat((1/4).toFixed(2))",
									"                //         }];",
									"                //         uoms = [{",
									"                //             \"name\":\"Lon\",",
									"                //             \"price\":Math.round(product_price/24),",
									"                //             \"quantity\":parseFloat((1/24).toFixed(2))",
									"                //         },{",
									"                //             \"name\":\"Lốc\",",
									"                //             \"price\": Math.round(product_price/4),",
									"                //             \"quantity\":parseFloat((1/4).toFixed(2))",
									"                //         }];",
									"                //         break;",
									"                //     default:",
									"                //         console.log(\"missing flow\");",
									"                //         break;",
									"                // }",
									"                // console.log(\"debug list_uom: \",list_uom);",
									"",
									"                list_branches_i = [];",
									"                can_pick_quantity_i = 0;",
									"                for(let j in list_branch){",
									"                    let randome_ij = getRandomInt(5,50);",
									"                    list_branches_i[list_branches_i.length] = {",
									"                        \"branch_id\":list_branch[j].id,",
									"                        \"inventory_quantity\": randome_ij,",
									"                        \"is_in_business\": true",
									"                    }",
									"                    can_pick_quantity_i += randome_ij;",
									"                }",
									"                // switch(uom){",
									"                //     case \"Lon\":",
									"                //         for(let i in list_branches_i){",
									"                //             uom_branch_1[uom_branch_1.length] = {",
									"                //                 \"branch_id\":list_branches_i[i].branch_id,",
									"                //                 \"inventory_quantity\":Math.round(list_branches_i[i].inventory_quantity/6*100)/100,",
									"                //                 \"is_in_business\":true,",
									"                //             }",
									"                //             uom_branch_2[uom_branch_2.length] = {",
									"                //                 \"branch_id\":list_branches_i[i].branch_id,",
									"                //                 \"inventory_quantity\":Math.round(list_branches_i[i].inventory_quantity/24*100)/100,",
									"                //                 \"is_in_business\":true,",
									"                //             }",
									"                //         }",
									"                //         uoms = [{",
									"                //             \"name\":\"Lốc\",",
									"                //             \"sale_price\": product_price*6,",
									"                //             \"cost_price\": cost_price*6,",
									"                //             \"quantity\": 6,",
									"                //             \"branches\": uom_branch_1",
									"                //         },{",
									"                //             \"name\":\"Thùng\",",
									"                //             \"sale_price\": product_price*24,",
									"                //             \"cost_price\": cost_price*24,",
									"                //             \"quantity\": 24,",
									"                //             \"branches\": uom_branch_2",
									"                //         }];",
									"                //         break;",
									"                //     case \"Lốc\":",
									"                //         for(let i in list_branches_i){",
									"                //             uom_branch_1[uom_branch_1.length] = {",
									"                //                 \"branch_id\":list_branches_i[i].branch_id,",
									"                //                 \"inventory_quantity\":list_branches_i[i].inventory_quantity*6,",
									"                //                 \"is_in_business\":true,",
									"                //             }",
									"                //             uom_branch_2[uom_branch_2.length] = {",
									"                //                 \"branch_id\":list_branches_i[i].branch_id,",
									"                //                 \"inventory_quantity\":Math.round(list_branches_i[i].inventory_quantity/4*100)/100,",
									"                //                 \"is_in_business\":true,",
									"                //             }",
									"                //         }",
									"                //         uoms = [{",
									"                //             \"name\":\"Lon\",",
									"                //             \"sale_price\": Math.round(product_price/6),",
									"                //             \"cost_price\": Math.round(cost_price/6),",
									"                //             \"quantity\": parseFloat((1/6).toFixed(2)),",
									"                //             \"branches\": uom_branch_1",
									"                //         },{",
									"                //             \"name\":\"Thùng\",",
									"                //             \"sale_price\": product_price*4,",
									"                //             \"cost_price\": cost_price*4,",
									"                //             \"quantity\": 4,",
									"                //             \"branches\": uom_branch_2",
									"                //         }];",
									"                //         break;",
									"                //     case \"Thùng\":",
									"                //         for(let i in list_branches_i){",
									"                //             uom_branch_1[uom_branch_1.length] = {",
									"                //                 \"branch_id\":list_branches_i[i].branch_id,",
									"                //                 \"inventory_quantity\":list_branches_i[i].inventory_quantity*6,",
									"                //                 \"is_in_business\":true,",
									"                //             }",
									"                //             uom_branch_2[uom_branch_2.length] = {",
									"                //                 \"branch_id\":list_branches_i[i].branch_id,",
									"                //                 \"inventory_quantity\":list_branches_i[i].inventory_quantity*24,",
									"                //                 \"is_in_business\":true,",
									"                //             }",
									"                //         }",
									"                //         uoms = [{",
									"                //             \"name\":\"Lon\",",
									"                //             \"sale_price\": Math.round(product_price/24),",
									"                //             \"cost_price\": Math.round(cost_price/24),",
									"                //             \"quantity\": parseFloat((1/24).toFixed(2)),",
									"                //             \"branches\": uom_branch_1",
									"                //         },{",
									"                //             \"name\":\"Lốc\",",
									"                //             \"sale_price\": Math.round(product_price/4),",
									"                //             \"cost_price\": Math.round(cost_price/4),",
									"                //             \"quantity\": parseFloat((1/4).toFixed(2)),",
									"                //             \"branches\": uom_branch_2",
									"                //         }];",
									"                //         break;",
									"                //     default:",
									"                //         console.log(\"missing flow\");",
									"                //         break;",
									"                // }",
									"",
									"                // track_inventory bắt buộc true => nào OPEN API thì validate",
									"",
									"                list_sku = [{",
									"                    \"allow_negative_inventory\": true, // chấp nhận khi bị âm",
									"                    \"attributes\": [],",
									"                    \"bar_code\": \"\",",
									"                    \"can_pick_quantity\": can_pick_quantity_i, // có thể mua",
									"                    \"cost_price\": cost_price,",
									"                    \"images\": [],",
									"                    \"initial_inventory_quantity\": can_pick_quantity_i, // tồn kho ban đầu?",
									"                    \"is_hidden\": false,",
									"                    \"is_in_business\": true,",
									"                    \"priority\": 0, // case này chỉ có đúng 1 sku",
									"                    // \"product_id\": \"string\",",
									"                    \"sale_price\": product_price,",
									"                    \"selling_price\": Math.round(product_price*0.9),",
									"                    \"sku_code\": product_code,",
									"                    \"sku_name\": product_name,",
									"                    \"track_inventory\": track_inventory,",
									"                    \"branches\":list_branches_i,",
									"                    // \"uom\": uom, // imei product ko có uom",
									"                    // \"uoms\": uoms,",
									"                    \"warning_quantity\": 0,",
									"                    \"weight\":weight,",
									"                    \"weight_unit\": weight_unit,",
									"                    \"wholesales\": [] // giá sĩ",
									"                }];",
									"                break;",
									"            default:",
									"                console.log(\"Missing flow\");",
									"                break;",
									"        }",
									"        // console.log(\"debug list_sku: \",list_sku);",
									"        break;",
									"    case 5:",
									"        let priority = 0;",
									"        switch(configs.product_type){",
									"            case \"physical\":",
									"                console.log(\"Create physical - variant product, include uom\");",
									"                product_name = \"[API] physical variant \" + randomChars(8);",
									"                // product_price = getRandomInt(500,1990)*100;",
									"                // cost_price = product_price/2;",
									"                product_code = \"PRD\" + randomChars(5);",
									"",
									"                // hiện tại uom gốc không nhất thiết phải nhỏ nhất",
									"                uom = \"Lon\" // default_uom[getRandomInt(0,default_uom.length -1)]; //getRandomInt(0,default_uom.length -1)",
									"                console.log(\"uom: \" + uom);",
									"                switch(uom){",
									"                    case \"Lon\":",
									"                        list_uom = [{",
									"                            \"name\":\"Lốc\",",
									"                            \"quantity\": 6",
									"                        },{",
									"                            \"name\":\"Thùng\",",
									"                            \"quantity\": 24",
									"                        }];",
									"                        break;",
									"                    case \"Lốc\":",
									"                        list_uom = [{",
									"                            \"name\":\"Lon\",",
									"                            \"quantity\":parseFloat((1/6).toFixed(2))",
									"                        },{",
									"                            \"name\":\"Thùng\",",
									"                            \"quantity\": 4",
									"                        }];",
									"                        break;",
									"                    case \"Thùng\":",
									"                        list_uom = [{",
									"                            \"name\":\"Lon\",",
									"                            \"quantity\":parseFloat((1/24).toFixed(2))",
									"                        },{",
									"                            \"name\":\"Lốc\",",
									"                            \"quantity\":parseFloat((1/4).toFixed(2))",
									"                        }];",
									"                        break;",
									"                    default:",
									"                        console.log(\"missing flow\");",
									"                        break;",
									"                }",
									"                // console.log(\"debug list_uom: \",list_uom);",
									"                ",
									"                for(let i in random_pos_attribue){",
									"                    let random_total_att_i = getRandomInt(1,default_attribute[random_pos_attribue[i]].value.length); // default_attribute[random_pos_attribue[i]].value.length",
									"                    // console.log(\"random_total_att_i: \" + random_total_att_i);",
									"                    let random_pos_att_i = randNotDupe(0,default_attribute[random_pos_attribue[i]].value.length - 1, random_total_att_i);",
									"                    // console.log(\"random_pos_att_i: \" + random_pos_att_i);",
									"                    let list_attribute_i = [];",
									"                    for(let j in random_pos_att_i){",
									"                        list_attribute_i[list_attribute_i.length] = {",
									"                            \"name\":default_attribute[random_pos_attribue[i]].value[random_pos_att_i[j]]",
									"                        }",
									"                    }",
									"",
									"                    list_variant[list_variant.length] = {",
									"                        \"name\": default_attribute[random_pos_attribue[i]].name,",
									"                        \"list_attribute\": list_attribute_i",
									"                    }",
									"                }",
									"                // console.log(\"debug list_variant: \",list_variant);",
									"",
									"                // let term_list = combineAttributes2(list_variant);",
									"                // console.log(\"debug term_list: \",term_list);",
									"                switch(list_variant.length){",
									"                    case 1:",
									"                        for(let i in list_variant[0].list_attribute){",
									"                            product_price = getRandomInt(500,1990)*100;",
									"                            cost_price = product_price/2;",
									"",
									"                            let sku_name_i = \"\";",
									"                            sku_name_i += list_variant[0].list_attribute[i].name;",
									"                            let attributes_i = [];",
									"                            attributes_i[attributes_i.length] = {",
									"                                \"attribute\": list_variant[0].list_attribute[i].name,",
									"                                \"attribute_type\": list_variant[0].name",
									"                            }",
									"",
									"                            let list_branches_i = [];",
									"                            let can_pick_quantity_i = 0;",
									"                            for(let j in list_branch){",
									"                                let randome_ij = getRandomInt(5,50);",
									"                                list_branches_i[list_branches_i.length] = {",
									"                                    \"branch_id\":list_branch[j].id,",
									"                                    \"inventory_quantity\": randome_ij,",
									"                                    \"is_in_business\": true",
									"                                }",
									"                                can_pick_quantity_i += randome_ij;",
									"                            }",
									"",
									"                            uom_branch_1 = []; uom_branch_2 = []; // cần reset lại trước",
									"                            switch(uom){",
									"                                case \"Lon\":",
									"                                    for(let i in list_branches_i){",
									"                                        uom_branch_1[uom_branch_1.length] = {",
									"                                            \"branch_id\":list_branches_i[i].branch_id,",
									"                                            \"inventory_quantity\":Math.round(list_branches_i[i].inventory_quantity/6*100)/100,",
									"                                            \"is_in_business\":true,",
									"                                        }",
									"                                        uom_branch_2[uom_branch_2.length] = {",
									"                                            \"branch_id\":list_branches_i[i].branch_id,",
									"                                            \"inventory_quantity\":Math.round(list_branches_i[i].inventory_quantity/24*100)/100,",
									"                                            \"is_in_business\":true,",
									"                                        }",
									"                                    }",
									"                                    uoms = [{",
									"                                        \"name\":\"Lốc\",",
									"                                        \"sale_price\": product_price*6,",
									"                                        \"cost_price\": cost_price*6,",
									"                                        \"quantity\": 6,",
									"                                        \"branches\": uom_branch_1",
									"                                    },{",
									"                                        \"name\":\"Thùng\",",
									"                                        \"sale_price\": product_price*24,",
									"                                        \"cost_price\": cost_price*24,",
									"                                        \"quantity\": 24,",
									"                                        \"branches\": uom_branch_2",
									"                                    }];",
									"                                    break;",
									"                                case \"Lốc\":",
									"                                    for(let i in list_branches_i){",
									"                                        uom_branch_1[uom_branch_1.length] = {",
									"                                            \"branch_id\":list_branches_i[i].branch_id,",
									"                                            \"inventory_quantity\":list_branches_i[i].inventory_quantity*6,",
									"                                            \"is_in_business\":true,",
									"                                        }",
									"                                        uom_branch_2[uom_branch_2.length] = {",
									"                                            \"branch_id\":list_branches_i[i].branch_id,",
									"                                            \"inventory_quantity\":Math.round(list_branches_i[i].inventory_quantity/4*100)/100,",
									"                                            \"is_in_business\":true,",
									"                                        }",
									"                                    }",
									"                                    uoms = [{",
									"                                        \"name\":\"Lon\",",
									"                                        \"sale_price\": Math.round(product_price/6),",
									"                                        \"cost_price\": Math.round(cost_price/6),",
									"                                        \"quantity\": parseFloat((1/6).toFixed(2))",
									"                                        // \"branches\": uom_branch_1",
									"                                    },{",
									"                                        \"name\":\"Thùng\",",
									"                                        \"sale_price\": product_price*4,",
									"                                        \"cost_price\": cost_price*4,",
									"                                        \"quantity\": 4",
									"                                        // \"branches\": uom_branch_2",
									"                                    }];",
									"                                    break;",
									"                                case \"Thùng\":",
									"                                    for(let i in list_branches_i){",
									"                                        uom_branch_1[uom_branch_1.length] = {",
									"                                            \"branch_id\":list_branches_i[i].branch_id,",
									"                                            \"inventory_quantity\":list_branches_i[i].inventory_quantity*6,",
									"                                            \"is_in_business\":true,",
									"                                        }",
									"                                        uom_branch_2[uom_branch_2.length] = {",
									"                                            \"branch_id\":list_branches_i[i].branch_id,",
									"                                            \"inventory_quantity\":list_branches_i[i].inventory_quantity*24,",
									"                                            \"is_in_business\":true,",
									"                                        }",
									"                                    }",
									"                                    uoms = [{",
									"                                        \"name\":\"Lon\",",
									"                                        \"sale_price\": Math.round(product_price/24),",
									"                                        \"cost_price\": Math.round(cost_price/24),",
									"                                        \"quantity\": parseFloat((1/24).toFixed(2))",
									"                                        // \"branches\": uom_branch_1",
									"                                    },{",
									"                                        \"name\":\"Lốc\",",
									"                                        \"sale_price\": Math.round(product_price/4),",
									"                                        \"cost_price\": Math.round(cost_price/4),",
									"                                        \"quantity\": parseFloat((1/4).toFixed(2))",
									"                                        // \"branches\": uom_branch_2",
									"                                    }];",
									"                                    break;",
									"                                default:",
									"                                    console.log(\"missing flow\");",
									"                                    break;",
									"                            }",
									"",
									"                            let track_inventory_i = false;",
									"                            if(getRandomInt(0,1)) {",
									"                                track_inventory_i = true;",
									"                            }",
									"",
									"                            list_sku[list_sku.length] = {",
									"                                \"allow_negative_inventory\": true, // chấp nhận khi bị âm",
									"                                \"attributes\": attributes_i,",
									"                                \"bar_code\": \"\",",
									"                                \"can_pick_quantity\": can_pick_quantity_i, // có thể mua => chỉ tham khảo, số lượng lấy từ list_branches",
									"                                \"cost_price\": cost_price,",
									"                                \"images\": [],",
									"                                \"initial_inventory_quantity\": can_pick_quantity_i, // tồn kho ban đầu?",
									"                                \"is_hidden\": false,",
									"                                \"is_in_business\": true,",
									"                                \"priority\": priority,",
									"                                // \"product_id\": \"string\",",
									"                                \"sale_price\": product_price,",
									"                                \"selling_price\": Math.round(product_price*0.9),",
									"                                \"sku_code\": product_code + i,",
									"                                \"sku_name\": product_name + \" - \" + sku_name_i,",
									"                                \"track_inventory\": track_inventory_i,",
									"                                \"branches\":list_branches_i,",
									"                                \"uom\": uom,",
									"                                \"uoms\": uoms,",
									"                                \"warning_quantity\": 0,",
									"                                \"weight\":weight,",
									"                                \"weight_unit\": weight_unit,",
									"                                \"wholesales\": [] // giá sĩ",
									"                            };",
									"                            priority++;",
									"                        }",
									"                        break;",
									"                    case 2:",
									"                        for(let i in list_variant[0].list_attribute){",
									"                            product_price = getRandomInt(500,1990)*100;",
									"                            cost_price = product_price/2;",
									"",
									"                            for(let j in list_variant[1].list_attribute){",
									"                                let attributes_ij = [];",
									"                                let sku_name_ij = \"\";",
									"                                sku_name_ij += list_variant[0].list_attribute[i].name + \"-\" + list_variant[1].list_attribute[j].name;",
									"                                attributes_ij[attributes_ij.length] = {",
									"                                    \"attribute\": list_variant[0].list_attribute[i].name,",
									"                                    \"attribute_type\": list_variant[0].name",
									"                                }",
									"                                attributes_ij[attributes_ij.length] = {",
									"                                    \"attribute\": list_variant[1].list_attribute[j].name,",
									"                                    \"attribute_type\": list_variant[1].name",
									"                                }",
									"",
									"                                let product_price_ij, cost_price_ij;",
									"                                if(!configs.is_use_the_same_product_price){",
									"                                    product_price_ij = Math.round(getRandomInt(product_price/2, product_price)/10)*10;",
									"                                } else {",
									"                                    product_price_ij = product_price;",
									"                                }",
									"                                cost_price_ij = Math.round(product_price_ij/2);",
									"",
									"                                let list_branches_i = [];",
									"                                let can_pick_quantity_i = 0;",
									"                                for(let k in list_branch){",
									"                                    let randome_ik = getRandomInt(5,50);",
									"                                    list_branches_i[list_branches_i.length] = {",
									"                                        \"branch_id\":list_branch[k].id,",
									"                                        \"inventory_quantity\": randome_ik,",
									"                                        \"is_in_business\": true",
									"                                    }",
									"                                    can_pick_quantity_i += randome_ik;",
									"                                }",
									"",
									"                                uom_branch_1 = []; uom_branch_2 = []; // cần reset lại trước",
									"                                switch(uom){",
									"                                    case \"Lon\":",
									"                                        for(let i in list_branches_i){",
									"                                            uom_branch_1[uom_branch_1.length] = {",
									"                                                \"branch_id\":list_branches_i[i].branch_id,",
									"                                                \"inventory_quantity\":Math.round(list_branches_i[i].inventory_quantity/6*100)/100,",
									"                                                \"is_in_business\":true,",
									"                                            }",
									"                                            uom_branch_2[uom_branch_2.length] = {",
									"                                                \"branch_id\":list_branches_i[i].branch_id,",
									"                                                \"inventory_quantity\":Math.round(list_branches_i[i].inventory_quantity/24*100)/100,",
									"                                                \"is_in_business\":true,",
									"                                            }",
									"                                        }",
									"                                        uoms = [{",
									"                                            \"name\":\"Lốc\",",
									"                                            \"sale_price\": product_price_ij*6,",
									"                                            \"cost_price\": cost_price_ij*6,",
									"                                            \"quantity\": 6",
									"                                            // \"branches\": uom_branch_1",
									"                                        },{",
									"                                            \"name\":\"Thùng\",",
									"                                            \"sale_price\": product_price_ij*24,",
									"                                            \"cost_price\": cost_price_ij*24,",
									"                                            \"quantity\": 24",
									"                                            // \"branches\": uom_branch_2",
									"                                        }];",
									"                                        break;",
									"                                    case \"Lốc\":",
									"                                        for(let i in list_branches_i){",
									"                                            uom_branch_1[uom_branch_1.length] = {",
									"                                                \"branch_id\":list_branches_i[i].branch_id,",
									"                                                \"inventory_quantity\":list_branches_i[i].inventory_quantity*6,",
									"                                                \"is_in_business\":true,",
									"                                            }",
									"                                            uom_branch_2[uom_branch_2.length] = {",
									"                                                \"branch_id\":list_branches_i[i].branch_id,",
									"                                                \"inventory_quantity\":Math.round(list_branches_i[i].inventory_quantity/4*100)/100,",
									"                                                \"is_in_business\":true,",
									"                                            }",
									"                                        }",
									"                                        uoms = [{",
									"                                            \"name\":\"Lon\",",
									"                                            \"sale_price\": Math.round(product_price_ij/6),",
									"                                            \"cost_price\": Math.round(cost_price_ij/6),",
									"                                            \"quantity\": parseFloat((1/6).toFixed(2))",
									"                                            // \"branches\": uom_branch_1",
									"                                        },{",
									"                                            \"name\":\"Thùng\",",
									"                                            \"sale_price\": product_price_ij*4,",
									"                                            \"cost_price\": cost_price_ij*4,",
									"                                            \"quantity\": 4",
									"                                            // \"branches\": uom_branch_2",
									"                                        }];",
									"                                        break;",
									"                                    case \"Thùng\":",
									"                                        for(let i in list_branches_i){",
									"                                            uom_branch_1[uom_branch_1.length] = {",
									"                                                \"branch_id\":list_branches_i[i].branch_id,",
									"                                                \"inventory_quantity\":list_branches_i[i].inventory_quantity*6,",
									"                                                \"is_in_business\":true,",
									"                                            }",
									"                                            uom_branch_2[uom_branch_2.length] = {",
									"                                                \"branch_id\":list_branches_i[i].branch_id,",
									"                                                \"inventory_quantity\":list_branches_i[i].inventory_quantity*24,",
									"                                                \"is_in_business\":true,",
									"                                            }",
									"                                        }",
									"                                        uoms = [{",
									"                                            \"name\":\"Lon\",",
									"                                            \"sale_price\": Math.round(product_price_ij/24),",
									"                                            \"cost_price\": Math.round(cost_price_ij/24),",
									"                                            \"quantity\": parseFloat((1/24).toFixed(2))",
									"                                            // \"branches\": uom_branch_1",
									"                                        },{",
									"                                            \"name\":\"Lốc\",",
									"                                            \"sale_price\": Math.round(product_price_ij/4),",
									"                                            \"cost_price\": Math.round(cost_price_ij/4),",
									"                                            \"quantity\": parseFloat((1/4).toFixed(2))",
									"                                            // \"branches\": uom_branch_2",
									"                                        }];",
									"                                        break;",
									"                                    default:",
									"                                        console.log(\"missing flow\");",
									"                                        break;",
									"                                }",
									"",
									"                                let track_inventory_i = false;",
									"                                if(getRandomInt(0,1)) {",
									"                                    track_inventory_i = true;",
									"                                }",
									"",
									"                                list_sku[list_sku.length] = {",
									"                                    \"allow_negative_inventory\": true, // chấp nhận khi bị âm",
									"                                    \"attributes\": attributes_ij,",
									"                                    \"bar_code\": \"\",",
									"                                    \"can_pick_quantity\": can_pick_quantity_i, // có thể mua",
									"                                    \"cost_price\": cost_price_ij,",
									"                                    \"images\": [],",
									"                                    \"initial_inventory_quantity\": can_pick_quantity_i, // tồn kho ban đầu?",
									"                                    \"is_hidden\": false,",
									"                                    \"is_in_business\": true,",
									"                                    \"priority\": priority,",
									"                                    // \"product_id\": \"string\",",
									"                                    \"sale_price\": product_price_ij,",
									"                                    \"selling_price\": Math.round(product_price_ij*0.9),",
									"                                    \"sku_code\": product_code + i + j,",
									"                                    \"sku_name\": product_name + \" - \" + sku_name_ij,",
									"                                    \"track_inventory\": track_inventory_i,",
									"                                    \"branches\":list_branches_i,",
									"                                    \"uom\": uom,",
									"                                    \"uoms\": uoms,",
									"                                    \"warning_quantity\": 0,",
									"                                    \"weight\":weight,",
									"                                    \"weight_unit\":weight_unit,",
									"                                    \"wholesales\": [] // giá sĩ",
									"                                };",
									"                                priority++;",
									"                            }",
									"                        }",
									"                        break;",
									"                    case 3:",
									"                        for(let i in list_variant[0].list_attribute){",
									"                            product_price = getRandomInt(500,1990)*100;",
									"                            cost_price = product_price/2;",
									"",
									"                            for(let j in list_variant[1].list_attribute){",
									"                                for(let k in list_variant[2].list_attribute){",
									"                                    let attributes_ijk = [];",
									"                                    let sku_name_ijk = \"\";",
									"                                    sku_name_ijk += list_variant[0].list_attribute[i].name + \"-\" + list_variant[1].list_attribute[j].name + \"-\" + list_variant[2].list_attribute[k].name;",
									"                                    attributes_ijk[attributes_ijk.length] = {",
									"                                        \"attribute\": list_variant[0].list_attribute[i].name,",
									"                                        \"attribute_type\": list_variant[0].name",
									"                                    }",
									"                                    attributes_ijk[attributes_ijk.length] = {",
									"                                        \"attribute\": list_variant[1].list_attribute[j].name,",
									"                                        \"attribute_type\": list_variant[1].name",
									"                                    }",
									"                                    attributes_ijk[attributes_ijk.length] = {",
									"                                        \"attribute\": list_variant[2].list_attribute[k].name,",
									"                                        \"attribute_type\": list_variant[2].name",
									"                                    }",
									"",
									"                                    let product_price_ijk, cost_price_ijk;",
									"                                    if(!configs.is_use_the_same_product_price){",
									"                                        product_price_ijk = Math.round(getRandomInt(product_price/2, product_price)/10)*10;",
									"                                    } else {",
									"                                        product_price_ijk = product_price;",
									"                                    }",
									"                                    cost_price_ijk = product_price_ijk/2;",
									"",
									"                                    let list_branches_i = [];",
									"                                    let can_pick_quantity_i = 0;",
									"                                    for(let l in list_branch){",
									"                                        let randome_il = getRandomInt(5,50);",
									"                                        list_branches_i[list_branches_i.length] = {",
									"                                            \"branch_id\":list_branch[l].id,",
									"                                            \"inventory_quantity\": randome_il,",
									"                                            \"is_in_business\": true",
									"                                        }",
									"                                        can_pick_quantity_i += randome_il;",
									"                                    }",
									"",
									"                                    uom_branch_1 = []; uom_branch_2 = []; // cần reset lại trước",
									"                                    switch(uom){",
									"                                        case \"Lon\":",
									"                                            for(let i in list_branches_i){",
									"                                                uom_branch_1[uom_branch_1.length] = {",
									"                                                    \"branch_id\":list_branches_i[i].branch_id,",
									"                                                    \"inventory_quantity\":Math.round(list_branches_i[i].inventory_quantity/6*100)/100,",
									"                                                    \"is_in_business\":true,",
									"                                                }",
									"                                                uom_branch_2[uom_branch_2.length] = {",
									"                                                    \"branch_id\":list_branches_i[i].branch_id,",
									"                                                    \"inventory_quantity\":Math.round(list_branches_i[i].inventory_quantity/24*100)/100,",
									"                                                    \"is_in_business\":true,",
									"                                                }",
									"                                            }",
									"                                            uoms = [{",
									"                                                \"name\":\"Lốc\",",
									"                                                \"sale_price\": product_price_ijk*6,",
									"                                                \"cost_price\": cost_price_ijk*6,",
									"                                                \"quantity\": 6",
									"                                                // \"branches\": uom_branch_1",
									"                                            },{",
									"                                                \"name\":\"Thùng\",",
									"                                                \"sale_price\": product_price_ijk*24,",
									"                                                \"cost_price\": cost_price_ijk*24,",
									"                                                \"quantity\": 24",
									"                                                // \"branches\": uom_branch_2",
									"                                            }];",
									"                                            break;",
									"                                        case \"Lốc\":",
									"                                            for(let i in list_branches_i){",
									"                                                uom_branch_1[uom_branch_1.length] = {",
									"                                                    \"branch_id\":list_branches_i[i].branch_id,",
									"                                                    \"inventory_quantity\":list_branches_i[i].inventory_quantity*6,",
									"                                                    \"is_in_business\":true,",
									"                                                }",
									"                                                uom_branch_2[uom_branch_2.length] = {",
									"                                                    \"branch_id\":list_branches_i[i].branch_id,",
									"                                                    \"inventory_quantity\":Math.round(list_branches_i[i].inventory_quantity/4*100)/100,",
									"                                                    \"is_in_business\":true,",
									"                                                }",
									"                                            }",
									"                                            uoms = [{",
									"                                                \"name\":\"Lon\",",
									"                                                \"sale_price\": Math.round(product_price_ijk/6),",
									"                                                \"cost_price\": Math.round(cost_price_ijk/6),",
									"                                                \"quantity\": parseFloat((1/6).toFixed(2))",
									"                                                // \"branches\": uom_branch_1",
									"                                            },{",
									"                                                \"name\":\"Thùng\",",
									"                                                \"sale_price\": product_price_ijk*4,",
									"                                                \"cost_price\": cost_price_ijk*4,",
									"                                                \"quantity\": 4",
									"                                                // \"branches\": uom_branch_2",
									"                                            }];",
									"                                            break;",
									"                                        case \"Thùng\":",
									"                                            for(let i in list_branches_i){",
									"                                                uom_branch_1[uom_branch_1.length] = {",
									"                                                    \"branch_id\":list_branches_i[i].branch_id,",
									"                                                    \"inventory_quantity\":list_branches_i[i].inventory_quantity*6,",
									"                                                    \"is_in_business\":true,",
									"                                                }",
									"                                                uom_branch_2[uom_branch_2.length] = {",
									"                                                    \"branch_id\":list_branches_i[i].branch_id,",
									"                                                    \"inventory_quantity\":list_branches_i[i].inventory_quantity*24,",
									"                                                    \"is_in_business\":true,",
									"                                                }",
									"                                            }",
									"                                            uoms = [{",
									"                                                \"name\":\"Lon\",",
									"                                                \"sale_price\": Math.round(product_price_ijk/24),",
									"                                                \"cost_price\": Math.round(cost_price_ijk/24),",
									"                                                \"quantity\": parseFloat((1/24).toFixed(2))",
									"                                                // \"branches\": uom_branch_1",
									"                                            },{",
									"                                                \"name\":\"Lốc\",",
									"                                                \"sale_price\": Math.round(product_price_ijk/4),",
									"                                                \"cost_price\": Math.round(cost_price_ijk/4),",
									"                                                \"quantity\": parseFloat((1/4).toFixed(2))",
									"                                                // \"branches\": uom_branch_2",
									"                                            }];",
									"                                            break;",
									"                                        default:",
									"                                            console.log(\"missing flow\");",
									"                                            break;",
									"                                    }",
									"",
									"                                    let track_inventory_i = false;",
									"                                    if(getRandomInt(0,1)) {",
									"                                        track_inventory_i = true;",
									"                                    }",
									"",
									"                                    list_sku[list_sku.length] = {",
									"                                        \"allow_negative_inventory\": true, // chấp nhận khi bị âm",
									"                                        \"attributes\": attributes_ijk,",
									"                                        \"bar_code\": \"\",",
									"                                        \"can_pick_quantity\": can_pick_quantity_i, // có thể mua",
									"                                        \"cost_price\": cost_price_ijk,",
									"                                        \"images\": [],",
									"                                        \"initial_inventory_quantity\": can_pick_quantity_i, // tồn kho ban đầu?",
									"                                        \"is_hidden\": false,",
									"                                        \"is_in_business\": true,",
									"                                        \"priority\": priority,",
									"                                        // \"product_id\": \"string\",",
									"                                        \"sale_price\": product_price_ijk,",
									"                                        \"selling_price\": Math.round(product_price_ijk*0.9),",
									"                                        \"sku_code\": product_code + i + j + k,",
									"                                        \"sku_name\": product_name + \" - \" + sku_name_ijk,",
									"                                        \"track_inventory\": track_inventory_i,",
									"                                        \"branches\":list_branches_i,",
									"                                        \"uom\": uom,",
									"                                        \"uoms\": uoms,",
									"                                        \"warning_quantity\": 0,",
									"                                        \"weight\":weight,",
									"                                        \"weight_unit\":weight_unit, // g, kg",
									"                                        \"wholesales\": [] // giá sĩ",
									"                                    };",
									"                                    priority++;",
									"                                }",
									"                            }",
									"                        }",
									"                        break;",
									"                    case 4:",
									"                        for(let i in list_variant[0].list_attribute){",
									"                            product_price = getRandomInt(500,1990)*100;",
									"                            cost_price = product_price/2;",
									"",
									"                            for(let j in list_variant[1].list_attribute){",
									"                                for(let k in list_variant[2].list_attribute){",
									"                                    for(let l in list_variant[3].list_attribute){",
									"                                        let attributes_ijkl = [];",
									"                                        let sku_name_ijkl = \"\";",
									"                                        sku_name_ijkl += list_variant[0].list_attribute[i].name + \"-\" + list_variant[1].list_attribute[j].name + \"-\" + list_variant[2].list_attribute[k].name + \"-\" + list_variant[3].list_attribute[l].name;",
									"                                        attributes_ijkl[attributes_ijkl.length] = {",
									"                                            \"attribute\": list_variant[0].list_attribute[i].name,",
									"                                            \"attribute_type\": list_variant[0].name",
									"                                        }",
									"                                        attributes_ijkl[attributes_ijkl.length] = {",
									"                                            \"attribute\": list_variant[1].list_attribute[j].name,",
									"                                            \"attribute_type\": list_variant[1].name",
									"                                        }",
									"                                        attributes_ijkl[attributes_ijkl.length] = {",
									"                                            \"attribute\": list_variant[2].list_attribute[k].name,",
									"                                            \"attribute_type\": list_variant[2].name",
									"                                        }",
									"                                        attributes_ijkl[attributes_ijkl.length] = {",
									"                                            \"attribute\": list_variant[3].list_attribute[l].name,",
									"                                            \"attribute_type\": list_variant[3].name",
									"                                        }",
									"",
									"                                        let product_price_ijkl, cost_price_ijkl;",
									"                                        if(!configs.is_use_the_same_product_price){",
									"                                            product_price_ijkl = Math.round(getRandomInt(product_price/2, product_price)/10)*10;",
									"                                        } else {",
									"                                            product_price_ijkl = product_price;",
									"                                        }",
									"                                        cost_price_ijkl = Math.round(product_price_ijkl/2);",
									"",
									"                                        let list_branches_i = [];",
									"                                        let can_pick_quantity_i = 0;",
									"                                        for(let m in list_branch){",
									"                                            let randome_im = getRandomInt(5,50);",
									"                                            list_branches_i[list_branches_i.length] = {",
									"                                                \"branch_id\":list_branch[m].id,",
									"                                                \"inventory_quantity\": randome_im,",
									"                                                \"is_in_business\": true",
									"                                            }",
									"                                            can_pick_quantity_i += randome_im;",
									"                                        }",
									"",
									"                                        uom_branch_1 = []; uom_branch_2 = []; // cần reset lại trước",
									"                                        switch(uom){",
									"                                            case \"Lon\":",
									"                                                for(let i in list_branches_i){",
									"                                                    uom_branch_1[uom_branch_1.length] = {",
									"                                                        \"branch_id\":list_branches_i[i].branch_id,",
									"                                                        \"inventory_quantity\":Math.round(list_branches_i[i].inventory_quantity/6*100)/100,",
									"                                                        \"is_in_business\":true,",
									"                                                    }",
									"                                                    uom_branch_2[uom_branch_2.length] = {",
									"                                                        \"branch_id\":list_branches_i[i].branch_id,",
									"                                                        \"inventory_quantity\":Math.round(list_branches_i[i].inventory_quantity/24*100)/100,",
									"                                                        \"is_in_business\":true,",
									"                                                    }",
									"                                                }",
									"                                                uoms = [{",
									"                                                    \"name\":\"Lốc\",",
									"                                                    \"sale_price\": product_price_ijkl*6,",
									"                                                    \"cost_price\": cost_price_ijkl*6,",
									"                                                    \"quantity\": 6",
									"                                                    // \"branches\": uom_branch_1",
									"                                                },{",
									"                                                    \"name\":\"Thùng\",",
									"                                                    \"sale_price\": product_price_ijkl*24,",
									"                                                    \"cost_price\": cost_price_ijkl*24,",
									"                                                    \"quantity\": 24",
									"                                                    // \"branches\": uom_branch_2",
									"                                                }];",
									"                                                break;",
									"                                            case \"Lốc\":",
									"                                                for(let i in list_branches_i){",
									"                                                    uom_branch_1[uom_branch_1.length] = {",
									"                                                        \"branch_id\":list_branches_i[i].branch_id,",
									"                                                        \"inventory_quantity\":list_branches_i[i].inventory_quantity*6,",
									"                                                        \"is_in_business\":true,",
									"                                                    }",
									"                                                    uom_branch_2[uom_branch_2.length] = {",
									"                                                        \"branch_id\":list_branches_i[i].branch_id,",
									"                                                        \"inventory_quantity\":Math.round(list_branches_i[i].inventory_quantity/4*100)/100,",
									"                                                        \"is_in_business\":true,",
									"                                                    }",
									"                                                }",
									"                                                uoms = [{",
									"                                                    \"name\":\"Lon\",",
									"                                                    \"sale_price\": Math.round(product_price_ijkl/6),",
									"                                                    \"cost_price\": Math.round(cost_price_ijkl/6),",
									"                                                    \"quantity\": parseFloat((1/6).toFixed(2))",
									"                                                    // \"branches\": uom_branch_1",
									"                                                },{",
									"                                                    \"name\":\"Thùng\",",
									"                                                    \"sale_price\": product_price_ijkl*4,",
									"                                                    \"cost_price\": cost_price_ijkl*4,",
									"                                                    \"quantity\": 4",
									"                                                    // \"branches\": uom_branch_2",
									"                                                }];",
									"                                                break;",
									"                                            case \"Thùng\":",
									"                                                for(let i in list_branches_i){",
									"                                                    uom_branch_1[uom_branch_1.length] = {",
									"                                                        \"branch_id\":list_branches_i[i].branch_id,",
									"                                                        \"inventory_quantity\":list_branches_i[i].inventory_quantity*6,",
									"                                                        \"is_in_business\":true,",
									"                                                    }",
									"                                                    uom_branch_2[uom_branch_2.length] = {",
									"                                                        \"branch_id\":list_branches_i[i].branch_id,",
									"                                                        \"inventory_quantity\":list_branches_i[i].inventory_quantity*24,",
									"                                                        \"is_in_business\":true,",
									"                                                    }",
									"                                                }",
									"                                                uoms = [{",
									"                                                    \"name\":\"Lon\",",
									"                                                    \"sale_price\": Math.round(product_price_ijkl/24),",
									"                                                    \"cost_price\": Math.round(cost_price_ijkl/24),",
									"                                                    \"quantity\": parseFloat((1/24).toFixed(2))",
									"                                                    // \"branches\": uom_branch_1",
									"                                                },{",
									"                                                    \"name\":\"Lốc\",",
									"                                                    \"sale_price\": Math.round(product_price_ijkl/4),",
									"                                                    \"cost_price\": Math.round(cost_price_ijkl/4),",
									"                                                    \"quantity\": parseFloat((1/4).toFixed(2))",
									"                                                    // \"branches\": uom_branch_2",
									"                                                }];",
									"                                                break;",
									"                                            default:",
									"                                                console.log(\"missing flow\");",
									"                                                break;",
									"                                        }",
									"",
									"                                        let track_inventory_i = false;",
									"                                        if(getRandomInt(0,1)) {",
									"                                            track_inventory_i = true;",
									"                                        }",
									"",
									"                                        list_sku[list_sku.length] = {",
									"                                            \"allow_negative_inventory\": true, // chấp nhận khi bị âm",
									"                                            \"attributes\": attributes_ijkl,",
									"                                            \"bar_code\": \"\",",
									"                                            \"can_pick_quantity\": can_pick_quantity_i, // có thể mua",
									"                                            \"cost_price\": cost_price_ijkl,",
									"                                            \"images\": [],",
									"                                            \"initial_inventory_quantity\": can_pick_quantity_i, // tồn kho ban đầu?",
									"                                            \"is_hidden\": false,",
									"                                            \"is_in_business\": true,",
									"                                            \"priority\": priority,",
									"                                            // \"product_id\": \"string\",",
									"                                            \"sale_price\": product_price_ijkl,",
									"                                            \"selling_price\": Math.round(product_price_ijkl*0.9),",
									"                                            \"sku_code\": product_code + i + j + k + l,",
									"                                            \"sku_name\": product_name + \" - \" + sku_name_ijkl,",
									"                                            \"track_inventory\": track_inventory_i,",
									"                                            \"branches\":list_branches_i,",
									"                                            \"uom\": uom,",
									"                                            \"uoms\": uoms,",
									"                                            \"warning_quantity\": 0,",
									"                                            \"weight\":weight,",
									"                                            \"weight_unit\":weight_unit, // g, kg",
									"                                            \"wholesales\": [] // giá sĩ",
									"                                        };",
									"                                        priority++;",
									"                                    }",
									"                                }",
									"                            }",
									"                        }",
									"                        break;",
									"                    default:",
									"                        console.log(\"missing variant\");",
									"                        break;",
									"                }",
									"                break;",
									"            case \"batch_product\":",
									"                console.log(\"Create batch_product - variant product, include uom\");",
									"                product_name = \"[API] batch variant \" + randomChars(8);",
									"                // product_price = getRandomInt(500,1990)*100;",
									"                // cost_price = product_price/2;",
									"                product_code = \"PRD\" + randomChars(5);",
									"",
									"                // hiện tại uom gốc không nhất thiết phải nhỏ nhất => tạm thời bắt buộc nhỏ nhất",
									"                uom = default_uom[0]; //getRandomInt(0,default_uom.length -1)",
									"                console.log(\"uom: \" + uom);",
									"                switch(uom){",
									"                    case \"Lon\":",
									"                        list_uom = [{",
									"                            \"name\":\"Lốc\",",
									"                            \"quantity\": 6",
									"                        },{",
									"                            \"name\":\"Thùng\",",
									"                            \"quantity\": 24",
									"                        }];",
									"                        break;",
									"                    case \"Lốc\":",
									"                        list_uom = [{",
									"                            \"name\":\"Lon\",",
									"                            \"quantity\":parseFloat((1/6).toFixed(2))",
									"                        },{",
									"                            \"name\":\"Thùng\",",
									"                            \"quantity\": 4",
									"                        }];",
									"                        break;",
									"                    case \"Thùng\":",
									"                        list_uom = [{",
									"                            \"name\":\"Lon\",",
									"                            \"quantity\":parseFloat((1/24).toFixed(2))",
									"                        },{",
									"                            \"name\":\"Lốc\",",
									"                            \"quantity\":parseFloat((1/4).toFixed(2))",
									"                        }];",
									"                        break;",
									"                    default:",
									"                        console.log(\"missing flow\");",
									"                        break;",
									"                }",
									"                // console.log(\"debug list_uom: \",list_uom);",
									"                ",
									"                for(let i in random_pos_attribue){",
									"                    let random_total_att_i = getRandomInt(1,default_attribute[random_pos_attribue[i]].value.length); // default_attribute[random_pos_attribue[i]].value.length",
									"                    // console.log(\"random_total_att_i: \" + random_total_att_i);",
									"                    let random_pos_att_i = randNotDupe(0,default_attribute[random_pos_attribue[i]].value.length - 1, random_total_att_i);",
									"                    // console.log(\"random_pos_att_i: \" + random_pos_att_i);",
									"                    let list_attribute_i = [];",
									"                    for(let j in random_pos_att_i){",
									"                        list_attribute_i[list_attribute_i.length] = {",
									"                            \"name\":default_attribute[random_pos_attribue[i]].value[random_pos_att_i[j]]",
									"                        }",
									"                    }",
									"",
									"                    list_variant[list_variant.length] = {",
									"                        \"name\": default_attribute[random_pos_attribue[i]].name,",
									"                        \"list_attribute\": list_attribute_i",
									"                    }",
									"                }",
									"                // console.log(\"debug list_variant: \",list_variant);",
									"",
									"                // let term_list = combineAttributes2(list_variant);",
									"                // console.log(\"debug term_list: \",term_list);",
									"                switch(list_variant.length){",
									"                    case 1:",
									"                        for(let i in list_variant[0].list_attribute){",
									"                            product_price = getRandomInt(500,1990)*100;",
									"                            cost_price = product_price/2;",
									"",
									"                            let sku_name_i = \"\";",
									"                            sku_name_i += list_variant[0].list_attribute[i].name;",
									"                            let attributes_i = [];",
									"                            attributes_i[attributes_i.length] = {",
									"                                \"attribute\": list_variant[0].list_attribute[i].name,",
									"                                \"attribute_type\": list_variant[0].name",
									"                            }",
									"",
									"                            let list_branches_i = [];",
									"                            let can_pick_quantity_i = 0;",
									"                            for(let j in list_branch){",
									"                                let randome_ij = 0; // getRandomInt(5,50); // batch bắt buộc truyền là 0, muốn gì phải nhập hàng => OPEN API sẽ check",
									"                                list_branches_i[list_branches_i.length] = {",
									"                                    \"branch_id\":list_branch[j].id,",
									"                                    \"inventory_quantity\": randome_ij,",
									"                                    \"is_in_business\": true",
									"                                }",
									"                                can_pick_quantity_i += randome_ij;",
									"                            }",
									"",
									"                            uom_branch_1 = []; uom_branch_2 = []; // cần reset lại trước",
									"                            switch(uom){",
									"                                case \"Lon\":",
									"                                    for(let i in list_branches_i){",
									"                                        uom_branch_1[uom_branch_1.length] = {",
									"                                            \"branch_id\":list_branches_i[i].branch_id,",
									"                                            \"inventory_quantity\":Math.round(list_branches_i[i].inventory_quantity/6*100)/100,",
									"                                            \"is_in_business\":true,",
									"                                        }",
									"                                        uom_branch_2[uom_branch_2.length] = {",
									"                                            \"branch_id\":list_branches_i[i].branch_id,",
									"                                            \"inventory_quantity\":Math.round(list_branches_i[i].inventory_quantity/24*100)/100,",
									"                                            \"is_in_business\":true,",
									"                                        }",
									"                                    }",
									"                                    uoms = [{",
									"                                        \"name\":\"Lốc\",",
									"                                        \"sale_price\": product_price*6,",
									"                                        \"cost_price\": cost_price*6,",
									"                                        \"quantity\": 6",
									"                                        // \"branches\": uom_branch_1",
									"                                    },{",
									"                                        \"name\":\"Thùng\",",
									"                                        \"sale_price\": product_price*24,",
									"                                        \"cost_price\": cost_price*24,",
									"                                        \"quantity\": 24",
									"                                        // \"branches\": uom_branch_2",
									"                                    }];",
									"                                    break;",
									"                                case \"Lốc\":",
									"                                    for(let i in list_branches_i){",
									"                                        uom_branch_1[uom_branch_1.length] = {",
									"                                            \"branch_id\":list_branches_i[i].branch_id,",
									"                                            \"inventory_quantity\":list_branches_i[i].inventory_quantity*6,",
									"                                            \"is_in_business\":true,",
									"                                        }",
									"                                        uom_branch_2[uom_branch_2.length] = {",
									"                                            \"branch_id\":list_branches_i[i].branch_id,",
									"                                            \"inventory_quantity\":Math.round(list_branches_i[i].inventory_quantity/4*100)/100,",
									"                                            \"is_in_business\":true,",
									"                                        }",
									"                                    }",
									"                                    uoms = [{",
									"                                        \"name\":\"Lon\",",
									"                                        \"sale_price\": Math.round(product_price/6),",
									"                                        \"cost_price\": Math.round(cost_price/6),",
									"                                        \"quantity\": parseFloat((1/6).toFixed(2))",
									"                                        // \"branches\": uom_branch_1",
									"                                    },{",
									"                                        \"name\":\"Thùng\",",
									"                                        \"sale_price\": product_price*4,",
									"                                        \"cost_price\": cost_price*4,",
									"                                        \"quantity\": 4",
									"                                        // \"branches\": uom_branch_2",
									"                                    }];",
									"                                    break;",
									"                                case \"Thùng\":",
									"                                    for(let i in list_branches_i){",
									"                                        uom_branch_1[uom_branch_1.length] = {",
									"                                            \"branch_id\":list_branches_i[i].branch_id,",
									"                                            \"inventory_quantity\":list_branches_i[i].inventory_quantity*6,",
									"                                            \"is_in_business\":true,",
									"                                        }",
									"                                        uom_branch_2[uom_branch_2.length] = {",
									"                                            \"branch_id\":list_branches_i[i].branch_id,",
									"                                            \"inventory_quantity\":list_branches_i[i].inventory_quantity*24,",
									"                                            \"is_in_business\":true,",
									"                                        }",
									"                                    }",
									"                                    uoms = [{",
									"                                        \"name\":\"Lon\",",
									"                                        \"sale_price\": Math.round(product_price/24),",
									"                                        \"cost_price\": Math.round(cost_price/24),",
									"                                        \"quantity\": parseFloat((1/24).toFixed(2))",
									"                                        // \"branches\": uom_branch_1",
									"                                    },{",
									"                                        \"name\":\"Lốc\",",
									"                                        \"sale_price\": Math.round(product_price/4),",
									"                                        \"cost_price\": Math.round(cost_price/4),",
									"                                        \"quantity\": parseFloat((1/4).toFixed(2))",
									"                                        // \"branches\": uom_branch_2",
									"                                    }];",
									"                                    break;",
									"                                default:",
									"                                    console.log(\"missing flow\");",
									"                                    break;",
									"                            }",
									"",
									"                            let track_inventory_i = true; // bắt buộc cho sp batch => nào OPEN API thì validate",
									"",
									"                            list_sku[list_sku.length] = {",
									"                                \"allow_negative_inventory\": true, // chấp nhận khi bị âm",
									"                                \"attributes\": attributes_i,",
									"                                \"bar_code\": \"\",",
									"                                \"can_pick_quantity\": can_pick_quantity_i, // có thể mua => chỉ tham khảo, số lượng lấy từ list_branches",
									"                                \"cost_price\": cost_price,",
									"                                \"images\": [],",
									"                                \"initial_inventory_quantity\": can_pick_quantity_i, // tồn kho ban đầu?",
									"                                \"is_hidden\": false,",
									"                                \"is_in_business\": true,",
									"                                \"priority\": priority,",
									"                                // \"product_id\": \"string\",",
									"                                \"sale_price\": product_price,",
									"                                \"selling_price\": Math.round(product_price*0.9),",
									"                                \"sku_code\": product_code + i,",
									"                                \"sku_name\": product_name + \" - \" + sku_name_i,",
									"                                \"track_inventory\": track_inventory_i,",
									"                                \"branches\":list_branches_i,",
									"                                \"uom\": uom,",
									"                                \"uoms\": uoms,",
									"                                \"warning_quantity\": 0,",
									"                                \"weight\":weight,",
									"                                \"weight_unit\": weight_unit,",
									"                                \"wholesales\": [] // giá sĩ",
									"                            };",
									"                            priority++;",
									"                        }",
									"                        break;",
									"                    case 2:",
									"                        for(let i in list_variant[0].list_attribute){",
									"                            product_price = getRandomInt(500,1990)*100;",
									"                            cost_price = product_price/2;",
									"",
									"                            for(let j in list_variant[1].list_attribute){",
									"                                let attributes_ij = [];",
									"                                let sku_name_ij = \"\";",
									"                                sku_name_ij += list_variant[0].list_attribute[i].name + \"-\" + list_variant[1].list_attribute[j].name;",
									"                                attributes_ij[attributes_ij.length] = {",
									"                                    \"attribute\": list_variant[0].list_attribute[i].name,",
									"                                    \"attribute_type\": list_variant[0].name",
									"                                }",
									"                                attributes_ij[attributes_ij.length] = {",
									"                                    \"attribute\": list_variant[1].list_attribute[j].name,",
									"                                    \"attribute_type\": list_variant[1].name",
									"                                }",
									"",
									"                                let product_price_ij, cost_price_ij;",
									"                                if(!configs.is_use_the_same_product_price){",
									"                                    product_price_ij = Math.round(getRandomInt(product_price/2, product_price)/10)*10;",
									"                                } else {",
									"                                    product_price_ij = product_price;",
									"                                }",
									"                                cost_price_ij = Math.round(product_price_ij/2);",
									"",
									"                                let list_branches_i = [];",
									"                                let can_pick_quantity_i = 0;",
									"                                for(let k in list_branch){",
									"                                    let randome_ik = 0; // getRandomInt(5,50); bắt buộc phải là 0, nào OPEN API sẽ validate",
									"                                    list_branches_i[list_branches_i.length] = {",
									"                                        \"branch_id\":list_branch[k].id,",
									"                                        \"inventory_quantity\": randome_ik,",
									"                                        \"is_in_business\": true",
									"                                    }",
									"                                    can_pick_quantity_i += randome_ik;",
									"                                }",
									"",
									"                                uom_branch_1 = []; uom_branch_2 = []; // cần reset lại trước",
									"                                switch(uom){",
									"                                    case \"Lon\":",
									"                                        for(let i in list_branches_i){",
									"                                            uom_branch_1[uom_branch_1.length] = {",
									"                                                \"branch_id\":list_branches_i[i].branch_id,",
									"                                                \"inventory_quantity\":Math.round(list_branches_i[i].inventory_quantity/6*100)/100,",
									"                                                \"is_in_business\":true,",
									"                                            }",
									"                                            uom_branch_2[uom_branch_2.length] = {",
									"                                                \"branch_id\":list_branches_i[i].branch_id,",
									"                                                \"inventory_quantity\":Math.round(list_branches_i[i].inventory_quantity/24*100)/100,",
									"                                                \"is_in_business\":true,",
									"                                            }",
									"                                        }",
									"                                        uoms = [{",
									"                                            \"name\":\"Lốc\",",
									"                                            \"sale_price\": product_price_ij*6,",
									"                                            \"cost_price\": cost_price_ij*6,",
									"                                            \"quantity\": 6",
									"                                            // \"branches\": uom_branch_1",
									"                                        },{",
									"                                            \"name\":\"Thùng\",",
									"                                            \"sale_price\": product_price_ij*24,",
									"                                            \"cost_price\": cost_price_ij*24,",
									"                                            \"quantity\": 24",
									"                                            // \"branches\": uom_branch_2",
									"                                        }];",
									"                                        break;",
									"                                    case \"Lốc\":",
									"                                        for(let i in list_branches_i){",
									"                                            uom_branch_1[uom_branch_1.length] = {",
									"                                                \"branch_id\":list_branches_i[i].branch_id,",
									"                                                \"inventory_quantity\":list_branches_i[i].inventory_quantity*6,",
									"                                                \"is_in_business\":true,",
									"                                            }",
									"                                            uom_branch_2[uom_branch_2.length] = {",
									"                                                \"branch_id\":list_branches_i[i].branch_id,",
									"                                                \"inventory_quantity\":Math.round(list_branches_i[i].inventory_quantity/4*100)/100,",
									"                                                \"is_in_business\":true,",
									"                                            }",
									"                                        }",
									"                                        uoms = [{",
									"                                            \"name\":\"Lon\",",
									"                                            \"sale_price\": Math.round(product_price_ij/6),",
									"                                            \"cost_price\": Math.round(cost_price_ij/6),",
									"                                            \"quantity\": parseFloat((1/6).toFixed(2))",
									"                                            // \"branches\": uom_branch_1",
									"                                        },{",
									"                                            \"name\":\"Thùng\",",
									"                                            \"sale_price\": product_price_ij*4,",
									"                                            \"cost_price\": cost_price_ij*4,",
									"                                            \"quantity\": 4",
									"                                            // \"branches\": uom_branch_2",
									"                                        }];",
									"                                        break;",
									"                                    case \"Thùng\":",
									"                                        for(let i in list_branches_i){",
									"                                            uom_branch_1[uom_branch_1.length] = {",
									"                                                \"branch_id\":list_branches_i[i].branch_id,",
									"                                                \"inventory_quantity\":list_branches_i[i].inventory_quantity*6,",
									"                                                \"is_in_business\":true,",
									"                                            }",
									"                                            uom_branch_2[uom_branch_2.length] = {",
									"                                                \"branch_id\":list_branches_i[i].branch_id,",
									"                                                \"inventory_quantity\":list_branches_i[i].inventory_quantity*24,",
									"                                                \"is_in_business\":true,",
									"                                            }",
									"                                        }",
									"                                        uoms = [{",
									"                                            \"name\":\"Lon\",",
									"                                            \"sale_price\": Math.round(product_price_ij/24),",
									"                                            \"cost_price\": Math.round(cost_price_ij/24),",
									"                                            \"quantity\": parseFloat((1/24).toFixed(2))",
									"                                            // \"branches\": uom_branch_1",
									"                                        },{",
									"                                            \"name\":\"Lốc\",",
									"                                            \"sale_price\": Math.round(product_price_ij/4),",
									"                                            \"cost_price\": Math.round(cost_price_ij/4),",
									"                                            \"quantity\": parseFloat((1/4).toFixed(2))",
									"                                            // \"branches\": uom_branch_2",
									"                                        }];",
									"                                        break;",
									"                                    default:",
									"                                        console.log(\"missing flow\");",
									"                                        break;",
									"                                }",
									"",
									"                                let track_inventory_i = true; // batch bắt buộc true",
									"",
									"                                list_sku[list_sku.length] = {",
									"                                    \"allow_negative_inventory\": true, // chấp nhận khi bị âm",
									"                                    \"attributes\": attributes_ij,",
									"                                    \"bar_code\": \"\",",
									"                                    \"can_pick_quantity\": can_pick_quantity_i, // có thể mua",
									"                                    \"cost_price\": cost_price_ij,",
									"                                    \"images\": [],",
									"                                    \"initial_inventory_quantity\": can_pick_quantity_i, // tồn kho ban đầu?",
									"                                    \"is_hidden\": false,",
									"                                    \"is_in_business\": true,",
									"                                    \"priority\": priority,",
									"                                    // \"product_id\": \"string\",",
									"                                    \"sale_price\": product_price_ij,",
									"                                    \"selling_price\": Math.round(product_price_ij*0.9),",
									"                                    \"sku_code\": product_code + i + j,",
									"                                    \"sku_name\": product_name + \" - \" + sku_name_ij,",
									"                                    \"track_inventory\": track_inventory_i,",
									"                                    \"branches\":list_branches_i,",
									"                                    \"uom\": uom,",
									"                                    \"uoms\": uoms,",
									"                                    \"warning_quantity\": 0,",
									"                                    \"weight\":weight,",
									"                                    \"weight_unit\":weight_unit,",
									"                                    \"wholesales\": [] // giá sĩ",
									"                                };",
									"                                priority++;",
									"                            }",
									"                        }",
									"                        break;",
									"                    case 3:",
									"                        for(let i in list_variant[0].list_attribute){",
									"                            product_price = getRandomInt(500,1990)*100;",
									"                            cost_price = product_price/2;",
									"",
									"                            for(let j in list_variant[1].list_attribute){",
									"                                for(let k in list_variant[2].list_attribute){",
									"                                    let attributes_ijk = [];",
									"                                    let sku_name_ijk = \"\";",
									"                                    sku_name_ijk += list_variant[0].list_attribute[i].name + \"-\" + list_variant[1].list_attribute[j].name + \"-\" + list_variant[2].list_attribute[k].name;",
									"                                    attributes_ijk[attributes_ijk.length] = {",
									"                                        \"attribute\": list_variant[0].list_attribute[i].name,",
									"                                        \"attribute_type\": list_variant[0].name",
									"                                    }",
									"                                    attributes_ijk[attributes_ijk.length] = {",
									"                                        \"attribute\": list_variant[1].list_attribute[j].name,",
									"                                        \"attribute_type\": list_variant[1].name",
									"                                    }",
									"                                    attributes_ijk[attributes_ijk.length] = {",
									"                                        \"attribute\": list_variant[2].list_attribute[k].name,",
									"                                        \"attribute_type\": list_variant[2].name",
									"                                    }",
									"",
									"                                    let product_price_ijk, cost_price_ijk;",
									"                                    if(!configs.is_use_the_same_product_price){",
									"                                        product_price_ijk = Math.round(getRandomInt(product_price/2, product_price)/10)*10;",
									"                                    } else {",
									"                                        product_price_ijk = product_price;",
									"                                    }",
									"                                    cost_price_ijk = product_price_ijk/2;",
									"",
									"                                    let list_branches_i = [];",
									"                                    let can_pick_quantity_i = 0;",
									"                                    for(let l in list_branch){",
									"                                        let randome_il = 0; // getRandomInt(5,50);",
									"                                        list_branches_i[list_branches_i.length] = {",
									"                                            \"branch_id\":list_branch[l].id,",
									"                                            \"inventory_quantity\": randome_il,",
									"                                            \"is_in_business\": true",
									"                                        }",
									"                                        can_pick_quantity_i += randome_il;",
									"                                    }",
									"",
									"                                    uom_branch_1 = []; uom_branch_2 = []; // cần reset lại trước",
									"                                    switch(uom){",
									"                                        case \"Lon\":",
									"                                            for(let i in list_branches_i){",
									"                                                uom_branch_1[uom_branch_1.length] = {",
									"                                                    \"branch_id\":list_branches_i[i].branch_id,",
									"                                                    \"inventory_quantity\":Math.round(list_branches_i[i].inventory_quantity/6*100)/100,",
									"                                                    \"is_in_business\":true,",
									"                                                }",
									"                                                uom_branch_2[uom_branch_2.length] = {",
									"                                                    \"branch_id\":list_branches_i[i].branch_id,",
									"                                                    \"inventory_quantity\":Math.round(list_branches_i[i].inventory_quantity/24*100)/100,",
									"                                                    \"is_in_business\":true,",
									"                                                }",
									"                                            }",
									"                                            uoms = [{",
									"                                                \"name\":\"Lốc\",",
									"                                                \"sale_price\": product_price_ijk*6,",
									"                                                \"cost_price\": cost_price_ijk*6,",
									"                                                \"quantity\": 6",
									"                                                // \"branches\": uom_branch_1",
									"                                            },{",
									"                                                \"name\":\"Thùng\",",
									"                                                \"sale_price\": product_price_ijk*24,",
									"                                                \"cost_price\": cost_price_ijk*24,",
									"                                                \"quantity\": 24",
									"                                                // \"branches\": uom_branch_2",
									"                                            }];",
									"                                            break;",
									"                                        case \"Lốc\":",
									"                                            for(let i in list_branches_i){",
									"                                                uom_branch_1[uom_branch_1.length] = {",
									"                                                    \"branch_id\":list_branches_i[i].branch_id,",
									"                                                    \"inventory_quantity\":list_branches_i[i].inventory_quantity*6,",
									"                                                    \"is_in_business\":true,",
									"                                                }",
									"                                                uom_branch_2[uom_branch_2.length] = {",
									"                                                    \"branch_id\":list_branches_i[i].branch_id,",
									"                                                    \"inventory_quantity\":Math.round(list_branches_i[i].inventory_quantity/4*100)/100,",
									"                                                    \"is_in_business\":true,",
									"                                                }",
									"                                            }",
									"                                            uoms = [{",
									"                                                \"name\":\"Lon\",",
									"                                                \"sale_price\": Math.round(product_price_ijk/6),",
									"                                                \"cost_price\": Math.round(cost_price_ijk/6),",
									"                                                \"quantity\": parseFloat((1/6).toFixed(2))",
									"                                                // \"branches\": uom_branch_1",
									"                                            },{",
									"                                                \"name\":\"Thùng\",",
									"                                                \"sale_price\": product_price_ijk*4,",
									"                                                \"cost_price\": cost_price_ijk*4,",
									"                                                \"quantity\": 4",
									"                                                // \"branches\": uom_branch_2",
									"                                            }];",
									"                                            break;",
									"                                        case \"Thùng\":",
									"                                            for(let i in list_branches_i){",
									"                                                uom_branch_1[uom_branch_1.length] = {",
									"                                                    \"branch_id\":list_branches_i[i].branch_id,",
									"                                                    \"inventory_quantity\":list_branches_i[i].inventory_quantity*6,",
									"                                                    \"is_in_business\":true,",
									"                                                }",
									"                                                uom_branch_2[uom_branch_2.length] = {",
									"                                                    \"branch_id\":list_branches_i[i].branch_id,",
									"                                                    \"inventory_quantity\":list_branches_i[i].inventory_quantity*24,",
									"                                                    \"is_in_business\":true,",
									"                                                }",
									"                                            }",
									"                                            uoms = [{",
									"                                                \"name\":\"Lon\",",
									"                                                \"sale_price\": Math.round(product_price_ijk/24),",
									"                                                \"cost_price\": Math.round(cost_price_ijk/24),",
									"                                                \"quantity\": parseFloat((1/24).toFixed(2))",
									"                                                // \"branches\": uom_branch_1",
									"                                            },{",
									"                                                \"name\":\"Lốc\",",
									"                                                \"sale_price\": Math.round(product_price_ijk/4),",
									"                                                \"cost_price\": Math.round(cost_price_ijk/4),",
									"                                                \"quantity\": parseFloat((1/4).toFixed(2))",
									"                                                // \"branches\": uom_branch_2",
									"                                            }];",
									"                                            break;",
									"                                        default:",
									"                                            console.log(\"missing flow\");",
									"                                            break;",
									"                                    }",
									"",
									"                                    let track_inventory_i = true;",
									"",
									"                                    list_sku[list_sku.length] = {",
									"                                        \"allow_negative_inventory\": true, // chấp nhận khi bị âm",
									"                                        \"attributes\": attributes_ijk,",
									"                                        \"bar_code\": \"\",",
									"                                        \"can_pick_quantity\": can_pick_quantity_i, // có thể mua",
									"                                        \"cost_price\": cost_price_ijk,",
									"                                        \"images\": [],",
									"                                        \"initial_inventory_quantity\": can_pick_quantity_i, // tồn kho ban đầu?",
									"                                        \"is_hidden\": false,",
									"                                        \"is_in_business\": true,",
									"                                        \"priority\": priority,",
									"                                        // \"product_id\": \"string\",",
									"                                        \"sale_price\": product_price_ijk,",
									"                                        \"selling_price\": Math.round(product_price_ijk*0.9),",
									"                                        \"sku_code\": product_code + i + j + k,",
									"                                        \"sku_name\": product_name + \" - \" + sku_name_ijk,",
									"                                        \"track_inventory\": track_inventory_i,",
									"                                        \"branches\":list_branches_i,",
									"                                        \"uom\": uom,",
									"                                        \"uoms\": uoms,",
									"                                        \"warning_quantity\": 0,",
									"                                        \"weight\":weight,",
									"                                        \"weight_unit\":weight_unit, // g, kg",
									"                                        \"wholesales\": [] // giá sĩ",
									"                                    };",
									"                                    priority++;",
									"                                }",
									"                            }",
									"                        }",
									"                        break;",
									"                    case 4:",
									"                        for(let i in list_variant[0].list_attribute){",
									"                            product_price = getRandomInt(500,1990)*100;",
									"                            cost_price = product_price/2;",
									"",
									"                            for(let j in list_variant[1].list_attribute){",
									"                                for(let k in list_variant[2].list_attribute){",
									"                                    for(let l in list_variant[3].list_attribute){",
									"                                        let attributes_ijkl = [];",
									"                                        let sku_name_ijkl = \"\";",
									"                                        sku_name_ijkl += list_variant[0].list_attribute[i].name + \"-\" + list_variant[1].list_attribute[j].name + \"-\" + list_variant[2].list_attribute[k].name + \"-\" + list_variant[3].list_attribute[l].name;",
									"                                        attributes_ijkl[attributes_ijkl.length] = {",
									"                                            \"attribute\": list_variant[0].list_attribute[i].name,",
									"                                            \"attribute_type\": list_variant[0].name",
									"                                        }",
									"                                        attributes_ijkl[attributes_ijkl.length] = {",
									"                                            \"attribute\": list_variant[1].list_attribute[j].name,",
									"                                            \"attribute_type\": list_variant[1].name",
									"                                        }",
									"                                        attributes_ijkl[attributes_ijkl.length] = {",
									"                                            \"attribute\": list_variant[2].list_attribute[k].name,",
									"                                            \"attribute_type\": list_variant[2].name",
									"                                        }",
									"                                        attributes_ijkl[attributes_ijkl.length] = {",
									"                                            \"attribute\": list_variant[3].list_attribute[l].name,",
									"                                            \"attribute_type\": list_variant[3].name",
									"                                        }",
									"",
									"                                        let product_price_ijkl, cost_price_ijkl;",
									"                                        if(!configs.is_use_the_same_product_price){",
									"                                            product_price_ijkl = Math.round(getRandomInt(product_price/2, product_price)/10)*10;",
									"                                        } else {",
									"                                            product_price_ijkl = product_price;",
									"                                        }",
									"                                        cost_price_ijkl = Math.round(product_price_ijkl/2);",
									"",
									"                                        let list_branches_i = [];",
									"                                        let can_pick_quantity_i = 0;",
									"                                        for(let m in list_branch){",
									"                                            let randome_im = 0; // getRandomInt(5,50);",
									"                                            list_branches_i[list_branches_i.length] = {",
									"                                                \"branch_id\":list_branch[m].id,",
									"                                                \"inventory_quantity\": randome_im,",
									"                                                \"is_in_business\": true",
									"                                            }",
									"                                            can_pick_quantity_i += randome_im;",
									"                                        }",
									"",
									"                                        uom_branch_1 = []; uom_branch_2 = []; // cần reset lại trước",
									"                                        switch(uom){",
									"                                            case \"Lon\":",
									"                                                for(let i in list_branches_i){",
									"                                                    uom_branch_1[uom_branch_1.length] = {",
									"                                                        \"branch_id\":list_branches_i[i].branch_id,",
									"                                                        \"inventory_quantity\":Math.round(list_branches_i[i].inventory_quantity/6*100)/100,",
									"                                                        \"is_in_business\":true,",
									"                                                    }",
									"                                                    uom_branch_2[uom_branch_2.length] = {",
									"                                                        \"branch_id\":list_branches_i[i].branch_id,",
									"                                                        \"inventory_quantity\":Math.round(list_branches_i[i].inventory_quantity/24*100)/100,",
									"                                                        \"is_in_business\":true,",
									"                                                    }",
									"                                                }",
									"                                                uoms = [{",
									"                                                    \"name\":\"Lốc\",",
									"                                                    \"sale_price\": product_price_ijkl*6,",
									"                                                    \"cost_price\": cost_price_ijkl*6,",
									"                                                    \"quantity\": 6",
									"                                                    // \"branches\": uom_branch_1",
									"                                                },{",
									"                                                    \"name\":\"Thùng\",",
									"                                                    \"sale_price\": product_price_ijkl*24,",
									"                                                    \"cost_price\": cost_price_ijkl*24,",
									"                                                    \"quantity\": 24",
									"                                                    // \"branches\": uom_branch_2",
									"                                                }];",
									"                                                break;",
									"                                            case \"Lốc\":",
									"                                                for(let i in list_branches_i){",
									"                                                    uom_branch_1[uom_branch_1.length] = {",
									"                                                        \"branch_id\":list_branches_i[i].branch_id,",
									"                                                        \"inventory_quantity\":list_branches_i[i].inventory_quantity*6,",
									"                                                        \"is_in_business\":true,",
									"                                                    }",
									"                                                    uom_branch_2[uom_branch_2.length] = {",
									"                                                        \"branch_id\":list_branches_i[i].branch_id,",
									"                                                        \"inventory_quantity\":Math.round(list_branches_i[i].inventory_quantity/4*100)/100,",
									"                                                        \"is_in_business\":true,",
									"                                                    }",
									"                                                }",
									"                                                uoms = [{",
									"                                                    \"name\":\"Lon\",",
									"                                                    \"sale_price\": Math.round(product_price_ijkl/6),",
									"                                                    \"cost_price\": Math.round(cost_price_ijkl/6),",
									"                                                    \"quantity\": parseFloat((1/6).toFixed(2))",
									"                                                    // \"branches\": uom_branch_1",
									"                                                },{",
									"                                                    \"name\":\"Thùng\",",
									"                                                    \"sale_price\": product_price_ijkl*4,",
									"                                                    \"cost_price\": cost_price_ijkl*4,",
									"                                                    \"quantity\": 4",
									"                                                    // \"branches\": uom_branch_2",
									"                                                }];",
									"                                                break;",
									"                                            case \"Thùng\":",
									"                                                for(let i in list_branches_i){",
									"                                                    uom_branch_1[uom_branch_1.length] = {",
									"                                                        \"branch_id\":list_branches_i[i].branch_id,",
									"                                                        \"inventory_quantity\":list_branches_i[i].inventory_quantity*6,",
									"                                                        \"is_in_business\":true,",
									"                                                    }",
									"                                                    uom_branch_2[uom_branch_2.length] = {",
									"                                                        \"branch_id\":list_branches_i[i].branch_id,",
									"                                                        \"inventory_quantity\":list_branches_i[i].inventory_quantity*24,",
									"                                                        \"is_in_business\":true,",
									"                                                    }",
									"                                                }",
									"                                                uoms = [{",
									"                                                    \"name\":\"Lon\",",
									"                                                    \"sale_price\": Math.round(product_price_ijkl/24),",
									"                                                    \"cost_price\": Math.round(cost_price_ijkl/24),",
									"                                                    \"quantity\": parseFloat((1/24).toFixed(2))",
									"                                                    // \"branches\": uom_branch_1",
									"                                                },{",
									"                                                    \"name\":\"Lốc\",",
									"                                                    \"sale_price\": Math.round(product_price_ijkl/4),",
									"                                                    \"cost_price\": Math.round(cost_price_ijkl/4),",
									"                                                    \"quantity\": parseFloat((1/4).toFixed(2))",
									"                                                    // \"branches\": uom_branch_2",
									"                                                }];",
									"                                                break;",
									"                                            default:",
									"                                                console.log(\"missing flow\");",
									"                                                break;",
									"                                        }",
									"",
									"                                        let track_inventory_i = true;",
									"",
									"                                        list_sku[list_sku.length] = {",
									"                                            \"allow_negative_inventory\": true, // chấp nhận khi bị âm",
									"                                            \"attributes\": attributes_ijkl,",
									"                                            \"bar_code\": \"\",",
									"                                            \"can_pick_quantity\": can_pick_quantity_i, // có thể mua",
									"                                            \"cost_price\": cost_price_ijkl,",
									"                                            \"images\": [],",
									"                                            \"initial_inventory_quantity\": can_pick_quantity_i, // tồn kho ban đầu?",
									"                                            \"is_hidden\": false,",
									"                                            \"is_in_business\": true,",
									"                                            \"priority\": priority,",
									"                                            // \"product_id\": \"string\",",
									"                                            \"sale_price\": product_price_ijkl,",
									"                                            \"selling_price\": Math.round(product_price_ijkl*0.9),",
									"                                            \"sku_code\": product_code + i + j + k + l,",
									"                                            \"sku_name\": product_name + \" - \" + sku_name_ijkl,",
									"                                            \"track_inventory\": track_inventory_i,",
									"                                            \"branches\":list_branches_i,",
									"                                            \"uom\": uom,",
									"                                            \"uoms\": uoms,",
									"                                            \"warning_quantity\": 0,",
									"                                            \"weight\":weight,",
									"                                            \"weight_unit\":weight_unit, // g, kg",
									"                                            \"wholesales\": [] // giá sĩ",
									"                                        };",
									"                                        priority++;",
									"                                    }",
									"                                }",
									"                            }",
									"                        }",
									"                        break;",
									"                    default:",
									"                        console.log(\"missing variant\");",
									"                        break;",
									"                }",
									"                break;",
									"            case \"imei_product\":",
									"                console.log(\"Create imei_product - variant product, include uom\");",
									"                product_name = \"[API] imei variant \" + randomChars(8);",
									"                product_code = \"PRD\" + randomChars(5);",
									"",
									"                // hiện tại uom gốc không nhất thiết phải nhỏ nhất",
									"                uom = \"Lon\" // default_uom[getRandomInt(0,default_uom.length -1)]; //getRandomInt(0,default_uom.length -1)",
									"                console.log(\"uom: \" + uom);",
									"                // switch(uom){",
									"                //     case \"Lon\":",
									"                //         list_uom = [{",
									"                //             \"name\":\"Lốc\",",
									"                //             \"quantity\": 6",
									"                //         },{",
									"                //             \"name\":\"Thùng\",",
									"                //             \"quantity\": 24",
									"                //         }];",
									"                //         break;",
									"                //     case \"Lốc\":",
									"                //         list_uom = [{",
									"                //             \"name\":\"Lon\",",
									"                //             \"quantity\":parseFloat((1/6).toFixed(2))",
									"                //         },{",
									"                //             \"name\":\"Thùng\",",
									"                //             \"quantity\": 4",
									"                //         }];",
									"                //         break;",
									"                //     case \"Thùng\":",
									"                //         list_uom = [{",
									"                //             \"name\":\"Lon\",",
									"                //             \"quantity\":parseFloat((1/24).toFixed(2))",
									"                //         },{",
									"                //             \"name\":\"Lốc\",",
									"                //             \"quantity\":parseFloat((1/4).toFixed(2))",
									"                //         }];",
									"                //         break;",
									"                //     default:",
									"                //         console.log(\"missing flow\");",
									"                //         break;",
									"                // }",
									"                // console.log(\"debug list_uom: \",list_uom);",
									"                ",
									"                for(let i in random_pos_attribue){",
									"                    let random_total_att_i = getRandomInt(1,default_attribute[random_pos_attribue[i]].value.length); // default_attribute[random_pos_attribue[i]].value.length",
									"                    // console.log(\"random_total_att_i: \" + random_total_att_i);",
									"                    let random_pos_att_i = randNotDupe(0,default_attribute[random_pos_attribue[i]].value.length - 1, random_total_att_i);",
									"                    // console.log(\"random_pos_att_i: \" + random_pos_att_i);",
									"                    let list_attribute_i = [];",
									"                    for(let j in random_pos_att_i){",
									"                        list_attribute_i[list_attribute_i.length] = {",
									"                            \"name\":default_attribute[random_pos_attribue[i]].value[random_pos_att_i[j]]",
									"                        }",
									"                    }",
									"",
									"                    list_variant[list_variant.length] = {",
									"                        \"name\": default_attribute[random_pos_attribue[i]].name,",
									"                        \"list_attribute\": list_attribute_i",
									"                    }",
									"                }",
									"                // console.log(\"debug list_variant: \",list_variant);",
									"",
									"                // let term_list = combineAttributes2(list_variant);",
									"                // console.log(\"debug term_list: \",term_list);",
									"                switch(list_variant.length){",
									"                    case 1:",
									"                        for(let i in list_variant[0].list_attribute){",
									"                            product_price = getRandomInt(500,1990)*100;",
									"                            cost_price = product_price/2;",
									"",
									"                            let sku_name_i = \"\";",
									"                            sku_name_i += list_variant[0].list_attribute[i].name;",
									"                            let attributes_i = [];",
									"                            attributes_i[attributes_i.length] = {",
									"                                \"attribute\": list_variant[0].list_attribute[i].name,",
									"                                \"attribute_type\": list_variant[0].name",
									"                            }",
									"",
									"                            let list_branches_i = [];",
									"                            let can_pick_quantity_i = 0;",
									"                            for(let j in list_branch){",
									"                                let randome_ij = getRandomInt(5,50);",
									"                                list_branches_i[list_branches_i.length] = {",
									"                                    \"branch_id\":list_branch[j].id,",
									"                                    \"inventory_quantity\": randome_ij,",
									"                                    \"is_in_business\": true",
									"                                }",
									"                                can_pick_quantity_i += randome_ij;",
									"                            }",
									"",
									"                            uom_branch_1 = []; uom_branch_2 = []; // cần reset lại trước",
									"                            // switch(uom){",
									"                            //     case \"Lon\":",
									"                            //         for(let i in list_branches_i){",
									"                            //             uom_branch_1[uom_branch_1.length] = {",
									"                            //                 \"branch_id\":list_branches_i[i].branch_id,",
									"                            //                 \"inventory_quantity\":Math.round(list_branches_i[i].inventory_quantity/6*100)/100,",
									"                            //                 \"is_in_business\":true,",
									"                            //             }",
									"                            //             uom_branch_2[uom_branch_2.length] = {",
									"                            //                 \"branch_id\":list_branches_i[i].branch_id,",
									"                            //                 \"inventory_quantity\":Math.round(list_branches_i[i].inventory_quantity/24*100)/100,",
									"                            //                 \"is_in_business\":true,",
									"                            //             }",
									"                            //         }",
									"                            //         uoms = [{",
									"                            //             \"name\":\"Lốc\",",
									"                            //             \"sale_price\": product_price*6,",
									"                            //             \"cost_price\": cost_price*6,",
									"                            //             \"quantity\": 6",
									"                            //             // \"branches\": uom_branch_1",
									"                            //         },{",
									"                            //             \"name\":\"Thùng\",",
									"                            //             \"sale_price\": product_price*24,",
									"                            //             \"cost_price\": cost_price*24,",
									"                            //             \"quantity\": 24",
									"                            //             // \"branches\": uom_branch_2",
									"                            //         }];",
									"                            //         break;",
									"                            //     case \"Lốc\":",
									"                            //         for(let i in list_branches_i){",
									"                            //             uom_branch_1[uom_branch_1.length] = {",
									"                            //                 \"branch_id\":list_branches_i[i].branch_id,",
									"                            //                 \"inventory_quantity\":list_branches_i[i].inventory_quantity*6,",
									"                            //                 \"is_in_business\":true,",
									"                            //             }",
									"                            //             uom_branch_2[uom_branch_2.length] = {",
									"                            //                 \"branch_id\":list_branches_i[i].branch_id,",
									"                            //                 \"inventory_quantity\":Math.round(list_branches_i[i].inventory_quantity/4*100)/100,",
									"                            //                 \"is_in_business\":true,",
									"                            //             }",
									"                            //         }",
									"                            //         uoms = [{",
									"                            //             \"name\":\"Lon\",",
									"                            //             \"sale_price\": Math.round(product_price/6),",
									"                            //             \"cost_price\": Math.round(cost_price/6),",
									"                            //             \"quantity\": parseFloat((1/6).toFixed(2))",
									"                            //             // \"branches\": uom_branch_1",
									"                            //         },{",
									"                            //             \"name\":\"Thùng\",",
									"                            //             \"sale_price\": product_price*4,",
									"                            //             \"cost_price\": cost_price*4,",
									"                            //             \"quantity\": 4",
									"                            //             // \"branches\": uom_branch_2",
									"                            //         }];",
									"                            //         break;",
									"                            //     case \"Thùng\":",
									"                            //         for(let i in list_branches_i){",
									"                            //             uom_branch_1[uom_branch_1.length] = {",
									"                            //                 \"branch_id\":list_branches_i[i].branch_id,",
									"                            //                 \"inventory_quantity\":list_branches_i[i].inventory_quantity*6,",
									"                            //                 \"is_in_business\":true,",
									"                            //             }",
									"                            //             uom_branch_2[uom_branch_2.length] = {",
									"                            //                 \"branch_id\":list_branches_i[i].branch_id,",
									"                            //                 \"inventory_quantity\":list_branches_i[i].inventory_quantity*24,",
									"                            //                 \"is_in_business\":true,",
									"                            //             }",
									"                            //         }",
									"                            //         uoms = [{",
									"                            //             \"name\":\"Lon\",",
									"                            //             \"sale_price\": Math.round(product_price/24),",
									"                            //             \"cost_price\": Math.round(cost_price/24),",
									"                            //             \"quantity\": parseFloat((1/24).toFixed(2))",
									"                            //             // \"branches\": uom_branch_1",
									"                            //         },{",
									"                            //             \"name\":\"Lốc\",",
									"                            //             \"sale_price\": Math.round(product_price/4),",
									"                            //             \"cost_price\": Math.round(cost_price/4),",
									"                            //             \"quantity\": parseFloat((1/4).toFixed(2))",
									"                            //             // \"branches\": uom_branch_2",
									"                            //         }];",
									"                            //         break;",
									"                            //     default:",
									"                            //         console.log(\"missing flow\");",
									"                            //         break;",
									"                            // }",
									"",
									"                            let track_inventory_i = true;",
									"",
									"                            list_sku[list_sku.length] = {",
									"                                \"allow_negative_inventory\": true, // chấp nhận khi bị âm",
									"                                \"attributes\": attributes_i,",
									"                                \"bar_code\": \"\",",
									"                                \"can_pick_quantity\": can_pick_quantity_i, // có thể mua => chỉ tham khảo, số lượng lấy từ list_branches",
									"                                \"cost_price\": cost_price,",
									"                                \"images\": [],",
									"                                \"initial_inventory_quantity\": can_pick_quantity_i, // tồn kho ban đầu?",
									"                                \"is_hidden\": false,",
									"                                \"is_in_business\": true,",
									"                                \"priority\": priority,",
									"                                // \"product_id\": \"string\",",
									"                                \"sale_price\": product_price,",
									"                                \"selling_price\": Math.round(product_price*0.9),",
									"                                \"sku_code\": product_code + i,",
									"                                \"sku_name\": product_name + \" - \" + sku_name_i,",
									"                                \"track_inventory\": track_inventory_i,",
									"                                \"branches\":list_branches_i,",
									"                                // \"uom\": uom,",
									"                                // \"uoms\": uoms,",
									"                                \"warning_quantity\": 0,",
									"                                \"weight\":weight,",
									"                                \"weight_unit\": weight_unit,",
									"                                \"wholesales\": [] // giá sĩ",
									"                            };",
									"                            priority++;",
									"                        }",
									"                        break;",
									"                    case 2:",
									"                        for(let i in list_variant[0].list_attribute){",
									"                            product_price = getRandomInt(500,1990)*100;",
									"                            cost_price = product_price/2;",
									"",
									"                            for(let j in list_variant[1].list_attribute){",
									"                                let attributes_ij = [];",
									"                                let sku_name_ij = \"\";",
									"                                sku_name_ij += list_variant[0].list_attribute[i].name + \"-\" + list_variant[1].list_attribute[j].name;",
									"                                attributes_ij[attributes_ij.length] = {",
									"                                    \"attribute\": list_variant[0].list_attribute[i].name,",
									"                                    \"attribute_type\": list_variant[0].name",
									"                                }",
									"                                attributes_ij[attributes_ij.length] = {",
									"                                    \"attribute\": list_variant[1].list_attribute[j].name,",
									"                                    \"attribute_type\": list_variant[1].name",
									"                                }",
									"",
									"                                let product_price_ij, cost_price_ij;",
									"                                if(!configs.is_use_the_same_product_price){",
									"                                    product_price_ij = Math.round(getRandomInt(product_price/2, product_price)/10)*10;",
									"                                } else {",
									"                                    product_price_ij = product_price;",
									"                                }",
									"                                cost_price_ij = Math.round(product_price_ij/2);",
									"",
									"                                let list_branches_i = [];",
									"                                let can_pick_quantity_i = 0;",
									"                                for(let k in list_branch){",
									"                                    let randome_ik = getRandomInt(5,50);",
									"                                    list_branches_i[list_branches_i.length] = {",
									"                                        \"branch_id\":list_branch[k].id,",
									"                                        \"inventory_quantity\": randome_ik,",
									"                                        \"is_in_business\": true",
									"                                    }",
									"                                    can_pick_quantity_i += randome_ik;",
									"                                }",
									"",
									"                                uom_branch_1 = []; uom_branch_2 = []; // cần reset lại trước",
									"                                // switch(uom){",
									"                                //     case \"Lon\":",
									"                                //         for(let i in list_branches_i){",
									"                                //             uom_branch_1[uom_branch_1.length] = {",
									"                                //                 \"branch_id\":list_branches_i[i].branch_id,",
									"                                //                 \"inventory_quantity\":Math.round(list_branches_i[i].inventory_quantity/6*100)/100,",
									"                                //                 \"is_in_business\":true,",
									"                                //             }",
									"                                //             uom_branch_2[uom_branch_2.length] = {",
									"                                //                 \"branch_id\":list_branches_i[i].branch_id,",
									"                                //                 \"inventory_quantity\":Math.round(list_branches_i[i].inventory_quantity/24*100)/100,",
									"                                //                 \"is_in_business\":true,",
									"                                //             }",
									"                                //         }",
									"                                //         uoms = [{",
									"                                //             \"name\":\"Lốc\",",
									"                                //             \"sale_price\": product_price_ij*6,",
									"                                //             \"cost_price\": cost_price_ij*6,",
									"                                //             \"quantity\": 6",
									"                                //             // \"branches\": uom_branch_1",
									"                                //         },{",
									"                                //             \"name\":\"Thùng\",",
									"                                //             \"sale_price\": product_price_ij*24,",
									"                                //             \"cost_price\": cost_price_ij*24,",
									"                                //             \"quantity\": 24",
									"                                //             // \"branches\": uom_branch_2",
									"                                //         }];",
									"                                //         break;",
									"                                //     case \"Lốc\":",
									"                                //         for(let i in list_branches_i){",
									"                                //             uom_branch_1[uom_branch_1.length] = {",
									"                                //                 \"branch_id\":list_branches_i[i].branch_id,",
									"                                //                 \"inventory_quantity\":list_branches_i[i].inventory_quantity*6,",
									"                                //                 \"is_in_business\":true,",
									"                                //             }",
									"                                //             uom_branch_2[uom_branch_2.length] = {",
									"                                //                 \"branch_id\":list_branches_i[i].branch_id,",
									"                                //                 \"inventory_quantity\":Math.round(list_branches_i[i].inventory_quantity/4*100)/100,",
									"                                //                 \"is_in_business\":true,",
									"                                //             }",
									"                                //         }",
									"                                //         uoms = [{",
									"                                //             \"name\":\"Lon\",",
									"                                //             \"sale_price\": Math.round(product_price_ij/6),",
									"                                //             \"cost_price\": Math.round(cost_price_ij/6),",
									"                                //             \"quantity\": parseFloat((1/6).toFixed(2))",
									"                                //             // \"branches\": uom_branch_1",
									"                                //         },{",
									"                                //             \"name\":\"Thùng\",",
									"                                //             \"sale_price\": product_price_ij*4,",
									"                                //             \"cost_price\": cost_price_ij*4,",
									"                                //             \"quantity\": 4",
									"                                //             // \"branches\": uom_branch_2",
									"                                //         }];",
									"                                //         break;",
									"                                //     case \"Thùng\":",
									"                                //         for(let i in list_branches_i){",
									"                                //             uom_branch_1[uom_branch_1.length] = {",
									"                                //                 \"branch_id\":list_branches_i[i].branch_id,",
									"                                //                 \"inventory_quantity\":list_branches_i[i].inventory_quantity*6,",
									"                                //                 \"is_in_business\":true,",
									"                                //             }",
									"                                //             uom_branch_2[uom_branch_2.length] = {",
									"                                //                 \"branch_id\":list_branches_i[i].branch_id,",
									"                                //                 \"inventory_quantity\":list_branches_i[i].inventory_quantity*24,",
									"                                //                 \"is_in_business\":true,",
									"                                //             }",
									"                                //         }",
									"                                //         uoms = [{",
									"                                //             \"name\":\"Lon\",",
									"                                //             \"sale_price\": Math.round(product_price_ij/24),",
									"                                //             \"cost_price\": Math.round(cost_price_ij/24),",
									"                                //             \"quantity\": parseFloat((1/24).toFixed(2))",
									"                                //             // \"branches\": uom_branch_1",
									"                                //         },{",
									"                                //             \"name\":\"Lốc\",",
									"                                //             \"sale_price\": Math.round(product_price_ij/4),",
									"                                //             \"cost_price\": Math.round(cost_price_ij/4),",
									"                                //             \"quantity\": parseFloat((1/4).toFixed(2))",
									"                                //             // \"branches\": uom_branch_2",
									"                                //         }];",
									"                                //         break;",
									"                                //     default:",
									"                                //         console.log(\"missing flow\");",
									"                                //         break;",
									"                                // }",
									"",
									"                                let track_inventory_i = true;",
									"",
									"                                list_sku[list_sku.length] = {",
									"                                    \"allow_negative_inventory\": true, // chấp nhận khi bị âm",
									"                                    \"attributes\": attributes_ij,",
									"                                    \"bar_code\": \"\",",
									"                                    \"can_pick_quantity\": can_pick_quantity_i, // có thể mua",
									"                                    \"cost_price\": cost_price_ij,",
									"                                    \"images\": [],",
									"                                    \"initial_inventory_quantity\": can_pick_quantity_i, // tồn kho ban đầu?",
									"                                    \"is_hidden\": false,",
									"                                    \"is_in_business\": true,",
									"                                    \"priority\": priority,",
									"                                    // \"product_id\": \"string\",",
									"                                    \"sale_price\": product_price_ij,",
									"                                    \"selling_price\": Math.round(product_price_ij*0.9),",
									"                                    \"sku_code\": product_code + i + j,",
									"                                    \"sku_name\": product_name + \" - \" + sku_name_ij,",
									"                                    \"track_inventory\": track_inventory_i,",
									"                                    \"branches\":list_branches_i,",
									"                                    // \"uom\": uom,",
									"                                    // \"uoms\": uoms,",
									"                                    \"warning_quantity\": 0,",
									"                                    \"weight\":weight,",
									"                                    \"weight_unit\":weight_unit,",
									"                                    \"wholesales\": [] // giá sĩ",
									"                                };",
									"                                priority++;",
									"                            }",
									"                        }",
									"                        break;",
									"                    case 3:",
									"                        for(let i in list_variant[0].list_attribute){",
									"                            product_price = getRandomInt(500,1990)*100;",
									"                            cost_price = product_price/2;",
									"",
									"                            for(let j in list_variant[1].list_attribute){",
									"                                for(let k in list_variant[2].list_attribute){",
									"                                    let attributes_ijk = [];",
									"                                    let sku_name_ijk = \"\";",
									"                                    sku_name_ijk += list_variant[0].list_attribute[i].name + \"-\" + list_variant[1].list_attribute[j].name + \"-\" + list_variant[2].list_attribute[k].name;",
									"                                    attributes_ijk[attributes_ijk.length] = {",
									"                                        \"attribute\": list_variant[0].list_attribute[i].name,",
									"                                        \"attribute_type\": list_variant[0].name",
									"                                    }",
									"                                    attributes_ijk[attributes_ijk.length] = {",
									"                                        \"attribute\": list_variant[1].list_attribute[j].name,",
									"                                        \"attribute_type\": list_variant[1].name",
									"                                    }",
									"                                    attributes_ijk[attributes_ijk.length] = {",
									"                                        \"attribute\": list_variant[2].list_attribute[k].name,",
									"                                        \"attribute_type\": list_variant[2].name",
									"                                    }",
									"",
									"                                    let product_price_ijk, cost_price_ijk;",
									"                                    if(!configs.is_use_the_same_product_price){",
									"                                        product_price_ijk = Math.round(getRandomInt(product_price/2, product_price)/10)*10;",
									"                                    } else {",
									"                                        product_price_ijk = product_price;",
									"                                    }",
									"                                    cost_price_ijk = product_price_ijk/2;",
									"",
									"                                    let list_branches_i = [];",
									"                                    let can_pick_quantity_i = 0;",
									"                                    for(let l in list_branch){",
									"                                        let randome_il = getRandomInt(5,50);",
									"                                        list_branches_i[list_branches_i.length] = {",
									"                                            \"branch_id\":list_branch[l].id,",
									"                                            \"inventory_quantity\": randome_il,",
									"                                            \"is_in_business\": true",
									"                                        }",
									"                                        can_pick_quantity_i += randome_il;",
									"                                    }",
									"",
									"                                    uom_branch_1 = []; uom_branch_2 = []; // cần reset lại trước",
									"                                    // switch(uom){",
									"                                    //     case \"Lon\":",
									"                                    //         for(let i in list_branches_i){",
									"                                    //             uom_branch_1[uom_branch_1.length] = {",
									"                                    //                 \"branch_id\":list_branches_i[i].branch_id,",
									"                                    //                 \"inventory_quantity\":Math.round(list_branches_i[i].inventory_quantity/6*100)/100,",
									"                                    //                 \"is_in_business\":true,",
									"                                    //             }",
									"                                    //             uom_branch_2[uom_branch_2.length] = {",
									"                                    //                 \"branch_id\":list_branches_i[i].branch_id,",
									"                                    //                 \"inventory_quantity\":Math.round(list_branches_i[i].inventory_quantity/24*100)/100,",
									"                                    //                 \"is_in_business\":true,",
									"                                    //             }",
									"                                    //         }",
									"                                    //         uoms = [{",
									"                                    //             \"name\":\"Lốc\",",
									"                                    //             \"sale_price\": product_price_ijk*6,",
									"                                    //             \"cost_price\": cost_price_ijk*6,",
									"                                    //             \"quantity\": 6",
									"                                    //             // \"branches\": uom_branch_1",
									"                                    //         },{",
									"                                    //             \"name\":\"Thùng\",",
									"                                    //             \"sale_price\": product_price_ijk*24,",
									"                                    //             \"cost_price\": cost_price_ijk*24,",
									"                                    //             \"quantity\": 24",
									"                                    //             // \"branches\": uom_branch_2",
									"                                    //         }];",
									"                                    //         break;",
									"                                    //     case \"Lốc\":",
									"                                    //         for(let i in list_branches_i){",
									"                                    //             uom_branch_1[uom_branch_1.length] = {",
									"                                    //                 \"branch_id\":list_branches_i[i].branch_id,",
									"                                    //                 \"inventory_quantity\":list_branches_i[i].inventory_quantity*6,",
									"                                    //                 \"is_in_business\":true,",
									"                                    //             }",
									"                                    //             uom_branch_2[uom_branch_2.length] = {",
									"                                    //                 \"branch_id\":list_branches_i[i].branch_id,",
									"                                    //                 \"inventory_quantity\":Math.round(list_branches_i[i].inventory_quantity/4*100)/100,",
									"                                    //                 \"is_in_business\":true,",
									"                                    //             }",
									"                                    //         }",
									"                                    //         uoms = [{",
									"                                    //             \"name\":\"Lon\",",
									"                                    //             \"sale_price\": Math.round(product_price_ijk/6),",
									"                                    //             \"cost_price\": Math.round(cost_price_ijk/6),",
									"                                    //             \"quantity\": parseFloat((1/6).toFixed(2))",
									"                                    //             // \"branches\": uom_branch_1",
									"                                    //         },{",
									"                                    //             \"name\":\"Thùng\",",
									"                                    //             \"sale_price\": product_price_ijk*4,",
									"                                    //             \"cost_price\": cost_price_ijk*4,",
									"                                    //             \"quantity\": 4",
									"                                    //             // \"branches\": uom_branch_2",
									"                                    //         }];",
									"                                    //         break;",
									"                                    //     case \"Thùng\":",
									"                                    //         for(let i in list_branches_i){",
									"                                    //             uom_branch_1[uom_branch_1.length] = {",
									"                                    //                 \"branch_id\":list_branches_i[i].branch_id,",
									"                                    //                 \"inventory_quantity\":list_branches_i[i].inventory_quantity*6,",
									"                                    //                 \"is_in_business\":true,",
									"                                    //             }",
									"                                    //             uom_branch_2[uom_branch_2.length] = {",
									"                                    //                 \"branch_id\":list_branches_i[i].branch_id,",
									"                                    //                 \"inventory_quantity\":list_branches_i[i].inventory_quantity*24,",
									"                                    //                 \"is_in_business\":true,",
									"                                    //             }",
									"                                    //         }",
									"                                    //         uoms = [{",
									"                                    //             \"name\":\"Lon\",",
									"                                    //             \"sale_price\": Math.round(product_price_ijk/24),",
									"                                    //             \"cost_price\": Math.round(cost_price_ijk/24),",
									"                                    //             \"quantity\": parseFloat((1/24).toFixed(2))",
									"                                    //             // \"branches\": uom_branch_1",
									"                                    //         },{",
									"                                    //             \"name\":\"Lốc\",",
									"                                    //             \"sale_price\": Math.round(product_price_ijk/4),",
									"                                    //             \"cost_price\": Math.round(cost_price_ijk/4),",
									"                                    //             \"quantity\": parseFloat((1/4).toFixed(2))",
									"                                    //             // \"branches\": uom_branch_2",
									"                                    //         }];",
									"                                    //         break;",
									"                                    //     default:",
									"                                    //         console.log(\"missing flow\");",
									"                                    //         break;",
									"                                    // }",
									"",
									"                                    let track_inventory_i = true;",
									"",
									"                                    list_sku[list_sku.length] = {",
									"                                        \"allow_negative_inventory\": true, // chấp nhận khi bị âm",
									"                                        \"attributes\": attributes_ijk,",
									"                                        \"bar_code\": \"\",",
									"                                        \"can_pick_quantity\": can_pick_quantity_i, // có thể mua",
									"                                        \"cost_price\": cost_price_ijk,",
									"                                        \"images\": [],",
									"                                        \"initial_inventory_quantity\": can_pick_quantity_i, // tồn kho ban đầu?",
									"                                        \"is_hidden\": false,",
									"                                        \"is_in_business\": true,",
									"                                        \"priority\": priority,",
									"                                        // \"product_id\": \"string\",",
									"                                        \"sale_price\": product_price_ijk,",
									"                                        \"selling_price\": Math.round(product_price_ijk*0.9),",
									"                                        \"sku_code\": product_code + i + j + k,",
									"                                        \"sku_name\": product_name + \" - \" + sku_name_ijk,",
									"                                        \"track_inventory\": track_inventory_i,",
									"                                        \"branches\":list_branches_i,",
									"                                        // \"uom\": uom,",
									"                                        // \"uoms\": uoms,",
									"                                        \"warning_quantity\": 0,",
									"                                        \"weight\":weight,",
									"                                        \"weight_unit\":weight_unit, // g, kg",
									"                                        \"wholesales\": [] // giá sĩ",
									"                                    };",
									"                                    priority++;",
									"                                }",
									"                            }",
									"                        }",
									"                        break;",
									"                    case 4:",
									"                        for(let i in list_variant[0].list_attribute){",
									"                            product_price = getRandomInt(500,1990)*100;",
									"                            cost_price = product_price/2;",
									"",
									"                            for(let j in list_variant[1].list_attribute){",
									"                                for(let k in list_variant[2].list_attribute){",
									"                                    for(let l in list_variant[3].list_attribute){",
									"                                        let attributes_ijkl = [];",
									"                                        let sku_name_ijkl = \"\";",
									"                                        sku_name_ijkl += list_variant[0].list_attribute[i].name + \"-\" + list_variant[1].list_attribute[j].name + \"-\" + list_variant[2].list_attribute[k].name + \"-\" + list_variant[3].list_attribute[l].name;",
									"                                        attributes_ijkl[attributes_ijkl.length] = {",
									"                                            \"attribute\": list_variant[0].list_attribute[i].name,",
									"                                            \"attribute_type\": list_variant[0].name",
									"                                        }",
									"                                        attributes_ijkl[attributes_ijkl.length] = {",
									"                                            \"attribute\": list_variant[1].list_attribute[j].name,",
									"                                            \"attribute_type\": list_variant[1].name",
									"                                        }",
									"                                        attributes_ijkl[attributes_ijkl.length] = {",
									"                                            \"attribute\": list_variant[2].list_attribute[k].name,",
									"                                            \"attribute_type\": list_variant[2].name",
									"                                        }",
									"                                        attributes_ijkl[attributes_ijkl.length] = {",
									"                                            \"attribute\": list_variant[3].list_attribute[l].name,",
									"                                            \"attribute_type\": list_variant[3].name",
									"                                        }",
									"",
									"                                        let product_price_ijkl, cost_price_ijkl;",
									"                                        if(!configs.is_use_the_same_product_price){",
									"                                            product_price_ijkl = Math.round(getRandomInt(product_price/2, product_price)/10)*10;",
									"                                        } else {",
									"                                            product_price_ijkl = product_price;",
									"                                        }",
									"                                        cost_price_ijkl = Math.round(product_price_ijkl/2);",
									"",
									"                                        let list_branches_i = [];",
									"                                        let can_pick_quantity_i = 0;",
									"                                        for(let m in list_branch){",
									"                                            let randome_im = getRandomInt(5,50);",
									"                                            list_branches_i[list_branches_i.length] = {",
									"                                                \"branch_id\":list_branch[m].id,",
									"                                                \"inventory_quantity\": randome_im,",
									"                                                \"is_in_business\": true",
									"                                            }",
									"                                            can_pick_quantity_i += randome_im;",
									"                                        }",
									"",
									"                                        uom_branch_1 = []; uom_branch_2 = []; // cần reset lại trước",
									"                                        // switch(uom){",
									"                                        //     case \"Lon\":",
									"                                        //         for(let i in list_branches_i){",
									"                                        //             uom_branch_1[uom_branch_1.length] = {",
									"                                        //                 \"branch_id\":list_branches_i[i].branch_id,",
									"                                        //                 \"inventory_quantity\":Math.round(list_branches_i[i].inventory_quantity/6*100)/100,",
									"                                        //                 \"is_in_business\":true,",
									"                                        //             }",
									"                                        //             uom_branch_2[uom_branch_2.length] = {",
									"                                        //                 \"branch_id\":list_branches_i[i].branch_id,",
									"                                        //                 \"inventory_quantity\":Math.round(list_branches_i[i].inventory_quantity/24*100)/100,",
									"                                        //                 \"is_in_business\":true,",
									"                                        //             }",
									"                                        //         }",
									"                                        //         uoms = [{",
									"                                        //             \"name\":\"Lốc\",",
									"                                        //             \"sale_price\": product_price_ijkl*6,",
									"                                        //             \"cost_price\": cost_price_ijkl*6,",
									"                                        //             \"quantity\": 6",
									"                                        //             // \"branches\": uom_branch_1",
									"                                        //         },{",
									"                                        //             \"name\":\"Thùng\",",
									"                                        //             \"sale_price\": product_price_ijkl*24,",
									"                                        //             \"cost_price\": cost_price_ijkl*24,",
									"                                        //             \"quantity\": 24",
									"                                        //             // \"branches\": uom_branch_2",
									"                                        //         }];",
									"                                        //         break;",
									"                                        //     case \"Lốc\":",
									"                                        //         for(let i in list_branches_i){",
									"                                        //             uom_branch_1[uom_branch_1.length] = {",
									"                                        //                 \"branch_id\":list_branches_i[i].branch_id,",
									"                                        //                 \"inventory_quantity\":list_branches_i[i].inventory_quantity*6,",
									"                                        //                 \"is_in_business\":true,",
									"                                        //             }",
									"                                        //             uom_branch_2[uom_branch_2.length] = {",
									"                                        //                 \"branch_id\":list_branches_i[i].branch_id,",
									"                                        //                 \"inventory_quantity\":Math.round(list_branches_i[i].inventory_quantity/4*100)/100,",
									"                                        //                 \"is_in_business\":true,",
									"                                        //             }",
									"                                        //         }",
									"                                        //         uoms = [{",
									"                                        //             \"name\":\"Lon\",",
									"                                        //             \"sale_price\": Math.round(product_price_ijkl/6),",
									"                                        //             \"cost_price\": Math.round(cost_price_ijkl/6),",
									"                                        //             \"quantity\": parseFloat((1/6).toFixed(2))",
									"                                        //             // \"branches\": uom_branch_1",
									"                                        //         },{",
									"                                        //             \"name\":\"Thùng\",",
									"                                        //             \"sale_price\": product_price_ijkl*4,",
									"                                        //             \"cost_price\": cost_price_ijkl*4,",
									"                                        //             \"quantity\": 4",
									"                                        //             // \"branches\": uom_branch_2",
									"                                        //         }];",
									"                                        //         break;",
									"                                        //     case \"Thùng\":",
									"                                        //         for(let i in list_branches_i){",
									"                                        //             uom_branch_1[uom_branch_1.length] = {",
									"                                        //                 \"branch_id\":list_branches_i[i].branch_id,",
									"                                        //                 \"inventory_quantity\":list_branches_i[i].inventory_quantity*6,",
									"                                        //                 \"is_in_business\":true,",
									"                                        //             }",
									"                                        //             uom_branch_2[uom_branch_2.length] = {",
									"                                        //                 \"branch_id\":list_branches_i[i].branch_id,",
									"                                        //                 \"inventory_quantity\":list_branches_i[i].inventory_quantity*24,",
									"                                        //                 \"is_in_business\":true,",
									"                                        //             }",
									"                                        //         }",
									"                                        //         uoms = [{",
									"                                        //             \"name\":\"Lon\",",
									"                                        //             \"sale_price\": Math.round(product_price_ijkl/24),",
									"                                        //             \"cost_price\": Math.round(cost_price_ijkl/24),",
									"                                        //             \"quantity\": parseFloat((1/24).toFixed(2))",
									"                                        //             // \"branches\": uom_branch_1",
									"                                        //         },{",
									"                                        //             \"name\":\"Lốc\",",
									"                                        //             \"sale_price\": Math.round(product_price_ijkl/4),",
									"                                        //             \"cost_price\": Math.round(cost_price_ijkl/4),",
									"                                        //             \"quantity\": parseFloat((1/4).toFixed(2))",
									"                                        //             // \"branches\": uom_branch_2",
									"                                        //         }];",
									"                                        //         break;",
									"                                        //     default:",
									"                                        //         console.log(\"missing flow\");",
									"                                        //         break;",
									"                                        // }",
									"",
									"                                        let track_inventory_i = true;",
									"",
									"                                        list_sku[list_sku.length] = {",
									"                                            \"allow_negative_inventory\": true, // chấp nhận khi bị âm",
									"                                            \"attributes\": attributes_ijkl,",
									"                                            \"bar_code\": \"\",",
									"                                            \"can_pick_quantity\": can_pick_quantity_i, // có thể mua",
									"                                            \"cost_price\": cost_price_ijkl,",
									"                                            \"images\": [],",
									"                                            \"initial_inventory_quantity\": can_pick_quantity_i, // tồn kho ban đầu?",
									"                                            \"is_hidden\": false,",
									"                                            \"is_in_business\": true,",
									"                                            \"priority\": priority,",
									"                                            // \"product_id\": \"string\",",
									"                                            \"sale_price\": product_price_ijkl,",
									"                                            \"selling_price\": Math.round(product_price_ijkl*0.9),",
									"                                            \"sku_code\": product_code + i + j + k + l,",
									"                                            \"sku_name\": product_name + \" - \" + sku_name_ijkl,",
									"                                            \"track_inventory\": track_inventory_i,",
									"                                            \"branches\":list_branches_i,",
									"                                            // \"uom\": uom,",
									"                                            // \"uoms\": uoms,",
									"                                            \"warning_quantity\": 0,",
									"                                            \"weight\":weight,",
									"                                            \"weight_unit\":weight_unit, // g, kg",
									"                                            \"wholesales\": [] // giá sĩ",
									"                                        };",
									"                                        priority++;",
									"                                    }",
									"                                }",
									"                            }",
									"                        }",
									"                        break;",
									"                    default:",
									"                        console.log(\"missing variant\");",
									"                        break;",
									"                }",
									"            default:",
									"                console.log(\"Missing flow\");",
									"                break;",
									"        }",
									"        ",
									"        // console.log(\"debug list_sku: \",list_sku);",
									"        break;",
									"    default:",
									"        console.log(\"Missing flow\")",
									"        break;",
									"}",
									"",
									"let brand_obj = pm.environment.get(\"C-brand_obj\");",
									"let category_obj = pm.environment.get(\"C-category_obj\");",
									"let placement_array_obj = pm.environment.get(\"C-placement_array_obj\"); // tạm thời BE chỉ handle 1 vì PO đã đổi design",
									"let tag_array_obj = pm.environment.get(\"C-tag_array_obj\");",
									"let tags = [], placements = [];",
									"for(let i in tag_array_obj){",
									"    tags[tags.length] = tag_array_obj[i].id;",
									"}",
									"for(let i in placement_array_obj){",
									"    placements[placements.length] = placement_array_obj[i].id;",
									"}",
									"",
									"payload = {",
									"    \"apply_tax\": true,",
									"    // \"apply_tax_category_income\": true,",
									"    // \"apply_tax_category_sales\": true,",
									"    \"brand_id\": brand_obj.id,",
									"    \"business_id\": parseFloat(pm.environment.get(\"C-business_id\")),",
									"    \"category_id\": category_obj.category_id,",
									"    // \"placement_id\": placement_array_obj[0].id,",
									"    \"placements\":placements,",
									"    \"tags\":tags,",
									"    // \"expense_account_id\": expense_account_id,",
									"    // \"expense_taxes\": expense_taxes,",
									"    \"images\": [],",
									"    // \"income_account_id\": income_account_id,",
									"    // \"income_taxes\": income_taxes,",
									"    // \"is_expense_recorded\": true, // ghi nhận chi phí",
									"    // \"is_income_recorded\": true, // ghi nhận doanh thu",
									"    // \"is_price_including_tax\": false,",
									"    // \"label_id\": \"string\",",
									"    \"list_sku\": list_sku,",
									"    \"list_uom\":list_uom,",
									"    \"list_variant\":list_variant,",
									"    // \"org_id\": 0,",
									"    \"product_name\": product_name,",
									"    \"product_type\": configs.product_type,",
									"    \"search_keyword\": \"\",",
									"    \"short_desc\": product_name + \" description\",",
									"    // \"track_inventory\": true, // theo dõi kho hàng => batch_product và imei_product bắt buộc bật => tầng sku chứ ko phải product",
									"    \"uom\": uom // uom_list[getRandomInt(0,uom_list.length - 1)]",
									"}",
									"",
									"console.log(\"payload: \",payload);",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));",
									"pm.environment.set(\"C-product_obj\",payload);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"let case_ = pm.environment.get(\"C-case_\");",
									"let configs = pm.environment.get(\"C-configs\");",
									"",
									"let jsData = pm.response.json();",
									"switch(case_){",
									"    case 1: case 2: case 3: case 4:",
									"        pm.test(\"Status code is 400\", function () {",
									"            pm.response.to.have.status(400);",
									"        });",
									"",
									"        pm.test(\"System code is 104000\", function () {",
									"            pm.expect(jsData.code).to.eql(104000);",
									"        });",
									"",
									"        console.log(\"Error: \", jsData);",
									"",
									"        case_ = 5;",
									"        // case_++;",
									"        pm.environment.set(\"C-case_\",case_);",
									"        postman.setNextRequest(\"create_product\");",
									"        break;",
									"    case 5:",
									"        console.log(\"debug: \" + JSON.stringify(jsData));",
									"        pm.test(\"Status code is 200\", function () {",
									"            pm.response.to.have.status(200);",
									"        });",
									"",
									"        pm.test(\"System code is 102001\", function () {",
									"            pm.expect(jsData.code).to.eql(102001);",
									"        });",
									"",
									"        pm.environment.unset(\"C-case_\");",
									"        let product_obj = pm.environment.get(\"C-product_obj\");",
									"",
									"        // update product_id for product_obj",
									"        product_obj.product_id = jsData.data.id;",
									"",
									"        pm.test(\"product_name of product correctly! \" + product_obj.product_name, function () {",
									"            pm.expect(product_obj.product_name == jsData.data.product_name).to.be.true;",
									"        });",
									"",
									"        // product_type tạm thời là physical, sau này sẽ handle thêm value: commbo, add-on",
									"        // pm.test(\"product_type of product correctly! \" + product_obj.product_type, function () {",
									"        //     pm.expect(product_obj.product_type == jsData.data.product_type).to.be.true;",
									"        // });",
									"",
									"        pm.test(\"short_desc of product correctly! \" + product_obj.short_desc, function () {",
									"            pm.expect(product_obj.short_desc == jsData.data.short_desc).to.be.true;",
									"        });",
									"",
									"        // uom product => sẽ bỏ, chỉ uom theo sku",
									"        // pm.test(\"uom of product correctly! \" + product_obj.uom, function () {",
									"        //     pm.expect(product_obj.uom == jsData.data.uom).to.be.true;",
									"        // });",
									"",
									"        pm.test(\"apply_tax of product correctly! \" + product_obj.apply_tax, function () {",
									"            pm.expect(product_obj.apply_tax == jsData.data.apply_tax).to.be.true;",
									"        });",
									"",
									"        // track_inventory => xử lý ở tầng sku",
									"        // pm.test(\"track_inventory of product correctly! \" + product_obj.track_inventory, function () {",
									"        //     pm.expect(product_obj.track_inventory == jsData.data.track_inventory).to.be.true;",
									"        // });",
									"",
									"        // allow_negativeinventory",
									"        pm.test(\"allow_negativeinventory of product correctly! \" + product_obj.allow_negativeinventory, function () {",
									"            pm.expect(product_obj.allow_negativeinventory == jsData.data.allow_negativeinventory).to.be.true;",
									"        });",
									"",
									"        // apply_tax_category_sales => false (only book)",
									"        pm.test(\"apply_tax_category_sales of product must be false!\", function () {",
									"            pm.expect(jsData.data.apply_tax_category_sales).to.be.false;",
									"        });",
									"",
									"        // apply_tax_category_income => false (only book)",
									"        pm.test(\"apply_tax_category_income of product must be false!\", function () {",
									"            pm.expect(jsData.data.apply_tax_category_income).to.be.false;",
									"        });",
									"",
									"        // is_price_including_tax => false (only book)",
									"        pm.test(\"is_price_including_tax of product must be false!\", function () {",
									"            pm.expect(jsData.data.is_price_including_tax).to.be.false;",
									"        });",
									"",
									"        // category_id",
									"        pm.test(\"category_id of product correctly! \" + product_obj.category_id, function () {",
									"            pm.expect(product_obj.category_id == jsData.data.category_id).to.be.true;",
									"        });",
									"",
									"        // brand_id",
									"        pm.test(\"brand_id of product correctly! \" + product_obj.brand_id, function () {",
									"            pm.expect(product_obj.brand_id == jsData.data.brand_id).to.be.true;",
									"        });",
									"",
									"        // placement => tạm thời là object => sẽ update thành array object",
									"        let expect_placement_list = [], actual_placement_list = [];",
									"",
									"        // tag",
									"        let expect_tag_list = [], actual_tag_list = [];",
									"",
									"        /**",
									"         * list_sku",
									"         * - sku_name, sku_code => dùng để mapping, lưu lại id",
									"         * - sale_price, cost_price, selling_price, can_pick_quantity",
									"         * - is_hidden, is_in_business, priority",
									"         * - weight, weight_unit",
									"         * - list_attributes",
									"         * - list_uoms",
									"         * => hiện tại ko trả list sku trong API create",
									"         */ ",
									"        let total_sku = product_obj.list_sku.length;",
									"        let count = 0;",
									"        for(let i in jsData.data.list_sku){",
									"            for(let j in product_obj.list_sku){",
									"                if(jsData.data.list_sku[i].sku_code == product_obj.list_sku[j].sku_code && jsData.data.list_sku[i].sku_name == product_obj.list_sku[j].sku_name){",
									"                    count++;",
									"                    product_obj.list_sku[j].sku_id = jsData.data.list_sku[i].id;",
									"",
									"                    pm.test(\"--- sale_price of sku \" + product_obj.list_sku[j].sku_name + \" is correct! \" + product_obj.list_sku[j].sale_price, function () {",
									"                        pm.expect(product_obj.list_sku[j].sale_price).to.eql(jsData.data.list_sku[i].sale_price);",
									"                    });",
									"",
									"                    pm.test(\"--- cost_price of sku \" + product_obj.list_sku[j].sku_name + \" is correct! \" + product_obj.list_sku[j].cost_price, function () {",
									"                        pm.expect(product_obj.list_sku[j].cost_price).to.eql(jsData.data.list_sku[i].cost_price);",
									"                    });",
									"",
									"                    pm.test(\"--- can_pick_quantity of sku \" + product_obj.list_sku[j].sku_name + \" is correct! \" + product_obj.list_sku[j].can_pick_quantity, function () {",
									"                        pm.expect(product_obj.list_sku[j].can_pick_quantity).to.eql(jsData.data.list_sku[i].can_pick_quantity);",
									"                    });",
									"",
									"                    pm.test(\"--- selling_price of sku \" + product_obj.list_sku[j].sku_name + \" is correct! \" + product_obj.list_sku[j].selling_price, function () {",
									"                        pm.expect(product_obj.list_sku[j].selling_price).to.eql(jsData.data.list_sku[i].selling_price);",
									"                    });",
									"",
									"                    pm.test(\"--- is_hidden of sku \" + product_obj.list_sku[j].sku_name + \" is correct! \" + product_obj.list_sku[j].is_hidden, function () {",
									"                        pm.expect(product_obj.list_sku[j].is_hidden).to.eql(jsData.data.list_sku[i].is_hidden);",
									"                    });",
									"",
									"                    pm.test(\"--- is_in_business of sku \" + product_obj.list_sku[j].sku_name + \" is correct! \" + product_obj.list_sku[j].is_in_business, function () {",
									"                        pm.expect(product_obj.list_sku[j].is_in_business).to.eql(jsData.data.list_sku[i].is_in_business);",
									"                    });",
									"",
									"                    pm.test(\"--- priority of sku \" + product_obj.list_sku[j].sku_name + \" is correct! \" + product_obj.list_sku[j].priority, function () {",
									"                        pm.expect(product_obj.list_sku[j].priority).to.eql(jsData.data.list_sku[i].priority);",
									"                    });",
									"",
									"                    pm.test(\"--- weight of sku \" + product_obj.list_sku[j].sku_name + \" is correct! \" + product_obj.list_sku[j].weight, function () {",
									"                        pm.expect(product_obj.list_sku[j].weight).to.eql(jsData.data.list_sku[i].weight);",
									"                    });",
									"",
									"                    pm.test(\"--- weight_unit of sku \" + product_obj.list_sku[j].sku_name + \" is correct! \" + product_obj.list_sku[j].weight_unit, function () {",
									"                        pm.expect(product_obj.list_sku[j].weight_unit).to.eql(jsData.data.list_sku[i].weight_unit);",
									"                    });",
									"",
									"                    // list_attributes => sau khi tạo sẽ về trang list nên server đang ko trả về và cũng ko cần thiết check",
									"                    // let act_list_attributes_i = jsData.data.list_sku[i].list_attributes;",
									"                    // let exp_list_attributes_j = product_obj.list_sku[j].attributes;",
									"                    // if(!exp_list_attributes_j) exp_list_attributes_j = null;",
									"                    // pm.test(\"--- list_attributes of sku \" + product_obj.list_sku[j].sku_name + \" is correct!\", function () {",
									"                    //     console.log(\"act list_attributes: \", act_list_attributes_i);",
									"                    //     console.log(\"exp list_attributes: \", exp_list_attributes_j);",
									"                    //     pm.expect(JSON.stringify(act_list_attributes_i)).to.eql(JSON.stringify(exp_list_attributes_j));",
									"                    // });",
									"",
									"                    // list_uoms => sau khi tạo sẽ về trang list nên server đang ko trả về và cũng ko cần thiết check",
									"                    let act_list_uoms_i = [], exp_list_uoms_j = [];",
									"                    for(let m in jsData.data.list_sku[i].list_uoms){",
									"                        act_list_uoms_i[act_list_uoms_i.length] = {",
									"                            \"price\":jsData.data.list_sku[i].list_uoms[m].price,",
									"                            \"quantity\":jsData.data.list_sku[i].list_uoms[m].quantity",
									"                        }",
									"                    }",
									"                    if(\"uoms\" in product_obj.list_sku[j]){",
									"                        for(let n in product_obj.list_sku[j].uoms){",
									"                            exp_list_uoms_j[exp_list_uoms_j.length] = {",
									"                                \"price\":product_obj.list_sku[j].uoms[n].price,",
									"                                \"quantity\":product_obj.list_sku[j].uoms[n].quantity",
									"                            }",
									"                        }",
									"                    } else {",
									"                        exp_list_uoms_j = null;",
									"                    }",
									"                    pm.test(\"--- list_uoms of sku \" + product_obj.list_sku[j].sku_name + \" is correct!\", function () {",
									"                        console.log(\"act list_uoms: \", act_list_uoms_i);",
									"                        console.log(\"exp list_uoms: \", exp_list_uoms_j);",
									"                        pm.expect(JSON.stringify(act_list_uoms_i)).to.eql(JSON.stringify(exp_list_uoms_j));",
									"                    });",
									"                    break;",
									"                }",
									"            }",
									"        }",
									"",
									"        // pm.test(\"Found all SKU! \" + total_sku, function () {",
									"        //     pm.expect(count).to.eql(total_sku);",
									"        // });",
									"",
									"        testcase++;",
									"        pm.environment.set(\"C-testcase\",testcase);",
									"        pm.environment.set(\"C-product_obj\",product_obj);",
									"        postman.setNextRequest(\"get_list_product\"); // get_list_product",
									"        break;",
									"    default:",
									"        console.log(\"missing flow, end test\");",
									"        postman.setNextRequest(null);",
									"        break;",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "authorization",
								"value": "Bearer {{C-userToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-business/api/v1/pos/product/create",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-business",
								"api",
								"v1",
								"pos",
								"product",
								"create"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "inventory",
			"item": [
				{
					"name": "get_list_inventory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let configs = pm.environment.get(\"C-configs\");",
									"    let total_inventory_sku = null;",
									"    try {",
									"        total_inventory_sku = jsData.meta.total_rows;",
									"    } catch {",
									"        console.log(\"Missing meta data\");",
									"    }",
									"",
									"    switch(testcase){",
									"        case 2:",
									"            pm.environment.unset(\"C-page\");",
									"            pm.environment.unset(\"C-page_size\");",
									"            pm.test(\"got total_inventory_sku \" + total_inventory_sku, function () {",
									"                pm.expect(total_inventory_sku != null).to.be.true;",
									"            });",
									"            pm.environment.set(\"C-total_inventory_sku\",total_inventory_sku);",
									"",
									"            postman.setNextRequest(\"get_inventory_overview\"); // get_inventory_overview",
									"            break;",
									"        case 4: case 6:",
									"            let page = pm.environment.get(\"C-page\");",
									"            let total_page = jsData.meta.total_pages;",
									"",
									"            let list_inventory_sku = pm.environment.get(\"C-list_inventory_sku\");",
									"            if(!list_inventory_sku){",
									"                list_inventory_sku = [];",
									"            }",
									"            for(let i in jsData.data){",
									"                list_inventory_sku[list_inventory_sku.length] = {",
									"                    \"sku_id\":jsData.data[i].sku_id,",
									"                    \"sku_code\":jsData.data[i].sku_code,",
									"                    \"sku_name\":jsData.data[i].sku_name,",
									"                    \"sale_price\":jsData.data[i].sale_price,",
									"                    \"cost_price\":jsData.data[i].cost_price,",
									"                    \"selling_price\":jsData.data[i].selling_price,",
									"                    \"sold_quantity\":jsData.data[i].sold_quantity,",
									"                    \"uom\":jsData.data[i].uom,",
									"                    \"total_quantity\":jsData.data[i].total_quantity, ",
									"                    \"total_inventory_value\":jsData.data[i].total_inventory_value, ",
									"                    \"total_can_pick_quantity\":jsData.data[i].total_can_pick_quantity, ",
									"                    \"total_delivery_quantity\":jsData.data[i].total_delivery_quantity",
									"                }",
									"            }",
									"            pm.environment.set(\"C-list_inventory_sku\",list_inventory_sku);",
									"",
									"            if(page >= total_page || page >= configs.limit_page){",
									"                pm.environment.unset(\"C-page\");",
									"                pm.environment.unset(\"C-page_size\");",
									"",
									"                let old_total_inventory_sku = pm.environment.get(\"C-total_inventory_sku\");",
									"                let product_obj = pm.environment.get(\"C-product_obj\");",
									"                console.log(\"product_obj:\",product_obj);",
									"                let total_sku_created = product_obj.list_sku.length;",
									"",
									"                pm.test(\"total_inventory_sku increase \" + total_sku_created, function () {",
									"                    pm.expect(old_total_inventory_sku + total_sku_created).to.eql(total_inventory_sku);",
									"                });",
									"",
									"                // check detail & increase data",
									"                let countSKU = 0;",
									"                for(let i in list_inventory_sku){",
									"                    for(let j in product_obj.list_sku){",
									"                        if(list_inventory_sku[i].sku_id == product_obj.list_sku[j].sku_id){",
									"                            countSKU++;",
									"                            // debug",
									"                            if(j == 0){",
									"                                console.log(\"debug record 0:\",list_inventory_sku[i]);",
									"                            }",
									"",
									"                            if(product_obj.list_sku[j].track_inventory){",
									"                                pm.test(\"sku \" + list_inventory_sku[i].sku_name + \" has total_can_pick_quantity must be \" + product_obj.list_sku[j].can_pick_quantity, function () {",
									"                                    console.log(\"act: \" + list_inventory_sku[i].total_quantity);",
									"                                    pm.expect(list_inventory_sku[i].total_can_pick_quantity).to.eql(product_obj.list_sku[j].can_pick_quantity);",
									"                                });",
									"",
									"                                pm.test(\"sku \" + list_inventory_sku[i].sku_name + \" has total_quantity be \" + product_obj.list_sku[j].initial_inventory_quantity, function () {",
									"                                    console.log(\"act: \" + list_inventory_sku[i].total_quantity);",
									"                                    pm.expect(list_inventory_sku[i].total_quantity).to.eql(product_obj.list_sku[j].initial_inventory_quantity);",
									"                                });",
									"                            } else {",
									"                                // nothing track_inventory",
									"                                pm.test(\"sku \" + list_inventory_sku[i].sku_name + \" has can_pick_quantity must be 0\", function () {",
									"                                    pm.expect(list_inventory_sku[i].total_can_pick_quantity).to.eql(0);",
									"                                });",
									"",
									"                                pm.test(\"sku \" + list_inventory_sku[i].sku_name + \" has total_quantity must be 0\", function () {",
									"                                    pm.expect(list_inventory_sku[i].total_quantity).to.eql(0);",
									"                                });",
									"                            }",
									"                            break;",
									"                        }",
									"                    }",
									"                }",
									"",
									"                pm.test(\"Found all SKU \" + total_sku_created, function () {",
									"                    pm.expect(total_sku_created).to.eql(countSKU);",
									"                });",
									"",
									"                postman.setNextRequest(\"get_inventory_overview\"); // get_inventory_overview",
									"            } else {",
									"                page++;",
									"                pm.environment.set(\"C-page\",page);",
									"",
									"                console.log(\"view next page (\" + page + \") to get more inventory\");",
									"                postman.setNextRequest(\"get_list_inventory\");",
									"            }",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get list sku in inventory, end test\", jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let page = pm.environment.get(\"C-page\");",
									"",
									"if(!page){",
									"    page = 1;",
									"    pm.environment.set(\"C-page\",page);",
									"",
									"    let page_size = 50;",
									"    pm.environment.set(\"C-page_size\",page_size);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/inventory/get-list?list_contact_ids&page={{C-page}}&page_size={{C-page_size}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"inventory",
								"get-list"
							],
							"query": [
								{
									"key": "list_contact_ids",
									"value": null
								},
								{
									"key": "page",
									"value": "{{C-page}}"
								},
								{
									"key": "page_size",
									"value": "{{C-page_size}}"
								},
								{
									"key": "search",
									"value": "",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "asc",
									"disabled": true
								},
								{
									"key": "status",
									"value": "",
									"disabled": true
								},
								{
									"key": "branch_id",
									"value": "{{C-branch_id}}",
									"disabled": true
								},
								{
									"key": "category_ids",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get_inventory_overview",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let total_inventory_summary = null;",
									"    try {",
									"        total_inventory_summary = jsData.data;",
									"    } catch {",
									"        console.log(\"Missing meta data\");",
									"    }",
									"",
									"    switch(testcase){",
									"        case 2:",
									"            pm.test(\"got total_inventory_summary\", function () {",
									"                pm.expect(total_inventory_summary != null).to.be.true;",
									"            });",
									"            pm.environment.set(\"C-total_inventory_summary\",total_inventory_summary);",
									"",
									"           postman.setNextRequest(\"get_list_product\"); // get_list_product",
									"            break;",
									"        case 4: case 6:",
									"            let old_total_inventory_summary = pm.environment.get(\"C-total_inventory_summary\");",
									"            let product_obj = pm.environment.get(\"C-product_obj\");",
									"",
									"            // check count_inventory_product => số lượng tồn sum(sku.quantity)",
									"            let exp_count_inventory_product_change = 0, exp_inventory_value_change = 0, exp_total_non_inventory_over_change = 0;",
									"            for(let i in product_obj.list_sku){",
									"                if(product_obj.list_sku[i].track_inventory){",
									"                    exp_count_inventory_product_change += product_obj.list_sku[i].initial_inventory_quantity;",
									"                    exp_inventory_value_change += product_obj.list_sku[i].initial_inventory_quantity*product_obj.list_sku[i].cost_price;",
									"                } else {",
									"                    exp_total_non_inventory_over_change++;",
									"                }",
									"            }",
									"",
									"            pm.test(\"count_inventory_product increase \" + exp_count_inventory_product_change, function () {",
									"                console.log(\"old: \", old_total_inventory_summary);",
									"                console.log(\"new: \", total_inventory_summary);",
									"                pm.expect(old_total_inventory_summary.count_inventory_product + exp_count_inventory_product_change).to.eql(total_inventory_summary.count_inventory_product);",
									"            });",
									"",
									"            // check inventory_value => giá trị tồn sum(sku.quantity*sku.cost)",
									"            pm.test(\"inventory_value increase \" + exp_inventory_value_change, function () {",
									"                pm.expect(old_total_inventory_summary.inventory_value + exp_inventory_value_change).to.eql(total_inventory_summary.inventory_value);",
									"            });",
									"",
									"            // check total_inventory_low => tồn kho thấp (rule???) => tạo product sẽ ko bao giờ ảnh hưởng đến tồn kho thấp, phần này setup riêng trên tồn kho",
									"            pm.test(\"nothing happen with total_inventory_low\", function () {",
									"                pm.expect(old_total_inventory_summary.total_inventory_low).to.eql(total_inventory_summary.total_inventory_low);",
									"            });",
									"",
									"            // check total_non_inventory_over => chưa bật tồn kho",
									"            pm.test(\"total_non_inventory_over increase \" + exp_total_non_inventory_over_change, function () {",
									"                pm.expect(old_total_inventory_summary.total_non_inventory_over + exp_total_non_inventory_over_change).to.eql(total_inventory_summary.total_non_inventory_over);",
									"            });",
									"",
									"            console.log(\"--- End Testsuite 80 ---\");",
									"            postman.setNextRequest(\"\"); //",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get inventory summary, end test\", jsData);",
									"    postman.setNextRequest(null);",
									"}  ",
									"",
									"let rep = {",
									"    \"data\": {",
									"        \"count_inventory_product\": 0,",
									"        \"inventory_value\": 0,",
									"        \"total_inventory_low\": 0,",
									"        \"total_non_inventory_over\": 0",
									"    }",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/inventory/overview",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"inventory",
								"overview"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"let configs = {",
					"    \"is_use_email\":true,",
					"    \"is_default_branch\":true,",
					"    \"limit_page\":5,",
					"    \"timeout\":12000, // miliseconds => timeout to call API",
					"    \"is_buyer_gen\":false,",
					"    \"is_use_the_same_product_price\":false,",
					"    \"product_type\":\"physical\", // physical, batch_product, imei_product",
					"    \"test_payment_method\":\"va_galaxy\" // bank_transfer, viet_qr_pro_mb, va_galaxy",
					"}",
					"",
					"pm.environment.set(\"C-configs\",configs);",
					"// console.log(\"configs: \",configs);",
					"",
					"/**",
					" * Refactor 28 Jun 2024",
					" * - product_type = physical: khởi tạo sp thường, có thể có hoặc ko có tồn kho, không truyền batch",
					" * - product_type = batch_product: khởi tạo sp lô, bắt buộc có tồn kho (khởi tạo = 0), có thể có hoặc không có uom (handle case bắt buộc có uom)",
					" * - product_type = imei_product: khởi tạp sp imei, bắt buộc có tồn kho, không có uom, không truyền batch",
					" */"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"// ====================================== parser cURL",
					"function parseCURL(request_api){",
					"    let curl = \"\";",
					"    switch(request_api.method){",
					"        case \"PUT\":",
					"            curl = \"curl --location --request PUT \";",
					"            break;",
					"        case \"PATCH\":",
					"            curl = \"curl --location --request PATCH \";",
					"            break;",
					"        case \"DELETE\":",
					"            curl = \"curl --location --request DELETE \";",
					"            break;",
					"        default:",
					"            curl = \"curl --location \";",
					"            break;",
					"    }",
					"    curl += \"'\" + request_api.url.protocol + \"://\"",
					"    // host",
					"    for(let i in request_api.url.host){",
					"        if(i >= request_api.url.host.length - 1){",
					"            curl += request_api.url.host[i] + \"/\";",
					"        } else {",
					"            curl += request_api.url.host[i] + \".\";",
					"        }",
					"    }",
					"    // path",
					"    for(let i in request_api.url.path){",
					"        if(i >= request_api.url.path.length - 1){",
					"            curl += request_api.url.path[i];",
					"        } else {",
					"            curl += request_api.url.path[i] + \"/\";",
					"        }",
					"    }",
					"    // query (if have)",
					"    if(\"query\" in request_api.url){",
					"        if(request_api.url.length > 0){",
					"            curl += \"? \";",
					"            for(let i in request_api.url.query){",
					"                if(i >= request_api.url.query.length - 1){",
					"                    curl += request_api.url.query[i].key + \"=\" + request_api.url.query[i].value + \"' \";",
					"                } else {",
					"                    curl += request_api.url.query[i].key + \"=\" + request_api.url.query[i].value + \"&\";",
					"                }",
					"            }",
					"        } else {",
					"            curl += \"' \";",
					"        }",
					"    } else {",
					"        curl += \"' \";",
					"    }",
					"    // header",
					"    for(let i in request_api.header){",
					"        if(i >= request_api.header.length - 1){",
					"            curl += \"--header '\" + request_api.header[i].key + \": \" + request_api.header[i].value + \"'\";",
					"        } else {",
					"            curl += \"--header '\" + request_api.header[i].key + \": \" + request_api.header[i].value + \"' \";",
					"        }",
					"    }",
					"    switch(request_api.method){",
					"        case \"POST\":",
					"            curl += \" --data '\" + request_api.body.raw + \"'\"",
					"            break;",
					"        case \"PUT\": case \"PATCH\":",
					"            curl += \" --data-raw '\" + request_api.body.raw + \"'\"",
					"            break;",
					"        default:",
					"            break;",
					"    }",
					"    console.log(curl);",
					"    return curl;",
					"}",
					"const request_api = pm.request.toJSON();",
					"parseCURL(request_api);"
				]
			}
		}
	]
}