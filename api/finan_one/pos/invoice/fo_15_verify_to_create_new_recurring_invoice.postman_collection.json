{
	"info": {
		"_postman_id": "f82dd3c8-479c-40a8-a823-b78f1d92110c",
		"name": "fo_15_verify_to_create_new_recurring_invoice",
		"description": "### Testsuite: Verify to create new recurring invoice\n\n###### Testcase:\n\n1. Login\n    \n    1. Login with owner account => get token\n        \n    2. Verify token => get business_id\n        \n    3. Get current business / business detail => get branch_id\n        \n2. Get data\n    \n    1. Contact / Get list contact => random a contact to create invoice\n        \n    2. COA account / get list account => save internal_account_obj (credit_account, discount_account)\n        \n    3. account cash_n_bank / get list bank account => use to create invoice with payment method bank_transfer\n        \n    4. product / get list product => save all products (link with coa)\n        \n    5. tax / get list tax => get a tax (the same with coa-tax)\n        \n    6. Recurring invoice / Get list recurring invoice => get total\n        \n3. Create DRAFT recurring invoice\n    \n    1. Unhappy case: sale_order_info = {}\n        \n    2. Unhappy case: sale_order_info.items = \\[\\]\n        \n    3. Unhappy case: sale_order_info missing customer\n        \n    4. Unhappy case: sale_order_info.customer with email is wrong format\n        \n    5. Unhappy case: sale_order_info missing entry_code (free rule)\n        \n    6. Unhappy case: sale_order_info.entry_code is existed\n        \n    7. Unhappy case: sale_order_info.tax_type = \"\"\n        \n    8. Unhappy case: sale_order_info.payment_menthod = \"\"\n        \n    9. Unhappy case: status = \"\"\n        \n    10. Unhappy case: cart_status = \"\"\n        \n    11. Unhappy case: missing recurrence_type & day_of_type\n        \n    12. Unhappy case: missing due_date_type & due_date_value\n        \n    13. Happy case: successful\n        \n4. Check data\n    \n    1. Recurring invoice / Get list recurring invoice => total increase 1, have new recurring invoice\n        \n    2. Recurring invoice / Get recurring invoice detail => data correctly\n        \n5. Create SAVED recurring invoice (random cart_status: draft, saved, saved_and_sent)\n    \n6. Check data\n    \n    1. Recurring invoice / Get list recurring invoice => total increase 1, have new recurring invoice\n        \n    2. Recurring invoice / Get recurring invoice detail => data correctly\n        \n\n###### Note:\n\n- Nếu run daily cần kiểm soát số lượng invoice dc tạo ra, hoặc phải có luồng delete bớt recurring invoice\n    \n- (\\*1) Cần check lại các type setup có thể tự động tạo daily dc ko\n    \n- Case 7 & 8 sẽ update sau khi handle flow send email",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "282640"
	},
	"item": [
		{
			"name": "authen",
			"item": [
				{
					"name": "login",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// ============================= random characters",
									"function randomChars(length) {",
									"    var result           = '';",
									"    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
									"    var charactersLength = characters.length;",
									"    for ( var i = 0; i < length; i++ ) {",
									"      result += characters.charAt(Math.floor(Math.random() * ",
									" charactersLength));",
									"   }",
									"   return result;",
									"}",
									"",
									"let testcase = 1;",
									"console.log(\"-------- Start Testsuite 15 --------\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let platform = [\"desktop-web\",\"mobile-web\",\"mobile-app\"];",
									"let configs = pm.environment.get(\"C-configs\");",
									"let payload;",
									"if(configs.is_use_email){",
									"    payload = {",
									"        \"app_version\": \"1.0.0\",",
									"        \"device_info\": {",
									"            \"id\": randomChars(7) + \"-\" + randomChars(4) + \"-\" + randomChars(4) + \"-\" + randomChars(4) + \"-\" + randomChars(12),",
									"            \"name\": \"IP name\",",
									"            \"os\": \"iphone\"",
									"        },",
									"        \"email\": pm.environment.get(\"SER-email\"), // pm.environment.get(\"SER-email\")",
									"        \"encrypted_password\": pm.environment.get(\"SER-password\"),",
									"        \"phone_number\": \"\",",
									"        \"platform_key\": platform[0]",
									"    }",
									"} else {",
									"    payload = {",
									"        \"app_version\": \"1.0.0\",",
									"        \"device_info\": {",
									"            \"id\": randomChars(7) + \"-\" + randomChars(4) + \"-\" + randomChars(4) + \"-\" + randomChars(4) + \"-\" + randomChars(12),",
									"            \"name\": \"IP name\",",
									"            \"os\": \"iphone\"",
									"        },",
									"        \"email\":\"\", // pm.environment.get(\"SER-email\")",
									"        \"encrypted_password\": pm.environment.get(\"SER-password\"),",
									"        \"phone_number\": pm.environment.get(\"SER-phone_number\"),",
									"        \"platform_key\": platform[0]",
									"    }",
									"}",
									"",
									"console.log(\"payload: \",payload);",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));",
									"pm.environment.set(\"C-testcase\",testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    pm.test(\"System code is 102000\", function () {",
									"        pm.expect(jsData.code).to.eql(102000);",
									"    });",
									"",
									"    if(jsData.code == 102000){",
									"        let userToken = null;",
									"        try {",
									"            userToken = jsData.data.access_token;",
									"            pm.environment.set(\"C-userToken\",userToken);",
									"        } catch {",
									"            console.log(\"Can't get userToken\");",
									"        }",
									"",
									"        pm.test(\"Got userToken\", function () {",
									"            pm.expect(userToken != null).to.be.true;",
									"        });",
									"",
									"        let userInfo = jsData.data.user_info;",
									"",
									"        // show log",
									"        console.log(\"userInfo:\",JSON.stringify(userInfo));",
									"        pm.environment.set(\"C-userInfo\",userInfo);",
									"",
									"        postman.setNextRequest(\"verify_token_to_get_business\");",
									"    } else {",
									"        console.log(\"Can't get Token, end test\",jsData);",
									"        postman.setNextRequest(null);",
									"    }",
									"} else {",
									"    console.log(\"Can't login new account, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "x-locale",
								"value": "<string>",
								"description": "locale",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-user/api/v1/auth/login",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-user",
								"api",
								"v1",
								"auth",
								"login"
							]
						},
						"description": "Login User"
					},
					"response": []
				},
				{
					"name": "verify_token_to_get_business",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// verify token to get business",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = JSON.parse(responseBody);",
									"if(pm.response.code == 200 && jsData.code == 102000){",
									"    const jsData = pm.response.json();",
									"    pm.environment.set(\"C-user_id\",jsData.data.user_id);",
									"",
									"    let business_id = jsData.data.headers[\"x-business-id\"];",
									"    console.log(\"business_id: \" + business_id);",
									"    pm.environment.set(\"C-business_id\",business_id);",
									"",
									"    postman.setNextRequest(\"get_current_business\");",
									"} else {",
									"    console.log(\"Can't check token to get business_id, end test\");",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"token\": \"{{C-userToken}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-user/api/v1/auth/verify-token",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-user",
								"api",
								"v1",
								"auth",
								"verify-token"
							]
						},
						"description": "Login User"
					},
					"response": []
				},
				{
					"name": "get_current_business",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    // console.log(\"Current business info: \", jsData.data);",
									"    let branch_id = null;",
									"    try {",
									"        branch_id = jsData.data.current_business.list_branch[0].id;",
									"        pm.environment.set(\"C-branch_id\",branch_id);",
									"    } catch {",
									"        console.log(\"Can't get branch id\");",
									"    }",
									"",
									"    pm.test(\"Got branch id \" + branch_id, function () {",
									"        pm.expect(branch_id != null).to.be.true;",
									"    });",
									"    ",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    testcase++;",
									"    pm.environment.set(\"C-testcase\",testcase);",
									"    postman.setNextRequest(\"get_list_contact\");",
									"} else {",
									"    console.log(\"Can't get business detail, end test\", jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-business/api/v1/business/get-current",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-business",
								"api",
								"v1",
								"business",
								"get-current"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "contact",
			"item": [
				{
					"name": "get_list_contact",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// const clRandom = pm.require('@chaule2906/cl-random');",
									"// ============================= random number between min and max",
									"function getRandomInt(min, max) {",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = pm.response.json();",
									"if(pm.response.code == 200 && jsData.code == 102000){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let total_pages = jsData.meta.total_pages;",
									"    let page = pm.environment.get(\"C-page\");",
									"",
									"    let list_contact = pm.environment.get(\"C-list_contact\");",
									"    if(!list_contact){",
									"        list_contact = [];",
									"    }",
									"",
									"    for(let item in jsData.data){",
									"        if(jsData.data[item].contact_name.includes(\"[API]\")){",
									"            list_contact[list_contact.length] = {",
									"                \"contact_id\":jsData.data[item].id,",
									"                \"name\":jsData.data[item].contact_name,",
									"                \"phone_number\":jsData.data[item].phone_number,",
									"                \"email\":jsData.data[item].email",
									"            }",
									"        }",
									"    }",
									"    pm.environment.set(\"C-list_contact\",list_contact);",
									"",
									"    if(page >= total_pages){",
									"        // must clear page & page_size",
									"        pm.environment.unset(\"C-page\");",
									"        pm.environment.unset(\"C-page_size\");",
									"",
									"        pm.test(\"Got all contact! \" + list_contact.length, function () {",
									"            pm.environment.set(\"C-list_contact\",list_contact);",
									"            pm.expect(list_contact.length > 0).to.be.true;",
									"        });",
									"",
									"        // let contact_obj = list_contact[clRandom.getRandomInt(0,list_contact.length - 1)];",
									"        let contact_obj = list_contact[getRandomInt(0,list_contact.length - 1)];",
									"        console.log(\"will create invoice for contact: \", contact_obj);",
									"        pm.environment.set(\"C-contact_id\",contact_obj.contact_id);",
									"",
									"        postman.setNextRequest(\"get_list_internal_account\"); // get_list_internal_account",
									"    } else {",
									"        page++;",
									"        pm.environment.set(\"C-page\",page);",
									"",
									"        console.log(\"view next page (\" + page + \") to get more contact\");",
									"        postman.setNextRequest(\"get_list_contact\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get list contact, end test\");",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let page = pm.environment.get(\"C-page\");",
									"",
									"if(!page){",
									"    page = 1;",
									"    pm.environment.set(\"C-page\",page);",
									"",
									"    let page_size = 20;",
									"    pm.environment.set(\"C-page_size\",page_size);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-business/api/v1/contact/get-list?business_id={{C-business_id}}&page={{C-page}}&page_size={{C-page_size}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-business",
								"api",
								"v1",
								"contact",
								"get-list"
							],
							"query": [
								{
									"key": "search",
									"value": "",
									"disabled": true
								},
								{
									"key": "business_id",
									"value": "{{C-business_id}}"
								},
								{
									"key": "page",
									"value": "{{C-page}}"
								},
								{
									"key": "page_size",
									"value": "{{C-page_size}}"
								},
								{
									"key": "sort",
									"value": "",
									"disabled": true
								},
								{
									"key": "option",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "account coa",
			"item": [
				{
					"name": "get_list_internal_account",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let coa = [];",
									"    try {",
									"        for(let i in jsData.data){",
									"            let sub_group_i = [];",
									"            for(let j in jsData.data[i].sub_group){",
									"                let accounts_j = [];",
									"                for(let k in jsData.data[i].sub_group[j].accounts){",
									"                    accounts_j[accounts_j.length] = {",
									"                        \"account_name\":jsData.data[i].sub_group[j].accounts[k].account_name,",
									"                        \"account_id\":jsData.data[i].sub_group[j].accounts[k].id,",
									"                        \"account_name_custom\":jsData.data[i].sub_group[j].accounts[k].account_name_custom,",
									"                        \"account_type\":jsData.data[i].sub_group[j].accounts[k].account_type,",
									"                        \"business_id\":jsData.data[i].sub_group[j].accounts[k].business_id,",
									"                        \"account_source\":jsData.data[i].sub_group[j].accounts[k].account_source,",
									"                        \"account_type\":jsData.data[i].sub_group[j].accounts[k].account_type,",
									"                        \"account_number\":jsData.data[i].sub_group[j].accounts[k].account_number,",
									"                        \"coa_type\":jsData.data[i].sub_group[j].accounts[k].coa_type,",
									"                        \"status\":jsData.data[i].sub_group[j].accounts[k].status,",
									"                        \"parent_account_id\":jsData.data[i].sub_group[j].accounts[k].parent_account_id,",
									"                        \"description\":jsData.data[i].sub_group[j].accounts[k].description,",
									"                        \"open_amount\":jsData.data[i].sub_group[j].accounts[k].open_amount,",
									"                        \"currency\":jsData.data[i].sub_group[j].accounts[k].currency",
									"                    }",
									"",
									"                    if(jsData.data[i].sub_group[j].accounts[k].key == \"A3001\"){",
									"                        pm.environment.set(\"C-account_receivable\",jsData.data[i].sub_group[j].accounts[k]);",
									"                    } else if (jsData.data[i].sub_group[j].accounts[k].key == \"C1002\") {",
									"                        pm.environment.set(\"C-discount\",jsData.data[i].sub_group[j].accounts[k]);",
									"                    }",
									"                }",
									"",
									"                sub_group_i[sub_group_i.length] = {",
									"                    \"sub_group_name\":jsData.data[i].sub_group[j].name,",
									"                    \"sub_group_id\":jsData.data[i].sub_group[j].id,",
									"                    \"sub_group_description\":jsData.data[i].sub_group[j].description,",
									"                    \"accounts\":accounts_j",
									"                }",
									"            }",
									"",
									"            coa[coa.length] = {",
									"                \"group_name\":jsData.data[i].name,",
									"                \"value\":jsData.data[i].value,",
									"                \"index\":jsData.data[i].index,",
									"                \"sub_group\":sub_group_i",
									"            }",
									"        }",
									"    } catch {",
									"        console.log(\"can't get all account in coa\");",
									"    }",
									"",
									"",
									"    pm.test(\"Got coa of this user's business\", function () {",
									"        pm.expect(coa.length > 0).to.be.true;",
									"    });",
									"",
									"    if(coa.length > 0){",
									"        // console.log(\"coa: \", coa);",
									"        pm.environment.set(\"C-coa\",coa);",
									"        let list_internal_account = [];",
									"",
									"        /**",
									"         * lấy những account_id sẽ bị ảnh hưởng bởi invoice để lưu thành array => PENDING (wait confirm with PO, DEV BE-FE)",
									"         */ ",
									"",
									"        pm.environment.set(\"C-list_internal_account\",list_internal_account);",
									"        postman.setNextRequest(\"get_list_payment_account\"); // get_list_payment_account",
									"    } else {",
									"        console.log(\"Can't get list internal account, end test \");",
									"        postman.setNextRequest(null);",
									"    }",
									"} else {",
									"    console.log(\"Can't get list internal account, end test \", jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "authorization",
								"value": "Bearer {{C-userToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{finone_url}}​/fo-ledger/api/v1/account/get-list-setting?business_id={{C-business_id}}&coa_type=",
							"host": [
								"{{finone_url}}​"
							],
							"path": [
								"fo-ledger",
								"api",
								"v1",
								"account",
								"get-list-setting"
							],
							"query": [
								{
									"key": "business_id",
									"value": "{{C-business_id}}"
								},
								{
									"key": "coa_type",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get_internal_account_detail",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let list_internal_account = pm.environment.get(\"C-list_internal_account\");",
									"let pos = pm.environment.get(\"C-pos\");",
									"if(!pos){",
									"    pos = 0;",
									"    pm.environment.set(\"C-pos\",pos);",
									"}",
									"",
									"let internal_account_id = list_internal_account[pos].account_id;",
									"console.log(\"view detail account: \" + account_id);",
									"",
									"pm.environment.set(\"C-internal_account_id\",internal_account_id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    const jsData = pm.response.json();",
									"    // let testcase = pm.environment.get(\"C-testcase\");",
									"    console.log(\"Debug: \" + JSON.stringify(jsData));",
									"",
									"    let list_internal_account = pm.environment.get(\"C-list_internal_account\");",
									"    let pos = pm.environment.get(\"C-pos\");",
									"",
									"    if(pos >= list_internal_account.length - 1){",
									"        pm.environment.unset(\"C-pos\");",
									"",
									"        postman.setNextRequest(\"get_list_tax\"); // get_list_tax",
									"    } else {",
									"        pos++;",
									"        pm.environment.set(\"C-pos\",pos);",
									"",
									"        postman.setNextRequest(\"get_internal_account_detail\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get internal account detail, end test\");",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{finone_url}}​​/fo-ledger/api/v1/account/get-one/{{C-internal_account_id}}",
							"host": [
								"{{finone_url}}​​"
							],
							"path": [
								"fo-ledger",
								"api",
								"v1",
								"account",
								"get-one",
								"{{C-internal_account_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "account cash_n_bank",
			"item": [
				{
					"name": "get_list_payment_account",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"",
									"    let list_bank_account = [];",
									"    for(let j in jsData.data[0].accounts){",
									"        // if(jsData.data[0].accounts[j].provider_id != \"\"){ // remove va bank account out list",
									"            list_bank_account[list_bank_account.length] = {",
									"                \"account_id\":jsData.data[0].accounts[j].id,",
									"                \"account_name\":jsData.data[0].accounts[j].account_name,",
									"                \"status\":jsData.data[0].accounts[j].status,",
									"                \"external_account_id\":jsData.data[0].accounts[j].external_account_id,",
									"                \"provider_id\":jsData.data[0].accounts[j].provider_id",
									"            }",
									"        // }",
									"    }",
									"",
									"    switch(testcase){",
									"        case 2:",
									"            pm.test(\"Got list bank account\", function () {",
									"                pm.expect(list_bank_account.length > 0).to.be.true;",
									"            });",
									"            console.log(\"list_bank_account: \", list_bank_account);",
									"            pm.environment.set(\"C-list_bank_account\",list_bank_account);",
									"",
									"            postman.setNextRequest(\"get_list_product\"); // get_list_product",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get list payment account, end test\", jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-ledger/api/v1/account/get-list-sub?business_id={{C-business_id}}&sub_account_key=A1",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-ledger",
								"api",
								"v1",
								"account",
								"get-list-sub"
							],
							"query": [
								{
									"key": "business_id",
									"value": "{{C-business_id}}"
								},
								{
									"key": "sub_account_key",
									"value": "A1"
								},
								{
									"key": "account_type",
									"value": "link_bank,va_bank",
									"description": "system, default, manual",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "product",
			"item": [
				{
					"name": "get_list_product",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let page = pm.environment.get(\"C-page\");",
									"",
									"if(!page){",
									"    page = 1;",
									"    pm.environment.set(\"C-page\",page);",
									"",
									"    let page_size = 50;",
									"    pm.environment.set(\"C-page_size\",page_size);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = JSON.parse(responseBody);",
									"if(pm.response.code == 200 && jsData.code == 102000){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let total_pages = jsData.meta.total_pages;",
									"    let page = pm.environment.get(\"C-page\");",
									"",
									"    let list_product = pm.environment.get(\"C-list_product\");",
									"    if(!list_product){",
									"        list_product = [];",
									"    }",
									"",
									"    for(let item in jsData.data){",
									"        if(jsData.data[item].income_account_id != 0 && jsData.data[item].product_link_account != null){",
									"            // if(jsData.data[item].income_taxes.length > 0){",
									"                list_product[list_product.length] = {",
									"                    \"product_id\":jsData.data[item].id,",
									"                    \"name\":jsData.data[item].product_name,",
									"                    \"price\":jsData.data[item].list_sku[0].sale_price,",
									"                    \"sku_code\":jsData.data[item].list_sku[0].sku_code,",
									"                    \"sku_id\":jsData.data[item].list_sku[0].id,",
									"                    \"income_account_id\":jsData.data[item].product_link_account.income_account_id, // must get in detail",
									"                    \"expense_account_id\":jsData.data[item].product_link_account.expense_account_id, // must get in detail",
									"                    \"income_taxes\":jsData.data[item].income_taxes,",
									"                    \"expense_taxes\":jsData.data[item].expense_taxes",
									"                }",
									"            // }",
									"        }",
									"    }",
									"    pm.environment.set(\"C-list_product\",list_product);",
									"",
									"    if(page >= total_pages){",
									"        // must clear page & page_size",
									"        pm.environment.unset(\"C-page\");",
									"        pm.environment.unset(\"C-page_size\");",
									"",
									"        pm.test(\"Got all valid product! \" + list_product.length, function () {",
									"            pm.expect(list_product.length > 0).to.be.true;",
									"        });",
									"",
									"        console.log(\"list_product: \", list_product);",
									"",
									"        postman.setNextRequest(\"get_list_tax\"); // get_list_tax",
									"    } else {",
									"        page++;",
									"        pm.environment.set(\"C-page\",page);",
									"",
									"        console.log(\"view next page (\" + page + \") to get more product\");",
									"        postman.setNextRequest(\"get_list_product\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get list product, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "authorization",
								"value": "Bearer {{C-userToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-business/api/v1/product/get-list?business_id={{C-business_id}}&page={{C-page}}&page_size={{C-page_size}}&search=&sort=&get_account_id=true",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-business",
								"api",
								"v1",
								"product",
								"get-list"
							],
							"query": [
								{
									"key": "business_id",
									"value": "{{C-business_id}}"
								},
								{
									"key": "page",
									"value": "{{C-page}}"
								},
								{
									"key": "page_size",
									"value": "{{C-page_size}}"
								},
								{
									"key": "search",
									"value": ""
								},
								{
									"key": "sort",
									"value": ""
								},
								{
									"key": "get_account_id",
									"value": "true"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "tax",
			"item": [
				{
					"name": "get_list_tax",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = JSON.parse(responseBody);",
									"if(pm.response.code == 200 && jsData.code == 102000){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let total_pages = jsData.meta.total_pages;",
									"    let page = pm.environment.get(\"C-page\");",
									"",
									"    let list_tax = pm.environment.get(\"C-list_tax\");",
									"    if(!list_tax){",
									"        list_tax = [];",
									"    }",
									"",
									"    for(let item in jsData.data){",
									"        if(jsData.data[item].description.includes(\"[API]\") && jsData.data[item].rate > 0 && jsData.data[item].rate < 100){",
									"            list_tax[list_tax.length] = {",
									"                \"tax_id\":jsData.data[item].id,",
									"                \"name\":jsData.data[item].name,",
									"                \"rate\":jsData.data[item].rate,",
									"                \"account_id\":jsData.data[item].account_id,",
									"                \"description\":jsData.data[item].description",
									"            }",
									"        }",
									"    }",
									"    pm.environment.set(\"C-list_tax\",list_tax);",
									"",
									"    if(page >= total_pages){",
									"        // must clear page & page_size",
									"        pm.environment.unset(\"C-page\");",
									"        pm.environment.unset(\"C-page_size\");",
									"",
									"        pm.test(\"Got all tax! \" + list_tax.length, function () {",
									"            pm.expect(list_tax.length > 0).to.be.true;",
									"        });",
									"        console.log(\"list_tax: \", list_tax);",
									"",
									"        postman.setNextRequest(\"get_list_recurring_invoice\"); // get_list_recurring_invoice",
									"    } else {",
									"        page++;",
									"        pm.environment.set(\"C-page\",page);",
									"",
									"        console.log(\"view next page (\" + page + \") to get more tax\");",
									"        postman.setNextRequest(\"get_list_tax\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get list tax, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let page = pm.environment.get(\"C-page\");",
									"",
									"if(!page){",
									"    page = 1;",
									"    pm.environment.set(\"C-page\",page);",
									"",
									"    let page_size = 50;",
									"    pm.environment.set(\"C-page_size\",page_size);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-business/api/v1/tax/get-list?business_id={{C-business_id}}&page={{C-page}}&page_size={{C-page_size}}&option=&status=",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-business",
								"api",
								"v1",
								"tax",
								"get-list"
							],
							"query": [
								{
									"key": "business_id",
									"value": "{{C-business_id}}"
								},
								{
									"key": "page",
									"value": "{{C-page}}"
								},
								{
									"key": "page_size",
									"value": "{{C-page_size}}"
								},
								{
									"key": "option",
									"value": ""
								},
								{
									"key": "status",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "recurring invoice",
			"item": [
				{
					"name": "get_list_recurring_invoice",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let page = pm.environment.get(\"C-page\");",
									"",
									"if(!page){",
									"    page = 1;",
									"    pm.environment.set(\"C-page\",page);",
									"",
									"    let page_size = 20;",
									"    pm.environment.set(\"C-page_size\",page_size);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = pm.response.json();",
									"if(pm.response.code == 200 && jsData.code == 102000){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let total_pages = jsData.meta.total_pages;",
									"    let total_records = jsData.meta.total_rows;",
									"    let page = pm.environment.get(\"C-page\");",
									"",
									"    switch(testcase){",
									"        case 2:",
									"            pm.environment.unset(\"C-page\");",
									"            pm.environment.unset(\"C-page_size\");",
									"            pm.test(\"Got total invoice! \" + total_records, function () {",
									"                pm.environment.set(\"C-total_recurring_invoice\",total_records);",
									"                pm.expect(total_records > 0).to.be.true;",
									"            });",
									"",
									"            for(let i in jsData.data){",
									"                if(jsData.data[i].cart_status == \"active\"){",
									"                    pm.environment.set(\"C-existed_order_code\",jsData.data[i].order_code);",
									"                    break;",
									"                }",
									"            }",
									"",
									"            // testcase++;",
									"            testcase = 5;",
									"            pm.environment.set(\"C-testcase\",testcase);",
									"            postman.setNextRequest(\"create_recurring_invoice\"); // create_recurring_invoice",
									"            break;",
									"        case 4:",
									"            let isFound = false;",
									"            let recurring_invoice_obj = pm.environment.get(\"C-recurring_invoice_obj\");",
									"            console.log(\"recurring_invoice_obj: \", recurring_invoice_obj);",
									"            let act_recurring_invoice_obj = null;",
									"            for(let i in jsData.data){",
									"                if(jsData.data[i].id == recurring_invoice_obj.recurring_invoice_id){",
									"                    console.log(\"debug here\");",
									"                    isFound = true;",
									"                    act_recurring_invoice_obj = jsData.data[i];",
									"                    break;",
									"                }",
									"            }",
									"",
									"            let configs = pm.environment.get(\"C-configs\");",
									"            if(page >= total_pages || page >= configs.limit_page || isFound){",
									"                // must clear page & page_size",
									"                pm.environment.unset(\"C-page\");",
									"                pm.environment.unset(\"C-page_size\");",
									"",
									"                let old_total_recurring_invoice = pm.environment.get(\"C-total_recurring_invoice\");",
									"",
									"                pm.test(\"Total invoice increase 1\", function () {",
									"                    pm.expect(total_records == old_total_recurring_invoice + 1).to.be.true;",
									"                });",
									"",
									"                pm.test(\"Found new product\", function () {",
									"                    pm.expect(isFound).to.be.true;",
									"                });",
									"",
									"                if(isFound){",
									"                    // console.log(\"debug: \" + JSON.stringify(act_recurring_invoice_obj));",
									"                    let userInfo = pm.environment.get(\"C-userInfo\");",
									"                    // creator_id",
									"                    pm.test(\"creator_id of invoice is \" + userInfo.id, function () {",
									"                        console.log(\"act creator_id: \" + act_recurring_invoice_obj.creator_id);",
									"                        pm.expect(act_recurring_invoice_obj.creator_id == userInfo.id).to.be.true;",
									"                    });",
									"",
									"                    // start_date",
									"                    pm.test(\"start_date of invoice is \" + recurring_invoice_obj.start_date.substring(0,19), function () {",
									"                        console.log(\"act start_date: \" + act_recurring_invoice_obj.start_date.substring(0,19));",
									"                        pm.expect(act_recurring_invoice_obj.start_date.substring(0,19) == recurring_invoice_obj.start_date.substring(0,19)).to.be.true;",
									"                    });",
									"",
									"                    // end_date",
									"                    pm.test(\"end_date of invoice is \" + recurring_invoice_obj.end_date.substring(0,19), function () {",
									"                        console.log(\"act end_date: \" + act_recurring_invoice_obj.end_date.substring(0,19));",
									"                        pm.expect(act_recurring_invoice_obj.end_date.substring(0,19) == recurring_invoice_obj.end_date.substring(0,19)).to.be.true;",
									"                    });",
									"",
									"                    // recurrence_type",
									"                    pm.test(\"recurrence_type of invoice is \" + recurring_invoice_obj.recurrence_type, function () {",
									"                        console.log(\"act recurrence_type: \" + act_recurring_invoice_obj.recurrence_type);",
									"                        pm.expect(act_recurring_invoice_obj.recurrence_type == recurring_invoice_obj.recurrence_type).to.be.true;",
									"                    });",
									"                    // day_of_type",
									"                    pm.test(\"day_of_type of invoice is \" + recurring_invoice_obj.day_of_type, function () {",
									"                        console.log(\"act day_of_type: \" + act_recurring_invoice_obj.day_of_type);",
									"                        pm.expect(act_recurring_invoice_obj.day_of_type == recurring_invoice_obj.day_of_type).to.be.true;",
									"                    });",
									"",
									"                    // due_date_type",
									"                    pm.test(\"due_date_type of invoice is \" + recurring_invoice_obj.due_date_type, function () {",
									"                        console.log(\"act due_date_type: \" + act_recurring_invoice_obj.due_date_type);",
									"                        pm.expect(act_recurring_invoice_obj.due_date_type == recurring_invoice_obj.due_date_type).to.be.true;",
									"                    });",
									"                    // due_date_value",
									"                    if(recurring_invoice_obj.due_date_value == \"\") recurring_invoice_obj.due_date_value = 0;",
									"                    pm.test(\"due_date_value of invoice is \" + recurring_invoice_obj.due_date_value, function () {",
									"                        console.log(\"act due_date_value: \" + act_recurring_invoice_obj.due_date_value);",
									"                        pm.expect(act_recurring_invoice_obj.due_date_value == recurring_invoice_obj.due_date_value).to.be.true;",
									"                    });",
									"",
									"                    // contact_id",
									"                    pm.test(\"contact_id of invoice is \" + recurring_invoice_obj.contact_id, function () {",
									"                        console.log(\"act contact_id: \" + act_recurring_invoice_obj.contact_id);",
									"                        pm.expect(act_recurring_invoice_obj.contact_id == recurring_invoice_obj.contact_id).to.be.true;",
									"                    });",
									"",
									"                    // note",
									"                    pm.test(\"note of invoice is \" + recurring_invoice_obj.note, function () {",
									"                        console.log(\"act note: \" + act_recurring_invoice_obj.note);",
									"                        pm.expect(act_recurring_invoice_obj.note == recurring_invoice_obj.note).to.be.true;",
									"                    });",
									"",
									"                    // cart_status",
									"                    pm.test(\"cart_status of invoice is \" + recurring_invoice_obj.cart_status, function () {",
									"                        console.log(\"act cart_status: \" + act_recurring_invoice_obj.cart_status);",
									"                        pm.expect(act_recurring_invoice_obj.cart_status == recurring_invoice_obj.cart_status).to.be.true;",
									"                    });",
									"",
									"                    // status",
									"                    pm.test(\"status of invoice is \" + recurring_invoice_obj.status, function () {",
									"                        console.log(\"act status: \" + act_recurring_invoice_obj.status);",
									"                        pm.expect(act_recurring_invoice_obj.status == recurring_invoice_obj.status).to.be.true;",
									"                    });",
									"",
									"                    // sale_order_info.branch_id",
									"                    pm.test(\"sale_order_info.branch_id of invoice is \" + recurring_invoice_obj.status, function () {",
									"                        console.log(\"act sale_order_info.branch_id: \" + act_recurring_invoice_obj.sale_order_info.branch_id);",
									"                        pm.expect(act_recurring_invoice_obj.sale_order_info.branch_id == recurring_invoice_obj.sale_order_info.branch_id).to.be.true;",
									"                    });",
									"",
									"                    // sale_order_info.discounts",
									"                    // pm.test(\"sale_order_info.discounts of invoice is correctly!\", function () {",
									"                    //     console.log(\"act sale_order_info.discounts: \", act_recurring_invoice_obj.sale_order_info.discounts);",
									"                    //     console.log(\"exp sale_order_info.discounts: \", recurring_invoice_obj.sale_order_info.discounts);",
									"                    //     pm.expect(JSON.stringify(act_recurring_invoice_obj.sale_order_info.discounts) == JSON.stringify(recurring_invoice_obj.sale_order_info.discounts)).to.be.true;",
									"                    // });",
									"",
									"                    // sale_order_info.email",
									"                    pm.test(\"sale_order_info.email of invoice is \" + recurring_invoice_obj.sale_order_info.email, function () {",
									"                        console.log(\"act sale_order_info.email: \" + act_recurring_invoice_obj.sale_order_info.email);",
									"                        pm.expect(act_recurring_invoice_obj.sale_order_info.email == recurring_invoice_obj.sale_order_info.email).to.be.true;",
									"                    });",
									"",
									"                    // sale_order_info.items",
									"                    // pm.test(\"sale_order_info.items of invoice is correctly!\", function () {",
									"                    //     console.log(\"act sale_order_info.items: \", act_recurring_invoice_obj.sale_order_info.items);",
									"                    //     console.log(\"exp sale_order_info.items: \", recurring_invoice_obj.sale_order_info.items);",
									"                    //     pm.expect(JSON.stringify(act_recurring_invoice_obj.sale_order_info.items) == JSON.stringify(recurring_invoice_obj.sale_order_info.items)).to.be.true;",
									"                    // });",
									"",
									"                    // sale_order_info.order_code",
									"                    pm.test(\"sale_order_info.order_code of invoice is \" + recurring_invoice_obj.sale_order_info.order_code, function () {",
									"                        console.log(\"act sale_order_info.order_code: \" + act_recurring_invoice_obj.sale_order_info.order_code);",
									"                        pm.expect(act_recurring_invoice_obj.sale_order_info.order_code == recurring_invoice_obj.sale_order_info.order_code).to.be.true;",
									"                    });",
									"",
									"                    // sale_order_info.tax_type",
									"                    pm.test(\"sale_order_info.tax_type of invoice is \" + recurring_invoice_obj.sale_order_info.tax_type, function () {",
									"                        console.log(\"act sale_order_info.tax_type: \" + act_recurring_invoice_obj.sale_order_info.tax_type);",
									"                        pm.expect(act_recurring_invoice_obj.sale_order_info.tax_type == recurring_invoice_obj.sale_order_info.tax_type).to.be.true;",
									"                    });",
									"",
									"                    // sale_order_info.is_pre_tax",
									"                    pm.test(\"sale_order_info.is_pre_tax of invoice is \" + recurring_invoice_obj.sale_order_info.is_pre_tax, function () {",
									"                        console.log(\"act sale_order_info.is_pre_tax: \" + act_recurring_invoice_obj.sale_order_info.is_pre_tax);",
									"                        pm.expect(act_recurring_invoice_obj.sale_order_info.is_pre_tax == recurring_invoice_obj.sale_order_info.is_pre_tax).to.be.true;",
									"                    });",
									"                }",
									"                ",
									"                // update total records => chỉ có 4 testcase thì ko cần lưu lại",
									"                // pm.environment.set(\"C-total_recurring_invoice\",total_records);",
									"                // pm.environment.set(\"C-recurring_invoice_obj\",recurring_invoice_obj);",
									"",
									"                postman.setNextRequest(\"get_detail_recurring_invoice\"); // get_detail_recurring_invoice",
									"            } else {",
									"                page++;",
									"                pm.environment.set(\"C-page\",page);",
									"",
									"                console.log(\"view next page (\" + page + \") to get more recurring invoice\");",
									"                postman.setNextRequest(\"get_list_recurring_invoice\");",
									"            }",
									"            break;",
									"        case 6:",
									"            console.log(\"IN PROGRESS\");",
									"            break;",
									"        case 8:",
									"            console.log(\"PENDING\");",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow\");",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get list recurring invoice, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/recurring/get-list?business_id={{C-business_id}}&page={{C-page}}&page_size={{C-page_size}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"recurring",
								"get-list"
							],
							"query": [
								{
									"key": "business_id",
									"value": "{{C-business_id}}"
								},
								{
									"key": "page",
									"value": "{{C-page}}"
								},
								{
									"key": "page_size",
									"value": "{{C-page_size}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get_detail_recurring_invoice",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"",
									"    pm.test(\"System code is 102000\", function () {",
									"        pm.expect(jsData.code).to.eql(102000);",
									"    });",
									"",
									"    let recurring_invoice_obj = pm.environment.get(\"C-recurring_invoice_obj\");",
									"    let userInfo = pm.environment.get(\"C-userInfo\");",
									"    ",
									"    // creator_id",
									"    pm.test(\"creator_id of invoice is \" + userInfo.id, function () {",
									"        console.log(\"act creator_id: \" + jsData.data.creator_id);",
									"        pm.expect(jsData.data.creator_id == userInfo.id).to.be.true;",
									"    });",
									"",
									"    // start_date",
									"    pm.test(\"start_date of invoice is \" + recurring_invoice_obj.start_date.substring(0,19), function () {",
									"        console.log(\"act start_date: \" + jsData.data.start_date.substring(0,19));",
									"        pm.expect(jsData.data.start_date.substring(0,19) == recurring_invoice_obj.start_date.substring(0,19)).to.be.true;",
									"    });",
									"",
									"    // end_date",
									"    pm.test(\"end_date of invoice is \" + recurring_invoice_obj.end_date.substring(0,19), function () {",
									"        console.log(\"act end_date: \" + jsData.data.end_date.substring(0,19));",
									"        pm.expect(jsData.data.end_date.substring(0,19) == recurring_invoice_obj.end_date.substring(0,19)).to.be.true;",
									"    });",
									"",
									"    // recurrence_type",
									"    pm.test(\"recurrence_type of invoice is \" + recurring_invoice_obj.recurrence_type, function () {",
									"        console.log(\"act recurrence_type: \" + jsData.data.recurrence_type);",
									"        pm.expect(jsData.data.recurrence_type == recurring_invoice_obj.recurrence_type).to.be.true;",
									"    });",
									"    // day_of_type",
									"    pm.test(\"day_of_type of invoice is \" + recurring_invoice_obj.day_of_type, function () {",
									"        console.log(\"act day_of_type: \" + jsData.data.day_of_type);",
									"        pm.expect(jsData.data.day_of_type == recurring_invoice_obj.day_of_type).to.be.true;",
									"    });",
									"",
									"    // due_date_type",
									"    pm.test(\"due_date_type of invoice is \" + recurring_invoice_obj.due_date_type, function () {",
									"        console.log(\"act due_date_type: \" + jsData.data.due_date_type);",
									"        pm.expect(jsData.data.due_date_type == recurring_invoice_obj.due_date_type).to.be.true;",
									"    });",
									"    // due_date_value",
									"    if(recurring_invoice_obj.due_date_value == \"\") recurring_invoice_obj.due_date_value = 0;",
									"    pm.test(\"due_date_value of invoice is \" + recurring_invoice_obj.due_date_value, function () {",
									"        console.log(\"act due_date_value: \" + jsData.data.due_date_value);",
									"        pm.expect(jsData.data.due_date_value == recurring_invoice_obj.due_date_value).to.be.true;",
									"    });",
									"",
									"    // contact_id",
									"    pm.test(\"contact_id of invoice is \" + recurring_invoice_obj.contact_id, function () {",
									"        console.log(\"act contact_id: \" + jsData.data.contact_id);",
									"        pm.expect(jsData.data.contact_id == recurring_invoice_obj.contact_id).to.be.true;",
									"    });",
									"",
									"    // note",
									"    pm.test(\"note of invoice is \" + recurring_invoice_obj.note, function () {",
									"        console.log(\"act note: \" + jsData.data.note);",
									"        pm.expect(jsData.data.note == recurring_invoice_obj.note).to.be.true;",
									"    });",
									"",
									"    // cart_status",
									"    pm.test(\"cart_status of invoice is \" + recurring_invoice_obj.cart_status, function () {",
									"        console.log(\"act cart_status: \" + jsData.data.cart_status);",
									"        pm.expect(jsData.data.cart_status == recurring_invoice_obj.cart_status).to.be.true;",
									"    });",
									"",
									"    // status",
									"    pm.test(\"status of invoice is \" + recurring_invoice_obj.status, function () {",
									"        console.log(\"act status: \" + jsData.data.status);",
									"        pm.expect(jsData.data.status == recurring_invoice_obj.status).to.be.true;",
									"    });",
									"",
									"    // sale_order_info.branch_id",
									"    pm.test(\"sale_order_info.branch_id of invoice is \" + recurring_invoice_obj.status, function () {",
									"        console.log(\"act sale_order_info.branch_id: \" + jsData.data.sale_order_info.branch_id);",
									"        pm.expect(jsData.data.sale_order_info.branch_id == recurring_invoice_obj.sale_order_info.branch_id).to.be.true;",
									"    });",
									"",
									"    // sale_order_info.discounts => hiện tại thay đổi thứ tự field nên handle từng field",
									"    pm.test(\"sale_order_info.discounts of invoice is correctly!\", function () {",
									"        console.log(\"act sale_order_info.discounts: \", jsData.data.sale_order_info.discounts);",
									"        console.log(\"exp sale_order_info.discounts: \", recurring_invoice_obj.sale_order_info.discounts);",
									"        pm.expect(jsData.data.sale_order_info.discounts.is_rate == recurring_invoice_obj.sale_order_info.discounts.is_rate && jsData.data.sale_order_info.discounts.value == recurring_invoice_obj.sale_order_info.discounts.value).to.be.true;",
									"    });",
									"",
									"    // sale_order_info.email",
									"    pm.test(\"sale_order_info.email of invoice is \" + recurring_invoice_obj.sale_order_info.email, function () {",
									"        console.log(\"act sale_order_info.email: \" + jsData.data.sale_order_info.email);",
									"        pm.expect(jsData.data.sale_order_info.email == recurring_invoice_obj.sale_order_info.email).to.be.true;",
									"    });",
									"",
									"    // sale_order_info.items => chỉ lọc những field cần để check",
									"    let exp_items = [], act_items = [];",
									"    for(let i in recurring_invoice_obj.sale_order_info.items){",
									"        let exp_tax_i = [];",
									"        for(let j in recurring_invoice_obj.sale_order_info.items[i].taxes){",
									"            exp_tax_i[exp_tax_i.length] = {",
									"                \"name\":recurring_invoice_obj.sale_order_info.items[i].taxes[j].name,",
									"                \"rate\":recurring_invoice_obj.sale_order_info.items[i].taxes[j].rate,",
									"                \"amount\":recurring_invoice_obj.sale_order_info.items[i].taxes[j].amount,",
									"                \"tax_id\":recurring_invoice_obj.sale_order_info.items[i].taxes[j].tax_id,",
									"                \"account_id\":recurring_invoice_obj.sale_order_info.items[i].taxes[j].account_id",
									"            }",
									"        }",
									"        exp_items[exp_items.length] = {",
									"            \"account_id\":recurring_invoice_obj.sale_order_info.items[i].account_id,",
									"            \"product_id\":recurring_invoice_obj.sale_order_info.items[i].product_id,",
									"            \"sku_id\":recurring_invoice_obj.sale_order_info.items[i].sku_id,",
									"            \"taxes\":exp_tax_i,",
									"            \"item_amount\":recurring_invoice_obj.sale_order_info.items[i].item_amount,",
									"            \"quantity\":recurring_invoice_obj.sale_order_info.items[i].quantity,",
									"            \"total_item_amount\":recurring_invoice_obj.sale_order_info.items[i].total_item_amount,",
									"            \"before_tax_amount\":recurring_invoice_obj.sale_order_info.items[i].before_tax_amount,",
									"            \"discount_amount\":recurring_invoice_obj.sale_order_info.items[i].discount_amount,",
									"            \"after_tax_amount\":recurring_invoice_obj.sale_order_info.items[i].after_tax_amount,",
									"            \"total_amount\":recurring_invoice_obj.sale_order_info.items[i].total_amount",
									"        }",
									"    }",
									"    for(let i in jsData.data.sale_order_info.items){",
									"        let act_tax_i = [];",
									"        for(let j in jsData.data.sale_order_info.items[i].taxes){",
									"            act_tax_i[act_tax_i.length] = {",
									"                \"name\":jsData.data.sale_order_info.items[i].taxes[j].name,",
									"                \"rate\":jsData.data.sale_order_info.items[i].taxes[j].rate,",
									"                \"amount\":jsData.data.sale_order_info.items[i].taxes[j].amount,",
									"                \"tax_id\":jsData.data.sale_order_info.items[i].taxes[j].tax_id,",
									"                \"account_id\":jsData.data.sale_order_info.items[i].taxes[j].account_id",
									"            }",
									"        }",
									"        act_items[act_items.length] = {",
									"            \"account_id\":jsData.data.sale_order_info.items[i].account_id,",
									"            \"product_id\":jsData.data.sale_order_info.items[i].product_id,",
									"            \"sku_id\":jsData.data.sale_order_info.items[i].sku_id,",
									"            \"taxes\":act_tax_i,",
									"            \"item_amount\":jsData.data.sale_order_info.items[i].item_amount,",
									"            \"quantity\":jsData.data.sale_order_info.items[i].quantity,",
									"            \"total_item_amount\":jsData.data.sale_order_info.items[i].total_item_amount,",
									"            \"before_tax_amount\":jsData.data.sale_order_info.items[i].before_tax_amount,",
									"            \"discount_amount\":jsData.data.sale_order_info.items[i].discount_amount,",
									"            \"after_tax_amount\":jsData.data.sale_order_info.items[i].after_tax_amount,",
									"            \"total_amount\":jsData.data.sale_order_info.items[i].total_amount",
									"        }",
									"    }",
									"    pm.test(\"sale_order_info.items of invoice is correctly!\", function () {",
									"        console.log(\"act sale_order_info.items: \", act_items);",
									"        console.log(\"exp sale_order_info.items: \", exp_items);",
									"        pm.expect(JSON.stringify(act_items) == JSON.stringify(exp_items)).to.be.true;",
									"    });",
									"",
									"    // sale_order_info.order_code",
									"    pm.test(\"sale_order_info.order_code of invoice is \" + recurring_invoice_obj.sale_order_info.order_code, function () {",
									"        console.log(\"act sale_order_info.order_code: \" + jsData.data.sale_order_info.order_code);",
									"        pm.expect(jsData.data.sale_order_info.order_code == recurring_invoice_obj.sale_order_info.order_code).to.be.true;",
									"    });",
									"",
									"    // sale_order_info.tax_type",
									"    pm.test(\"sale_order_info.tax_type of invoice is \" + recurring_invoice_obj.sale_order_info.tax_type, function () {",
									"        console.log(\"act sale_order_info.tax_type: \" + jsData.data.sale_order_info.tax_type);",
									"        pm.expect(jsData.data.sale_order_info.tax_type == recurring_invoice_obj.sale_order_info.tax_type).to.be.true;",
									"    });",
									"",
									"    // sale_order_info.is_pre_tax",
									"    pm.test(\"sale_order_info.is_pre_tax of invoice is \" + recurring_invoice_obj.sale_order_info.is_pre_tax, function () {",
									"        console.log(\"act sale_order_info.is_pre_tax: \" + jsData.data.sale_order_info.is_pre_tax);",
									"        pm.expect(jsData.data.sale_order_info.is_pre_tax == recurring_invoice_obj.sale_order_info.is_pre_tax).to.be.true;",
									"    });",
									"",
									"    console.log(\"-------- End Testsuite 15 --------\");",
									"    postman.setNextRequest(\"\"); // get_list_invoice",
									"} else {",
									"    console.log(\"Can't get recurring invoice detail, end test\", jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let recurring_invoice_obj = pm.environment.get(\"C-recurring_invoice_obj\");",
									"let recurring_invoice_id = recurring_invoice_obj.recurring_invoice_id;",
									"console.log(\"view detail invoice: \" + recurring_invoice_id);",
									"",
									"pm.environment.set(\"C-recurring_invoice_id\",recurring_invoice_id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/recurring/get-one/{{C-recurring_invoice_id}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"recurring",
								"get-one",
								"{{C-recurring_invoice_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "create_recurring_invoice",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/**",
									" *  =============================  func randNotDupe(min, max, total)",
									" * total: số lượng random, ko dc nhỏ hơn max-min+1",
									" * return: array",
									" */",
									"function randNotDupe(min, max, total){",
									"  let arrNum = []; // new empty array",
									"  let n, p;",
									"  for (let i = 0; i < total; i++) {",
									"    do {",
									"      n = Math.floor(Math.random() * (max - min + 1)) + min;",
									"      p = arrNum.includes(n);",
									"      if(!p){",
									"        arrNum.push(n);",
									"      }",
									"    }",
									"    while(p);",
									"  }",
									"  return arrNum;",
									"}",
									"",
									"// ============================= random number between min and max",
									"function getRandomInt(min, max) {",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"",
									"// ============================= random characters",
									"function randomChars(length) {",
									"    var result           = '';",
									"    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
									"    var charactersLength = characters.length;",
									"    for ( var i = 0; i < length; i++ ) {",
									"      result += characters.charAt(Math.floor(Math.random() * charactersLength));",
									"   }",
									"   return result;",
									"}",
									"",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"let case_ = pm.environment.get(\"C-case_\");",
									"if(!case_){",
									"    case_ = 13;",
									"    pm.environment.set(\"C-case_\",case_);",
									"}",
									"console.log(\"Testcase: \" + testcase + \".\" + case_);",
									"",
									"let today = new Date();",
									"let d30_stp = Math.floor(today.getTime()/1000) + 30*24*60*60;",
									"let d30 = new Date(d30_stp*1000);",
									"",
									"let current_timestamp = Math.floor(today.getTime()/1000);",
									"let past_date, past_due_date;",
									"",
									"let last_date_stp = Math.floor(today.getTime()/1000) - 24*60*60;",
									"let last_date = new Date(last_date_stp*1000);",
									"",
									"let next_date_stp = Math.floor(today.getTime()/1000) + 24*60*60;",
									"let next_date = new Date(next_date_stp*1000);",
									"",
									"let tax_types = [\"price_excluding_tax\", \"price_including_tax\", \"tax_not_applicable\"];",
									"let is_pre_tax = false;",
									"let tax_type;",
									"let list_tax = pm.environment.get(\"C-list_tax\");",
									"console.log(\"list_tax: \" + list_tax.length);",
									"",
									"let list_product = pm.environment.get(\"C-list_product\");",
									"console.log(\"list_product: \" + list_product.length);",
									"let discounts = [];",
									"let sub_total_amount = 0, created_order_at, due_at, description, email;",
									"",
									"let branch_id, contact_id;",
									"let payment_method_list = [\"bank_transfer\",\"domestic_card\",\"credit_card\",\"ewallet_momo\",\"ewallet_zalopay\",\"ewallet_viettel\",\"ewallet_galaxypay\"];",
									"// khi chọn bank_transfer, phải gửi kèm payment_account_id (tài khoản sẽ nhận tiền khi buyer quét QR thanh toán)",
									"let order_code, payment_config = [];",
									"let status;",
									"let items = [];",
									"let radProductPos = getRandomInt(0,list_product.length - 1);",
									"let default_item = [{",
									"    \"account_id\": list_product[radProductPos].income_account_id,",
									"    // \"amount\": list_product[radProductPos].price,",
									"    \"currency\": \"\",",
									"    \"name\": list_product[radProductPos].name,",
									"    \"note\": \"[API] note for product \" + list_product[radProductPos].name,",
									"    \"quantity\": 1,",
									"    \"product_id\": list_product[radProductPos].product_id,",
									"    \"taxes\": []",
									"}];",
									"",
									"let cart_status_arr = [ \"draft\", \"saved\", \"saved_and_sent\" ];",
									"let payment_account_id, total_net_amount, cart_status;",
									"let recurrence_type, day_of_type;",
									"if(getRandomInt(0,1)){",
									"    recurrence_type = \"weekly\";",
									"    day_of_type = getRandomInt(1,7);",
									"    day_of_type = day_of_type.toString();",
									"} else {",
									"    recurrence_type = \"monthly\";",
									"    day_of_type = getRandomInt(1,31);",
									"    if(day_of_type == 1){",
									"        day_of_type = \"start_of_month\";",
									"    } else if(day_of_type == 31){",
									"        day_of_type = \"end_of_month\";",
									"    } else {",
									"        day_of_type = day_of_type.toString();",
									"    }",
									"}",
									"// creation_date - This signifies the exact date of creation.",
									"// next_month_date - This represents a date that is in the month following the creation date's month.",
									"// after_creation_date - This signifies the exact date of creation.",
									"let due_date_type_arr = [\"creation_date\",\"next_month_date\",\"after_creation_date\"];",
									"let due_date_type = due_date_type_arr[getRandomInt(0,due_date_type_arr.length - 1)];",
									"let due_date_value;",
									"switch(due_date_type){",
									"    case \"creation_date\":",
									"        due_date_value = \"\";",
									"        break;",
									"    case \"next_month_date\":",
									"        due_date_value = getRandomInt(1,31);",
									"        if(due_date_value == 1){",
									"            due_date_value = \"start_of_month\";",
									"        } else if(due_date_value == 31){",
									"            due_date_value = \"end_of_month\";",
									"        } else {",
									"            due_date_value = due_date_value.toString();",
									"        }",
									"        break;",
									"    case \"after_creation_date\":",
									"    default:",
									"        due_date_value = getRandomInt(10,60);",
									"        due_date_value = due_date_value.toString();",
									"        break;",
									"}",
									"",
									"let list_bank_account = pm.environment.get(\"C-list_bank_account\");",
									"let sale_order_info;",
									"switch(case_){",
									"    case 1:",
									"        console.log(\"Unhappy case: sale_order_info = {}\");",
									"        sale_order_info = {};",
									"        items = default_item;",
									"        contact_id = pm.environment.get(\"C-contact_id\");",
									"        email = \"\";",
									"        branch_id = pm.environment.get(\"C-branch_id\");",
									"        created_order_at = today.toISOString();",
									"        due_at = d30.toISOString();",
									"        order_code = \"HDRC-\" + randomChars(6);",
									"        description = \"[API] Note for invoice \" + order_code;",
									"        discounts = [];",
									"        tax_type = tax_types[getRandomInt(0,tax_types.length - 1)];",
									"        payment_config = [payment_method_list[getRandomInt(0,payment_method_list.length - 1)]];",
									"        status = \"draft\";",
									"        cart_status = cart_status_arr[getRandomInt(0,cart_status_arr.length - 1)];",
									"        break;",
									"    case 2:",
									"        console.log(\"Unhappy case: sale_order_info.items = []\");",
									"        items = [];",
									"        contact_id = pm.environment.get(\"C-contact_id\");",
									"        email = \"\";",
									"        branch_id = pm.environment.get(\"C-branch_id\");",
									"        created_order_at = today.toISOString();",
									"        due_at = d30.toISOString();",
									"        order_code = \"HDRC-\" + randomChars(6);",
									"        description = \"[API] Note for invoice \" + order_code;",
									"        discounts = [];",
									"        tax_type = tax_types[getRandomInt(0,tax_types.length - 1)];",
									"        payment_config = [payment_method_list[getRandomInt(0,payment_method_list.length - 1)]];",
									"        status = \"draft\";",
									"        cart_status = cart_status_arr[getRandomInt(0,cart_status_arr.length - 1)];",
									"        break;",
									"    case 3:",
									"        console.log(\"Unhappy case: sale_order_info missing customer\");",
									"        items = default_item;",
									"        contact_id = \"\";",
									"        email = \"\";",
									"        branch_id = pm.environment.get(\"C-branch_id\");",
									"        created_order_at = today.toISOString();",
									"        due_at = d30.toISOString();",
									"        order_code = \"HDRC-\" + randomChars(6);",
									"        description = \"[API] Note for invoice \" + order_code;",
									"        discounts = [];",
									"        tax_type = tax_types[getRandomInt(0,tax_types.length - 1)];",
									"        payment_config = [payment_method_list[getRandomInt(0,payment_method_list.length - 1)]];",
									"        status = \"draft\";",
									"        cart_status = cart_status_arr[getRandomInt(0,cart_status_arr.length - 1)];",
									"        break;",
									"    case 4:",
									"        console.log(\"Unhappy case: sale_order_info.customer with email is wrong format\");",
									"        items = default_item;",
									"        contact_id = pm.environment.get(\"C-contact_id\");",
									"        email = randomChars(10) + \"@ahjhj\";",
									"        branch_id = pm.environment.get(\"C-branch_id\");",
									"        created_order_at = today.toISOString();",
									"        due_at = d30.toISOString();",
									"        order_code = \"HDRC-\" + randomChars(6);",
									"        description = \"[API] Note for invoice \" + order_code;",
									"        discounts = [];",
									"        tax_type = tax_types[getRandomInt(0,tax_types.length - 1)];",
									"        payment_config = [payment_method_list[getRandomInt(0,payment_method_list.length - 1)]];",
									"        status = \"draft\";",
									"        cart_status = cart_status_arr[getRandomInt(0,cart_status_arr.length - 1)];",
									"        break;",
									"    case 5:",
									"        console.log(\"Unhappy case: sale_order_info.order_code = ''\");",
									"        items = default_item;",
									"        contact_id = pm.environment.get(\"C-contact_id\");",
									"        email = \"\";",
									"        branch_id = pm.environment.get(\"C-branch_id\");",
									"        created_order_at = today.toISOString();",
									"        due_at = d30.toISOString();",
									"        order_code = \"\";",
									"        description = \"[API] Note for invoice \" + order_code;",
									"        discounts = [];",
									"        tax_type = tax_types[getRandomInt(0,tax_types.length - 1)];",
									"        payment_config = [payment_method_list[getRandomInt(0,payment_method_list.length - 1)]];",
									"        status = \"draft\";",
									"        cart_status = cart_status_arr[getRandomInt(0,cart_status_arr.length - 1)];",
									"        break;",
									"    case 6:",
									"        console.log(\"Unhappy case: sale_order_info.order_code is existed\");",
									"        items = default_item;",
									"        contact_id = pm.environment.get(\"C-contact_id\");",
									"        email = \"\";",
									"        branch_id = pm.environment.get(\"C-branch_id\");",
									"        created_order_at = today.toISOString();",
									"        due_at = d30.toISOString();",
									"        order_code = pm.environment.get(\"C-existed_order_code\");",
									"        description = \"[API] Note for invoice \" + order_code;",
									"        discounts = [];",
									"        tax_type = tax_types[getRandomInt(0,tax_types.length - 1)];",
									"        payment_config = [payment_method_list[getRandomInt(0,payment_method_list.length - 1)]];",
									"        status = \"draft\";",
									"        cart_status = cart_status_arr[getRandomInt(0,cart_status_arr.length - 1)];",
									"        break;",
									"    case 7:",
									"        console.log(\"Unhappy case: tax_type = ''\");",
									"        items = default_item;",
									"        contact_id = pm.environment.get(\"C-contact_id\");",
									"        email = \"\";",
									"        branch_id = pm.environment.get(\"C-branch_id\");",
									"        created_order_at = today.toISOString();",
									"        due_at = d30.toISOString();",
									"        order_code = \"HDRC-\" + randomChars(6);",
									"        description = \"[API] Note for invoice \" + order_code;",
									"        discounts = [];",
									"        tax_type = \"\";",
									"        payment_config = [payment_method_list[getRandomInt(0,payment_method_list.length - 1)]];",
									"        status = \"draft\";",
									"        cart_status = cart_status_arr[getRandomInt(0,cart_status_arr.length - 1)];",
									"        break;",
									"    case 8:",
									"        console.log(\"Unhappy case: payment_config = []\");",
									"        items = default_item;",
									"        contact_id = pm.environment.get(\"C-contact_id\");",
									"        email = \"\";",
									"        branch_id = pm.environment.get(\"C-branch_id\");",
									"        created_order_at = today.toISOString();",
									"        due_at = last_date.toISOString();",
									"        order_code = \"HDRC-\" + randomChars(6);",
									"        description = \"[API] Note for invoice \" + order_code;",
									"        discounts = [];",
									"        tax_type = tax_types[getRandomInt(0,tax_types.length - 1)];",
									"        payment_config = [];",
									"        status = \"draft\";",
									"        cart_status = cart_status_arr[getRandomInt(0,cart_status_arr.length - 1)];",
									"        break;",
									"    case 9:",
									"        console.log(\"Unhappy case: status = ''\");",
									"        items = default_item;",
									"        contact_id = pm.environment.get(\"C-contact_id\");",
									"        email = \"\";",
									"        branch_id = pm.environment.get(\"C-branch_id\");",
									"        created_order_at = today.toISOString();",
									"        due_at = d30.toISOString();",
									"        order_code = \"HDRC-\" + randomChars(6);",
									"        description = \"[API] Note for invoice \" + order_code;",
									"        discounts = [];",
									"        tax_type = tax_types[getRandomInt(0,tax_types.length - 1)];",
									"        payment_config = [payment_method_list[getRandomInt(0,payment_method_list.length - 1)]];",
									"        status = \"\";",
									"        cart_status = cart_status_arr[getRandomInt(0,cart_status_arr.length - 1)];",
									"        break;",
									"     case 10:",
									"        console.log(\"Unhappy case: cart_status = ''\");",
									"        items = default_item;",
									"        contact_id = pm.environment.get(\"C-contact_id\");",
									"        email = \"\";",
									"        branch_id = pm.environment.get(\"C-branch_id\");",
									"        created_order_at = today.toISOString();",
									"        due_at = d30.toISOString();",
									"        order_code = \"HDRC-\" + randomChars(6);",
									"        description = \"[API] Note for invoice \" + order_code;",
									"        discounts = [];",
									"        tax_type = tax_types[getRandomInt(0,tax_types.length - 1)];",
									"        payment_config = [payment_method_list[getRandomInt(0,payment_method_list.length - 1)]];",
									"        status = \"draft\";",
									"        cart_status = \"\";",
									"        break;",
									"     case 11:",
									"        console.log(\"Unhappy case: missing recurrence_type & day_of_type\");",
									"        items = default_item;",
									"        contact_id = pm.environment.get(\"C-contact_id\");",
									"        email = \"\";",
									"        branch_id = pm.environment.get(\"C-branch_id\");",
									"        created_order_at = today.toISOString();",
									"        due_at = d30.toISOString();",
									"        order_code = \"HDRC-\" + randomChars(6);",
									"        description = \"[API] Note for invoice \" + order_code;",
									"        discounts = [];",
									"        tax_type = tax_types[getRandomInt(0,tax_types.length - 1)];",
									"        payment_config = [payment_method_list[getRandomInt(0,payment_method_list.length - 1)]];",
									"        status = \"draft\";",
									"        cart_status = cart_status_arr[getRandomInt(0,cart_status_arr.length - 1)];",
									"        recurrence_type = \"\";",
									"        day_of_type = \"\";",
									"        break;",
									"    case 12:",
									"        console.log(\"Unhappy case: missing due_date_type & due_date_value\");",
									"        items = default_item;",
									"        contact_id = pm.environment.get(\"C-contact_id\");",
									"        email = \"\";",
									"        branch_id = pm.environment.get(\"C-branch_id\");",
									"        created_order_at = today.toISOString();",
									"        due_at = d30.toISOString();",
									"        order_code = \"HDRC-\" + randomChars(6);",
									"        description = \"[API] Note for invoice \" + order_code;",
									"        discounts = [];",
									"        tax_type = tax_types[getRandomInt(0,tax_types.length - 1)];",
									"        payment_config = [payment_method_list[getRandomInt(0,payment_method_list.length - 1)]];",
									"        status = \"draft\";",
									"        cart_status = cart_status_arr[getRandomInt(0,cart_status_arr.length - 1)];",
									"        due_date_type = \"\";",
									"        due_date_type = \"\";",
									"        break;",
									"    case 13:",
									"        console.log(\"Happy case: \");",
									"        contact_id = pm.environment.get(\"C-contact_id\");",
									"        cart_status = cart_status_arr[getRandomInt(0,cart_status_arr.length - 1)];",
									"        branch_id = pm.environment.get(\"C-branch_id\");",
									"        email = \"chau.lth@finan.me\";",
									"        order_code = \"HDRC-\" + randomChars(6);",
									"        // order_code = \"\";",
									"        description = \"[API] Note for invoice \" + order_code;",
									"        switch(testcase){",
									"            case 3:",
									"                status = \"draft\";",
									"                break;",
									"            case 5:",
									"            default:",
									"                status = \"saved\";",
									"                break;",
									"        }",
									"",
									"        // product / item",
									"        let randTotalProduct = getRandomInt(2,3);",
									"        let ranListPDPos = randNotDupe(0,list_product.length - 1,randTotalProduct);",
									"",
									"        // discount => tạm thời chỉ chọn 1 hoặc 0, dev chưa handle 2+ discount",
									"        let randTotalDC = getRandomInt(0,1);",
									"",
									"        let tax_case = getRandomInt(1,5);",
									"        pm.environment.set('C-tax_case',tax_case);",
									"        switch(tax_case){ // ",
									"            case 1:",
									"                console.log(\"Create invoice with price_excluding_tax & is_pre_tax\");",
									"                tax_type = tax_types[0];",
									"                is_pre_tax = true;",
									"                break;",
									"            case 2:",
									"                console.log(\"Create invoice with price_including_tax & is_pre_tax\");",
									"                tax_type = tax_types[1];",
									"                is_pre_tax = true;",
									"                break;",
									"            case 3:",
									"                console.log(\"Create invoice with price_excluding_tax & !is_pre_tax\");",
									"                tax_type = tax_types[0];",
									"                is_pre_tax = false;",
									"                break;",
									"            case 4:",
									"                console.log(\"Create invoice with price_including_tax & !is_pre_tax\");",
									"                tax_type = tax_types[1];",
									"                is_pre_tax = false;",
									"                break;",
									"            case 5:",
									"            default:",
									"                console.log(\"Create invoice with tax_not_applicable\");",
									"                tax_type = tax_types[2];",
									"                break;",
									"        }",
									"",
									"        for(let i in ranListPDPos){",
									"            let randTotalTax_i = getRandomInt(0,1);",
									"            let randListPos_i = randNotDupe(0,list_tax.length - 1,randTotalTax_i);",
									"            let taxes_i = [];",
									"            let quantity_i = getRandomInt(1,3);",
									"",
									"            // amount của tax chỉ là tượng trưng, server sẽ tự tính lại dựa vào tax_id (cthuc hiện tại đang sai vì chưa discount)",
									"            for(let j in randListPos_i){",
									"                taxes_i[taxes_i.length] = {",
									"                    \"account_id\": 0,//list_tax[randListPos_i[j]].account_id, // tạm thời chưa tạo ra account_id nên tạm ignore",
									"                    \"rate\": list_tax[randListPos_i[j]].rate,",
									"                    \"amount\": 0, // sẽ được tính lại",
									"                    \"name\": list_tax[randListPos_i[j]].name, // field này không cần",
									"                    \"tax_id\": list_tax[randListPos_i[j]].tax_id",
									"                };",
									"            }",
									"",
									"            items[items.length] = {",
									"                \"account_id\": list_product[ranListPDPos[i]].income_account_id,",
									"                \"item_amount\": list_product[ranListPDPos[i]].price,",
									"                // \"currency\": \"\",",
									"                \"name\": list_product[ranListPDPos[i]].name,",
									"                \"note\": \"[API] note for product \" + list_product[ranListPDPos[i]].name,",
									"                \"quantity\":quantity_i,",
									"                \"product_id\": list_product[ranListPDPos[i]].product_id,",
									"                \"sku_id\": list_product[ranListPDPos[i]].sku_id,",
									"                \"taxes\": taxes_i",
									"            }",
									"        }",
									"",
									"        for(let i in items){",
									"            sub_total_amount += items[i].item_amount*items[i].quantity;",
									"        }",
									"",
									"        // discounts",
									"        for(let i = 0; i < randTotalDC; i++){",
									"            if(getRandomInt(0,1)){ // getRandomInt(0,1)",
									"                discounts[discounts.length] = {",
									"                    \"note\": \"\",",
									"                    \"is_rate\": true,",
									"                    \"value\": getRandomInt(10,800) / 10",
									"                }",
									"            } else {",
									"                discounts[discounts.length] = {",
									"                    \"note\": \"\",",
									"                    \"is_rate\": false,",
									"                    \"value\": Math.ceil(sub_total_amount / getRandomInt(2,10))",
									"                }",
									"            }",
									"        }",
									"",
									"        let term_discount;",
									"        let total_discount_amount = 0;",
									"        console.log(\"sub_total_amount: \" + sub_total_amount);",
									"        switch(case_){",
									"            case 1:",
									"                for(let i in discounts){",
									"                    if(discounts[i].is_rate){",
									"                        total_discount_amount += Math.round(discounts[i].value*sub_total_amount/100);",
									"                    } else {",
									"                        total_discount_amount += Math.round(discounts[i].value);",
									"                    }",
									"                }",
									"",
									"                for(let i in items){",
									"                    // total_item_amount, before_tax_amount",
									"                    items[i].total_item_amount = items[i].item_amount*items[i].quantity;",
									"                    items[i].before_tax_amount = items[i].item_amount*items[i].quantity;",
									"",
									"                    // discount_amount",
									"                    let discount_i = 0;",
									"                    for(let j in discounts){",
									"                        if(discounts[j].is_rate){",
									"                            discount_i += Math.round(discounts[j].value*items[i].total_item_amount/100);",
									"                        } else {",
									"                            discount_i += Math.round(discounts[j].value*items[i].total_item_amount/sub_total_amount);",
									"                        }",
									"                    }",
									"                    items[i].discount_amount = discount_i;",
									"",
									"                    // item_tax_amount",
									"                    let total_tax_amount_i = 0;",
									"                    for(let k in items[i].taxes){",
									"                        for(let j in list_tax){",
									"                            if(items[i].taxes[k].tax_id == list_tax[j].tax_id){",
									"                                items[i].taxes[k].item_tax_amount = Math.round(list_tax[j].rate*(items[i].total_item_amount - items[i].discount_amount)/100);",
									"                                // // update lại amount",
									"                                // items[i].taxes[k].amount = items[i].taxes[k].item_tax_amount;",
									"                                total_tax_amount_i += Math.round(list_tax[j].rate*(items[i].total_item_amount - items[i].discount_amount)/100);",
									"                                break;",
									"                            }",
									"                        }",
									"                    }",
									"",
									"                    // after_tax_amount",
									"                    items[i].after_tax_amount = items[i].before_tax_amount + total_tax_amount_i;",
									"",
									"                    // total_amount",
									"                    items[i].total_amount = items[i].before_tax_amount - items[i].discount_amount + total_tax_amount_i;",
									"                }",
									"                break;",
									"            case 2:",
									"                // sub_total_amount cần được tính lại giá trước thuế",
									"                sub_total_amount = 0;",
									"                sum_total_item_amount = 0;",
									"",
									"                // tính lại thuế (thuế chưa giảm giá)",
									"                total_net_amount = 0;",
									"                for(let i in items){",
									"                    // total_item_amount",
									"                    items[i].total_item_amount = items[i].item_amount*items[i].quantity;",
									"                    sum_total_item_amount += items[i].total_item_amount;",
									"",
									"                    // tổng rate thuế theo item => hiện tại chỉ apply 1 thuế",
									"                    let total_tax_rate_i = 0;",
									"                    for(let j in items[i].taxes){",
									"                        total_tax_rate_i += items[i].taxes[j].rate;",
									"                    }",
									"                    items[i].total_tax_rate_i = total_tax_rate_i;",
									"",
									"                    // giá chưa thuế before_tax_amount",
									"                    let item_net_amount_i = Math.round(items[i].total_item_amount / (1 + items[i].total_tax_rate_i/100));",
									"                    items[i].before_tax_amount = item_net_amount_i;",
									"",
									"                    total_net_amount += item_net_amount_i;",
									"                }",
									"",
									"                // chỉ support 1 discount trong 1 invoice",
									"                term_discount = 0;",
									"                for(let i in items){",
									"                    // giảm giá",
									"                    let item_total_discount_i = 0;",
									"                    if(i != items.length - 1){",
									"                        for(let k in discounts){",
									"                            if(discounts[k].is_rate){",
									"                                item_total_discount_i += Math.round(items[i].before_tax_amount * discounts[k].value/100);",
									"                                // item_total_discount_i += Math.round(items[i].total_item_amount * discounts[k].value/100);",
									"                            } else {",
									"                                // item_total_discount_i += Math.round(discounts[k].value * items[i].before_tax_amount/total_net_amount);",
									"                                item_total_discount_i += Math.round(discounts[k].value * items[i].total_item_amount/sum_total_item_amount);",
									"                            }",
									"                        }",
									"                        items[i].discount_amount = item_total_discount_i;",
									"                        term_discount += item_total_discount_i;",
									"",
									"                    } else {",
									"                        for(let k in discounts){",
									"                            // ở đây không cần làm tròn nữa vì chỉ là hiệu của 2 số chẵn",
									"                            if(discounts[k].is_rate){",
									"                                item_total_discount_i += Math.round(total_net_amount * discounts[k].value/100 - term_discount);",
									"                                // item_total_discount_i += Math.round(items[i].before_tax_amount*discounts[k].value/100);",
									"                            } else {",
									"                                item_total_discount_i += Math.round(discounts[k].value - term_discount);",
									"                                // item_total_discount_i += Math.round(discounts[k].value*items[i].before_tax_amount/total_net_amount);",
									"                            }",
									"                        }",
									"                        items[i].discount_amount = item_total_discount_i;",
									"                    }",
									"                    // giá sau discount => after_tax_amount",
									"                    let item_net_amount_after_discount_i = items[i].before_tax_amount - items[i].discount_amount;",
									"                    items[i].after_tax_amount = item_net_amount_after_discount_i;",
									"                    sub_total_amount += item_net_amount_after_discount_i;",
									"",
									"                    // tính lại thuế (thuế đã giảm giá)",
									"                    let total_tax_amount_i = 0;",
									"                    for(let j in items[i].taxes){",
									"                        items[i].taxes[j].amount = Math.round(items[i].after_tax_amount * items[i].taxes[j].rate/100);",
									"                        total_tax_amount_i += items[i].taxes[j].amount;",
									"                    }",
									"",
									"                    // total_amount",
									"                    items[i].total_amount = items[i].before_tax_amount - items[i].discount_amount + total_tax_amount_i;",
									"                }",
									"                break;",
									"            case 3:",
									"                // sub_total_amount cần được tính lại giá sau thuế => rule mới, vẫn giữ giá trước thuế",
									"                sub_total_amount = 0;",
									"",
									"                for(let i in items){",
									"                    // total_item_amount, before_tax_amount",
									"                    items[i].total_item_amount = items[i].item_amount*items[i].quantity;",
									"                    items[i].before_tax_amount = items[i].item_amount*items[i].quantity;",
									"",
									"                    // item_tax_amount",
									"                    let total_tax_amount_i = 0;",
									"                    for(let k in items[i].taxes){",
									"                        for(let j in list_tax){",
									"                            if(items[i].taxes[k].tax_id == list_tax[j].tax_id){",
									"                                // hiện tại chỉ apply 1 tax, nếu hơn phải update lại",
									"                                items[i].taxes[k].item_tax_amount = Math.round(list_tax[j].rate * items[i].total_item_amount/100);",
									"                                total_tax_amount_i += Math.round(list_tax[j].rate * items[i].total_item_amount/100);",
									"                                break;",
									"                            }",
									"                        }",
									"                    }",
									"",
									"                    // after_tax_amount",
									"                    items[i].after_tax_amount = items[i].before_tax_amount + total_tax_amount_i;",
									"                    // sub_total_amount += items[i].after_tax_amount;",
									"                    sub_total_amount += items[i].before_tax_amount;",
									"                }",
									"                console.log(\"new sub_total_amount: \" + sub_total_amount);",
									"",
									"                for(let i in discounts){",
									"                    if(discounts[i].is_rate){",
									"                        total_discount_amount += Math.round(discounts[i].value * sub_total_amount/100);",
									"                    } else {",
									"                        total_discount_amount += Math.round(discounts[i].value);",
									"                    }",
									"                }",
									"",
									"                for(let i in items){",
									"                    // discount_amount",
									"                    let discount_i = 0;",
									"                    for(let j in discounts){",
									"                        if(discounts[j].is_rate){",
									"                            discount_i += Math.round(discounts[j].value * items[i].after_tax_amount/100);",
									"                            // discount_i += Math.round(discounts[j].value * items[i].before_tax_amount/100);",
									"                        } else {",
									"                            // discount_i += Math.round(discounts[j].value * items[i].after_tax_amount/sub_total_amount);",
									"                            discount_i += Math.round(discounts[j].value * items[i].before_tax_amount/sub_total_amount);",
									"                        }",
									"                    }",
									"                    items[i].discount_amount = discount_i;",
									"",
									"                    // total_amount",
									"                    if(items[i].taxes.length > 0){",
									"                        items[i].total_amount = items[i].before_tax_amount - items[i].discount_amount + items[i].taxes[0].item_tax_amount;",
									"                    } else {",
									"                        items[i].total_amount = items[i].before_tax_amount - items[i].discount_amount;",
									"                    }",
									"                }",
									"                break;",
									"            case 4:",
									"                // sub_total_amount cần được tính lại giá trước thuế",
									"                sub_total_amount = 0;",
									"                sum_total_item_amount = 0;",
									"",
									"                // tính lại thuế (thuế chưa giảm giá)",
									"                total_net_amount = 0;",
									"                for(let i in items){",
									"                    // total_item_amount",
									"                    items[i].total_item_amount = items[i].item_amount*items[i].quantity;",
									"",
									"                    sum_total_item_amount += items[i].total_item_amount;",
									"",
									"                    // tổng rate thuế theo item => hiện tại chỉ apply 1 thuế",
									"                    let total_tax_rate_i = 0;",
									"                    for(let j in items[i].taxes){",
									"                        total_tax_rate_i += items[i].taxes[j].rate;",
									"                    }",
									"                    items[i].total_tax_rate_i = total_tax_rate_i;",
									"",
									"                    // giá chưa thuế before_tax_amount",
									"                    let item_net_amount_i = Math.round(items[i].total_item_amount / (1 + items[i].total_tax_rate_i/100));",
									"                    items[i].before_tax_amount = item_net_amount_i;",
									"",
									"                    total_net_amount += item_net_amount_i;",
									"                }",
									"",
									"                // chỉ support 1 discount trong 1 invoice",
									"                term_discount = 0;",
									"                for(let i in items){",
									"                    // giảm giá => tạm thời ko tính ra số cuối để trừ, nếu PO yêu cầu thì update lại",
									"                    let item_total_discount_i = 0;",
									"                    // if(i != items.length - 1){",
									"                        for(let k in discounts){",
									"                            if(discounts[k].is_rate){",
									"                                // item_total_discount_i += Math.round(items[i].before_tax_amount * discounts[k].value/100);",
									"                                item_total_discount_i += Math.round(items[i].total_item_amount * discounts[k].value/100);",
									"                            } else {",
									"                                // item_total_discount_i += Math.round(discounts[k].value * items[i].before_tax_amount/total_net_amount);",
									"                                item_total_discount_i += Math.round(discounts[k].value * items[i].total_item_amount/sum_total_item_amount);",
									"                            }",
									"                        }",
									"                        items[i].discount_amount = item_total_discount_i;",
									"                        term_discount += item_total_discount_i;",
									"",
									"                    // } else {",
									"                    //     for(let k in discounts){",
									"                    //         // ở đây không cần làm tròn nữa vì chỉ là hiệu của 2 số chẵn",
									"                    //         if(discounts[k].is_rate){",
									"                    //             // item_total_discount_i += Math.round(total_net_amount * discounts[k].value/100 - term_discount);",
									"                    //             item_total_discount_i += Math.round(total_net_amount * discounts[k].value/100 - term_discount);",
									"                    //         } else {",
									"                    //             item_total_discount_i += Math.round(discounts[k].value - term_discount);",
									"                    //             // item_total_discount_i += Math.round(discounts[k].value*items[i].before_tax_amount/total_net_amount);",
									"                    //         }",
									"                    //     }",
									"                    //     items[i].discount_amount = item_total_discount_i;",
									"                    // }",
									"                    // giá sau discount => after_tax_amount",
									"                    let item_net_amount_after_discount_i = items[i].before_tax_amount - items[i].discount_amount;",
									"                    items[i].after_tax_amount = item_net_amount_after_discount_i;",
									"                    sub_total_amount += item_net_amount_after_discount_i;",
									"",
									"                    // tính lại thuế (thuế đã giảm giá)",
									"                    let total_tax_amount_i = 0;",
									"                    for(let j in items[i].taxes){",
									"                        items[i].taxes[j].amount = Math.round(items[i].before_tax_amount * items[i].taxes[j].rate/100);",
									"                        total_tax_amount_i += items[i].taxes[j].amount;",
									"                    }",
									"",
									"                    // total_amount",
									"                    items[i].total_amount = items[i].before_tax_amount - items[i].discount_amount + total_tax_amount_i;",
									"                }",
									"                break;",
									"            case 5:",
									"            default:",
									"                for(let i in discounts){",
									"                    if(discounts[i].is_rate){",
									"                        total_discount_amount += Math.round(discounts[i].value*sub_total_amount/100);",
									"                    } else {",
									"                        total_discount_amount += Math.round(discounts[i].value);",
									"                    }",
									"                }",
									"",
									"                for(let i in items){",
									"                    // total_item_amount, before_tax_amount",
									"                    items[i].total_item_amount = items[i].item_amount*items[i].quantity;",
									"                    items[i].before_tax_amount = items[i].item_amount*items[i].quantity;",
									"",
									"                    // discount_amount",
									"                    let discount_i = 0;",
									"                    for(let j in discounts){",
									"                        if(discounts[j].is_rate){",
									"                            discount_i += Math.round(discounts[j].value*items[i].total_item_amount/100);",
									"                        } else {",
									"                            discount_i += Math.round(discounts[j].value*items[i].total_item_amount/sub_total_amount);",
									"                        }",
									"                    }",
									"                    items[i].discount_amount = discount_i;",
									"",
									"                    // item_tax_amount",
									"",
									"                    // after_tax_amount",
									"                    items[i].after_tax_amount = items[i].before_tax_amount;",
									"",
									"                    // total_amount",
									"                    items[i].total_amount = items[i].before_tax_amount - items[i].discount_amount;",
									"                }",
									"                break;",
									"        }",
									"",
									"        // payment_config",
									"        let randTotalPM = getRandomInt(1,payment_method_list.length - 1);",
									"        let randListPMPos = randNotDupe(0,payment_method_list.length - 1,randTotalPM);",
									"        for(let i in randListPMPos){",
									"            payment_config[payment_config.length] = payment_method_list[randListPMPos[i]];",
									"        }",
									"",
									"        // payment_account_id = list_bank_account[getRandomInt(0,list_bank_account.length - 1)].account_id;",
									"        break;",
									"    default:",
									"        console.log(\"Missing flow\");",
									"        break;",
									"}",
									"",
									"if(case_ != 1){",
									"    sale_order_info = {",
									"        \"attachment_url\": [],",
									"        \"branch_id\": branch_id,",
									"        \"cart_status\": cart_status_arr[getRandomInt(0,cart_status_arr.length - 1)],",
									"        \"contact_id\": \"\",",
									"        \"currency\": \"vnd\",",
									"        \"discounts\": discounts,",
									"        \"due_at\": \"\",",
									"        \"email\": email,",
									"        \"items\": items,",
									"        \"order_code\": order_code, // cần truyền ko?",
									"        \"tax_type\": tax_type,",
									"        \"is_pre_tax\":is_pre_tax,",
									"        \"value_at\": \"\"",
									"    }",
									"}",
									"",
									"let payload = {",
									"  \"cart_status\": cart_status,",
									"  \"contact_id\": contact_id,",
									"  \"recurrence_type\": recurrence_type, // bộ này set value_at => value_at == created_at",
									"  \"day_of_type\": day_of_type,",
									"  \"due_date_type\": due_date_type, // bộ này set due_at",
									"  \"due_date_value\": due_date_value,",
									"  \"note\": description,",
									"  \"sale_order_info\": sale_order_info, // lấy bộ single invoice, không kèm value_at & due_at",
									"  \"start_date\": today.toISOString(),",
									"  \"end_date\": d30.toISOString(),",
									"  \"status\": status // draft, active",
									"}",
									"",
									"console.log(\"payload: \",payload);",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));",
									"pm.environment.set(\"C-recurring_invoice_obj\",payload);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"let case_ = pm.environment.get(\"C-case_\");",
									"",
									"let jsData = pm.response.json();",
									"switch(case_){",
									"    case 1: case 2: case 3: case 4: case 5:",
									"    case 6: case 7: case 8: case 9: case 10:",
									"    case 11: case 12:",
									"        case_++;",
									"        pm.environment.set(\"C-case_\",case_);",
									"        postman.setNextRequest(\"create_recurring_invoice\"); // create_recurring_invoice",
									"        break;",
									"    case 13:",
									"        console.log(\"debug: \" + JSON.stringify(jsData));",
									"        pm.test(\"Status code is 200\", function () {",
									"            pm.response.to.have.status(200);",
									"        });",
									"",
									"        pm.test(\"System code is 102001\", function () {",
									"            pm.expect(jsData.code).to.eql(102001);",
									"        });",
									"",
									"        let recurring_invoice_obj = pm.environment.get(\"C-recurring_invoice_obj\");",
									"        recurring_invoice_obj.recurring_invoice_id = jsData.data.id;",
									"",
									"        let userInfo = pm.environment.get(\"C-userInfo\");",
									"        ",
									"        // creator_id",
									"        pm.test(\"creator_id of invoice is \" + userInfo.id, function () {",
									"            console.log(\"act creator_id: \" + jsData.data.creator_id);",
									"            pm.expect(jsData.data.creator_id == userInfo.id).to.be.true;",
									"        });",
									"",
									"        // start_date",
									"        pm.test(\"start_date of invoice is \" + recurring_invoice_obj.start_date.substring(0,19), function () {",
									"            console.log(\"act start_date: \" + jsData.data.start_date.substring(0,19));",
									"            pm.expect(jsData.data.start_date.substring(0,19) == recurring_invoice_obj.start_date.substring(0,19)).to.be.true;",
									"        });",
									"",
									"        // end_date",
									"        pm.test(\"end_date of invoice is \" + recurring_invoice_obj.end_date.substring(0,19), function () {",
									"            console.log(\"act end_date: \" + jsData.data.end_date.substring(0,19));",
									"            pm.expect(jsData.data.end_date.substring(0,19) == recurring_invoice_obj.end_date.substring(0,19)).to.be.true;",
									"        });",
									"",
									"        // recurrence_type",
									"        pm.test(\"recurrence_type of invoice is \" + recurring_invoice_obj.recurrence_type, function () {",
									"            console.log(\"act recurrence_type: \" + jsData.data.recurrence_type);",
									"            pm.expect(jsData.data.recurrence_type == recurring_invoice_obj.recurrence_type).to.be.true;",
									"        });",
									"        // day_of_type",
									"        pm.test(\"day_of_type of invoice is \" + recurring_invoice_obj.day_of_type, function () {",
									"            console.log(\"act day_of_type: \" + jsData.data.day_of_type);",
									"            pm.expect(jsData.data.day_of_type == recurring_invoice_obj.day_of_type).to.be.true;",
									"        });",
									"",
									"        // due_date_type",
									"        pm.test(\"due_date_type of invoice is \" + recurring_invoice_obj.due_date_type, function () {",
									"            console.log(\"act due_date_type: \" + jsData.data.due_date_type);",
									"            pm.expect(jsData.data.due_date_type == recurring_invoice_obj.due_date_type).to.be.true;",
									"        });",
									"        // due_date_value",
									"        if(recurring_invoice_obj.due_date_value == \"\") recurring_invoice_obj.due_date_value = 0;",
									"        pm.test(\"due_date_value of invoice is \" + recurring_invoice_obj.due_date_value, function () {",
									"            console.log(\"act due_date_value: \" + jsData.data.due_date_value);",
									"            pm.expect(jsData.data.due_date_value == recurring_invoice_obj.due_date_value).to.be.true;",
									"        });",
									"",
									"        // contact_id",
									"        pm.test(\"contact_id of invoice is \" + recurring_invoice_obj.contact_id, function () {",
									"            console.log(\"act contact_id: \" + jsData.data.contact_id);",
									"            pm.expect(jsData.data.contact_id == recurring_invoice_obj.contact_id).to.be.true;",
									"        });",
									"",
									"        // note",
									"        pm.test(\"note of invoice is \" + recurring_invoice_obj.note, function () {",
									"            console.log(\"act note: \" + jsData.data.note);",
									"            pm.expect(jsData.data.note == recurring_invoice_obj.note).to.be.true;",
									"        });",
									"",
									"        // cart_status",
									"        pm.test(\"cart_status of invoice is \" + recurring_invoice_obj.cart_status, function () {",
									"            console.log(\"act cart_status: \" + jsData.data.cart_status);",
									"            pm.expect(jsData.data.cart_status == recurring_invoice_obj.cart_status).to.be.true;",
									"        });",
									"",
									"        // status",
									"        pm.test(\"status of invoice is \" + recurring_invoice_obj.status, function () {",
									"            console.log(\"act status: \" + jsData.data.status);",
									"            pm.expect(jsData.data.status == recurring_invoice_obj.status).to.be.true;",
									"        });",
									"",
									"        // sale_order_info.branch_id",
									"        pm.test(\"sale_order_info.branch_id of invoice is \" + recurring_invoice_obj.status, function () {",
									"            console.log(\"act sale_order_info.branch_id: \" + jsData.data.sale_order_info.branch_id);",
									"            pm.expect(jsData.data.sale_order_info.branch_id == recurring_invoice_obj.sale_order_info.branch_id).to.be.true;",
									"        });",
									"",
									"        // sale_order_info.discounts",
									"        pm.test(\"sale_order_info.discounts of invoice is correctly!\", function () {",
									"            console.log(\"act sale_order_info.discounts: \", jsData.data.sale_order_info.discounts);",
									"            console.log(\"exp sale_order_info.discounts: \", recurring_invoice_obj.sale_order_info.discounts);",
									"            pm.expect(JSON.stringify(jsData.data.sale_order_info.discounts) == JSON.stringify(recurring_invoice_obj.sale_order_info.discounts)).to.be.true;",
									"        });",
									"",
									"        // sale_order_info.email",
									"        pm.test(\"sale_order_info.email of invoice is \" + recurring_invoice_obj.sale_order_info.email, function () {",
									"            console.log(\"act sale_order_info.email: \" + jsData.data.sale_order_info.email);",
									"            pm.expect(jsData.data.sale_order_info.email == recurring_invoice_obj.sale_order_info.email).to.be.true;",
									"        });",
									"",
									"        // sale_order_info.items",
									"        pm.test(\"sale_order_info.items of invoice is correctly!\", function () {",
									"            console.log(\"act sale_order_info.items: \", jsData.data.sale_order_info.items);",
									"            console.log(\"exp sale_order_info.items: \", recurring_invoice_obj.sale_order_info.items);",
									"            pm.expect(JSON.stringify(jsData.data.sale_order_info.items) == JSON.stringify(recurring_invoice_obj.sale_order_info.items)).to.be.true;",
									"        });",
									"",
									"        // sale_order_info.order_code",
									"        pm.test(\"sale_order_info.order_code of invoice is \" + recurring_invoice_obj.sale_order_info.order_code, function () {",
									"            console.log(\"act sale_order_info.order_code: \" + jsData.data.sale_order_info.order_code);",
									"            pm.expect(jsData.data.sale_order_info.order_code == recurring_invoice_obj.sale_order_info.order_code).to.be.true;",
									"        });",
									"",
									"        // sale_order_info.tax_type",
									"        pm.test(\"sale_order_info.tax_type of invoice is \" + recurring_invoice_obj.sale_order_info.tax_type, function () {",
									"            console.log(\"act sale_order_info.tax_type: \" + jsData.data.sale_order_info.tax_type);",
									"            pm.expect(jsData.data.sale_order_info.tax_type == recurring_invoice_obj.sale_order_info.tax_type).to.be.true;",
									"        });",
									"",
									"        // sale_order_info.is_pre_tax",
									"        pm.test(\"sale_order_info.is_pre_tax of invoice is \" + recurring_invoice_obj.sale_order_info.is_pre_tax, function () {",
									"            console.log(\"act sale_order_info.is_pre_tax: \" + jsData.data.sale_order_info.is_pre_tax);",
									"            pm.expect(jsData.data.sale_order_info.is_pre_tax == recurring_invoice_obj.sale_order_info.is_pre_tax).to.be.true;",
									"        });",
									"",
									"        pm.environment.unset(\"C-case_\");",
									"        testcase++;",
									"        pm.environment.set(\"C-testcase\",testcase);",
									"        pm.environment.set(\"C-recurring_invoice_obj\",recurring_invoice_obj);",
									"        postman.setNextRequest(\"get_list_recurring_invoice\"); // get_list_recurring_invoice",
									"        break;",
									"    default:",
									"        console.log(\"missing flow, end test\");",
									"        postman.setNextRequest(null);",
									"        break;",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/recurring/create",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"recurring",
								"create"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "home-report",
			"item": [
				{
					"name": "get_report_account_receivable_unpaid",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let payload = {",
									"    \"account_key\": \"A3001\", // account_receivable => A3001, account_payable => B1001",
									"    \"branch_id\": pm.environment.get(\"C-branch_id\"),",
									"    \"business_id\": parseInt(pm.environment.get(\"C-business_id\"))",
									"    //   \"current_period_end\": \"string\",",
									"    //   \"current_period_start\": \"string\",",
									"    // \"page\": 1,",
									"    // \"page_size\": 20,",
									"    //   \"period\": \"string\",  // old due_days",
									"    //   \"previous_period_end\": \"string\",",
									"    //   \"previous_period_start\": \"string\",",
									"    //   \"report_type\": \"string\",",
									"    // \"timezone\": \"UTC+07:00\"",
									"}",
									"",
									"console.log(\"payload: \",payload);",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));",
									"pm.environment.set(\"C-report_obj\",payload);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ============================= get last day (Sun is end of Week)",
									"function getLastDayOfCurrentWeek() {",
									"    const now = new Date();",
									"    const lastDay = new Date(now);",
									"    const daysUntilSunday = 7 - now.getDay();  // if Saturday is end, change 7 => 6",
									"    lastDay.setDate(now.getDate() + daysUntilSunday);",
									"    return lastDay;",
									"}",
									"",
									"// ============================= get first day (Sun is end of Week)",
									"function getFirstDayOfCurrentWeek() {",
									"    const now = new Date();",
									"    const firstDay = new Date(now);",
									"    firstDay.setDate(now.getDate() - now.getDay() + 1);  // if Saturday is end, remove +1",
									"    return firstDay;",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let unpaid_account_receivable = null;",
									"    try {",
									"        unpaid_account_receivable = jsData.data.unpaid_amount_lifetime_categories;",
									"    } catch {",
									"        console.log(\"Can't get data\");",
									"    }",
									"",
									"    switch(testcase){",
									"        case 2:",
									"            pm.test(\"Got unpaid_account_receivable data\", function () {",
									"                pm.environment.set(\"C-unpaid_account_receivable\",unpaid_account_receivable);",
									"                pm.expect(unpaid_account_receivable != null).to.be.true;",
									"            });",
									"",
									"            postman.setNextRequest(\"get_report_account_receivable_customer\"); //get_report_account_receivable_customer",
									"            break;",
									"        case 8:",
									"            let invoice_obj = pm.environment.get(\"C-invoice_obj\");",
									"            let old_data = pm.environment.get(\"C-unpaid_account_receivable\");",
									"            let total_amount = parseFloat(invoice_obj.exp_total_amount);",
									"            console.log(\"total_amount: \" + (total_amount + old_data.unpaid_total));",
									"",
									"            // unpaid_total",
									"            pm.test(\"Total unpaid increase \" + total_amount, function () {",
									"                console.log(\"old: \" + old_data.unpaid_total);",
									"                console.log(\"new: \" + unpaid_account_receivable.unpaid_total);",
									"                pm.expect(unpaid_account_receivable.unpaid_total == total_amount + old_data.unpaid_total).to.be.true;",
									"            });",
									"",
									"            let due_date = new Date(invoice_obj.due_at);",
									"            let due_date_timestamp = Math.floor(due_date.getTime()/1000);",
									"            let today = new Date();",
									"            let today_timestamp = Math.floor(today.getTime()/1000);",
									"            let due_type;",
									"            let last_day_of_current_week = getLastDayOfCurrentWeek();",
									"            let last_day_of_current_week_stp = Math.floor(last_day_of_current_week.getTime()/1000);",
									"            let first_day_of_current_week = getFirstDayOfCurrentWeek();",
									"            let first_day_of_current_week_stp = Math.floor(first_day_of_current_week.getTime()/1000);",
									"            // console.log(\"debug: \" + (due_date_timestamp - today_timestamp));",
									"            if(due_date_timestamp > today_timestamp){",
									"                if(due_date_timestamp < last_day_of_current_week_stp){",
									"                    due_type = \"undue_n_7d\";",
									"                } else {",
									"                    due_type = \"undue\";",
									"                }",
									"            } else {",
									"                if(today_timestamp - due_date_timestamp > 90*24*60*60){",
									"                    due_type = \"overdue_over\";",
									"                } else if (today_timestamp - due_date_timestamp > 60*24*60*60){",
									"                    due_type = \"overdue_between\";",
									"                } else if (today_timestamp - due_date_timestamp > 30*24*60*60){",
									"                    due_type = \"overdue_less\";",
									"                } else {",
									"                    if(due_date_timestamp > first_day_of_current_week_stp){",
									"                        due_type = \"due_n_7d\";",
									"                    } else {",
									"                        due_type = \"due\";",
									"                    }",
									"                }",
									"            }",
									"            pm.environment.set(\"C-due_type\",due_type);",
									"            console.log(\"due_type: \" + due_type);",
									"",
									"            console.log(\"old: \",old_data);",
									"            console.log(\"new: \",unpaid_account_receivable);",
									"            switch(due_type){",
									"                case \"due\": case \"due_n_7d\":",
									"                    // unpaid_due",
									"                    pm.test(\"unpaid_due increase \" + total_amount, function () {",
									"                        console.log(\"old: \" + old_data.unpaid_due);",
									"                        console.log(\"expected: \" + (total_amount + old_data.unpaid_due));",
									"                        console.log(\"new: \" + unpaid_account_receivable.unpaid_due);",
									"                        pm.expect(unpaid_account_receivable.unpaid_due == total_amount + old_data.unpaid_due).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_less",
									"                    pm.test(\"nothing happen unpaid_overdue_less\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_less == old_data.unpaid_overdue_less).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_between",
									"                    pm.test(\"nothing happen unpaid_overdue_between\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_between == old_data.unpaid_overdue_between).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_over",
									"                    pm.test(\"nothing happen unpaid_overdue_over\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_over == old_data.unpaid_overdue_over).to.be.true;",
									"                    });",
									"                    break;",
									"                case \"overdue_less\":",
									"                    // unpaid_due",
									"                    pm.test(\"nothing happen unpaid_due\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_due == old_data.unpaid_due).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_less",
									"                    pm.test(\"unpaid_overdue_less increase \" + total_amount, function () {",
									"                        console.log(\"old: \" + old_data.unpaid_overdue_less);",
									"                        // console.log(\"expected: \" + (total_amount + old_data.unpaid_overdue_less));",
									"                        console.log(\"new: \" + unpaid_account_receivable.unpaid_overdue_less);",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_less == total_amount + old_data.unpaid_overdue_less).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_between",
									"                    pm.test(\"nothing happen unpaid_overdue_between\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_between == old_data.unpaid_overdue_between).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_over",
									"                    pm.test(\"nothing happen unpaid_overdue_over\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_over == old_data.unpaid_overdue_over).to.be.true;",
									"                    });",
									"                    break;",
									"                case \"overdue_between\":",
									"                    // unpaid_due",
									"                    pm.test(\"nothing happen unpaid_due\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_due == old_data.unpaid_due).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_less",
									"                    pm.test(\"nothing happen unpaid_overdue_less\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_less == old_data.unpaid_overdue_less).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_between",
									"                    pm.test(\"unpaid_overdue_between increase \" + total_amount, function () {",
									"                        console.log(\"old: \" + old_data.unpaid_overdue_between);",
									"                        console.log(\"new: \" + unpaid_account_receivable.unpaid_overdue_between);",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_between == total_amount + old_data.unpaid_overdue_between).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_over",
									"                    pm.test(\"nothing happen unpaid_overdue_over\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_over == old_data.unpaid_overdue_over).to.be.true;",
									"                    });",
									"                    break;",
									"                case \"overdue_over\":",
									"                    // unpaid_due",
									"                    pm.test(\"nothing happen unpaid_due\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_due == old_data.unpaid_due).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_less",
									"                    pm.test(\"nothing happen unpaid_overdue_less\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_less == old_data.unpaid_overdue_less).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_between",
									"                    pm.test(\"unpaid_overdue_between increase\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_between == old_data.unpaid_overdue_between).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_over",
									"                    pm.test(\"unpaid_overdue_over increase \" + total_amount, function () {",
									"                        console.log(\"old: \" + old_data.unpaid_overdue_over);",
									"                        console.log(\"new: \" + unpaid_account_receivable.unpaid_overdue_over);",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_over == total_amount + old_data.unpaid_overdue_over).to.be.true;",
									"                    });",
									"                    break;",
									"                default:",
									"                    // unpaid_due",
									"                    pm.test(\"nothing happen unpaid_due\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_due == old_data.unpaid_due).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_less",
									"                    pm.test(\"nothing happen unpaid_overdue_less\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_less == old_data.unpaid_overdue_less).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_between",
									"                    pm.test(\"unpaid_overdue_between increase\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_between == old_data.unpaid_overdue_between).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_over",
									"                    pm.test(\"nothing happen unpaid_overdue_over\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_over == old_data.unpaid_overdue_over).to.be.true;",
									"                    });",
									"                    break;",
									"            }",
									"",
									"            if(due_type == \"undue_n_7d\"){",
									"                // unpaid_overdue_more_than_today",
									"                pm.test(\"nothing happen unpaid_overdue_more_than_today\", function () {",
									"                    pm.expect(unpaid_account_receivable.unpaid_overdue_more_than_today == old_data.unpaid_overdue_more_than_today).to.be.true;",
									"                });",
									"",
									"                // unpaid_overdue_less_than_today",
									"                pm.test(\"unpaid_overdue_less_than_today increase \" + total_amount, function () {",
									"                    console.log(\"old: \" + old_data.unpaid_overdue_less_than_today);",
									"                    console.log(\"expected: \" + (total_amount + old_data.unpaid_overdue_less_than_today));",
									"                    console.log(\"new: \" + unpaid_account_receivable.unpaid_overdue_less_than_today);",
									"                    pm.expect(unpaid_account_receivable.unpaid_overdue_less_than_today == total_amount + old_data.unpaid_overdue_less_than_today).to.be.true;",
									"                });",
									"",
									"                // unpaid_overdue_in_week",
									"                pm.test(\"unpaid_overdue_in_week increase \" + total_amount, function () {",
									"                    console.log(\"old: \" + old_data.unpaid_overdue_in_week);",
									"                    console.log(\"expected: \" + (total_amount + old_data.unpaid_overdue_in_week));",
									"                    console.log(\"new: \" + unpaid_account_receivable.unpaid_overdue_in_week);",
									"                    pm.expect(unpaid_account_receivable.unpaid_overdue_in_week == total_amount + old_data.unpaid_overdue_in_week).to.be.true;",
									"                });",
									"            } else if(due_type == \"due_n_7d\"){",
									"                // unpaid_overdue_more_than_today",
									"                pm.test(\"unpaid_overdue_more_than_today increase \" + total_amount, function () {",
									"                    console.log(\"old: \" + old_data.unpaid_overdue_more_than_today);",
									"                    console.log(\"expected: \" + (total_amount + old_data.unpaid_overdue_more_than_today));",
									"                    console.log(\"new: \" + unpaid_account_receivable.unpaid_overdue_more_than_today);",
									"                    pm.expect(unpaid_account_receivable.unpaid_overdue_more_than_today == total_amount + old_data.unpaid_overdue_more_than_today).to.be.true;",
									"                });",
									"",
									"                // unpaid_overdue_less_than_today",
									"                pm.test(\"nothing happen unpaid_overdue_less_than_today\", function () {",
									"                    pm.expect(unpaid_account_receivable.unpaid_overdue_less_than_today == old_data.unpaid_overdue_less_than_today).to.be.true;",
									"                });",
									"",
									"                // unpaid_overdue_in_week",
									"                pm.test(\"unpaid_overdue_in_week increase \" + total_amount, function () {",
									"                    console.log(\"old: \" + old_data.unpaid_overdue_in_week);",
									"                    console.log(\"expected: \" + (total_amount + old_data.unpaid_overdue_in_week));",
									"                    console.log(\"new: \" + unpaid_account_receivable.unpaid_overdue_in_week);",
									"                    pm.expect(unpaid_account_receivable.unpaid_overdue_in_week == total_amount + old_data.unpaid_overdue_in_week).to.be.true;",
									"                });",
									"            } else if (due_type == \"undue\"){",
									"                // unpaid_overdue_more_than_today",
									"                pm.test(\"nothing happen unpaid_overdue_more_than_today\", function () {",
									"                    pm.expect(unpaid_account_receivable.unpaid_overdue_more_than_today == old_data.unpaid_overdue_more_than_today).to.be.true;",
									"                });",
									"",
									"                // unpaid_overdue_less_than_today",
									"                pm.test(\"unpaid_overdue_less_than_today increase \" + total_amount, function () {",
									"                    console.log(\"old: \" + old_data.unpaid_overdue_less_than_today);",
									"                    console.log(\"expected: \" + (total_amount + old_data.unpaid_overdue_less_than_today));",
									"                    console.log(\"new: \" + unpaid_account_receivable.unpaid_overdue_less_than_today);",
									"                    pm.expect(unpaid_account_receivable.unpaid_overdue_less_than_today == total_amount + old_data.unpaid_overdue_less_than_today).to.be.true;",
									"                });",
									"",
									"                // unpaid_overdue_in_week",
									"                pm.test(\"nothing happen unpaid_overdue_in_week\", function () {",
									"                    pm.expect(unpaid_account_receivable.unpaid_overdue_in_week == old_data.unpaid_overdue_in_week).to.be.true;",
									"                });",
									"            } else {",
									"                // unpaid_overdue_more_than_today",
									"                pm.test(\"unpaid_overdue_more_than_today increase \" + total_amount, function () {",
									"                    console.log(\"old: \" + old_data.unpaid_overdue_more_than_today);",
									"                    console.log(\"expected: \" + (total_amount + old_data.unpaid_overdue_more_than_today));",
									"                    console.log(\"new: \" + unpaid_account_receivable.unpaid_overdue_more_than_today);",
									"                    pm.expect(unpaid_account_receivable.unpaid_overdue_more_than_today == total_amount + old_data.unpaid_overdue_more_than_today).to.be.true;",
									"                });",
									"",
									"                // unpaid_overdue_less_than_today",
									"                pm.test(\"nothing happen unpaid_overdue_less_than_today\", function () {",
									"                    pm.expect(unpaid_account_receivable.unpaid_overdue_less_than_today == old_data.unpaid_overdue_less_than_today).to.be.true;",
									"                });",
									"",
									"                // unpaid_overdue_in_week",
									"                pm.test(\"nothing happen unpaid_overdue_in_week\", function () {",
									"                    pm.expect(unpaid_account_receivable.unpaid_overdue_in_week == old_data.unpaid_overdue_in_week).to.be.true;",
									"                });",
									"            }",
									"",
									"            // update new data",
									"            pm.environment.set(\"C-unpaid_account_receivable\",unpaid_account_receivable);",
									"",
									"            postman.setNextRequest(\"get_report_account_receivable_customer\"); //get_report_account_receivable_customer",
									"            break;",
									"        case 5:",
									"            let old_unpaid_account_receivable = pm.environment.get(\"C-unpaid_account_receivable\");",
									"            pm.test(\"Nothing happen with unpaid_account_receivable\", function () {",
									"                console.log(\"old: \", unpaid_account_receivable);",
									"                console.log(\"new: \", old_unpaid_account_receivable);",
									"                pm.expect(JSON.stringify(unpaid_account_receivable) == JSON.stringify(old_unpaid_account_receivable)).to.be.true;",
									"            });",
									"",
									"            // nếu bị bug, có thay đổi, cần lưu lại data mới",
									"            pm.environment.set(\"C-unpaid_account_receivable\",unpaid_account_receivable);",
									"",
									"            postman.setNextRequest(\"get_report_account_receivable_customer\"); //get_report_account_receivable_customer",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get report account receivable unpaid, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/report/account-receivable-card-unpaid",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"report",
								"account-receivable-card-unpaid"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_report_account_receivable_customer",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let page = pm.environment.get(\"C-page\");",
									"",
									"if(!page){",
									"    page = 1;",
									"    pm.environment.set(\"C-page\",page);",
									"",
									"    let page_size = 20;",
									"    pm.environment.set(\"C-page_size\",page_size);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = JSON.parse(responseBody);",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let total_pages = jsData.meta.total_pages;",
									"    let page = pm.environment.get(\"C-page\");",
									"",
									"    let list_report_customer, old_list_report_customer;",
									"    switch(testcase){",
									"        case 2:",
									"            list_report_customer = pm.environment.get(\"C-list_report_customer\");",
									"            if(!list_report_customer){",
									"                list_report_customer = [];",
									"            }",
									"            break;",
									"        case 5: case 8:",
									"            old_list_report_customer = pm.environment.get(\"C-old_list_report_customer\");",
									"            if(!old_list_report_customer){",
									"                old_list_report_customer = pm.environment.get(\"C-list_report_customer\");",
									"                pm.environment.unset(\"C-list_report_customer\");",
									"                pm.environment.set(\"C-old_list_report_customer\",old_list_report_customer);",
									"            }",
									"",
									"            list_report_customer = pm.environment.get(\"C-list_report_customer\");",
									"            if(!list_report_customer){",
									"                list_report_customer = [];",
									"            }",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow\");",
									"            break;",
									"    }",
									"",
									"    for(let item in jsData.data){",
									"        list_report_customer[list_report_customer.length] = {",
									"            \"contact_id\":jsData.data[item].contact_id,",
									"            \"unpaid_total\":jsData.data[item].unpaid_total,",
									"            \"unpaid_due\":jsData.data[item].unpaid_due,",
									"            \"unpaid_overdue_less\":jsData.data[item].unpaid_overdue_less,",
									"            \"unpaid_overdue_between\":jsData.data[item].unpaid_overdue_between,",
									"            \"unpaid_overdue_over\":jsData.data[item].unpaid_overdue_over,",
									"            \"full_count\":jsData.data[item].full_count,",
									"            \"contact_name\":jsData.data[item].contact_info.contact_name,",
									"            \"contact_phone\":jsData.data[item].contact_info.contact_phone",
									"        }",
									"    }",
									"    pm.environment.set(\"C-list_report_customer\",list_report_customer);",
									"",
									"    if(page >= total_pages){",
									"        // must clear page & page_size",
									"        pm.environment.unset(\"C-page\");",
									"        pm.environment.unset(\"C-page_size\");",
									"",
									"        let contact_id = pm.environment.get(\"C-contact_id\");",
									"        let invoice_obj = pm.environment.get(\"C-invoice_obj\");",
									"        let total_amount;",
									"        let isFound = false, hasRecord = false;",
									"        switch(testcase){",
									"            case 2:",
									"                pm.test(\"Got all record! \" + list_report_customer.length, function () {",
									"                    pm.expect(list_report_customer.length > 0).to.be.true;",
									"                });",
									"",
									"                postman.setNextRequest(\"get_report_income_expense\"); // get_list_invoice, get_report_income_expense",
									"                break;",
									"            case 8:",
									"                total_amount = parseFloat(invoice_obj.exp_total_amount);",
									"                let record_obj = null;",
									"                let inList = false;",
									"                for(let i in old_list_report_customer){",
									"                    if(old_list_report_customer[i].contact_id == contact_id){",
									"                        inList = true;",
									"                        record_obj = old_list_report_customer[i];",
									"                        break;",
									"                    }",
									"                }",
									"",
									"                if(inList){",
									"                    pm.test(\"Nothing happen with total record\", function () {",
									"                        pm.expect(list_report_customer.length == old_list_report_customer.length).to.be.true;",
									"                    });",
									"                } else {",
									"                    pm.test(\"Total record increase 1\", function () {",
									"                        pm.expect(list_report_customer.length == old_list_report_customer.length + 1).to.be.true;",
									"                    });",
									"                    record_obj = {",
									"                        \"contact_id\":invoice_obj.contact_id,",
									"                        \"unpaid_total\":0,",
									"                        \"unpaid_due\":0,",
									"                        \"unpaid_overdue_less\":0,",
									"                        \"unpaid_overdue_between\":0,",
									"                        \"unpaid_overdue_over\":0,",
									"                        \"full_count\":0,",
									"                        \"contact_name\":null,",
									"                        \"contact_phone\":null",
									"                    }",
									"                }",
									"",
									"                let due_type = pm.environment.get(\"C-due_type\");",
									"                for(let i in list_report_customer){",
									"                    if(list_report_customer[i].contact_id == contact_id){",
									"                        isFound = true;",
									"                        console.log(\"Found \" + list_report_customer[i].contact_name + ' - ' + list_report_customer[i].contact_phone);",
									"                        ",
									"                        pm.test(\"unpaid_total increase \" + total_amount, function () {",
									"                            console.log(\"old: \" + record_obj.unpaid_total);",
									"                            console.log(\"expected: \" + (record_obj.unpaid_total + total_amount));",
									"                            console.log(\"new: \" + list_report_customer[i].unpaid_total);",
									"                            pm.expect(list_report_customer[i].unpaid_total.toFixed(2) == (record_obj.unpaid_total + total_amount).toFixed(2)).to.be.true;",
									"                        });",
									"",
									"                        switch(due_type){",
									"                            case \"due\": case \"due_n_7d\":",
									"                                // unpaid_due",
									"                                pm.test(\"unpaid_due increase \" + total_amount, function () {",
									"                                    console.log(\"old: \" + record_obj.unpaid_due);",
									"                                    console.log(\"new: \" + list_report_customer[i].unpaid_due);",
									"                                    pm.expect(list_report_customer[i].unpaid_due.toFixed(2) == (record_obj.unpaid_due + total_amount).toFixed(2)).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_less",
									"                                pm.test(\"nothing happen unpaid_overdue_less\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_less == record_obj.unpaid_overdue_less).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_between",
									"                                pm.test(\"nothing happen unpaid_overdue_between\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_between == record_obj.unpaid_overdue_between).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_over",
									"                                pm.test(\"nothing happen unpaid_overdue_over\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_over == record_obj.unpaid_overdue_over).to.be.true;",
									"                                });",
									"                                break;",
									"                            case \"overdue_less\":",
									"                                // unpaid_due",
									"                                pm.test(\"nothing happen unpaid_due\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_due == record_obj.unpaid_due).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_less",
									"                                pm.test(\"unpaid_overdue_less increase \" + total_amount, function () {",
									"                                    console.log(\"old: \" + record_obj.unpaid_overdue_less);",
									"                                    console.log(\"new: \" + list_report_customer[i].unpaid_overdue_less);",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_less.toFixed(2) == (total_amount + record_obj.unpaid_overdue_less).toFixed(2)).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_between",
									"                                pm.test(\"nothing happen unpaid_overdue_between\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_between == record_obj.unpaid_overdue_between).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_over",
									"                                pm.test(\"nothing happen unpaid_overdue_over\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_over == record_obj.unpaid_overdue_over).to.be.true;",
									"                                });",
									"                                break;",
									"                            case \"overdue_between\":",
									"                                // unpaid_due",
									"                                pm.test(\"nothing happen unpaid_due\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_due == record_obj.unpaid_due).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_less",
									"                                pm.test(\"nothing happen unpaid_overdue_less\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_less == record_obj.unpaid_overdue_less).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_between",
									"                                pm.test(\"unpaid_overdue_between increase \" + total_amount, function () {",
									"                                    console.log(\"old: \" + record_obj.unpaid_overdue_between);",
									"                                    console.log(\"new: \" + list_report_customer[i].unpaid_overdue_between);",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_between.toFixed(2) == (total_amount + record_obj.unpaid_overdue_between).toFixed(2)).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_over",
									"                                pm.test(\"nothing happen unpaid_overdue_over\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_over == record_obj.unpaid_overdue_over).to.be.true;",
									"                                });",
									"                                break;",
									"                            case \"overdue_over\":",
									"                                // unpaid_due",
									"                                pm.test(\"nothing happen unpaid_due\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_due == record_obj.unpaid_due).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_less",
									"                                pm.test(\"nothing happen unpaid_overdue_less\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_less == record_obj.unpaid_overdue_less).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_between",
									"                                pm.test(\"unpaid_overdue_between increase\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_between == record_obj.unpaid_overdue_between).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_over",
									"                                pm.test(\"unpaid_overdue_over increase \" + total_amount, function () {",
									"                                    console.log(\"old: \" + record_obj.unpaid_overdue_over);",
									"                                    console.log(\"new: \" + list_report_customer[i].unpaid_overdue_over);",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_over.toFixed(2) == (total_amount + record_obj.unpaid_overdue_over).toFixed(2)).to.be.true;",
									"                                });",
									"                                break;",
									"                            default:",
									"                                // unpaid_due",
									"                                pm.test(\"nothing happen unpaid_due\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_due == record_obj.unpaid_due).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_less",
									"                                pm.test(\"nothing happen unpaid_overdue_less\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_less == record_obj.unpaid_overdue_less).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_between",
									"                                pm.test(\"nothing happen unpaid_overdue_between\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_between == record_obj.unpaid_overdue_between).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_over",
									"                                pm.test(\"nothing happen unpaid_overdue_over\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_over == record_obj.unpaid_overdue_over).to.be.true;",
									"                                });",
									"                                break;",
									"                        }",
									"                        break;",
									"                    }",
									"                }",
									"",
									"                pm.test(\"Found new product\", function () {",
									"                    pm.expect(isFound).to.be.true;",
									"                });",
									"",
									"                // clear old data to update at next case",
									"                pm.environment.unset(\"C-old_list_report_customer\");",
									"",
									"                postman.setNextRequest(\"get_report_income_expense\"); // get_report_income_expense",
									"                break;",
									"            case 5:",
									"                old_list_report_customer = pm.environment.get(\"C-list_report_customer\");",
									"                pm.test(\"Nothing happen with total record: \" + list_report_customer.length, function () {",
									"                    console.log(\"old: \", old_list_report_customer);",
									"                    console.log(\"new: \", list_report_customer);",
									"                    pm.expect(list_report_customer.length == old_list_report_customer.length).to.be.true;",
									"                });",
									"",
									"                loop:",
									"                for(let j in old_list_report_customer){",
									"                    if(old_list_report_customer[j].contact_id == contact_id){",
									"                        for(let i in list_report_customer){",
									"                            if(list_report_customer[i].contact_id == contact_id){",
									"                                pm.test(\"Nothing happen with data\", function () {",
									"                                    pm.expect(JSON.stringify(list_report_customer[i]) == JSON.stringify(old_list_report_customer[j])).to.be.true;",
									"                                });",
									"                                isFound = true;",
									"                                hasRecord = true;",
									"                                break loop;",
									"                            }",
									"                        }",
									"                        break;",
									"                    }",
									"                }",
									"",
									"                if(!isFound){",
									"                    for(let i in list_report_customer){",
									"                        if(list_report_customer[i].contact_id == contact_id){",
									"                            hasRecord = true;",
									"                            break;",
									"                        }",
									"                    }",
									"                }",
									"",
									"                // console.log(\"hasRecord: \" + hasRecord);",
									"                // console.log(\"isFound: \" + isFound);",
									"                if(hasRecord){",
									"                    pm.test(\"Found data record\", function () {",
									"                        pm.expect(isFound).to.be.true;",
									"                    });",
									"                } else {",
									"                    pm.test(\"Checked data record\", function () {",
									"                        pm.expect(isFound).to.be.false;",
									"                    });",
									"                }",
									"",
									"                // nếu bị bug, có thay đổi, cần lưu lại data mới",
									"                pm.environment.set(\"C-list_report_customer\",list_report_customer);",
									"                pm.environment.unset(\"C-old_list_report_customer\");",
									"",
									"                postman.setNextRequest(\"get_report_income_expense\"); // get_report_income_expense",
									"                break;",
									"            default:",
									"                console.log(\"Missing flow, end test\");",
									"                postman.setNextRequest(null);",
									"                break;",
									"        }",
									"    } else {",
									"        page++;",
									"        pm.environment.set(\"C-page\",page);",
									"",
									"        console.log(\"view next page (\" + page + \") to get more product\");",
									"        postman.setNextRequest(\"get_report_account_receivable_customer\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get list product, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"account_key\": \"A3001\",\n    \"branch_id\": \"{{C-branch_id}}\",\n    \"business_id\": {{C-business_id}},\n    \"page\": {{C-page}},\n    \"page_size\": {{C-page_size}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/report/account-receivable-customer-unpaid",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"report",
								"account-receivable-customer-unpaid"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_report_income_expense",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"// lấy full tháng hiện tại",
									"let today = new Date();",
									"let start_current_month = new Date(today.getFullYear(), today.getMonth(), 1);",
									"let end_current_month = new Date(today.getFullYear(), today.getMonth() + 1, 1);",
									"",
									"// lấy full tháng trước",
									"let start_last_month = new Date(today.getFullYear(), today.getMonth() - 1, 1);",
									"let end_last_month = new Date(today.getFullYear(), today.getMonth(), 1);",
									"",
									"// lấy full ngày hiện tại",
									"// let firstDay = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0 ,0, 0);",
									"// let lastDay = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 23, 59 ,59, 0);",
									"",
									"// lấy n ngày đến hiện tại",
									"// let firstDayTimestamp = Math.floor(firstDay.getTime()/1000) - 2*24*60*60;",
									"// let start_day_ago = new Date(firstDayTimestamp*1000);",
									"",
									"let current_period_start = start_current_month.toISOString();",
									"let current_period_end = end_current_month.toISOString();",
									"let previous_period_start = start_last_month.toISOString();",
									"let previous_period_end = end_last_month.toISOString();",
									"",
									"/**",
									"/**",
									" * Khi tạo invoice chỉ check income thay đổi",
									" */",
									"",
									"let report_type = \"income\";",
									"let period = \"month\";",
									"// let full_check = pm.environment.get(\"C-full_check\");",
									"// if(!full_check){",
									"//     full_check = 1;",
									"//     pm.environment.set(\"C-full_check\",full_check);",
									"//     report_type = \"income\";",
									"// } else {",
									"//     report_type = \"expense\";",
									"// }",
									"// console.log(\"full_check: \" + full_check);",
									"pm.environment.set(\"C-period\",period);",
									"",
									"let payload = {",
									"    \"branch_id\": pm.environment.get(\"C-branch_id\"),",
									"    \"business_id\": parseInt(pm.environment.get(\"C-business_id\")),",
									"    \"report_type\": report_type,",
									"    \"period\": period",
									"    // \"current_period_start\": current_period_start,",
									"    // \"current_period_end\": current_period_end",
									"}",
									"",
									"console.log(\"payload: \",payload);",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));",
									"",
									"pm.environment.set(\"C-current_period_start\",current_period_start);",
									"pm.environment.set(\"C-current_period_end\",current_period_end);",
									"pm.environment.set(\"C-previous_period_start\",previous_period_start);",
									"pm.environment.set(\"C-previous_period_end\",previous_period_end);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ============================= sort by key",
									"function sortByKey(array, key, type) {",
									"    if(type == \"asc\"){",
									"        return array.sort(function(a, b) {",
									"            var x = a[key]; var y = b[key];",
									"            return ((x > y) ? -1 : ((x < y) ? 1 : 0));",
									"        });",
									"    } else {",
									"        return array.sort(function(a, b) {",
									"            var x = a[key]; var y = b[key];",
									"            return ((x < y) ? -1 : ((x > y) ? 1 : 0));",
									"        });",
									"    }",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let report_income = null;",
									"    try {",
									"        report_income = jsData.data;",
									"    } catch {",
									"        console.log(\"Can't get report cash_flow data\");",
									"    }",
									"",
									"    let old_report_income;",
									"    switch(testcase){",
									"        case 2:",
									"            pm.test(\"Got report_income\", function () {",
									"                pm.expect(report_income != null).to.be.true;",
									"            });",
									"            pm.environment.set(\"C-report_income\",report_income);",
									"            // console.log(\"report_income: \" + JSON.stringify(report_income));",
									"",
									"            postman.setNextRequest(\"report_profit_loss_period\"); // report_profit_loss_period",
									"            break;",
									"        case 8:",
									"            let ranTimeCase = pm.environment.get(\"C-ranTimeCase\");",
									"            // hiện tại report đang lấy thời gian 1 tháng hiện tại => chỉ handle với case ranTimeCase == 2;",
									"            if(ranTimeCase == 2){",
									"                let invoice_obj = pm.environment.get(\"C-invoice_obj\");",
									"                old_report_income = pm.environment.get(\"C-report_income\");",
									"                /**",
									"                 * Check rule:",
									"                 * - Xử lý data cho invoice_obj: sum amount của tất cả product cùng coa",
									"                 * - IF line_item trong invoice_obj có tồn tại trong old_report_income => thay đổi total_amount tương ứng",
									"                 * - ELSE:",
									"                 *    - IF line_item trong invoice_obj có tồn tại trong report_income => so sánh total_amount của product tương ứng với old_report_income (*)",
									"                 * Note:",
									"                 * (*) Cách so sánh: report_income[i].total_amount - invoice_obj.items[item].before_tax_amount < min(old_report_income.amount)",
									"                 */",
									"",
									"                console.log(\"invoice_obj: \", invoice_obj);",
									"                console.log(\"===================\");",
									"                console.log(\"old_report_income: \",old_report_income);",
									"                console.log(\"===================\");",
									"                console.log(\"report_income: \",report_income);",
									"",
									"                let list_item_objs = [];",
									"                for(let item in invoice_obj.items){",
									"                    if(list_item_objs.length == 0){",
									"                        list_item_objs[list_item_objs.length] = {",
									"                            \"account_id\":invoice_obj.items[item].account_id,",
									"                            \"name\":invoice_obj.items[item].name,",
									"                            \"before_tax_amount\":invoice_obj.items[item].before_tax_amount",
									"                        }",
									"                    } else {",
									"                        let is_found_item = false;",
									"                        for(let i in list_item_objs){",
									"                            if(list_item_objs[i].account_id == invoice_obj.items[item].account_id){",
									"                                is_found_item = true;",
									"                                list_item_objs[i].before_tax_amount += invoice_obj.items[item].before_tax_amount;",
									"                                break;",
									"                            }",
									"                        }",
									"",
									"                        if(!is_found_item){",
									"                            list_item_objs[list_item_objs.length] = {",
									"                                \"account_id\":invoice_obj.items[item].account_id,",
									"                                \"name\":invoice_obj.items[item].name,",
									"                                \"before_tax_amount\":invoice_obj.items[item].before_tax_amount",
									"                            }",
									"                        }",
									"                    }",
									"                }",
									"                console.log(\"===================\");",
									"                console.log(\"list_item_objs: \",list_item_objs);",
									"",
									"                let old_list_objs = [];",
									"                for(let i in old_report_income){",
									"                    for(let item in list_item_objs){",
									"                        if(old_report_income[i].coa_id == list_item_objs[item].account_id){",
									"                            console.log(\"Find product \" + list_item_objs[item].name + \" with coa \" + old_report_income[i].coa_name + \" in report!\");",
									"                            old_list_objs[old_list_objs.length] = old_report_income[i];",
									"",
									"                            old_list_objs[old_list_objs.length - 1 ].amount = list_item_objs[item].before_tax_amount;",
									"                            // ở đây ko break vì có thể có nhiều product;",
									"                        }",
									"                    }",
									"                }",
									"",
									"                let count = 0;",
									"                if(old_list_objs.length > 0){",
									"                    for(let i in old_list_objs){",
									"                        for(let j in report_income){",
									"                            if(old_list_objs[i].coa_id == report_income[j].coa_id){",
									"                                count++;",
									"                                pm.test(\"coa_name \" + old_list_objs[i].coa_name + \" increase \" + old_list_objs[i].amount, function () {",
									"                                    pm.expect(report_income[j].total_amount).to.eql(old_list_objs[i].total_amount + old_list_objs[i].amount);",
									"                                });",
									"                                break;",
									"                            }",
									"                        }",
									"                    }",
									"",
									"                    // check total",
									"                } else {",
									"                    let new_list_objs = [];",
									"                    for(let i in report_income){",
									"                        if(report_income[i].coa_id == list_item_objs[item].account_id){",
									"                            new_list_objs[new_list_objs.length] = report_income[i];",
									"",
									"                            new_list_objs[new_list_objs.length - 1 ].amount = list_item_objs[item].before_tax_amount;",
									"                            // ở đây ko break vì có thể có nhiều product;",
									"                        }",
									"                    }",
									"",
									"                    if(new_list_objs.length > 0){",
									"                        for(let i in new_list_objs){",
									"                            for(let j in report_income){",
									"                                if(new_list_objs[i].coa_id == report_income[j].coa_id){",
									"                                    pm.test(\"coa_name \" + new_list_objs[i].coa_name + \" increase \" + new_list_objs[i].amount, function () {",
									"                                        pm.expect(old_report_income[old_report_income.length - 1].total_amount > new_list_objs[i].total_amount + new_list_objs[i].amount).to.be.true;",
									"                                    });",
									"                                    break;",
									"                                }",
									"                            }",
									"                        }",
									"                    }",
									"                }",
									"            } else {",
									"                // pm.test(\"Nothing happen with report_income\", function () {",
									"                //     pm.expect(JSON.stringify(report_income) == JSON.stringify(old_report_income)).to.be.true;",
									"                // });",
									"            }",
									"         ",
									"            console.log(\"-------- End Testsuite 06 --------\");",
									"            postman.setNextRequest(\"report_profit_loss_period\");",
									"            break;",
									"        case 5:",
									"            old_report_income = pm.environment.get(\"C-report_income\");",
									"            pm.test(\"Nothing happen with report_income\", function () {",
									"                console.log(\"old_report_income: \",old_report_income);",
									"                console.log(\"===================\");",
									"                console.log(\"report_income: \",report_income);",
									"                pm.expect(JSON.stringify(report_income) == JSON.stringify(old_report_income)).to.be.true;",
									"            });",
									"            ",
									"            postman.setNextRequest(\"report_profit_loss_period\"); // report_profit_loss_period",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get report cash_flow, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-ledger/api/v1/report/summary-by-category",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-ledger",
								"api",
								"v1",
								"report",
								"summary-by-category"
							]
						}
					},
					"response": []
				},
				{
					"name": "report_profit_loss_period",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/**",
									" * \"report_type\": sum,income,expense",
									" * Note: report_type = sum => hiện tại bị null dates_data",
									" * - C1: call từng loại income, expense dể lấy dates_data",
									" * - C2: wait fixing from dev",
									" * => tạm thời xử lý case sum, 2 case còn lại sẽ handle sau",
									" */",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let full_check = pm.environment.get(\"C-full_check\");",
									"if(!full_check){",
									"    full_check = 1;",
									"    pm.environment.set(\"C-full_check\",full_check);",
									"    report_type = \"income\";",
									"} else {",
									"    report_type = \"expense\";",
									"}",
									"pm.environment.set(\"C-report_type\",report_type);",
									"console.log(\"full_check: \" + full_check);",
									"console.log(\"report_type: \" + report_type);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ============================= getFirstDayOfMonth",
									"function getFirstDayOfMonth(date_timestamp){",
									"  let setDate = new Date(date_timestamp*1000);",
									"  let getDate = new Date(setDate.getFullYear(), setDate.getMonth(), 1);",
									"  return getDate.toISOString();",
									"}",
									"",
									"// ============================= getLastDayOfMonth",
									"function getLastDayOfMonth(date_timestamp){",
									"  let setDate = new Date(date_timestamp*1000);",
									"  let firstDayOfNextMonth = new Date(setDate.getFullYear(), setDate.getMonth() + 1, 1);",
									"  let lastDayOfMonth = new Date(firstDayOfNextMonth - 1);",
									"  return lastDayOfMonth.toISOString();",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let full_check = pm.environment.get(\"C-full_check\");",
									"    let profit_period = null, loss_period = null;",
									"    try {",
									"        if(full_check == 1){",
									"            profit_period = jsData.data;",
									"        } else {",
									"            loss_period = jsData.data;",
									"        }",
									"        /**",
									"         * period: week, month, year",
									"         * sum_card_data",
									"         * dates_data",
									"         */",
									"    } catch {",
									"        console.log(\"Can't get report cash_flow data\");",
									"    }",
									"",
									"    let invoice_obj, invoice_date;",
									"    switch(testcase){",
									"        case 2:",
									"            if(full_check == 1){",
									"                pm.test(\"Got profit_period \", function () {",
									"                    pm.environment.set(\"C-profit_period\",profit_period);",
									"                    pm.expect(profit_period != null).to.be.true;",
									"                });",
									"                pm.environment.set(\"C-profit_period\",profit_period);",
									"                // console.log(\"profit_period: \", profit_period);",
									"",
									"                full_check++;",
									"                pm.environment.set(\"C-full_check\",full_check);",
									"                postman.setNextRequest(\"report_profit_loss_period\");",
									"            } else {",
									"                pm.test(\"Got loss_period \", function () {",
									"                    pm.environment.set(\"C-loss_period\",loss_period);",
									"                    pm.expect(loss_period != null).to.be.true;",
									"                });",
									"                pm.environment.set(\"C-loss_period\",loss_period);",
									"                // console.log(\"loss_period: \", loss_period);",
									"",
									"                pm.environment.unset(\"C-full_check\");",
									"                postman.setNextRequest(\"get_list_invoice\"); // get_list_invoice",
									"            }",
									"            break;",
									"        case 5:",
									"            invoice_obj = pm.environment.get(\"C-invoice_obj\");",
									"            invoice_date = invoice_obj.value_at.substring(0,10);",
									"            // Invoice sẽ tăng profit (income), Bill sẽ tăng loss (chi phí)",
									"            ",
									"            if(full_check == 1){",
									"                let old_profit_period = pm.environment.get(\"C-profit_period\");",
									"                // console.log(\"debug old_loss_period: \", old_profit_period);",
									"                // console.log(\"debug loss_period: \", profit_period);",
									"",
									"                pm.test(\"Nothing happen!!!\", function () {",
									"                    pm.expect(JSON.stringify(profit_period) == JSON.stringify(old_profit_period)).to.be.true;",
									"                });",
									"",
									"                full_check++;",
									"                pm.environment.set(\"C-full_check\",full_check);",
									"                postman.setNextRequest(\"report_profit_loss_period\");",
									"            } else {",
									"                let old_loss_period = pm.environment.get(\"C-loss_period\");",
									"                // console.log(\"debug old_loss_period: \", old_loss_period);",
									"                // console.log(\"debug loss_period: \", loss_period);",
									"                ",
									"                pm.test(\"Nothing happen!!!\", function () {",
									"                    pm.expect(JSON.stringify(loss_period) == JSON.stringify(old_loss_period)).to.be.true;",
									"                });",
									"",
									"                pm.environment.unset(\"C-full_check\");",
									"",
									"                testcase++;",
									"                pm.environment.set(\"C-testcase\",testcase);",
									"                postman.setNextRequest(\"calculate_invoice\"); // calculate_invoice",
									"            }",
									"            break;",
									"        case 8:",
									"            invoice_obj = pm.environment.get(\"C-invoice_obj\");",
									"            invoice_date = invoice_obj.value_at;",
									"            console.log(\"invoice_date: \" + invoice_date);",
									"",
									"            if(full_check == 1){",
									"                let old_profit_period = pm.environment.get(\"C-profit_period\");",
									"                // console.log(\"debug old_loss_period: \", old_profit_period);",
									"                // console.log(\"debug loss_period: \", profit_period);",
									"",
									"                // do thời gian lọc là tháng hiện tại => chỉ thay đổi khi value_at nằm trong tháng hiện tại",
									"                let today = new Date();",
									"                let today_tmp = Math.floor(today.getTime()/1000);",
									"                let firstDayOfThisMonth = getFirstDayOfMonth(today_tmp);",
									"                let lastDayOfThisMonth = getLastDayOfMonth(today_tmp);",
									"                if(invoice_date < firstDayOfThisMonth || invoice_date > lastDayOfThisMonth){",
									"                    // nothing happen",
									"                    pm.test(\"Nothing happen!!!\", function () {",
									"                        pm.expect(JSON.stringify(profit_period) == JSON.stringify(old_profit_period)).to.be.true;",
									"                    });",
									"                } else {",
									"                    invoice_date = invoice_date.substring(0,10);",
									"",
									"                    // có thay đổi => total_income increase",
									"                    pm.test(\"total_income increase \" + invoice_obj.exp_total_amount, function () {",
									"                        pm.expect(profit_period.sum_card_data.total_income == old_profit_period.sum_card_data.total_income + invoice_obj.exp_total_amount).to.be.true;",
									"                    });",
									"                    // thay đổi ngày tương ứng",
									"                    let old_date = null, act_date = null;",
									"                    for(let i in profit_period.dates_data){",
									"                        let day_i = profit_period.dates_data[i].date.substring(0,10);",
									"                        if(day_i == invoice_date){",
									"                            act_date = profit_period.dates_data[i];",
									"                            break;",
									"                        }",
									"                    }",
									"",
									"                    for(let i in old_profit_period.dates_data){",
									"                        let day_i = old_profit_period.dates_data[i].date.substring(0,10);",
									"                        if(day_i == invoice_date){",
									"                            old_date = old_profit_period.dates_data[i];",
									"                            break;",
									"                        }",
									"                    }",
									"",
									"                    if(old_date != null && act_date != null){",
									"                        console.log(\"act_date: \",act_date);",
									"                        console.log(\"old_date: \",old_date);",
									"                        pm.test(\"income at \" + invoice_date + \" increase \" + invoice_obj.exp_total_amount, function () {",
									"                            pm.expect(act_date.income == old_date.income + invoice_obj.exp_total_amount).to.be.true;",
									"                        });",
									"                    }",
									"                }",
									"",
									"                full_check++;",
									"                pm.environment.set(\"C-full_check\",full_check);",
									"                postman.setNextRequest(\"report_profit_loss_period\");",
									"            } else {",
									"                let old_loss_period = pm.environment.get(\"C-loss_period\");",
									"                // console.log(\"debug old_loss_period: \", old_loss_period);",
									"                // console.log(\"debug loss_period: \", loss_period);",
									"                ",
									"                pm.test(\"Nothing happen!!!\", function () {",
									"                    pm.expect(JSON.stringify(loss_period) == JSON.stringify(old_loss_period)).to.be.true;",
									"                });",
									"",
									"                pm.environment.unset(\"C-full_check\");",
									"",
									"                console.log(\"-------- End Testsuite 06 --------\");",
									"                postman.setNextRequest(null);",
									"            }",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get report cash_flow, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-location-timezone",
								"value": "UTC+07:00"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"branch_id\": \"{{C-branch_id}}\",\n    \"business_id\": {{C-business_id}},\n    \"period\": \"{{C-period}}\",\n    \"report_type\": \"{{C-report_type}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-ledger/api/v1/report/profit-loss-period",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-ledger",
								"api",
								"v1",
								"report",
								"profit-loss-period"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"let configs = {",
					"    \"is_use_email\":true,",
					"    \"limit_page\":5,",
					"    \"timeout\":12000, // miliseconds => timeout to call API",
					"    \"is_buyer_gen\":false,",
					"    \"test_payment_method\":\"va_galaxy\" // bank_transfer, viet_qr_pro_mb, va_galaxy",
					"}",
					"",
					"pm.environment.set(\"C-configs\",configs);",
					"// console.log(\"configs: \",configs);"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"// ====================================== parser cURL",
					"function parseCURL(request_api){",
					"    let curl = \"\";",
					"    switch(request_api.method){",
					"        case \"PUT\":",
					"            curl = \"curl --location --request PUT \";",
					"            break;",
					"        case \"PATCH\":",
					"            curl = \"curl --location --request PATCH \";",
					"            break;",
					"        case \"DELETE\":",
					"            curl = \"curl --location --request DELETE \";",
					"            break;",
					"        default:",
					"            curl = \"curl --location \";",
					"            break;",
					"    }",
					"    curl += \"'\" + request_api.url.protocol + \"://\"",
					"    // host",
					"    for(let i in request_api.url.host){",
					"        if(i >= request_api.url.host.length - 1){",
					"            curl += request_api.url.host[i] + \"/\";",
					"        } else {",
					"            curl += request_api.url.host[i] + \".\";",
					"        }",
					"    }",
					"    // path",
					"    for(let i in request_api.url.path){",
					"        if(i >= request_api.url.path.length - 1){",
					"            curl += request_api.url.path[i];",
					"        } else {",
					"            curl += request_api.url.path[i] + \"/\";",
					"        }",
					"    }",
					"    // query (if have)",
					"    if(\"query\" in request_api.url){",
					"        if(request_api.url.length > 0){",
					"            curl += \"? \";",
					"            for(let i in request_api.url.query){",
					"                if(i >= request_api.url.query.length - 1){",
					"                    curl += request_api.url.query[i].key + \"=\" + request_api.url.query[i].value + \"' \";",
					"                } else {",
					"                    curl += request_api.url.query[i].key + \"=\" + request_api.url.query[i].value + \"&\";",
					"                }",
					"            }",
					"        } else {",
					"            curl += \"' \";",
					"        }",
					"    } else {",
					"        curl += \"' \";",
					"    }",
					"    // header",
					"    for(let i in request_api.header){",
					"        if(i >= request_api.header.length - 1){",
					"            curl += \"--header '\" + request_api.header[i].key + \": \" + request_api.header[i].value + \"'\";",
					"        } else {",
					"            curl += \"--header '\" + request_api.header[i].key + \": \" + request_api.header[i].value + \"' \";",
					"        }",
					"    }",
					"    switch(request_api.method){",
					"        case \"POST\":",
					"            curl += \" --data '\" + request_api.body.raw + \"'\"",
					"            break;",
					"        case \"PUT\": case \"PATCH\":",
					"            curl += \" --data-raw '\" + request_api.body.raw + \"'\"",
					"            break;",
					"        default:",
					"            break;",
					"    }",
					"    console.log(curl);",
					"    return curl;",
					"}",
					"const request_api = pm.request.toJSON();",
					"parseCURL(request_api);"
				]
			}
		}
	]
}