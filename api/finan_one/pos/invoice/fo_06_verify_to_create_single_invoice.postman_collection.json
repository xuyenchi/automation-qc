{
	"info": {
		"_postman_id": "6f0c936d-12bd-4aa1-aa4a-1aba47c54ad2",
		"name": "fo_06_verify_to_create_single_invoice",
		"description": "### Testsuite: Verify to create new invoice include product\n\n###### Steps:\n\n1. Login\n    \n    1. Login owner account => get token\n        \n    2. Verify token => get business_id\n        \n    3. Get business detail => get branch_id\n        \n2. Get data\n    \n    1. contact / get list contact => get all list & random 1 on them (bao gồm tổng thu và tổng chi) \\[NEW\\] get phải thu, phải trả\n        \n    2. COA account / get list account => save internal_account_obj (credit_account, discount_account)\n        \n    3. account cash_n_bank / get list bank account => use to create invoice with payment method bank_transfer\n        \n    4. product / get list product => save all products (link with coa)\n        \n    5. tax / get list tax => get a tax (the same with coa-tax)\n        \n    6. posting / get list posting => get all with type (debit/credit)\n        \n    7. ~~home-report / get report account receivable - card unpaid => get list respective with every option(s)~~\n        \n    8. ~~home-report / get report account receivable - customer => get data with 5 options (due, less, between, over and total)~~\n        \n    9. ~~home-report / get report income expense => get data~~\n        \n    10. ~~home-report / get account_lifetime => get data~~\n        \n    11. \\[New\\] report-web / cash-flow / get cash flow detail => get data\n        \n    12. \\[New\\] report-web / cash-flow / get report account => get data\n        \n    13. \\[New\\] report-web / profit-loss / get chart profit loss detail => get data\n        \n    14. \\[New\\] report-web / profit-loss / get report top selling product => get data\n        \n    15. \\[New\\] report-web / profit-loss / get report profit loss detail => get data\n        \n    16. \\[New\\] report-web / account-receivable-payable / get chart banlance change accout => get data\n        \n    17. report-app / balance_n_forecast / get chart balance_change => get data\n        \n    18. report-app / balance_n_forecast / get forecast dashboard=> get data\n        \n    19. report-app / cash flow / get cash flow chart => get data\n        \n    20. report-app / cash flow / get cash flow table => get data\n        \n    21. report-app / invoice / get receivable invoice => get data\n        \n    22. report-app / invoice / get receivable customer => get data\n        \n    23. report-app / bill / get payable bill => get data\n        \n    24. report-app / bill / get payable supplier => get data\n        \n    25. report-app / sales / get profit chart => get data\n        \n    26. report-app / sales / get income report => get data\n        \n    27. report-app / sales / get product report => get data\n        \n    28. report-app / sales / get expense chart => get data\n        \n    29. report-app / sales / get expense report => get data\n        \n    30. invoice / get list invoice => get invoice matching with finan_status & status to edit\n        \n3. Check invoice\n    \n4. Create DRAFT bill\n    \n    1. Unhappy case: items = \\[\\]\n        \n    2. Unhappy case: missing customer\n        \n    3. Unhappy case: customer with email is wrong format\n        \n    4. Unhappy case: missing order_code (free rule)\n        \n    5. Unhappy case: order_code is existed\n        \n    6. Unhappy case: due_date < create_date\n        \n    7. Unhappy case: tax_type = \"\"\n        \n    8. Unhappy case: status = \"\"\n        \n    9. Unhappy case: payment_menthod = \"\"\n        \n    10. Happy case: successful\n        \n5. Check data\n    \n    1. invoice / list invoice => new invoice with correct data\n        \n    2. invoice / invoice detail => had invoice with correct data\n        \n    3. buyer invoice / buyer view invoice detail\n        \n    4. \\[New\\] contact / get list contact => check phải thu, phải trả nothing happen\n        \n    5. posting / list posting => nothing happen\n        \n    6. ~~home-report / get report account receivable - card unpaid => nothing happen~~\n        \n    7. ~~home-report / get report account receivable - customer => nothing happen~~\n        \n    8. ~~home-report / get report income expense => nothing happen~~\n        \n    9. ~~home-report / get account_lifetime => nothing happen~~\n        \n    10. \\[New\\] report-web / cash-flow / get cash flow detail => nothing happen\n        \n    11. \\[New\\] report-web / cash-flow / get report account => nothing happen\n        \n    12. \\[New\\] report-web / profit-loss / get chart profit loss detail => nothing happen\n        \n    13. \\[New\\] report-web / profit-loss / get report top selling product => nothing happen\n        \n    14. \\[New\\] report-web / profit-loss / get report profit loss detail => nothing happen\n        \n    15. \\[New\\] report-web / account-receivable-payable / get chart banlance change accout => nothing happen\n        \n6. Check invoice\n    \n7. Create ACTIVE bill\n    \n    1. Happy case: successful\n        \n8. Check data\n    \n    1. invoice / list invoice => new invoice with correct data\n        \n    2. invoice / invoice detail => had invoice with correct data\n        \n    3. buyer invoice / buyer view invoice detail => check data correctly\n        \n    4. \\[New\\] contact / get list contact => check phải thu, phải trả nothing happen\n        \n    5. account / account detail => update correctly (check all account relation with this invoice)\n        \n    6. posting / list posting => have new correctly record(s) & data correctly\n        \n    7. ~~home-report / get report account receivable - card unpaid => data updated~~\n        \n    8. ~~home-report / get report account receivable - customer => data updated~~\n        \n    9. ~~home-report / get report income expense => data updated~~\n        \n    10. ~~home-report / get account_lifetime => data updated~~\n        \n    11. \\[New\\] report-web / cash-flow / get cash flow detail => data updated\n        \n    12. \\[New\\] report-web / cash-flow / get report account => data updated\n        \n    13. \\[New\\] report-web / profit-loss / get chart profit loss detail => data updated\n        \n    14. \\[New\\] report-web / profit-loss / get report top selling product => data updated\n        \n    15. \\[New\\] report-web / profit-loss / get report profit loss detail => data updated\n        \n    16. \\[New\\] report-web / account-receivable-payable / get chart banlance change accout => data updated\n        \n    17. report-app / balance_n_forecast / get chart balance_change => check data\n        \n    18. report-app / balance_n_forecast / get forecast dashboard=> check data\n        \n    19. report-app / cash flow / get cash flow chart => check data\n        \n    20. report-app / cash flow / get cash flow table => check data\n        \n    21. report-app / invoice / get receivable invoice => check data\n        \n    22. report-app / invoice / get receivable customer => check data\n        \n    23. report-app / bill / get payable bill => check data\n        \n    24. report-app / bill / get payable supplier => check data\n        \n    25. report-app / sales / get profit chart => check data\n        \n    26. report-app / sales / get income report => check data\n        \n    27. report-app / sales / get product report => check data\n        \n    28. report-app / sales / get expense chart => check data\n        \n    29. report-app / sales / get expense report => check data\n        \n\n###### Note:\n\n- API report đổi account_type để check tạo invoice thì chỉ thay đổi account_receivable, không đổi account_payable, và ngược lại với bill",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "282640"
	},
	"item": [
		{
			"name": "authen",
			"item": [
				{
					"name": "login",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// ============================= random characters",
									"function randomChars(length) {",
									"    var result           = '';",
									"    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
									"    var charactersLength = characters.length;",
									"    for ( var i = 0; i < length; i++ ) {",
									"      result += characters.charAt(Math.floor(Math.random() * ",
									" charactersLength));",
									"   }",
									"   return result;",
									"}",
									"",
									"let testcase = 1;",
									"console.log(\"-------- Start Testsuite 06 --------\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let platform = [\"desktop-web\",\"mobile-web\",\"mobile-app\"];",
									"let configs = pm.environment.get(\"C-configs\");",
									"let payload;",
									"if(configs.is_use_email){",
									"    payload = {",
									"        \"app_version\": \"1.0.0\",",
									"        \"device_info\": {",
									"            \"id\": randomChars(7) + \"-\" + randomChars(4) + \"-\" + randomChars(4) + \"-\" + randomChars(4) + \"-\" + randomChars(12),",
									"            \"name\": \"IP name\",",
									"            \"os\": \"iphone\"",
									"        },",
									"        \"email\": pm.environment.get(\"SER-email\"), // pm.environment.get(\"SER-email\")",
									"        \"encrypted_password\": pm.environment.get(\"SER-password\"),",
									"        \"phone_number\": \"\",",
									"        \"platform_key\": platform[0]",
									"    }",
									"} else {",
									"    payload = {",
									"        \"app_version\": \"1.0.0\",",
									"        \"device_info\": {",
									"            \"id\": randomChars(7) + \"-\" + randomChars(4) + \"-\" + randomChars(4) + \"-\" + randomChars(4) + \"-\" + randomChars(12),",
									"            \"name\": \"IP name\",",
									"            \"os\": \"iphone\"",
									"        },",
									"        \"email\":\"\", // pm.environment.get(\"SER-email\")",
									"        \"encrypted_password\": pm.environment.get(\"SER-password\"),",
									"        \"phone_number\": pm.environment.get(\"SER-phone_number\"),",
									"        \"platform_key\": platform[0]",
									"    }",
									"}",
									"",
									"console.log(\"payload: \",payload);",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));",
									"pm.environment.set(\"C-testcase\",testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    pm.test(\"System code is 102000\", function () {",
									"        pm.expect(jsData.code).to.eql(102000);",
									"    });",
									"",
									"    if(jsData.code == 102000){",
									"        let userToken = null;",
									"        try {",
									"            userToken = jsData.data.access_token;",
									"            pm.environment.set(\"C-userToken\",userToken);",
									"        } catch {",
									"            console.log(\"Can't get userToken\");",
									"        }",
									"",
									"        pm.test(\"Got userToken\", function () {",
									"            pm.expect(userToken != null).to.be.true;",
									"        });",
									"",
									"        let userInfo = jsData.data.user_info;",
									"",
									"        // show log",
									"        console.log(\"userInfo:\",JSON.stringify(userInfo));",
									"        pm.environment.set(\"C-userInfo\",userInfo);",
									"",
									"        postman.setNextRequest(\"verify_token_to_get_business\");",
									"    } else {",
									"        console.log(\"Can't get Token, end test\",jsData);",
									"        postman.setNextRequest(null);",
									"    }",
									"} else {",
									"    console.log(\"Can't login new account, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "x-locale",
								"value": "<string>",
								"description": "locale",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-user/api/v1/auth/login",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-user",
								"api",
								"v1",
								"auth",
								"login"
							]
						},
						"description": "Login User"
					},
					"response": []
				},
				{
					"name": "verify_token_to_get_business",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// verify token to get business",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = JSON.parse(responseBody);",
									"if(pm.response.code == 200 && jsData.code == 102000){",
									"    const jsData = pm.response.json();",
									"    pm.environment.set(\"C-user_id\",jsData.data.user_id);",
									"",
									"    let business_id = jsData.data.headers[\"x-business-id\"];",
									"    console.log(\"business_id: \" + business_id);",
									"    pm.environment.set(\"C-business_id\",business_id);",
									"",
									"    postman.setNextRequest(\"get_current_business\");",
									"} else {",
									"    console.log(\"Can't check token to get business_id, end test\");",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"token\": \"{{C-userToken}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-user/api/v1/auth/verify-token",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-user",
								"api",
								"v1",
								"auth",
								"verify-token"
							]
						},
						"description": "Login User"
					},
					"response": []
				},
				{
					"name": "get_business_detail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    // console.log(\"Current business info: \", jsData.data);",
									"    let branch_id = null;",
									"    try {",
									"        branch_id = jsData.data.current_business.list_branch[0].id;",
									"        pm.environment.set(\"C-branch_id\",branch_id);",
									"    } catch {",
									"        console.log(\"Can't get branch id\");",
									"    }",
									"",
									"    pm.test(\"Got branch id \" + branch_id, function () {",
									"        pm.expect(branch_id != null).to.be.true;",
									"    });",
									"",
									"    let payment_method_list = [];",
									"    for(let i in jsData.data.list_payment_method){",
									"        if(jsData.data.list_payment_method[i].is_active){",
									"            payment_method_list[payment_method_list.length] = jsData.data.list_payment_method[i];",
									"        }",
									"    }",
									"",
									"    pm.test(\"Got payment_method_list \" + payment_method_list.length, function () {",
									"        pm.expect(payment_method_list.length > 0).to.be.true;",
									"    });",
									"    pm.environment.set(\"C-payment_method_list\",payment_method_list);",
									"    ",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    testcase++;",
									"    pm.environment.set(\"C-testcase\",testcase);",
									"    postman.setNextRequest(\"get_list_contact\");",
									"} else {",
									"    console.log(\"Can't get business detail, end test\", jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-business/api/v1/business/get-one/{{C-business_id}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-business",
								"api",
								"v1",
								"business",
								"get-one",
								"{{C-business_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_current_business",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ============================= random number between min and max",
									"function getRandomInt(min, max) {",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    // console.log(\"Current business info: \", jsData.data);",
									"    let configs = pm.environment.get(\"C-configs\");",
									"    let branch_id = null, filter_branch_id = null, list_branch = [];",
									"    try {",
									"        list_branch = jsData.data.current_business.list_branch;",
									"        branch_id = list_branch[getRandomInt(0,list_branch.length - 1)].id; // getRandomInt(0,list_branch.length - 1)",
									"        if(configs.is_the_same_branch){",
									"            filter_branch_id = branch_id;",
									"        } else {",
									"            while(1){",
									"                filter_branch_id = list_branch[getRandomInt(0,list_branch.length - 1)].id;",
									"",
									"                if(branch_id != filter_branch_id) break;",
									"            }",
									"            // for(let i in list_branch){",
									"            //     if(list_branch[i].id != branch_id){",
									"            //         filter_branch_id = list_branch[i].id;",
									"            //         break;",
									"            //     }",
									"            // }",
									"        }",
									"        console.log(\"branch_id: \" + branch_id);",
									"        console.log(\"filter_branch_id: \" + filter_branch_id);",
									"        pm.environment.set(\"C-branch_id\",branch_id);",
									"        pm.environment.set(\"C-filter_branch_id\",filter_branch_id);",
									"    } catch {",
									"        console.log(\"Can't get branch id\");",
									"    }",
									"",
									"    pm.test(\"Got all branch \" + list_branch.length, function () {",
									"        pm.expect(list_branch != null).to.be.true;",
									"    });",
									"    pm.environment.set(\"C-list_branch\",list_branch);",
									"",
									"    pm.test(\"Got branch id \" + branch_id, function () {",
									"        pm.expect(branch_id != null).to.be.true;",
									"    });",
									"",
									"    // debug",
									"    for(let i in list_branch){",
									"        if(list_branch[i].id == branch_id){",
									"            console.log(\"Will create Invoice at branch \" + list_branch[i].branch_name);",
									"            break;",
									"        }",
									"    }",
									"    for(let i in list_branch){",
									"        if (list_branch[i].id == filter_branch_id){",
									"            console.log(\"Will check Invoice, Batch, Inventory at branch \" + list_branch[i].branch_name);",
									"            break;",
									"        }",
									"    }",
									"",
									"    let payment_method_list = [];",
									"    for(let i in jsData.data.list_payment_method){",
									"        if(jsData.data.list_payment_method[i].is_active){",
									"            payment_method_list[payment_method_list.length] = jsData.data.list_payment_method[i];",
									"        }",
									"    }",
									"",
									"    pm.test(\"Got payment_method_list \" + payment_method_list.length, function () {",
									"        pm.expect(payment_method_list.length > 0).to.be.true;",
									"    });",
									"    pm.environment.set(\"C-payment_method_list\",payment_method_list);",
									"    ",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    testcase++;",
									"    pm.environment.set(\"C-testcase\",testcase);",
									"    postman.setNextRequest(\"get_list_contact\");",
									"} else {",
									"    console.log(\"Can't get business detail, end test\", jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-business/api/v1/business/get-current",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-business",
								"api",
								"v1",
								"business",
								"get-current"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "contact",
			"item": [
				{
					"name": "get_list_contact",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// const clRandom = pm.require('@chaule2906/cl-random');",
									"// ============================= random number between min and max",
									"function getRandomInt(min, max) {",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = pm.response.json();",
									"if(pm.response.code == 200 && jsData.code == 102000){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let total_pages = jsData.meta.total_pages;",
									"    let page = pm.environment.get(\"C-page\");",
									"",
									"    let list_contact, old_list_contact;",
									"    switch(testcase){",
									"        case 2:",
									"            list_contact = pm.environment.get(\"C-list_contact\");",
									"            if(!list_contact){",
									"                list_contact = [];",
									"            }",
									"            break;",
									"        case 5: case 8:",
									"            old_list_contact = pm.environment.get(\"C-old_list_contact\");",
									"            if(!old_list_contact){",
									"                old_list_contact = pm.environment.get(\"C-list_contact\");",
									"                pm.environment.unset(\"C-list_contact\");",
									"                pm.environment.set(\"C-old_list_contact\",old_list_contact);",
									"            }",
									"",
									"            list_contact = pm.environment.get(\"C-list_contact\");",
									"            if(!list_contact){",
									"                list_contact = [];",
									"            }",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow\");",
									"            break;",
									"    }",
									"",
									"    for(let item in jsData.data){",
									"        if(jsData.data[item].contact_name.includes(\"[API]\")){",
									"            list_contact[list_contact.length] = {",
									"                \"contact_id\":jsData.data[item].id,",
									"                \"name\":jsData.data[item].contact_name,",
									"                \"phone_number\":jsData.data[item].phone_number,",
									"                \"email\":jsData.data[item].email,",
									"                \"invoice_config\":jsData.data[item].invoice_config,",
									"                \"tax_code\":jsData.data[item].tax_code,",
									"                \"payment_methods\":jsData.data[item].payment_methods,",
									"                \"total_payable\":jsData.data[item].total_payable,",
									"                \"total_receivable\":jsData.data[item].total_receivable",
									"            }",
									"        }",
									"    }",
									"    pm.environment.set(\"C-list_contact\",list_contact);",
									"",
									"    if(page >= total_pages){",
									"        // must clear page & page_size",
									"        pm.environment.unset(\"C-page\");",
									"        pm.environment.unset(\"C-page_size\");",
									"",
									"        let contact_obj, old_contact_obj;",
									"        let invoice_obj = pm.environment.get(\"C-invoice_obj\"); ",
									"        switch(testcase){",
									"            case 2:",
									"                pm.test(\"Got all contact! \" + list_contact.length, function () {",
									"                    pm.expect(list_contact.length > 0).to.be.true;",
									"                });",
									"",
									"                // let contact_obj = list_contact[clRandom.getRandomInt(0,list_contact.length - 1)];",
									"                contact_obj = list_contact[getRandomInt(0,list_contact.length - 1)];",
									"                console.log(\"will create invoice for contact: \", contact_obj);",
									"                pm.environment.set(\"C-contact_obj\",contact_obj);",
									"                pm.environment.set(\"C-contact_id\",contact_obj.contact_id);",
									"",
									"                postman.setNextRequest(\"get_list_internal_account\"); // get_list_internal_account",
									"                break;",
									"            case 5:",
									"                old_contact_obj = pm.environment.get(\"C-contact_obj\");",
									"                // console.log(\"debug list_contact: \", list_contact);",
									"                for(let i in list_contact){",
									"                    if(list_contact[i].contact_id == old_contact_obj.contact_id){",
									"                        contact_obj = list_contact[i];",
									"                        break;",
									"                    }",
									"                }",
									"",
									"                pm.test(\"Nothing happen!\", function () {",
									"                    pm.expect(JSON.stringify(old_contact_obj) == JSON.stringify(contact_obj)).to.be.true;",
									"                });",
									"",
									"                pm.environment.unset(\"C-old_list_contact\");",
									"                postman.setNextRequest(\"get_list_posting\"); // get_report_cash_flow, get_list_posting",
									"                break;",
									"            case 8:",
									"                old_contact_obj = pm.environment.get(\"C-contact_obj\");",
									"                // console.log(\"debug list_contact: \", list_contact);",
									"                for(let i in list_contact){",
									"                    if(list_contact[i].contact_id == old_contact_obj.contact_id){",
									"                        contact_obj = list_contact[i];",
									"                        // console.log(\"debug: \", contact_obj);",
									"                        break;",
									"                    }",
									"                }",
									"",
									"                // tạo invoice sẽ tăng total_receivable cho customer",
									"                pm.test(\"total_receivable increase \" + invoice_obj.exp_total_amount, function () {",
									"                    console.log(\"old: \" + old_contact_obj.total_receivable);",
									"                    console.log(\"new: \" + contact_obj.total_receivable);",
									"                    pm.expect(contact_obj.total_receivable).to.eql(old_contact_obj.total_receivable + invoice_obj.exp_total_amount);",
									"                });",
									"",
									"                postman.setNextRequest(\"get_list_posting\"); // get_report_cash_flow, get_list_posting",
									"                break;",
									"            default:",
									"                break;",
									"        }",
									"    } else {",
									"        page++;",
									"        pm.environment.set(\"C-page\",page);",
									"",
									"        console.log(\"view next page (\" + page + \") to get more contact\");",
									"        postman.setNextRequest(\"get_list_contact\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get list contact, end test\");",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let configs = pm.environment.get(\"C-configs\");",
									"if(testcase == 5 || testcase == 8){",
									"    setTimeout(function(){}, configs.timeout);",
									"}",
									"",
									"let page = pm.environment.get(\"C-page\");",
									"",
									"if(!page){",
									"    page = 1;",
									"    pm.environment.set(\"C-page\",page);",
									"",
									"    let page_size = 20;",
									"    pm.environment.set(\"C-page_size\",page_size);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-business/api/v1/contact/get-list?business_id={{C-business_id}}&page={{C-page}}&page_size={{C-page_size}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-business",
								"api",
								"v1",
								"contact",
								"get-list"
							],
							"query": [
								{
									"key": "search",
									"value": "",
									"disabled": true
								},
								{
									"key": "business_id",
									"value": "{{C-business_id}}"
								},
								{
									"key": "page",
									"value": "{{C-page}}"
								},
								{
									"key": "page_size",
									"value": "{{C-page_size}}"
								},
								{
									"key": "sort",
									"value": "",
									"disabled": true
								},
								{
									"key": "option",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "account coa",
			"item": [
				{
					"name": "get_list_internal_account",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let coa = [];",
									"    try {",
									"        for(let i in jsData.data){",
									"            let sub_group_i = [];",
									"            for(let j in jsData.data[i].sub_group){",
									"                let accounts_j = [];",
									"                for(let k in jsData.data[i].sub_group[j].accounts){",
									"                    accounts_j[accounts_j.length] = {",
									"                        \"account_name\":jsData.data[i].sub_group[j].accounts[k].account_name,",
									"                        \"account_id\":jsData.data[i].sub_group[j].accounts[k].id,",
									"                        \"account_name_custom\":jsData.data[i].sub_group[j].accounts[k].account_name_custom,",
									"                        \"account_type\":jsData.data[i].sub_group[j].accounts[k].account_type,",
									"                        \"business_id\":jsData.data[i].sub_group[j].accounts[k].business_id,",
									"                        \"account_source\":jsData.data[i].sub_group[j].accounts[k].account_source,",
									"                        \"account_type\":jsData.data[i].sub_group[j].accounts[k].account_type,",
									"                        \"account_number\":jsData.data[i].sub_group[j].accounts[k].account_number,",
									"                        \"coa_type\":jsData.data[i].sub_group[j].accounts[k].coa_type,",
									"                        \"status\":jsData.data[i].sub_group[j].accounts[k].status,",
									"                        \"parent_account_id\":jsData.data[i].sub_group[j].accounts[k].parent_account_id,",
									"                        \"description\":jsData.data[i].sub_group[j].accounts[k].description,",
									"                        \"open_amount\":jsData.data[i].sub_group[j].accounts[k].open_amount,",
									"                        \"currency\":jsData.data[i].sub_group[j].accounts[k].currency",
									"                    }",
									"",
									"                    if(jsData.data[i].sub_group[j].accounts[k].account_key == \"A3001\"){ // coa đổi key account_receivable => A3001",
									"                        pm.environment.set(\"C-account_receivable\",jsData.data[i].sub_group[j].accounts[k]);",
									"                    } else if (jsData.data[i].sub_group[j].accounts[k].account_key == \"C1002\") { // coa đổi key Discount => C1002",
									"                        pm.environment.set(\"C-discount\",jsData.data[i].sub_group[j].accounts[k]);",
									"                    }",
									"                }",
									"",
									"                sub_group_i[sub_group_i.length] = {",
									"                    \"sub_group_name\":jsData.data[i].sub_group[j].name,",
									"                    \"sub_group_id\":jsData.data[i].sub_group[j].id,",
									"                    \"sub_group_description\":jsData.data[i].sub_group[j].description,",
									"                    \"accounts\":accounts_j",
									"                }",
									"            }",
									"",
									"            coa[coa.length] = {",
									"                \"group_name\":jsData.data[i].name,",
									"                \"value\":jsData.data[i].value,",
									"                \"index\":jsData.data[i].index,",
									"                \"sub_group\":sub_group_i",
									"            }",
									"        }",
									"    } catch {",
									"        console.log(\"can't get all account in coa\");",
									"    }",
									"",
									"    pm.test(\"Got coa of this user's business\", function () {",
									"        pm.expect(coa.length > 0).to.be.true;",
									"    });",
									"",
									"    if(coa.length > 0){",
									"        // console.log(\"coa: \", coa);",
									"        pm.environment.set(\"C-coa\",coa);",
									"        let list_internal_account = [];",
									"",
									"        /**",
									"         * lấy những account_id sẽ bị ảnh hưởng bởi invoice để lưu thành array => PENDING (wait confirm with PO, DEV BE-FE)",
									"         */ ",
									"",
									"        pm.environment.set(\"C-list_internal_account\",list_internal_account);",
									"        postman.setNextRequest(\"get_list_payment_account\"); // get_list_payment_account",
									"    } else {",
									"        console.log(\"Can't get list internal account, end test \");",
									"        postman.setNextRequest(null);",
									"    }",
									"} else {",
									"    console.log(\"Can't get list internal account, end test \", jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "authorization",
								"value": "Bearer {{C-userToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-ledger/api/v1/account/get-list-setting?business_id={{C-business_id}}&coa_type=",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-ledger",
								"api",
								"v1",
								"account",
								"get-list-setting"
							],
							"query": [
								{
									"key": "business_id",
									"value": "{{C-business_id}}"
								},
								{
									"key": "coa_type",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get_internal_account_detail",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let list_internal_account = pm.environment.get(\"C-list_internal_account\");",
									"let pos = pm.environment.get(\"C-pos\");",
									"if(!pos){",
									"    pos = 0;",
									"    pm.environment.set(\"C-pos\",pos);",
									"}",
									"",
									"let internal_account_id = list_internal_account[pos].account_id;",
									"console.log(\"view detail account: \" + account_id);",
									"",
									"pm.environment.set(\"C-internal_account_id\",internal_account_id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    const jsData = pm.response.json();",
									"    // let testcase = pm.environment.get(\"C-testcase\");",
									"    console.log(\"Debug: \" + JSON.stringify(jsData));",
									"",
									"    let list_internal_account = pm.environment.get(\"C-list_internal_account\");",
									"    let pos = pm.environment.get(\"C-pos\");",
									"",
									"    if(pos >= list_internal_account.length - 1){",
									"        pm.environment.unset(\"C-pos\");",
									"",
									"        postman.setNextRequest(\"get_list_tax\"); // get_list_tax",
									"    } else {",
									"        pos++;",
									"        pm.environment.set(\"C-pos\",pos);",
									"",
									"        postman.setNextRequest(\"get_internal_account_detail\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get internal account detail, end test\");",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{finone_url}}​​/fo-ledger/api/v1/account/get-one/{{C-internal_account_id}}",
							"host": [
								"{{finone_url}}​​"
							],
							"path": [
								"fo-ledger",
								"api",
								"v1",
								"account",
								"get-one",
								"{{C-internal_account_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "account cash_n_bank",
			"item": [
				{
					"name": "get_list_payment_account",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"",
									"    let list_bank_account = [];",
									"    for(let j in jsData.data[0].accounts){",
									"        // if(jsData.data[0].accounts[j].provider_id != \"\"){ // remove va bank account out list",
									"            list_bank_account[list_bank_account.length] = {",
									"                \"account_id\":jsData.data[0].accounts[j].id,",
									"                \"account_name\":jsData.data[0].accounts[j].account_name,",
									"                \"status\":jsData.data[0].accounts[j].status,",
									"                \"external_account_id\":jsData.data[0].accounts[j].external_account_id,",
									"                \"provider_id\":jsData.data[0].accounts[j].provider_id",
									"            }",
									"        // }",
									"    }",
									"",
									"    switch(testcase){",
									"        case 2:",
									"            pm.test(\"Got list bank account\", function () {",
									"                pm.expect(list_bank_account.length > 0).to.be.true;",
									"            });",
									"            console.log(\"list_bank_account: \", list_bank_account);",
									"            pm.environment.set(\"C-list_bank_account\",list_bank_account);",
									"",
									"            postman.setNextRequest(\"get_list_product\"); // get_list_product",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get list payment account, end test\", jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-ledger/api/v1/account/get-list-sub?business_id={{C-business_id}}&sub_account_key=A1",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-ledger",
								"api",
								"v1",
								"account",
								"get-list-sub"
							],
							"query": [
								{
									"key": "business_id",
									"value": "{{C-business_id}}"
								},
								{
									"key": "sub_account_key",
									"value": "A1"
								},
								{
									"key": "account_type",
									"value": "link_bank,va_bank,galaxy_pay",
									"description": "system, default, manual",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get_list_bank",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"",
									"    let list_bank_account = [];",
									"    for(let j in jsData.data.accounts){",
									"        if(jsData.data.accounts[j].provider_id != \"\"){ // remove va bank account out list",
									"            list_bank_account[list_bank_account.length] = {",
									"                \"account_id\":jsData.data.accounts[j].id,",
									"                \"account_name\":jsData.data.accounts[j].name,",
									"                \"status\":jsData.data.accounts[j].status,",
									"                \"external_account_id\":jsData.data.accounts[j].external_account_id,",
									"                \"provider_id\":jsData.data.accounts[j].provider_id",
									"            }",
									"        }",
									"    }",
									"",
									"    switch(testcase){",
									"        case 2:",
									"            pm.test(\"Got list bank account\", function () {",
									"                pm.expect(list_bank_account.length > 0).to.be.true;",
									"            });",
									"            console.log(\"list_bank_account: \", list_bank_account);",
									"            pm.environment.set(\"C-list_bank_account\",list_bank_account);",
									"",
									"            postman.setNextRequest(\"get_list_product\"); // get_list_product",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get list payment account, end test\", jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-banking/api/v1/bank-account/get-list?page=1&page_size=20&sort",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-banking",
								"api",
								"v1",
								"bank-account",
								"get-list"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "page_size",
									"value": "20"
								},
								{
									"key": "sort",
									"value": null
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "product",
			"item": [
				{
					"name": "get_list_product",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let page = pm.environment.get(\"C-page\");",
									"",
									"if(!page){",
									"    page = 1;",
									"    pm.environment.set(\"C-page\",page);",
									"",
									"    let page_size = 50;",
									"    pm.environment.set(\"C-page_size\",page_size);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = JSON.parse(responseBody);",
									"if(pm.response.code == 200 && jsData.code == 102000){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let total_pages = jsData.meta.total_pages;",
									"    let page = pm.environment.get(\"C-page\");",
									"",
									"    let list_product = pm.environment.get(\"C-list_product\");",
									"    if(!list_product){",
									"        list_product = [];",
									"    }",
									"",
									"    for(let item in jsData.data){",
									"        if(jsData.data[item].income_account_id != 0 && jsData.data[item].product_link_account != null && jsData.data[item].product_name.includes(\"[API] Product\")){",
									"            // if(jsData.data[item].income_taxes.length > 0){",
									"                list_product[list_product.length] = {",
									"                    \"product_id\":jsData.data[item].id,",
									"                    \"name\":jsData.data[item].product_name,",
									"                    \"price\":jsData.data[item].list_sku[0].sale_price,",
									"                    \"sku_code\":jsData.data[item].list_sku[0].sku_code,",
									"                    \"sku_id\":jsData.data[item].list_sku[0].id,",
									"                    \"income_account_id\":jsData.data[item].product_link_account.income_account_id, // must get in detail",
									"                    \"expense_account_id\":jsData.data[item].product_link_account.expense_account_id, // must get in detail",
									"                    \"income_taxes\":jsData.data[item].income_taxes,",
									"                    \"expense_taxes\":jsData.data[item].expense_taxes",
									"                }",
									"            // }",
									"        }",
									"    }",
									"    pm.environment.set(\"C-list_product\",list_product);",
									"",
									"    if(page >= total_pages){",
									"        // must clear page & page_size",
									"        pm.environment.unset(\"C-page\");",
									"        pm.environment.unset(\"C-page_size\");",
									"",
									"        pm.test(\"Got all valid product! \" + list_product.length, function () {",
									"            pm.expect(list_product.length > 0).to.be.true;",
									"        });",
									"",
									"        console.log(\"list_product: \", list_product);",
									"",
									"        postman.setNextRequest(\"get_list_tax\"); // get_list_tax",
									"    } else {",
									"        page++;",
									"        pm.environment.set(\"C-page\",page);",
									"",
									"        console.log(\"view next page (\" + page + \") to get more product\");",
									"        postman.setNextRequest(\"get_list_product\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get list product, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "authorization",
								"value": "Bearer {{C-userToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-business/api/v1/product/get-list?business_id={{C-business_id}}&page={{C-page}}&page_size={{C-page_size}}&search=&sort=&get_account_id=true",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-business",
								"api",
								"v1",
								"product",
								"get-list"
							],
							"query": [
								{
									"key": "business_id",
									"value": "{{C-business_id}}"
								},
								{
									"key": "page",
									"value": "{{C-page}}"
								},
								{
									"key": "page_size",
									"value": "{{C-page_size}}"
								},
								{
									"key": "search",
									"value": ""
								},
								{
									"key": "sort",
									"value": ""
								},
								{
									"key": "get_account_id",
									"value": "true"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "tax",
			"item": [
				{
					"name": "get_list_tax",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = JSON.parse(responseBody);",
									"if(pm.response.code == 200 && jsData.code == 102000){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let total_pages = jsData.meta.total_pages;",
									"    let page = pm.environment.get(\"C-page\");",
									"",
									"    let list_tax = pm.environment.get(\"C-list_tax\");",
									"    if(!list_tax){",
									"        list_tax = [];",
									"    }",
									"",
									"    for(let item in jsData.data){",
									"        if(jsData.data[item].description.includes(\"[API]\") && jsData.data[item].rate > 0 && jsData.data[item].rate < 100){",
									"            list_tax[list_tax.length] = {",
									"                \"tax_id\":jsData.data[item].id,",
									"                \"name\":jsData.data[item].name,",
									"                \"rate\":jsData.data[item].rate,",
									"                \"account_id\":jsData.data[item].account_id,",
									"                \"description\":jsData.data[item].description",
									"            }",
									"        }",
									"    }",
									"    pm.environment.set(\"C-list_tax\",list_tax);",
									"",
									"    if(page >= total_pages){",
									"        // must clear page & page_size",
									"        pm.environment.unset(\"C-page\");",
									"        pm.environment.unset(\"C-page_size\");",
									"",
									"        pm.test(\"Got all tax! \" + list_tax.length, function () {",
									"            pm.expect(list_tax.length > 0).to.be.true;",
									"        });",
									"        console.log(\"list_tax: \", list_tax);",
									"",
									"        postman.setNextRequest(\"get_list_posting\"); // get_list_posting",
									"    } else {",
									"        page++;",
									"        pm.environment.set(\"C-page\",page);",
									"",
									"        console.log(\"view next page (\" + page + \") to get more tax\");",
									"        postman.setNextRequest(\"get_list_tax\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get list tax, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let page = pm.environment.get(\"C-page\");",
									"",
									"if(!page){",
									"    page = 1;",
									"    pm.environment.set(\"C-page\",page);",
									"",
									"    let page_size = 20;",
									"    pm.environment.set(\"C-page_size\",page_size);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-business/api/v1/tax/get-list?business_id={{C-business_id}}&page={{C-page}}&page_size={{C-page_size}}&option=&status=",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-business",
								"api",
								"v1",
								"tax",
								"get-list"
							],
							"query": [
								{
									"key": "business_id",
									"value": "{{C-business_id}}"
								},
								{
									"key": "page",
									"value": "{{C-page}}"
								},
								{
									"key": "page_size",
									"value": "{{C-page_size}}"
								},
								{
									"key": "option",
									"value": ""
								},
								{
									"key": "status",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "invoice",
			"item": [
				{
					"name": "calculate_invoice",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/**",
									" * Note: should refactor for happy case:",
									" * - Calculate all discount, tax the same include_tax case",
									" * - Refactor discounts in items is array matching with data (after support more 1 discount)",
									" * - GIỮ LOGIC CŨ, FE VÀ BE TÍNH RIÊNG => cần show log để check lại UI",
									" * total_line_item_amount => thành tiền cho từng line item = quantity*item_amount",
									" */",
									"",
									"/**",
									" *  =============================  func randNotDupe(min, max, total)",
									" * total: số lượng random, ko dc nhỏ hơn max-min+1",
									" * return: array",
									" */",
									"function randNotDupe(min, max, total){",
									"  let arrNum = []; // new empty array",
									"  let n, p;",
									"  for (let i = 0; i < total; i++) {",
									"    do {",
									"      n = Math.floor(Math.random() * (max - min + 1)) + min;",
									"      p = arrNum.includes(n);",
									"      if(!p){",
									"        arrNum.push(n);",
									"      }",
									"    }",
									"    while(p);",
									"  }",
									"  return arrNum;",
									"}",
									"",
									"// ============================= random number between min and max",
									"function getRandomInt(min, max) {",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"",
									"// ============================= random characters",
									"function randomChars(length) {",
									"    var result           = '';",
									"    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
									"    var charactersLength = characters.length;",
									"    for ( var i = 0; i < length; i++ ) {",
									"      result += characters.charAt(Math.floor(Math.random() * charactersLength));",
									"   }",
									"   return result;",
									"}",
									"",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let today = new Date();",
									"let d30_stp = Math.floor(today.getTime()/1000) + 30*24*60*60;",
									"let d30 = new Date(d30_stp*1000);",
									"",
									"let current_timestamp = Math.floor(today.getTime()/1000);",
									"let past_date, past_due_date;",
									"",
									"let last_date_stp = Math.floor(today.getTime()/1000) - 24*60*60;",
									"let last_date = new Date(last_date_stp*1000);",
									"",
									"let next_date_stp = Math.floor(today.getTime()/1000) + 24*60*60;",
									"let next_date = new Date(next_date_stp*1000);",
									"",
									"let tax_types = [\"price_excluding_tax\", \"price_including_tax\", \"tax_not_applicable\"];",
									"let is_pre_tax = true;",
									"let tax_type;",
									"let list_tax = pm.environment.get(\"C-list_tax\");",
									"console.log(\"list_tax: \" + list_tax.length);",
									"",
									"let list_product = pm.environment.get(\"C-list_product\");",
									"console.log(\"list_product: \" + list_product.length);",
									"",
									"let discounts = [];",
									"let sub_total_amount = 0, sum_total_item_amount, created_order_at, due_at, description, email;",
									"",
									"let branch_id, contact_id;",
									"// let payment_method_list = [\"bank_transfer\",\"domestic_card\",\"credit_card\",\"ewallet_momo\",\"ewallet_zalopay\",\"ewallet_viettel\",\"ewallet_galaxypay\"];",
									"let payment_method_list = pm.environment.get(\"C-payment_method_list\");",
									"// khi chọn bank_transfer, phải gửi kèm payment_account_id (tài khoản sẽ nhận tiền khi buyer quét QR thanh toán)",
									"let entry_code, payment_config = [];",
									"let status;",
									"let items = [];",
									"let radProductPos = getRandomInt(0,list_product.length - 1);",
									"let default_item = [{",
									"    \"account_id\": list_product[radProductPos].income_account_id,",
									"    \"item_amount\": list_product[radProductPos].price,",
									"    // \"currency\": \"\",",
									"    \"name\": list_product[radProductPos].name,",
									"    \"note\": \"[API] note for product \" + list_product[radProductPos].name,",
									"    \"quantity\": 1,",
									"    \"product_id\": list_product[radProductPos].product_id,",
									"    \"sku_id\": list_product[radProductPos].sku_id,",
									"    \"taxes\": []",
									"}];",
									"",
									"let payment_account_id, total_net_amount;",
									"let list_bank_account = pm.environment.get(\"C-list_bank_account\");",
									"",
									"console.log(\"Happy case: \");",
									"contact_id = pm.environment.get(\"C-contact_id\");",
									"email = \"chau.lth@finan.me\";",
									"",
									"branch_id = pm.environment.get(\"C-branch_id\");",
									"entry_code = \"HD-\" + randomChars(6);",
									"description = \"[API] Note for invoice \" + entry_code;",
									"",
									"/**",
									" * Công thức tính: ",
									" */",
									"let ranTimeCase = getRandomInt(1,6);",
									"pm.environment.set(\"C-ranTimeCase\",ranTimeCase);",
									"console.log(\"ranTimeCase: \" + ranTimeCase);",
									"switch(ranTimeCase){",
									"    case 1:",
									"        // due_at + 61d < current < due_at + 91d => overdue 60-90",
									"        past_date = new Date((current_timestamp - 91*24*60*60)*1000);",
									"        past_due_date = new Date((current_timestamp - 61*24*60*60)*1000);",
									"        created_order_at = past_date.toISOString();",
									"        due_at = past_due_date.toISOString();",
									"        break;",
									"    case 2:",
									"        // created_order_at == current => ngay hiện tại, ko overdue",
									"        // include due 7d (ko tính hiện tại, tính +1 đến +7)",
									"        created_order_at = today.toISOString();",
									"        let in_7d = getRandomInt(1,7);",
									"",
									"        due_at = new Date((current_timestamp + in_7d*24*60*60)*1000);",
									"        due_at = due_at.toISOString();",
									"        break;",
									"    case 3:",
									"        // created_order_at > current => tương lai, ko overdue",
									"        // include due 7+d",
									"        created_order_at = next_date.toISOString();",
									"        let more_7d = getRandomInt(8,30);",
									"",
									"        due_at = new Date((current_timestamp + more_7d*24*60*60)*1000);",
									"        due_at = due_at.toISOString();",
									"        break;",
									"    case 4:",
									"        // due_at + 91d < current => overdue > 90d",
									"        past_date = new Date((current_timestamp - 121*24*60*60)*1000);",
									"        past_due_date = new Date((current_timestamp - 91*24*60*60)*1000);",
									"        created_order_at = past_date.toISOString();",
									"        due_at = past_due_date.toISOString();",
									"        break;",
									"    case 5:",
									"        // due_at + 31d < current < due_at + 61d => overdue 30-60",
									"        past_date = new Date((current_timestamp - 61*24*60*60)*1000);",
									"        past_due_date = new Date((current_timestamp - 31*24*60*60)*1000);",
									"        created_order_at = past_date.toISOString();",
									"        due_at = past_due_date.toISOString();",
									"        break;",
									"    default:",
									"        // due_at < current => overdue < 30d",
									"        let ranPastDay = getRandomInt(1,29);",
									"        past_date = new Date((current_timestamp - (ranPastDay+30)*24*60*60)*1000);",
									"        past_due_date = new Date((current_timestamp - ranPastDay*24*60*60)*1000);",
									"        created_order_at = past_date.toISOString();",
									"        due_at = past_due_date.toISOString();",
									"        break;",
									"}",
									"",
									"// product / item",
									"let randTotalProduct = getRandomInt(1,6);",
									"let ranListPDPos = randNotDupe(0,list_product.length - 1,randTotalProduct);",
									"",
									"// discount => tạm thời chỉ chọn 1 hoặc 0, dev chưa handle 2+ discount",
									"let randTotalDC = getRandomInt(0,1);",
									"",
									"let case_ = getRandomInt(1,5);",
									"pm.environment.set('C-tax_case',case_);",
									"switch(case_){ // ",
									"    case 1:",
									"        /**",
									"         * price_excluding_tax, is_pre_tax = true",
									"         * 1. Giảm giá trước (tỉ trọng product amount theo giá fix hoặc %)",
									"         * 2. Tính thuế trên giá đã giàm",
									"         */",
									"        console.log(\"Create invoice with price_excluding_tax & is_pre_tax\");",
									"        tax_type = tax_types[0];",
									"        is_pre_tax = true;",
									"        break;",
									"    case 2:",
									"        /**",
									"         * price_including_tax, is_pre_tax = true",
									"         * 1. Tách thuế ra khỏi product amount (sau khi đã *quantity)",
									"         * 2.a. Tính discount theo tỉ trọng product amount (nếu là số fix)",
									"         * 2.b. Tính discount theo product amount (nếu là %)",
									"         * 3. Giảm discount",
									"         * 4. Tính lại thuế trên giá đã giảm",
									"         */",
									"        console.log(\"Create invoice with price_including_tax & is_pre_tax\");",
									"        tax_type = tax_types[1];",
									"        is_pre_tax = true;",
									"        break;",
									"    case 3:",
									"        /**",
									"         * price_excluding_tax, is_pre_tax = false",
									"         * 1. Tính thuế trước",
									"         * 2. Giảm giá (tỉ trọng product amount theo giá fix hoặc %)",
									"         */",
									"        console.log(\"Create invoice with price_excluding_tax & !is_pre_tax\");",
									"        tax_type = tax_types[0];",
									"        is_pre_tax = false;",
									"        break;",
									"    case 4:",
									"        /**",
									"         * price_including_tax, is_pre_tax = false",
									"         * 1. Tách thuế ra khỏi product amount (sau khi đã *quantity)",
									"         * 2.a. Tính discount theo tỉ trọng product amount (nếu là số fix)",
									"         * 2.b. Tính discount theo product amount (nếu là %)",
									"         * 3. Giảm discount",
									"         * 4. Tính lại thuế trên giá đã giảm => ko có bước này",
									"         */ ",
									"        console.log(\"Create invoice with price_including_tax & !is_pre_tax\");",
									"        tax_type = tax_types[1];",
									"        is_pre_tax = false;",
									"        break;",
									"    case 5:",
									"    default:",
									"        /**",
									"         * tax_not_applicable",
									"         * 1. Giảm giá (tỉ trọng product amount theo giá fix hoặc %)",
									"         */",
									"        console.log(\"Create invoice with tax_not_applicable\");",
									"        tax_type = tax_types[2];",
									"        break;",
									"}",
									"",
									"for(let i in ranListPDPos){",
									"    let randTotalTax_i = 1//getRandomInt(0,1);",
									"    let randListPos_i = randNotDupe(0,list_tax.length - 1,randTotalTax_i);",
									"    let taxes_i = [];",
									"    let quantity_i = getRandomInt(1,3);",
									"",
									"    // amount của tax chỉ là tượng trưng, server sẽ tự tính lại dựa vào tax_id (cthuc hiện tại đang sai vì chưa discount)",
									"    for(let j in randListPos_i){",
									"        taxes_i[taxes_i.length] = {",
									"            \"account_id\": list_tax[randListPos_i[j]].account_id, // tạm thời chưa tạo ra account_id nên tạm ignore",
									"            \"rate\": list_tax[randListPos_i[j]].rate,",
									"            \"amount\": 0, // sẽ được tính lại",
									"            \"name\": list_tax[randListPos_i[j]].name, // field này không cần",
									"            \"tax_id\": list_tax[randListPos_i[j]].tax_id",
									"        };",
									"    }",
									"",
									"    items[items.length] = {",
									"        \"account_id\": list_product[ranListPDPos[i]].income_account_id,",
									"        \"item_amount\": list_product[ranListPDPos[i]].price,",
									"        // \"currency\": \"\",",
									"        \"name\": list_product[ranListPDPos[i]].name,",
									"        \"note\": \"[API] note for product \" + list_product[ranListPDPos[i]].name,",
									"        \"quantity\":quantity_i,",
									"        \"product_id\": list_product[ranListPDPos[i]].product_id,",
									"        \"sku_id\": list_product[ranListPDPos[i]].sku_id,",
									"        \"taxes\": taxes_i",
									"    }",
									"}",
									"",
									"for(let i in items){",
									"    sub_total_amount += items[i].item_amount*items[i].quantity;",
									"}",
									"",
									"// discounts",
									"for(let i = 0; i < randTotalDC; i++){",
									"    if(getRandomInt(0,1)){ // getRandomInt(0,1)",
									"        discounts[discounts.length] = {",
									"            \"note\": \"\",",
									"            \"is_rate\": true,",
									"            \"value\": getRandomInt(10,800) / 10",
									"        }",
									"    } else {",
									"        discounts[discounts.length] = {",
									"            \"note\": \"\",",
									"            \"is_rate\": false,",
									"            \"value\": Math.ceil(sub_total_amount / getRandomInt(2,9)) //getRandomInt(2,10)",
									"        }",
									"    }",
									"}",
									"",
									"let term_discount;",
									"let total_discount_amount = 0;",
									"console.log(\"sub_total_amount: \" + sub_total_amount);",
									"switch(case_){",
									"    case 1:",
									"        for(let i in discounts){",
									"            if(discounts[i].is_rate){",
									"                total_discount_amount += Math.round(discounts[i].value*sub_total_amount/100);",
									"            } else {",
									"                total_discount_amount += Math.round(discounts[i].value);",
									"            }",
									"        }",
									"",
									"        // chỉ support case discount_amount - tính round cuối",
									"        // sum_total_item_amount = 0;",
									"        // for(let i in items){",
									"        //     sum_total_item_amount += items[i].item_amount*items[i].quantity;",
									"        // }",
									"",
									"        term_discount = 0;",
									"        for(let i in items){",
									"            // total_item_amount, before_tax_amount",
									"            items[i].total_item_amount = items[i].item_amount*items[i].quantity;",
									"            items[i].before_tax_amount = items[i].item_amount*items[i].quantity;",
									"",
									"            // discount_amount - ko tính round cuối",
									"            let discount_i = 0;",
									"            for(let j in discounts){",
									"                if(discounts[j].is_rate){",
									"                    discount_i += Math.round(discounts[j].value*items[i].total_item_amount/100);",
									"                } else {",
									"                    discount_i += Math.round(discounts[j].value*items[i].total_item_amount/sub_total_amount);",
									"                }",
									"            }",
									"            items[i].discount_amount = discount_i;",
									"            // discount_amount - tính round cuối",
									"            // let item_total_discount_i = 0;",
									"            // if(i != items.length - 1){",
									"            //     for(let k in discounts){",
									"            //         if(discounts[k].is_rate){",
									"            //             // debug",
									"            //             item_total_discount_i += Math.round(items[i].before_tax_amount * discounts[k].value/100);",
									"            //             // item_total_discount_i += Math.round(items[i].total_item_amount * discounts[k].value/100);",
									"            //         } ",
									"            //         else {",
									"            //             // item_total_discount_i += Math.round(discounts[k].value * items[i].before_tax_amount/total_net_amount);",
									"            //             item_total_discount_i += Math.round(discounts[k].value * items[i].total_item_amount/sum_total_item_amount);",
									"            //         }",
									"            //     }",
									"            //     items[i].discount_amount = item_total_discount_i;",
									"            //     term_discount += item_total_discount_i;",
									"            // } else {",
									"            //     for(let k in discounts){",
									"            //         // ở đây không cần làm tròn nữa vì chỉ là hiệu của 2 số chẵn",
									"            //         if(discounts[k].is_rate){ // => case này không cần tính số tổng rồi trừ lại",
									"            //             // item_total_discount_i += Math.round(total_net_amount * discounts[k].value/100 - term_discount);",
									"            //             item_total_discount_i += Math.round(items[i].before_tax_amount * discounts[k].value/100);",
									"            //         } else {",
									"            //             item_total_discount_i += Math.round(discounts[k].value - term_discount);",
									"            //             // item_total_discount_i += Math.round(discounts[k].value*items[i].before_tax_amount/total_net_amount);",
									"            //         }",
									"            //     }",
									"            //     items[i].discount_amount = item_total_discount_i;",
									"            // }",
									"",
									"            // item_tax_amount",
									"            let total_tax_amount_i = 0;",
									"            for(let k in items[i].taxes){",
									"                for(let j in list_tax){",
									"                    if(items[i].taxes[k].tax_id == list_tax[j].tax_id){",
									"                        items[i].taxes[k].item_tax_amount = Math.round(list_tax[j].rate*(items[i].total_item_amount - items[i].discount_amount)/100);",
									"                        // // update lại amount",
									"                        // items[i].taxes[k].amount = items[i].taxes[k].item_tax_amount;",
									"                        total_tax_amount_i += Math.round(list_tax[j].rate*(items[i].total_item_amount - items[i].discount_amount)/100);",
									"                        break;",
									"                    }",
									"                }",
									"            }",
									"",
									"            // after_tax_amount",
									"            items[i].after_tax_amount = items[i].before_tax_amount + total_tax_amount_i;",
									"",
									"            // total_amount",
									"            items[i].total_amount = items[i].before_tax_amount - items[i].discount_amount + total_tax_amount_i;",
									"        }",
									"        break;",
									"    case 2:",
									"        // sub_total_amount cần được tính lại giá trước thuế",
									"        sub_total_amount = 0;",
									"        sum_total_item_amount = 0;",
									"",
									"        // tính lại thuế (thuế chưa giảm giá)",
									"        total_net_amount = 0;",
									"        for(let i in items){",
									"            // total_item_amount",
									"            items[i].total_item_amount = items[i].item_amount*items[i].quantity;",
									"            sum_total_item_amount += items[i].total_item_amount;",
									"",
									"            // tổng rate thuế theo item => hiện tại chỉ apply 1 thuế",
									"            let total_tax_rate_i = 0;",
									"            for(let j in items[i].taxes){",
									"                total_tax_rate_i += items[i].taxes[j].rate;",
									"            }",
									"            items[i].total_tax_rate_i = total_tax_rate_i;",
									"",
									"            // giá chưa thuế before_tax_amount",
									"            let item_net_amount_i = Math.round(items[i].total_item_amount / (1 + items[i].total_tax_rate_i/100));",
									"            items[i].before_tax_amount = item_net_amount_i;",
									"",
									"            total_net_amount += item_net_amount_i;",
									"        }",
									"",
									"        // chỉ support 1 discount trong 1 invoice",
									"        term_discount = 0;",
									"        for(let i in items){",
									"            // giảm giá",
									"            let item_total_discount_i = 0;",
									"            if(i != items.length - 1){",
									"                for(let k in discounts){",
									"                    if(discounts[k].is_rate){",
									"                        // debug",
									"                        item_total_discount_i += Math.round(items[i].before_tax_amount * discounts[k].value/100);",
									"                        // item_total_discount_i += Math.round(items[i].total_item_amount * discounts[k].value/100);",
									"                    } ",
									"                    else {",
									"                        // item_total_discount_i += Math.round(discounts[k].value * items[i].before_tax_amount/total_net_amount);",
									"                        item_total_discount_i += Math.round(discounts[k].value * items[i].total_item_amount/sum_total_item_amount);",
									"                    }",
									"                }",
									"                items[i].discount_amount = item_total_discount_i;",
									"                term_discount += item_total_discount_i;",
									"",
									"            } else {",
									"                for(let k in discounts){",
									"                    // ở đây không cần làm tròn nữa vì chỉ là hiệu của 2 số chẵn",
									"                    if(discounts[k].is_rate){ // => case này không cần tính số tổng rồi trừ lại",
									"                        // item_total_discount_i += Math.round(total_net_amount * discounts[k].value/100 - term_discount);",
									"                        item_total_discount_i += Math.round(items[i].before_tax_amount * discounts[k].value/100);",
									"                    } else {",
									"                        item_total_discount_i += Math.round(discounts[k].value - term_discount);",
									"                        // item_total_discount_i += Math.round(discounts[k].value*items[i].before_tax_amount/total_net_amount);",
									"                    }",
									"                }",
									"                items[i].discount_amount = item_total_discount_i;",
									"            }",
									"",
									"            // giá sau discount => after_tax_amount",
									"            let item_net_amount_after_discount_i = items[i].before_tax_amount - items[i].discount_amount;",
									"            items[i].after_tax_amount = item_net_amount_after_discount_i;",
									"            sub_total_amount += item_net_amount_after_discount_i;",
									"",
									"            // tính lại thuế (thuế đã giảm giá)",
									"            let total_tax_amount_i = 0;",
									"            for(let j in items[i].taxes){",
									"                items[i].taxes[j].amount = Math.round(items[i].after_tax_amount * items[i].taxes[j].rate/100);",
									"                total_tax_amount_i += items[i].taxes[j].amount;",
									"            }",
									"",
									"            // total_amount",
									"            items[i].total_amount = items[i].before_tax_amount - items[i].discount_amount + total_tax_amount_i;",
									"        }",
									"        break;",
									"    case 3:",
									"        // sub_total_amount cần được tính lại giá sau thuế => rule mới, vẫn giữ giá trước thuế",
									"        sub_total_amount = 0;",
									"",
									"        for(let i in items){",
									"            // total_item_amount, before_tax_amount",
									"            items[i].total_item_amount = items[i].item_amount*items[i].quantity;",
									"            items[i].before_tax_amount = items[i].item_amount*items[i].quantity;",
									"",
									"            // item_tax_amount",
									"            let total_tax_amount_i = 0;",
									"            for(let k in items[i].taxes){",
									"                for(let j in list_tax){",
									"                    if(items[i].taxes[k].tax_id == list_tax[j].tax_id){",
									"                        // hiện tại chỉ apply 1 tax, nếu hơn phải update lại",
									"                        items[i].taxes[k].item_tax_amount = Math.round(list_tax[j].rate * items[i].total_item_amount/100);",
									"                        total_tax_amount_i += Math.round(list_tax[j].rate * items[i].total_item_amount/100);",
									"                        break;",
									"                    }",
									"                }",
									"            }",
									"",
									"            // after_tax_amount",
									"            items[i].after_tax_amount = items[i].before_tax_amount + total_tax_amount_i;",
									"            // sub_total_amount += items[i].after_tax_amount;",
									"            sub_total_amount += items[i].before_tax_amount;",
									"        }",
									"        console.log(\"new sub_total_amount: \" + sub_total_amount);",
									"",
									"        for(let i in discounts){",
									"            if(discounts[i].is_rate){",
									"                total_discount_amount += Math.round(discounts[i].value * sub_total_amount/100);",
									"            } else {",
									"                total_discount_amount += Math.round(discounts[i].value);",
									"            }",
									"        }",
									"",
									"        for(let i in items){",
									"            // discount_amount",
									"            let discount_i = 0;",
									"            for(let j in discounts){",
									"                if(discounts[j].is_rate){",
									"                    discount_i += Math.round(discounts[j].value * items[i].after_tax_amount/100);",
									"                    // discount_i += Math.round(discounts[j].value * items[i].before_tax_amount/100);",
									"                } else {",
									"                    // discount_i += Math.round(discounts[j].value * items[i].after_tax_amount/sub_total_amount);",
									"                    discount_i += Math.round(discounts[j].value * items[i].before_tax_amount/sub_total_amount);",
									"                }",
									"            }",
									"            items[i].discount_amount = discount_i;",
									"",
									"            // total_amount",
									"            if(items[i].taxes.length > 0){",
									"                items[i].total_amount = items[i].before_tax_amount - items[i].discount_amount + items[i].taxes[0].item_tax_amount;",
									"            } else {",
									"                items[i].total_amount = items[i].before_tax_amount - items[i].discount_amount;",
									"            }",
									"        }",
									"        break;",
									"    case 4:",
									"        // sub_total_amount cần được tính lại giá trước thuế",
									"        sub_total_amount = 0;",
									"        sum_total_item_amount = 0;",
									"",
									"        // tính lại thuế (thuế chưa giảm giá)",
									"        total_net_amount = 0;",
									"        for(let i in items){",
									"            // total_item_amount",
									"            items[i].total_item_amount = items[i].item_amount*items[i].quantity;",
									"",
									"            sum_total_item_amount += items[i].total_item_amount;",
									"",
									"            // tổng rate thuế theo item => hiện tại chỉ apply 1 thuế",
									"            let total_tax_rate_i = 0;",
									"            for(let j in items[i].taxes){",
									"                total_tax_rate_i += items[i].taxes[j].rate;",
									"            }",
									"            items[i].total_tax_rate_i = total_tax_rate_i;",
									"",
									"            // giá chưa thuế before_tax_amount",
									"            let item_net_amount_i = Math.round(items[i].total_item_amount / (1 + items[i].total_tax_rate_i/100));",
									"            items[i].before_tax_amount = item_net_amount_i;",
									"",
									"            total_net_amount += item_net_amount_i;",
									"        }",
									"",
									"        // chỉ support 1 discount trong 1 invoice",
									"        term_discount = 0;",
									"        for(let i in items){",
									"            // giảm giá => tạm thời ko tính ra số cuối để trừ, nếu PO yêu cầu thì update lại",
									"            let item_total_discount_i = 0;",
									"            // if(i != items.length - 1){",
									"                for(let k in discounts){",
									"                    if(discounts[k].is_rate){",
									"                        // item_total_discount_i += Math.round(items[i].before_tax_amount * discounts[k].value/100);",
									"                        item_total_discount_i += Math.round(items[i].total_item_amount * discounts[k].value/100);",
									"                    } else {",
									"                        // item_total_discount_i += Math.round(discounts[k].value * items[i].before_tax_amount/total_net_amount);",
									"                        item_total_discount_i += Math.round(discounts[k].value * items[i].total_item_amount/sum_total_item_amount);",
									"                    }",
									"                }",
									"                items[i].discount_amount = item_total_discount_i;",
									"                term_discount += item_total_discount_i;",
									"",
									"            // } else {",
									"            //     for(let k in discounts){",
									"            //         // ở đây không cần làm tròn nữa vì chỉ là hiệu của 2 số chẵn",
									"            //         if(discounts[k].is_rate){",
									"            //             // item_total_discount_i += Math.round(total_net_amount * discounts[k].value/100 - term_discount);",
									"            //             item_total_discount_i += Math.round(total_net_amount * discounts[k].value/100 - term_discount);",
									"            //         } else {",
									"            //             item_total_discount_i += Math.round(discounts[k].value - term_discount);",
									"            //             // item_total_discount_i += Math.round(discounts[k].value*items[i].before_tax_amount/total_net_amount);",
									"            //         }",
									"            //     }",
									"            //     items[i].discount_amount = item_total_discount_i;",
									"            // }",
									"            // giá sau discount => after_tax_amount",
									"            let item_net_amount_after_discount_i = items[i].before_tax_amount - items[i].discount_amount;",
									"            items[i].after_tax_amount = item_net_amount_after_discount_i;",
									"            sub_total_amount += item_net_amount_after_discount_i;",
									"",
									"            // tính lại thuế (thuế đã giảm giá)",
									"            let total_tax_amount_i = 0;",
									"            for(let j in items[i].taxes){",
									"                items[i].taxes[j].amount = Math.round(items[i].before_tax_amount * items[i].taxes[j].rate/100);",
									"                total_tax_amount_i += items[i].taxes[j].amount;",
									"            }",
									"",
									"            // total_amount",
									"            items[i].total_amount = items[i].before_tax_amount - items[i].discount_amount + total_tax_amount_i;",
									"        }",
									"        break;",
									"    case 5:",
									"    default:",
									"        for(let i in discounts){",
									"            if(discounts[i].is_rate){",
									"                total_discount_amount += Math.round(discounts[i].value*sub_total_amount/100);",
									"            } else {",
									"                total_discount_amount += Math.round(discounts[i].value);",
									"            }",
									"        }",
									"",
									"        for(let i in items){",
									"            // total_item_amount, before_tax_amount",
									"            items[i].total_item_amount = items[i].item_amount*items[i].quantity;",
									"            items[i].before_tax_amount = items[i].item_amount*items[i].quantity;",
									"",
									"            // discount_amount",
									"            let discount_i = 0;",
									"            for(let j in discounts){",
									"                if(discounts[j].is_rate){",
									"                    discount_i += Math.round(discounts[j].value*items[i].total_item_amount/100);",
									"                } else {",
									"                    discount_i += Math.round(discounts[j].value*items[i].total_item_amount/sub_total_amount);",
									"                }",
									"            }",
									"            items[i].discount_amount = discount_i;",
									"",
									"            // item_tax_amount",
									"",
									"            // after_tax_amount",
									"            items[i].after_tax_amount = items[i].before_tax_amount;",
									"",
									"            // total_amount",
									"            items[i].total_amount = items[i].before_tax_amount - items[i].discount_amount;",
									"        }",
									"        break;",
									"}",
									"",
									"// payment_config",
									"for(let i in payment_method_list){",
									"    payment_config[payment_config.length] = payment_method_list[i].id;",
									"}",
									"",
									"// payment_account_id = list_bank_account[getRandomInt(0,list_bank_account.length - 1)].account_id;",
									"",
									"let payload = {",
									"    \"branch_id\": branch_id,",
									"    // \"cart_status\": status, // draft, saved => ko care",
									"    \"contact_id\": contact_id,",
									"    \"currency\": \"vnd\",",
									"    \"discounts\": discounts,",
									"    \"due_at\": due_at,",
									"    \"email\": email,",
									"    \"items\": items,",
									"    \"order_code\": entry_code,",
									"    \"payment_config\":payment_config,",
									"    \"tax_type\": tax_type,",
									"    \"is_pre_tax\":is_pre_tax, // true là trước thuế, false là sau thuế",
									"    \"value_at\": created_order_at",
									"}",
									"",
									"console.log(\"payload: \",payload);",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));",
									"pm.environment.set(\"C-invoice_obj\",payload);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    // console.log(\"debug: \", jsData.data);",
									"    let testcase = pm.environment.get(\"C-testcase\");    ",
									"",
									"    pm.test(\"System code is 102001\", function () {",
									"        pm.expect(jsData.code).to.eql(102001);",
									"    });",
									"",
									"    let invoice_obj = pm.environment.get(\"C-invoice_obj\");",
									"    let expected_items = [];",
									"    let exp_discount_amount = 0, exp_items_amount = 0, exp_total_amount = 0, exp_tax_amount = 0;",
									"    for(let i in invoice_obj.items){",
									"        let list_tax_i = [];",
									"        let item_tax_amount = 0; // do hiện tại chỉ có 1 tax",
									"        for(let j in invoice_obj.items[i].taxes){",
									"            if(\"item_tax_amount\" in invoice_obj.items[i].taxes[j]){",
									"                list_tax_i[list_tax_i.length] = {",
									"                    \"tax_id\": invoice_obj.items[i].taxes[j].tax_id,",
									"                    \"rate\": invoice_obj.items[i].taxes[j].rate,",
									"                    \"amount\": invoice_obj.items[i].taxes[j].item_tax_amount,",
									"                    \"account_id\": invoice_obj.items[i].taxes[j].account_id",
									"                }",
									"                item_tax_amount += invoice_obj.items[i].taxes[j].item_tax_amount;",
									"            } else {",
									"                list_tax_i[list_tax_i.length] = {",
									"                    \"tax_id\": invoice_obj.items[i].taxes[j].tax_id,",
									"                    \"rate\": invoice_obj.items[i].taxes[j].rate,",
									"                    \"amount\": invoice_obj.items[i].taxes[j].amount,",
									"                    \"account_id\": invoice_obj.items[i].taxes[j].account_id",
									"                }",
									"                item_tax_amount += invoice_obj.items[i].taxes[j].amount;",
									"            }         ",
									"        }",
									"        ",
									"        if(invoice_obj.tax_type == \"tax_not_applicable\") {",
									"            expected_items[expected_items.length] = {",
									"                // \"id\": \"00000000-0000-0000-0000-000000000000\",",
									"                \"product_id\": invoice_obj.items[i].product_id,",
									"                \"sku_id\": invoice_obj.items[i].sku_id,",
									"                \"item_amount\": invoice_obj.items[i].item_amount,",
									"                // \"discount_amount\": invoice_obj.items[i].discount_amount,",
									"                \"item_tax_amount\": item_tax_amount,",
									"                \"before_tax_amount\": invoice_obj.items[i].before_tax_amount,",
									"                // \"after_tax_amount\": invoice_obj.items[i].after_tax_amount,",
									"                // \"total_item_amount\": invoice_obj.items[i].total_item_amount,",
									"                \"total_line_item_amount\":invoice_obj.items[i].quantity*invoice_obj.items[i].item_amount,",
									"                \"currency\": \"\",",
									"                \"quantity\": invoice_obj.items[i].quantity,",
									"                \"account_id\": invoice_obj.items[i].account_id,",
									"                \"note\": invoice_obj.items[i].note,",
									"                \"taxes\": []",
									"            }",
									"        } else {",
									"            expected_items[expected_items.length] = {",
									"                // \"id\": \"00000000-0000-0000-0000-000000000000\",",
									"                \"product_id\": invoice_obj.items[i].product_id,",
									"                \"sku_id\": invoice_obj.items[i].sku_id,",
									"                \"item_amount\": invoice_obj.items[i].item_amount,",
									"                // \"discount_amount\": invoice_obj.items[i].discount_amount,",
									"                \"item_tax_amount\": item_tax_amount,",
									"                \"before_tax_amount\": invoice_obj.items[i].before_tax_amount,",
									"                // \"after_tax_amount\": invoice_obj.items[i].after_tax_amount,",
									"                // \"total_item_amount\": invoice_obj.items[i].total_item_amount,",
									"                \"total_line_item_amount\":invoice_obj.items[i].quantity*invoice_obj.items[i].item_amount,",
									"                \"currency\": \"\",",
									"                \"quantity\": invoice_obj.items[i].quantity,",
									"                \"account_id\": invoice_obj.items[i].account_id,",
									"                \"note\": invoice_obj.items[i].note,",
									"                \"taxes\": list_tax_i",
									"            }",
									"        }",
									"",
									"        exp_tax_amount += invoice_obj.items[i].after_tax_amount;",
									"        exp_discount_amount += invoice_obj.items[i].discount_amount;",
									"        exp_items_amount += invoice_obj.items[i].total_item_amount;",
									"        exp_total_amount += invoice_obj.items[i].total_amount;",
									"    }",
									"",
									"    // is_pre_tax",
									"    pm.test(\"is_pre_tax of invoice correctly! \", function () {",
									"        pm.expect(jsData.data.is_pre_tax == invoice_obj.is_pre_tax).to.be.true;",
									"    });",
									"",
									"    // tax_type",
									"    pm.test(\"tax_type of invoice correctly! \", function () {",
									"        pm.expect(jsData.data.tax_type == invoice_obj.tax_type).to.be.true;",
									"    });",
									"    ",
									"    // check discounts obj",
									"    pm.test(\"discounts of invoice correctly! \", function () {",
									"        // console.log(\"exp discounts: \",invoice_obj.discounts);",
									"        // console.log(\"act discounts: \",jsData.data.discounts);",
									"        pm.expect(JSON.stringify(jsData.data.discounts) == JSON.stringify(invoice_obj.discounts)).to.be.true;",
									"    });",
									"",
									"    let act_items = [];",
									"    // console.log(\"debug:\",jsData.data);",
									"    for(let i in jsData.data.items){",
									"        let list_tax_i = [];",
									"        let item_tax_amount = 0; // do hiện tại chỉ có 1 tax",
									"        for(let j in jsData.data.items[i].taxes){",
									"            list_tax_i[list_tax_i.length] = {",
									"                \"tax_id\": jsData.data.items[i].taxes[j].tax_id,",
									"                \"rate\": jsData.data.items[i].taxes[j].rate,",
									"                \"amount\": jsData.data.items[i].taxes[j].amount,",
									"                \"account_id\": jsData.data.items[i].taxes[j].account_id",
									"            }",
									"            item_tax_amount += jsData.data.items[i].taxes[j].amount;",
									"        }",
									"",
									"        act_items[act_items.length] = {",
									"            // \"id\": \"00000000-0000-0000-0000-000000000000\",",
									"            \"product_id\": jsData.data.items[i].product_id,",
									"            \"sku_id\": jsData.data.items[i].sku_id,",
									"            \"item_amount\": jsData.data.items[i].item_amount,",
									"            // \"discount_amount\": jsData.data.items[i].discount_amount,",
									"            \"item_tax_amount\": item_tax_amount,",
									"            \"before_tax_amount\": jsData.data.items[i].before_tax_amount,",
									"            // \"after_tax_amount\": jsData.data.items[i].after_tax_amount,",
									"            // \"total_item_amount\": jsData.data.items[i].total_item_amount,",
									"            \"total_line_item_amount\":jsData.data.items[i].total_line_item_amount,",
									"            \"currency\": \"\",",
									"            \"quantity\": jsData.data.items[i].quantity,",
									"            \"account_id\": jsData.data.items[i].account_id,",
									"            \"note\": jsData.data.items[i].note,",
									"            \"taxes\": list_tax_i",
									"        }",
									"    }",
									"    // check items obj",
									"    pm.test(\"items of invoice correctly! \", function () {",
									"        console.log(\"exp items: \" + JSON.stringify(expected_items));",
									"        console.log(\"act items: \" + JSON.stringify(act_items));",
									"        pm.expect(JSON.stringify(act_items) == JSON.stringify(expected_items)).to.be.true;",
									"    });",
									"",
									"    // check discount amount",
									"    pm.test(\"discount_amount of invoice correctly! \", function () {",
									"        console.log(\"exp discount_amount: \" + exp_discount_amount);",
									"        console.log(\"act discount_amount: \" + jsData.data.discount_amount);",
									"        pm.expect(jsData.data.discount_amount == exp_discount_amount).to.be.true;",
									"    });",
									"",
									"    // check total item amount",
									"    pm.test(\"total_amount of invoice correctly! \", function () {",
									"        console.log(\"exp total_amount: \" + exp_total_amount);",
									"        console.log(\"act total_amount: \" + jsData.data.total_amount);",
									"        pm.expect(jsData.data.total_amount == exp_total_amount).to.be.true;",
									"    });",
									"",
									"    // check sub_total_amount",
									"    pm.test(\"sub_total_amount of invoice correctly! \", function () {",
									"        console.log(\"exp sub_total_amount: \" + exp_items_amount);",
									"        console.log(\"act sub_total_amount: \" + jsData.data.sub_total_amount);",
									"        pm.expect(jsData.data.sub_total_amount == exp_items_amount).to.be.true;",
									"    });",
									"    invoice_obj.sub_total_amount = exp_items_amount;",
									"",
									"    pm.environment.unset(\"C-tax_case\");",
									"    testcase++;",
									"    pm.environment.set(\"C-testcase\",testcase);",
									"    pm.environment.set(\"C-invoice_obj\",invoice_obj);",
									"    postman.setNextRequest(\"create_invoice\"); // create_invoice",
									"} else {",
									"    console.log(\"Can't call calculate invoice, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/invoice/calculate",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"invoice",
								"calculate"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_list_invoice",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ============================= random number between min and max",
									"function getRandomInt(min, max) {",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"",
									"/**",
									" * NOTE:",
									" * testcase == 2: get total only",
									" * testcase == 4: get all record & check (after apply sort, can get only 1st page)",
									" */",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = JSON.parse(responseBody);",
									"if(pm.response.code == 200 && jsData.code == 102000){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let total_pages = jsData.meta.total_pages;",
									"    let total_invoice = jsData.meta.total_rows;",
									"    let page = pm.environment.get(\"C-page\");",
									"",
									"    let list_invoice, old_total_invoice;",
									"    switch(testcase){",
									"        case 2:",
									"            pm.environment.unset(\"C-page\");",
									"            pm.environment.unset(\"C-page_size\");",
									"            pm.test(\"Got total invoice! \" + total_invoice, function () {",
									"                pm.expect(total_invoice > 0).to.be.true;",
									"            });",
									"            pm.environment.set(\"C-total_invoice\",total_invoice);",
									"",
									"            for(let i in jsData.data){",
									"                if(jsData.data[i].cart_status == \"active\"){",
									"                    pm.environment.set(\"C-existed_order_code\",jsData.data[i].order_code);",
									"                    break;",
									"                }",
									"            }",
									" ",
									"            // testcase++;",
									"            testcase = 6;",
									"            pm.environment.set(\"C-testcase\",testcase);",
									"            postman.setNextRequest(\"calculate_invoice\"); // calculate_invoice",
									"            break;",
									"        case 5: case 8:",
									"            list_invoice = pm.environment.get(\"C-list_invoice\");",
									"            if(!list_invoice){",
									"                list_invoice = [];",
									"            }",
									"",
									"            for(let item in jsData.data){",
									"                list_invoice[list_invoice.length] = {",
									"                    \"invoice_id\":jsData.data[item].id,",
									"                    \"created_at\":jsData.data[item].created_at,",
									"                    \"order_code\":jsData.data[item].order_code,",
									"                    \"system_code\":jsData.data[item].system_code,",
									"                    \"cart_status\":jsData.data[item].cart_status,",
									"                    \"payment_status\":jsData.data[item].payment_status,",
									"                    \"items_amount\":jsData.data[item].items_amount,",
									"                    \"sub_total_amount\":jsData.data[item].sub_total_amount,",
									"                    \"paid_amount\":jsData.data[item].paid_amount,",
									"                    \"currency\":jsData.data[item].currency,",
									"                    \"contact_id\":jsData.data[item].contact_id,",
									"                    \"entry_type\":jsData.data[item].entry_type,",
									"                    \"note\":jsData.data[item].note,",
									"                    \"value_at\":jsData.data[item].value_at,",
									"                    \"due_at\":jsData.data[item].due_at,",
									"                    \"send_at\":jsData.data[item].send_at,",
									"                    \"account_id\":jsData.data[item].account_id,",
									"                    \"tax_type\":jsData.data[item].tax_type,",
									"                    \"final_status\":jsData.data[item].final_status,",
									"                    \"sales_rep_info\":jsData.data[item].sales_rep_info",
									"                }",
									"                // list_invoice[list_invoice.length] = jsData.data[item];",
									"            }",
									"            pm.environment.set(\"C-list_invoice\",list_invoice);",
									"",
									"            let configs = pm.environment.get(\"C-configs\");",
									"            if(page >= total_pages || page >= configs.limit_page){",
									"                // must clear page & page_size",
									"                pm.environment.unset(\"C-page\");",
									"                pm.environment.unset(\"C-page_size\");",
									"",
									"                let invoice_obj = pm.environment.get(\"C-invoice_obj\");",
									"                // console.log(\"invoice_obj: \", invoice_obj);",
									"                old_total_invoice = pm.environment.get(\"C-total_invoice\");",
									"",
									"                pm.test(\"Total invoice increase 1\", function () {",
									"                    pm.expect(total_invoice == old_total_invoice + 1).to.be.true;",
									"                });",
									"",
									"                let isFound = false;",
									"                for(let i in list_invoice){",
									"                    if(list_invoice[i].invoice_id == invoice_obj.invoice_id){",
									"                        isFound = true;",
									"                        console.log(\"debug: \" + JSON.stringify(list_invoice[i]));",
									"",
									"                        pm.test(\"order_code of invoice correctly! \" + invoice_obj.order_code, function () {",
									"                            pm.expect(invoice_obj.order_code == list_invoice[i].order_code).to.be.true;",
									"                        });",
									"",
									"                        pm.test(\"sub_total_amount of invoice correctly! \" + invoice_obj.sub_total_amount, function () {",
									"                            pm.expect(invoice_obj.sub_total_amount == list_invoice[i].sub_total_amount).to.be.true;",
									"                        });",
									"",
									"                        pm.test(\"contact_id of invoice correctly! \" + invoice_obj.contact_id, function () {",
									"                            pm.expect(invoice_obj.contact_id == list_invoice[i].contact_id).to.be.true;",
									"                        });",
									"",
									"                        // pm.test(\"email of invoice correctly! \" + invoice_obj.email, function () {",
									"                        //     pm.expect(invoice_obj.email == list_invoice[i].email).to.be.true;",
									"                        // });",
									"",
									"                        pm.test(\"value_at of invoice correctly! \" + invoice_obj.value_at, function () {",
									"                            console.log(\"exp value_at: \" + invoice_obj.value_at);",
									"                            console.log(\"act value_at: \" + list_invoice[i].value_at);",
									"                            pm.expect(invoice_obj.value_at.substring(0,17) == list_invoice[i].value_at.substring(0,17)).to.be.true;",
									"                        });",
									"",
									"                        pm.test(\"due_at of invoice correctly! \" + invoice_obj.due_at, function () {",
									"                            console.log(\"exp due_at: \" + invoice_obj.due_at);",
									"                            console.log(\"act due_at: \" + list_invoice[i].due_at);",
									"                            pm.expect(invoice_obj.due_at.substring(0,17) == list_invoice[i].due_at.substring(0,17)).to.be.true;",
									"                        });",
									"",
									"                        pm.test(\"note of invoice correctly! \" + invoice_obj.note, function () {",
									"                            // console.log(\"invoice at i: \",list_invoice[i]);",
									"                            pm.expect(invoice_obj.note == list_invoice[i].note).to.be.true;",
									"                        });",
									"",
									"                        pm.test(\"tax_type of invoice correctly! \" + invoice_obj.tax_type, function () {",
									"                            pm.expect(invoice_obj.tax_type == list_invoice[i].tax_type).to.be.true;",
									"                        });",
									"",
									"                        // pm.test(\"taxes of invoice correctly! \" + invoice_obj.taxes, function () {",
									"                        //     pm.expect(JSON.stringify(invoice_obj.taxes) == JSON.stringify(list_invoice[i].taxes)).to.be.true;",
									"                        // });",
									"",
									"                        // pm.test(\"payment_config of invoice correctly! \" + invoice_obj.payment_config, function () {",
									"                        //     pm.expect(JSON.stringify(invoice_obj.payment_config) == JSON.stringify(list_invoice[i].payment_config)).to.be.true;",
									"                        // });",
									"",
									"                        pm.test(\"status of invoice correctly! \" + invoice_obj.cart_status, function () {",
									"                            pm.expect(invoice_obj.cart_status == list_invoice[i].cart_status).to.be.true;",
									"                        });",
									"",
									"                        // final_status",
									"                        let exp_final_status;",
									"                        if(testcase == 8){",
									"                            let ranTimeCase = pm.environment.get(\"C-ranTimeCase\");",
									"                            if(ranTimeCase == 2 || ranTimeCase == 3){",
									"                                exp_final_status = \"unsent\";",
									"                            } else {",
									"                                exp_final_status = \"overdue\"; // khả năng sẽ sai do đã thay đổi ranTimeCase => update sau",
									"                            }",
									"                        } else {",
									"                            exp_final_status = invoice_obj.cart_status;",
									"                        }",
									"                        pm.test(\"final_status of invoice is \" + exp_final_status, function () {",
									"                            console.log(\"act final_status:  \" + list_invoice[i].final_status);",
									"                            console.log(\"exp final_status:  \" + exp_final_status);",
									"                            pm.expect(exp_final_status == list_invoice[i].final_status).to.be.true;",
									"                        });",
									"                        invoice_obj.exp_final_status = exp_final_status;",
									"",
									"                        // sales_rep_info.id => user_id, sales_rep_info.full_name",
									"                        let userInfo = pm.environment.get(\"C-userInfo\");",
									"                        console.log(\"userInfo: \", userInfo);",
									"                        // pm.test(\"sales_rep_info.id of invoice is \" + userInfo.id, function () {",
									"                        //     console.log(\"act final_status:  \" + list_invoice[i].sales_rep_info.id);",
									"                        //     pm.expect(list_invoice[i].sales_rep_info.id == userInfo.id).to.be.true;",
									"                        // });",
									"",
									"                        // pm.test(\"sales_rep_info.full_name of invoice is \" + userInfo.first_name, function () {",
									"                        //     console.log(\"act final_status:  \" + list_invoice[i].sales_rep_info.full_name);",
									"                        //     pm.expect(list_invoice[i].sales_rep_info.full_name == userInfo.first_name).to.be.true;",
									"                        // });",
									"",
									"                        // pm.test(\"discounts of invoice correctly! \" + invoice_obj.discounts, function () {",
									"                        //     pm.expect(JSON.stringify(invoice_obj.discounts) == JSON.stringify(list_invoice[i].discounts)).to.be.true;",
									"                        // });",
									"                        break;",
									"                    }",
									"                }",
									"",
									"                pm.test(\"Found invoice\", function () {",
									"                    pm.expect(isFound).to.be.true;",
									"                });",
									"",
									"                // update total records",
									"                pm.environment.set(\"C-total_invoice\",total_invoice);",
									"                pm.environment.set(\"C-invoice_obj\",invoice_obj);",
									"                pm.environment.unset(\"C-list_invoice\");",
									"",
									"                postman.setNextRequest(\"get_invoice_detail\"); // get_invoice_detail",
									"            } else {",
									"                page++;",
									"                pm.environment.set(\"C-page\",page);",
									"",
									"                console.log(\"view next page (\" + page + \") to get more product\");",
									"                postman.setNextRequest(\"get_list_invoice\");",
									"            }",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow\");",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get list invoice, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let page = pm.environment.get(\"C-page\");",
									"",
									"if(!page){",
									"    page = 1;",
									"    pm.environment.set(\"C-page\",page);",
									"",
									"    let page_size = 20;",
									"    pm.environment.set(\"C-page_size\",page_size);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/invoice/get-list?business_id={{C-business_id}}&page={{C-page}}&page_size={{C-page_size}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"invoice",
								"get-list"
							],
							"query": [
								{
									"key": "business_id",
									"value": "{{C-business_id}}"
								},
								{
									"key": "page",
									"value": "{{C-page}}"
								},
								{
									"key": "page_size",
									"value": "{{C-page_size}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get_invoice_detail",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let invoice_obj = pm.environment.get(\"C-invoice_obj\");",
									"let invoice_id = invoice_obj.invoice_id;",
									"console.log(\"view detail invoice: \" + invoice_id);",
									"",
									"pm.environment.set(\"C-invoice_id\",invoice_id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200 && jsData.code == 102000){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    console.log(\"Debug: \" + JSON.stringify(jsData));",
									"",
									"    let invoice_obj = pm.environment.get(\"C-invoice_obj\");",
									"    for(let i in invoice_obj.items){",
									"        for(let j in jsData.data.items){",
									"            if(invoice_obj.items[i].product_id == jsData.data.items[j].product_id && invoice_obj.items[i].item_amount == jsData.data.items[j].item_amount && invoice_obj.items[i].quantity == jsData.data.items[j].quantity){",
									"                invoice_obj.items[i].item_id = jsData.data.items[j].id;",
									"                break;",
									"            }",
									"        }",
									"    }",
									"    pm.environment.set(\"C-invoice_obj\",invoice_obj);",
									"    ",
									"    pm.test(\"order_code of invoice correctly! \" + invoice_obj.order_code, function () {",
									"        pm.expect(invoice_obj.order_code == jsData.data.order_code).to.be.true;",
									"    });",
									"",
									"    pm.test(\"sub_total_amount of invoice correctly! \" + invoice_obj.sub_total_amount, function () {",
									"        pm.expect(invoice_obj.sub_total_amount == jsData.data.sub_total_amount).to.be.true;",
									"    });",
									"",
									"    pm.test(\"contact_id of invoice correctly! \" + invoice_obj.contact_id, function () {",
									"        pm.expect(invoice_obj.contact_id == jsData.data.contact_id).to.be.true;",
									"    });",
									"",
									"    pm.test(\"email of invoice correctly! \" + invoice_obj.email, function () {",
									"        pm.expect(invoice_obj.email == jsData.data.email).to.be.true;",
									"    });",
									"",
									"    pm.test(\"created_order_at of invoice correctly! \" + invoice_obj.value_at, function () {",
									"        pm.expect(invoice_obj.value_at.substring(0,19) == jsData.data.value_at.substring(0,19)).to.be.true;",
									"    });",
									"",
									"    pm.test(\"due_at of invoice correctly! \" + invoice_obj.due_at, function () {",
									"        pm.expect(invoice_obj.due_at.substring(0,19) == jsData.data.due_at.substring(0,19)).to.be.true;",
									"    });",
									"",
									"    pm.test(\"note of invoice correctly! \" + invoice_obj.note, function () {",
									"        // console.log(\"jsData.data: \",jsData.data);",
									"        pm.expect(invoice_obj.note == jsData.data.note).to.be.true;",
									"    });",
									"",
									"    // tax_type",
									"    pm.test(\"tax_type of invoice correctly! \", function () {",
									"        pm.expect(jsData.data.tax_type == invoice_obj.tax_type).to.be.true;",
									"    });",
									"    ",
									"    // check discounts obj",
									"    // pm.test(\"discounts of invoice correctly! \", function () {",
									"    //     console.log(\"exp discounts: \",invoice_obj.discounts);",
									"    //     console.log(\"act discounts: \",jsData.data.discounts);",
									"    //     pm.expect(JSON.stringify(jsData.data.discounts) == JSON.stringify(invoice_obj.discounts)).to.be.true;",
									"    // });",
									"",
									"    // check items obj",
									"    // pm.test(\"items of invoice correctly! \", function () {",
									"    //     console.log(\"exp items: \",invoice_obj.expected_items);",
									"    //     console.log(\"act items: \",jsData.data.items);",
									"    //     pm.expect(JSON.stringify(jsData.data.items) == JSON.stringify(invoice_obj.expected_items)).to.be.true;",
									"    // });",
									"",
									"    // check discount amount",
									"    pm.test(\"discount_amount of invoice correctly! \", function () {",
									"        console.log(\"act discount_amount: \" + jsData.data.discount_amount);",
									"        pm.expect(jsData.data.discount_amount == invoice_obj.exp_discount_amount).to.be.true;",
									"    });",
									"",
									"    // check total item amount",
									"    pm.test(\"total_amount, payment_due_amount of invoice correctly! \", function () {",
									"        console.log(\"act total_amount: \" + jsData.data.total_amount);",
									"        pm.expect(jsData.data.total_amount == invoice_obj.exp_total_amount && jsData.data.payment_due_amount == invoice_obj.exp_total_amount).to.be.true;",
									"    });",
									"",
									"    // tax_amount",
									"    pm.test(\"tax_amount of invoice correctly! \", function () {",
									"        console.log(\"act tax_amount: \" + jsData.data.tax_amount);",
									"        pm.expect(jsData.data.tax_amount == invoice_obj.exp_tax_amount).to.be.true;",
									"    });",
									"",
									"    // payment_due_amount, return_amount, paid_amount must be 0",
									"    pm.test(\"return_amount, paid_amount must be 0\", function () {",
									"        pm.expect(jsData.data.return_amount == 0 && jsData.data.paid_amount == 0).to.be.true;",
									"    });",
									"",
									"    // chưa có setting này",
									"    // pm.test(\"payment_config of invoice correctly! \" + invoice_obj.payment_config, function () {",
									"    //     pm.expect(JSON.stringify(invoice_obj.payment_config) == JSON.stringify(jsData.data.payment_config)).to.be.true;",
									"    // });",
									"",
									"    pm.test(\"cart_status of invoice correctly! \" + invoice_obj.cart_status, function () {",
									"        pm.expect(invoice_obj.cart_status == jsData.data.cart_status).to.be.true;",
									"    });",
									"",
									"    // final_status",
									"    pm.test(\"final_status of invoice correctly! \" + invoice_obj.exp_final_status, function () {",
									"        pm.expect(invoice_obj.exp_final_status == jsData.data.final_status).to.be.true;",
									"    });",
									"",
									"    postman.setNextRequest(\"buyer_view_invoice\"); // buyer_view_invoice",
									"} else {",
									"    console.log(\"Can't get internal contact detail, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/invoice/get-one/{{C-invoice_id}}?business_id={{C-business_id}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"invoice",
								"get-one",
								"{{C-invoice_id}}"
							],
							"query": [
								{
									"key": "business_id",
									"value": "{{C-business_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "create_invoice",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/**",
									" * Note: should refactor for happy case:",
									" * - Calculate all discount, tax the same include_tax case",
									" * - Refactor discounts in items is array matching with data (after support more 1 discount)",
									" * - GIỮ LOGIC CŨ, FE VÀ BE TÍNH RIÊNG => cần show log để check lại UI",
									" */",
									"",
									"/**",
									" *  =============================  func randNotDupe(min, max, total)",
									" * total: số lượng random, ko dc nhỏ hơn max-min+1",
									" * return: array",
									" */",
									"function randNotDupe(min, max, total){",
									"  let arrNum = []; // new empty array",
									"  let n, p;",
									"  for (let i = 0; i < total; i++) {",
									"    do {",
									"      n = Math.floor(Math.random() * (max - min + 1)) + min;",
									"      p = arrNum.includes(n);",
									"      if(!p){",
									"        arrNum.push(n);",
									"      }",
									"    }",
									"    while(p);",
									"  }",
									"  return arrNum;",
									"}",
									"",
									"// ============================= random number between min and max",
									"function getRandomInt(min, max) {",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"",
									"// ============================= random characters",
									"function randomChars(length) {",
									"    var result           = '';",
									"    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
									"    var charactersLength = characters.length;",
									"    for ( var i = 0; i < length; i++ ) {",
									"      result += characters.charAt(Math.floor(Math.random() * charactersLength));",
									"   }",
									"   return result;",
									"}",
									"",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"let case_ = pm.environment.get(\"C-case_\");",
									"if(!case_){",
									"    if(testcase == 4){",
									"        case_ = 10; // full case sau khi dev validation",
									"    } else {",
									"        case_ = 10;",
									"    }",
									"    pm.environment.set(\"C-case_\",case_);",
									"}",
									"console.log(\"Testcase: \" + testcase + \".\" + case_);",
									"",
									"let today = new Date();",
									"let d30_stp = Math.floor(today.getTime()/1000) + 30*24*60*60;",
									"let d30 = new Date(d30_stp*1000);",
									"",
									"let current_timestamp = Math.floor(today.getTime()/1000);",
									"let past_date, past_due_date;",
									"",
									"let last_date_stp = Math.floor(today.getTime()/1000) - 24*60*60;",
									"let last_date = new Date(last_date_stp*1000);",
									"",
									"let next_date_stp = Math.floor(today.getTime()/1000) + 24*60*60;",
									"let next_date = new Date(next_date_stp*1000);",
									"",
									"let tax_types = [\"price_excluding_tax\", \"price_including_tax\", \"tax_not_applicable\"];",
									"let is_pre_tax = false;",
									"let tax_type;",
									"let list_tax = pm.environment.get(\"C-list_tax\");",
									"console.log(\"list_tax: \" + list_tax.length);",
									"",
									"let list_product = pm.environment.get(\"C-list_product\");",
									"console.log(\"list_product: \" + list_product.length);",
									"let discounts = [];",
									"let amount = 0, created_order_at, due_at, description, email; // amount chỉ có với invoice without product, amount = subtotal",
									"",
									"let branch_id, contact_id;",
									"// let payment_method_list = [\"bank_transfer\",\"domestic_card\",\"credit_card\",\"ewallet_momo\",\"ewallet_zalopay\",\"ewallet_viettel\",\"ewallet_galaxypay\"];",
									"let payment_method_list = pm.environment.get(\"C-payment_method_list\");",
									"// khi chọn bank_transfer, phải gửi kèm payment_account_id (tài khoản sẽ nhận tiền khi buyer quét QR thanh toán)",
									"let order_code, payment_config = [];",
									"let status;",
									"let items = [];",
									"let radProductPos = getRandomInt(0,list_product.length - 1);",
									"let default_item = [{",
									"    \"account_id\": list_product[radProductPos].income_account_id,",
									"    \"amount\": list_product[radProductPos].price,",
									"    \"currency\": \"\",",
									"    \"name\": list_product[radProductPos].name,",
									"    \"note\": \"[API] note for product \" + list_product[radProductPos].name,",
									"    \"quantity\": 1,",
									"    \"product_id\": list_product[radProductPos].product_id,",
									"    \"taxes\": []",
									"}];",
									"",
									"let payment_account_id, total_net_amount;",
									"let list_bank_account = pm.environment.get(\"C-list_bank_account\");",
									"let invoice_obj;",
									"switch(case_){",
									"    case 1:",
									"        console.log(\"Unhappy case: items = []\");",
									"        items = [];",
									"        contact_id = pm.environment.get(\"C-contact_id\");",
									"        email = \"\";",
									"        branch_id = pm.environment.get(\"C-branch_id\");",
									"        created_order_at = today.toISOString();",
									"        due_at = d30.toISOString();",
									"        order_code = \"HD-\" + randomChars(6);",
									"        description = \"[API] Note for invoice \" + order_code;",
									"        discounts = [];",
									"        tax_type = tax_types[getRandomInt(0,tax_types.length - 1)];",
									"        payment_config = [payment_method_list[getRandomInt(0,payment_method_list.length - 1)].id];",
									"        status = \"draft\";",
									"        break;",
									"    case 2:",
									"        console.log(\"Unhappy case: missing customer\");",
									"        items = default_item;",
									"        contact_id = \"\";",
									"        email = \"\";",
									"        branch_id = pm.environment.get(\"C-branch_id\");",
									"        created_order_at = today.toISOString();",
									"        due_at = d30.toISOString();",
									"        order_code = \"HD-\" + randomChars(6);",
									"        description = \"[API] Note for invoice \" + order_code;",
									"        discounts = [];",
									"        tax_type = tax_types[getRandomInt(0,tax_types.length - 1)];",
									"        payment_config = [payment_method_list[getRandomInt(0,payment_method_list.length - 1)].id];",
									"        status = \"draft\";",
									"        break;",
									"    case 3:",
									"        console.log(\"Unhappy case: customer with email is wrong format\");",
									"        items = default_item;",
									"        contact_id = pm.environment.get(\"C-contact_id\");",
									"        email = randomChars(10) + \"@ahjhj\";",
									"        branch_id = pm.environment.get(\"C-branch_id\");",
									"        created_order_at = today.toISOString();",
									"        due_at = d30.toISOString();",
									"        order_code = \"HD-\" + randomChars(6);",
									"        description = \"[API] Note for invoice \" + order_code;",
									"        discounts = [];",
									"        tax_type = tax_types[getRandomInt(0,tax_types.length - 1)];",
									"        payment_config = [payment_method_list[getRandomInt(0,payment_method_list.length - 1)].id];",
									"        status = \"draft\";",
									"        break;",
									"    case 4:",
									"        console.log(\"Unhappy case: order_code = ''\");",
									"        items = default_item;",
									"        contact_id = pm.environment.get(\"C-contact_id\");",
									"        email = \"\";",
									"        branch_id = pm.environment.get(\"C-branch_id\");",
									"        created_order_at = today.toISOString();",
									"        due_at = d30.toISOString();",
									"        order_code = \"\";",
									"        description = \"[API] Note for invoice \" + order_code;",
									"        discounts = [];",
									"        tax_type = tax_types[getRandomInt(0,tax_types.length - 1)];",
									"        payment_config = [payment_method_list[getRandomInt(0,payment_method_list.length - 1)].id];",
									"        status = \"draft\";",
									"        break;",
									"    case 5:",
									"        console.log(\"Unhappy case: order_code is existed\");",
									"        items = default_item;",
									"        contact_id = pm.environment.get(\"C-contact_id\");",
									"        email = \"\";",
									"        branch_id = pm.environment.get(\"C-branch_id\");",
									"        created_order_at = today.toISOString();",
									"        due_at = d30.toISOString();",
									"        order_code = pm.environment.get(\"C-existed_order_code\");",
									"        description = \"[API] Note for invoice \" + order_code;",
									"        discounts = [];",
									"        tax_type = tax_types[getRandomInt(0,tax_types.length - 1)];",
									"        payment_config = [payment_method_list[getRandomInt(0,payment_method_list.length - 1)].id];",
									"        status = \"draft\";",
									"        break;",
									"    case 6:",
									"        console.log(\"Unhappy case: due_date < create_date\");",
									"        items = default_item;",
									"        contact_id = pm.environment.get(\"C-contact_id\");",
									"        email = \"\";",
									"        branch_id = pm.environment.get(\"C-branch_id\");",
									"        created_order_at = today.toISOString();",
									"        due_at = last_date.toISOString();",
									"        order_code = \"HD-\" + randomChars(6);",
									"        description = \"[API] Note for invoice \" + order_code;",
									"        discounts = [];",
									"        tax_type = tax_types[getRandomInt(0,tax_types.length - 1)];",
									"        payment_config = [payment_method_list[getRandomInt(0,payment_method_list.length - 1)].id];",
									"        status = \"draft\";",
									"        break;",
									"    case 7:",
									"        console.log(\"Unhappy case: tax_type = ''\");",
									"        items = default_item;",
									"        contact_id = pm.environment.get(\"C-contact_id\");",
									"        email = \"\";",
									"        branch_id = pm.environment.get(\"C-branch_id\");",
									"        created_order_at = today.toISOString();",
									"        due_at = d30.toISOString();",
									"        order_code = \"HD-\" + randomChars(6);",
									"        description = \"[API] Note for invoice \" + order_code;",
									"        discounts = [];",
									"        tax_type = \"\";",
									"        payment_config = [payment_method_list[getRandomInt(0,payment_method_list.length - 1)].id];",
									"        status = \"draft\";",
									"        break;",
									"    case 8:",
									"        console.log(\"Unhappy case: status = ''\");",
									"        items = default_item;",
									"        contact_id = pm.environment.get(\"C-contact_id\");",
									"        email = \"\";",
									"        branch_id = pm.environment.get(\"C-branch_id\");",
									"        created_order_at = today.toISOString();",
									"        due_at = d30.toISOString();",
									"        order_code = \"HD-\" + randomChars(6);",
									"        description = \"[API] Note for invoice \" + order_code;",
									"        discounts = [];",
									"        tax_type = tax_types[getRandomInt(0,tax_types.length - 1)];",
									"        payment_config = [payment_method_list[getRandomInt(0,payment_method_list.length - 1)].id];",
									"        status = \"\";",
									"        break;",
									"    case 9:",
									"        console.log(\"Unhappy case: payment_config = []\");",
									"        items = default_item;",
									"        contact_id = pm.environment.get(\"C-contact_id\");",
									"        email = \"\";",
									"        branch_id = pm.environment.get(\"C-branch_id\");",
									"        created_order_at = today.toISOString();",
									"        due_at = last_date.toISOString();",
									"        order_code = \"HD-\" + randomChars(6);",
									"        description = \"[API] Note for invoice \" + order_code;",
									"        discounts = [];",
									"        tax_type = tax_types[getRandomInt(0,tax_types.length - 1)];",
									"        payment_config = [];",
									"        status = \"draft\";",
									"        break;",
									"    case 10:",
									"        console.log(\"Happy case: \");",
									"        invoice_obj = pm.environment.get(\"C-invoice_obj\");",
									"",
									"        if(testcase == 4){",
									"            status = \"draft\";",
									"        } else {",
									"            status = \"saved\";",
									"        }",
									"",
									"        invoice_obj.cart_status = status;",
									"        invoice_obj.attachment_url = [];",
									"        invoice_obj.note = \"[API] Note for invoice \" + invoice_obj.order_code;",
									"        break;",
									"    default:",
									"        console.log(\"Missing flow\");",
									"        break;",
									"}",
									"        ",
									"",
									"let payload;",
									"if(case_ == 10){",
									"    payload = invoice_obj;",
									"} else {",
									"    payload = {",
									"        \"attachment_url\": [],",
									"        \"branch_id\": branch_id,",
									"        \"cart_status\": status,",
									"        \"contact_id\": contact_id,",
									"        \"currency\": \"vnd\",",
									"        \"discounts\": discounts,",
									"        \"note\":description,",
									"        \"due_at\": due_at,",
									"        \"email\": email,",
									"        \"items\": items,",
									"        \"order_code\": order_code,",
									"        \"tax_type\": tax_type,",
									"        \"is_pre_tax\":is_pre_tax,",
									"        \"payment_config\":[],",
									"        \"value_at\": created_order_at",
									"    }",
									"}",
									"",
									"console.log(\"payload: \",payload);",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));",
									"pm.environment.set(\"C-invoice_obj\",payload);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"let case_ = pm.environment.get(\"C-case_\");",
									"",
									"let jsData = pm.response.json();",
									"switch(case_){",
									"    case 1: case 2: case 3: case 4: case 5:",
									"    case 6: case 7: case 8: case 9:",
									"        pm.test(\"Status code is 400\", function () {",
									"            pm.response.to.have.status(400);",
									"        });",
									"",
									"        pm.test(\"System code is 104000\", function () {",
									"            pm.expect(jsData.code).to.eql(104000);",
									"        });",
									"        console.log(\"Error: \", jsData);",
									"",
									"        case_++;",
									"        pm.environment.set(\"C-case_\",case_);",
									"        postman.setNextRequest(\"create_invoice\"); // create_invoice",
									"        break;",
									"    case 5:",
									"        pm.test(\"Status code is 400\", function () {",
									"            pm.response.to.have.status(400);",
									"        });",
									"",
									"        pm.test(\"System code is 104100\", function () {",
									"            pm.expect(jsData.code).to.eql(104000);",
									"        });",
									"        console.log(\"Error: \", jsData);",
									"",
									"        case_++;",
									"        pm.environment.set(\"C-case_\",case_);",
									"        postman.setNextRequest(\"create_invoice\"); // create_invoice",
									"        break;",
									"    case 10:",
									"        // const request_api = pm.request.toJSON();",
									"        // parseCURL(request_api);",
									"",
									"        console.log(\"debug: \" + JSON.stringify(jsData));",
									"        pm.test(\"Status code is 200\", function () {",
									"            pm.response.to.have.status(200);",
									"        });",
									"",
									"        pm.test(\"System code is 102001\", function () {",
									"            pm.expect(jsData.code).to.eql(102001);",
									"        });",
									"",
									"        let invoice_obj = pm.environment.get(\"C-invoice_obj\");",
									"        let expected_items = [];",
									"        let exp_discount_amount = 0, exp_items_amount = 0, exp_total_amount = 0, exp_tax_amount = 0;",
									"        for(let i in invoice_obj.items){",
									"            let list_tax_i = [];",
									"            let item_tax_amount = 0; // do hiện tại chỉ có 1 tax",
									"            for(let j in invoice_obj.items[i].taxes){",
									"                list_tax_i[list_tax_i.length] = {",
									"                    \"tax_id\": invoice_obj.items[i].taxes[j].tax_id,",
									"                    \"rate\": invoice_obj.items[i].taxes[j].rate,",
									"                    \"amount\": invoice_obj.items[i].taxes[j].amount,",
									"                    \"account_id\": invoice_obj.items[i].taxes[j].account_id",
									"                }",
									"                if(\"item_tax_amount\" in invoice_obj.items[i].taxes[j]){",
									"                    item_tax_amount += invoice_obj.items[i].taxes[j].item_tax_amount;",
									"                } else {",
									"                    item_tax_amount += invoice_obj.items[i].taxes[j].amount;",
									"                }",
									"",
									"            }",
									"",
									"            expected_items[expected_items.length] = {",
									"                \"product_id\": invoice_obj.items[i].product_id,",
									"                \"sku_id\": invoice_obj.items[i].sku_id,",
									"                \"item_amount\": invoice_obj.items[i].item_amount,",
									"                \"discount_amount\": invoice_obj.items[i].discount_amount,",
									"                \"item_tax_amount\": item_tax_amount,",
									"                \"before_tax_amount\": invoice_obj.items[i].before_tax_amount,",
									"                \"after_tax_amount\": invoice_obj.items[i].after_tax_amount,",
									"                \"total_item_amount\": invoice_obj.items[i].total_item_amount,",
									"                \"currency\": \"\",",
									"                \"quantity\": invoice_obj.items[i].quantity,",
									"                \"account_id\": invoice_obj.items[i].account_id,",
									"                \"note\": invoice_obj.items[i].note,",
									"                \"taxes\": list_tax_i",
									"            }",
									"            exp_discount_amount += invoice_obj.items[i].discount_amount;",
									"            exp_items_amount += invoice_obj.items[i].total_item_amount;",
									"            exp_total_amount += invoice_obj.items[i].total_amount;",
									"            exp_tax_amount += item_tax_amount;",
									"            // console.log(\"debug exp_tax_amount: \" + exp_tax_amount);",
									"        }",
									"",
									"        invoice_obj.invoice_id = jsData.data.id;",
									"        invoice_obj.system_code = jsData.data.system_code;",
									"",
									"        // is_pre_tax => không hiển thị khi create",
									"        // pm.test(\"is_pre_tax of invoice correctly! \", function () {",
									"        //     pm.expect(jsData.data.is_pre_tax == invoice_obj.is_pre_tax).to.be.true;",
									"        // });",
									"",
									"        // tax_type",
									"        pm.test(\"tax_type of invoice correctly! \", function () {",
									"            pm.expect(jsData.data.tax_type == invoice_obj.tax_type).to.be.true;",
									"        });",
									"        ",
									"        // check discounts obj => không hiển thị, thay bằng discount_amount",
									"        // pm.test(\"discounts of invoice correctly! \", function () {",
									"        //     // console.log(\"exp discounts: \",invoice_obj.discounts);",
									"        //     // console.log(\"act discounts: \",jsData.data.discounts);",
									"        //     pm.expect(JSON.stringify(jsData.data.discounts) == JSON.stringify(invoice_obj.discounts)).to.be.true;",
									"        // });",
									"",
									"        // check items obj => không hiển thị trong create, FE phải call lại detail để show thông tin",
									"        // pm.test(\"items of invoice correctly! \", function () {",
									"        //     console.log(\"exp discounts: \",expected_items);",
									"        //     console.log(\"act discounts: \",jsData.data.items);",
									"        //     pm.expect(JSON.stringify(jsData.data.items) == JSON.stringify(expected_items)).to.be.true;",
									"        // });",
									"        invoice_obj.expected_items = expected_items;",
									"",
									"        // check discount amount",
									"        pm.test(\"discount_amount of invoice correctly! \", function () {",
									"            console.log(\"exp discount_amount: \" + exp_discount_amount);",
									"            console.log(\"act discount_amount: \" + jsData.data.discount_amount);",
									"            pm.expect(jsData.data.discount_amount == exp_discount_amount).to.be.true;",
									"        });",
									"        invoice_obj.exp_discount_amount = exp_discount_amount;",
									"",
									"        // check sub total item amount",
									"        // pm.test(\"items_amount of invoice correctly! \", function () {",
									"        //     console.log(\"exp items_amount: \" + exp_items_amount);",
									"        //     console.log(\"act items_amount: \" + jsData.data.items_amount);",
									"        //     pm.expect(jsData.data.items_amount == exp_items_amount).to.be.true;",
									"        // });",
									"        // invoice_obj.exp_items_amount = exp_items_amount;",
									"",
									"        // sub_total_amount",
									"        pm.test(\"sub_total_amount of invoice correctly! \", function () {",
									"            console.log(\"exp sub_total_amount: \" + invoice_obj.sub_total_amount);",
									"            console.log(\"act sub_total_amount: \" + jsData.data.items_amount);",
									"            pm.expect(jsData.data.sub_total_amount == invoice_obj.sub_total_amount).to.be.true;",
									"        });",
									"",
									"        // check total item amount",
									"        pm.test(\"total_amount, payment_due_amount of invoice correctly! \", function () {",
									"            console.log(\"exp total_amount: \" + exp_total_amount);",
									"            console.log(\"act total_amount: \" + jsData.data.total_amount);",
									"            pm.expect(jsData.data.total_amount == exp_total_amount && jsData.data.payment_due_amount == exp_total_amount).to.be.true;",
									"        });",
									"        invoice_obj.exp_total_amount = exp_total_amount;",
									"",
									"        // tax_amount",
									"        pm.test(\"tax_amount of invoice correctly! \", function () {",
									"            console.log(\"exp tax_amount: \" + exp_tax_amount);",
									"            console.log(\"act tax_amount: \" + jsData.data.tax_amount);",
									"            pm.expect(jsData.data.tax_amount == exp_tax_amount).to.be.true;",
									"        });",
									"        invoice_obj.exp_tax_amount = exp_tax_amount;",
									"",
									"        // payment_due_amount, return_amount, paid_amount must be 0",
									"        pm.test(\"return_amount, paid_amount must be 0\", function () {",
									"            pm.expect(jsData.data.return_amount == 0 && jsData.data.paid_amount == 0).to.be.true;",
									"        });",
									"",
									"        pm.environment.unset(\"C-case_\");",
									"        testcase++;",
									"        pm.environment.set(\"C-testcase\",testcase);",
									"        pm.environment.set(\"C-invoice_obj\",invoice_obj);",
									"        postman.setNextRequest(\"get_list_invoice\"); // get_list_invoice",
									"        break;",
									"    default:",
									"        console.log(\"missing flow, end test\");",
									"        postman.setNextRequest(null);",
									"        break;",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							},
							{
								"key": "X-Location-Timezone",
								"value": "UTC+07:00"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/invoice/create",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"invoice",
								"create"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "buyer view",
			"item": [
				{
					"name": "buyer_view_invoice",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let invoice_obj = pm.environment.get(\"C-invoice_obj\");",
									"let system_code = invoice_obj.system_code;",
									"console.log(\"view detail invoice: \" + system_code);",
									"",
									"pm.environment.set(\"C-system_code\",system_code);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    console.log(\"Debug: \" + JSON.stringify(jsData));",
									"",
									"    let invoice_obj = pm.environment.get(\"C-invoice_obj\");",
									"    for(let i in invoice_obj.items){",
									"        for(let j in jsData.data.entry_items){",
									"            if(invoice_obj.items[i].product_id == jsData.data.entry_items[j].product_id){",
									"                invoice_obj.items[i].item_id = jsData.data.entry_items[j].id;",
									"                break;",
									"            }",
									"        }",
									"    }",
									"    pm.environment.set(\"C-invoice_obj\",invoice_obj);",
									"    ",
									"    pm.test(\"order_code of invoice correctly! \" + invoice_obj.order_code, function () {",
									"        pm.expect(invoice_obj.order_code == jsData.data.order_code).to.be.true;",
									"    });",
									"",
									"    pm.test(\"sub_total_amount of invoice correctly! \" + invoice_obj.sub_total_amount, function () {",
									"        pm.expect(invoice_obj.sub_total_amount == jsData.data.sub_total_amount).to.be.true;",
									"    });",
									"",
									"    pm.test(\"contact_id of invoice correctly! \" + invoice_obj.contact_id, function () {",
									"        pm.expect(invoice_obj.contact_id == jsData.data.contact_id).to.be.true;",
									"    });",
									"",
									"    pm.test(\"email of invoice correctly! \" + invoice_obj.email, function () {",
									"        pm.expect(invoice_obj.email == jsData.data.email).to.be.true;",
									"    });",
									"",
									"    pm.test(\"created_order_at of invoice correctly! \" + invoice_obj.value_at, function () {",
									"        pm.expect(invoice_obj.value_at.substring(0,19) == jsData.data.value_at.substring(0,19)).to.be.true;",
									"    });",
									"",
									"    pm.test(\"due_at of invoice correctly! \" + invoice_obj.due_at, function () {",
									"        pm.expect(invoice_obj.due_at.substring(0,19) == jsData.data.due_at.substring(0,19)).to.be.true;",
									"    });",
									"",
									"    pm.test(\"note of invoice correctly! \" + invoice_obj.note, function () {",
									"        pm.expect(invoice_obj.note == jsData.data.note).to.be.true;",
									"    });",
									"",
									"    // tax_type",
									"    pm.test(\"tax_type of invoice correctly! \", function () {",
									"        pm.expect(jsData.data.tax_type == invoice_obj.tax_type).to.be.true;",
									"    });",
									"    ",
									"    // check discounts obj",
									"    // pm.test(\"discounts of invoice correctly! \", function () {",
									"    //     console.log(\"exp discounts: \",invoice_obj.discounts);",
									"    //     console.log(\"act discounts: \",jsData.data.discounts);",
									"    //     pm.expect(JSON.stringify(jsData.data.discounts) == JSON.stringify(invoice_obj.discounts)).to.be.true;",
									"    // });",
									"",
									"    // check items obj",
									"    // pm.test(\"items of invoice correctly! \", function () {",
									"    //     console.log(\"exp items: \",invoice_obj.expected_items);",
									"    //     console.log(\"act items: \",jsData.data.items);",
									"    //     pm.expect(JSON.stringify(jsData.data.items) == JSON.stringify(invoice_obj.expected_items)).to.be.true;",
									"    // });",
									"",
									"    // check discount amount",
									"    pm.test(\"discount_amount of invoice correctly! \", function () {",
									"        console.log(\"act discount_amount: \" + jsData.data.discount_amount);",
									"        pm.expect(jsData.data.discount_amount == invoice_obj.exp_discount_amount).to.be.true;",
									"    });",
									"",
									"    // check total item amount",
									"    pm.test(\"total_amount, payment_due_amount of invoice correctly! \", function () {",
									"        console.log(\"act total_amount: \" + jsData.data.total_amount);",
									"        pm.expect(jsData.data.total_amount == invoice_obj.exp_total_amount && jsData.data.payment_due_amount == invoice_obj.exp_total_amount).to.be.true;",
									"    });",
									"",
									"    // tax_amount",
									"    pm.test(\"tax_amount of invoice correctly! \", function () {",
									"        console.log(\"act tax_amount: \" + jsData.data.tax_amount);",
									"        pm.expect(jsData.data.tax_amount == invoice_obj.exp_tax_amount).to.be.true;",
									"    });",
									"",
									"    // payment_due_amount, return_amount, paid_amount must be 0",
									"    pm.test(\"return_amount, paid_amount must be 0\", function () {",
									"        pm.expect(jsData.data.return_amount == 0 && jsData.data.paid_amount == 0).to.be.true;",
									"    });",
									"",
									"    // chưa có setting này",
									"    // pm.test(\"payment_config of invoice correctly! \" + invoice_obj.payment_config, function () {",
									"    //     pm.expect(JSON.stringify(invoice_obj.payment_config) == JSON.stringify(jsData.data.payment_config)).to.be.true;",
									"    // });",
									"",
									"    pm.test(\"cart_status of invoice correctly! \" + invoice_obj.cart_status, function () {",
									"        pm.expect(invoice_obj.cart_status == jsData.data.cart_status).to.be.true;",
									"    });",
									"",
									"    // final_status",
									"    pm.test(\"final_status of invoice correctly! \" + invoice_obj.exp_final_status, function () {",
									"        pm.expect(invoice_obj.exp_final_status == jsData.data.final_status).to.be.true;",
									"    });",
									"",
									"    postman.setNextRequest(\"get_list_contact\"); // get_list_contact",
									"} else {",
									"    console.log(\"Can't get internal contact detail, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/{{C-business_id}}/invoice/{{C-system_code}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"{{C-business_id}}",
								"invoice",
								"{{C-system_code}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "posting",
			"item": [
				{
					"name": "get_list_posting",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/**",
									" * hiện tại page_size limit 20 (performance issue)",
									" * => chỉ quét tối đa 5 page, hạn chế broken log file",
									" */",
									"",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let page = pm.environment.get(\"C-page\");",
									"",
									"if(!page){",
									"    page = 1;",
									"    pm.environment.set(\"C-page\",page);",
									"",
									"    let page_size = 50;",
									"    pm.environment.set(\"C-page_size\",page_size);",
									"}",
									"",
									"// ============================================================================================================",
									"let invoice_obj = pm.environment.get(\"C-invoice_obj\");",
									"// console.log(\"invoice_obj: \",invoice_obj);",
									"let account_discount = pm.environment.get(\"C-discount\");",
									"let account_receivable = pm.environment.get(\"C-account_receivable\");",
									"let list_expected_posting = [];",
									"",
									"// // ghi posting account_receivable",
									"// list_expected_posting[0] = {",
									"//     \"object_type\":\"invoice\",",
									"//     \"object_id\":invoice_obj.invoice_id,",
									"//     \"object_id_ref\":\"00000000-0000-0000-0000-000000000000\",",
									"//     \"account_id\":account_receivable.id,",
									"//     \"is_credit\":false,",
									"//     \"amount\":invoice_obj.exp_total_amount,",
									"//     \"type\":\"account_receivable\"",
									"// }",
									"",
									"// // ghi posting discounts",
									"// for(let i in invoice_obj.discounts){",
									"//     if(invoice_obj.discounts[i].is_rate){",
									"//         for(let j in invoice_obj.items){",
									"//             list_expected_posting[list_expected_posting.length] = {",
									"//                 \"object_type\":\"invoice\",",
									"//                 \"object_id\":invoice_obj.invoice_id,",
									"//                 \"object_id_ref\":invoice_obj.items[j].item_id,",
									"//                 \"account_id\":account_discount.id,",
									"//                 \"is_credit\":false,",
									"//                 \"amount\":invoice_obj.items[j].discount_amount,",
									"//                 \"type\":\"discount_rate\"",
									"//             }",
									"//         }",
									"//     } else {",
									"//         for(let j in invoice_obj.items){",
									"//             list_expected_posting[list_expected_posting.length] = {",
									"//                 \"object_type\":\"invoice\",",
									"//                 \"object_id\":invoice_obj.invoice_id,",
									"//                 \"object_id_ref\":invoice_obj.items[j].item_id,",
									"//                 \"account_id\":account_discount.id,",
									"//                 \"is_credit\":false,",
									"//                 \"amount\":invoice_obj.items[j].discount_amount,",
									"//                 \"type\":\"discount_fix\"",
									"//             }",
									"//         }",
									"//     }",
									"// }",
									"",
									"// // ghi posting line items",
									"// for(let item in invoice_obj.items){",
									"//     list_expected_posting[list_expected_posting.length] = {",
									"//         \"object_type\":\"invoice\",",
									"//         \"object_id\":invoice_obj.invoice_id,",
									"//         \"object_id_ref\":invoice_obj.items[item].item_id,",
									"//         \"account_id\":invoice_obj.items[item].account_id,",
									"//         \"is_credit\":true,",
									"//         \"amount\":invoice_obj.items[item].before_tax_amount,",
									"//         \"type\":\"item\",",
									"//         \"name\":invoice_obj.items[item].name",
									"//     }",
									"//     // ghi posting taxs",
									"//     if(invoice_obj.tax_type != \"tax_not_applicable\"){",
									"//         for(let j in invoice_obj.items[item].taxes){",
									"//             if(\"item_tax_amount\" in invoice_obj.items[item].taxes[j]){",
									"//                 list_expected_posting[list_expected_posting.length] = {",
									"//                     \"object_type\":\"invoice\",",
									"//                     \"object_id\":invoice_obj.invoice_id,",
									"//                     \"object_id_ref\":invoice_obj.items[item].item_id,",
									"//                     \"account_id\":invoice_obj.items[item].taxes[j].account_id,",
									"//                     \"is_credit\":true,",
									"//                     \"amount\":invoice_obj.items[item].taxes[j].item_tax_amount,",
									"//                     \"type\":\"item_tax\",",
									"//                     \"name\":invoice_obj.items[item].name,",
									"//                     \"tax_name\":invoice_obj.items[item].taxes[j].name",
									"//                 }",
									"//             } else {",
									"//                 list_expected_posting[list_expected_posting.length] = {",
									"//                     \"object_type\":\"invoice\",",
									"//                     \"object_id\":invoice_obj.invoice_id,",
									"//                     \"object_id_ref\":invoice_obj.items[item].item_id,",
									"//                     \"account_id\":invoice_obj.items[item].taxes[j].account_id,",
									"//                     \"is_credit\":true,",
									"//                     \"amount\":invoice_obj.items[item].taxes[j].amount,",
									"//                     \"type\":\"item_tax\",",
									"//                     \"name\":invoice_obj.items[item].name,",
									"//                     \"tax_name\":invoice_obj.items[item].taxes[j].name",
									"//                 }",
									"//             }",
									"//         }",
									"//     }",
									"// }",
									"",
									"// let total_credit = 0, total_debit = 0;",
									"// for(let i in list_expected_posting){",
									"//     if(list_expected_posting[i].is_credit){",
									"//         total_credit += list_expected_posting[i].amount;",
									"//     } else {",
									"//         total_debit += list_expected_posting[i].amount;",
									"//     }",
									"// }",
									"// console.log(\"total_credit: \"  + total_credit);",
									"// console.log(\"total_debit: \"  + total_debit);",
									"// console.log(\"list_expected_posting: \" + JSON.stringify(list_expected_posting));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let total_pages = jsData.meta.total_pages;",
									"    let total_records = jsData.meta.total_rows;",
									"    let page = pm.environment.get(\"C-page\");",
									"",
									"    let list_posting, old_list_posting;",
									"    // console.log(\"debug total record in page: \" + jsData.data.length);",
									"    switch(testcase){",
									"        case 2:",
									"            list_posting = pm.environment.get(\"C-list_posting\");",
									"            if(!list_posting){",
									"                list_posting = [];",
									"            }",
									"            break;",
									"        case 5: case 8:",
									"            old_list_posting = pm.environment.get(\"C-old_list_posting\");",
									"            if(!old_list_posting){",
									"                old_list_posting = pm.environment.get(\"C-list_posting\");",
									"                pm.environment.unset(\"C-list_posting\");",
									"                pm.environment.set(\"C-old_list_posting\",old_list_posting);",
									"            }",
									"",
									"            list_posting = pm.environment.get(\"C-list_posting\");",
									"            if(!list_posting){",
									"                list_posting = [];",
									"            }",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow\");",
									"            break;",
									"    }",
									"",
									"    for(let item in jsData.data){",
									"        list_posting[list_posting.length] = {",
									"            \"posting_id\":jsData.data[item].id,",
									"            \"account_id\":jsData.data[item].account_id,",
									"            \"amount\":jsData.data[item].amount,",
									"            \"branch_id\":jsData.data[item].branch_id,",
									"            \"created_at\":jsData.data[item].created_at,",
									"            \"currency\":jsData.data[item].currency,",
									"            \"deleted_at\":jsData.data[item].deleted_at,",
									"            \"is_credit\":jsData.data[item].is_credit,",
									"            \"is_final_status\":jsData.data[item].is_final_status,",
									"            \"object_ref_id\":jsData.data[item].object_ref_id,",
									"            \"object_ref_type\":jsData.data[item].object_ref_type, // product (line_item), tax, discount",
									"            \"object_id\":jsData.data[item].object_id,",
									"            \"object_type\":jsData.data[item].object_type,",
									"            // \"value_at\":jsData.data[item].value_at,",
									"            \"short_desc\":jsData.data[item].short_desc",
									"        }",
									"    }",
									"    pm.environment.set(\"C-list_posting\",list_posting);",
									"",
									"    let configs = pm.environment.get(\"C-configs\");",
									"    if(page >= total_pages || page >= configs.limit_page){",
									"        // must clear page & page_size",
									"        pm.environment.unset(\"C-page\");",
									"        pm.environment.unset(\"C-page_size\");",
									"",
									"        let old_total_records;",
									"        switch(testcase){",
									"            case 2:",
									"                pm.test(\"Got all posting! \" + total_records, function () {",
									"                    pm.expect(total_records > 0).to.be.true;",
									"                });",
									"                pm.environment.set(\"C-total_posting\",total_records);",
									"",
									"                if(configs.is_check_report){",
									"                    postman.setNextRequest(\"get_chart_balance_change\"); // get_report_account_receivable_unpaid, get_chart_balance_change",
									"                } else {",
									"                    postman.setNextRequest(\"get_list_invoice\"); // get_list_invoice",
									"                }",
									"                break;",
									"            case 8:",
									"                /**",
									"                 * CÁC BƯỚC GHI NHẬN POSTING CHO INVOICE:",
									"                 * 1. Ghi Có (đầu debit)",
									"                 *  - account_receivable: ghi 1 giá trị phải thu cho invoice (đã trừ đi credit của discount)",
									"                 *  - discount: ghi tương ứng cho từng line_item, chỉ có 1 default coa discount",
									"                 * 2. Ghi Nợ (đầu credit)",
									"                 *  - coa product: ghi tương ứng cho từng line_item, mỗi line_item có coa bán hàng riêng (tự config)",
									"                 *  - coa tax: ghi tương ứng cho từng tax trong line_item (hiện tại chỉ có 1 tax/line_item)",
									"                 * Note:",
									"                 */ ",
									"                let invoice_obj = pm.environment.get(\"C-invoice_obj\");",
									"                // console.log(\"invoice_obj: \",invoice_obj);",
									"                let account_discount = pm.environment.get(\"C-discount\");",
									"                let account_receivable = pm.environment.get(\"C-account_receivable\");",
									"                let list_expected_posting = [];",
									"",
									"                // ghi posting account_receivable",
									"                list_expected_posting[0] = {",
									"                    \"object_type\":\"invoice\",",
									"                    \"object_id\":invoice_obj.invoice_id,",
									"                    \"object_ref_id\":\"\", // 00000000-0000-0000-0000-000000000000",
									"                    \"account_id\":account_receivable.id,",
									"                    \"is_credit\":false,",
									"                    \"amount\":invoice_obj.exp_total_amount,",
									"                    \"type\":\"account_receivable\"",
									"                }",
									"",
									"                // ghi posting discounts",
									"                for(let i in invoice_obj.discounts){",
									"                    if(invoice_obj.discounts[i].is_rate){",
									"                        for(let j in invoice_obj.items){",
									"                            list_expected_posting[list_expected_posting.length] = {",
									"                                \"object_type\":\"invoice\",",
									"                                \"object_id\":invoice_obj.invoice_id,",
									"                                \"object_ref_id\":invoice_obj.items[j].item_id,",
									"                                \"account_id\":account_discount.id,",
									"                                \"is_credit\":false,",
									"                                \"amount\":invoice_obj.items[j].discount_amount,",
									"                                \"type\":\"discount_rate\"",
									"                            }",
									"                        }",
									"                    } else {",
									"                        for(let j in invoice_obj.items){",
									"                            list_expected_posting[list_expected_posting.length] = {",
									"                                \"object_type\":\"invoice\",",
									"                                \"object_id\":invoice_obj.invoice_id,",
									"                                \"object_ref_id\":invoice_obj.items[j].item_id,",
									"                                \"account_id\":account_discount.id,",
									"                                \"is_credit\":false,",
									"                                \"amount\":invoice_obj.items[j].discount_amount,",
									"                                \"type\":\"discount_fix\"",
									"                            }",
									"                        }",
									"                    }",
									"                }",
									"",
									"                // ghi posting line items",
									"                for(let item in invoice_obj.items){",
									"                    list_expected_posting[list_expected_posting.length] = {",
									"                        \"object_type\":\"invoice\",",
									"                        \"object_id\":invoice_obj.invoice_id,",
									"                        \"object_ref_id\":invoice_obj.items[item].item_id,",
									"                        \"object_ref_type\":\"product\",",
									"                        \"account_id\":invoice_obj.items[item].account_id,",
									"                        \"is_credit\":true,",
									"                        \"amount\":invoice_obj.items[item].before_tax_amount,",
									"                        \"type\":\"item\",",
									"                        \"name\":invoice_obj.items[item].name",
									"                    }",
									"                    // ghi posting taxs",
									"                    if(invoice_obj.tax_type != \"tax_not_applicable\"){",
									"                        for(let j in invoice_obj.items[item].taxes){",
									"                            if(\"item_tax_amount\" in invoice_obj.items[item].taxes[j]){",
									"                                list_expected_posting[list_expected_posting.length] = {",
									"                                    \"object_type\":\"invoice\",",
									"                                    \"object_id\":invoice_obj.invoice_id,",
									"                                    \"object_ref_id\":invoice_obj.items[item].item_id,",
									"                                    \"account_id\":invoice_obj.items[item].taxes[j].account_id,",
									"                                    \"is_credit\":true,",
									"                                    \"amount\":invoice_obj.items[item].taxes[j].item_tax_amount,",
									"                                    \"type\":\"item_tax\",",
									"                                    \"name\":invoice_obj.items[item].name,",
									"                                    \"tax_name\":invoice_obj.items[item].taxes[j].name",
									"                                }",
									"                            } else {",
									"                                list_expected_posting[list_expected_posting.length] = {",
									"                                    \"object_type\":\"invoice\",",
									"                                    \"object_id\":invoice_obj.invoice_id,",
									"                                    \"object_ref_id\":invoice_obj.items[item].item_id,",
									"                                    \"account_id\":invoice_obj.items[item].taxes[j].account_id,",
									"                                    \"is_credit\":true,",
									"                                    \"amount\":invoice_obj.items[item].taxes[j].amount,",
									"                                    \"type\":\"item_tax\",",
									"                                    \"name\":invoice_obj.items[item].name,",
									"                                    \"tax_name\":invoice_obj.items[item].taxes[j].name",
									"                                }",
									"                            }",
									"                        }",
									"                    }",
									"                }",
									"",
									"                console.log(\"list_expected_posting: \" + JSON.stringify(list_expected_posting));",
									"",
									"                // xử lý cho act posting",
									"                let list_actual_posting = [];",
									"                // console.log(\"start debug =====\");",
									"                // console.log(\"invoice_id: \"  + invoice_obj.invoice_id);",
									"                // console.log(\"debug: \" + list_posting.length);",
									"                for(let i in list_posting){",
									"                    // console.log(\"type: \"  + list_posting[i].object_type);",
									"                    // console.log(i + \". object_id: \"  + list_posting[i].object_id);",
									"                    ",
									"                    if(list_posting[i].object_type == \"invoice\" && list_posting[i].object_id == invoice_obj.invoice_id){",
									"                        list_actual_posting[list_actual_posting.length] = {",
									"                            \"object_type\":list_posting[i].object_type,",
									"                            \"object_id\":list_posting[i].object_id,",
									"                            \"object_ref_id\":list_posting[i].object_ref_id,",
									"                            \"object_ref_type\":list_posting[i].object_ref_type,",
									"                            \"account_id\":list_posting[i].account_id,",
									"                            \"is_credit\":list_posting[i].is_credit,",
									"                            \"amount\":list_posting[i].amount",
									"                        }",
									"                    }",
									"                }",
									"                console.log(\"list_actual_posting: \" + JSON.stringify(list_actual_posting));",
									"",
									"                let count_record = list_expected_posting.length;",
									"                old_total_records = pm.environment.get(\"C-total_posting\");",
									"                pm.test(\"Have \" + count_record + \" new records\", function () {",
									"                    console.log(\"old: \" + old_total_records);",
									"                    console.log(\"new: \" + total_records);",
									"                    pm.expect(total_records == old_total_records + count_record).to.be.true;",
									"                });",
									"                ",
									"                let count = 0;",
									"                let foundAll = false;",
									"",
									"                let credit_amount = 0, debit_amount = 0;",
									"                for(let i in list_actual_posting){",
									"                    if(list_actual_posting[i].is_credit){",
									"                        credit_amount += list_actual_posting[i].amount;",
									"                        // item amount & tax amount",
									"                        for(let j in list_expected_posting){",
									"                            if(list_expected_posting[j].is_credit){",
									"                                if(list_actual_posting[i].account_id == list_expected_posting[j].account_id && list_actual_posting[i].object_ref_id == list_expected_posting[j].object_ref_id){",
									"                                    count++;",
									"                                    if(\"tax_name\" in list_expected_posting[j]){",
									"                                        pm.test(\"Found tax \" + list_expected_posting[j].tax_name + \" amount correctly \" + list_expected_posting[j].amount, function () {",
									"                                            console.log(\"act amount: \" + list_actual_posting[i].amount);",
									"                                            pm.expect(list_expected_posting[j].amount == list_actual_posting[i].amount).to.be.true;",
									"                                        });",
									"                                    } else {",
									"                                        pm.test(\"Found product \" + list_expected_posting[j].name + \" amount correctly \" + list_expected_posting[j].amount, function () {",
									"                                            console.log(\"act amount: \" + list_actual_posting[i].amount);",
									"                                            pm.expect(list_expected_posting[j].amount == list_actual_posting[i].amount).to.be.true;",
									"                                        });",
									"                                    }",
									"                                    break;",
									"                                }",
									"                            }",
									"                        }",
									"                    } else {",
									"                        debit_amount += list_actual_posting[i].amount;",
									"                        // account_receivable & discount amount",
									"                        for(let j in list_expected_posting){",
									"                            if(!list_expected_posting[j].is_credit){",
									"                                if(list_actual_posting[i].account_id == list_expected_posting[j].account_id && list_actual_posting[i].object_ref_id == list_expected_posting[j].object_ref_id){",
									"                                    count++;",
									"                                    switch(list_expected_posting[j].type){",
									"                                        case \"account_receivable\":",
									"                                            pm.test(\"Found account_receivable with amount correctly \" + list_expected_posting[j].amount, function () {",
									"                                                console.log(\"act amount: \" + list_actual_posting[i].amount);",
									"                                                pm.expect(list_expected_posting[j].amount == list_actual_posting[i].amount).to.be.true;",
									"                                            });",
									"                                            break;",
									"                                        case \"discount_rate\":",
									"                                            pm.test(\"Found discount_rate with amount correctly \" + list_expected_posting[j].amount, function () {",
									"                                                console.log(\"act amount: \" + list_actual_posting[i].amount);",
									"                                                pm.expect(list_expected_posting[j].amount == list_actual_posting[i].amount).to.be.true;",
									"                                            });",
									"                                            break;",
									"                                        case \"discount_fix\":",
									"                                            pm.test(\"Found discount_fix with amount correctly \" + list_expected_posting[j].amount, function () {",
									"                                                console.log(\"act amount: \" + list_actual_posting[i].amount);",
									"                                                pm.expect(list_expected_posting[j].amount == list_actual_posting[i].amount).to.be.true;",
									"                                            });",
									"                                            break;",
									"                                        case \"discount\":",
									"                                            pm.test(\"Found discount amount correctly \" + list_expected_posting[j].amount, function () {",
									"                                                console.log(\"act amount: \" + list_actual_posting[i].amount);",
									"                                                pm.expect(list_expected_posting[j].amount == list_actual_posting[i].amount).to.be.true;",
									"                                            });",
									"                                            break;",
									"                                        default:",
									"                                            pm.test(\"Missing case\", function () {",
									"                                                pm.expect(false).to.be.true;",
									"                                            });",
									"                                            break;",
									"                                    }",
									"                                    break;",
									"                                }",
									"                            }",
									"                        }",
									"                    }",
									"",
									"                    if(count == count_record){",
									"                        foundAll = true;",
									"                        break;",
									"                    }",
									"                }",
									"",
									"                pm.test(\"Found all posting\", function () {",
									"                    pm.expect(foundAll).to.be.true;",
									"                });",
									"",
									"                pm.test(\"total credit_amount == total debit_amount\", function () {",
									"                    console.log(\"debit_amount: \" + debit_amount);",
									"                    console.log(\"credit_amount: \" + credit_amount);",
									"                    pm.expect(debit_amount == credit_amount).to.be.true;",
									"                });",
									"",
									"                // clear old data to update at next testcase",
									"                pm.environment.unset(\"C-old_list_posting\");",
									"",
									"                if(configs.is_check_report){",
									"                    postman.setNextRequest(\"get_chart_balance_change\"); // get_report_account_receivable_unpaid, get_chart_balance_change",
									"                } else {",
									"                    console.log(\"-------- End Testsuite 06 --------\");",
									"                    postman.setNextRequest(null);",
									"                }",
									"                break;",
									"            case 5:",
									"                old_total_records = pm.environment.get(\"C-total_posting\");              ",
									"                pm.test(\"Nothing happen with total posting!\", function () {",
									"                    console.log(\"old: \" + old_total_records);",
									"                    console.log(\"new: \" + total_records);",
									"                     pm.expect(total_records == old_total_records).to.be.true;",
									"                });",
									"",
									"                postman.setNextRequest(\"get_chart_balance_change\"); // get_report_account_receivable_unpaid, get_chart_balance_change",
									"                break;",
									"            default:",
									"                console.log(\"Missing flow, end test\");",
									"                postman.setNextRequest(null);",
									"                break;",
									"        }",
									"    } else {",
									"        page++;",
									"        pm.environment.set(\"C-page\",page);",
									"",
									"        console.log(\"view next page (\" + page + \") to get more posting\");",
									"        postman.setNextRequest(\"get_list_posting\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get list posting, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-ledger/api/v1/posting/get-list?business_id={{C-business_id}}&page={{C-page}}&page_size={{C-page_size}}&search=&sort=",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-ledger",
								"api",
								"v1",
								"posting",
								"get-list"
							],
							"query": [
								{
									"key": "business_id",
									"value": "{{C-business_id}}"
								},
								{
									"key": "page",
									"value": "{{C-page}}"
								},
								{
									"key": "page_size",
									"value": "{{C-page_size}}"
								},
								{
									"key": "search",
									"value": ""
								},
								{
									"key": "sort",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "home-report",
			"item": [
				{
					"name": "get_report_account_receivable_unpaid",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let payload = {",
									"    \"account_key\": \"A3001\", // account_receivable => A3001, account_payable => B1001",
									"    // \"branch_id\": pm.environment.get(\"C-branch_id\"),",
									"    \"business_id\": parseInt(pm.environment.get(\"C-business_id\"))",
									"    //   \"current_period_end\": \"string\",",
									"    //   \"current_period_start\": \"string\",",
									"    // \"page\": 1,",
									"    // \"page_size\": 20,",
									"    //   \"period\": \"string\",  // old due_days",
									"    //   \"previous_period_end\": \"string\",",
									"    //   \"previous_period_start\": \"string\",",
									"    //   \"report_type\": \"string\",",
									"    // \"timezone\": \"UTC+07:00\"",
									"}",
									"",
									"console.log(\"payload: \",payload);",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));",
									"// pm.environment.set(\"C-report_obj\",payload);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ============================= get last day (Sun is end of Week)",
									"function getLastDayOfCurrentWeek() {",
									"    const now = new Date();",
									"    const lastDay = new Date(now);",
									"    const daysUntilSunday = 7 - now.getDay();  // if Saturday is end, change 7 => 6",
									"    lastDay.setDate(now.getDate() + daysUntilSunday);",
									"    return lastDay;",
									"}",
									"",
									"// ============================= get first day (Sun is end of Week)",
									"function getFirstDayOfCurrentWeek() {",
									"    const now = new Date();",
									"    const firstDay = new Date(now);",
									"    firstDay.setDate(now.getDate() - now.getDay() + 1);  // if Saturday is end, remove +1",
									"    return firstDay;",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let unpaid_account_receivable = null;",
									"    try {",
									"        unpaid_account_receivable = jsData.data.unpaid_amount_lifetime_categories;",
									"    } catch {",
									"        console.log(\"Can't get data\");",
									"    }",
									"",
									"    switch(testcase){",
									"        case 2:",
									"            pm.test(\"Got unpaid_account_receivable data\", function () {",
									"                pm.environment.set(\"C-unpaid_account_receivable\",unpaid_account_receivable);",
									"                pm.expect(unpaid_account_receivable != null).to.be.true;",
									"            });",
									"",
									"            postman.setNextRequest(\"get_report_account_receivable_customer\"); //get_report_account_receivable_customer",
									"            break;",
									"        case 8:",
									"            let invoice_obj = pm.environment.get(\"C-invoice_obj\");",
									"            let old_data = pm.environment.get(\"C-unpaid_account_receivable\");",
									"            let total_amount = parseFloat(invoice_obj.exp_total_amount);",
									"            console.log(\"total_amount: \" + (total_amount + old_data.unpaid_total));",
									"",
									"            // unpaid_total",
									"            pm.test(\"Total unpaid increase \" + total_amount, function () {",
									"                console.log(\"old: \" + old_data.unpaid_total);",
									"                console.log(\"new: \" + unpaid_account_receivable.unpaid_total);",
									"                pm.expect(unpaid_account_receivable.unpaid_total == total_amount + old_data.unpaid_total).to.be.true;",
									"            });",
									"",
									"            let due_date = new Date(invoice_obj.due_at);",
									"            let due_date_timestamp = Math.floor(due_date.getTime()/1000);",
									"            let today = new Date();",
									"            let today_timestamp = Math.floor(today.getTime()/1000);",
									"            let due_type;",
									"            let last_day_of_current_week = getLastDayOfCurrentWeek();",
									"            let last_day_of_current_week_stp = Math.floor(last_day_of_current_week.getTime()/1000);",
									"            let first_day_of_current_week = getFirstDayOfCurrentWeek();",
									"            let first_day_of_current_week_stp = Math.floor(first_day_of_current_week.getTime()/1000);",
									"            // console.log(\"debug: \" + (due_date_timestamp - today_timestamp));",
									"            if(due_date_timestamp > today_timestamp){",
									"                if(due_date_timestamp < last_day_of_current_week_stp){",
									"                    due_type = \"undue_n_7d\";",
									"                } else {",
									"                    due_type = \"undue\";",
									"                }",
									"            } else {",
									"                if(today_timestamp - due_date_timestamp > 90*24*60*60){",
									"                    due_type = \"overdue_over\";",
									"                } else if (today_timestamp - due_date_timestamp > 60*24*60*60){",
									"                    due_type = \"overdue_between\";",
									"                } else if (today_timestamp - due_date_timestamp > 30*24*60*60){",
									"                    due_type = \"overdue_less\";",
									"                } else {",
									"                    if(due_date_timestamp > first_day_of_current_week_stp){",
									"                        due_type = \"due_n_7d\";",
									"                    } else {",
									"                        due_type = \"due\";",
									"                    }",
									"                }",
									"            }",
									"            pm.environment.set(\"C-due_type\",due_type);",
									"            console.log(\"due_type: \" + due_type);",
									"",
									"            console.log(\"old: \",old_data);",
									"            console.log(\"new: \",unpaid_account_receivable);",
									"            switch(due_type){",
									"                case \"due\": case \"due_n_7d\":",
									"                    // unpaid_due",
									"                    pm.test(\"unpaid_due increase \" + total_amount, function () {",
									"                        console.log(\"old: \" + old_data.unpaid_due);",
									"                        console.log(\"expected: \" + (total_amount + old_data.unpaid_due));",
									"                        console.log(\"new: \" + unpaid_account_receivable.unpaid_due);",
									"                        pm.expect(unpaid_account_receivable.unpaid_due == total_amount + old_data.unpaid_due).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_less",
									"                    pm.test(\"nothing happen unpaid_overdue_less\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_less == old_data.unpaid_overdue_less).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_between",
									"                    pm.test(\"nothing happen unpaid_overdue_between\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_between == old_data.unpaid_overdue_between).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_over",
									"                    pm.test(\"nothing happen unpaid_overdue_over\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_over == old_data.unpaid_overdue_over).to.be.true;",
									"                    });",
									"                    break;",
									"                case \"overdue_less\":",
									"                    // unpaid_due",
									"                    pm.test(\"nothing happen unpaid_due\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_due == old_data.unpaid_due).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_less",
									"                    pm.test(\"unpaid_overdue_less increase \" + total_amount, function () {",
									"                        console.log(\"old: \" + old_data.unpaid_overdue_less);",
									"                        // console.log(\"expected: \" + (total_amount + old_data.unpaid_overdue_less));",
									"                        console.log(\"new: \" + unpaid_account_receivable.unpaid_overdue_less);",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_less == total_amount + old_data.unpaid_overdue_less).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_between",
									"                    pm.test(\"nothing happen unpaid_overdue_between\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_between == old_data.unpaid_overdue_between).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_over",
									"                    pm.test(\"nothing happen unpaid_overdue_over\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_over == old_data.unpaid_overdue_over).to.be.true;",
									"                    });",
									"                    break;",
									"                case \"overdue_between\":",
									"                    // unpaid_due",
									"                    pm.test(\"nothing happen unpaid_due\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_due == old_data.unpaid_due).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_less",
									"                    pm.test(\"nothing happen unpaid_overdue_less\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_less == old_data.unpaid_overdue_less).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_between",
									"                    pm.test(\"unpaid_overdue_between increase \" + total_amount, function () {",
									"                        console.log(\"old: \" + old_data.unpaid_overdue_between);",
									"                        console.log(\"new: \" + unpaid_account_receivable.unpaid_overdue_between);",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_between == total_amount + old_data.unpaid_overdue_between).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_over",
									"                    pm.test(\"nothing happen unpaid_overdue_over\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_over == old_data.unpaid_overdue_over).to.be.true;",
									"                    });",
									"                    break;",
									"                case \"overdue_over\":",
									"                    // unpaid_due",
									"                    pm.test(\"nothing happen unpaid_due\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_due == old_data.unpaid_due).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_less",
									"                    pm.test(\"nothing happen unpaid_overdue_less\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_less == old_data.unpaid_overdue_less).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_between",
									"                    pm.test(\"unpaid_overdue_between increase\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_between == old_data.unpaid_overdue_between).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_over",
									"                    pm.test(\"unpaid_overdue_over increase \" + total_amount, function () {",
									"                        console.log(\"old: \" + old_data.unpaid_overdue_over);",
									"                        console.log(\"new: \" + unpaid_account_receivable.unpaid_overdue_over);",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_over == total_amount + old_data.unpaid_overdue_over).to.be.true;",
									"                    });",
									"                    break;",
									"                default:",
									"                    // unpaid_due",
									"                    pm.test(\"nothing happen unpaid_due\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_due == old_data.unpaid_due).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_less",
									"                    pm.test(\"nothing happen unpaid_overdue_less\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_less == old_data.unpaid_overdue_less).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_between",
									"                    pm.test(\"unpaid_overdue_between increase\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_between == old_data.unpaid_overdue_between).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_over",
									"                    pm.test(\"nothing happen unpaid_overdue_over\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_over == old_data.unpaid_overdue_over).to.be.true;",
									"                    });",
									"                    break;",
									"            }",
									"",
									"            if(due_type == \"undue_n_7d\"){",
									"                // unpaid_overdue_more_than_today",
									"                pm.test(\"nothing happen unpaid_overdue_more_than_today\", function () {",
									"                    pm.expect(unpaid_account_receivable.unpaid_overdue_more_than_today == old_data.unpaid_overdue_more_than_today).to.be.true;",
									"                });",
									"",
									"                // unpaid_overdue_less_than_today",
									"                pm.test(\"unpaid_overdue_less_than_today increase \" + total_amount, function () {",
									"                    console.log(\"old: \" + old_data.unpaid_overdue_less_than_today);",
									"                    console.log(\"expected: \" + (total_amount + old_data.unpaid_overdue_less_than_today));",
									"                    console.log(\"new: \" + unpaid_account_receivable.unpaid_overdue_less_than_today);",
									"                    pm.expect(unpaid_account_receivable.unpaid_overdue_less_than_today == total_amount + old_data.unpaid_overdue_less_than_today).to.be.true;",
									"                });",
									"",
									"                // unpaid_overdue_in_week",
									"                pm.test(\"unpaid_overdue_in_week increase \" + total_amount, function () {",
									"                    console.log(\"old: \" + old_data.unpaid_overdue_in_week);",
									"                    console.log(\"expected: \" + (total_amount + old_data.unpaid_overdue_in_week));",
									"                    console.log(\"new: \" + unpaid_account_receivable.unpaid_overdue_in_week);",
									"                    pm.expect(unpaid_account_receivable.unpaid_overdue_in_week == total_amount + old_data.unpaid_overdue_in_week).to.be.true;",
									"                });",
									"            } else if(due_type == \"due_n_7d\"){",
									"                // unpaid_overdue_more_than_today",
									"                pm.test(\"unpaid_overdue_more_than_today increase \" + total_amount, function () {",
									"                    console.log(\"old: \" + old_data.unpaid_overdue_more_than_today);",
									"                    console.log(\"expected: \" + (total_amount + old_data.unpaid_overdue_more_than_today));",
									"                    console.log(\"new: \" + unpaid_account_receivable.unpaid_overdue_more_than_today);",
									"                    pm.expect(unpaid_account_receivable.unpaid_overdue_more_than_today == total_amount + old_data.unpaid_overdue_more_than_today).to.be.true;",
									"                });",
									"",
									"                // unpaid_overdue_less_than_today",
									"                pm.test(\"nothing happen unpaid_overdue_less_than_today\", function () {",
									"                    pm.expect(unpaid_account_receivable.unpaid_overdue_less_than_today == old_data.unpaid_overdue_less_than_today).to.be.true;",
									"                });",
									"",
									"                // unpaid_overdue_in_week",
									"                pm.test(\"unpaid_overdue_in_week increase \" + total_amount, function () {",
									"                    console.log(\"old: \" + old_data.unpaid_overdue_in_week);",
									"                    console.log(\"expected: \" + (total_amount + old_data.unpaid_overdue_in_week));",
									"                    console.log(\"new: \" + unpaid_account_receivable.unpaid_overdue_in_week);",
									"                    pm.expect(unpaid_account_receivable.unpaid_overdue_in_week == total_amount + old_data.unpaid_overdue_in_week).to.be.true;",
									"                });",
									"            } else if (due_type == \"undue\"){",
									"                // unpaid_overdue_more_than_today",
									"                pm.test(\"nothing happen unpaid_overdue_more_than_today\", function () {",
									"                    pm.expect(unpaid_account_receivable.unpaid_overdue_more_than_today == old_data.unpaid_overdue_more_than_today).to.be.true;",
									"                });",
									"",
									"                // unpaid_overdue_less_than_today",
									"                pm.test(\"unpaid_overdue_less_than_today increase \" + total_amount, function () {",
									"                    console.log(\"old: \" + old_data.unpaid_overdue_less_than_today);",
									"                    console.log(\"expected: \" + (total_amount + old_data.unpaid_overdue_less_than_today));",
									"                    console.log(\"new: \" + unpaid_account_receivable.unpaid_overdue_less_than_today);",
									"                    pm.expect(unpaid_account_receivable.unpaid_overdue_less_than_today == total_amount + old_data.unpaid_overdue_less_than_today).to.be.true;",
									"                });",
									"",
									"                // unpaid_overdue_in_week",
									"                pm.test(\"nothing happen unpaid_overdue_in_week\", function () {",
									"                    pm.expect(unpaid_account_receivable.unpaid_overdue_in_week == old_data.unpaid_overdue_in_week).to.be.true;",
									"                });",
									"            } else {",
									"                // unpaid_overdue_more_than_today",
									"                pm.test(\"unpaid_overdue_more_than_today increase \" + total_amount, function () {",
									"                    console.log(\"old: \" + old_data.unpaid_overdue_more_than_today);",
									"                    console.log(\"expected: \" + (total_amount + old_data.unpaid_overdue_more_than_today));",
									"                    console.log(\"new: \" + unpaid_account_receivable.unpaid_overdue_more_than_today);",
									"                    pm.expect(unpaid_account_receivable.unpaid_overdue_more_than_today == total_amount + old_data.unpaid_overdue_more_than_today).to.be.true;",
									"                });",
									"",
									"                // unpaid_overdue_less_than_today",
									"                pm.test(\"nothing happen unpaid_overdue_less_than_today\", function () {",
									"                    pm.expect(unpaid_account_receivable.unpaid_overdue_less_than_today == old_data.unpaid_overdue_less_than_today).to.be.true;",
									"                });",
									"",
									"                // unpaid_overdue_in_week",
									"                pm.test(\"nothing happen unpaid_overdue_in_week\", function () {",
									"                    pm.expect(unpaid_account_receivable.unpaid_overdue_in_week == old_data.unpaid_overdue_in_week).to.be.true;",
									"                });",
									"            }",
									"",
									"            // update new data",
									"            pm.environment.set(\"C-unpaid_account_receivable\",unpaid_account_receivable);",
									"",
									"            postman.setNextRequest(\"get_report_account_receivable_customer\"); //get_report_account_receivable_customer",
									"            break;",
									"        case 5:",
									"            let old_unpaid_account_receivable = pm.environment.get(\"C-unpaid_account_receivable\");",
									"            pm.test(\"Nothing happen with unpaid_account_receivable\", function () {",
									"                console.log(\"old: \", unpaid_account_receivable);",
									"                console.log(\"new: \", old_unpaid_account_receivable);",
									"                pm.expect(JSON.stringify(unpaid_account_receivable) == JSON.stringify(old_unpaid_account_receivable)).to.be.true;",
									"            });",
									"",
									"            // nếu bị bug, có thay đổi, cần lưu lại data mới",
									"            pm.environment.set(\"C-unpaid_account_receivable\",unpaid_account_receivable);",
									"",
									"            postman.setNextRequest(\"get_report_account_receivable_customer\"); //get_report_account_receivable_customer",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get report account receivable unpaid, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/report/account-receivable-card-unpaid",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"report",
								"account-receivable-card-unpaid"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_report_account_receivable_customer",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let page = pm.environment.get(\"C-page\");",
									"",
									"let page_size = 50;",
									"if(!page){",
									"    page = 1;",
									"}",
									"",
									"let payload = {",
									"    \"account_key\": \"A3001\",",
									"    \"branch_id\": pm.environment.get(\"C-branch_id\"),",
									"    \"business_id\": parseInt(pm.environment.get(\"C-business_id\")),",
									"    \"page\": page,",
									"    \"page_size\": page_size",
									"}",
									"",
									"console.log(\"payload: \",payload);",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = JSON.parse(responseBody);",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let total_pages = jsData.meta.total_pages;",
									"    let page = pm.environment.get(\"C-page\");",
									"",
									"    let list_report_customer, old_list_report_customer;",
									"    switch(testcase){",
									"        case 2:",
									"            list_report_customer = pm.environment.get(\"C-list_report_customer\");",
									"            if(!list_report_customer){",
									"                list_report_customer = [];",
									"            }",
									"            break;",
									"        case 5: case 8:",
									"            old_list_report_customer = pm.environment.get(\"C-old_list_report_customer\");",
									"            if(!old_list_report_customer){",
									"                old_list_report_customer = pm.environment.get(\"C-list_report_customer\");",
									"                pm.environment.unset(\"C-list_report_customer\");",
									"                pm.environment.set(\"C-old_list_report_customer\",old_list_report_customer);",
									"            }",
									"",
									"            list_report_customer = pm.environment.get(\"C-list_report_customer\");",
									"            if(!list_report_customer){",
									"                list_report_customer = [];",
									"            }",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow\");",
									"            break;",
									"    }",
									"",
									"    for(let item in jsData.data){",
									"        list_report_customer[list_report_customer.length] = {",
									"            \"contact_id\":jsData.data[item].contact_id,",
									"            \"unpaid_total\":jsData.data[item].unpaid_total,",
									"            \"unpaid_due\":jsData.data[item].unpaid_due,",
									"            \"unpaid_overdue_less\":jsData.data[item].unpaid_overdue_less,",
									"            \"unpaid_overdue_between\":jsData.data[item].unpaid_overdue_between,",
									"            \"unpaid_overdue_over\":jsData.data[item].unpaid_overdue_over,",
									"            \"full_count\":jsData.data[item].full_count,",
									"            \"contact_name\":jsData.data[item].contact_info.contact_name,",
									"            \"contact_phone\":jsData.data[item].contact_info.contact_phone",
									"        }",
									"    }",
									"    pm.environment.set(\"C-list_report_customer\",list_report_customer);",
									"",
									"    if(page >= total_pages){",
									"        // must clear page & page_size",
									"        pm.environment.unset(\"C-page\");",
									"        pm.environment.unset(\"C-page_size\");",
									"",
									"        let contact_id = pm.environment.get(\"C-contact_id\");",
									"        let invoice_obj = pm.environment.get(\"C-invoice_obj\");",
									"        let total_amount;",
									"        let isFound = false, hasRecord = false;",
									"        switch(testcase){",
									"            case 2:",
									"                pm.test(\"Got all record! \" + list_report_customer.length, function () {",
									"                    pm.expect(list_report_customer.length > 0).to.be.true;",
									"                });",
									"",
									"                postman.setNextRequest(\"get_report_income_expense\"); // get_list_invoice, get_report_income_expense",
									"                break;",
									"            case 8:",
									"                total_amount = parseFloat(invoice_obj.exp_total_amount);",
									"                let record_obj = null;",
									"                let inList = false;",
									"                for(let i in old_list_report_customer){",
									"                    if(old_list_report_customer[i].contact_id == contact_id){",
									"                        inList = true;",
									"                        record_obj = old_list_report_customer[i];",
									"                        break;",
									"                    }",
									"                }",
									"",
									"                if(inList){",
									"                    pm.test(\"Nothing happen with total record\", function () {",
									"                        pm.expect(list_report_customer.length == old_list_report_customer.length).to.be.true;",
									"                    });",
									"                } else {",
									"                    pm.test(\"Total record increase 1\", function () {",
									"                        pm.expect(list_report_customer.length == old_list_report_customer.length + 1).to.be.true;",
									"                    });",
									"                    record_obj = {",
									"                        \"contact_id\":invoice_obj.contact_id,",
									"                        \"unpaid_total\":0,",
									"                        \"unpaid_due\":0,",
									"                        \"unpaid_overdue_less\":0,",
									"                        \"unpaid_overdue_between\":0,",
									"                        \"unpaid_overdue_over\":0,",
									"                        \"full_count\":0,",
									"                        \"contact_name\":null,",
									"                        \"contact_phone\":null",
									"                    }",
									"                }",
									"",
									"                let due_type = pm.environment.get(\"C-due_type\");",
									"                for(let i in list_report_customer){",
									"                    if(list_report_customer[i].contact_id == contact_id){",
									"                        isFound = true;",
									"                        console.log(\"Found \" + list_report_customer[i].contact_name + ' - ' + list_report_customer[i].contact_phone);",
									"                        ",
									"                        pm.test(\"unpaid_total increase \" + total_amount, function () {",
									"                            console.log(\"old: \" + record_obj.unpaid_total);",
									"                            console.log(\"expected: \" + (record_obj.unpaid_total + total_amount));",
									"                            console.log(\"new: \" + list_report_customer[i].unpaid_total);",
									"                            pm.expect(list_report_customer[i].unpaid_total.toFixed(2) == (record_obj.unpaid_total + total_amount).toFixed(2)).to.be.true;",
									"                        });",
									"",
									"                        switch(due_type){",
									"                            case \"due\": case \"due_n_7d\":",
									"                                // unpaid_due",
									"                                pm.test(\"unpaid_due increase \" + total_amount, function () {",
									"                                    console.log(\"old: \" + record_obj.unpaid_due);",
									"                                    console.log(\"new: \" + list_report_customer[i].unpaid_due);",
									"                                    pm.expect(list_report_customer[i].unpaid_due.toFixed(2) == (record_obj.unpaid_due + total_amount).toFixed(2)).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_less",
									"                                pm.test(\"nothing happen unpaid_overdue_less\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_less == record_obj.unpaid_overdue_less).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_between",
									"                                pm.test(\"nothing happen unpaid_overdue_between\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_between == record_obj.unpaid_overdue_between).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_over",
									"                                pm.test(\"nothing happen unpaid_overdue_over\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_over == record_obj.unpaid_overdue_over).to.be.true;",
									"                                });",
									"                                break;",
									"                            case \"overdue_less\":",
									"                                // unpaid_due",
									"                                pm.test(\"nothing happen unpaid_due\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_due == record_obj.unpaid_due).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_less",
									"                                pm.test(\"unpaid_overdue_less increase \" + total_amount, function () {",
									"                                    console.log(\"old: \" + record_obj.unpaid_overdue_less);",
									"                                    console.log(\"new: \" + list_report_customer[i].unpaid_overdue_less);",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_less.toFixed(2) == (total_amount + record_obj.unpaid_overdue_less).toFixed(2)).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_between",
									"                                pm.test(\"nothing happen unpaid_overdue_between\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_between == record_obj.unpaid_overdue_between).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_over",
									"                                pm.test(\"nothing happen unpaid_overdue_over\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_over == record_obj.unpaid_overdue_over).to.be.true;",
									"                                });",
									"                                break;",
									"                            case \"overdue_between\":",
									"                                // unpaid_due",
									"                                pm.test(\"nothing happen unpaid_due\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_due == record_obj.unpaid_due).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_less",
									"                                pm.test(\"nothing happen unpaid_overdue_less\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_less == record_obj.unpaid_overdue_less).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_between",
									"                                pm.test(\"unpaid_overdue_between increase \" + total_amount, function () {",
									"                                    console.log(\"old: \" + record_obj.unpaid_overdue_between);",
									"                                    console.log(\"new: \" + list_report_customer[i].unpaid_overdue_between);",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_between.toFixed(2) == (total_amount + record_obj.unpaid_overdue_between).toFixed(2)).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_over",
									"                                pm.test(\"nothing happen unpaid_overdue_over\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_over == record_obj.unpaid_overdue_over).to.be.true;",
									"                                });",
									"                                break;",
									"                            case \"overdue_over\":",
									"                                // unpaid_due",
									"                                pm.test(\"nothing happen unpaid_due\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_due == record_obj.unpaid_due).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_less",
									"                                pm.test(\"nothing happen unpaid_overdue_less\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_less == record_obj.unpaid_overdue_less).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_between",
									"                                pm.test(\"unpaid_overdue_between increase\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_between == record_obj.unpaid_overdue_between).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_over",
									"                                pm.test(\"unpaid_overdue_over increase \" + total_amount, function () {",
									"                                    console.log(\"old: \" + record_obj.unpaid_overdue_over);",
									"                                    console.log(\"new: \" + list_report_customer[i].unpaid_overdue_over);",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_over.toFixed(2) == (total_amount + record_obj.unpaid_overdue_over).toFixed(2)).to.be.true;",
									"                                });",
									"                                break;",
									"                            default:",
									"                                // unpaid_due",
									"                                pm.test(\"nothing happen unpaid_due\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_due == record_obj.unpaid_due).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_less",
									"                                pm.test(\"nothing happen unpaid_overdue_less\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_less == record_obj.unpaid_overdue_less).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_between",
									"                                pm.test(\"nothing happen unpaid_overdue_between\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_between == record_obj.unpaid_overdue_between).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_over",
									"                                pm.test(\"nothing happen unpaid_overdue_over\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_over == record_obj.unpaid_overdue_over).to.be.true;",
									"                                });",
									"                                break;",
									"                        }",
									"                        break;",
									"                    }",
									"                }",
									"",
									"                pm.test(\"Found new product\", function () {",
									"                    pm.expect(isFound).to.be.true;",
									"                });",
									"",
									"                // clear old data to update at next case",
									"                pm.environment.unset(\"C-old_list_report_customer\");",
									"",
									"                postman.setNextRequest(\"get_report_income_expense\"); // get_report_income_expense",
									"                break;",
									"            case 5:",
									"                old_list_report_customer = pm.environment.get(\"C-list_report_customer\");",
									"                pm.test(\"Nothing happen with total record: \" + list_report_customer.length, function () {",
									"                    console.log(\"old: \", old_list_report_customer);",
									"                    console.log(\"new: \", list_report_customer);",
									"                    pm.expect(list_report_customer.length == old_list_report_customer.length).to.be.true;",
									"                });",
									"",
									"                loop:",
									"                for(let j in old_list_report_customer){",
									"                    if(old_list_report_customer[j].contact_id == contact_id){",
									"                        for(let i in list_report_customer){",
									"                            if(list_report_customer[i].contact_id == contact_id){",
									"                                pm.test(\"Nothing happen with data\", function () {",
									"                                    pm.expect(JSON.stringify(list_report_customer[i]) == JSON.stringify(old_list_report_customer[j])).to.be.true;",
									"                                });",
									"                                isFound = true;",
									"                                hasRecord = true;",
									"                                break loop;",
									"                            }",
									"                        }",
									"                        break;",
									"                    }",
									"                }",
									"",
									"                if(!isFound){",
									"                    for(let i in list_report_customer){",
									"                        if(list_report_customer[i].contact_id == contact_id){",
									"                            hasRecord = true;",
									"                            break;",
									"                        }",
									"                    }",
									"                }",
									"",
									"                // console.log(\"hasRecord: \" + hasRecord);",
									"                // console.log(\"isFound: \" + isFound);",
									"                if(hasRecord){",
									"                    pm.test(\"Found data record\", function () {",
									"                        pm.expect(isFound).to.be.true;",
									"                    });",
									"                } else {",
									"                    pm.test(\"Checked data record\", function () {",
									"                        pm.expect(isFound).to.be.false;",
									"                    });",
									"                }",
									"",
									"                // nếu bị bug, có thay đổi, cần lưu lại data mới",
									"                pm.environment.set(\"C-list_report_customer\",list_report_customer);",
									"                pm.environment.unset(\"C-old_list_report_customer\");",
									"",
									"                postman.setNextRequest(\"get_report_income_expense\"); // get_report_income_expense",
									"                break;",
									"            default:",
									"                console.log(\"Missing flow, end test\");",
									"                postman.setNextRequest(null);",
									"                break;",
									"        }",
									"    } else {",
									"        page++;",
									"        pm.environment.set(\"C-page\",page);",
									"",
									"        console.log(\"view next page (\" + page + \") to get more product\");",
									"        postman.setNextRequest(\"get_report_account_receivable_customer\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get list product, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/report/account-receivable-customer-unpaid",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"report",
								"account-receivable-customer-unpaid"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_report_income_expense",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"// lấy full tháng hiện tại",
									"let today = new Date();",
									"let start_current_month = new Date(today.getFullYear(), today.getMonth(), 1);",
									"let end_current_month = new Date(today.getFullYear(), today.getMonth() + 1, 1);",
									"",
									"// lấy full tháng trước",
									"let start_last_month = new Date(today.getFullYear(), today.getMonth() - 1, 1);",
									"let end_last_month = new Date(today.getFullYear(), today.getMonth(), 1);",
									"",
									"// lấy full ngày hiện tại",
									"// let firstDay = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0 ,0, 0);",
									"// let lastDay = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 23, 59 ,59, 0);",
									"",
									"// lấy n ngày đến hiện tại",
									"// let firstDayTimestamp = Math.floor(firstDay.getTime()/1000) - 2*24*60*60;",
									"// let start_day_ago = new Date(firstDayTimestamp*1000);",
									"",
									"let current_period_start = start_current_month.toISOString();",
									"let current_period_end = end_current_month.toISOString();",
									"let previous_period_start = start_last_month.toISOString();",
									"let previous_period_end = end_last_month.toISOString();",
									"",
									"/**",
									"/**",
									" * Khi tạo invoice chỉ check income thay đổi",
									" */",
									"",
									"let report_type = \"income\";",
									"let period = \"month\";",
									"// let full_check = pm.environment.get(\"C-full_check\");",
									"// if(!full_check){",
									"//     full_check = 1;",
									"//     pm.environment.set(\"C-full_check\",full_check);",
									"//     report_type = \"income\";",
									"// } else {",
									"//     report_type = \"expense\";",
									"// }",
									"// console.log(\"full_check: \" + full_check);",
									"pm.environment.set(\"C-period\",period);",
									"",
									"let payload = {",
									"    \"branch_id\": pm.environment.get(\"C-branch_id\"),",
									"    \"business_id\": parseInt(pm.environment.get(\"C-business_id\")),",
									"    \"report_type\": report_type,",
									"    \"period\": period",
									"    // \"current_period_start\": current_period_start,",
									"    // \"current_period_end\": current_period_end",
									"}",
									"",
									"console.log(\"payload: \",payload);",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));",
									"",
									"pm.environment.set(\"C-current_period_start\",current_period_start);",
									"pm.environment.set(\"C-current_period_end\",current_period_end);",
									"pm.environment.set(\"C-previous_period_start\",previous_period_start);",
									"pm.environment.set(\"C-previous_period_end\",previous_period_end);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ============================= sort by key",
									"function sortByKey(array, key, type) {",
									"    if(type == \"asc\"){",
									"        return array.sort(function(a, b) {",
									"            var x = a[key]; var y = b[key];",
									"            return ((x > y) ? -1 : ((x < y) ? 1 : 0));",
									"        });",
									"    } else {",
									"        return array.sort(function(a, b) {",
									"            var x = a[key]; var y = b[key];",
									"            return ((x < y) ? -1 : ((x > y) ? 1 : 0));",
									"        });",
									"    }",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let report_income = null;",
									"    try {",
									"        report_income = jsData.data;",
									"    } catch {",
									"        console.log(\"Can't get report cash_flow data\");",
									"    }",
									"",
									"    let old_report_income;",
									"    switch(testcase){",
									"        case 2:",
									"            pm.test(\"Got report_income\", function () {",
									"                pm.expect(report_income != null).to.be.true;",
									"            });",
									"            pm.environment.set(\"C-report_income\",report_income);",
									"            // console.log(\"report_income: \" + JSON.stringify(report_income));",
									"",
									"            postman.setNextRequest(\"report_profit_loss_period\"); // report_profit_loss_period",
									"            break;",
									"        case 8:",
									"            let ranTimeCase = pm.environment.get(\"C-ranTimeCase\");",
									"            // hiện tại report đang lấy thời gian 1 tháng hiện tại => chỉ handle với case ranTimeCase == 2;",
									"            if(ranTimeCase == 2){",
									"                let invoice_obj = pm.environment.get(\"C-invoice_obj\");",
									"                old_report_income = pm.environment.get(\"C-report_income\");",
									"                /**",
									"                 * Check rule:",
									"                 * - Xử lý data cho invoice_obj: sum amount của tất cả product cùng coa",
									"                 * - IF line_item trong invoice_obj có tồn tại trong old_report_income => thay đổi total_amount tương ứng",
									"                 * - ELSE:",
									"                 *    - IF line_item trong invoice_obj có tồn tại trong report_income => so sánh total_amount của product tương ứng với old_report_income (*)",
									"                 * Note:",
									"                 * (*) Cách so sánh: report_income[i].total_amount - invoice_obj.items[item].before_tax_amount < min(old_report_income.amount)",
									"                 */",
									"",
									"                console.log(\"invoice_obj: \", invoice_obj);",
									"                console.log(\"===================\");",
									"                console.log(\"old_report_income: \",old_report_income);",
									"                console.log(\"===================\");",
									"                console.log(\"report_income: \",report_income);",
									"",
									"                let list_item_objs = [];",
									"                for(let item in invoice_obj.items){",
									"                    if(list_item_objs.length == 0){",
									"                        list_item_objs[list_item_objs.length] = {",
									"                            \"account_id\":invoice_obj.items[item].account_id,",
									"                            \"name\":invoice_obj.items[item].name,",
									"                            \"before_tax_amount\":invoice_obj.items[item].before_tax_amount",
									"                        }",
									"                    } else {",
									"                        let is_found_item = false;",
									"                        for(let i in list_item_objs){",
									"                            if(list_item_objs[i].account_id == invoice_obj.items[item].account_id){",
									"                                is_found_item = true;",
									"                                list_item_objs[i].before_tax_amount += invoice_obj.items[item].before_tax_amount;",
									"                                break;",
									"                            }",
									"                        }",
									"",
									"                        if(!is_found_item){",
									"                            list_item_objs[list_item_objs.length] = {",
									"                                \"account_id\":invoice_obj.items[item].account_id,",
									"                                \"name\":invoice_obj.items[item].name,",
									"                                \"before_tax_amount\":invoice_obj.items[item].before_tax_amount",
									"                            }",
									"                        }",
									"                    }",
									"                }",
									"                console.log(\"===================\");",
									"                console.log(\"list_item_objs: \",list_item_objs);",
									"",
									"                let old_list_objs = [];",
									"                for(let i in old_report_income){",
									"                    for(let item in list_item_objs){",
									"                        if(old_report_income[i].coa_id == list_item_objs[item].account_id){",
									"                            console.log(\"Find product \" + list_item_objs[item].name + \" with coa \" + old_report_income[i].coa_name + \" in report!\");",
									"                            old_list_objs[old_list_objs.length] = old_report_income[i];",
									"",
									"                            old_list_objs[old_list_objs.length - 1 ].amount = list_item_objs[item].before_tax_amount;",
									"                            // ở đây ko break vì có thể có nhiều product;",
									"                        }",
									"                    }",
									"                }",
									"",
									"                let count = 0;",
									"                if(old_list_objs.length > 0){",
									"                    for(let i in old_list_objs){",
									"                        for(let j in report_income){",
									"                            if(old_list_objs[i].coa_id == report_income[j].coa_id){",
									"                                count++;",
									"                                pm.test(\"coa_name \" + old_list_objs[i].coa_name + \" increase \" + old_list_objs[i].amount, function () {",
									"                                    pm.expect(report_income[j].total_amount).to.eql(old_list_objs[i].total_amount + old_list_objs[i].amount);",
									"                                });",
									"                                break;",
									"                            }",
									"                        }",
									"                    }",
									"",
									"                    // check total",
									"                } else {",
									"                    let new_list_objs = [];",
									"                    for(let i in report_income){",
									"                        for(let item in list_item_objs){",
									"                            if(report_income[i].coa_id == list_item_objs[item].account_id){",
									"                                new_list_objs[new_list_objs.length] = report_income[i];",
									"",
									"                                new_list_objs[new_list_objs.length - 1 ].amount = list_item_objs[item].before_tax_amount;",
									"                                // ở đây ko break vì có thể có nhiều product;",
									"                            }",
									"                        }",
									"                    }",
									"",
									"                    if(new_list_objs.length > 0){",
									"                        for(let i in new_list_objs){",
									"                            for(let j in report_income){",
									"                                if(new_list_objs[i].coa_id == report_income[j].coa_id){",
									"                                    pm.test(\"coa_name \" + new_list_objs[i].coa_name + \" increase \" + new_list_objs[i].amount, function () {",
									"                                        pm.expect(old_report_income[old_report_income.length - 1].total_amount > new_list_objs[i].total_amount + new_list_objs[i].amount).to.be.true;",
									"                                    });",
									"                                    break;",
									"                                }",
									"                            }",
									"                        }",
									"                    }",
									"                }",
									"            } else {",
									"                // pm.test(\"Nothing happen with report_income\", function () {",
									"                //     pm.expect(JSON.stringify(report_income) == JSON.stringify(old_report_income)).to.be.true;",
									"                // });",
									"            }",
									"         ",
									"            // console.log(\"-------- End Testsuite 06 --------\");",
									"            postman.setNextRequest(\"report_profit_loss_period\");",
									"            break;",
									"        case 5:",
									"            old_report_income = pm.environment.get(\"C-report_income\");",
									"            pm.test(\"Nothing happen with report_income\", function () {",
									"                console.log(\"old_report_income: \",old_report_income);",
									"                console.log(\"===================\");",
									"                console.log(\"report_income: \",report_income);",
									"                pm.expect(JSON.stringify(report_income) == JSON.stringify(old_report_income)).to.be.true;",
									"            });",
									"            ",
									"            postman.setNextRequest(\"report_profit_loss_period\"); // report_profit_loss_period",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get report cash_flow, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-ledger/api/v1/report/summary-by-category",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-ledger",
								"api",
								"v1",
								"report",
								"summary-by-category"
							]
						}
					},
					"response": []
				},
				{
					"name": "report_profit_loss_period",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/**",
									" * \"report_type\": sum,income,expense",
									" * Note: report_type = sum => hiện tại bị null dates_data",
									" * - C1: call từng loại income, expense dể lấy dates_data",
									" * - C2: wait fixing from dev",
									" * => tạm thời xử lý case sum, 2 case còn lại sẽ handle sau",
									" */",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let full_check = pm.environment.get(\"C-full_check\");",
									"if(!full_check){",
									"    full_check = 1;",
									"    pm.environment.set(\"C-full_check\",full_check);",
									"    report_type = \"income\";",
									"} else {",
									"    report_type = \"expense\"; // expense, profit",
									"}",
									"pm.environment.set(\"C-report_type\",report_type);",
									"console.log(\"full_check: \" + full_check);",
									"console.log(\"report_type: \" + report_type);",
									"",
									"let payload = {",
									"    \"business_id\": parseInt(pm.environment.get(\"C-business_id\")),",
									"    \"period\": \"month\",",
									"    \"report_type\": report_type",
									"}",
									"",
									"console.log(\"payload: \",payload);",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ============================= getFirstDayOfMonth",
									"function getFirstDayOfMonth(date_timestamp){",
									"  let setDate = new Date(date_timestamp*1000);",
									"  let getDate = new Date(setDate.getFullYear(), setDate.getMonth(), 1);",
									"  return getDate.toISOString();",
									"}",
									"",
									"// ============================= getLastDayOfMonth",
									"function getLastDayOfMonth(date_timestamp){",
									"  let setDate = new Date(date_timestamp*1000);",
									"  let firstDayOfNextMonth = new Date(setDate.getFullYear(), setDate.getMonth() + 1, 1);",
									"  let lastDayOfMonth = new Date(firstDayOfNextMonth - 1);",
									"  return lastDayOfMonth.toISOString();",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let full_check = pm.environment.get(\"C-full_check\");",
									"    let profit_period = null, loss_period = null;",
									"    try {",
									"        if(full_check == 1){",
									"            profit_period = jsData.data;",
									"        } else {",
									"            loss_period = jsData.data;",
									"        }",
									"        /**",
									"         * period: week, month, year",
									"         * sum_card_data",
									"         * dates_data",
									"         */",
									"    } catch {",
									"        console.log(\"Can't get report cash_flow data\");",
									"    }",
									"",
									"    let invoice_obj, invoice_date;",
									"    switch(testcase){",
									"        case 2:",
									"            if(full_check == 1){",
									"                pm.test(\"Got profit_period \", function () {",
									"                    pm.environment.set(\"C-profit_period\",profit_period);",
									"                    pm.expect(profit_period != null).to.be.true;",
									"                });",
									"                pm.environment.set(\"C-profit_period\",profit_period);",
									"                // console.log(\"profit_period: \", profit_period);",
									"",
									"                full_check++;",
									"                pm.environment.set(\"C-full_check\",full_check);",
									"                postman.setNextRequest(\"report_profit_loss_period\");",
									"            } else {",
									"                pm.test(\"Got loss_period \", function () {",
									"                    pm.environment.set(\"C-loss_period\",loss_period);",
									"                    pm.expect(loss_period != null).to.be.true;",
									"                });",
									"                pm.environment.set(\"C-loss_period\",loss_period);",
									"                // console.log(\"loss_period: \", loss_period);",
									"",
									"                pm.environment.unset(\"C-full_check\");",
									"                // postman.setNextRequest(\"get_list_invoice\"); // get_list_invoice",
									"                postman.setNextRequest(\"get_chart_balance_change\"); // get_chart_balance_change",
									"            }",
									"            break;",
									"        case 5:",
									"            invoice_obj = pm.environment.get(\"C-invoice_obj\");",
									"            invoice_date = invoice_obj.value_at.substring(0,10);",
									"            // Invoice sẽ tăng profit (income), Bill sẽ tăng loss (chi phí)",
									"            ",
									"            if(full_check == 1){",
									"                let old_profit_period = pm.environment.get(\"C-profit_period\");",
									"                // console.log(\"debug old_loss_period: \", old_profit_period);",
									"                // console.log(\"debug loss_period: \", profit_period);",
									"",
									"                pm.test(\"Nothing happen!!!\", function () {",
									"                    pm.expect(JSON.stringify(profit_period) == JSON.stringify(old_profit_period)).to.be.true;",
									"                });",
									"",
									"                full_check++;",
									"                pm.environment.set(\"C-full_check\",full_check);",
									"                postman.setNextRequest(\"report_profit_loss_period\");",
									"            } else {",
									"                let old_loss_period = pm.environment.get(\"C-loss_period\");",
									"                // console.log(\"debug old_loss_period: \", old_loss_period);",
									"                // console.log(\"debug loss_period: \", loss_period);",
									"                ",
									"                pm.test(\"Nothing happen!!!\", function () {",
									"                    pm.expect(JSON.stringify(loss_period) == JSON.stringify(old_loss_period)).to.be.true;",
									"                });",
									"",
									"                pm.environment.unset(\"C-full_check\");",
									"",
									"                testcase++;",
									"                pm.environment.set(\"C-testcase\",testcase);",
									"                postman.setNextRequest(\"calculate_invoice\"); // calculate_invoice",
									"            }",
									"            break;",
									"        case 8:",
									"            invoice_obj = pm.environment.get(\"C-invoice_obj\");",
									"            invoice_date = invoice_obj.value_at;",
									"            console.log(\"invoice_date: \" + invoice_date);",
									"",
									"            if(full_check == 1){",
									"                let old_profit_period = pm.environment.get(\"C-profit_period\");",
									"                // console.log(\"debug old_loss_period: \", old_profit_period);",
									"                // console.log(\"debug loss_period: \", profit_period);",
									"",
									"                // do thời gian lọc là tháng hiện tại => chỉ thay đổi khi value_at nằm trong tháng hiện tại",
									"                let today = new Date();",
									"                let today_tmp = Math.floor(today.getTime()/1000);",
									"                let firstDayOfThisMonth = getFirstDayOfMonth(today_tmp);",
									"                let lastDayOfThisMonth = getLastDayOfMonth(today_tmp);",
									"                if(invoice_date < firstDayOfThisMonth || invoice_date > lastDayOfThisMonth){",
									"                    // nothing happen",
									"                    pm.test(\"Nothing happen!!!\", function () {",
									"                        pm.expect(JSON.stringify(profit_period) == JSON.stringify(old_profit_period)).to.be.true;",
									"                    });",
									"                } else {",
									"                    invoice_date = invoice_date.substring(0,10);",
									"",
									"                    let income_product = 0, income_discount = 0;",
									"                    for(let i in invoice_obj.items){",
									"                        income_product += invoice_obj.items[i].before_tax_amount;",
									"                        income_discount += invoice_obj.items[i].discount_amount;",
									"                    }",
									"                    let exp_change = income_product - income_discount;",
									"                    // có thay đổi => total_income increase",
									"                    pm.test(\"total_income increase \" + exp_change, function () {",
									"                        pm.expect(profit_period.sum_card_data.total_income == old_profit_period.sum_card_data.total_income + exp_change).to.be.true;",
									"                    });",
									"                    // thay đổi ngày tương ứng",
									"                    let old_date = null, act_date = null;",
									"                    for(let i in profit_period.dates_data){",
									"                        let day_i = profit_period.dates_data[i].date.substring(0,10);",
									"                        if(day_i == invoice_date){",
									"                            act_date = profit_period.dates_data[i];",
									"                            break;",
									"                        }",
									"                    }",
									"",
									"                    for(let i in old_profit_period.dates_data){",
									"                        let day_i = old_profit_period.dates_data[i].date.substring(0,10);",
									"                        if(day_i == invoice_date){",
									"                            old_date = old_profit_period.dates_data[i];",
									"                            break;",
									"                        }",
									"                    }",
									"",
									"                    if(old_date != null && act_date != null){",
									"                        console.log(\"act_date: \",act_date);",
									"                        console.log(\"old_date: \",old_date);",
									"                        pm.test(\"income at \" + invoice_date + \" increase \" + exp_change, function () {",
									"                            pm.expect(act_date.income == old_date.income + exp_change).to.be.true;",
									"                        });",
									"                    }",
									"                }",
									"",
									"                full_check++;",
									"                pm.environment.set(\"C-full_check\",full_check);",
									"                postman.setNextRequest(\"report_profit_loss_period\");",
									"            } else {",
									"                let old_loss_period = pm.environment.get(\"C-loss_period\");",
									"                // console.log(\"debug old_loss_period: \", old_loss_period);",
									"                // console.log(\"debug loss_period: \", loss_period);",
									"                ",
									"                pm.test(\"Nothing happen!!!\", function () {",
									"                    pm.expect(JSON.stringify(loss_period) == JSON.stringify(old_loss_period)).to.be.true;",
									"                });",
									"",
									"                pm.environment.unset(\"C-full_check\");",
									"",
									"                // console.log(\"-------- End Testsuite 06 --------\");",
									"                postman.setNextRequest(\"get_chart_balance_change\"); // get_chart_balance_change",
									"            }",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get report cash_flow, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-location-timezone",
								"value": "Asia/Saigon"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-ledger/api/v1/report/profit-loss-period",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-ledger",
								"api",
								"v1",
								"report",
								"profit-loss-period"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "report-web",
			"item": [
				{
					"name": "cash-flow",
					"item": [
						{
							"name": "get_cash_flow_detail",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "authorization",
										"value": "Bearer {{C-userToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"business_id\": {{C-business_id}},\n    \"current_period_start\": \"{{C-current_period_start}}\",\n    \"current_period_end\": \"{{C-current_period_end}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{finone_url}}/fo-ledger/api/v1/report/cash-flow-detail",
									"host": [
										"{{finone_url}}"
									],
									"path": [
										"fo-ledger",
										"api",
										"v1",
										"report",
										"cash-flow-detail"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_report_account",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "authorization",
										"value": "Bearer {{C-userToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"business_id\": {{C-business_id}},\n    \"current_period_start\": \"{{C-current_period_start}}\",\n    \"current_period_end\": \"{{C-current_period_end}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{finone_url}}/fo-ledger/api/v1/report/account",
									"host": [
										"{{finone_url}}"
									],
									"path": [
										"fo-ledger",
										"api",
										"v1",
										"report",
										"account"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "profit-loss",
					"item": [
						{
							"name": "get_chart_profit_loss_detail",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "authorization",
										"value": "Bearer {{C-userToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"business_id\": {{C-business_id}},\n    \"branch_id\": \"{{C-branch_id}}\",\n    \"current_period_start\": \"{{C-current_period_start}}\",\n    \"current_period_end\": \"{{C-current_period_end}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{finone_url}}/fo-ledger/api/v1/report/chart-profit-loss-detail",
									"host": [
										"{{finone_url}}"
									],
									"path": [
										"fo-ledger",
										"api",
										"v1",
										"report",
										"chart-profit-loss-detail"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_report_top_selling_product",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "authorization",
										"value": "Bearer {{C-userToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"business_id\": {{C-business_id}},\n    \"current_period_start\": \"{{C-current_period_start}}\",\n    \"current_period_end\": \"{{C-current_period_end}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{finone_url}}/fo-order/api/v1/report/top-selling-product",
									"host": [
										"{{finone_url}}"
									],
									"path": [
										"fo-order",
										"api",
										"v1",
										"report",
										"top-selling-product"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_report_profit_loss_detail",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "authorization",
										"value": "Bearer {{C-userToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"business_id\": {{C-business_id}},\n    \"current_period_start\": \"{{C-current_period_start}}\",\n    \"current_period_end\": \"{{C-current_period_end}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{finone_url}}/fo-ledger/api/v1/report/profit-loss-detail",
									"host": [
										"{{finone_url}}"
									],
									"path": [
										"fo-ledger",
										"api",
										"v1",
										"report",
										"profit-loss-detail"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "account-receivable-payable",
					"item": [
						{
							"name": "get_chart_balance_change_account",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "authorization",
										"value": "Bearer {{C-userToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"business_id\": {{C-business_id}},\n    \"report_type\": \"B1001\",\n    \"current_period_start\": \"{{C-current_period_start}}\",\n    \"current_period_end\": \"{{C-current_period_end}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{finone_url}}/fo-ledger/api/v1/report/chart-balance-change-account",
									"host": [
										"{{finone_url}}"
									],
									"path": [
										"fo-ledger",
										"api",
										"v1",
										"report",
										"chart-balance-change-account"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "report-app",
			"item": [
				{
					"name": "balance_n_forecast_widget",
					"item": [
						{
							"name": "get_chart_balance_change",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let testcase = pm.environment.get(\"C-testcase\");",
											"console.log(\"Testcase: \" + testcase);",
											"",
											"let payload;",
											"switch(testcase){",
											"    case 2:",
											"        let is_get_last = pm.environment.get(\"C-is_get_last\");",
											"        if(!is_get_last){",
											"            is_get_last = false;",
											"            pm.environment.set(\"C-is_get_last\",is_get_last);",
											"            ",
											"            payload = {",
											"                \"business_id\": parseInt(pm.environment.get(\"C-business_id\")),",
											"                \"period\": \"last_month\", // last_month, month",
											"                \"account_ids\": []",
											"            }",
											"        } else {",
											"            payload = {",
											"                \"business_id\": parseInt(pm.environment.get(\"C-business_id\")),",
											"                \"period\": \"month\", // last_month, month",
											"                \"account_ids\": []",
											"            }",
											"        }",
											"        break;",
											"    case 5: case 8:",
											"        payload = {",
											"            \"business_id\": parseInt(pm.environment.get(\"C-business_id\")),",
											"            \"period\": \"month\", // last_month, month",
											"            \"account_ids\": []",
											"        }",
											"        break;",
											"    default:",
											"        console.log(\"Missing flow\");",
											"}",
											"",
											"console.log(\"payload: \",payload);",
											"pm.environment.set(\"C-payload\",JSON.stringify(payload));",
											"",
											"// =========================== data thêm cho API cần time range",
											"// lấy full tháng hiện tại",
											"let today = new Date();",
											"let start_current_month = new Date(today.getFullYear(), today.getMonth(), 1);",
											"let end_current_month = new Date(today.getFullYear(), today.getMonth() + 1, 1);",
											"",
											"// lấy full tháng trước",
											"let start_last_month = new Date(today.getFullYear(), today.getMonth() - 1, 1);",
											"let end_last_month = new Date(today.getFullYear(), today.getMonth(), 1);",
											"",
											"// lấy full ngày hiện tại",
											"// let firstDay = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0 ,0, 0);",
											"// let lastDay = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 23, 59 ,59, 0);",
											"",
											"// lấy n ngày đến hiện tại",
											"// let firstDayTimestamp = Math.floor(firstDay.getTime()/1000) - 2*24*60*60;",
											"// let start_day_ago = new Date(firstDayTimestamp*1000);",
											"",
											"let current_period_start = start_current_month.toISOString();",
											"let current_period_end = end_current_month.toISOString();",
											"let previous_period_start = start_last_month.toISOString();",
											"let previous_period_end = end_last_month.toISOString();",
											"",
											"pm.environment.set(\"C-current_period_start\",current_period_start);",
											"pm.environment.set(\"C-current_period_end\",current_period_end);",
											"pm.environment.set(\"C-previous_period_start\",previous_period_start);",
											"pm.environment.set(\"C-previous_period_end\",previous_period_end);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsData = pm.response.json();",
											"if(pm.response.code == 200){",
											"    let testcase = pm.environment.get(\"C-testcase\");",
											"",
											"    let chart_balance_change = null;",
											"    let chart_balance_change_last_month = pm.environment.get(\"C-chart_balance_change_last_month\");",
											"    let invoice_obj, invoice_date;",
											"    switch(testcase){",
											"        case 2:",
											"            let is_get_last = pm.environment.get(\"C-is_get_last\");",
											"",
											"            if(!is_get_last){",
											"                is_get_last = true;",
											"                pm.environment.set(\"C-is_get_last\",is_get_last);",
											"",
											"                chart_balance_change_last_month = jsData.data.sum_card_data;",
											"                pm.environment.set(\"C-chart_balance_change_last_month\",chart_balance_change_last_month);",
											"",
											"                postman.setNextRequest(\"get_chart_balance_change\");",
											"            } else {",
											"                chart_balance_change = jsData.data;",
											"                pm.test(\"Got chart_balance_change \", function () {",
											"                    // sum_card_data.total_balance_amount",
											"                    // dates_data",
											"                    pm.environment.set(\"C-chart_balance_change\",chart_balance_change);",
											"                    pm.expect(chart_balance_change != null).to.be.true;",
											"                });",
											"",
											"                // check data chart & table",
											"                let sum_table = {",
											"                    \"total_debit\":0,",
											"                    \"total_credit\":0,",
											"                    \"current_total_debit\":0,",
											"                    \"current_total_credit\":0,",
											"                    \"total_balance_amount\":0,",
											"                }",
											"                let month_obj = {",
											"                    \"start_amount\":0,",
											"                    \"end_amount\":0",
											"                }",
											"                for(let i in jsData.data.dates_data){",
											"                    sum_table.current_total_debit += jsData.data.dates_data[i].debit_amount;",
											"                    sum_table.current_total_credit += jsData.data.dates_data[i].credit_amount;",
											"",
											"                    console.log(\"Date: \" + jsData.data.dates_data[i].date);",
											"                    if(i != 0){",
											"                        // start của ngày hôm nay lả end của ngày hôm trước",
											"                        pm.test(\"--- start_amount must be \" + jsData.data.dates_data[i-1].end_amount, function () {",
											"                            pm.expect(jsData.data.dates_data[i-1].end_amount).to.eql(jsData.data.dates_data[i].start_amount);",
											"                        });",
											"",
											"                        if(i == jsData.data.dates_data.length - 1){",
											"                            month_obj.end_amount = jsData.data.dates_data[i].end_amount;",
											"                        }",
											"                    } else {",
											"                        // start của ngày đầu tháng là total_balance_amount của tháng trước",
											"                        pm.test(\"--- start_amount must be \" + chart_balance_change_last_month.total_balance_amount, function () {",
											"                            pm.expect(chart_balance_change_last_month.total_balance_amount).to.eql(jsData.data.dates_data[i].start_amount);",
											"                        });",
											"                        month_obj.start_amount = chart_balance_change_last_month.total_balance_amount;",
											"                    } ",
											"",
											"                    // gap =  debit_amount - credit_amount",
											"                    pm.test(\"--- gap must be \" + (jsData.data.dates_data[i].debit_amount - jsData.data.dates_data[i].credit_amount), function () {",
											"                        // console.log(\"act gap: \" + jsData.data.dates_data[i].gap);",
											"                        pm.expect(jsData.data.dates_data[i].gap).to.eql(jsData.data.dates_data[i].debit_amount - jsData.data.dates_data[i].credit_amount);",
											"                    });",
											"",
											"                    // end_amount = start_amount + gap",
											"                    pm.test(\"--- end_amount must be \" + (jsData.data.dates_data[i].start_amount + jsData.data.dates_data[i].gap), function () {",
											"                        pm.expect(jsData.data.dates_data[i].end_amount).to.eql(jsData.data.dates_data[i].start_amount + jsData.data.dates_data[i].gap);",
											"                    });",
											"                }",
											"",
											"                // current_total_debit",
											"                pm.test(\"current_total_debit must be \" + sum_table.current_total_debit, function () {",
											"                    pm.expect(jsData.data.sum_card_data.current_total_debit).to.eql(sum_table.current_total_debit);",
											"                });",
											"",
											"                // current_total_credit",
											"                pm.test(\"current_total_credit must be \" + sum_table.current_total_credit, function () {",
											"                    pm.expect(jsData.data.sum_card_data.current_total_credit).to.eql(sum_table.current_total_credit);",
											"                });",
											"",
											"                // total_debit = last_month.total_debit + month.current_total_debit",
											"                // console.log(\"last month data: \", chart_balance_change_last_month);",
											"                pm.test(\"total_debit must be \" + (chart_balance_change_last_month.total_debit + sum_table.current_total_debit), function () {",
											"                    pm.expect(jsData.data.sum_card_data.total_debit).to.eql(chart_balance_change_last_month.total_debit + sum_table.current_total_debit);",
											"                });",
											"",
											"                // total_credit = last_month.total_credit + month.current_total_credit",
											"                pm.test(\"total_credit must be \" + (chart_balance_change_last_month.total_credit + sum_table.current_total_credit), function () {",
											"                    pm.expect(jsData.data.sum_card_data.total_credit).to.eql(chart_balance_change_last_month.total_credit + sum_table.current_total_credit);",
											"                });",
											"",
											"                // total_balance_amount = total_debit - total_credit",
											"                pm.test(\"total_balance_amount must be \" + (jsData.data.sum_card_data.total_debit - jsData.data.sum_card_data.total_credit), function () {",
											"                    pm.expect(jsData.data.sum_card_data.total_balance_amount).to.eql(jsData.data.sum_card_data.total_debit - jsData.data.sum_card_data.total_credit);",
											"                });",
											"",
											"                pm.environment.set(\"C-month_obj\",month_obj);",
											"                postman.setNextRequest(\"get_forecast_dashboard\"); // get_forecast_dashboard",
											"            }",
											"            break;",
											"        case 5:",
											"            invoice_obj = pm.environment.get(\"C-invoice_obj\");",
											"            invoice_date = invoice_obj.value_at.substring(0,10);",
											"            // Invoice sẽ tăng profit (income), Bill sẽ tăng loss (chi phí)",
											"            ",
											"            break;",
											"        case 8:",
											"            invoice_obj = pm.environment.get(\"C-invoice_obj\");",
											"            invoice_date = invoice_obj.value_at;",
											"            console.log(\"invoice_date: \" + invoice_date);",
											"",
											"            // let today = new Date();",
											"            // let today_tmp = Math.floor(today.getTime()/1000);",
											"            // let firstDayOfThisMonth = getFirstDayOfMonth(today_tmp);",
											"            // let lastDayOfThisMonth = getLastDayOfMonth(today_tmp);",
											"            // if(invoice_date < firstDayOfThisMonth || invoice_date > lastDayOfThisMonth){",
											"            //     // nothing happen",
											"            //     pm.test(\"Nothing happen!!!\", function () {",
											"            //         pm.expect(JSON.stringify(profit_period) == JSON.stringify(old_profit_period)).to.be.true;",
											"            //     });",
											"            // } else {",
											"            //     invoice_date = invoice_date.substring(0,10);",
											"",
											"            //     let income_product = 0, income_discount = 0;",
											"            //     for(let i in invoice_obj.items){",
											"            //         income_product += invoice_obj.items[i].before_tax_amount;",
											"            //         income_discount += invoice_obj.items[i].discount_amount;",
											"            //     }",
											"            //     let exp_change = income_product - income_discount;",
											"            //     // có thay đổi => total_income increase",
											"            //     pm.test(\"total_income increase \" + exp_change, function () {",
											"            //         pm.expect(profit_period.sum_card_data.total_income == old_profit_period.sum_card_data.total_income + exp_change).to.be.true;",
											"            //     });",
											"            //     // thay đổi ngày tương ứng",
											"            //     let old_date = null, act_date = null;",
											"            //     for(let i in profit_period.dates_data){",
											"            //         let day_i = profit_period.dates_data[i].date.substring(0,10);",
											"            //         if(day_i == invoice_date){",
											"            //             act_date = profit_period.dates_data[i];",
											"            //             break;",
											"            //         }",
											"            //     }",
											"",
											"            //     for(let i in old_profit_period.dates_data){",
											"            //         let day_i = old_profit_period.dates_data[i].date.substring(0,10);",
											"            //         if(day_i == invoice_date){",
											"            //             old_date = old_profit_period.dates_data[i];",
											"            //             break;",
											"            //         }",
											"            //     }",
											"",
											"            //     if(old_date != null && act_date != null){",
											"            //         console.log(\"act_date: \",act_date);",
											"            //         console.log(\"old_date: \",old_date);",
											"            //         pm.test(\"income at \" + invoice_date + \" increase \" + exp_change, function () {",
											"            //             pm.expect(act_date.income == old_date.income + exp_change).to.be.true;",
											"            //         });",
											"            //     }",
											"            // }",
											"",
											"            let old_chart_balance_change = pm.environment.get(\"C-chart_balance_change\");",
											"            chart_balance_change = jsData.data;",
											"            pm.test(\"Nothing happen!!!\", function () {",
											"                pm.expect(JSON.stringify(old_chart_balance_change) == JSON.stringify(chart_balance_change)).to.be.true;",
											"            });",
											"",
											"            postman.setNextRequest(\"get_forecast_dashboard\"); // get_forecast_dashboard",
											"            break;",
											"        default:",
											"            console.log(\"Missing flow, end test\");",
											"            postman.setNextRequest(null);",
											"            break;",
											"    }",
											"} else {",
											"    console.log(\"Can't get chart balance change, end test\",jsData);",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "authorization",
										"value": "Bearer {{C-userToken}}"
									},
									{
										"key": "x-locale",
										"value": "en",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{C-payload}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{finone_url}}/fo-ledger/api/v1/report/chart-balance-change",
									"host": [
										"{{finone_url}}"
									],
									"path": [
										"fo-ledger",
										"api",
										"v1",
										"report",
										"chart-balance-change"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_chart_balance_change_branch",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let testcase = pm.environment.get(\"C-testcase\");",
											"console.log(\"Testcase: \" + testcase);",
											"",
											"let payload;",
											"switch (testcase) {",
											"    case 2:",
											"        let is_get_last = pm.environment.get(\"C-is_get_last\");",
											"        if (!is_get_last) {",
											"            is_get_last = false;",
											"            pm.environment.set(\"C-is_get_last\", is_get_last);",
											"",
											"            payload = {",
											"                \"business_id\": parseInt(pm.environment.get(\"C-business_id\")),",
											"                \"branch_id\":pm.environment.get(\"C-branch_id\"),",
											"                \"period\": \"last_month\", // last_month, month",
											"                \"account_ids\": []",
											"            }",
											"        } else {",
											"            payload = {",
											"                \"business_id\": parseInt(pm.environment.get(\"C-business_id\")),",
											"                \"branch_id\":pm.environment.get(\"C-branch_id\"),",
											"                \"period\": \"month\", // last_month, month",
											"                \"account_ids\": []",
											"            }",
											"        }",
											"        break;",
											"    case 4:",
											"        payload = {",
											"            \"business_id\": parseInt(pm.environment.get(\"C-business_id\")),",
											"            \"branch_id\":pm.environment.get(\"C-branch_id\"),",
											"            \"period\": \"month\", // last_month, month",
											"            \"account_ids\": []",
											"        }",
											"        break;",
											"    default:",
											"        console.log(\"Missing flow\");",
											"}",
											"",
											"console.log(\"payload: \", payload);",
											"pm.environment.set(\"C-payload\", JSON.stringify(payload));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsData = pm.response.json();",
											"if(pm.response.code == 200){",
											"    let testcase = pm.environment.get(\"C-testcase\");",
											"",
											"    let chart_balance_change = null;",
											"    let chart_balance_change_last_month = pm.environment.get(\"C-chart_balance_change_last_month\");",
											"    let invoice_obj, invoice_date;",
											"    switch(testcase){",
											"        case 2:",
											"            let is_get_last = pm.environment.get(\"C-is_get_last\");",
											"",
											"            if(!is_get_last){",
											"                is_get_last = true;",
											"                pm.environment.set(\"C-is_get_last\",is_get_last);",
											"",
											"                chart_balance_change_last_month = jsData.data.sum_card_data;",
											"                pm.environment.set(\"C-chart_balance_change_last_month\",chart_balance_change_last_month);",
											"",
											"                postman.setNextRequest(\"get_chart_balance_change\");",
											"            } else {",
											"                chart_balance_change = jsData.data;",
											"                pm.test(\"Got chart_balance_change \", function () {",
											"                    // sum_card_data.total_balance_amount",
											"                    // dates_data",
											"                    pm.environment.set(\"C-chart_balance_change\",chart_balance_change);",
											"                    pm.expect(chart_balance_change != null).to.be.true;",
											"                });",
											"",
											"                // check data chart & table",
											"                let sum_table = {",
											"                    \"total_debit\":0,",
											"                    \"total_credit\":0,",
											"                    \"current_total_debit\":0,",
											"                    \"current_total_credit\":0,",
											"                    \"total_balance_amount\":0,",
											"                }",
											"                for(let i in jsData.data.dates_data){",
											"                    sum_table.current_total_debit += jsData.data.dates_data[i].debit_amount;",
											"                    sum_table.current_total_credit += jsData.data.dates_data[i].credit_amount;",
											"",
											"                    console.log(\"Date: \" + jsData.data.dates_data[i].date);",
											"                    if(i != 0){",
											"                        // start của ngày hôm nay lả end của ngày hôm trước",
											"                        pm.test(\"--- start_amount must be \" + jsData.data.dates_data[i-1].end_amount, function () {",
											"                            pm.expect(jsData.data.dates_data[i-1].end_amount).to.eql(jsData.data.dates_data[i].start_amount);",
											"                        });",
											"                    } else {",
											"                        // start của ngày đầu tháng là total_balance_amount của tháng trước",
											"                        pm.test(\"--- start_amount must be \" + chart_balance_change_last_month.total_balance_amount, function () {",
											"                            pm.expect(chart_balance_change_last_month.total_balance_amount).to.eql(jsData.data.dates_data[i].start_amount);",
											"                        });",
											"                    }",
											"",
											"                    // gap =  debit_amount - credit_amount",
											"                    pm.test(\"--- gap must be \" + (jsData.data.dates_data[i].debit_amount - jsData.data.dates_data[i].credit_amount), function () {",
											"                        // console.log(\"act gap: \" + jsData.data.dates_data[i].gap);",
											"                        pm.expect(jsData.data.dates_data[i].gap).to.eql(jsData.data.dates_data[i].debit_amount - jsData.data.dates_data[i].credit_amount);",
											"                    });",
											"",
											"                    // end_amount = start_amount + gap",
											"                    pm.test(\"--- end_amount must be \" + (jsData.data.dates_data[i].start_amount + jsData.data.dates_data[i].gap), function () {",
											"                        pm.expect(jsData.data.dates_data[i].end_amount).to.eql(jsData.data.dates_data[i].start_amount + jsData.data.dates_data[i].gap);",
											"                    });",
											"                }",
											"",
											"                // current_total_debit",
											"                pm.test(\"current_total_debit must be \" + sum_table.current_total_debit, function () {",
											"                    pm.expect(jsData.data.sum_card_data.current_total_debit).to.eql(sum_table.current_total_debit);",
											"                });",
											"",
											"                // current_total_credit",
											"                pm.test(\"current_total_credit must be \" + sum_table.current_total_credit, function () {",
											"                    pm.expect(jsData.data.sum_card_data.current_total_credit).to.eql(sum_table.current_total_credit);",
											"                });",
											"",
											"                // total_debit = last_month.total_debit + month.current_total_debit",
											"                // console.log(\"last month data: \", chart_balance_change_last_month);",
											"                pm.test(\"total_debit must be \" + (chart_balance_change_last_month.total_debit + sum_table.current_total_debit), function () {",
											"                    pm.expect(jsData.data.sum_card_data.total_debit).to.eql(chart_balance_change_last_month.total_debit + sum_table.current_total_debit);",
											"                });",
											"",
											"                // total_credit = last_month.total_credit + month.current_total_credit",
											"                pm.test(\"total_credit must be \" + (chart_balance_change_last_month.total_credit + sum_table.current_total_credit), function () {",
											"                    pm.expect(jsData.data.sum_card_data.total_credit).to.eql(chart_balance_change_last_month.total_credit + sum_table.current_total_credit);",
											"                });",
											"",
											"                // total_balance_amount = total_debit - total_credit",
											"                pm.test(\"total_balance_amount must be \" + (jsData.data.sum_card_data.total_debit - jsData.data.sum_card_data.total_credit), function () {",
											"                    pm.expect(jsData.data.sum_card_data.total_balance_amount).to.eql(jsData.data.sum_card_data.total_debit - jsData.data.sum_card_data.total_credit);",
											"                });",
											"",
											"                postman.setNextRequest(\"get_forecast_dashboard\"); // get_forecast_dashboard",
											"            }",
											"            break;",
											"        case 5:",
											"            invoice_obj = pm.environment.get(\"C-invoice_obj\");",
											"            invoice_date = invoice_obj.value_at.substring(0,10);",
											"            // Invoice sẽ tăng profit (income), Bill sẽ tăng loss (chi phí)",
											"            ",
											"            if(full_check == 1){",
											"                let old_profit_period = pm.environment.get(\"C-profit_period\");",
											"                // console.log(\"debug old_loss_period: \", old_profit_period);",
											"                // console.log(\"debug loss_period: \", profit_period);",
											"",
											"                pm.test(\"Nothing happen!!!\", function () {",
											"                    pm.expect(JSON.stringify(profit_period) == JSON.stringify(old_profit_period)).to.be.true;",
											"                });",
											"",
											"                full_check++;",
											"                pm.environment.set(\"C-full_check\",full_check);",
											"                postman.setNextRequest(\"report_profit_loss_period\");",
											"            } else {",
											"                let old_loss_period = pm.environment.get(\"C-loss_period\");",
											"                // console.log(\"debug old_loss_period: \", old_loss_period);",
											"                // console.log(\"debug loss_period: \", loss_period);",
											"                ",
											"                pm.test(\"Nothing happen!!!\", function () {",
											"                    pm.expect(JSON.stringify(loss_period) == JSON.stringify(old_loss_period)).to.be.true;",
											"                });",
											"",
											"                pm.environment.unset(\"C-full_check\");",
											"",
											"                testcase++;",
											"                pm.environment.set(\"C-testcase\",testcase);",
											"                postman.setNextRequest(\"calculate_invoice\"); // calculate_invoice",
											"            }",
											"            break;",
											"        case 8:",
											"            invoice_obj = pm.environment.get(\"C-invoice_obj\");",
											"            invoice_date = invoice_obj.value_at;",
											"            console.log(\"invoice_date: \" + invoice_date);",
											"",
											"            if(full_check == 1){",
											"                let old_profit_period = pm.environment.get(\"C-profit_period\");",
											"                // console.log(\"debug old_loss_period: \", old_profit_period);",
											"                // console.log(\"debug loss_period: \", profit_period);",
											"",
											"                // do thời gian lọc là tháng hiện tại => chỉ thay đổi khi value_at nằm trong tháng hiện tại",
											"                let today = new Date();",
											"                let today_tmp = Math.floor(today.getTime()/1000);",
											"                let firstDayOfThisMonth = getFirstDayOfMonth(today_tmp);",
											"                let lastDayOfThisMonth = getLastDayOfMonth(today_tmp);",
											"                if(invoice_date < firstDayOfThisMonth || invoice_date > lastDayOfThisMonth){",
											"                    // nothing happen",
											"                    pm.test(\"Nothing happen!!!\", function () {",
											"                        pm.expect(JSON.stringify(profit_period) == JSON.stringify(old_profit_period)).to.be.true;",
											"                    });",
											"                } else {",
											"                    invoice_date = invoice_date.substring(0,10);",
											"",
											"                    let income_product = 0, income_discount = 0;",
											"                    for(let i in invoice_obj.items){",
											"                        income_product += invoice_obj.items[i].before_tax_amount;",
											"                        income_discount += invoice_obj.items[i].discount_amount;",
											"                    }",
											"                    let exp_change = income_product - income_discount;",
											"                    // có thay đổi => total_income increase",
											"                    pm.test(\"total_income increase \" + exp_change, function () {",
											"                        pm.expect(profit_period.sum_card_data.total_income == old_profit_period.sum_card_data.total_income + exp_change).to.be.true;",
											"                    });",
											"                    // thay đổi ngày tương ứng",
											"                    let old_date = null, act_date = null;",
											"                    for(let i in profit_period.dates_data){",
											"                        let day_i = profit_period.dates_data[i].date.substring(0,10);",
											"                        if(day_i == invoice_date){",
											"                            act_date = profit_period.dates_data[i];",
											"                            break;",
											"                        }",
											"                    }",
											"",
											"                    for(let i in old_profit_period.dates_data){",
											"                        let day_i = old_profit_period.dates_data[i].date.substring(0,10);",
											"                        if(day_i == invoice_date){",
											"                            old_date = old_profit_period.dates_data[i];",
											"                            break;",
											"                        }",
											"                    }",
											"",
											"                    if(old_date != null && act_date != null){",
											"                        console.log(\"act_date: \",act_date);",
											"                        console.log(\"old_date: \",old_date);",
											"                        pm.test(\"income at \" + invoice_date + \" increase \" + exp_change, function () {",
											"                            pm.expect(act_date.income == old_date.income + exp_change).to.be.true;",
											"                        });",
											"                    }",
											"                }",
											"",
											"                full_check++;",
											"                pm.environment.set(\"C-full_check\",full_check);",
											"                postman.setNextRequest(\"report_profit_loss_period\");",
											"            } else {",
											"                let old_loss_period = pm.environment.get(\"C-loss_period\");",
											"                // console.log(\"debug old_loss_period: \", old_loss_period);",
											"                // console.log(\"debug loss_period: \", loss_period);",
											"                ",
											"                pm.test(\"Nothing happen!!!\", function () {",
											"                    pm.expect(JSON.stringify(loss_period) == JSON.stringify(old_loss_period)).to.be.true;",
											"                });",
											"",
											"                pm.environment.unset(\"C-full_check\");",
											"",
											"                console.log(\"-------- End Testsuite 06 --------\");",
											"                postman.setNextRequest(null);",
											"            }",
											"            break;",
											"        default:",
											"            console.log(\"Missing flow, end test\");",
											"            postman.setNextRequest(null);",
											"            break;",
											"    }",
											"} else {",
											"    console.log(\"Can't get chart balance change, end test\",jsData);",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "authorization",
										"value": "Bearer {{C-userToken}}"
									},
									{
										"key": "x-locale",
										"value": "en",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{C-payload}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{finone_url}}/fo-ledger/api/v1/report/chart-balance-change",
									"host": [
										"{{finone_url}}"
									],
									"path": [
										"fo-ledger",
										"api",
										"v1",
										"report",
										"chart-balance-change"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_forecast_dashboard",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let testcase = pm.environment.get(\"C-testcase\");",
											"console.log(\"Testcase: \" + testcase);",
											"",
											"let payload = {",
											"    \"business_id\": parseInt(pm.environment.get(\"C-business_id\")),",
											"    \"current_period_start\": pm.environment.get(\"C-current_period_start\"),",
											"    \"current_period_end\": pm.environment.get(\"C-current_period_end\")",
											"}",
											"",
											"console.log(\"payload: \",payload);",
											"pm.environment.set(\"C-payload\",JSON.stringify(payload));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsData = pm.response.json();",
											"if(pm.response.code == 200){",
											"    let testcase = pm.environment.get(\"C-testcase\");",
											"",
											"    let forecast_dashboard = null;",
											"    let invoice_obj, invoice_date;",
											"    switch(testcase){",
											"        case 2:",
											"            forecast_dashboard = jsData.data;",
											"            pm.test(\"Got forecast_dashboard \", function () {",
											"                pm.environment.set(\"C-forecast_dashboard\",forecast_dashboard);",
											"                pm.expect(forecast_dashboard != null).to.be.true;",
											"            });",
											"            console.log(\"forecast_dashboard: \",forecast_dashboard);",
											"",
											"            postman.setNextRequest(\"get_cash_flow_chart\"); // get_cash_flow_chart",
											"            break;",
											"        case 5:",
											"            break;",
											"        case 8:",
											"            let old_forecast_dashboard = pm.environment.get(\"C-forecast_dashboard\");",
											"            forecast_dashboard = jsData.data;",
											"",
											"            pm.test(\"Nothing happen!!!\", function () {",
											"                pm.expect(JSON.stringify(old_forecast_dashboard) == JSON.stringify(forecast_dashboard)).to.be.true;",
											"            });",
											"",
											"            postman.setNextRequest(\"get_cash_flow_chart\"); // get_cash_flow_chart",
											"            break;",
											"        default:",
											"            console.log(\"Missing flow, end test\");",
											"            postman.setNextRequest(null);",
											"            break;",
											"    }",
											"} else {",
											"    console.log(\"Can't get forecast dashboard, end test\",jsData);",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "authorization",
										"value": "Bearer {{C-userToken}}"
									},
									{
										"key": "x-locale",
										"value": "en"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{C-payload}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{finone_url}}/fo-ledger/api/v1/report/forecast-dashboard",
									"host": [
										"{{finone_url}}"
									],
									"path": [
										"fo-ledger",
										"api",
										"v1",
										"report",
										"forecast-dashboard"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_forecast_dashboard_branch",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let testcase = pm.environment.get(\"C-testcase\");",
											"console.log(\"Testcase: \" + testcase);",
											"",
											"let payload = {",
											"    \"business_id\": parseInt(pm.environment.get(\"C-business_id\")),",
											"    \"branch_id\":pm.environment.get(\"C-branch_id\"),",
											"    \"current_period_start\": pm.environment.get(\"C-current_period_start\"),",
											"    \"current_period_end\": pm.environment.get(\"C-current_period_end\")",
											"}",
											"",
											"console.log(\"payload: \",payload);",
											"pm.environment.set(\"C-payload\",JSON.stringify(payload));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsData = pm.response.json();",
											"if(pm.response.code == 200){",
											"    let testcase = pm.environment.get(\"C-testcase\");",
											"",
											"    let forecast_dashboard = null;",
											"    let invoice_obj, invoice_date;",
											"    switch(testcase){",
											"        case 2:",
											"            forecast_dashboard = jsData.data;",
											"            pm.test(\"Got forecast_dashboard \", function () {",
											"                pm.environment.set(\"C-forecast_dashboard\",forecast_dashboard);",
											"                pm.expect(forecast_dashboard != null).to.be.true;",
											"            });",
											"            console.log(\"forecast_dashboard: \",forecast_dashboard);",
											"",
											"            postman.setNextRequest(\"\"); // get_cash_flow_chart",
											"            break;",
											"        default:",
											"            console.log(\"Missing flow, end test\");",
											"            postman.setNextRequest(null);",
											"            break;",
											"    }",
											"} else {",
											"    console.log(\"Can't get forecast dashboard, end test\",jsData);",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "authorization",
										"value": "Bearer {{C-userToken}}"
									},
									{
										"key": "x-locale",
										"value": "en"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{C-payload}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{finone_url}}/fo-ledger/api/v1/report/forecast-dashboard",
									"host": [
										"{{finone_url}}"
									],
									"path": [
										"fo-ledger",
										"api",
										"v1",
										"report",
										"forecast-dashboard"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "cash_flow_widget",
					"item": [
						{
							"name": "get_cash_flow_chart",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let testcase = pm.environment.get(\"C-testcase\");",
											"console.log(\"Testcase: \" + testcase);",
											"",
											"let payload = {",
											"    \"business_id\": parseInt(pm.environment.get(\"C-business_id\")),",
											"    \"period\": \"month\"",
											"}",
											"",
											"console.log(\"payload: \",payload);",
											"pm.environment.set(\"C-payload\",JSON.stringify(payload));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsData = pm.response.json();",
											"if(pm.response.code == 200){",
											"    let testcase = pm.environment.get(\"C-testcase\");",
											"",
											"    let chart_cash_flow = null;",
											"    let invoice_obj, invoice_date;",
											"    switch(testcase){",
											"        case 2:",
											"            chart_cash_flow = jsData.data;",
											"            pm.test(\"Got chart_cash_flow \", function () {",
											"                // sum_card_data.total_balance_amount",
											"                // dates_data",
											"                pm.environment.set(\"C-chart_cash_flow\",chart_cash_flow);",
											"                pm.expect(chart_cash_flow != null).to.be.true;",
											"            });",
											"",
											"            // check data chart & table",
											"            let sum_table = {",
											"                \"total_income\":0,",
											"                \"total_expense\":0,",
											"                \"total_gap\":0,",
											"                \"total_profit\":0",
											"            }",
											"",
											"            let today = new Date();",
											"            for(let i in jsData.data.dates_data){",
											"                // card summary chỉ tính tới hiện tại",
											"                // if(new Date(jsData.data.dates_data[i].date) <= today){",
											"                //     console.log(\"Date: \" + jsData.data.dates_data[i].date);",
											"",
											"                    sum_table.total_income += jsData.data.dates_data[i].income;",
											"                    sum_table.total_expense += jsData.data.dates_data[i].expense;",
											"                // }",
											"",
											"                // gap =  debit_amount - credit_amount => removed",
											"                // pm.test(\"--- gap must be \" + (jsData.data.dates_data[i].income - jsData.data.dates_data[i].expense), function () {",
											"                //     // console.log(\"act gap: \" + jsData.data.dates_data[i].gap);",
											"                //     pm.expect(jsData.data.dates_data[i].gap).to.eql(jsData.data.dates_data[i].income - jsData.data.dates_data[i].expense);",
											"                // });",
											"",
											"                // profit =  debit_amount - credit_amount => ko có show nên tạm hide",
											"                // pm.test(\"--- profit must be \" + (jsData.data.dates_data[i].income - jsData.data.dates_data[i].expense), function () {",
											"                //     console.log(\"act profit: \" + jsData.data.dates_data[i].profit);",
											"                //     pm.expect(jsData.data.dates_data[i].profit).to.eql(jsData.data.dates_data[i].income - jsData.data.dates_data[i].expense);",
											"                // });",
											"            }",
											"",
											"            // total_income",
											"            pm.test(\"total_income must be \" + sum_table.total_income, function () {",
											"                console.log(\"data chart: \" + sum_table.total_income);",
											"                console.log(\"summary: \" + jsData.data.sum_card_data.total_income);",
											"                pm.expect(jsData.data.sum_card_data.total_income).to.eql(sum_table.total_income);",
											"            });",
											"",
											"            // total_expense",
											"            pm.test(\"total_expense must be \" + sum_table.total_expense, function () {",
											"                console.log(\"data chart: \" + sum_table.total_expense);",
											"                console.log(\"summary: \" + jsData.data.sum_card_data.total_expense);",
											"                pm.expect(jsData.data.sum_card_data.total_expense).to.eql(sum_table.total_expense);",
											"            });",
											"",
											"            // total_gap = total_income - total_expense => removed (gap là để so sánh cùng kỳ)",
											"            // pm.test(\"total_gap must be \" + (jsData.data.sum_card_data.total_income - jsData.data.sum_card_data.total_expense), function () {",
											"            //     pm.expect(jsData.data.sum_card_data.total_gap).to.eql(jsData.data.sum_card_data.total_income - jsData.data.sum_card_data.total_expense);",
											"            // });",
											"",
											"            // total_profit = total_income - total_expense",
											"            pm.test(\"total_profit must be \" + (jsData.data.sum_card_data.total_income - jsData.data.sum_card_data.total_expense), function () {",
											"                pm.expect(jsData.data.sum_card_data.total_profit).to.eql(jsData.data.sum_card_data.total_income - jsData.data.sum_card_data.total_expense);",
											"            });",
											"",
											"            postman.setNextRequest(\"get_cash_flow_table\"); // get_cash_flow_table",
											"            break;",
											"        case 5:",
											"            invoice_obj = pm.environment.get(\"C-invoice_obj\");",
											"            invoice_date = invoice_obj.value_at.substring(0,10);",
											"            // Invoice sẽ tăng profit (income), Bill sẽ tăng loss (chi phí)",
											"            ",
											"            postman.setNextRequest(\"\"); // calculate_invoice",
											"            break;",
											"        case 8:",
											"            invoice_obj = pm.environment.get(\"C-invoice_obj\");",
											"            // invoice_date = invoice_obj.value_at;",
											"            // console.log(\"invoice_date: \" + invoice_date);",
											"            // do thời gian lọc là tháng hiện tại => chỉ thay đổi khi value_at nằm trong tháng hiện tại",
											"            // let today = new Date();",
											"            // let today_tmp = Math.floor(today.getTime()/1000);",
											"            // let firstDayOfThisMonth = getFirstDayOfMonth(today_tmp);",
											"            // let lastDayOfThisMonth = getLastDayOfMonth(today_tmp);",
											"            // if(invoice_date < firstDayOfThisMonth || invoice_date > lastDayOfThisMonth){",
											"            //     // nothing happen",
											"            //     pm.test(\"Nothing happen!!!\", function () {",
											"            //         pm.expect(JSON.stringify(profit_period) == JSON.stringify(old_profit_period)).to.be.true;",
											"            //     });",
											"            // } else {",
											"            //     invoice_date = invoice_date.substring(0,10);",
											"",
											"            //     let income_product = 0, income_discount = 0;",
											"            //     for(let i in invoice_obj.items){",
											"            //         income_product += invoice_obj.items[i].before_tax_amount;",
											"            //         income_discount += invoice_obj.items[i].discount_amount;",
											"            //     }",
											"            //     let exp_change = income_product - income_discount;",
											"            //     // có thay đổi => total_income increase",
											"            //     pm.test(\"total_income increase \" + exp_change, function () {",
											"            //         pm.expect(profit_period.sum_card_data.total_income == old_profit_period.sum_card_data.total_income + exp_change).to.be.true;",
											"            //     });",
											"            //     // thay đổi ngày tương ứng",
											"            //     let old_date = null, act_date = null;",
											"            //     for(let i in profit_period.dates_data){",
											"            //         let day_i = profit_period.dates_data[i].date.substring(0,10);",
											"            //         if(day_i == invoice_date){",
											"            //             act_date = profit_period.dates_data[i];",
											"            //             break;",
											"            //         }",
											"            //     }",
											"",
											"            //     for(let i in old_profit_period.dates_data){",
											"            //         let day_i = old_profit_period.dates_data[i].date.substring(0,10);",
											"            //         if(day_i == invoice_date){",
											"            //             old_date = old_profit_period.dates_data[i];",
											"            //             break;",
											"            //         }",
											"            //     }",
											"",
											"            //     if(old_date != null && act_date != null){",
											"            //         console.log(\"act_date: \",act_date);",
											"            //         console.log(\"old_date: \",old_date);",
											"            //         pm.test(\"income at \" + invoice_date + \" increase \" + exp_change, function () {",
											"            //             pm.expect(act_date.income == old_date.income + exp_change).to.be.true;",
											"            //         });",
											"            //     }",
											"            // }",
											"",
											"            let old_chart_cash_flow = pm.environment.get(\"C-chart_cash_flow\");",
											"            chart_cash_flow = jsData.data;",
											"            pm.test(\"Nothing happen!!!\", function () {",
											"                pm.expect(JSON.stringify(old_chart_cash_flow) == JSON.stringify(chart_cash_flow)).to.be.true;",
											"            });",
											"",
											"            postman.setNextRequest(\"get_cash_flow_table\"); // get_cash_flow_table",
											"            break;",
											"        default:",
											"            console.log(\"Missing flow, end test\");",
											"            postman.setNextRequest(null);",
											"            break;",
											"    }",
											"} else {",
											"    console.log(\"Can't get chart cash flow, end test\",jsData);",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "authorization",
										"value": "Bearer {{C-userToken}}"
									},
									{
										"key": "x-locale",
										"value": "en"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{C-payload}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{finone_url}}/fo-ledger/api/v1/report/cash-flow-period",
									"host": [
										"{{finone_url}}"
									],
									"path": [
										"fo-ledger",
										"api",
										"v1",
										"report",
										"cash-flow-period"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_cash_flow_chart_branch",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let testcase = pm.environment.get(\"C-testcase\");",
											"console.log(\"Testcase: \" + testcase);",
											"",
											"let payload = {",
											"    \"business_id\": parseInt(pm.environment.get(\"C-business_id\")),",
											"    \"branch_id\":pm.environment.get(\"C-branch_id\"),",
											"    \"period\": \"month\"",
											"}",
											"",
											"console.log(\"payload: \",payload);",
											"pm.environment.set(\"C-payload\",JSON.stringify(payload));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsData = pm.response.json();",
											"if(pm.response.code == 200){",
											"    let testcase = pm.environment.get(\"C-testcase\");",
											"",
											"    let chart_cash_flow = null;",
											"    let invoice_obj, invoice_date;",
											"    switch(testcase){",
											"        case 2:",
											"            chart_cash_flow = jsData.data;",
											"            pm.test(\"Got chart_cash_flow \", function () {",
											"                // sum_card_data.total_balance_amount",
											"                // dates_data",
											"                pm.environment.set(\"C-chart_cash_flow\",chart_cash_flow);",
											"                pm.expect(chart_cash_flow != null).to.be.true;",
											"            });",
											"",
											"            // check data chart & table",
											"            let sum_table = {",
											"                \"total_income\":0,",
											"                \"total_expense\":0,",
											"                \"total_gap\":0,",
											"                \"total_profit\":0",
											"            }",
											"            for(let i in jsData.data.dates_data){",
											"                sum_table.total_income += jsData.data.dates_data[i].income;",
											"                sum_table.total_expense += jsData.data.dates_data[i].expense;",
											"",
											"                console.log(\"Date: \" + jsData.data.dates_data[i].date);",
											"",
											"                // gap =  debit_amount - credit_amount",
											"                pm.test(\"--- gap must be \" + (jsData.data.dates_data[i].income - jsData.data.dates_data[i].expense), function () {",
											"                    // console.log(\"act gap: \" + jsData.data.dates_data[i].gap);",
											"                    pm.expect(jsData.data.dates_data[i].gap).to.eql(jsData.data.dates_data[i].income - jsData.data.dates_data[i].expense);",
											"                });",
											"",
											"                // profit => chưa define",
											"            }",
											"",
											"            // total_income",
											"            pm.test(\"total_income must be \" + sum_table.total_income, function () {",
											"                pm.expect(jsData.data.sum_card_data.total_income).to.eql(sum_table.total_income);",
											"            });",
											"",
											"            // total_expense",
											"            pm.test(\"total_expense must be \" + sum_table.total_expense, function () {",
											"                pm.expect(jsData.data.sum_card_data.total_expense).to.eql(sum_table.total_expense);",
											"            });",
											"",
											"            // total_gap = total_income - total_expense",
											"            pm.test(\"total_gap must be \" + (jsData.data.sum_card_data.total_income - jsData.data.sum_card_data.total_expense), function () {",
											"                pm.expect(jsData.data.sum_card_data.total_gap).to.eql(jsData.data.sum_card_data.total_income - jsData.data.sum_card_data.total_expense);",
											"            });",
											"",
											"            // total_profit => chưa define",
											"",
											"            postman.setNextRequest(\"get_cash_flow_table\"); // get_cash_flow_table",
											"            break;",
											"        case 5:",
											"            invoice_obj = pm.environment.get(\"C-invoice_obj\");",
											"            invoice_date = invoice_obj.value_at.substring(0,10);",
											"            // Invoice sẽ tăng profit (income), Bill sẽ tăng loss (chi phí)",
											"            ",
											"            if(full_check == 1){",
											"                let old_profit_period = pm.environment.get(\"C-profit_period\");",
											"                // console.log(\"debug old_loss_period: \", old_profit_period);",
											"                // console.log(\"debug loss_period: \", profit_period);",
											"",
											"                pm.test(\"Nothing happen!!!\", function () {",
											"                    pm.expect(JSON.stringify(profit_period) == JSON.stringify(old_profit_period)).to.be.true;",
											"                });",
											"",
											"                full_check++;",
											"                pm.environment.set(\"C-full_check\",full_check);",
											"                postman.setNextRequest(\"report_profit_loss_period\");",
											"            } else {",
											"                let old_loss_period = pm.environment.get(\"C-loss_period\");",
											"                // console.log(\"debug old_loss_period: \", old_loss_period);",
											"                // console.log(\"debug loss_period: \", loss_period);",
											"                ",
											"                pm.test(\"Nothing happen!!!\", function () {",
											"                    pm.expect(JSON.stringify(loss_period) == JSON.stringify(old_loss_period)).to.be.true;",
											"                });",
											"",
											"                pm.environment.unset(\"C-full_check\");",
											"",
											"                testcase++;",
											"                pm.environment.set(\"C-testcase\",testcase);",
											"                postman.setNextRequest(\"calculate_invoice\"); // calculate_invoice",
											"            }",
											"            break;",
											"        case 8:",
											"            invoice_obj = pm.environment.get(\"C-invoice_obj\");",
											"            invoice_date = invoice_obj.value_at;",
											"            console.log(\"invoice_date: \" + invoice_date);",
											"",
											"            if(full_check == 1){",
											"                let old_profit_period = pm.environment.get(\"C-profit_period\");",
											"                // console.log(\"debug old_loss_period: \", old_profit_period);",
											"                // console.log(\"debug loss_period: \", profit_period);",
											"",
											"                // do thời gian lọc là tháng hiện tại => chỉ thay đổi khi value_at nằm trong tháng hiện tại",
											"                let today = new Date();",
											"                let today_tmp = Math.floor(today.getTime()/1000);",
											"                let firstDayOfThisMonth = getFirstDayOfMonth(today_tmp);",
											"                let lastDayOfThisMonth = getLastDayOfMonth(today_tmp);",
											"                if(invoice_date < firstDayOfThisMonth || invoice_date > lastDayOfThisMonth){",
											"                    // nothing happen",
											"                    pm.test(\"Nothing happen!!!\", function () {",
											"                        pm.expect(JSON.stringify(profit_period) == JSON.stringify(old_profit_period)).to.be.true;",
											"                    });",
											"                } else {",
											"                    invoice_date = invoice_date.substring(0,10);",
											"",
											"                    let income_product = 0, income_discount = 0;",
											"                    for(let i in invoice_obj.items){",
											"                        income_product += invoice_obj.items[i].before_tax_amount;",
											"                        income_discount += invoice_obj.items[i].discount_amount;",
											"                    }",
											"                    let exp_change = income_product - income_discount;",
											"                    // có thay đổi => total_income increase",
											"                    pm.test(\"total_income increase \" + exp_change, function () {",
											"                        pm.expect(profit_period.sum_card_data.total_income == old_profit_period.sum_card_data.total_income + exp_change).to.be.true;",
											"                    });",
											"                    // thay đổi ngày tương ứng",
											"                    let old_date = null, act_date = null;",
											"                    for(let i in profit_period.dates_data){",
											"                        let day_i = profit_period.dates_data[i].date.substring(0,10);",
											"                        if(day_i == invoice_date){",
											"                            act_date = profit_period.dates_data[i];",
											"                            break;",
											"                        }",
											"                    }",
											"",
											"                    for(let i in old_profit_period.dates_data){",
											"                        let day_i = old_profit_period.dates_data[i].date.substring(0,10);",
											"                        if(day_i == invoice_date){",
											"                            old_date = old_profit_period.dates_data[i];",
											"                            break;",
											"                        }",
											"                    }",
											"",
											"                    if(old_date != null && act_date != null){",
											"                        console.log(\"act_date: \",act_date);",
											"                        console.log(\"old_date: \",old_date);",
											"                        pm.test(\"income at \" + invoice_date + \" increase \" + exp_change, function () {",
											"                            pm.expect(act_date.income == old_date.income + exp_change).to.be.true;",
											"                        });",
											"                    }",
											"                }",
											"",
											"                full_check++;",
											"                pm.environment.set(\"C-full_check\",full_check);",
											"                postman.setNextRequest(\"report_profit_loss_period\");",
											"            } else {",
											"                let old_loss_period = pm.environment.get(\"C-loss_period\");",
											"                // console.log(\"debug old_loss_period: \", old_loss_period);",
											"                // console.log(\"debug loss_period: \", loss_period);",
											"                ",
											"                pm.test(\"Nothing happen!!!\", function () {",
											"                    pm.expect(JSON.stringify(loss_period) == JSON.stringify(old_loss_period)).to.be.true;",
											"                });",
											"",
											"                pm.environment.unset(\"C-full_check\");",
											"",
											"                console.log(\"-------- End Testsuite 06 --------\");",
											"                postman.setNextRequest(null);",
											"            }",
											"            break;",
											"        default:",
											"            console.log(\"Missing flow, end test\");",
											"            postman.setNextRequest(null);",
											"            break;",
											"    }",
											"} else {",
											"    console.log(\"Can't get chart balance change, end test\",jsData);",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "authorization",
										"value": "Bearer {{C-userToken}}"
									},
									{
										"key": "x-locale",
										"value": "en"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{C-payload}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{finone_url}}/fo-ledger/api/v1/report/cash-flow-period",
									"host": [
										"{{finone_url}}"
									],
									"path": [
										"fo-ledger",
										"api",
										"v1",
										"report",
										"cash-flow-period"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_cash_flow_table",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsData = pm.response.json();",
											"if(pm.response.code == 200){",
											"    let testcase = pm.environment.get(\"C-testcase\");",
											"",
											"    let chart_cash_flow = pm.environment.get(\"C-chart_cash_flow\");",
											"    let table_cash_flow = null;",
											"    let invoice_obj, invoice_date;",
											"    switch(testcase){",
											"        case 2:",
											"            table_cash_flow = jsData.data;",
											"            pm.test(\"Got table_cash_flow \", function () {",
											"                // sum_card_data.total_balance_amount",
											"                // dates_data",
											"                pm.environment.set(\"C-table_cash_flow\",table_cash_flow);",
											"                pm.expect(table_cash_flow != null).to.be.true;",
											"            });",
											"",
											"            // compare data chart & table",
											"            // console.log(\"chart_cash_flow: \" , chart_cash_flow);",
											"            // console.log(\"table_cash_flow: \" , table_cash_flow);",
											"",
											"            // credit_amount",
											"            pm.test(\"credit_amount must be \" + chart_cash_flow.sum_card_data.total_income, function () {",
											"                console.log(\"act: \" + jsData.data.sum_card_data.credit_amount);",
											"                pm.expect(chart_cash_flow.sum_card_data.total_income).to.eql(jsData.data.sum_card_data.credit_amount);",
											"            });",
											"",
											"            // debit_amount",
											"            pm.test(\"debit_amount must be \" + chart_cash_flow.sum_card_data.total_expense, function () {",
											"                console.log(\"act: \" + jsData.data.sum_card_data.debit_amount);",
											"                pm.expect(chart_cash_flow.sum_card_data.total_expense).to.eql(jsData.data.sum_card_data.debit_amount);",
											"            });",
											"",
											"            let month_obj = pm.environment.get(\"C-month_obj\");",
											"            // start_amount",
											"            pm.test(\"start_amount must be \" + month_obj.start_amount, function () {",
											"                console.log(\"act: \" + jsData.data.sum_card_data.start_amount);",
											"                pm.expect(month_obj.start_amount).to.eql(jsData.data.sum_card_data.start_amount);",
											"            });",
											"",
											"            // end_amount",
											"            pm.test(\"end_amount must be \" + month_obj.end_amount, function () {",
											"                console.log(\"act: \" + jsData.data.sum_card_data.end_amount);",
											"                pm.expect(month_obj.end_amount).to.eql(jsData.data.sum_card_data.end_amount);",
											"            });",
											"",
											"            postman.setNextRequest(\"get_receivable_invoice\"); // get_receivable_invoice",
											"            break;",
											"        case 5:",
											"            break;",
											"        case 8:",
											"            let old_table_cash_flow = pm.environment.get(\"C-table_cash_flow\");",
											"            table_cash_flow = jsData.data;",
											"",
											"            pm.test(\"Nothing happen!!!\", function () {",
											"                pm.expect(JSON.stringify(old_table_cash_flow) == JSON.stringify(table_cash_flow)).to.be.true;",
											"            });",
											"",
											"            postman.setNextRequest(\"get_receivable_invoice\"); // get_receivable_invoice",
											"            break;",
											"        default:",
											"            console.log(\"Missing flow, end test\");",
											"            postman.setNextRequest(null);",
											"            break;",
											"    }",
											"} else {",
											"    console.log(\"Can't get table cash flow, end test\",jsData);",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let testcase = pm.environment.get(\"C-testcase\");",
											"console.log(\"Testcase: \" + testcase);",
											"",
											"// current_period_end lấy data đến hiện tại thôi",
											"let today = new Date();",
											"let lastDay = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 23, 59 ,59, 0);",
											"let current_period_end = lastDay.toISOString();",
											"",
											"let payload = {",
											"    \"business_id\": parseInt(pm.environment.get(\"C-business_id\")),",
											"    \"period\":\"month\"",
											"    // \"current_period_start\": pm.environment.get(\"C-current_period_start\"),",
											"    // \"current_period_end\": pm.environment.get(\"C-current_period_end\")",
											"}",
											"",
											"console.log(\"payload: \",payload);",
											"pm.environment.set(\"C-payload\",JSON.stringify(payload));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "authorization",
										"value": "Bearer {{C-userToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{C-payload}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{finone_url}}/fo-ledger/api/v1/report/cash-flow-detail",
									"host": [
										"{{finone_url}}"
									],
									"path": [
										"fo-ledger",
										"api",
										"v1",
										"report",
										"cash-flow-detail"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_cash_flow_table_branch",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsData = pm.response.json();",
											"if(pm.response.code == 200){",
											"    let testcase = pm.environment.get(\"C-testcase\");",
											"",
											"    let chart_cash_flow = pm.environment.get(\"C-chart_cash_flow\");",
											"    let table_cash_flow = null;",
											"    let invoice_obj, invoice_date;",
											"    switch(testcase){",
											"        case 2:",
											"            table_cash_flow = jsData.data;",
											"            pm.test(\"Got table_cash_flow \", function () {",
											"                // sum_card_data.total_balance_amount",
											"                // dates_data",
											"                pm.environment.set(\"C-table_cash_flow\",table_cash_flow);",
											"                pm.expect(table_cash_flow != null).to.be.true;",
											"            });",
											"",
											"            // compare data chart & table",
											"            // console.log(\"chart_cash_flow: \" , chart_cash_flow);",
											"            // console.log(\"table_cash_flow: \" , table_cash_flow);",
											"",
											"            // credit_amount",
											"            pm.test(\"credit_amount must be \" + chart_cash_flow.sum_card_data.total_income, function () {",
											"                console.log(\"act: \" + jsData.data.sum_card_data.credit_amount);",
											"                pm.expect(chart_cash_flow.sum_card_data.total_income).to.eql(jsData.data.sum_card_data.credit_amount);",
											"            });",
											"",
											"            // debit_amount",
											"            pm.test(\"debit_amount must be \" + chart_cash_flow.sum_card_data.total_expense, function () {",
											"                console.log(\"act: \" + jsData.data.sum_card_data.debit_amount);",
											"                pm.expect(chart_cash_flow.sum_card_data.total_expense).to.eql(jsData.data.sum_card_data.debit_amount);",
											"            });",
											"",
											"            let month_obj = pm.environment.get(\"C-month_obj\");",
											"            // start_amount",
											"            pm.test(\"start_amount must be \" + month_obj.start_amount, function () {",
											"                console.log(\"act: \" + jsData.data.sum_card_data.start_amount);",
											"                pm.expect(month_obj.start_amount).to.eql(jsData.data.sum_card_data.start_amount);",
											"            });",
											"",
											"            // end_amount",
											"            pm.test(\"end_amount must be \" + month_obj.end_amount, function () {",
											"                console.log(\"act: \" + jsData.data.sum_card_data.end_amount);",
											"                pm.expect(month_obj.end_amount).to.eql(jsData.data.sum_card_data.end_amount);",
											"            });",
											"",
											"            postman.setNextRequest(\"\"); // get_receivable_invoice",
											"            break;",
											"        default:",
											"            console.log(\"Missing flow, end test\");",
											"            postman.setNextRequest(null);",
											"            break;",
											"    }",
											"} else {",
											"    console.log(\"Can't get table cash flow, end test\",jsData);",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let testcase = pm.environment.get(\"C-testcase\");",
											"console.log(\"Testcase: \" + testcase);",
											"",
											"let payload = {",
											"    \"business_id\": parseInt(pm.environment.get(\"C-business_id\")),",
											"    \"branch_id\":pm.environment.get(\"C-branch_id\"),",
											"    \"current_period_start\": pm.environment.get(\"C-current_period_start\"),",
											"    \"current_period_end\": pm.environment.get(\"C-current_period_end\")",
											"}",
											"",
											"console.log(\"payload: \",payload);",
											"pm.environment.set(\"C-payload\",JSON.stringify(payload));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "authorization",
										"value": "Bearer {{C-userToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{C-payload}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{finone_url}}/fo-ledger/api/v1/report/cash-flow-detail",
									"host": [
										"{{finone_url}}"
									],
									"path": [
										"fo-ledger",
										"api",
										"v1",
										"report",
										"cash-flow-detail"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "invoice_widget",
					"item": [
						{
							"name": "get_receivable_invoice",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let testcase = pm.environment.get(\"C-testcase\");",
											"console.log(\"Testcase: \" + testcase);",
											"",
											"let payload = {",
											"    \"account_key\": \"A3001\", // account_receivable => A3001, account_payable => B1001",
											"    // \"branch_id\": pm.environment.get(\"C-branch_id\"),",
											"    \"business_id\": parseInt(pm.environment.get(\"C-business_id\"))",
											"    //   \"current_period_end\": \"string\",",
											"    //   \"current_period_start\": \"string\",",
											"    // \"page\": 1,",
											"    // \"page_size\": 20,",
											"    //   \"period\": \"string\",  // old due_days",
											"    //   \"previous_period_end\": \"string\",",
											"    //   \"previous_period_start\": \"string\",",
											"    //   \"report_type\": \"string\",",
											"    // \"timezone\": \"UTC+07:00\"",
											"}",
											"",
											"console.log(\"payload: \",payload);",
											"pm.environment.set(\"C-payload\",JSON.stringify(payload));",
											"pm.environment.set(\"C-report_obj\",payload);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// ============================= get last day (Sun is end of Week)",
											"function getLastDayOfCurrentWeek() {",
											"    const now = new Date();",
											"    const lastDay = new Date(now);",
											"    const daysUntilSunday = 7 - now.getDay();  // if Saturday is end, change 7 => 6",
											"    lastDay.setDate(now.getDate() + daysUntilSunday);",
											"    return lastDay;",
											"}",
											"",
											"// ============================= get first day (Sun is end of Week)",
											"function getFirstDayOfCurrentWeek() {",
											"    const now = new Date();",
											"    const firstDay = new Date(now);",
											"    firstDay.setDate(now.getDate() - now.getDay() + 1);  // if Saturday is end, remove +1",
											"    return firstDay;",
											"}",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsData = pm.response.json();",
											"if(pm.response.code == 200){",
											"    let testcase = pm.environment.get(\"C-testcase\");",
											"    let unpaid_account_receivable = null;",
											"    try {",
											"        unpaid_account_receivable = jsData.data.unpaid_amount_lifetime_categories;",
											"    } catch {",
											"        console.log(\"Can't get data\");",
											"    }",
											"",
											"    switch(testcase){",
											"        case 2:",
											"            pm.test(\"Got unpaid_account_receivable data\", function () {",
											"                pm.environment.set(\"C-unpaid_account_receivable\",unpaid_account_receivable);",
											"                pm.expect(unpaid_account_receivable != null).to.be.true;",
											"            });",
											"            console.log(\"unpaid_account_receivable: \", unpaid_account_receivable);",
											"",
											"            postman.setNextRequest(\"get_payable_bill\"); //get_payable_bill",
											"            break;",
											"        case 8:",
											"            let invoice_obj = pm.environment.get(\"C-invoice_obj\");",
											"            let old_data = pm.environment.get(\"C-unpaid_account_receivable\");",
											"            let total_amount = parseFloat(invoice_obj.exp_total_amount);",
											"            console.log(\"total_amount: \" + (total_amount + old_data.unpaid_total));",
											"",
											"            // unpaid_total",
											"            pm.test(\"Total unpaid increase \" + total_amount, function () {",
											"                console.log(\"old: \" + old_data.unpaid_total);",
											"                console.log(\"new: \" + unpaid_account_receivable.unpaid_total);",
											"                pm.expect(unpaid_account_receivable.unpaid_total == total_amount + old_data.unpaid_total).to.be.true;",
											"            });",
											"",
											"            let due_date = new Date(invoice_obj.due_at);",
											"            let due_date_timestamp = Math.floor(due_date.getTime()/1000);",
											"            let today = new Date();",
											"            let today_timestamp = Math.floor(today.getTime()/1000);",
											"            let due_type;",
											"            let last_day_of_current_week = getLastDayOfCurrentWeek();",
											"            let last_day_of_current_week_stp = Math.floor(last_day_of_current_week.getTime()/1000);",
											"            let first_day_of_current_week = getFirstDayOfCurrentWeek();",
											"            let first_day_of_current_week_stp = Math.floor(first_day_of_current_week.getTime()/1000);",
											"            // console.log(\"debug: \" + (due_date_timestamp - today_timestamp));",
											"            if(due_date_timestamp > today_timestamp){",
											"                if(due_date_timestamp < last_day_of_current_week_stp){",
											"                    due_type = \"undue_n_7d\";",
											"                } else {",
											"                    due_type = \"undue\";",
											"                }",
											"            } else {",
											"                if(today_timestamp - due_date_timestamp > 90*24*60*60){",
											"                    due_type = \"overdue_over\";",
											"                } else if (today_timestamp - due_date_timestamp > 60*24*60*60){",
											"                    due_type = \"overdue_between\";",
											"                } else if (today_timestamp - due_date_timestamp > 30*24*60*60){",
											"                    due_type = \"overdue_less\";",
											"                } else {",
											"                    if(due_date_timestamp > first_day_of_current_week_stp){",
											"                        due_type = \"due_n_7d\";",
											"                    } else {",
											"                        due_type = \"due\";",
											"                    }",
											"                }",
											"            }",
											"            pm.environment.set(\"C-due_type\",due_type);",
											"            console.log(\"due_type: \" + due_type);",
											"",
											"            console.log(\"old: \",old_data);",
											"            console.log(\"new: \",unpaid_account_receivable);",
											"            switch(due_type){",
											"                case \"due\": case \"due_n_7d\":",
											"                    // unpaid_due",
											"                    pm.test(\"unpaid_due increase \" + total_amount, function () {",
											"                        console.log(\"old: \" + old_data.unpaid_due);",
											"                        console.log(\"expected: \" + (total_amount + old_data.unpaid_due));",
											"                        console.log(\"new: \" + unpaid_account_receivable.unpaid_due);",
											"                        pm.expect(unpaid_account_receivable.unpaid_due == total_amount + old_data.unpaid_due).to.be.true;",
											"                    });",
											"",
											"                    // unpaid_overdue_less",
											"                    pm.test(\"nothing happen unpaid_overdue_less\", function () {",
											"                        pm.expect(unpaid_account_receivable.unpaid_overdue_less == old_data.unpaid_overdue_less).to.be.true;",
											"                    });",
											"",
											"                    // unpaid_overdue_between",
											"                    pm.test(\"nothing happen unpaid_overdue_between\", function () {",
											"                        pm.expect(unpaid_account_receivable.unpaid_overdue_between == old_data.unpaid_overdue_between).to.be.true;",
											"                    });",
											"",
											"                    // unpaid_overdue_over",
											"                    pm.test(\"nothing happen unpaid_overdue_over\", function () {",
											"                        pm.expect(unpaid_account_receivable.unpaid_overdue_over == old_data.unpaid_overdue_over).to.be.true;",
											"                    });",
											"                    break;",
											"                case \"overdue_less\":",
											"                    // unpaid_due",
											"                    pm.test(\"nothing happen unpaid_due\", function () {",
											"                        pm.expect(unpaid_account_receivable.unpaid_due == old_data.unpaid_due).to.be.true;",
											"                    });",
											"",
											"                    // unpaid_overdue_less",
											"                    pm.test(\"unpaid_overdue_less increase \" + total_amount, function () {",
											"                        console.log(\"old: \" + old_data.unpaid_overdue_less);",
											"                        // console.log(\"expected: \" + (total_amount + old_data.unpaid_overdue_less));",
											"                        console.log(\"new: \" + unpaid_account_receivable.unpaid_overdue_less);",
											"                        pm.expect(unpaid_account_receivable.unpaid_overdue_less == total_amount + old_data.unpaid_overdue_less).to.be.true;",
											"                    });",
											"",
											"                    // unpaid_overdue_between",
											"                    pm.test(\"nothing happen unpaid_overdue_between\", function () {",
											"                        pm.expect(unpaid_account_receivable.unpaid_overdue_between == old_data.unpaid_overdue_between).to.be.true;",
											"                    });",
											"",
											"                    // unpaid_overdue_over",
											"                    pm.test(\"nothing happen unpaid_overdue_over\", function () {",
											"                        pm.expect(unpaid_account_receivable.unpaid_overdue_over == old_data.unpaid_overdue_over).to.be.true;",
											"                    });",
											"                    break;",
											"                case \"overdue_between\":",
											"                    // unpaid_due",
											"                    pm.test(\"nothing happen unpaid_due\", function () {",
											"                        pm.expect(unpaid_account_receivable.unpaid_due == old_data.unpaid_due).to.be.true;",
											"                    });",
											"",
											"                    // unpaid_overdue_less",
											"                    pm.test(\"nothing happen unpaid_overdue_less\", function () {",
											"                        pm.expect(unpaid_account_receivable.unpaid_overdue_less == old_data.unpaid_overdue_less).to.be.true;",
											"                    });",
											"",
											"                    // unpaid_overdue_between",
											"                    pm.test(\"unpaid_overdue_between increase \" + total_amount, function () {",
											"                        console.log(\"old: \" + old_data.unpaid_overdue_between);",
											"                        console.log(\"new: \" + unpaid_account_receivable.unpaid_overdue_between);",
											"                        pm.expect(unpaid_account_receivable.unpaid_overdue_between == total_amount + old_data.unpaid_overdue_between).to.be.true;",
											"                    });",
											"",
											"                    // unpaid_overdue_over",
											"                    pm.test(\"nothing happen unpaid_overdue_over\", function () {",
											"                        pm.expect(unpaid_account_receivable.unpaid_overdue_over == old_data.unpaid_overdue_over).to.be.true;",
											"                    });",
											"                    break;",
											"                case \"overdue_over\":",
											"                    // unpaid_due",
											"                    pm.test(\"nothing happen unpaid_due\", function () {",
											"                        pm.expect(unpaid_account_receivable.unpaid_due == old_data.unpaid_due).to.be.true;",
											"                    });",
											"",
											"                    // unpaid_overdue_less",
											"                    pm.test(\"nothing happen unpaid_overdue_less\", function () {",
											"                        pm.expect(unpaid_account_receivable.unpaid_overdue_less == old_data.unpaid_overdue_less).to.be.true;",
											"                    });",
											"",
											"                    // unpaid_overdue_between",
											"                    pm.test(\"unpaid_overdue_between increase\", function () {",
											"                        pm.expect(unpaid_account_receivable.unpaid_overdue_between == old_data.unpaid_overdue_between).to.be.true;",
											"                    });",
											"",
											"                    // unpaid_overdue_over",
											"                    pm.test(\"unpaid_overdue_over increase \" + total_amount, function () {",
											"                        console.log(\"old: \" + old_data.unpaid_overdue_over);",
											"                        console.log(\"new: \" + unpaid_account_receivable.unpaid_overdue_over);",
											"                        pm.expect(unpaid_account_receivable.unpaid_overdue_over == total_amount + old_data.unpaid_overdue_over).to.be.true;",
											"                    });",
											"                    break;",
											"                default:",
											"                    // unpaid_due",
											"                    pm.test(\"nothing happen unpaid_due\", function () {",
											"                        pm.expect(unpaid_account_receivable.unpaid_due == old_data.unpaid_due).to.be.true;",
											"                    });",
											"",
											"                    // unpaid_overdue_less",
											"                    pm.test(\"nothing happen unpaid_overdue_less\", function () {",
											"                        pm.expect(unpaid_account_receivable.unpaid_overdue_less == old_data.unpaid_overdue_less).to.be.true;",
											"                    });",
											"",
											"                    // unpaid_overdue_between",
											"                    pm.test(\"unpaid_overdue_between increase\", function () {",
											"                        pm.expect(unpaid_account_receivable.unpaid_overdue_between == old_data.unpaid_overdue_between).to.be.true;",
											"                    });",
											"",
											"                    // unpaid_overdue_over",
											"                    pm.test(\"nothing happen unpaid_overdue_over\", function () {",
											"                        pm.expect(unpaid_account_receivable.unpaid_overdue_over == old_data.unpaid_overdue_over).to.be.true;",
											"                    });",
											"                    break;",
											"            }",
											"",
											"            if(due_type == \"undue_n_7d\"){",
											"                // unpaid_overdue_more_than_today",
											"                pm.test(\"nothing happen unpaid_overdue_more_than_today\", function () {",
											"                    pm.expect(unpaid_account_receivable.unpaid_overdue_more_than_today == old_data.unpaid_overdue_more_than_today).to.be.true;",
											"                });",
											"",
											"                // unpaid_overdue_less_than_today",
											"                pm.test(\"unpaid_overdue_less_than_today increase \" + total_amount, function () {",
											"                    console.log(\"old: \" + old_data.unpaid_overdue_less_than_today);",
											"                    console.log(\"expected: \" + (total_amount + old_data.unpaid_overdue_less_than_today));",
											"                    console.log(\"new: \" + unpaid_account_receivable.unpaid_overdue_less_than_today);",
											"                    pm.expect(unpaid_account_receivable.unpaid_overdue_less_than_today == total_amount + old_data.unpaid_overdue_less_than_today).to.be.true;",
											"                });",
											"",
											"                // unpaid_overdue_in_week",
											"                pm.test(\"unpaid_overdue_in_week increase \" + total_amount, function () {",
											"                    console.log(\"old: \" + old_data.unpaid_overdue_in_week);",
											"                    console.log(\"expected: \" + (total_amount + old_data.unpaid_overdue_in_week));",
											"                    console.log(\"new: \" + unpaid_account_receivable.unpaid_overdue_in_week);",
											"                    pm.expect(unpaid_account_receivable.unpaid_overdue_in_week == total_amount + old_data.unpaid_overdue_in_week).to.be.true;",
											"                });",
											"            } else if(due_type == \"due_n_7d\"){",
											"                // unpaid_overdue_more_than_today",
											"                pm.test(\"unpaid_overdue_more_than_today increase \" + total_amount, function () {",
											"                    console.log(\"old: \" + old_data.unpaid_overdue_more_than_today);",
											"                    console.log(\"expected: \" + (total_amount + old_data.unpaid_overdue_more_than_today));",
											"                    console.log(\"new: \" + unpaid_account_receivable.unpaid_overdue_more_than_today);",
											"                    pm.expect(unpaid_account_receivable.unpaid_overdue_more_than_today == total_amount + old_data.unpaid_overdue_more_than_today).to.be.true;",
											"                });",
											"",
											"                // unpaid_overdue_less_than_today",
											"                pm.test(\"nothing happen unpaid_overdue_less_than_today\", function () {",
											"                    pm.expect(unpaid_account_receivable.unpaid_overdue_less_than_today == old_data.unpaid_overdue_less_than_today).to.be.true;",
											"                });",
											"",
											"                // unpaid_overdue_in_week",
											"                pm.test(\"unpaid_overdue_in_week increase \" + total_amount, function () {",
											"                    console.log(\"old: \" + old_data.unpaid_overdue_in_week);",
											"                    console.log(\"expected: \" + (total_amount + old_data.unpaid_overdue_in_week));",
											"                    console.log(\"new: \" + unpaid_account_receivable.unpaid_overdue_in_week);",
											"                    pm.expect(unpaid_account_receivable.unpaid_overdue_in_week == total_amount + old_data.unpaid_overdue_in_week).to.be.true;",
											"                });",
											"            } else if (due_type == \"undue\"){",
											"                // unpaid_overdue_more_than_today",
											"                pm.test(\"nothing happen unpaid_overdue_more_than_today\", function () {",
											"                    pm.expect(unpaid_account_receivable.unpaid_overdue_more_than_today == old_data.unpaid_overdue_more_than_today).to.be.true;",
											"                });",
											"",
											"                // unpaid_overdue_less_than_today",
											"                pm.test(\"unpaid_overdue_less_than_today increase \" + total_amount, function () {",
											"                    console.log(\"old: \" + old_data.unpaid_overdue_less_than_today);",
											"                    console.log(\"expected: \" + (total_amount + old_data.unpaid_overdue_less_than_today));",
											"                    console.log(\"new: \" + unpaid_account_receivable.unpaid_overdue_less_than_today);",
											"                    pm.expect(unpaid_account_receivable.unpaid_overdue_less_than_today == total_amount + old_data.unpaid_overdue_less_than_today).to.be.true;",
											"                });",
											"",
											"                // unpaid_overdue_in_week",
											"                pm.test(\"nothing happen unpaid_overdue_in_week\", function () {",
											"                    pm.expect(unpaid_account_receivable.unpaid_overdue_in_week == old_data.unpaid_overdue_in_week).to.be.true;",
											"                });",
											"            } else {",
											"                // unpaid_overdue_more_than_today",
											"                pm.test(\"unpaid_overdue_more_than_today increase \" + total_amount, function () {",
											"                    console.log(\"old: \" + old_data.unpaid_overdue_more_than_today);",
											"                    console.log(\"expected: \" + (total_amount + old_data.unpaid_overdue_more_than_today));",
											"                    console.log(\"new: \" + unpaid_account_receivable.unpaid_overdue_more_than_today);",
											"                    pm.expect(unpaid_account_receivable.unpaid_overdue_more_than_today == total_amount + old_data.unpaid_overdue_more_than_today).to.be.true;",
											"                });",
											"",
											"                // unpaid_overdue_less_than_today",
											"                pm.test(\"nothing happen unpaid_overdue_less_than_today\", function () {",
											"                    pm.expect(unpaid_account_receivable.unpaid_overdue_less_than_today == old_data.unpaid_overdue_less_than_today).to.be.true;",
											"                });",
											"",
											"                // unpaid_overdue_in_week",
											"                pm.test(\"nothing happen unpaid_overdue_in_week\", function () {",
											"                    pm.expect(unpaid_account_receivable.unpaid_overdue_in_week == old_data.unpaid_overdue_in_week).to.be.true;",
											"                });",
											"            }",
											"",
											"            // update new data",
											"            pm.environment.set(\"C-unpaid_account_receivable\",unpaid_account_receivable);",
											"",
											"            postman.setNextRequest(\"get_payable_bill\"); // get_payable_bill",
											"            break;",
											"        case 5:",
											"            let old_unpaid_account_receivable = pm.environment.get(\"C-unpaid_account_receivable\");",
											"            pm.test(\"Nothing happen with unpaid_account_receivable\", function () {",
											"                console.log(\"old: \", unpaid_account_receivable);",
											"                console.log(\"new: \", old_unpaid_account_receivable);",
											"                pm.expect(JSON.stringify(unpaid_account_receivable) == JSON.stringify(old_unpaid_account_receivable)).to.be.true;",
											"            });",
											"",
											"            // nếu bị bug, có thay đổi, cần lưu lại data mớis",
											"            pm.environment.set(\"C-unpaid_account_receivable\",unpaid_account_receivable);",
											"",
											"            postman.setNextRequest(\"get_payable_bill\"); // get_payable_bill, get_receivable_customer => hiện tại cần BE update lại API cho invoice và bill widget",
											"            break;",
											"        default:",
											"            console.log(\"Missing flow, end test\");",
											"            postman.setNextRequest(null);",
											"            break;",
											"    }",
											"} else {",
											"    console.log(\"Can't get report account receivable unpaid, end test\",jsData);",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{C-userToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{C-payload}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{finone_url}}/fo-order/api/v1/report/account-receivable-card-unpaid",
									"host": [
										"{{finone_url}}"
									],
									"path": [
										"fo-order",
										"api",
										"v1",
										"report",
										"account-receivable-card-unpaid"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_receivable_customer",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let testcase = pm.environment.get(\"C-testcase\");",
											"console.log(\"Testcase: \" + testcase);",
											"",
											"let page = pm.environment.get(\"C-page\");",
											"",
											"if(!page){",
											"    page = 1;",
											"    pm.environment.set(\"C-page\",page);",
											"",
											"    let page_size = 50;",
											"    pm.environment.set(\"C-page_size\",page_size);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"let jsData = JSON.parse(responseBody);",
											"if(pm.response.code == 200){",
											"    let testcase = pm.environment.get(\"C-testcase\");",
											"    let total_pages = jsData.meta.total_pages;",
											"    let page = pm.environment.get(\"C-page\");",
											"",
											"    let list_report_customer, old_list_report_customer;",
											"    switch(testcase){",
											"        case 2:",
											"            list_report_customer = pm.environment.get(\"C-list_report_customer\");",
											"            if(!list_report_customer){",
											"                list_report_customer = [];",
											"            }",
											"            break;",
											"        case 5: case 8:",
											"            old_list_report_customer = pm.environment.get(\"C-old_list_report_customer\");",
											"            if(!old_list_report_customer){",
											"                old_list_report_customer = pm.environment.get(\"C-list_report_customer\");",
											"                pm.environment.unset(\"C-list_report_customer\");",
											"                pm.environment.set(\"C-old_list_report_customer\",old_list_report_customer);",
											"            }",
											"",
											"            list_report_customer = pm.environment.get(\"C-list_report_customer\");",
											"            if(!list_report_customer){",
											"                list_report_customer = [];",
											"            }",
											"            break;",
											"        default:",
											"            console.log(\"Missing flow\");",
											"            break;",
											"    }",
											"",
											"    for(let item in jsData.data){",
											"        list_report_customer[list_report_customer.length] = {",
											"            \"contact_id\":jsData.data[item].contact_id,",
											"            \"unpaid_total\":jsData.data[item].unpaid_total,",
											"            \"unpaid_due\":jsData.data[item].unpaid_due,",
											"            \"unpaid_overdue_less\":jsData.data[item].unpaid_overdue_less,",
											"            \"unpaid_overdue_between\":jsData.data[item].unpaid_overdue_between,",
											"            \"unpaid_overdue_over\":jsData.data[item].unpaid_overdue_over,",
											"            \"full_count\":jsData.data[item].full_count,",
											"            \"contact_name\":jsData.data[item].contact_info.contact_name,",
											"            \"contact_phone\":jsData.data[item].contact_info.contact_phone",
											"        }",
											"    }",
											"    pm.environment.set(\"C-list_report_customer\",list_report_customer);",
											"",
											"    if(page >= total_pages){",
											"        // must clear page & page_size",
											"        pm.environment.unset(\"C-page\");",
											"        pm.environment.unset(\"C-page_size\");",
											"",
											"        let contact_id = pm.environment.get(\"C-contact_id\");",
											"        let invoice_obj = pm.environment.get(\"C-invoice_obj\");",
											"        let total_amount;",
											"        let isFound = false, hasRecord = false;",
											"        switch(testcase){",
											"            case 2:",
											"                pm.test(\"Got all record! \" + list_report_customer.length, function () {",
											"                    pm.expect(list_report_customer.length > 0).to.be.true;",
											"                });",
											"",
											"                postman.setNextRequest(\"get_report_income_expense\"); // get_list_invoice, get_report_income_expense",
											"                break;",
											"            case 8:",
											"                total_amount = parseFloat(invoice_obj.exp_total_amount);",
											"                let record_obj = null;",
											"                let inList = false;",
											"                for(let i in old_list_report_customer){",
											"                    if(old_list_report_customer[i].contact_id == contact_id){",
											"                        inList = true;",
											"                        record_obj = old_list_report_customer[i];",
											"                        break;",
											"                    }",
											"                }",
											"",
											"                if(inList){",
											"                    pm.test(\"Nothing happen with total record\", function () {",
											"                        pm.expect(list_report_customer.length == old_list_report_customer.length).to.be.true;",
											"                    });",
											"                } else {",
											"                    pm.test(\"Total record increase 1\", function () {",
											"                        pm.expect(list_report_customer.length == old_list_report_customer.length + 1).to.be.true;",
											"                    });",
											"                    record_obj = {",
											"                        \"contact_id\":invoice_obj.contact_id,",
											"                        \"unpaid_total\":0,",
											"                        \"unpaid_due\":0,",
											"                        \"unpaid_overdue_less\":0,",
											"                        \"unpaid_overdue_between\":0,",
											"                        \"unpaid_overdue_over\":0,",
											"                        \"full_count\":0,",
											"                        \"contact_name\":null,",
											"                        \"contact_phone\":null",
											"                    }",
											"                }",
											"",
											"                let due_type = pm.environment.get(\"C-due_type\");",
											"                for(let i in list_report_customer){",
											"                    if(list_report_customer[i].contact_id == contact_id){",
											"                        isFound = true;",
											"                        console.log(\"Found \" + list_report_customer[i].contact_name + ' - ' + list_report_customer[i].contact_phone);",
											"                        ",
											"                        pm.test(\"unpaid_total increase \" + total_amount, function () {",
											"                            console.log(\"old: \" + record_obj.unpaid_total);",
											"                            console.log(\"expected: \" + (record_obj.unpaid_total + total_amount));",
											"                            console.log(\"new: \" + list_report_customer[i].unpaid_total);",
											"                            pm.expect(list_report_customer[i].unpaid_total.toFixed(2) == (record_obj.unpaid_total + total_amount).toFixed(2)).to.be.true;",
											"                        });",
											"",
											"                        switch(due_type){",
											"                            case \"due\": case \"due_n_7d\":",
											"                                // unpaid_due",
											"                                pm.test(\"unpaid_due increase \" + total_amount, function () {",
											"                                    console.log(\"old: \" + record_obj.unpaid_due);",
											"                                    console.log(\"new: \" + list_report_customer[i].unpaid_due);",
											"                                    pm.expect(list_report_customer[i].unpaid_due.toFixed(2) == (record_obj.unpaid_due + total_amount).toFixed(2)).to.be.true;",
											"                                });",
											"",
											"                                // unpaid_overdue_less",
											"                                pm.test(\"nothing happen unpaid_overdue_less\", function () {",
											"                                    pm.expect(list_report_customer[i].unpaid_overdue_less == record_obj.unpaid_overdue_less).to.be.true;",
											"                                });",
											"",
											"                                // unpaid_overdue_between",
											"                                pm.test(\"nothing happen unpaid_overdue_between\", function () {",
											"                                    pm.expect(list_report_customer[i].unpaid_overdue_between == record_obj.unpaid_overdue_between).to.be.true;",
											"                                });",
											"",
											"                                // unpaid_overdue_over",
											"                                pm.test(\"nothing happen unpaid_overdue_over\", function () {",
											"                                    pm.expect(list_report_customer[i].unpaid_overdue_over == record_obj.unpaid_overdue_over).to.be.true;",
											"                                });",
											"                                break;",
											"                            case \"overdue_less\":",
											"                                // unpaid_due",
											"                                pm.test(\"nothing happen unpaid_due\", function () {",
											"                                    pm.expect(list_report_customer[i].unpaid_due == record_obj.unpaid_due).to.be.true;",
											"                                });",
											"",
											"                                // unpaid_overdue_less",
											"                                pm.test(\"unpaid_overdue_less increase \" + total_amount, function () {",
											"                                    console.log(\"old: \" + record_obj.unpaid_overdue_less);",
											"                                    console.log(\"new: \" + list_report_customer[i].unpaid_overdue_less);",
											"                                    pm.expect(list_report_customer[i].unpaid_overdue_less.toFixed(2) == (total_amount + record_obj.unpaid_overdue_less).toFixed(2)).to.be.true;",
											"                                });",
											"",
											"                                // unpaid_overdue_between",
											"                                pm.test(\"nothing happen unpaid_overdue_between\", function () {",
											"                                    pm.expect(list_report_customer[i].unpaid_overdue_between == record_obj.unpaid_overdue_between).to.be.true;",
											"                                });",
											"",
											"                                // unpaid_overdue_over",
											"                                pm.test(\"nothing happen unpaid_overdue_over\", function () {",
											"                                    pm.expect(list_report_customer[i].unpaid_overdue_over == record_obj.unpaid_overdue_over).to.be.true;",
											"                                });",
											"                                break;",
											"                            case \"overdue_between\":",
											"                                // unpaid_due",
											"                                pm.test(\"nothing happen unpaid_due\", function () {",
											"                                    pm.expect(list_report_customer[i].unpaid_due == record_obj.unpaid_due).to.be.true;",
											"                                });",
											"",
											"                                // unpaid_overdue_less",
											"                                pm.test(\"nothing happen unpaid_overdue_less\", function () {",
											"                                    pm.expect(list_report_customer[i].unpaid_overdue_less == record_obj.unpaid_overdue_less).to.be.true;",
											"                                });",
											"",
											"                                // unpaid_overdue_between",
											"                                pm.test(\"unpaid_overdue_between increase \" + total_amount, function () {",
											"                                    console.log(\"old: \" + record_obj.unpaid_overdue_between);",
											"                                    console.log(\"new: \" + list_report_customer[i].unpaid_overdue_between);",
											"                                    pm.expect(list_report_customer[i].unpaid_overdue_between.toFixed(2) == (total_amount + record_obj.unpaid_overdue_between).toFixed(2)).to.be.true;",
											"                                });",
											"",
											"                                // unpaid_overdue_over",
											"                                pm.test(\"nothing happen unpaid_overdue_over\", function () {",
											"                                    pm.expect(list_report_customer[i].unpaid_overdue_over == record_obj.unpaid_overdue_over).to.be.true;",
											"                                });",
											"                                break;",
											"                            case \"overdue_over\":",
											"                                // unpaid_due",
											"                                pm.test(\"nothing happen unpaid_due\", function () {",
											"                                    pm.expect(list_report_customer[i].unpaid_due == record_obj.unpaid_due).to.be.true;",
											"                                });",
											"",
											"                                // unpaid_overdue_less",
											"                                pm.test(\"nothing happen unpaid_overdue_less\", function () {",
											"                                    pm.expect(list_report_customer[i].unpaid_overdue_less == record_obj.unpaid_overdue_less).to.be.true;",
											"                                });",
											"",
											"                                // unpaid_overdue_between",
											"                                pm.test(\"unpaid_overdue_between increase\", function () {",
											"                                    pm.expect(list_report_customer[i].unpaid_overdue_between == record_obj.unpaid_overdue_between).to.be.true;",
											"                                });",
											"",
											"                                // unpaid_overdue_over",
											"                                pm.test(\"unpaid_overdue_over increase \" + total_amount, function () {",
											"                                    console.log(\"old: \" + record_obj.unpaid_overdue_over);",
											"                                    console.log(\"new: \" + list_report_customer[i].unpaid_overdue_over);",
											"                                    pm.expect(list_report_customer[i].unpaid_overdue_over.toFixed(2) == (total_amount + record_obj.unpaid_overdue_over).toFixed(2)).to.be.true;",
											"                                });",
											"                                break;",
											"                            default:",
											"                                // unpaid_due",
											"                                pm.test(\"nothing happen unpaid_due\", function () {",
											"                                    pm.expect(list_report_customer[i].unpaid_due == record_obj.unpaid_due).to.be.true;",
											"                                });",
											"",
											"                                // unpaid_overdue_less",
											"                                pm.test(\"nothing happen unpaid_overdue_less\", function () {",
											"                                    pm.expect(list_report_customer[i].unpaid_overdue_less == record_obj.unpaid_overdue_less).to.be.true;",
											"                                });",
											"",
											"                                // unpaid_overdue_between",
											"                                pm.test(\"nothing happen unpaid_overdue_between\", function () {",
											"                                    pm.expect(list_report_customer[i].unpaid_overdue_between == record_obj.unpaid_overdue_between).to.be.true;",
											"                                });",
											"",
											"                                // unpaid_overdue_over",
											"                                pm.test(\"nothing happen unpaid_overdue_over\", function () {",
											"                                    pm.expect(list_report_customer[i].unpaid_overdue_over == record_obj.unpaid_overdue_over).to.be.true;",
											"                                });",
											"                                break;",
											"                        }",
											"                        break;",
											"                    }",
											"                }",
											"",
											"                pm.test(\"Found new product\", function () {",
											"                    pm.expect(isFound).to.be.true;",
											"                });",
											"",
											"                // clear old data to update at next case",
											"                pm.environment.unset(\"C-old_list_report_customer\");",
											"",
											"                postman.setNextRequest(\"get_report_income_expense\"); // get_report_income_expense",
											"                break;",
											"            case 5:",
											"                old_list_report_customer = pm.environment.get(\"C-list_report_customer\");",
											"                pm.test(\"Nothing happen with total record: \" + list_report_customer.length, function () {",
											"                    console.log(\"old: \", old_list_report_customer);",
											"                    console.log(\"new: \", list_report_customer);",
											"                    pm.expect(list_report_customer.length == old_list_report_customer.length).to.be.true;",
											"                });",
											"",
											"                loop:",
											"                for(let j in old_list_report_customer){",
											"                    if(old_list_report_customer[j].contact_id == contact_id){",
											"                        for(let i in list_report_customer){",
											"                            if(list_report_customer[i].contact_id == contact_id){",
											"                                pm.test(\"Nothing happen with data\", function () {",
											"                                    pm.expect(JSON.stringify(list_report_customer[i]) == JSON.stringify(old_list_report_customer[j])).to.be.true;",
											"                                });",
											"                                isFound = true;",
											"                                hasRecord = true;",
											"                                break loop;",
											"                            }",
											"                        }",
											"                        break;",
											"                    }",
											"                }",
											"",
											"                if(!isFound){",
											"                    for(let i in list_report_customer){",
											"                        if(list_report_customer[i].contact_id == contact_id){",
											"                            hasRecord = true;",
											"                            break;",
											"                        }",
											"                    }",
											"                }",
											"",
											"                // console.log(\"hasRecord: \" + hasRecord);",
											"                // console.log(\"isFound: \" + isFound);",
											"                if(hasRecord){",
											"                    pm.test(\"Found data record\", function () {",
											"                        pm.expect(isFound).to.be.true;",
											"                    });",
											"                } else {",
											"                    pm.test(\"Checked data record\", function () {",
											"                        pm.expect(isFound).to.be.false;",
											"                    });",
											"                }",
											"",
											"                // nếu bị bug, có thay đổi, cần lưu lại data mới",
											"                pm.environment.set(\"C-list_report_customer\",list_report_customer);",
											"                pm.environment.unset(\"C-old_list_report_customer\");",
											"",
											"                postman.setNextRequest(\"get_report_income_expense\"); // get_report_income_expense",
											"                break;",
											"            default:",
											"                console.log(\"Missing flow, end test\");",
											"                postman.setNextRequest(null);",
											"                break;",
											"        }",
											"    } else {",
											"        page++;",
											"        pm.environment.set(\"C-page\",page);",
											"",
											"        console.log(\"view next page (\" + page + \") to get more product\");",
											"        postman.setNextRequest(\"get_report_account_receivable_customer\");",
											"    }",
											"} else {",
											"    console.log(\"Can't get list product, end test\",jsData);",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{C-userToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"account_key\": \"A3001\",\n    \"branch_id\": \"{{C-branch_id}}\",\n    \"business_id\": {{C-business_id}},\n    \"page\": {{C-page}},\n    \"page_size\": {{C-page_size}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{finone_url}}/fo-order/api/v1/report/account-receivable-customer-unpaid",
									"host": [
										"{{finone_url}}"
									],
									"path": [
										"fo-order",
										"api",
										"v1",
										"report",
										"account-receivable-customer-unpaid"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "bill_widget",
					"item": [
						{
							"name": "get_payable_bill",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let testcase = pm.environment.get(\"C-testcase\");",
											"console.log(\"Testcase: \" + testcase);",
											"",
											"let payload = {",
											"    \"account_key\": \"B1001\", // account_receivable => A3001, account_payable => B1001",
											"    // \"branch_id\": pm.environment.get(\"C-branch_id\"),",
											"    \"business_id\": parseInt(pm.environment.get(\"C-business_id\"))",
											"    //   \"current_period_end\": \"string\",",
											"    //   \"current_period_start\": \"string\",",
											"    // \"page\": 1,",
											"    // \"page_size\": 20,",
											"    //   \"period\": \"string\",  // old due_days",
											"    //   \"previous_period_end\": \"string\",",
											"    //   \"previous_period_start\": \"string\",",
											"    //   \"report_type\": \"string\",",
											"    // \"timezone\": \"UTC+07:00\"",
											"}",
											"",
											"console.log(\"payload: \",payload);",
											"pm.environment.set(\"C-payload\",JSON.stringify(payload));",
											"pm.environment.set(\"C-report_obj\",payload);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// ============================= get last day (Sun is end of Week)",
											"function getLastDayOfCurrentWeek() {",
											"    const now = new Date();",
											"    const lastDay = new Date(now);",
											"    const daysUntilSunday = 7 - now.getDay();  // if Saturday is end, change 7 => 6",
											"    lastDay.setDate(now.getDate() + daysUntilSunday);",
											"    return lastDay;",
											"}",
											"",
											"// ============================= get first day (Sun is end of Week)",
											"function getFirstDayOfCurrentWeek() {",
											"    const now = new Date();",
											"    const firstDay = new Date(now);",
											"    firstDay.setDate(now.getDate() - now.getDay() + 1);  // if Saturday is end, remove +1",
											"    return firstDay;",
											"}",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsData = pm.response.json();",
											"if(pm.response.code == 200){",
											"    let testcase = pm.environment.get(\"C-testcase\");",
											"    let unpaid_account_payable = null;",
											"    try {",
											"        unpaid_account_payable = jsData.data.unpaid_amount_lifetime_categories;",
											"    } catch {",
											"        console.log(\"Can't get data\");",
											"    }",
											"",
											"    switch(testcase){",
											"        case 2:",
											"            pm.test(\"Got unpaid_account_payable data\", function () {",
											"                pm.environment.set(\"C-unpaid_account_payable\",unpaid_account_payable);",
											"                pm.expect(unpaid_account_payable != null).to.be.true;",
											"            });",
											"            console.log(\"unpaid_account_payable: \", unpaid_account_payable);",
											"",
											"            postman.setNextRequest(\"get_profit_n_loss\"); // get_profit_n_loss",
											"            break;",
											"        case 8:",
											"            let invoice_obj = pm.environment.get(\"C-invoice_obj\");",
											"            let old_data = pm.environment.get(\"C-unpaid_account_payable\");",
											"            let total_amount = parseFloat(invoice_obj.exp_total_amount);",
											"            console.log(\"total_amount: \" + (total_amount + old_data.unpaid_total));",
											"",
											"            pm.test(\"Nothing happen!!!\", function () {",
											"                console.log(\"old: \", old_data);",
											"                console.log(\"new: \", unpaid_account_payable);",
											"                pm.expect(JSON.stringify(unpaid_account_payable) == JSON.stringify(old_data)).to.be.true;",
											"            });",
											"",
											"            // update new data",
											"            // pm.environment.set(\"C-unpaid_account_payable\",unpaid_account_payable);",
											"",
											"            postman.setNextRequest(\"get_profit_n_loss\"); // get_profit_n_loss",
											"            break;",
											"        case 5:",
											"            let old_unpaid_account_payable = pm.environment.get(\"C-unpaid_account_payable\");",
											"            pm.test(\"Nothing happen with unpaid_account_payable\", function () {",
											"                console.log(\"old: \", unpaid_account_payable);",
											"                console.log(\"new: \", old_unpaid_account_payable);",
											"                pm.expect(JSON.stringify(unpaid_account_payable) == JSON.stringify(old_unpaid_account_payable)).to.be.true;",
											"            });",
											"",
											"            // nếu bị bug, có thay đổi, cần lưu lại data mới",
											"            pm.environment.set(\"C-unpaid_account_payable\",unpaid_account_payable);",
											"",
											"            postman.setNextRequest(\"get_profit_n_loss\"); // get_profit_n_loss",
											"            break;",
											"        default:",
											"            console.log(\"Missing flow, end test\");",
											"            postman.setNextRequest(null);",
											"            break;",
											"    }",
											"} else {",
											"    console.log(\"Can't get report account receivable unpaid, end test\",jsData);",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{C-userToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{C-payload}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{finone_url}}/fo-order/api/v1/report/account-receivable-card-unpaid",
									"host": [
										"{{finone_url}}"
									],
									"path": [
										"fo-order",
										"api",
										"v1",
										"report",
										"account-receivable-card-unpaid"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_payable_supplier",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let testcase = pm.environment.get(\"C-testcase\");",
											"console.log(\"Testcase: \" + testcase);",
											"",
											"let page = pm.environment.get(\"C-page\");",
											"",
											"if(!page){",
											"    page = 1;",
											"    pm.environment.set(\"C-page\",page);",
											"",
											"    let page_size = 50;",
											"    pm.environment.set(\"C-page_size\",page_size);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"let jsData = JSON.parse(responseBody);",
											"if(pm.response.code == 200){",
											"    let testcase = pm.environment.get(\"C-testcase\");",
											"    let total_pages = jsData.meta.total_pages;",
											"    let page = pm.environment.get(\"C-page\");",
											"",
											"    let list_report_customer, old_list_report_customer;",
											"    switch(testcase){",
											"        case 2:",
											"            list_report_customer = pm.environment.get(\"C-list_report_customer\");",
											"            if(!list_report_customer){",
											"                list_report_customer = [];",
											"            }",
											"            break;",
											"        case 5: case 8:",
											"            old_list_report_customer = pm.environment.get(\"C-old_list_report_customer\");",
											"            if(!old_list_report_customer){",
											"                old_list_report_customer = pm.environment.get(\"C-list_report_customer\");",
											"                pm.environment.unset(\"C-list_report_customer\");",
											"                pm.environment.set(\"C-old_list_report_customer\",old_list_report_customer);",
											"            }",
											"",
											"            list_report_customer = pm.environment.get(\"C-list_report_customer\");",
											"            if(!list_report_customer){",
											"                list_report_customer = [];",
											"            }",
											"            break;",
											"        default:",
											"            console.log(\"Missing flow\");",
											"            break;",
											"    }",
											"",
											"    for(let item in jsData.data){",
											"        list_report_customer[list_report_customer.length] = {",
											"            \"contact_id\":jsData.data[item].contact_id,",
											"            \"unpaid_total\":jsData.data[item].unpaid_total,",
											"            \"unpaid_due\":jsData.data[item].unpaid_due,",
											"            \"unpaid_overdue_less\":jsData.data[item].unpaid_overdue_less,",
											"            \"unpaid_overdue_between\":jsData.data[item].unpaid_overdue_between,",
											"            \"unpaid_overdue_over\":jsData.data[item].unpaid_overdue_over,",
											"            \"full_count\":jsData.data[item].full_count,",
											"            \"contact_name\":jsData.data[item].contact_info.contact_name,",
											"            \"contact_phone\":jsData.data[item].contact_info.contact_phone",
											"        }",
											"    }",
											"    pm.environment.set(\"C-list_report_customer\",list_report_customer);",
											"",
											"    if(page >= total_pages){",
											"        // must clear page & page_size",
											"        pm.environment.unset(\"C-page\");",
											"        pm.environment.unset(\"C-page_size\");",
											"",
											"        let contact_id = pm.environment.get(\"C-contact_id\");",
											"        let invoice_obj = pm.environment.get(\"C-invoice_obj\");",
											"        let total_amount;",
											"        let isFound = false, hasRecord = false;",
											"        switch(testcase){",
											"            case 2:",
											"                pm.test(\"Got all record! \" + list_report_customer.length, function () {",
											"                    pm.expect(list_report_customer.length > 0).to.be.true;",
											"                });",
											"",
											"                postman.setNextRequest(\"get_report_income_expense\"); // get_list_invoice, get_report_income_expense",
											"                break;",
											"            case 8:",
											"                total_amount = parseFloat(invoice_obj.exp_total_amount);",
											"                let record_obj = null;",
											"                let inList = false;",
											"                for(let i in old_list_report_customer){",
											"                    if(old_list_report_customer[i].contact_id == contact_id){",
											"                        inList = true;",
											"                        record_obj = old_list_report_customer[i];",
											"                        break;",
											"                    }",
											"                }",
											"",
											"                if(inList){",
											"                    pm.test(\"Nothing happen with total record\", function () {",
											"                        pm.expect(list_report_customer.length == old_list_report_customer.length).to.be.true;",
											"                    });",
											"                } else {",
											"                    pm.test(\"Total record increase 1\", function () {",
											"                        pm.expect(list_report_customer.length == old_list_report_customer.length + 1).to.be.true;",
											"                    });",
											"                    record_obj = {",
											"                        \"contact_id\":invoice_obj.contact_id,",
											"                        \"unpaid_total\":0,",
											"                        \"unpaid_due\":0,",
											"                        \"unpaid_overdue_less\":0,",
											"                        \"unpaid_overdue_between\":0,",
											"                        \"unpaid_overdue_over\":0,",
											"                        \"full_count\":0,",
											"                        \"contact_name\":null,",
											"                        \"contact_phone\":null",
											"                    }",
											"                }",
											"",
											"                let due_type = pm.environment.get(\"C-due_type\");",
											"                for(let i in list_report_customer){",
											"                    if(list_report_customer[i].contact_id == contact_id){",
											"                        isFound = true;",
											"                        console.log(\"Found \" + list_report_customer[i].contact_name + ' - ' + list_report_customer[i].contact_phone);",
											"                        ",
											"                        pm.test(\"unpaid_total increase \" + total_amount, function () {",
											"                            console.log(\"old: \" + record_obj.unpaid_total);",
											"                            console.log(\"expected: \" + (record_obj.unpaid_total + total_amount));",
											"                            console.log(\"new: \" + list_report_customer[i].unpaid_total);",
											"                            pm.expect(list_report_customer[i].unpaid_total.toFixed(2) == (record_obj.unpaid_total + total_amount).toFixed(2)).to.be.true;",
											"                        });",
											"",
											"                        switch(due_type){",
											"                            case \"due\": case \"due_n_7d\":",
											"                                // unpaid_due",
											"                                pm.test(\"unpaid_due increase \" + total_amount, function () {",
											"                                    console.log(\"old: \" + record_obj.unpaid_due);",
											"                                    console.log(\"new: \" + list_report_customer[i].unpaid_due);",
											"                                    pm.expect(list_report_customer[i].unpaid_due.toFixed(2) == (record_obj.unpaid_due + total_amount).toFixed(2)).to.be.true;",
											"                                });",
											"",
											"                                // unpaid_overdue_less",
											"                                pm.test(\"nothing happen unpaid_overdue_less\", function () {",
											"                                    pm.expect(list_report_customer[i].unpaid_overdue_less == record_obj.unpaid_overdue_less).to.be.true;",
											"                                });",
											"",
											"                                // unpaid_overdue_between",
											"                                pm.test(\"nothing happen unpaid_overdue_between\", function () {",
											"                                    pm.expect(list_report_customer[i].unpaid_overdue_between == record_obj.unpaid_overdue_between).to.be.true;",
											"                                });",
											"",
											"                                // unpaid_overdue_over",
											"                                pm.test(\"nothing happen unpaid_overdue_over\", function () {",
											"                                    pm.expect(list_report_customer[i].unpaid_overdue_over == record_obj.unpaid_overdue_over).to.be.true;",
											"                                });",
											"                                break;",
											"                            case \"overdue_less\":",
											"                                // unpaid_due",
											"                                pm.test(\"nothing happen unpaid_due\", function () {",
											"                                    pm.expect(list_report_customer[i].unpaid_due == record_obj.unpaid_due).to.be.true;",
											"                                });",
											"",
											"                                // unpaid_overdue_less",
											"                                pm.test(\"unpaid_overdue_less increase \" + total_amount, function () {",
											"                                    console.log(\"old: \" + record_obj.unpaid_overdue_less);",
											"                                    console.log(\"new: \" + list_report_customer[i].unpaid_overdue_less);",
											"                                    pm.expect(list_report_customer[i].unpaid_overdue_less.toFixed(2) == (total_amount + record_obj.unpaid_overdue_less).toFixed(2)).to.be.true;",
											"                                });",
											"",
											"                                // unpaid_overdue_between",
											"                                pm.test(\"nothing happen unpaid_overdue_between\", function () {",
											"                                    pm.expect(list_report_customer[i].unpaid_overdue_between == record_obj.unpaid_overdue_between).to.be.true;",
											"                                });",
											"",
											"                                // unpaid_overdue_over",
											"                                pm.test(\"nothing happen unpaid_overdue_over\", function () {",
											"                                    pm.expect(list_report_customer[i].unpaid_overdue_over == record_obj.unpaid_overdue_over).to.be.true;",
											"                                });",
											"                                break;",
											"                            case \"overdue_between\":",
											"                                // unpaid_due",
											"                                pm.test(\"nothing happen unpaid_due\", function () {",
											"                                    pm.expect(list_report_customer[i].unpaid_due == record_obj.unpaid_due).to.be.true;",
											"                                });",
											"",
											"                                // unpaid_overdue_less",
											"                                pm.test(\"nothing happen unpaid_overdue_less\", function () {",
											"                                    pm.expect(list_report_customer[i].unpaid_overdue_less == record_obj.unpaid_overdue_less).to.be.true;",
											"                                });",
											"",
											"                                // unpaid_overdue_between",
											"                                pm.test(\"unpaid_overdue_between increase \" + total_amount, function () {",
											"                                    console.log(\"old: \" + record_obj.unpaid_overdue_between);",
											"                                    console.log(\"new: \" + list_report_customer[i].unpaid_overdue_between);",
											"                                    pm.expect(list_report_customer[i].unpaid_overdue_between.toFixed(2) == (total_amount + record_obj.unpaid_overdue_between).toFixed(2)).to.be.true;",
											"                                });",
											"",
											"                                // unpaid_overdue_over",
											"                                pm.test(\"nothing happen unpaid_overdue_over\", function () {",
											"                                    pm.expect(list_report_customer[i].unpaid_overdue_over == record_obj.unpaid_overdue_over).to.be.true;",
											"                                });",
											"                                break;",
											"                            case \"overdue_over\":",
											"                                // unpaid_due",
											"                                pm.test(\"nothing happen unpaid_due\", function () {",
											"                                    pm.expect(list_report_customer[i].unpaid_due == record_obj.unpaid_due).to.be.true;",
											"                                });",
											"",
											"                                // unpaid_overdue_less",
											"                                pm.test(\"nothing happen unpaid_overdue_less\", function () {",
											"                                    pm.expect(list_report_customer[i].unpaid_overdue_less == record_obj.unpaid_overdue_less).to.be.true;",
											"                                });",
											"",
											"                                // unpaid_overdue_between",
											"                                pm.test(\"unpaid_overdue_between increase\", function () {",
											"                                    pm.expect(list_report_customer[i].unpaid_overdue_between == record_obj.unpaid_overdue_between).to.be.true;",
											"                                });",
											"",
											"                                // unpaid_overdue_over",
											"                                pm.test(\"unpaid_overdue_over increase \" + total_amount, function () {",
											"                                    console.log(\"old: \" + record_obj.unpaid_overdue_over);",
											"                                    console.log(\"new: \" + list_report_customer[i].unpaid_overdue_over);",
											"                                    pm.expect(list_report_customer[i].unpaid_overdue_over.toFixed(2) == (total_amount + record_obj.unpaid_overdue_over).toFixed(2)).to.be.true;",
											"                                });",
											"                                break;",
											"                            default:",
											"                                // unpaid_due",
											"                                pm.test(\"nothing happen unpaid_due\", function () {",
											"                                    pm.expect(list_report_customer[i].unpaid_due == record_obj.unpaid_due).to.be.true;",
											"                                });",
											"",
											"                                // unpaid_overdue_less",
											"                                pm.test(\"nothing happen unpaid_overdue_less\", function () {",
											"                                    pm.expect(list_report_customer[i].unpaid_overdue_less == record_obj.unpaid_overdue_less).to.be.true;",
											"                                });",
											"",
											"                                // unpaid_overdue_between",
											"                                pm.test(\"nothing happen unpaid_overdue_between\", function () {",
											"                                    pm.expect(list_report_customer[i].unpaid_overdue_between == record_obj.unpaid_overdue_between).to.be.true;",
											"                                });",
											"",
											"                                // unpaid_overdue_over",
											"                                pm.test(\"nothing happen unpaid_overdue_over\", function () {",
											"                                    pm.expect(list_report_customer[i].unpaid_overdue_over == record_obj.unpaid_overdue_over).to.be.true;",
											"                                });",
											"                                break;",
											"                        }",
											"                        break;",
											"                    }",
											"                }",
											"",
											"                pm.test(\"Found new product\", function () {",
											"                    pm.expect(isFound).to.be.true;",
											"                });",
											"",
											"                // clear old data to update at next case",
											"                pm.environment.unset(\"C-old_list_report_customer\");",
											"",
											"                postman.setNextRequest(\"get_report_income_expense\"); // get_report_income_expense",
											"                break;",
											"            case 5:",
											"                old_list_report_customer = pm.environment.get(\"C-list_report_customer\");",
											"                pm.test(\"Nothing happen with total record: \" + list_report_customer.length, function () {",
											"                    console.log(\"old: \", old_list_report_customer);",
											"                    console.log(\"new: \", list_report_customer);",
											"                    pm.expect(list_report_customer.length == old_list_report_customer.length).to.be.true;",
											"                });",
											"",
											"                loop:",
											"                for(let j in old_list_report_customer){",
											"                    if(old_list_report_customer[j].contact_id == contact_id){",
											"                        for(let i in list_report_customer){",
											"                            if(list_report_customer[i].contact_id == contact_id){",
											"                                pm.test(\"Nothing happen with data\", function () {",
											"                                    pm.expect(JSON.stringify(list_report_customer[i]) == JSON.stringify(old_list_report_customer[j])).to.be.true;",
											"                                });",
											"                                isFound = true;",
											"                                hasRecord = true;",
											"                                break loop;",
											"                            }",
											"                        }",
											"                        break;",
											"                    }",
											"                }",
											"",
											"                if(!isFound){",
											"                    for(let i in list_report_customer){",
											"                        if(list_report_customer[i].contact_id == contact_id){",
											"                            hasRecord = true;",
											"                            break;",
											"                        }",
											"                    }",
											"                }",
											"",
											"                // console.log(\"hasRecord: \" + hasRecord);",
											"                // console.log(\"isFound: \" + isFound);",
											"                if(hasRecord){",
											"                    pm.test(\"Found data record\", function () {",
											"                        pm.expect(isFound).to.be.true;",
											"                    });",
											"                } else {",
											"                    pm.test(\"Checked data record\", function () {",
											"                        pm.expect(isFound).to.be.false;",
											"                    });",
											"                }",
											"",
											"                // nếu bị bug, có thay đổi, cần lưu lại data mới",
											"                pm.environment.set(\"C-list_report_customer\",list_report_customer);",
											"                pm.environment.unset(\"C-old_list_report_customer\");",
											"",
											"                postman.setNextRequest(\"get_report_income_expense\"); // get_report_income_expense",
											"                break;",
											"            default:",
											"                console.log(\"Missing flow, end test\");",
											"                postman.setNextRequest(null);",
											"                break;",
											"        }",
											"    } else {",
											"        page++;",
											"        pm.environment.set(\"C-page\",page);",
											"",
											"        console.log(\"view next page (\" + page + \") to get more product\");",
											"        postman.setNextRequest(\"get_report_account_receivable_customer\");",
											"    }",
											"} else {",
											"    console.log(\"Can't get list product, end test\",jsData);",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{C-userToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"account_key\": \"B1001\",\n    \"branch_id\": \"{{C-branch_id}}\",\n    \"business_id\": {{C-business_id}},\n    \"page\": {{C-page}},\n    \"page_size\": {{C-page_size}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{finone_url}}/fo-order/api/v1/report/account-receivable-customer-unpaid",
									"host": [
										"{{finone_url}}"
									],
									"path": [
										"fo-order",
										"api",
										"v1",
										"report",
										"account-receivable-customer-unpaid"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "P_n_L",
					"item": [
						{
							"name": "get_profit_n_loss",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let testcase = pm.environment.get(\"C-testcase\");",
											"console.log(\"Testcase: \" + testcase);",
											"",
											"let payload = {",
											"    \"business_id\": parseInt(pm.environment.get(\"C-business_id\")),",
											"    \"period\":\"month\"",
											"    // \"current_period_start\": pm.environment.get(\"C-current_period_start\"),",
											"    // \"current_period_end\": pm.environment.get(\"C-current_period_end\")",
											"}",
											"",
											"console.log(\"payload: \",payload);",
											"pm.environment.set(\"C-payload\",JSON.stringify(payload));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsData = pm.response.json();",
											"if(pm.response.code == 200){",
											"    let testcase = pm.environment.get(\"C-testcase\");",
											"",
											"    let profit_n_loss_app = null;",
											"    let invoice_obj;",
											"    switch(testcase){",
											"        case 2:",
											"            profit_n_loss_app = jsData.data.sum_card_data; // chỉ check phần summary",
											"            pm.test(\"Got profit_n_loss_app \", function () {",
											"                // sum_card_data.total_balance_amount",
											"                // dates_data",
											"                pm.environment.set(\"C-profit_n_loss_app\",profit_n_loss_app);",
											"                pm.expect(profit_n_loss_app != null).to.be.true;",
											"            });",
											"            console.log(\"profit_n_loss_app: \" , profit_n_loss_app);",
											"",
											"            postman.setNextRequest(\"get_profit_chart\"); // get_profit_chart",
											"            break;",
											"        case 5:",
											"            postman.setNextRequest(null);",
											"            break;",
											"        case 8:",
											"            invoice_obj = pm.environment.get(\"C-invoice_obj\");",
											"            let exchange_amount = 0;",
											"            for(let i in invoice_obj.items){",
											"                exchange_amount += (invoice_obj.items[i].before_tax_amount - invoice_obj.items[i].discount_amount);",
											"            }",
											"",
											"            let old_profit_n_loss_app = pm.environment.get(\"C-profit_n_loss_app\");",
											"            profit_n_loss_app = jsData.data.sum_card_data;",
											"            console.log(\"old: \" + JSON.stringify(old_profit_n_loss_app));",
											"            console.log(\"new: \" + JSON.stringify(profit_n_loss_app));",
											"",
											"            let invoice_date = new Date(invoice_obj.value_at);",
											"            console.log(\"invoice_date: \" + invoice_date);",
											"            let current_date = new Date();",
											"            // tháng hiện tại",
											"            if(invoice_date.getMonth() == current_date.getMonth()){",
											"                // total_profit",
											"                pm.test(\"total_profit increase \" + exchange_amount, function () {",
											"                    pm.expect(old_profit_n_loss_app.total_profit + exchange_amount == profit_n_loss_app.total_profit).to.be.true;",
											"                });",
											"",
											"                // total_income",
											"                pm.test(\"total_income increase \" + exchange_amount, function () {",
											"                    pm.expect(old_profit_n_loss_app.total_income + exchange_amount == profit_n_loss_app.total_income).to.be.true;",
											"                });",
											"",
											"                // total_expense",
											"                pm.test(\"nothing happen with total_expense\", function () {",
											"                    pm.expect(old_profit_n_loss_app.total_expense == profit_n_loss_app.total_expense).to.be.true;",
											"                });",
											"",
											"                // total_gap",
											"                pm.test(\"total_gap increase \" + exchange_amount, function () {",
											"                    pm.expect(old_profit_n_loss_app.total_gap + exchange_amount == profit_n_loss_app.total_gap).to.be.true;",
											"                });",
											"            } else if(current_date.getMonth() > 0 && (invoice_date.getMonth() + 1) == current_date.getMonth()){",
											"                // previous_total_profit",
											"                pm.test(\"previous_total_profit increase \" + exchange_amount, function () {",
											"                    pm.expect(old_profit_n_loss_app.previous_total_profit + exchange_amount == profit_n_loss_app.previous_total_profit).to.be.true;",
											"                });",
											"",
											"                // previous_total_income",
											"                pm.test(\"previous_total_income increase \" + exchange_amount, function () {",
											"                    pm.expect(old_profit_n_loss_app.previous_total_income + exchange_amount == profit_n_loss_app.previous_total_income).to.be.true;",
											"                });",
											"",
											"                // total_gap",
											"                pm.test(\"total_gap decrease \" + exchange_amount, function () {",
											"                    pm.expect(old_profit_n_loss_app.total_gap - exchange_amount == profit_n_loss_app.total_gap).to.be.true;",
											"                });",
											"            } else {",
											"                pm.test(\"Nothing happen!!!\", function () {",
											"                    pm.expect(JSON.stringify(old_profit_n_loss_app) == JSON.stringify(profit_n_loss_app)).to.be.true;",
											"                });",
											"            }",
											"",
											"            postman.setNextRequest(\"get_profit_chart\"); // get_profit_chart",
											"            break;",
											"        default:",
											"            console.log(\"Missing flow, end test\");",
											"            postman.setNextRequest(null);",
											"            break;",
											"    }",
											"} else {",
											"    console.log(\"Can't get profit and loss on app, end test\",jsData);",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "authorization",
										"value": "Bearer {{C-userToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{C-payload}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{finone_url}}/fo-ledger/api/v1/report/chart-profit-loss-detail",
									"host": [
										"{{finone_url}}"
									],
									"path": [
										"fo-ledger",
										"api",
										"v1",
										"report",
										"chart-profit-loss-detail"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_profit_n_loss_branch",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let testcase = pm.environment.get(\"C-testcase\");",
											"console.log(\"Testcase: \" + testcase);",
											"",
											"let payload = {",
											"    \"business_id\": parseInt(pm.environment.get(\"C-business_id\")),",
											"    \"branch_id\": pm.environment.get(\"C-branch_id\"),",
											"    \"current_period_start\": pm.environment.get(\"C-current_period_start\"),",
											"    \"current_period_end\": pm.environment.get(\"C-current_period_end\")",
											"}",
											"",
											"console.log(\"payload: \",payload);",
											"pm.environment.set(\"C-payload\",JSON.stringify(payload));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsData = pm.response.json();",
											"if(pm.response.code == 200){",
											"    let testcase = pm.environment.get(\"C-testcase\");",
											"",
											"    let profit_n_loss_app = null;",
											"    let invoice_obj, invoice_date;",
											"    switch(testcase){",
											"        case 2:",
											"            profit_n_loss_app = jsData.data.sum_card_data; // chỉ check phần summary",
											"            pm.test(\"Got profit_n_loss_app \", function () {",
											"                // sum_card_data.total_balance_amount",
											"                // dates_data",
											"                pm.environment.set(\"C-profit_n_loss_app\",profit_n_loss_app);",
											"                pm.expect(profit_n_loss_app != null).to.be.true;",
											"            });",
											"            console.log(\"profit_n_loss_app: \" , profit_n_loss_app);",
											"",
											"            postman.setNextRequest(\"get_profit_chart\"); // get_profit_chart",
											"            break;",
											"        default:",
											"            console.log(\"Missing flow, end test\");",
											"            postman.setNextRequest(null);",
											"            break;",
											"    }",
											"} else {",
											"    console.log(\"Can't get profit and loss on app, end test\",jsData);",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "authorization",
										"value": "Bearer {{C-userToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{C-payload}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{finone_url}}/fo-ledger/api/v1/report/chart-profit-loss-detail",
									"host": [
										"{{finone_url}}"
									],
									"path": [
										"fo-ledger",
										"api",
										"v1",
										"report",
										"chart-profit-loss-detail"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "sales",
					"item": [
						{
							"name": "get_profit_chart",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let testcase = pm.environment.get(\"C-testcase\");",
											"console.log(\"Testcase: \" + testcase);",
											"",
											"let payload = {",
											"    \"business_id\": parseInt(pm.environment.get(\"C-business_id\")),",
											"    \"period\": \"month\",",
											"    \"report_type\": \"income\" // expense, profit, income",
											"}",
											"",
											"console.log(\"payload: \",payload);",
											"pm.environment.set(\"C-payload\",JSON.stringify(payload));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// ============================= getFirstDayOfMonth",
											"function getFirstDayOfMonth(date_timestamp){",
											"  let setDate = new Date(date_timestamp*1000);",
											"  let getDate = new Date(setDate.getFullYear(), setDate.getMonth(), 1);",
											"  return getDate.toISOString();",
											"}",
											"",
											"// ============================= getLastDayOfMonth",
											"function getLastDayOfMonth(date_timestamp){",
											"  let setDate = new Date(date_timestamp*1000);",
											"  let firstDayOfNextMonth = new Date(setDate.getFullYear(), setDate.getMonth() + 1, 1);",
											"  let lastDayOfMonth = new Date(firstDayOfNextMonth - 1);",
											"  return lastDayOfMonth.toISOString();",
											"}",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsData = pm.response.json();",
											"if(pm.response.code == 200){",
											"    let testcase = pm.environment.get(\"C-testcase\");",
											"",
											"    let profit_period = null;",
											"    try {",
											"        profit_period = jsData.data;",
											"        /**",
											"         * period: week, month, year",
											"         * sum_card_data",
											"         * dates_data",
											"         */",
											"    } catch {",
											"        console.log(\"Can't get report cash_flow data\");",
											"    }",
											"",
											"    let invoice_obj, invoice_date;",
											"    switch(testcase){",
											"        case 2:",
											"            pm.test(\"Got profit_period \", function () {",
											"                pm.environment.set(\"C-profit_period\",profit_period);",
											"                pm.expect(profit_period != null).to.be.true;",
											"            });",
											"            pm.environment.set(\"C-profit_period\",profit_period);",
											"            console.log(\"profit_period: \", profit_period);",
											"",
											"            // BE cần trả về data tháng cũ tương ứng",
											"",
											"            postman.setNextRequest(\"get_income_report\"); // get_income_report",
											"            break;",
											"        case 5:",
											"            invoice_obj = pm.environment.get(\"C-invoice_obj\");",
											"            invoice_date = invoice_obj.value_at.substring(0,10);",
											"            // Invoice sẽ tăng profit (income), Bill sẽ tăng loss (chi phí)",
											"            ",
											"            postman.setNextRequest(\"\"); // calculate_invoice     ",
											"            break;",
											"        case 8:",
											"            invoice_obj = pm.environment.get(\"C-invoice_obj\");",
											"            let exchange_amount = 0;",
											"            for(let i in invoice_obj.items){",
											"                exchange_amount += (invoice_obj.items[i].before_tax_amount - invoice_obj.items[i].discount_amount);",
											"            }",
											"",
											"            let old_profit_period = pm.environment.get(\"C-profit_period\");",
											"            profit_period = jsData.data;",
											"            // console.log(\"old: \" + JSON.stringify(old_profit_period));",
											"            // console.log(\"new: \" + JSON.stringify(profit_period));",
											"",
											"            invoice_date = invoice_obj.value_at;",
											"            console.log(\"invoice_date: \" + invoice_date);",
											"            // do thời gian lọc là tháng hiện tại => chỉ thay đổi khi value_at nằm trong tháng hiện tại",
											"            let today = new Date();",
											"            let today_tmp = Math.floor(today.getTime()/1000);",
											"            let invoice_date_fm = new Date(invoice_obj.value_at);",
											"            let firstDayOfThisMonth = getFirstDayOfMonth(today_tmp);",
											"            let lastDayOfThisMonth = getLastDayOfMonth(today_tmp);",
											"            if(today.getMonth() > 0 && (invoice_date_fm.getMonth() + 1) == today.getMonth()){",
											"                // total_income",
											"                pm.test(\"nothing happen with total_income\", function () {",
											"                    pm.expect(old_profit_period.sum_card_data.total_income == profit_period.sum_card_data.total_income).to.be.true;",
											"                });",
											"",
											"                // previous_total_income",
											"                pm.test(\"previous_total_income increase \" + exchange_amount, function () {",
											"                    console.log(\"old: \", old_profit_period.sum_card_data);",
											"                    console.log(\"new: \", profit_period.sum_card_data);",
											"                    pm.expect(old_profit_period.sum_card_data.previous_total_income + exchange_amount == profit_period.sum_card_data.previous_total_income).to.be.true;",
											"                });",
											"            } else if(invoice_date < firstDayOfThisMonth || invoice_date > lastDayOfThisMonth){",
											"                // nothing happen",
											"                pm.test(\"Nothing happen!!!\", function () {",
											"                    pm.expect(JSON.stringify(profit_period) == JSON.stringify(old_profit_period)).to.be.true;",
											"                });",
											"            } else  {",
											"                invoice_date = invoice_date.substring(0,10);",
											"",
											"                // total_income",
											"                pm.test(\"total_income increase \" + exchange_amount, function () {",
											"                    console.log(\"old: \", old_profit_period.sum_card_data);",
											"                    console.log(\"new: \", profit_period.sum_card_data);",
											"                    pm.expect(old_profit_period.sum_card_data.total_income + exchange_amount == profit_period.sum_card_data.total_income).to.be.true;",
											"                });",
											"",
											"                // previous_total_income",
											"                pm.test(\"nothing happen with previous_total_income\", function () {",
											"                    pm.expect(old_profit_period.sum_card_data.previous_total_income == profit_period.sum_card_data.previous_total_income).to.be.true;",
											"                });",
											"",
											"                // thay đổi ngày tương ứng",
											"                let old_date = null, act_date = null;",
											"                for(let i in profit_period.dates_data){",
											"                    let day_i = profit_period.dates_data[i].date.substring(0,10);",
											"                    if(day_i == invoice_date){",
											"                        act_date = profit_period.dates_data[i];",
											"                        break;",
											"                    }",
											"                }",
											"",
											"                for(let i in old_profit_period.dates_data){",
											"                    let day_i = old_profit_period.dates_data[i].date.substring(0,10);",
											"                    if(day_i == invoice_date){",
											"                        old_date = old_profit_period.dates_data[i];",
											"                        break;",
											"                    }",
											"                }",
											"",
											"                if(old_date != null && act_date != null){",
											"                    console.log(\"act_date: \",act_date);",
											"                    console.log(\"old_date: \",old_date);",
											"                    pm.test(\"income at \" + invoice_date + \" increase \" + exchange_amount, function () {",
											"                        pm.expect(act_date.income == old_date.income + exchange_amount).to.be.true;",
											"                    });",
											"                }",
											"            }",
											"",
											"            postman.setNextRequest(\"get_income_report\"); // get_income_report",
											"            break;",
											"        default:",
											"            console.log(\"Missing flow, end test\");",
											"            postman.setNextRequest(null);",
											"            break;",
											"    }",
											"} else {",
											"    console.log(\"Can't get report P&L period, end test\",jsData);",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-location-timezone",
										"value": "Asia/Saigon",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{C-userToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{C-payload}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{finone_url}}/fo-ledger/api/v1/report/profit-loss-period",
									"host": [
										"{{finone_url}}"
									],
									"path": [
										"fo-ledger",
										"api",
										"v1",
										"report",
										"profit-loss-period"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_profit_chart_branch",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let testcase = pm.environment.get(\"C-testcase\");",
											"console.log(\"Testcase: \" + testcase);",
											"",
											"let payload = {",
											"    \"business_id\": parseInt(pm.environment.get(\"C-business_id\")),",
											"    \"branch_id\": pm.environment.get(\"C-branch_id\"),",
											"    \"period\": \"month\",",
											"    \"report_type\": \"profit\" // expense, profit",
											"}",
											"",
											"console.log(\"payload: \",payload);",
											"pm.environment.set(\"C-payload\",JSON.stringify(payload));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// ============================= getFirstDayOfMonth",
											"function getFirstDayOfMonth(date_timestamp){",
											"  let setDate = new Date(date_timestamp*1000);",
											"  let getDate = new Date(setDate.getFullYear(), setDate.getMonth(), 1);",
											"  return getDate.toISOString();",
											"}",
											"",
											"// ============================= getLastDayOfMonth",
											"function getLastDayOfMonth(date_timestamp){",
											"  let setDate = new Date(date_timestamp*1000);",
											"  let firstDayOfNextMonth = new Date(setDate.getFullYear(), setDate.getMonth() + 1, 1);",
											"  let lastDayOfMonth = new Date(firstDayOfNextMonth - 1);",
											"  return lastDayOfMonth.toISOString();",
											"}",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsData = pm.response.json();",
											"if(pm.response.code == 200){",
											"    let testcase = pm.environment.get(\"C-testcase\");",
											"",
											"    let profit_period = null;",
											"    try {",
											"        profit_period = jsData.data;",
											"        /**",
											"         * period: week, month, year",
											"         * sum_card_data",
											"         * dates_data",
											"         */",
											"    } catch {",
											"        console.log(\"Can't get report cash_flow data\");",
											"    }",
											"",
											"    let invoice_obj, invoice_date;",
											"    switch(testcase){",
											"        case 2:",
											"            pm.test(\"Got profit_period \", function () {",
											"                pm.environment.set(\"C-profit_period\",profit_period);",
											"                pm.expect(profit_period != null).to.be.true;",
											"            });",
											"            pm.environment.set(\"C-profit_period\",profit_period);",
											"            console.log(\"profit_period: \", profit_period);",
											"",
											"",
											"            postman.setNextRequest(\"get_income_report\"); // get_income_report",
											"            break;",
											"        case 5:",
											"            invoice_obj = pm.environment.get(\"C-invoice_obj\");",
											"            invoice_date = invoice_obj.value_at.substring(0,10);",
											"            // Invoice sẽ tăng profit (income), Bill sẽ tăng loss (chi phí)",
											"            ",
											"            // if(full_check == 1){",
											"            //     let old_profit_period = pm.environment.get(\"C-profit_period\");",
											"            //     // console.log(\"debug old_loss_period: \", old_profit_period);",
											"            //     // console.log(\"debug loss_period: \", profit_period);",
											"",
											"            //     pm.test(\"Nothing happen!!!\", function () {",
											"            //         pm.expect(JSON.stringify(profit_period) == JSON.stringify(old_profit_period)).to.be.true;",
											"            //     });",
											"",
											"            //     full_check++;",
											"            //     pm.environment.set(\"C-full_check\",full_check);",
											"            //     postman.setNextRequest(\"report_profit_loss_period\");",
											"            // } else {",
											"            //     let old_loss_period = pm.environment.get(\"C-loss_period\");",
											"            //     // console.log(\"debug old_loss_period: \", old_loss_period);",
											"            //     // console.log(\"debug loss_period: \", loss_period);",
											"                ",
											"            //     pm.test(\"Nothing happen!!!\", function () {",
											"            //         pm.expect(JSON.stringify(loss_period) == JSON.stringify(old_loss_period)).to.be.true;",
											"            //     });",
											"",
											"            //     pm.environment.unset(\"C-full_check\");",
											"",
											"            //     testcase++;",
											"            //     pm.environment.set(\"C-testcase\",testcase);",
											"            //     postman.setNextRequest(\"calculate_invoice\"); // calculate_invoice",
											"            // }",
											"            break;",
											"        case 8:",
											"            invoice_obj = pm.environment.get(\"C-invoice_obj\");",
											"            invoice_date = invoice_obj.value_at;",
											"            console.log(\"invoice_date: \" + invoice_date);",
											"",
											"            // if(full_check == 1){",
											"            //     let old_profit_period = pm.environment.get(\"C-profit_period\");",
											"            //     // console.log(\"debug old_loss_period: \", old_profit_period);",
											"            //     // console.log(\"debug loss_period: \", profit_period);",
											"",
											"            //     // do thời gian lọc là tháng hiện tại => chỉ thay đổi khi value_at nằm trong tháng hiện tại",
											"            //     let today = new Date();",
											"            //     let today_tmp = Math.floor(today.getTime()/1000);",
											"            //     let firstDayOfThisMonth = getFirstDayOfMonth(today_tmp);",
											"            //     let lastDayOfThisMonth = getLastDayOfMonth(today_tmp);",
											"            //     if(invoice_date < firstDayOfThisMonth || invoice_date > lastDayOfThisMonth){",
											"            //         // nothing happen",
											"            //         pm.test(\"Nothing happen!!!\", function () {",
											"            //             pm.expect(JSON.stringify(profit_period) == JSON.stringify(old_profit_period)).to.be.true;",
											"            //         });",
											"            //     } else {",
											"            //         invoice_date = invoice_date.substring(0,10);",
											"",
											"            //         let income_product = 0, income_discount = 0;",
											"            //         for(let i in invoice_obj.items){",
											"            //             income_product += invoice_obj.items[i].before_tax_amount;",
											"            //             income_discount += invoice_obj.items[i].discount_amount;",
											"            //         }",
											"            //         let exp_change = income_product - income_discount;",
											"            //         // có thay đổi => total_income increase",
											"            //         pm.test(\"total_income increase \" + exp_change, function () {",
											"            //             pm.expect(profit_period.sum_card_data.total_income == old_profit_period.sum_card_data.total_income + exp_change).to.be.true;",
											"            //         });",
											"            //         // thay đổi ngày tương ứng",
											"            //         let old_date = null, act_date = null;",
											"            //         for(let i in profit_period.dates_data){",
											"            //             let day_i = profit_period.dates_data[i].date.substring(0,10);",
											"            //             if(day_i == invoice_date){",
											"            //                 act_date = profit_period.dates_data[i];",
											"            //                 break;",
											"            //             }",
											"            //         }",
											"",
											"            //         for(let i in old_profit_period.dates_data){",
											"            //             let day_i = old_profit_period.dates_data[i].date.substring(0,10);",
											"            //             if(day_i == invoice_date){",
											"            //                 old_date = old_profit_period.dates_data[i];",
											"            //                 break;",
											"            //             }",
											"            //         }",
											"",
											"            //         if(old_date != null && act_date != null){",
											"            //             console.log(\"act_date: \",act_date);",
											"            //             console.log(\"old_date: \",old_date);",
											"            //             pm.test(\"income at \" + invoice_date + \" increase \" + exp_change, function () {",
											"            //                 pm.expect(act_date.income == old_date.income + exp_change).to.be.true;",
											"            //             });",
											"            //         }",
											"            //     }",
											"",
											"            //     full_check++;",
											"            //     pm.environment.set(\"C-full_check\",full_check);",
											"            //     postman.setNextRequest(\"report_profit_loss_period\");",
											"            // } else {",
											"            //     let old_loss_period = pm.environment.get(\"C-loss_period\");",
											"            //     // console.log(\"debug old_loss_period: \", old_loss_period);",
											"            //     // console.log(\"debug loss_period: \", loss_period);",
											"                ",
											"            //     pm.test(\"Nothing happen!!!\", function () {",
											"            //         pm.expect(JSON.stringify(loss_period) == JSON.stringify(old_loss_period)).to.be.true;",
											"            //     });",
											"",
											"            //     pm.environment.unset(\"C-full_check\");",
											"",
											"            //     console.log(\"-------- End Testsuite 06 --------\");",
											"            //     postman.setNextRequest(null);",
											"            // }",
											"            break;",
											"        default:",
											"            console.log(\"Missing flow, end test\");",
											"            postman.setNextRequest(null);",
											"            break;",
											"    }",
											"} else {",
											"    console.log(\"Can't get report P&L period, end test\",jsData);",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-location-timezone",
										"value": "UTC+07:00"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{C-userToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{C-payload}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{finone_url}}/fo-ledger/api/v1/report/profit-loss-period",
									"host": [
										"{{finone_url}}"
									],
									"path": [
										"fo-ledger",
										"api",
										"v1",
										"report",
										"profit-loss-period"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_income_report",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let testcase = pm.environment.get(\"C-testcase\");",
											"console.log(\"Testcase: \" + testcase);",
											"",
											"let payload = {",
											"    // \"branch_id\": pm.environment.get(\"C-branch_id\"),",
											"    \"business_id\": parseInt(pm.environment.get(\"C-business_id\")),",
											"    \"report_type\": \"income\",",
											"    \"period\": \"month\"",
											"    // \"current_period_start\": current_period_start,",
											"    // \"current_period_end\": current_period_end",
											"}",
											"",
											"console.log(\"payload: \",payload);",
											"pm.environment.set(\"C-payload\",JSON.stringify(payload));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// ============================= sort by key",
											"function sortByKey(array, key, type) {",
											"    if(type == \"asc\"){",
											"        return array.sort(function(a, b) {",
											"            var x = a[key]; var y = b[key];",
											"            return ((x > y) ? -1 : ((x < y) ? 1 : 0));",
											"        });",
											"    } else {",
											"        return array.sort(function(a, b) {",
											"            var x = a[key]; var y = b[key];",
											"            return ((x < y) ? -1 : ((x > y) ? 1 : 0));",
											"        });",
											"    }",
											"}",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsData = pm.response.json();",
											"if(pm.response.code == 200){",
											"    let testcase = pm.environment.get(\"C-testcase\");",
											"    let report_income = null;",
											"    try {",
											"        report_income = jsData.data;",
											"    } catch {",
											"        console.log(\"Can't get report cash_flow data\");",
											"    }",
											"",
											"    let old_report_income = pm.environment.get(\"C-report_income\");",
											"    switch(testcase){",
											"        case 2:",
											"            pm.test(\"Got report_income\", function () {",
											"                pm.expect(report_income != null).to.be.true;",
											"            });",
											"            pm.environment.set(\"C-report_income\",report_income);",
											"            console.log(\"report_income: \", report_income);",
											"",
											"            postman.setNextRequest(\"get_product_report\"); // get_product_report",
											"            break;",
											"        case 8:",
											"            let ranTimeCase = pm.environment.get(\"C-ranTimeCase\");",
											"            // console.log(\"old_report_income: \",old_report_income);",
											"            // console.log(\"===================\");",
											"            // console.log(\"report_income: \",report_income);",
											"            // hiện tại report đang lấy thời gian 1 tháng hiện tại => chỉ handle với case ranTimeCase == 2 || 3;",
											"            ",
											"            if(ranTimeCase == 2 || ranTimeCase == 3){",
											"                let invoice_obj = pm.environment.get(\"C-invoice_obj\");",
											"                old_report_income = pm.environment.get(\"C-report_income\");",
											"                /**",
											"                 * Check rule:",
											"                 * - Xử lý data cho invoice_obj: sum amount của tất cả product cùng coa",
											"                 * - IF line_item trong invoice_obj có tồn tại trong old_report_income => thay đổi total_amount tương ứng",
											"                 * - ELSE:",
											"                 *    - IF line_item trong invoice_obj có tồn tại trong report_income => so sánh total_amount của product tương ứng với old_report_income (*)",
											"                 * Note:",
											"                 * (*) Cách so sánh: report_income[i].total_amount - invoice_obj.items[item].before_tax_amount < min(old_report_income.amount)",
											"                 */",
											"",
											"                console.log(\"invoice_obj: \", invoice_obj);",
											"                console.log(\"===================\");",
											"                console.log(\"old_report_income: \",old_report_income);",
											"                console.log(\"===================\");",
											"                console.log(\"report_income: \",report_income);",
											"",
											"                let list_item_objs = [];",
											"                for(let item in invoice_obj.items){",
											"                    if(list_item_objs.length == 0){",
											"                        list_item_objs[list_item_objs.length] = {",
											"                            \"account_id\":invoice_obj.items[item].account_id,",
											"                            \"name\":invoice_obj.items[item].name,",
											"                            \"before_tax_amount\":invoice_obj.items[item].before_tax_amount",
											"                        }",
											"                    } else {",
											"                        let is_found_item = false;",
											"                        for(let i in list_item_objs){",
											"                            if(list_item_objs[i].account_id == invoice_obj.items[item].account_id){",
											"                                is_found_item = true;",
											"                                list_item_objs[i].before_tax_amount += invoice_obj.items[item].before_tax_amount;",
											"                                break;",
											"                            }",
											"                        }",
											"",
											"                        if(!is_found_item){",
											"                            list_item_objs[list_item_objs.length] = {",
											"                                \"account_id\":invoice_obj.items[item].account_id,",
											"                                \"name\":invoice_obj.items[item].name,",
											"                                \"before_tax_amount\":invoice_obj.items[item].before_tax_amount",
											"                            }",
											"                        }",
											"                    }",
											"                }",
											"                console.log(\"===================\");",
											"                console.log(\"list_item_objs: \",list_item_objs);",
											"",
											"                let old_list_objs = [];",
											"                for(let i in old_report_income){",
											"                    for(let item in list_item_objs){",
											"                        if(old_report_income[i].coa_id == list_item_objs[item].account_id){",
											"                            console.log(\"Find product \" + list_item_objs[item].name + \" with coa \" + old_report_income[i].coa_name + \" in report!\");",
											"                            old_list_objs[old_list_objs.length] = old_report_income[i];",
											"",
											"                            old_list_objs[old_list_objs.length - 1 ].amount = list_item_objs[item].before_tax_amount;",
											"                            // ở đây ko break vì có thể có nhiều product;",
											"                        }",
											"                    }",
											"                }",
											"",
											"                let count = 0;",
											"                if(old_list_objs.length > 0){",
											"                    for(let i in old_list_objs){",
											"                        for(let j in report_income){",
											"                            if(old_list_objs[i].coa_id == report_income[j].coa_id){",
											"                                count++;",
											"                                pm.test(\"coa_name \" + old_list_objs[i].coa_name + \" increase \" + old_list_objs[i].amount, function () {",
											"                                    pm.expect(report_income[j].total_amount).to.eql(old_list_objs[i].total_amount + old_list_objs[i].amount);",
											"                                });",
											"                                break;",
											"                            }",
											"                        }",
											"                    }",
											"",
											"                    // check total",
											"                } else {",
											"                    let new_list_objs = [];",
											"                    for(let i in report_income){",
											"                        for(let item in list_item_objs){",
											"                            if(report_income[i].coa_id == list_item_objs[item].account_id){",
											"                                new_list_objs[new_list_objs.length] = report_income[i];",
											"",
											"                                new_list_objs[new_list_objs.length - 1 ].amount = list_item_objs[item].before_tax_amount;",
											"                                // ở đây ko break vì có thể có nhiều product;",
											"                            }",
											"                        }",
											"                    }",
											"",
											"                    if(new_list_objs.length > 0){",
											"                        for(let i in new_list_objs){",
											"                            for(let j in report_income){",
											"                                if(new_list_objs[i].coa_id == report_income[j].coa_id){",
											"                                    pm.test(\"coa_name \" + new_list_objs[i].coa_name + \" increase \" + new_list_objs[i].amount, function () {",
											"                                        pm.expect(old_report_income[old_report_income.length - 1].total_amount > new_list_objs[i].total_amount + new_list_objs[i].amount).to.be.true;",
											"                                    });",
											"                                    break;",
											"                                }",
											"                            }",
											"                        }",
											"                    }",
											"                }",
											"            } else {",
											"                pm.test(\"Nothing happen with report_income\", function () {",
											"                    pm.expect(JSON.stringify(report_income) == JSON.stringify(old_report_income)).to.be.true;",
											"                });",
											"            }",
											"         ",
											"            postman.setNextRequest(\"get_product_report\"); // get_product_report",
											"            break;",
											"        case 5:",
											"            old_report_income = pm.environment.get(\"C-report_income\");",
											"            pm.test(\"Nothing happen with report_income\", function () {",
											"                console.log(\"old_report_income: \",old_report_income);",
											"                console.log(\"===================\");",
											"                console.log(\"report_income: \",report_income);",
											"                pm.expect(JSON.stringify(report_income) == JSON.stringify(old_report_income)).to.be.true;",
											"            });",
											"            ",
											"            postman.setNextRequest(\"\"); // report_profit_loss_period",
											"            break;",
											"        default:",
											"            console.log(\"Missing flow, end test\");",
											"            postman.setNextRequest(null);",
											"            break;",
											"    }",
											"} else {",
											"    console.log(\"Can't get report cash_flow, end test\",jsData);",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{C-userToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{C-payload}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{finone_url}}/fo-ledger/api/v1/report/summary-by-category",
									"host": [
										"{{finone_url}}"
									],
									"path": [
										"fo-ledger",
										"api",
										"v1",
										"report",
										"summary-by-category"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_income_report_branch",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let testcase = pm.environment.get(\"C-testcase\");",
											"console.log(\"Testcase: \" + testcase);",
											"",
											"let payload = {",
											"    // \"branch_id\": pm.environment.get(\"C-branch_id\"),",
											"    \"business_id\": parseInt(pm.environment.get(\"C-business_id\")),",
											"    \"report_type\": \"income\",",
											"    \"period\": \"month\"",
											"    // \"current_period_start\": current_period_start,",
											"    // \"current_period_end\": current_period_end",
											"}",
											"",
											"console.log(\"payload: \",payload);",
											"pm.environment.set(\"C-payload\",JSON.stringify(payload));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// ============================= sort by key",
											"function sortByKey(array, key, type) {",
											"    if(type == \"asc\"){",
											"        return array.sort(function(a, b) {",
											"            var x = a[key]; var y = b[key];",
											"            return ((x > y) ? -1 : ((x < y) ? 1 : 0));",
											"        });",
											"    } else {",
											"        return array.sort(function(a, b) {",
											"            var x = a[key]; var y = b[key];",
											"            return ((x < y) ? -1 : ((x > y) ? 1 : 0));",
											"        });",
											"    }",
											"}",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsData = pm.response.json();",
											"if(pm.response.code == 200){",
											"    let testcase = pm.environment.get(\"C-testcase\");",
											"    let report_income = null;",
											"    try {",
											"        report_income = jsData.data;",
											"    } catch {",
											"        console.log(\"Can't get report cash_flow data\");",
											"    }",
											"",
											"    let old_report_income;",
											"    switch(testcase){",
											"        case 2:",
											"            pm.test(\"Got report_income\", function () {",
											"                pm.expect(report_income != null).to.be.true;",
											"            });",
											"            pm.environment.set(\"C-report_income\",report_income);",
											"            console.log(\"report_income: \", report_income);",
											"",
											"            postman.setNextRequest(\"\"); // get_product_report",
											"            break;",
											"        case 8:",
											"            let ranTimeCase = pm.environment.get(\"C-ranTimeCase\");",
											"            // hiện tại report đang lấy thời gian 1 tháng hiện tại => chỉ handle với case ranTimeCase == 2;",
											"            if(ranTimeCase == 2){",
											"                let invoice_obj = pm.environment.get(\"C-invoice_obj\");",
											"                old_report_income = pm.environment.get(\"C-report_income\");",
											"                /**",
											"                 * Check rule:",
											"                 * - Xử lý data cho invoice_obj: sum amount của tất cả product cùng coa",
											"                 * - IF line_item trong invoice_obj có tồn tại trong old_report_income => thay đổi total_amount tương ứng",
											"                 * - ELSE:",
											"                 *    - IF line_item trong invoice_obj có tồn tại trong report_income => so sánh total_amount của product tương ứng với old_report_income (*)",
											"                 * Note:",
											"                 * (*) Cách so sánh: report_income[i].total_amount - invoice_obj.items[item].before_tax_amount < min(old_report_income.amount)",
											"                 */",
											"",
											"                console.log(\"invoice_obj: \", invoice_obj);",
											"                console.log(\"===================\");",
											"                console.log(\"old_report_income: \",old_report_income);",
											"                console.log(\"===================\");",
											"                console.log(\"report_income: \",report_income);",
											"",
											"                let list_item_objs = [];",
											"                for(let item in invoice_obj.items){",
											"                    if(list_item_objs.length == 0){",
											"                        list_item_objs[list_item_objs.length] = {",
											"                            \"account_id\":invoice_obj.items[item].account_id,",
											"                            \"name\":invoice_obj.items[item].name,",
											"                            \"before_tax_amount\":invoice_obj.items[item].before_tax_amount",
											"                        }",
											"                    } else {",
											"                        let is_found_item = false;",
											"                        for(let i in list_item_objs){",
											"                            if(list_item_objs[i].account_id == invoice_obj.items[item].account_id){",
											"                                is_found_item = true;",
											"                                list_item_objs[i].before_tax_amount += invoice_obj.items[item].before_tax_amount;",
											"                                break;",
											"                            }",
											"                        }",
											"",
											"                        if(!is_found_item){",
											"                            list_item_objs[list_item_objs.length] = {",
											"                                \"account_id\":invoice_obj.items[item].account_id,",
											"                                \"name\":invoice_obj.items[item].name,",
											"                                \"before_tax_amount\":invoice_obj.items[item].before_tax_amount",
											"                            }",
											"                        }",
											"                    }",
											"                }",
											"                console.log(\"===================\");",
											"                console.log(\"list_item_objs: \",list_item_objs);",
											"",
											"                let old_list_objs = [];",
											"                for(let i in old_report_income){",
											"                    for(let item in list_item_objs){",
											"                        if(old_report_income[i].coa_id == list_item_objs[item].account_id){",
											"                            console.log(\"Find product \" + list_item_objs[item].name + \" with coa \" + old_report_income[i].coa_name + \" in report!\");",
											"                            old_list_objs[old_list_objs.length] = old_report_income[i];",
											"",
											"                            old_list_objs[old_list_objs.length - 1 ].amount = list_item_objs[item].before_tax_amount;",
											"                            // ở đây ko break vì có thể có nhiều product;",
											"                        }",
											"                    }",
											"                }",
											"",
											"                let count = 0;",
											"                if(old_list_objs.length > 0){",
											"                    for(let i in old_list_objs){",
											"                        for(let j in report_income){",
											"                            if(old_list_objs[i].coa_id == report_income[j].coa_id){",
											"                                count++;",
											"                                pm.test(\"coa_name \" + old_list_objs[i].coa_name + \" increase \" + old_list_objs[i].amount, function () {",
											"                                    pm.expect(report_income[j].total_amount).to.eql(old_list_objs[i].total_amount + old_list_objs[i].amount);",
											"                                });",
											"                                break;",
											"                            }",
											"                        }",
											"                    }",
											"",
											"                    // check total",
											"                } else {",
											"                    let new_list_objs = [];",
											"                    for(let i in report_income){",
											"                        for(let item in list_item_objs){",
											"                            if(report_income[i].coa_id == list_item_objs[item].account_id){",
											"                                new_list_objs[new_list_objs.length] = report_income[i];",
											"",
											"                                new_list_objs[new_list_objs.length - 1 ].amount = list_item_objs[item].before_tax_amount;",
											"                                // ở đây ko break vì có thể có nhiều product;",
											"                            }",
											"                        }",
											"                    }",
											"",
											"                    if(new_list_objs.length > 0){",
											"                        for(let i in new_list_objs){",
											"                            for(let j in report_income){",
											"                                if(new_list_objs[i].coa_id == report_income[j].coa_id){",
											"                                    pm.test(\"coa_name \" + new_list_objs[i].coa_name + \" increase \" + new_list_objs[i].amount, function () {",
											"                                        pm.expect(old_report_income[old_report_income.length - 1].total_amount > new_list_objs[i].total_amount + new_list_objs[i].amount).to.be.true;",
											"                                    });",
											"                                    break;",
											"                                }",
											"                            }",
											"                        }",
											"                    }",
											"                }",
											"            } else {",
											"                // pm.test(\"Nothing happen with report_income\", function () {",
											"                //     pm.expect(JSON.stringify(report_income) == JSON.stringify(old_report_income)).to.be.true;",
											"                // });",
											"            }",
											"         ",
											"            // console.log(\"-------- End Testsuite 06 --------\");",
											"            postman.setNextRequest(\"report_profit_loss_period\");",
											"            break;",
											"        case 5:",
											"            old_report_income = pm.environment.get(\"C-report_income\");",
											"            pm.test(\"Nothing happen with report_income\", function () {",
											"                console.log(\"old_report_income: \",old_report_income);",
											"                console.log(\"===================\");",
											"                console.log(\"report_income: \",report_income);",
											"                pm.expect(JSON.stringify(report_income) == JSON.stringify(old_report_income)).to.be.true;",
											"            });",
											"            ",
											"            postman.setNextRequest(\"report_profit_loss_period\"); // report_profit_loss_period",
											"            break;",
											"        default:",
											"            console.log(\"Missing flow, end test\");",
											"            postman.setNextRequest(null);",
											"            break;",
											"    }",
											"} else {",
											"    console.log(\"Can't get report cash_flow, end test\",jsData);",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{C-userToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{C-payload}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{finone_url}}/fo-ledger/api/v1/report/summary-by-category",
									"host": [
										"{{finone_url}}"
									],
									"path": [
										"fo-ledger",
										"api",
										"v1",
										"report",
										"summary-by-category"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_product_report",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let testcase = pm.environment.get(\"C-testcase\");",
											"console.log(\"Testcase: \" + testcase);",
											"",
											"let payload = {",
											"    // \"branch_id\": pm.environment.get(\"C-branch_id\"),",
											"    \"business_id\": parseInt(pm.environment.get(\"C-business_id\")),",
											"    \"period\":\"month\"",
											"    // \"current_period_start\": pm.environment.get(\"C-current_period_start\"),",
											"    // \"current_period_end\": pm.environment.get(\"C-current_period_end\")",
											"}",
											"",
											"// if(testcase == 8){",
											"//     setTimeout(function(){}, 5000); // timeout 5s",
											"// }",
											"",
											"console.log(\"payload: \",payload);",
											"pm.environment.set(\"C-payload\",JSON.stringify(payload));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// ============================= getFirstDayOfMonth",
											"function getFirstDayOfMonth(date_timestamp){",
											"  let setDate = new Date(date_timestamp*1000);",
											"  let getDate = new Date(setDate.getFullYear(), setDate.getMonth(), 1);",
											"  return getDate.toISOString();",
											"}",
											"",
											"// ============================= getLastDayOfMonth",
											"function getLastDayOfMonth(date_timestamp){",
											"  let setDate = new Date(date_timestamp*1000);",
											"  let firstDayOfNextMonth = new Date(setDate.getFullYear(), setDate.getMonth() + 1, 1);",
											"  let lastDayOfMonth = new Date(firstDayOfNextMonth - 1);",
											"  return lastDayOfMonth.toISOString();",
											"}",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsData = pm.response.json();",
											"if(pm.response.code == 200){",
											"    let testcase = pm.environment.get(\"C-testcase\");",
											"    let report_product = null;",
											"    try {",
											"        report_product = jsData.data;",
											"    } catch {",
											"        console.log(\"Can't get report cash_flow data\");",
											"    }",
											"",
											"    let old_report_product;",
											"    switch(testcase){",
											"        case 2:",
											"            pm.test(\"Got report_product\", function () {",
											"                pm.expect(report_product != null).to.be.true;",
											"            });",
											"            pm.environment.set(\"C-report_product\",report_product);",
											"            // console.log(\"report_product: \", report_product);",
											"",
											"            postman.setNextRequest(\"get_expense_chart\"); // get_expense_chart",
											"            break;",
											"        case 5:",
											"            postman.setNextRequest(null);",
											"            break;",
											"        case 8:",
											"            let invoice_obj = pm.environment.get(\"C-invoice_obj\");",
											"            // value_at của invoice trong period (tháng) hiện tại mới dc tính vào report",
											"            let old_report_product = pm.environment.get(\"C-report_product\");",
											"            report_product = jsData.data;",
											"",
											"            // console.log(\"old: \" + JSON.stringify(old_report_product));",
											"            // console.log(\"new: \" + JSON.stringify(report_product));",
											"",
											"            let record_list = [];",
											"            for(let i in old_report_product){",
											"                for(let j in invoice_obj.items){",
											"                    if(old_report_product[i].sku_id == invoice_obj.items[j].sku_id){",
											"                        record_list[record_list.length] = old_report_product[i];",
											"                        record_list[record_list.length - 1].quantity_increase = invoice_obj.items[j].quantity;",
											"                        record_list[record_list.length - 1].after_tax_amount = invoice_obj.items[j].after_tax_amount;",
											"                        record_list[record_list.length - 1].before_tax_amount = invoice_obj.items[j].before_tax_amount;",
											"                        // record_list[record_list.length - 1].is_in_list = true;",
											"                        break;",
											"                    }",
											"                }",
											"            }",
											"            // console.log(\"record_list: \", record_list);",
											"",
											"            let today = new Date();",
											"            let today_tmp = Math.floor(today.getTime()/1000);",
											"            let firstDayOfThisMonth = getFirstDayOfMonth(today_tmp);",
											"            let lastDayOfThisMonth = getLastDayOfMonth(today_tmp);",
											"            let invoice_date = invoice_obj.value_at;",
											"            console.log(\"invoice_date: \" + invoice_date);",
											"",
											"            let isFound = false, count = 0;",
											"            for(let i in report_product){",
											"                for(let j in record_list){",
											"                    if(report_product[i].sku_id == record_list[j].sku_id){",
											"                        isFound = true;",
											"                        count++;",
											"                        console.log(\"Found \" + report_product[i].sku_info.sku_name);",
											"                        console.log(\"--- detail: \", report_product[i]);",
											"                        ",
											"                        if(invoice_date > firstDayOfThisMonth && invoice_date < lastDayOfThisMonth){",
											"                            // count_selling",
											"                            pm.test(\"count_selling increase \" + record_list[j].quantity_increase, function () {",
											"                                console.log(\"old: \" + record_list[j].count_selling);",
											"                                console.log(\"new: \" + report_product[i].count_selling);",
											"                                pm.expect(report_product[i].count_selling == record_list[j].count_selling + record_list[j].quantity_increase).to.be.true;",
											"                            });",
											"",
											"                            // total_amount_selling",
											"                            pm.test(\"total_amount_selling increase \" + record_list[j].before_tax_amount, function () {",
											"                                console.log(\"old: \" + record_list[j].total_amount_selling);",
											"                                console.log(\"new: \" + report_product[i].total_amount_selling);",
											"                                pm.expect(report_product[i].total_amount_selling == record_list[j].total_amount_selling + record_list[j].before_tax_amount).to.be.true;",
											"                            });",
											"                        } else {",
											"                            pm.test(\"Nothing happen!!! - Invoice không trong period hiện tại nên không thay đổi\", function () {",
											"                                // console.log(\"old: \" + record_list[j].count_selling);",
											"                                // console.log(\"new: \" + report_product[i].count_selling);",
											"                                pm.expect(report_product[i].count_selling == record_list[j].count_selling).to.be.true;",
											"                            });",
											"                        }",
											"",
											"                        break;",
											"                    }",
											"                }",
											"            }",
											"",
											"            pm.test(\"Found new product(s)\", function () {",
											"                console.log(\"Found \" + count + \" product(s)\");",
											"                pm.expect(isFound).to.be.true;",
											"            });",
											"",
											"            postman.setNextRequest(\"get_expense_chart\"); // get_expense_chart",
											"            break;",
											"        default:",
											"            console.log(\"Missing flow, end test\");",
											"            postman.setNextRequest(null);",
											"            break;",
											"    }",
											"} else {",
											"    console.log(\"Can't get report product, end test\",jsData);",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "authorization",
										"value": "Bearer {{C-userToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{C-payload}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{finone_url}}/fo-order/api/v1/report/top-selling-product",
									"host": [
										"{{finone_url}}"
									],
									"path": [
										"fo-order",
										"api",
										"v1",
										"report",
										"top-selling-product"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "expenses",
					"item": [
						{
							"name": "get_expense_chart",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let testcase = pm.environment.get(\"C-testcase\");",
											"console.log(\"Testcase: \" + testcase);",
											"",
											"let payload = {",
											"    \"business_id\": parseInt(pm.environment.get(\"C-business_id\")),",
											"    \"period\": \"month\",",
											"    \"report_type\": \"expense\"",
											"}",
											"",
											"console.log(\"payload: \",payload);",
											"pm.environment.set(\"C-payload\",JSON.stringify(payload));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// ============================= getFirstDayOfMonth",
											"function getFirstDayOfMonth(date_timestamp){",
											"  let setDate = new Date(date_timestamp*1000);",
											"  let getDate = new Date(setDate.getFullYear(), setDate.getMonth(), 1);",
											"  return getDate.toISOString();",
											"}",
											"",
											"// ============================= getLastDayOfMonth",
											"function getLastDayOfMonth(date_timestamp){",
											"  let setDate = new Date(date_timestamp*1000);",
											"  let firstDayOfNextMonth = new Date(setDate.getFullYear(), setDate.getMonth() + 1, 1);",
											"  let lastDayOfMonth = new Date(firstDayOfNextMonth - 1);",
											"  return lastDayOfMonth.toISOString();",
											"}",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsData = pm.response.json();",
											"if(pm.response.code == 200){",
											"    let testcase = pm.environment.get(\"C-testcase\");",
											"",
											"    let loss_period = null;",
											"    try {",
											"        loss_period = jsData.data;",
											"        /**",
											"         * period: week, month, year",
											"         * sum_card_data",
											"         * dates_data",
											"         */",
											"    } catch {",
											"        console.log(\"Can't get expense chart data\");",
											"    }",
											"",
											"    let invoice_obj, invoice_date;",
											"    switch(testcase){",
											"        case 2:",
											"            pm.test(\"Got loss_period \", function () {",
											"                pm.environment.set(\"C-loss_period\",loss_period);",
											"                pm.expect(loss_period != null).to.be.true;",
											"            });",
											"            pm.environment.set(\"C-loss_period\",loss_period);",
											"            console.log(\"loss_period: \", loss_period);",
											"",
											"            postman.setNextRequest(\"get_expense_report\"); // get_expense_report",
											"            break;",
											"        case 5:",
											"            invoice_obj = pm.environment.get(\"C-invoice_obj\");",
											"            invoice_date = invoice_obj.value_at.substring(0,10);",
											"            // Invoice sẽ tăng profit (income), Bill sẽ tăng loss (chi phí)",
											"            ",
											"            postman.setNextRequest(\"\"); // calculate_invoice",
											"            break;",
											"        case 8:",
											"            invoice_obj = pm.environment.get(\"C-invoice_obj\");",
											"            // invoice_date = invoice_obj.value_at;",
											"            // console.log(\"invoice_date: \" + invoice_date);",
											"            // do thời gian lọc là tháng hiện tại => chỉ thay đổi khi value_at nằm trong tháng hiện tại",
											"            // let today = new Date();",
											"            // let today_tmp = Math.floor(today.getTime()/1000);",
											"            // let firstDayOfThisMonth = getFirstDayOfMonth(today_tmp);",
											"            // let lastDayOfThisMonth = getLastDayOfMonth(today_tmp);",
											"            // if(invoice_date < firstDayOfThisMonth || invoice_date > lastDayOfThisMonth){",
											"            //     // nothing happen",
											"            //     pm.test(\"Nothing happen!!!\", function () {",
											"            //         pm.expect(JSON.stringify(loss_period) == JSON.stringify(old_loss_period)).to.be.true;",
											"            //     });",
											"            // } else {",
											"            //     invoice_date = invoice_date.substring(0,10);",
											"",
											"            //     let income_product = 0, income_discount = 0;",
											"            //     for(let i in invoice_obj.items){",
											"            //         income_product += invoice_obj.items[i].before_tax_amount;",
											"            //         income_discount += invoice_obj.items[i].discount_amount;",
											"            //     }",
											"            //     let exp_change = income_product - income_discount;",
											"            //     // có thay đổi => total_income increase",
											"            //     pm.test(\"total_income increase \" + exp_change, function () {",
											"            //         pm.expect(loss_period.sum_card_data.total_income == old_loss_period.sum_card_data.total_income + exp_change).to.be.true;",
											"            //     });",
											"            //     // thay đổi ngày tương ứng",
											"            //     let old_date = null, act_date = null;",
											"            //     for(let i in loss_period.dates_data){",
											"            //         let day_i = loss_period.dates_data[i].date.substring(0,10);",
											"            //         if(day_i == invoice_date){",
											"            //             act_date = loss_period.dates_data[i];",
											"            //             break;",
											"            //         }",
											"            //     }",
											"",
											"            //     for(let i in old_loss_period.dates_data){",
											"            //         let day_i = old_loss_period.dates_data[i].date.substring(0,10);",
											"            //         if(day_i == invoice_date){",
											"            //             old_date = old_loss_period.dates_data[i];",
											"            //             break;",
											"            //         }",
											"            //     }",
											"",
											"            //     if(old_date != null && act_date != null){",
											"            //         console.log(\"act_date: \",act_date);",
											"            //         console.log(\"old_date: \",old_date);",
											"            //         pm.test(\"income at \" + invoice_date + \" increase \" + exp_change, function () {",
											"            //             pm.expect(act_date.income == old_date.income + exp_change).to.be.true;",
											"            //         });",
											"            //     }",
											"            // }",
											"            let old_loss_period = pm.environment.get(\"C-loss_period\");",
											"            loss_period = jsData.data;",
											"            pm.test(\"Nothing happen!!!\", function () {",
											"                pm.expect(JSON.stringify(old_loss_period) == JSON.stringify(loss_period)).to.be.true;",
											"            });",
											"",
											"            postman.setNextRequest(\"get_expense_report\"); // get_expense_report",
											"            break;",
											"        default:",
											"            console.log(\"Missing flow, end test\");",
											"            postman.setNextRequest(null);",
											"            break;",
											"    }",
											"} else {",
											"    console.log(\"Can't get report P&L period, end test\",jsData);",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-location-timezone",
										"value": "Asia/Saigon",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{C-userToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{C-payload}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{finone_url}}/fo-ledger/api/v1/report/profit-loss-period",
									"host": [
										"{{finone_url}}"
									],
									"path": [
										"fo-ledger",
										"api",
										"v1",
										"report",
										"profit-loss-period"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_expense_report",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let testcase = pm.environment.get(\"C-testcase\");",
											"console.log(\"Testcase: \" + testcase);",
											"",
											"let payload = {",
											"    // \"branch_id\": pm.environment.get(\"C-branch_id\"),",
											"    \"business_id\": parseInt(pm.environment.get(\"C-business_id\")),",
											"    \"report_type\": \"expense\",",
											"    \"period\": \"month\"",
											"    // \"current_period_start\": current_period_start,",
											"    // \"current_period_end\": current_period_end",
											"}",
											"",
											"console.log(\"payload: \",payload);",
											"pm.environment.set(\"C-payload\",JSON.stringify(payload));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// ============================= sort by key",
											"function sortByKey(array, key, type) {",
											"    if(type == \"asc\"){",
											"        return array.sort(function(a, b) {",
											"            var x = a[key]; var y = b[key];",
											"            return ((x > y) ? -1 : ((x < y) ? 1 : 0));",
											"        });",
											"    } else {",
											"        return array.sort(function(a, b) {",
											"            var x = a[key]; var y = b[key];",
											"            return ((x < y) ? -1 : ((x > y) ? 1 : 0));",
											"        });",
											"    }",
											"}",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsData = pm.response.json();",
											"if(pm.response.code == 200){",
											"    let testcase = pm.environment.get(\"C-testcase\");",
											"    let report_expense = null;",
											"    try {",
											"        report_expense = jsData.data;",
											"    } catch {",
											"        console.log(\"Can't get report cash_flow data\");",
											"    }",
											"",
											"    let old_report_expense = pm.environment.get(\"C-report_expense\");",
											"    switch(testcase){",
											"        case 2:",
											"            pm.test(\"Got report_expense\", function () {",
											"                pm.expect(report_expense != null).to.be.true;",
											"            });",
											"            pm.environment.set(\"C-report_expense\",report_expense);",
											"            console.log(\"report_expense: \",report_expense);",
											"",
											"            postman.setNextRequest(\"get_list_invoice\"); // get_list_invoice",
											"            break;",
											"        case 8:",
											"            let ranTimeCase = pm.environment.get(\"C-ranTimeCase\");",
											"            // console.log(\"old_report_expense: \",old_report_expense);",
											"            // console.log(\"===================\");",
											"            // console.log(\"report_expense: \",report_expense);",
											"            // hiện tại report đang lấy thời gian 1 tháng hiện tại => chỉ handle với case ranTimeCase == 2;",
											"            if(ranTimeCase == 2){",
											"                let invoice_obj = pm.environment.get(\"C-invoice_obj\");",
											"                old_report_expense = pm.environment.get(\"C-report_expense\");",
											"                /**",
											"                 * Check rule:",
											"                 * - Xử lý data cho invoice_obj: sum amount của tất cả product cùng coa",
											"                 * - IF line_item trong invoice_obj có tồn tại trong old_report_expense => thay đổi total_amount tương ứng",
											"                 * - ELSE:",
											"                 *    - IF line_item trong invoice_obj có tồn tại trong report_expense => so sánh total_amount của product tương ứng với old_report_expense (*)",
											"                 * Note:",
											"                 * (*) Cách so sánh: report_expense[i].total_amount - invoice_obj.items[item].before_tax_amount < min(old_report_expense.amount)",
											"                 */",
											"",
											"                console.log(\"invoice_obj: \", invoice_obj);",
											"                console.log(\"===================\");",
											"                console.log(\"old_report_expense: \",old_report_expense);",
											"                console.log(\"===================\");",
											"                console.log(\"report_expense: \",report_expense);",
											"",
											"                let list_item_objs = [];",
											"                for(let item in invoice_obj.items){",
											"                    if(list_item_objs.length == 0){",
											"                        list_item_objs[list_item_objs.length] = {",
											"                            \"account_id\":invoice_obj.items[item].account_id,",
											"                            \"name\":invoice_obj.items[item].name,",
											"                            \"before_tax_amount\":invoice_obj.items[item].before_tax_amount",
											"                        }",
											"                    } else {",
											"                        let is_found_item = false;",
											"                        for(let i in list_item_objs){",
											"                            if(list_item_objs[i].account_id == invoice_obj.items[item].account_id){",
											"                                is_found_item = true;",
											"                                list_item_objs[i].before_tax_amount += invoice_obj.items[item].before_tax_amount;",
											"                                break;",
											"                            }",
											"                        }",
											"",
											"                        if(!is_found_item){",
											"                            list_item_objs[list_item_objs.length] = {",
											"                                \"account_id\":invoice_obj.items[item].account_id,",
											"                                \"name\":invoice_obj.items[item].name,",
											"                                \"before_tax_amount\":invoice_obj.items[item].before_tax_amount",
											"                            }",
											"                        }",
											"                    }",
											"                }",
											"                console.log(\"===================\");",
											"                console.log(\"list_item_objs: \",list_item_objs);",
											"",
											"                let old_list_objs = [];",
											"                for(let i in old_report_expense){",
											"                    for(let item in list_item_objs){",
											"                        if(old_report_expense[i].coa_id == list_item_objs[item].account_id){",
											"                            console.log(\"Find product \" + list_item_objs[item].name + \" with coa \" + old_report_expense[i].coa_name + \" in report!\");",
											"                            old_list_objs[old_list_objs.length] = old_report_expense[i];",
											"",
											"                            old_list_objs[old_list_objs.length - 1 ].amount = list_item_objs[item].before_tax_amount;",
											"                            // ở đây ko break vì có thể có nhiều product;",
											"                        }",
											"                    }",
											"                }",
											"",
											"                let count = 0;",
											"                if(old_list_objs.length > 0){",
											"                    for(let i in old_list_objs){",
											"                        for(let j in report_expense){",
											"                            if(old_list_objs[i].coa_id == report_expense[j].coa_id){",
											"                                count++;",
											"                                pm.test(\"coa_name \" + old_list_objs[i].coa_name + \" increase \" + old_list_objs[i].amount, function () {",
											"                                    pm.expect(report_expense[j].total_amount).to.eql(old_list_objs[i].total_amount + old_list_objs[i].amount);",
											"                                });",
											"                                break;",
											"                            }",
											"                        }",
											"                    }",
											"",
											"                    // check total",
											"                } else {",
											"                    let new_list_objs = [];",
											"                    for(let i in report_expense){",
											"                        for(let item in list_item_objs){",
											"                            if(report_expense[i].coa_id == list_item_objs[item].account_id){",
											"                                new_list_objs[new_list_objs.length] = report_expense[i];",
											"",
											"                                new_list_objs[new_list_objs.length - 1 ].amount = list_item_objs[item].before_tax_amount;",
											"                                // ở đây ko break vì có thể có nhiều product;",
											"                            }",
											"                        }",
											"                    }",
											"",
											"                    if(new_list_objs.length > 0){",
											"                        for(let i in new_list_objs){",
											"                            for(let j in report_expense){",
											"                                if(new_list_objs[i].coa_id == report_expense[j].coa_id){",
											"                                    pm.test(\"coa_name \" + new_list_objs[i].coa_name + \" increase \" + new_list_objs[i].amount, function () {",
											"                                        pm.expect(old_report_expense[old_report_expense.length - 1].total_amount > new_list_objs[i].total_amount + new_list_objs[i].amount).to.be.true;",
											"                                    });",
											"                                    break;",
											"                                }",
											"                            }",
											"                        }",
											"                    }",
											"                }",
											"            } else {",
											"                pm.test(\"Nothing happen with report_expense\", function () {",
											"                    pm.expect(JSON.stringify(report_expense) == JSON.stringify(old_report_expense)).to.be.true;",
											"                });",
											"            }",
											"         ",
											"            console.log(\"-------- End Testsuite 06 --------\");",
											"            postman.setNextRequest(null);",
											"            break;",
											"        case 5:",
											"            old_report_expense = pm.environment.get(\"C-report_expense\");",
											"            pm.test(\"Nothing happen with report_expense\", function () {",
											"                console.log(\"old_report_expense: \",old_report_expense);",
											"                console.log(\"===================\");",
											"                console.log(\"report_expense: \",report_expense);",
											"                pm.expect(JSON.stringify(report_expense) == JSON.stringify(old_report_expense)).to.be.true;",
											"            });",
											"            ",
											"            postman.setNextRequest(\"\"); // calculate_invoice",
											"            break;",
											"        default:",
											"            console.log(\"Missing flow, end test\");",
											"            postman.setNextRequest(null);",
											"            break;",
											"    }",
											"} else {",
											"    console.log(\"Can't get report cash_flow, end test\",jsData);",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{C-userToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{C-payload}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{finone_url}}/fo-ledger/api/v1/report/summary-by-category",
									"host": [
										"{{finone_url}}"
									],
									"path": [
										"fo-ledger",
										"api",
										"v1",
										"report",
										"summary-by-category"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "recent_transactions",
					"item": [],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"/**",
									" * chỉ cần check UI vì ở đây là API trả",
									" *  - list transaction",
									" *  - list invoice (!= fully_paid)",
									" *  - list bill (!= fully_paid)",
									" */"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"let configs = {",
					"    \"is_use_email\":true,",
					"    \"limit_page\":5,",
					"    \"timeout\":1000, // miliseconds => timeout to call API",
					"    \"is_buyer_gen\":false,",
					"    \"is_the_same_branch\":true, // true: branch tạo invoice và branch check là giống nhau, false: khác nhau",
					"    \"is_check_report\":true,",
					"    \"test_payment_method\":\"va_galaxy\" // bank_transfer, viet_qr_pro_mb, va_galaxy",
					"}",
					"",
					"pm.environment.set(\"C-configs\",configs);",
					"// console.log(\"configs: \",configs);",
					"",
					"/**",
					" * Note:",
					" * period: handle later",
					" */"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"// ====================================== parser cURL",
					"function parseCURL(request_api){",
					"    let curl = \"\";",
					"    switch(request_api.method){",
					"        case \"PUT\":",
					"            curl = \"curl --location --request PUT \";",
					"            break;",
					"        case \"PATCH\":",
					"            curl = \"curl --location --request PATCH \";",
					"            break;",
					"        case \"DELETE\":",
					"            curl = \"curl --location --request DELETE \";",
					"            break;",
					"        default:",
					"            curl = \"curl --location \";",
					"            break;",
					"    }",
					"    curl += \"'\" + request_api.url.protocol + \"://\"",
					"    // host",
					"    for(let i in request_api.url.host){",
					"        if(i >= request_api.url.host.length - 1){",
					"            curl += request_api.url.host[i] + \"/\";",
					"        } else {",
					"            curl += request_api.url.host[i] + \".\";",
					"        }",
					"    }",
					"    // path",
					"    for(let i in request_api.url.path){",
					"        if(i >= request_api.url.path.length - 1){",
					"            curl += request_api.url.path[i];",
					"        } else {",
					"            curl += request_api.url.path[i] + \"/\";",
					"        }",
					"    }",
					"    // query (if have)",
					"    if(\"query\" in request_api.url){",
					"        if(request_api.url.length > 0){",
					"            curl += \"? \";",
					"            for(let i in request_api.url.query){",
					"                if(i >= request_api.url.query.length - 1){",
					"                    curl += request_api.url.query[i].key + \"=\" + request_api.url.query[i].value + \"' \";",
					"                } else {",
					"                    curl += request_api.url.query[i].key + \"=\" + request_api.url.query[i].value + \"&\";",
					"                }",
					"            }",
					"        } else {",
					"            curl += \"' \";",
					"        }",
					"    } else {",
					"        curl += \"' \";",
					"    }",
					"    // header",
					"    for(let i in request_api.header){",
					"        if(i >= request_api.header.length - 1){",
					"            curl += \"--header '\" + request_api.header[i].key + \": \" + request_api.header[i].value + \"'\";",
					"        } else {",
					"            curl += \"--header '\" + request_api.header[i].key + \": \" + request_api.header[i].value + \"' \";",
					"        }",
					"    }",
					"    switch(request_api.method){",
					"        case \"POST\":",
					"            curl += \" --data '\" + request_api.body.raw + \"'\"",
					"            break;",
					"        case \"PUT\": case \"PATCH\":",
					"            curl += \" --data-raw '\" + request_api.body.raw + \"'\"",
					"            break;",
					"        default:",
					"            break;",
					"    }",
					"    console.log(curl);",
					"    return curl;",
					"}",
					"const request_api = pm.request.toJSON();",
					"parseCURL(request_api);"
				]
			}
		}
	]
}