{
	"info": {
		"_postman_id": "e6b59d59-5c38-4ef4-915c-0545c25cd9d7",
		"name": "fo_81_verify_to_create_purchase_order",
		"description": "### Testsuite: Verify to create purchase order (PO)\n\n###### Testcase:\n\n1. Login\n    \n    1. owner account => owner_token => random branch để tạo PO\n        \n    2. accountant account => accountant_token\n        \n    3. staff account => staff_token\n        \n    4. ... (\\*)\n        \n2. Get data\n    \n    1. contact / get list customer => get data\n        \n    2. sku / get list sku => get data only\n        \n    3. tax / get list taxes => get data only\n        \n    4. \\[Pending\\] warehouse / product / get all product in stock => get data\n        \n    5. \\[Pending\\] warehouse / product / get product in stock summary\n        \n    6. posting / get list posting => get data\n        \n    7. inventory / get list inventory => get data\n        \n    8. inventory / get inventory overview => get data\n        \n    9. inventory / get list inventory branch (1.a) => get data\n        \n    10. inventory / get inventory overview branch (1.a) => get data\n        \n    11. batch / get list batch => get data\n        \n    12. batch / get batch overview => get data\n        \n    13. \\[NY\\] batch / get list batch branch => get data\n        \n    14. \\[NY\\] batch / get batch overview branch => get data\n        \n    15. purchase-order / get po overview => get data\n        \n    16. purchase-order / get list po => get data\n        \n    17. \\[NY\\] purchase-order / get po overview branch => get data\n        \n    18. \\[NY\\] purchase-order / get list po branch => get data\n        \n3. Calculate purchase order (draft, saved, completed)\n    \n4. Create completed purchase order\n    \n5. Check data\n    \n    1. purchase-order / get list po => total increase 1\n        \n    2. purchase-order / get po detail => data correctly\n        \n    3. purchase-order / get po overview => data increase correctly\n        \n    4. \\[NY\\] purchase-order / get po overview branch => data increase correctly\n        \n    5. \\[NY\\] purchase-order / get list po branch => total increase 1\n        \n    6. ~~buyer-view / buyer view po detail => data correctly~~\n        \n    7. contact / get list customer => data increase correctly\n        \n    8. batch / get list batch => data increase correctly\n        \n    9. batch / get batch overview => data increase correctly\n        \n    10. \\[NY\\] batch / get list batch branch => nothing happen\n        \n    11. \\[NY\\] batch / get batch overview branch => nothing happen\n        \n    12. \\[NY\\] inventory / get list inventory => data correctly\n        \n    13. \\[NY\\] inventory / get inventory overview => data correctly\n        \n    14. \\[NY\\] inventory / get list inventory branch (1.a) => data correctly\n        \n    15. \\[NY\\] inventory / get inventory overview branch (1.a) => data correctly\n        \n    16. posting / get list posting => data correctly\n        \n\n###### Note:\n\n- (\\*) sẽ dựa vào số role thực tế cần check => hiện tại PO cũng chưa define role/permission nên tạm thời chỉ care owner với nhiều chi nhánh\n    \n- ~~CHƯA HANDLE PHẦN KHO~~",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "282640"
	},
	"item": [
		{
			"name": "authen",
			"item": [
				{
					"name": "login",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// ============================= random characters",
									"function randomChars(length) {",
									"    var result           = '';",
									"    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
									"    var charactersLength = characters.length;",
									"    for ( var i = 0; i < length; i++ ) {",
									"        result += characters.charAt(Math.floor(Math.random() * charactersLength));",
									"    }",
									"   return result;",
									"}",
									"",
									"let testcase = 1;",
									"console.log(\"-------- Start Testsuite 81 --------\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let platform = [\"desktop-web\",\"mobile-web\",\"mobile-app\"];",
									"let configs = pm.environment.get(\"C-configs\");",
									"let payload;",
									"if(configs.is_use_email){",
									"    payload = {",
									"        \"app_version\": \"1.0.0\",",
									"        \"device_info\": {",
									"            \"id\": randomChars(7) + \"-\" + randomChars(4) + \"-\" + randomChars(4) + \"-\" + randomChars(4) + \"-\" + randomChars(12),",
									"            \"name\": \"IP name\",",
									"            \"os\": \"iphone\"",
									"        },",
									"        \"email\": pm.environment.get(\"SER-email\"), // pm.environment.get(\"SER-email\")",
									"        \"encrypted_password\": pm.environment.get(\"SER-password\"),",
									"        \"phone_number\": \"\",",
									"        \"platform_key\": platform[0]",
									"    }",
									"} else {",
									"    payload = {",
									"        \"app_version\": \"1.0.0\",",
									"        \"device_info\": {",
									"            \"id\": randomChars(7) + \"-\" + randomChars(4) + \"-\" + randomChars(4) + \"-\" + randomChars(4) + \"-\" + randomChars(12),",
									"            \"name\": \"IP name\",",
									"            \"os\": \"iphone\"",
									"        },",
									"        \"email\":\"\", // pm.environment.get(\"SER-email\")",
									"        \"encrypted_password\": pm.environment.get(\"SER-password\"),",
									"        \"phone_number\": pm.environment.get(\"SER-phone_number\"),",
									"        \"platform_key\": platform[0]",
									"    }",
									"}",
									"",
									"console.log(\"payload: \",payload);",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));",
									"pm.environment.set(\"C-testcase\",testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// const clRandom = pm.require('@chaule2906/cl-random');",
									"// console.log(\"debug: \" + clRandom.getRandomInt(1,5));",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    pm.test(\"System code is 102000\", function () {",
									"        pm.expect(jsData.code).to.eql(102000);",
									"    });",
									"",
									"    if(jsData.code == 102000){",
									"        let userToken = null;",
									"        try {",
									"            userToken = jsData.data.access_token;",
									"            pm.environment.set(\"C-userToken\",userToken);",
									"        } catch {",
									"            console.log(\"Can't get userToken\");",
									"        }",
									"",
									"        pm.test(\"Got userToken\", function () {",
									"            pm.expect(userToken != null).to.be.true;",
									"        });",
									"",
									"        let userInfo = jsData.data.user_info;",
									"",
									"        // show log",
									"        console.log(\"userInfo:\",JSON.stringify(userInfo));",
									"        pm.environment.set(\"C-userInfo\",userInfo);",
									"",
									"        postman.setNextRequest(\"verify_token_to_get_business\"); // verify_token_to_get_business",
									"    } else {",
									"        console.log(\"Can't get Token, end test\",jsData);",
									"        postman.setNextRequest(null);",
									"    }",
									"} else {",
									"    console.log(\"Can't login new account, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "x-locale",
								"value": "<string>",
								"description": "locale",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-user/api/v1/auth/login",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-user",
								"api",
								"v1",
								"auth",
								"login"
							]
						},
						"description": "Login User"
					},
					"response": []
				},
				{
					"name": "verify_token_to_get_business",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// verify token to get business",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = JSON.parse(responseBody);",
									"if(pm.response.code == 200 && jsData.code == 102000){",
									"    const jsData = pm.response.json();",
									"    pm.environment.set(\"C-user_id\",jsData.data.user_id);",
									"",
									"    let business_id = jsData.data.headers[\"x-business-id\"];",
									"    console.log(\"business_id: \" + business_id);",
									"    pm.environment.set(\"C-business_id\",business_id);",
									"",
									"    postman.setNextRequest(\"get_current_business\");",
									"} else {",
									"    console.log(\"Can't check token to get business_id, end test\");",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"token\": \"{{C-userToken}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-user/api/v1/auth/verify-token",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-user",
								"api",
								"v1",
								"auth",
								"verify-token"
							]
						},
						"description": "Login User"
					},
					"response": []
				},
				{
					"name": "get_current_business",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ============================= random number between min and max",
									"function getRandomInt(min, max) {",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    // console.log(\"Current business info: \", jsData.data);",
									"    let configs = pm.environment.get(\"C-configs\");",
									"    let branch_id = null, filter_branch_id = null, list_branch = [];",
									"    try {",
									"        list_branch = jsData.data.current_business.list_branch;",
									"        branch_id = list_branch[getRandomInt(0,list_branch.length - 1)].id;",
									"        if(configs.is_the_same_branch){",
									"            filter_branch_id = branch_id;",
									"        } else {",
									"            while(1){",
									"                filter_branch_id = list_branch[getRandomInt(0,list_branch.length - 1)].id;",
									"",
									"                if(branch_id != filter_branch_id) break;",
									"            }",
									"            // for(let i in list_branch){",
									"            //     if(list_branch[i].id != branch_id){",
									"            //         filter_branch_id = list_branch[i].id;",
									"            //         break;",
									"            //     }",
									"            // }",
									"        }",
									"        console.log(\"branch_id: \" + branch_id);",
									"        console.log(\"filter_branch_id: \" + filter_branch_id);",
									"        pm.environment.set(\"C-branch_id\",branch_id);",
									"        pm.environment.set(\"C-filter_branch_id\",filter_branch_id);",
									"    } catch {",
									"        console.log(\"Can't get branch id\");",
									"    }",
									"",
									"    pm.test(\"Got all branch \" + list_branch.length, function () {",
									"        pm.expect(list_branch != null).to.be.true;",
									"    });",
									"    pm.environment.set(\"C-list_branch\",list_branch);",
									"",
									"    pm.test(\"Got branch id \" + branch_id, function () {",
									"        pm.expect(branch_id != null).to.be.true;",
									"    });",
									"",
									"    // debug",
									"    for(let i in list_branch){",
									"        if(list_branch[i].id == branch_id){",
									"            console.log(\"Will create PO at branch \" + list_branch[i].branch_name);",
									"            break;",
									"        }",
									"    }",
									"    for(let i in list_branch){",
									"        if (list_branch[i].id == filter_branch_id){",
									"            console.log(\"Will check PO, Batch, Inventory at branch \" + list_branch[i].branch_name);",
									"            break;",
									"        }",
									"    }",
									"",
									"    let payment_method_list = [];",
									"    for(let i in jsData.data.list_payment_method){",
									"        if(jsData.data.list_payment_method[i].is_active){",
									"            payment_method_list[payment_method_list.length] = jsData.data.list_payment_method[i];",
									"        }",
									"    }",
									"",
									"    pm.test(\"Got payment_method_list \" + payment_method_list.length, function () {",
									"        pm.expect(payment_method_list.length > 0).to.be.true;",
									"    });",
									"    pm.environment.set(\"C-payment_method_list\",payment_method_list);",
									"    ",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    testcase++;",
									"    pm.environment.set(\"C-testcase\",testcase);",
									"    postman.setNextRequest(\"get_list_contact\"); // get_list_contact",
									"} else {",
									"    console.log(\"Can't get business detail, end test\", jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-business/api/v1/business/get-current",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-business",
								"api",
								"v1",
								"business",
								"get-current"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "contact",
			"item": [
				{
					"name": "get_list_contact",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// const clRandom = pm.require('@chaule2906/cl-random');",
									"// ============================= random number between min and max",
									"function getRandomInt(min, max) {",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = pm.response.json();",
									"if(pm.response.code == 200 && jsData.code == 102000){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let configs = pm.environment.get(\"C-configs\");",
									"    let total_pages = jsData.meta.total_pages;",
									"    let page = pm.environment.get(\"C-page\");",
									"",
									"    let list_contact = pm.environment.get(\"C-list_contact\");",
									"    if(!list_contact){",
									"        list_contact = [];",
									"    }",
									"",
									"    for(let item in jsData.data){",
									"        if(jsData.data[item].contact_name.includes(\"[API]\")){",
									"            list_contact[list_contact.length] = {",
									"                \"contact_id\":jsData.data[item].id,",
									"                \"name\":jsData.data[item].contact_name,",
									"                \"phone_number\":jsData.data[item].phone_number,",
									"                \"email\":jsData.data[item].email,",
									"                \"po_config\":jsData.data[item].po_config,",
									"                \"tax_code\":jsData.data[item].tax_code,",
									"                \"payment_methods\":jsData.data[item].payment_methods,",
									"                \"total_payable\":jsData.data[item].total_payable,",
									"                \"total_receivable\":jsData.data[item].total_receivable",
									"            }",
									"        }",
									"    }",
									"    pm.environment.set(\"C-list_contact\",list_contact);",
									"",
									"    if(page >= total_pages){",
									"        // must clear page & page_size",
									"        pm.environment.unset(\"C-page\");",
									"        pm.environment.unset(\"C-page_size\");",
									"",
									"        let contact_obj, old_contact_obj;",
									"        let po_obj = pm.environment.get(\"C-po_obj\"); ",
									"        switch(testcase){",
									"            case 2:",
									"                pm.test(\"Got all contact! \" + list_contact.length, function () {",
									"                    pm.environment.set(\"C-list_contact\",list_contact);",
									"                    pm.expect(list_contact.length > 0).to.be.true;",
									"                });",
									"",
									"                // let contact_obj = list_contact[clRandom.getRandomInt(0,list_contact.length - 1)];",
									"                contact_obj = list_contact[getRandomInt(0,list_contact.length - 1)];",
									"                console.log(\"will create po for contact: \", contact_obj);",
									"                pm.environment.set(\"C-contact_obj\",contact_obj);",
									"                pm.environment.set(\"C-contact_id\",contact_obj.contact_id);",
									"",
									"                postman.setNextRequest(\"get_list_internal_account\"); // get_list_sku, get_list_internal_account",
									"                break;",
									"            case 5: case 8:",
									"                old_contact_obj = pm.environment.get(\"C-contact_obj\");",
									"                for(let i in list_contact){",
									"                    if(list_contact[i].contact_id == old_contact_obj.contact_id){",
									"                        contact_obj = list_contact[i];",
									"                        break;",
									"                    }",
									"                }",
									"",
									"                switch(configs.create_po_status){",
									"                    case \"saved\":",
									"                    case \"completed\":",
									"                        // tạo po sẽ tăng total_receivable cho customer",
									"                        pm.test(\"total_receivable increase \" + po_obj.exp_total_amount, function () {",
									"                            console.log(\"old: \" + old_contact_obj.total_receivable);",
									"                            console.log(\"new: \" + contact_obj.total_receivable);",
									"                            pm.expect(contact_obj.total_receivable).to.eql(old_contact_obj.total_receivable + po_obj.exp_total_amount);",
									"                        });",
									"",
									"                        break;",
									"                    case \"draft\":",
									"                    default:",
									"                        pm.test(\"Nothing happen!\", function () {",
									"                            pm.expect(JSON.stringify(old_contact_obj) == JSON.stringify(contact_obj)).to.be.true;",
									"                        });",
									"                        break;",
									"                }",
									"            ",
									"                postman.setNextRequest(\"get_list_batch\"); // get_list_batch",
									"                break;",
									"            default:",
									"                console.log(\"Missing flow, end test\");",
									"                postman.setNextRequest(null);",
									"                break;",
									"        }",
									"    } else {",
									"        page++;",
									"        pm.environment.set(\"C-page\",page);",
									"",
									"        console.log(\"view next page (\" + page + \") to get more contact\");",
									"        postman.setNextRequest(\"get_list_contact\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get list contact, end test\");",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let page = pm.environment.get(\"C-page\");",
									"",
									"if(!page){",
									"    page = 1;",
									"    pm.environment.set(\"C-page\",page);",
									"",
									"    let page_size = 50;",
									"    pm.environment.set(\"C-page_size\",page_size);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-business/api/v1/contact/get-list?business_id={{C-business_id}}&page={{C-page}}&page_size={{C-page_size}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-business",
								"api",
								"v1",
								"contact",
								"get-list"
							],
							"query": [
								{
									"key": "search",
									"value": "",
									"disabled": true
								},
								{
									"key": "business_id",
									"value": "{{C-business_id}}"
								},
								{
									"key": "page",
									"value": "{{C-page}}"
								},
								{
									"key": "page_size",
									"value": "{{C-page_size}}"
								},
								{
									"key": "sort",
									"value": "",
									"disabled": true
								},
								{
									"key": "option",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "account coa",
			"item": [
				{
					"name": "get_list_internal_account",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let coa = [];",
									"    try {",
									"        for(let i in jsData.data){",
									"            let sub_group_i = [];",
									"            for(let j in jsData.data[i].sub_group){",
									"                let accounts_j = [];",
									"                for(let k in jsData.data[i].sub_group[j].accounts){",
									"                    accounts_j[accounts_j.length] = {",
									"                        \"account_name\":jsData.data[i].sub_group[j].accounts[k].account_name,",
									"                        \"account_id\":jsData.data[i].sub_group[j].accounts[k].id,",
									"                        \"account_name_custom\":jsData.data[i].sub_group[j].accounts[k].account_name_custom,",
									"                        \"account_type\":jsData.data[i].sub_group[j].accounts[k].account_type,",
									"                        \"business_id\":jsData.data[i].sub_group[j].accounts[k].business_id,",
									"                        \"account_source\":jsData.data[i].sub_group[j].accounts[k].account_source,",
									"                        \"account_type\":jsData.data[i].sub_group[j].accounts[k].account_type,",
									"                        \"account_number\":jsData.data[i].sub_group[j].accounts[k].account_number,",
									"                        \"coa_type\":jsData.data[i].sub_group[j].accounts[k].coa_type,",
									"                        \"status\":jsData.data[i].sub_group[j].accounts[k].status,",
									"                        \"parent_account_id\":jsData.data[i].sub_group[j].accounts[k].parent_account_id,",
									"                        \"description\":jsData.data[i].sub_group[j].accounts[k].description,",
									"                        \"open_amount\":jsData.data[i].sub_group[j].accounts[k].open_amount,",
									"                        \"currency\":jsData.data[i].sub_group[j].accounts[k].currency",
									"                    }",
									"",
									"                    if(jsData.data[i].sub_group[j].accounts[k].account_key == \"B1001\"){ // coa đổi key account_payable => B1001",
									"                        pm.environment.set(\"C-account_payable\",jsData.data[i].sub_group[j].accounts[k]);",
									"                    } else if (jsData.data[i].sub_group[j].accounts[k].account_key == \"C1002\") { // coa đổi key Discount => C1002 A2001",
									"                        pm.environment.set(\"C-discount\",jsData.data[i].sub_group[j].accounts[k]);",
									"                    } else if (jsData.data[i].sub_group[j].accounts[k].account_key == \"A2001\") {",
									"                        pm.environment.set(\"C-inventory\",jsData.data[i].sub_group[j].accounts[k]);",
									"                    } else if (jsData.data[i].sub_group[j].accounts[k].account_key == \"A2002\") {",
									"                        pm.environment.set(\"C-fee_not_tax\",jsData.data[i].sub_group[j].accounts[k]);",
									"                    }",
									"                }",
									"",
									"                sub_group_i[sub_group_i.length] = {",
									"                    \"sub_group_name\":jsData.data[i].sub_group[j].name,",
									"                    \"sub_group_id\":jsData.data[i].sub_group[j].id,",
									"                    \"sub_group_description\":jsData.data[i].sub_group[j].description,",
									"                    \"accounts\":accounts_j",
									"                }",
									"            }",
									"",
									"            coa[coa.length] = {",
									"                \"group_name\":jsData.data[i].name,",
									"                \"value\":jsData.data[i].value,",
									"                \"index\":jsData.data[i].index,",
									"                \"sub_group\":sub_group_i",
									"            }",
									"        }",
									"    } catch {",
									"        console.log(\"can't get all account in coa\");",
									"    }",
									"",
									"    pm.test(\"Got coa of this user's business\", function () {",
									"        pm.expect(coa.length > 0).to.be.true;",
									"    });",
									"",
									"    if(coa.length > 0){",
									"        // console.log(\"coa: \", coa);",
									"        pm.environment.set(\"C-coa\",coa);",
									"        let list_internal_account = [];",
									"",
									"        /**",
									"         * lấy những account_id sẽ bị ảnh hưởng bởi invoice để lưu thành array => PENDING (wait confirm with PO, DEV BE-FE)",
									"         */ ",
									"",
									"        pm.environment.set(\"C-list_internal_account\",list_internal_account);",
									"        postman.setNextRequest(\"get_list_sku\"); // get_list_sku",
									"    } else {",
									"        console.log(\"Can't get list internal account, end test \");",
									"        postman.setNextRequest(null);",
									"    }",
									"} else {",
									"    console.log(\"Can't get list internal account, end test \", jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "authorization",
								"value": "Bearer {{C-userToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-ledger/api/v1/account/get-list-setting?business_id={{C-business_id}}&coa_type=",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-ledger",
								"api",
								"v1",
								"account",
								"get-list-setting"
							],
							"query": [
								{
									"key": "business_id",
									"value": "{{C-business_id}}"
								},
								{
									"key": "coa_type",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "sku",
			"item": [
				{
					"name": "get_list_sku",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let page = pm.environment.get(\"C-page\");",
									"",
									"if(!page){",
									"    page = 1;",
									"    pm.environment.set(\"C-page\",page);",
									"",
									"    let page_size = 50;",
									"    pm.environment.set(\"C-page_size\",page_size);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"/**",
									" *  =============================  func randNotDupe(min, max, total)",
									" * total: số lượng random, ko dc nhỏ hơn max-min+1",
									" * return: array",
									" */",
									"function randNotDupe(min, max, total){",
									"  let arrNum = []; // new empty array",
									"  let n, p;",
									"  for (let i = 0; i < total; i++) {",
									"    do {",
									"      n = Math.floor(Math.random() * (max - min + 1)) + min;",
									"      p = arrNum.includes(n);",
									"      if(!p){",
									"        arrNum.push(n);",
									"      }",
									"    }",
									"    while(p);",
									"  }",
									"  return arrNum;",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let configs = pm.environment.get(\"C-configs\");",
									"    let total_pages = jsData.meta.total_pages;",
									"    let page = pm.environment.get(\"C-page\");",
									"",
									"    let list_sku, old_list_sku;",
									"    switch(testcase){",
									"        case 2:",
									"            list_sku = pm.environment.get(\"C-list_sku\");",
									"            if(!list_sku){",
									"                list_sku = [];",
									"            }",
									"            break;",
									"        case 4:",
									"            old_list_sku = pm.environment.get(\"C-old_list_sku\");",
									"            if(!old_list_sku){",
									"                old_list_sku = pm.environment.get(\"C-list_sku\");",
									"                pm.environment.unset(\"C-list_sku\");",
									"                pm.environment.set(\"C-old_list_sku\",old_list_sku);",
									"            }",
									"",
									"            list_sku = pm.environment.get(\"C-list_sku\");",
									"            if(!list_sku){",
									"                list_sku = [];",
									"            }",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow\");",
									"            break;",
									"    }",
									"",
									"    // should choice variant, non_variant, product to create po",
									"    for(let item in jsData.data){",
									"        if(jsData.data[item].is_in_business){",
									"            switch(configs.sku_type){",
									"                case \"physical\":",
									"                    if(jsData.data[item].sku_name.includes(\"[API] physical\") || jsData.data[item].product_type == configs.sku_type){ // && \"list_branches\" in jsData.data[item] && configs.track_inventory",
									"                        list_sku[list_sku.length] = {",
									"                            \"sku_id\":jsData.data[item].id,",
									"                            \"product_id\":jsData.data[item].product_id,",
									"                            \"product_name\":jsData.data[item].product_name,",
									"                            // \"account_id\":jsData.data[item].account_id,",
									"                            \"sku_name\":jsData.data[item].sku_name,",
									"                            \"sku_code\":jsData.data[item].sku_code,",
									"                            \"sale_price\":jsData.data[item].sale_price,",
									"                            \"cost_price\":jsData.data[item].cost_price,",
									"                            \"product_type\":jsData.data[item].product_type,",
									"                            \"selling_price\":jsData.data[item].selling_price,",
									"                            \"sold_quantity\":jsData.data[item].sold_quantity,",
									"                            \"track_inventory\":jsData.data[item].track_inventory,",
									"                            \"uom\":jsData.data[item].uom,",
									"                            \"weight\":jsData.data[item].weight,",
									"                            \"weight_unit\":jsData.data[item].weight_unit,",
									"                            \"list_branches\":jsData.data[item].list_branches",
									"                            // \"warning_quantity\":jsData.data[item].warning_quantity",
									"                            // \"list_attributes\":jsData.data[item].list_attributes",
									"                        }",
									"                    }",
									"                    break;",
									"                case \"batch_product\":",
									"                    if(jsData.data[item].sku_name.includes(\"[API] batch\") || jsData.data[item].product_type == configs.sku_type){",
									"                        list_sku[list_sku.length] = {",
									"                            \"sku_id\":jsData.data[item].id,",
									"                            \"product_id\":jsData.data[item].product_id,",
									"                            \"product_name\":jsData.data[item].product_name,",
									"                            // \"account_id\":jsData.data[item].account_id,",
									"                            \"sku_name\":jsData.data[item].sku_name,",
									"                            \"sku_code\":jsData.data[item].sku_code,",
									"                            \"sale_price\":jsData.data[item].sale_price,",
									"                            \"cost_price\":jsData.data[item].cost_price,",
									"                            \"selling_price\":jsData.data[item].selling_price,",
									"                            \"sold_quantity\":jsData.data[item].sold_quantity,",
									"                            \"track_inventory\":jsData.data[item].track_inventory,",
									"                            \"uom\":jsData.data[item].uom,",
									"                            \"weight\":jsData.data[item].weight,",
									"                            \"weight_unit\":jsData.data[item].weight_unit,",
									"                            \"list_branches\":jsData.data[item].list_branches",
									"                            // \"warning_quantity\":jsData.data[item].warning_quantity,",
									"                            // \"list_attributes\":jsData.data[item].list_attributes",
									"                        }",
									"                    }",
									"                    break;",
									"                case \"imei_product\":",
									"                    if(jsData.data[item].sku_name.includes(\"[API] imei\") || jsData.data[item].product_type == configs.sku_type){",
									"                        list_sku[list_sku.length] = {",
									"                            \"sku_id\":jsData.data[item].id,",
									"                            \"product_id\":jsData.data[item].product_id,",
									"                            \"product_name\":jsData.data[item].product_name,",
									"                            // \"account_id\":jsData.data[item].account_id,",
									"                            \"sku_name\":jsData.data[item].sku_name,",
									"                            \"sku_code\":jsData.data[item].sku_code,",
									"                            \"sale_price\":jsData.data[item].sale_price,",
									"                            \"cost_price\":jsData.data[item].cost_price,",
									"                            \"selling_price\":jsData.data[item].selling_price,",
									"                            \"sold_quantity\":jsData.data[item].sold_quantity,",
									"                            \"track_inventory\":jsData.data[item].track_inventory,",
									"                            \"uom\":jsData.data[item].uom,",
									"                            \"weight\":jsData.data[item].weight,",
									"                            \"weight_unit\":jsData.data[item].weight_unit,",
									"                            \"list_branches\":jsData.data[item].list_branches",
									"                            // \"warning_quantity\":jsData.data[item].warning_quantity,",
									"                            // \"list_attributes\":jsData.data[item].list_attributes",
									"                        }",
									"                    }",
									"                    break;",
									"                case \"book_product\":",
									"                    if(jsData.data[item].sku_name.includes(\"[API] product\")){",
									"                        list_sku[list_sku.length] = {",
									"                            \"sku_id\":jsData.data[item].id,",
									"                            \"product_id\":jsData.data[item].product_id,",
									"                            \"product_name\":jsData.data[item].product_name,",
									"                            \"account_id\":jsData.data[item].account_id,",
									"                            \"sku_name\":jsData.data[item].sku_name,",
									"                            \"sku_code\":jsData.data[item].sku_code,",
									"                            \"sale_price\":jsData.data[item].sale_price,",
									"                            \"cost_price\":jsData.data[item].cost_price,",
									"                            \"selling_price\":jsData.data[item].selling_price,",
									"                            \"sold_quantity\":jsData.data[item].sold_quantity,",
									"                            \"uom\":jsData.data[item].uom,",
									"                            \"weight\":jsData.data[item].weight,",
									"                            \"weight_unit\":jsData.data[item].weight_unit,",
									"                            \"can_pick_quantity\":jsData.data[item].can_pick_quantity,",
									"                            \"warning_quantity\":jsData.data[item].warning_quantity,",
									"                            \"list_attributes\":jsData.data[item].list_attributes",
									"                        }",
									"                    }",
									"                    break;",
									"                case \"mix\":",
									"                    if(jsData.data[item].sku_name.includes(\"[API]\") && \"list_branches\" in jsData.data[item] && configs.track_inventory){",
									"                        list_sku[list_sku.length] = {",
									"                            \"sku_id\":jsData.data[item].id,",
									"                            \"product_id\":jsData.data[item].product_id,",
									"                            // \"account_id\":jsData.data[item].account_id,",
									"                            \"sku_name\":jsData.data[item].sku_name,",
									"                            \"sku_code\":jsData.data[item].sku_code,",
									"                            \"sale_price\":jsData.data[item].sale_price,",
									"                            \"cost_price\":jsData.data[item].cost_price,",
									"                            \"selling_price\":jsData.data[item].selling_price,",
									"                            \"sold_quantity\":jsData.data[item].sold_quantity,",
									"                            \"uom\":jsData.data[item].uom,",
									"                            \"weight\":jsData.data[item].weight,",
									"                            \"weight_unit\":jsData.data[item].weight_unit,",
									"                            \"list_branches\":jsData.data[item].list_branches",
									"                            // \"warning_quantity\":jsData.data[item].warning_quantity,",
									"                            // \"list_attributes\":jsData.data[item].list_attributes",
									"                        }",
									"                    }",
									"                    break;",
									"                default: ",
									"                    console.log(\"Missing product_type\");",
									"                    break;",
									"            }",
									"        }",
									"    }",
									"    pm.environment.set(\"C-list_sku\",list_sku);",
									"",
									"    if(page >= total_pages || page >= configs.limit_page){",
									"        // must clear page & page_size",
									"        pm.environment.unset(\"C-page\");",
									"        pm.environment.unset(\"C-page_size\");",
									"",
									"        switch(testcase){",
									"            case 2:",
									"                pm.test(\"Got all sku! \" + list_sku.length, function () {",
									"                    pm.expect(list_sku.length > 0).to.be.true;",
									"                });",
									"                ",
									"                // console.log(\"list_sku: \",list_sku);",
									"                let total_sku_use_create_order = configs.total_sku; // configs.total_sku, list_sku.length",
									"                if(list_sku.length < configs.total_sku){",
									"                    total_sku_use_create_order = list_sku.length;",
									"                }",
									"                let list_rand_sku_pos = randNotDupe(0,list_sku.length - 1,total_sku_use_create_order);",
									"                let list_sku_use_create = [];",
									"                for(let i in list_rand_sku_pos){",
									"                    list_sku_use_create[list_sku_use_create.length] = list_sku[list_rand_sku_pos[i]];",
									"                }",
									"",
									"                let create_branch = pm.environment.get(\"C-branch_id\");",
									"                let check_branch = pm.environment.get(\"C-filter_branch_id\");",
									"                for(let i in list_sku_use_create){",
									"                    for(let j in list_sku_use_create[i].list_branches){",
									"                        if(list_sku_use_create[i].list_branches[j].branch_id == create_branch){",
									"                            list_sku_use_create[i].list_branches[j].is_create = true;",
									"                        } else {",
									"                            list_sku_use_create[i].list_branches[j].is_create = false;",
									"                        }",
									"",
									"                        if(list_sku_use_create[i].list_branches[j].branch_id == check_branch){",
									"                            list_sku_use_create[i].list_branches[j].is_check = true;",
									"                        } else {",
									"                            list_sku_use_create[i].list_branches[j].is_check = false;",
									"                        }",
									"                    }",
									"                }",
									"                console.log(\"Will create purchase order with list sku: \", list_sku_use_create);",
									"",
									"                pm.environment.set(\"C-list_sku_use_create\",list_sku_use_create);",
									"                postman.setNextRequest(\"get_list_tax\"); // get_list_tax",
									"                break;",
									"            default:",
									"                console.log(\"Missing flow, end test\");",
									"                postman.setNextRequest(null);",
									"                break;",
									"        }",
									"    } else {",
									"        page++;",
									"        pm.environment.set(\"C-page\",page);",
									"",
									"        console.log(\"view next page (\" + page + \") to get more sku\");",
									"        postman.setNextRequest(\"get_list_sku\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get list sku, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "authorization",
								"value": "Bearer {{C-userToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-business/api/v1/sku/get-list?business_id={{C-business_id}}&page={{C-page}}&page_size={{C-page_size}}&search=&sort=&include=inventory",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-business",
								"api",
								"v1",
								"sku",
								"get-list"
							],
							"query": [
								{
									"key": "business_id",
									"value": "{{C-business_id}}"
								},
								{
									"key": "page",
									"value": "{{C-page}}"
								},
								{
									"key": "page_size",
									"value": "{{C-page_size}}"
								},
								{
									"key": "search",
									"value": ""
								},
								{
									"key": "sort",
									"value": ""
								},
								{
									"key": "include",
									"value": "inventory"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "tax",
			"item": [
				{
					"name": "get_list_tax",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = JSON.parse(responseBody);",
									"if(pm.response.code == 200 && jsData.code == 102000){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let total_pages = jsData.meta.total_pages;",
									"    let page = pm.environment.get(\"C-page\");",
									"",
									"    let list_tax = pm.environment.get(\"C-list_tax\");",
									"    if(!list_tax){",
									"        list_tax = [];",
									"    }",
									"",
									"    for(let item in jsData.data){",
									"        if(jsData.data[item].description.includes(\"[API]\") && jsData.data[item].rate > 0 && jsData.data[item].rate < 100){",
									"            list_tax[list_tax.length] = {",
									"                \"tax_id\":jsData.data[item].id,",
									"                \"name\":jsData.data[item].name,",
									"                \"rate\":jsData.data[item].rate,",
									"                \"account_id\":jsData.data[item].account_id,",
									"                \"description\":jsData.data[item].description",
									"            }",
									"        }",
									"    }",
									"    pm.environment.set(\"C-list_tax\",list_tax);",
									"",
									"    if(page >= total_pages){",
									"        // must clear page & page_size",
									"        pm.environment.unset(\"C-page\");",
									"        pm.environment.unset(\"C-page_size\");",
									"",
									"        pm.test(\"Got all tax! \" + list_tax.length, function () {",
									"            pm.expect(list_tax.length > 0).to.be.true;",
									"        });",
									"        console.log(\"list_tax: \", list_tax);",
									"",
									"        postman.setNextRequest(\"get_list_posting\"); // get_list_inventory, get_list_posting",
									"    } else {",
									"        page++;",
									"        pm.environment.set(\"C-page\",page);",
									"",
									"        console.log(\"view next page (\" + page + \") to get more tax\");",
									"        postman.setNextRequest(\"get_list_tax\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get list tax, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let page = pm.environment.get(\"C-page\");",
									"",
									"if(!page){",
									"    page = 1;",
									"    pm.environment.set(\"C-page\",page);",
									"",
									"    let page_size = 50;",
									"    pm.environment.set(\"C-page_size\",page_size);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-business/api/v1/tax/get-list?business_id={{C-business_id}}&page={{C-page}}&page_size={{C-page_size}}&option=&status=",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-business",
								"api",
								"v1",
								"tax",
								"get-list"
							],
							"query": [
								{
									"key": "business_id",
									"value": "{{C-business_id}}"
								},
								{
									"key": "page",
									"value": "{{C-page}}"
								},
								{
									"key": "page_size",
									"value": "{{C-page_size}}"
								},
								{
									"key": "option",
									"value": ""
								},
								{
									"key": "status",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "buyer view",
			"item": [
				{
					"name": "buyer_view_po",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let po_obj = pm.environment.get(\"C-po_obj\");",
									"let system_code = po_obj.system_code;",
									"console.log(\"view detail po: \" + system_code);",
									"",
									"pm.environment.set(\"C-system_code\",system_code);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    console.log(\"Debug: \" + JSON.stringify(jsData));",
									"",
									"    let po_obj = pm.environment.get(\"C-po_obj\");",
									"    for(let i in po_obj.items){",
									"        for(let j in jsData.data.entry_items){",
									"            if(po_obj.items[i].product_id == jsData.data.entry_items[j].product_id){",
									"                po_obj.items[i].item_id = jsData.data.entry_items[j].id;",
									"                break;",
									"            }",
									"        }",
									"    }",
									"    pm.environment.set(\"C-po_obj\",po_obj);",
									"    ",
									"    pm.test(\"order_code of po correctly! \" + po_obj.order_code, function () {",
									"        pm.expect(po_obj.order_code == jsData.data.order_code).to.be.true;",
									"    });",
									"",
									"    pm.test(\"sub_total_amount of po correctly! \" + po_obj.sub_total_amount, function () {",
									"        pm.expect(po_obj.sub_total_amount == jsData.data.sub_total_amount).to.be.true;",
									"    });",
									"",
									"    pm.test(\"contact_id of po correctly! \" + po_obj.contact_id, function () {",
									"        pm.expect(po_obj.contact_id == jsData.data.contact_id).to.be.true;",
									"    });",
									"",
									"    pm.test(\"email of po correctly! \" + po_obj.email, function () {",
									"        pm.expect(po_obj.email == jsData.data.email).to.be.true;",
									"    });",
									"",
									"    pm.test(\"created_order_at of po correctly! \" + po_obj.value_at, function () {",
									"        pm.expect(po_obj.value_at.substring(0,19) == jsData.data.value_at.substring(0,19)).to.be.true;",
									"    });",
									"",
									"    pm.test(\"due_at of po correctly! \" + po_obj.due_at, function () {",
									"        pm.expect(po_obj.due_at.substring(0,19) == jsData.data.due_at.substring(0,19)).to.be.true;",
									"    });",
									"",
									"    pm.test(\"note of po correctly! \" + po_obj.note, function () {",
									"        pm.expect(po_obj.note == jsData.data.note).to.be.true;",
									"    });",
									"",
									"    // tax_type",
									"    pm.test(\"tax_type of po correctly! \", function () {",
									"        pm.expect(jsData.data.tax_type == po_obj.tax_type).to.be.true;",
									"    });",
									"    ",
									"    // check discounts obj",
									"    // pm.test(\"discounts of po correctly! \", function () {",
									"    //     console.log(\"exp discounts: \",po_obj.discounts);",
									"    //     console.log(\"act discounts: \",jsData.data.discounts);",
									"    //     pm.expect(JSON.stringify(jsData.data.discounts) == JSON.stringify(po_obj.discounts)).to.be.true;",
									"    // });",
									"",
									"    // check items obj",
									"    // pm.test(\"items of po correctly! \", function () {",
									"    //     console.log(\"exp items: \",po_obj.expected_items);",
									"    //     console.log(\"act items: \",jsData.data.items);",
									"    //     pm.expect(JSON.stringify(jsData.data.items) == JSON.stringify(po_obj.expected_items)).to.be.true;",
									"    // });",
									"",
									"    // check discount amount",
									"    pm.test(\"discount_amount of po correctly! \", function () {",
									"        console.log(\"act discount_amount: \" + jsData.data.discount_amount);",
									"        pm.expect(jsData.data.discount_amount == po_obj.exp_discount_amount).to.be.true;",
									"    });",
									"",
									"    // check total item amount",
									"    pm.test(\"total_amount, payment_due_amount of po correctly! \", function () {",
									"        console.log(\"act total_amount: \" + jsData.data.total_amount);",
									"        pm.expect(jsData.data.total_amount == po_obj.exp_total_amount && jsData.data.payment_due_amount == po_obj.exp_total_amount).to.be.true;",
									"    });",
									"",
									"    // tax_amount",
									"    pm.test(\"tax_amount of po correctly! \", function () {",
									"        console.log(\"act tax_amount: \" + jsData.data.tax_amount);",
									"        pm.expect(jsData.data.tax_amount == po_obj.exp_tax_amount).to.be.true;",
									"    });",
									"",
									"    // payment_due_amount, return_amount, paid_amount must be 0",
									"    pm.test(\"return_amount, paid_amount must be 0\", function () {",
									"        pm.expect(jsData.data.return_amount == 0 && jsData.data.paid_amount == 0).to.be.true;",
									"    });",
									"",
									"    // chưa có setting này",
									"    // pm.test(\"payment_config of po correctly! \" + po_obj.payment_config, function () {",
									"    //     pm.expect(JSON.stringify(po_obj.payment_config) == JSON.stringify(jsData.data.payment_config)).to.be.true;",
									"    // });",
									"",
									"    pm.test(\"cart_status of po correctly! \" + po_obj.cart_status, function () {",
									"        pm.expect(po_obj.cart_status == jsData.data.cart_status).to.be.true;",
									"    });",
									"",
									"    // final_status",
									"    pm.test(\"final_status of po correctly! \" + po_obj.exp_final_status, function () {",
									"        pm.expect(po_obj.exp_final_status == jsData.data.final_status).to.be.true;",
									"    });",
									"",
									"    postman.setNextRequest(\"get_list_contact\"); // get_list_contact",
									"} else {",
									"    console.log(\"Can't get internal contact detail, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/{{C-business_id}}/po/{{C-system_code}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"{{C-business_id}}",
								"po",
								"{{C-system_code}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "purchase_order",
			"item": [
				{
					"name": "get_po_overview",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"let configs = pm.environment.get(\"C-configs\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let configs = pm.environment.get(\"C-configs\");",
									"",
									"    let po_overview = null;",
									"    try {",
									"        po_overview = jsData.data;",
									"    } catch {",
									"        console.log(\"missing data\");",
									"    }",
									"",
									"    let old_po_overview;",
									"    switch(testcase){",
									"        case 2:",
									"            pm.test(\"got po_overview data\", function () {",
									"                pm.expect(po_overview != null).to.be.true;",
									"            });",
									"            pm.environment.set(\"C-po_overview\",po_overview);",
									"",
									"            postman.setNextRequest(\"get_list_po\"); // get_list_po",
									"            break;",
									"        case 5: case 8:",
									"            let po_obj = pm.environment.get(\"C-po_obj\");",
									"",
									"            old_po_overview = pm.environment.get(\"C-po_overview\");",
									"            console.log(\"old_po_overview: \", old_po_overview);",
									"            console.log(\"po_overview: \", po_overview);",
									"",
									"            switch(configs.create_po_status){",
									"                case \"saved\":",
									"                    // total_processing",
									"                    pm.test(\"total_processing increase \" + po_obj.exp_total_amount, function () {",
									"                        pm.expect(old_po_overview.total_processing + po_obj.exp_total_amount).to.eql(po_overview.total_processing);",
									"                    });",
									"",
									"                    // count_processing",
									"                    pm.test(\"count_processing increase 1\", function () {",
									"                        pm.expect(old_po_overview.count_processing + 1).to.eql(po_overview.count_processing);",
									"                    });",
									"",
									"                    // total_today",
									"                    pm.test(\"nothing happen with total_today\", function () {",
									"                        pm.expect(old_po_overview.total_today).to.eql(po_overview.total_today);",
									"                    });",
									"",
									"                    // count_today",
									"                    pm.test(\"nothing happen with count_today \", function () {",
									"                        pm.expect(old_po_overview.count_today).to.eql(po_overview.count_today);",
									"                    });",
									"",
									"                    // total_unpaid => phụ thuộc payment gửi lên, tạm thời tính là chưa thanh toán => handle ở luồng thanh toán po",
									"                    pm.test(\"total_unpaid increase \" + po_obj.exp_total_amount, function () {",
									"                        pm.expect(old_po_overview.total_unpaid + po_obj.exp_total_amount).to.eql(po_overview.total_unpaid);",
									"                    });",
									"",
									"                    // count_unpaid => phụ thuộc payment gửi lên, tạm thời tính là chưa thanh toán",
									"                    pm.test(\"count_unpaid increase 1\", function () {",
									"                        pm.expect(old_po_overview.count_unpaid + 1).to.eql(po_overview.count_unpaid);",
									"                    });",
									"                    break;",
									"                case \"completed\":",
									"                    // total_processing",
									"                    pm.test(\"Nothing happen with total_processing\", function () {",
									"                        pm.expect(old_po_overview.total_processing).to.eql(po_overview.total_processing);",
									"                    });",
									"",
									"                    // count_processing",
									"                    pm.test(\"Nothing happen with count_processing\", function () {",
									"                        pm.expect(old_po_overview.count_processing).to.eql(po_overview.count_processing);",
									"                    });",
									"",
									"                    // total_today",
									"                    pm.test(\"count_today increase \" + po_obj.exp_total_amount, function () {",
									"                        pm.expect(old_po_overview.total_today + po_obj.exp_total_amount).to.eql(po_overview.total_today);",
									"                    });",
									"",
									"                    // count_today",
									"                    pm.test(\"count_today increase 1\", function () {",
									"                        pm.expect(old_po_overview.count_today + 1).to.eql(po_overview.count_today);",
									"                    });",
									"",
									"                    // total_unpaid => phụ thuộc payment gửi lên, tạm thời tính là chưa thanh toán",
									"                    pm.test(\"total_unpaid increase \" + po_obj.exp_total_amount, function () {",
									"                        pm.expect(old_po_overview.total_unpaid + po_obj.exp_total_amount).to.eql(po_overview.total_unpaid);",
									"                    });",
									"",
									"                    // count_unpaid => phụ thuộc payment gửi lên, tạm thời tính là chưa thanh toán",
									"                    pm.test(\"count_unpaid increase 1\", function () {",
									"                        pm.expect(old_po_overview.count_unpaid + 1).to.eql(po_overview.count_unpaid);",
									"                    });",
									"                    break;",
									"                case \"draft\":",
									"                default:",
									"                    pm.test(\"nothing happen with po_overview\", function () {",
									"                        pm.expect(JSON.stringify(old_po_overview)).to.eql(JSON.stringify(po_overview));",
									"                    });",
									"                    break;",
									"            }",
									"",
									"            postman.setNextRequest(\"get_list_contact\"); // get_list_contact",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get po overview\");",
									"    postman.setNextRequest(null);",
									"    // postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/po/overview?list_contact_ids=&option=&payment_status=&search=&status=",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"po",
								"overview"
							],
							"query": [
								{
									"key": "branch_id",
									"value": "{{C-filter_branch_id}}",
									"disabled": true
								},
								{
									"key": "start_time_created_at",
									"value": "",
									"disabled": true
								},
								{
									"key": "end_time_created_at",
									"value": "",
									"disabled": true
								},
								{
									"key": "start_time_due_at",
									"value": "",
									"disabled": true
								},
								{
									"key": "end_time_due_at",
									"value": "",
									"disabled": true
								},
								{
									"key": "list_contact_ids",
									"value": "",
									"description": "{{C-filter_contact_ids}}"
								},
								{
									"key": "option",
									"value": ""
								},
								{
									"key": "payment_status",
									"value": ""
								},
								{
									"key": "search",
									"value": ""
								},
								{
									"key": "sort",
									"value": "asc",
									"disabled": true
								},
								{
									"key": "status",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get_list_po",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let page = pm.environment.get(\"C-page\");",
									"",
									"if(!page){",
									"    page = 1;",
									"    pm.environment.set(\"C-page\",page);",
									"",
									"    let page_size = 50;",
									"    pm.environment.set(\"C-page_size\",page_size);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ============================= random number between min and max",
									"function getRandomInt(min, max) {",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = pm.response.json();",
									"if(pm.response.code == 200 || pm.response.code == 400){ // tạm thời handle 404 vì BE chưa push code",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let total_pages = 0, total_po = 0;",
									"    try {",
									"        total_pages = jsData.meta.total_pages;",
									"        total_po = jsData.meta.total_rows;",
									"    } catch {",
									"        console.log(\"Missing meta data\");",
									"    }",
									"    let page = pm.environment.get(\"C-page\");",
									"",
									"    let list_po, old_total_po;",
									"    switch(testcase){",
									"        case 2:",
									"            pm.environment.unset(\"C-page\");",
									"            pm.environment.unset(\"C-page_size\");",
									"            pm.test(\"Got total po! \" + total_po, function () {",
									"                pm.expect(total_po > 0).to.be.true;",
									"            });",
									"            pm.environment.set(\"C-total_po\",total_po);",
									"",
									"            for(let i in jsData.data){",
									"                if(jsData.data[i].cart_status == \"active\"){",
									"                    pm.environment.set(\"C-existed_po_code\",jsData.data[i].po_code);",
									"                    break;",
									"                }",
									"            }",
									" ",
									"            testcase++;",
									"            // testcase = 6;",
									"            pm.environment.set(\"C-testcase\",testcase);",
									"            postman.setNextRequest(\"calculate_po\"); // calculate_po",
									"            break;",
									"        case 5: case 8:",
									"            list_po = pm.environment.get(\"C-list_po\");",
									"            if(!list_po){",
									"                list_po = [];",
									"            }",
									"",
									"            for(let item in jsData.data){",
									"                list_po[list_po.length] = {",
									"                    \"po_id\":jsData.data[item].id,",
									"                    \"created_at\":jsData.data[item].created_at,",
									"                    \"po_code\":jsData.data[item].po_code,",
									"                    \"system_code\":jsData.data[item].system_code,",
									"                    \"cart_status\":jsData.data[item].cart_status,",
									"                    \"payment_status\":jsData.data[item].payment_status,",
									"                    \"items_amount\":jsData.data[item].items_amount,",
									"                    \"sub_total_amount\":jsData.data[item].sub_total_amount,",
									"                    \"paid_amount\":jsData.data[item].paid_amount,",
									"                    \"currency\":jsData.data[item].currency,",
									"                    \"contact_id\":jsData.data[item].contact_id,",
									"                    \"entry_type\":jsData.data[item].entry_type,",
									"                    \"note\":jsData.data[item].note,",
									"                    \"value_at\":jsData.data[item].value_at,",
									"                    \"due_at\":jsData.data[item].due_at,",
									"                    \"send_at\":jsData.data[item].send_at,",
									"                    \"account_id\":jsData.data[item].account_id,",
									"                    \"tax_type\":jsData.data[item].tax_type,",
									"                    \"final_status\":jsData.data[item].final_status,",
									"                    \"po_pic_info\":jsData.data[item].po_pic_info",
									"                }",
									"                // list_po[list_po.length] = jsData.data[item];",
									"            }",
									"            pm.environment.set(\"C-list_po\",list_po);",
									"",
									"            let configs = pm.environment.get(\"C-configs\");",
									"            if(page >= total_pages || page >= configs.limit_page){",
									"                // must clear page & page_size",
									"                pm.environment.unset(\"C-page\");",
									"                pm.environment.unset(\"C-page_size\");",
									"",
									"                let po_obj = pm.environment.get(\"C-po_obj\");",
									"                // console.log(\"po_obj: \", po_obj);",
									"                old_total_po = pm.environment.get(\"C-total_po\");",
									"",
									"                pm.test(\"Total po increase 1\", function () {",
									"                    pm.expect(total_po == old_total_po + 1).to.be.true;",
									"                });",
									"",
									"                let isFound = false;",
									"                for(let i in list_po){",
									"                    if(list_po[i].po_id == po_obj.po_id){",
									"                        isFound = true;",
									"                        console.log(\"debug: \" + JSON.stringify(list_po[i]));",
									"",
									"                        pm.test(\"po_code of po correctly! \" + po_obj.po_code, function () {",
									"                            pm.expect(po_obj.po_code == list_po[i].po_code).to.be.true;",
									"                        });",
									"",
									"                        pm.test(\"sub_total_amount of po correctly! \" + po_obj.sub_total_amount, function () {",
									"                            pm.expect(po_obj.sub_total_amount == list_po[i].sub_total_amount).to.be.true;",
									"                        });",
									"",
									"                        pm.test(\"contact_id of po correctly! \" + po_obj.contact_id, function () {",
									"                            pm.expect(po_obj.contact_id == list_po[i].contact_id).to.be.true;",
									"                        });",
									"",
									"                        pm.test(\"value_at of po correctly! \" + po_obj.value_at, function () {",
									"                            console.log(\"exp value_at: \" + po_obj.value_at);",
									"                            console.log(\"act value_at: \" + list_po[i].value_at);",
									"                            pm.expect(po_obj.value_at.substring(0,17) == list_po[i].value_at.substring(0,17)).to.be.true;",
									"                        });",
									"",
									"                        pm.test(\"due_at of po correctly! \" + po_obj.due_at, function () {",
									"                            console.log(\"exp due_at: \" + po_obj.due_at);",
									"                            console.log(\"act due_at: \" + list_po[i].due_at);",
									"                            pm.expect(po_obj.due_at.substring(0,17) == list_po[i].due_at.substring(0,17)).to.be.true;",
									"                        });",
									"",
									"                        pm.test(\"note of po correctly! \" + po_obj.note, function () {",
									"                            // console.log(\"po at i: \",list_po[i]);",
									"                            pm.expect(po_obj.note == list_po[i].note).to.be.true;",
									"                        });",
									"",
									"                        pm.test(\"tax_type of po correctly! \" + po_obj.tax_type, function () {",
									"                            pm.expect(po_obj.tax_type == list_po[i].tax_type).to.be.true;",
									"                        });",
									"",
									"                        pm.test(\"status of po correctly! \" + po_obj.cart_status, function () {",
									"                            pm.expect(po_obj.cart_status == list_po[i].cart_status).to.be.true;",
									"                        });",
									"",
									"                        // final_status",
									"                        let exp_final_status = po_obj.cart_status; // tạm thời lấy theo cart_status",
									"                        // if(testcase == 8){",
									"                        //     let ranTimeCase = pm.environment.get(\"C-ranTimeCase\");",
									"                        //     if(ranTimeCase == 2 || ranTimeCase == 3){",
									"                        //         exp_final_status = \"unsent\";",
									"                        //     } else {",
									"                        //         exp_final_status = \"overdue\"; // khả năng sẽ sai do đã thay đổi ranTimeCase => update sau",
									"                        //     }",
									"                        // } else {",
									"                        //     exp_final_status = po_obj.cart_status;",
									"                        // }",
									"                        // pm.test(\"final_status of po is \" + exp_final_status, function () {",
									"                        //     console.log(\"act final_status:  \" + list_po[i].final_status);",
									"                        //     console.log(\"exp final_status:  \" + exp_final_status);",
									"                        //     pm.expect(exp_final_status == list_po[i].final_status).to.be.true;",
									"                        // });",
									"                        pm.test(\"final_status of po is \" + exp_final_status, function () {",
									"                            console.log(\"act final_status:  \" + list_po[i].final_status);",
									"                            console.log(\"exp final_status:  \" + exp_final_status);",
									"                            pm.expect(exp_final_status == list_po[i].final_status).to.be.true;",
									"                        });",
									"                        po_obj.exp_final_status = exp_final_status;",
									"",
									"                        // po_pic_info.id => user_id, po_pic_info.full_name",
									"                        let userInfo = pm.environment.get(\"C-userInfo\");",
									"                        console.log(\"userInfo: \", userInfo);",
									"                        pm.test(\"po_pic_info.user_id of po is \" + userInfo.id, function () {",
									"                            console.log(\"act user_id:  \" + list_po[i].po_pic_info.user_id);",
									"                            pm.expect(list_po[i].po_pic_info.user_id == userInfo.id).to.be.true;",
									"                        });",
									"",
									"                        // case này có chút issue vs owner, hiện tại lấy _info trả về nên sẽ ko ưu tiên check",
									"                        // pm.test(\"po_pic_info.full_name of po is \" + userInfo.first_name + \" \" + userInfo.last_name, function () {",
									"                        //     console.log(\"act full_name:  \" + list_po[i].po_pic_info.full_name);",
									"                        //     pm.expect(list_po[i].po_pic_info.full_name == userInfo.first_name + \" \" + userInfo.last_name).to.be.true;",
									"                        // });",
									"                        break;",
									"                    }",
									"                }",
									"",
									"                pm.test(\"Found new product\", function () {",
									"                    pm.expect(isFound).to.be.true;",
									"                });",
									"",
									"                // update total records",
									"                pm.environment.set(\"C-total_po\",total_po);",
									"                pm.environment.set(\"C-po_obj\",po_obj);",
									"                pm.environment.unset(\"C-list_po\");",
									"",
									"                postman.setNextRequest(\"get_po_detail\"); // get_po_detail",
									"            } else {",
									"                page++;",
									"                pm.environment.set(\"C-page\",page);",
									"",
									"                console.log(\"view next page (\" + page + \") to get more product\");",
									"                postman.setNextRequest(\"get_list_po\");",
									"            }",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get list po, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/po/get-list?branch_id={{C-branch_id}}&page={{C-page}}&page_size={{C-page_size}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"po",
								"get-list"
							],
							"query": [
								{
									"key": "branch_id",
									"value": "{{C-branch_id}}"
								},
								{
									"key": "contact_id",
									"value": "",
									"disabled": true
								},
								{
									"key": "start_time_created_at",
									"value": "",
									"disabled": true
								},
								{
									"key": "end_time_created_at",
									"value": "",
									"disabled": true
								},
								{
									"key": "start_time_due_at",
									"value": "",
									"disabled": true
								},
								{
									"key": "end_time_due_at",
									"value": "",
									"disabled": true
								},
								{
									"key": "list_contact_ids",
									"value": "",
									"disabled": true
								},
								{
									"key": "option",
									"value": null,
									"disabled": true
								},
								{
									"key": "page",
									"value": "{{C-page}}"
								},
								{
									"key": "page_size",
									"value": "{{C-page_size}}"
								},
								{
									"key": "payment_status",
									"value": null,
									"disabled": true
								},
								{
									"key": "search",
									"value": null,
									"disabled": true
								},
								{
									"key": "sort",
									"value": "",
									"disabled": true
								},
								{
									"key": "status",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get_po_detail",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let po_obj = pm.environment.get(\"C-po_obj\");",
									"let po_id = po_obj.po_id;",
									"console.log(\"view detail po: \" + po_id);",
									"",
									"pm.environment.set(\"C-po_id\",po_id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200 && jsData.code == 102000){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    console.log(\"Debug: \",jsData.data);",
									"",
									"    let po_obj = pm.environment.get(\"C-po_obj\");",
									"    ",
									"    let must_update = pm.environment.get(\"must_update\");",
									"    if(must_update){",
									"        for(let i in po_obj.items){",
									"            for(let j in jsData.data.items){",
									"                for(let k in po_obj.items[i].batches){",
									"                    for(let l in jsData.data.items[j].batches){",
									"                        if(po_obj.items[i].batches[k].sku_id == jsData.data.items[j].batches[l].sku_id && po_obj.items[i].batches[k].name == jsData.data.items[j].batches[l].name){",
									"                            po_obj.items[i].batches[k].id = jsData.data.items[j].batches[l].id;",
									"                            break;",
									"                        }",
									"                    }",
									"                }",
									"",
									"                if(po_obj.items[i].product_id == jsData.data.items[j].product_id && po_obj.items[i].sku_id == jsData.data.items[j].sku_id){",
									"                    po_obj.items[i].id = jsData.data.items[j].id; // line_item id",
									"                    break;",
									"                }",
									"            }",
									"        }",
									"        pm.environment.set(\"C-po_obj\",po_obj);",
									"        ",
									"        pm.environment.set(\"must_update\", false);",
									"        postman.setNextRequest(\"update_po\"); // update_po",
									"    } else {",
									"        for(let i in po_obj.items){",
									"            for(let j in jsData.data.items){",
									"                if(po_obj.items[i].product_id == jsData.data.items[j].product_id && po_obj.items[i].item_amount == jsData.data.items[j].item_amount && po_obj.items[i].quantity == jsData.data.items[j].quantity){",
									"                    po_obj.items[i].item_id = jsData.data.items[j].id;",
									"                    break;",
									"                }",
									"            }",
									"        }",
									"        pm.test(\"po_code of po correctly! \" + po_obj.po_code, function () {",
									"            pm.expect(po_obj.po_code == jsData.data.po_code).to.be.true;",
									"        });",
									"",
									"        pm.test(\"sub_total_amount of po correctly! \" + po_obj.sub_total_amount, function () {",
									"            pm.expect(po_obj.sub_total_amount == jsData.data.sub_total_amount).to.be.true;",
									"        });",
									"",
									"        pm.test(\"delivery_fee_amount of po correctly! \" + po_obj.delivery_fee_amount, function () {",
									"            pm.expect(po_obj.delivery_fee_amount == jsData.data.delivery_fee_amount).to.be.true;",
									"        });",
									"",
									"        pm.test(\"inspection_fees of po correctly! \" + po_obj.inspection_fees, function () {",
									"            pm.expect(po_obj.inspection_fees == jsData.data.inspection_fees).to.be.true;",
									"        });",
									"",
									"        pm.test(\"other_fees of po correctly! \" + po_obj.other_fees, function () {",
									"            pm.expect(po_obj.other_fees == jsData.data.other_fees).to.be.true;",
									"        });",
									"",
									"        pm.test(\"contact_id of po correctly! \" + po_obj.contact_id, function () {",
									"            pm.expect(po_obj.contact_id == jsData.data.contact_id).to.be.true;",
									"        });",
									"",
									"        // pm.test(\"email of po correctly! \" + po_obj.email, function () {",
									"        //     pm.expect(po_obj.email == jsData.data.email).to.be.true;",
									"        // });",
									"",
									"        pm.test(\"created_order_at of po correctly! \" + po_obj.value_at, function () {",
									"            pm.expect(po_obj.value_at.substring(0,19) == jsData.data.value_at.substring(0,19)).to.be.true;",
									"        });",
									"",
									"        pm.test(\"due_at of po correctly! \" + po_obj.due_at, function () {",
									"            pm.expect(po_obj.due_at.substring(0,19) == jsData.data.due_at.substring(0,19)).to.be.true;",
									"        });",
									"",
									"        pm.test(\"note of po correctly! \" + po_obj.note, function () {",
									"            // console.log(\"jsData.data: \",jsData.data);",
									"            pm.expect(po_obj.note == jsData.data.note).to.be.true;",
									"        });",
									"",
									"        // tax_type",
									"        pm.test(\"tax_type of po correctly! \", function () {",
									"            pm.expect(jsData.data.tax_type == po_obj.tax_type).to.be.true;",
									"        });",
									"        ",
									"        // check discounts obj",
									"        // pm.test(\"discounts of po correctly! \", function () {",
									"        //     console.log(\"exp discounts: \",po_obj.discounts);",
									"        //     console.log(\"act discounts: \",jsData.data.discounts);",
									"        //     pm.expect(JSON.stringify(jsData.data.discounts) == JSON.stringify(po_obj.discounts)).to.be.true;",
									"        // });",
									"",
									"        // check items obj",
									"        // pm.test(\"items of po correctly! \", function () {",
									"        //     console.log(\"exp items: \",po_obj.expected_items);",
									"        //     console.log(\"act items: \",jsData.data.items);",
									"        //     pm.expect(JSON.stringify(jsData.data.items) == JSON.stringify(po_obj.expected_items)).to.be.true;",
									"        // });",
									"",
									"        // check discount amount",
									"        pm.test(\"discount_amount of po correctly! \", function () {",
									"            console.log(\"act discount_amount: \" + jsData.data.discount_amount);",
									"            pm.expect(jsData.data.discount_amount == po_obj.exp_discount_amount).to.be.true;",
									"        });",
									"",
									"        // check total item amount",
									"        pm.test(\"total_amount of po correctly! \", function () {",
									"            console.log(\"act total_amount: \" + jsData.data.total_amount);",
									"            pm.expect(jsData.data.total_amount == po_obj.exp_total_amount).to.be.true;",
									"        });",
									"",
									"        // payment_due_amount => ko cần check ở create",
									"        // pm.test(\"total_amount, payment_due_amount of po correctly! \", function () {",
									"        //     pm.expect(jsData.data.payment_due_amount == po_obj.exp_total_amount).to.be.true;",
									"        // });",
									"",
									"        // tax_amount",
									"        pm.test(\"tax_amount of po correctly! \", function () {",
									"            console.log(\"act tax_amount: \" + jsData.data.tax_amount);",
									"            pm.expect(jsData.data.tax_amount == po_obj.exp_tax_amount).to.be.true;",
									"        });",
									"",
									"        // payment_due_amount, return_amount, paid_amount must be 0",
									"        pm.test(\"paid_amount must be 0\", function () {",
									"            pm.expect(jsData.data.paid_amount == 0).to.be.true;",
									"        });",
									"",
									"        // chưa có setting này",
									"        // pm.test(\"payment_config of po correctly! \" + po_obj.payment_config, function () {",
									"        //     pm.expect(JSON.stringify(po_obj.payment_config) == JSON.stringify(jsData.data.payment_config)).to.be.true;",
									"        // });",
									"",
									"        pm.test(\"cart_status of po correctly! \" + po_obj.cart_status, function () {",
									"            pm.expect(po_obj.cart_status == jsData.data.cart_status).to.be.true;",
									"        });",
									"",
									"        // final_status => hiện tại lấy theo cart status",
									"        pm.test(\"final_status of po correctly! \" + po_obj.cart_status, function () {",
									"            pm.expect(po_obj.cart_status == jsData.data.final_status).to.be.true;",
									"        });",
									"",
									"        pm.environment.set(\"C-po_obj\",po_obj);",
									"",
									"        postman.setNextRequest(\"get_po_overview\"); // get_po_overview",
									"    }",
									"} else {",
									"    console.log(\"Can't get internal contact detail, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/po/get-one/{{C-po_id}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"po",
								"get-one",
								"{{C-po_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_po_overview_branch",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"let configs = pm.environment.get(\"C-configs\");",
									"",
									"let filter_branch_id = \"\"; // nếu ko chọn branch thì truyền rỗng để lấy all",
									"filter_branch_id = configs.none_uuid; // fix tạm để by pass",
									"let filter_contact_ids = \"\";",
									"pm.environment.set(\"C-filter_branch_id\",filter_branch_id);",
									"pm.environment.set(\"C-filter_contact_ids\",filter_contact_ids);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200 || pm.response.code == 400){ // tạm thời để 404 vì BE chưa push code",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let po_overview = null;",
									"    try {",
									"        po_overview = jsData.data;",
									"    } catch {",
									"        console.log(\"missing data\");",
									"    }",
									"",
									"    let old_po_overview;",
									"    switch(testcase){",
									"        case 2:",
									"            pm.test(\"got po_overview data\", function () {",
									"                pm.expect(po_overview != null).to.be.true;",
									"            });",
									"            pm.environment.set(\"C-po_overview\",po_overview);",
									"",
									"            postman.setNextRequest(\"\"); // get_list_po",
									"            break;",
									"        case 5:",
									"            old_po_overview = pm.environment.get(\"C-po_overview\");",
									"            pm.test(\"Nothing happen with po_overview data\", function () {",
									"                pm.expect(JSON.stringify(old_po_overview)).to.eql(JSON.stringify(po_overview));",
									"            });",
									"            ",
									"            postman.setNextRequest(\"\"); // get_list_contact",
									"            break;",
									"        case 8:",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get po overview\");",
									"    postman.setNextRequest(null);",
									"    // postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/po/overview?branch_id={{C-filter_branch_id}}&list_contact_ids={{C-filter_contact_ids}}&option=&payment_status=&search=&status=",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"po",
								"overview"
							],
							"query": [
								{
									"key": "branch_id",
									"value": "{{C-filter_branch_id}}"
								},
								{
									"key": "start_time_created_at",
									"value": "",
									"disabled": true
								},
								{
									"key": "end_time_created_at",
									"value": "",
									"disabled": true
								},
								{
									"key": "start_time_due_at",
									"value": "",
									"disabled": true
								},
								{
									"key": "end_time_due_at",
									"value": "",
									"disabled": true
								},
								{
									"key": "list_contact_ids",
									"value": "{{C-filter_contact_ids}}"
								},
								{
									"key": "option",
									"value": ""
								},
								{
									"key": "payment_status",
									"value": ""
								},
								{
									"key": "search",
									"value": ""
								},
								{
									"key": "sort",
									"value": "asc",
									"disabled": true
								},
								{
									"key": "status",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get_list_po_branch",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let page = pm.environment.get(\"C-page\");",
									"",
									"if(!page){",
									"    page = 1;",
									"    pm.environment.set(\"C-page\",page);",
									"",
									"    let page_size = 50;",
									"    pm.environment.set(\"C-page_size\",page_size);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ============================= random number between min and max",
									"function getRandomInt(min, max) {",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = pm.response.json();",
									"if(pm.response.code == 200 || pm.response.code == 400){ // tạm thời handle 404 vì BE chưa push code",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let total_pages = 0, total_po = 0;",
									"    try {",
									"        total_pages = jsData.meta.total_pages;",
									"        total_po = jsData.meta.total_rows;",
									"    } catch {",
									"        console.log(\"Missing meta data\");",
									"    }",
									"    let page = pm.environment.get(\"C-page\");",
									"",
									"    let list_po, old_total_po;",
									"    switch(testcase){",
									"        case 2:",
									"            pm.environment.unset(\"C-page\");",
									"            pm.environment.unset(\"C-page_size\");",
									"            pm.test(\"Got total po! \" + total_po, function () {",
									"                pm.expect(total_po > 0).to.be.true;",
									"            });",
									"            pm.environment.set(\"C-total_po\",total_po);",
									"",
									"            for(let i in jsData.data){",
									"                if(jsData.data[i].cart_status == \"active\"){",
									"                    pm.environment.set(\"C-existed_po_code\",jsData.data[i].po_code);",
									"                    break;",
									"                }",
									"            }",
									" ",
									"            testcase++;",
									"            // testcase = 6;",
									"            pm.environment.set(\"C-testcase\",testcase);",
									"            postman.setNextRequest(\"calculate_po\"); // calculate_po",
									"            break;",
									"        case 5: case 8:",
									"            list_po = pm.environment.get(\"C-list_po\");",
									"            if(!list_po){",
									"                list_po = [];",
									"            }",
									"",
									"            for(let item in jsData.data){",
									"                list_po[list_po.length] = {",
									"                    \"po_id\":jsData.data[item].id,",
									"                    \"created_at\":jsData.data[item].created_at,",
									"                    \"po_code\":jsData.data[item].po_code,",
									"                    \"system_code\":jsData.data[item].system_code,",
									"                    \"cart_status\":jsData.data[item].cart_status,",
									"                    \"payment_status\":jsData.data[item].payment_status,",
									"                    \"items_amount\":jsData.data[item].items_amount,",
									"                    \"sub_total_amount\":jsData.data[item].sub_total_amount,",
									"                    \"paid_amount\":jsData.data[item].paid_amount,",
									"                    \"currency\":jsData.data[item].currency,",
									"                    \"contact_id\":jsData.data[item].contact_id,",
									"                    \"entry_type\":jsData.data[item].entry_type,",
									"                    \"note\":jsData.data[item].note,",
									"                    \"value_at\":jsData.data[item].value_at,",
									"                    \"due_at\":jsData.data[item].due_at,",
									"                    \"send_at\":jsData.data[item].send_at,",
									"                    \"account_id\":jsData.data[item].account_id,",
									"                    \"tax_type\":jsData.data[item].tax_type,",
									"                    \"final_status\":jsData.data[item].final_status,",
									"                    \"sales_rep_info\":jsData.data[item].sales_rep_info",
									"                }",
									"                // list_po[list_po.length] = jsData.data[item];",
									"            }",
									"            pm.environment.set(\"C-list_po\",list_po);",
									"",
									"            let configs = pm.environment.get(\"C-configs\");",
									"            if(page >= total_pages || page >= configs.limit_page){",
									"                // must clear page & page_size",
									"                pm.environment.unset(\"C-page\");",
									"                pm.environment.unset(\"C-page_size\");",
									"",
									"                let po_obj = pm.environment.get(\"C-po_obj\");",
									"                // console.log(\"po_obj: \", po_obj);",
									"                old_total_po = pm.environment.get(\"C-total_po\");",
									"",
									"                pm.test(\"Total po increase 1\", function () {",
									"                    pm.expect(total_po == old_total_po + 1).to.be.true;",
									"                });",
									"",
									"                let isFound = false;",
									"                for(let i in list_po){",
									"                    if(list_po[i].po_id == po_obj.po_id){",
									"                        isFound = true;",
									"                        console.log(\"debug: \" + JSON.stringify(list_po[i]));",
									"",
									"                        pm.test(\"po_code of po correctly! \" + po_obj.po_code, function () {",
									"                            pm.expect(po_obj.po_code == list_po[i].po_code).to.be.true;",
									"                        });",
									"",
									"                        pm.test(\"sub_total_amount of po correctly! \" + po_obj.sub_total_amount, function () {",
									"                            pm.expect(po_obj.sub_total_amount == list_po[i].sub_total_amount).to.be.true;",
									"                        });",
									"",
									"                        pm.test(\"contact_id of po correctly! \" + po_obj.contact_id, function () {",
									"                            pm.expect(po_obj.contact_id == list_po[i].contact_id).to.be.true;",
									"                        });",
									"",
									"                        pm.test(\"value_at of po correctly! \" + po_obj.value_at, function () {",
									"                            console.log(\"exp value_at: \" + po_obj.value_at);",
									"                            console.log(\"act value_at: \" + list_po[i].value_at);",
									"                            pm.expect(po_obj.value_at.substring(0,17) == list_po[i].value_at.substring(0,17)).to.be.true;",
									"                        });",
									"",
									"                        pm.test(\"due_at of po correctly! \" + po_obj.due_at, function () {",
									"                            console.log(\"exp due_at: \" + po_obj.due_at);",
									"                            console.log(\"act due_at: \" + list_po[i].due_at);",
									"                            pm.expect(po_obj.due_at.substring(0,17) == list_po[i].due_at.substring(0,17)).to.be.true;",
									"                        });",
									"",
									"                        pm.test(\"note of po correctly! \" + po_obj.note, function () {",
									"                            // console.log(\"po at i: \",list_po[i]);",
									"                            pm.expect(po_obj.note == list_po[i].note).to.be.true;",
									"                        });",
									"",
									"                        pm.test(\"tax_type of po correctly! \" + po_obj.tax_type, function () {",
									"                            pm.expect(po_obj.tax_type == list_po[i].tax_type).to.be.true;",
									"                        });",
									"",
									"                        pm.test(\"status of po correctly! \" + po_obj.cart_status, function () {",
									"                            pm.expect(po_obj.cart_status == list_po[i].cart_status).to.be.true;",
									"                        });",
									"",
									"                        // final_status",
									"                        let exp_final_status;",
									"                        if(testcase == 8){",
									"                            let ranTimeCase = pm.environment.get(\"C-ranTimeCase\");",
									"                            if(ranTimeCase == 2 || ranTimeCase == 3){",
									"                                exp_final_status = \"unsent\";",
									"                            } else {",
									"                                exp_final_status = \"overdue\"; // khả năng sẽ sai do đã thay đổi ranTimeCase => update sau",
									"                            }",
									"                        } else {",
									"                            exp_final_status = po_obj.cart_status;",
									"                        }",
									"                        pm.test(\"final_status of po is \" + exp_final_status, function () {",
									"                            console.log(\"act final_status:  \" + list_po[i].final_status);",
									"                            console.log(\"exp final_status:  \" + exp_final_status);",
									"                            pm.expect(exp_final_status == list_po[i].final_status).to.be.true;",
									"                        });",
									"                        po_obj.exp_final_status = exp_final_status;",
									"",
									"                        // sales_rep_info.id => user_id, sales_rep_info.full_name",
									"                        let userInfo = pm.environment.get(\"C-userInfo\");",
									"                        console.log(\"userInfo: \", userInfo);",
									"                        pm.test(\"sales_rep_info.id of po is \" + userInfo.id, function () {",
									"                            console.log(\"act final_status:  \" + list_po[i].sales_rep_info.id);",
									"                            pm.expect(list_po[i].sales_rep_info.id == userInfo.id).to.be.true;",
									"                        });",
									"",
									"                        pm.test(\"sales_rep_info.full_name of po is \" + userInfo.first_name, function () {",
									"                            console.log(\"act final_status:  \" + list_po[i].sales_rep_info.full_name);",
									"                            pm.expect(list_po[i].sales_rep_info.full_name == userInfo.first_name).to.be.true;",
									"                        });",
									"                        break;",
									"                    }",
									"                }",
									"",
									"                pm.test(\"Found new product\", function () {",
									"                    pm.expect(isFound).to.be.true;",
									"                });",
									"",
									"                // update total records",
									"                pm.environment.set(\"C-total_po\",total_po);",
									"                pm.environment.set(\"C-po_obj\",po_obj);",
									"                pm.environment.unset(\"C-list_po\");",
									"",
									"                postman.setNextRequest(\"get_po_detail\"); // get_po_detail",
									"            } else {",
									"                page++;",
									"                pm.environment.set(\"C-page\",page);",
									"",
									"                console.log(\"view next page (\" + page + \") to get more po on branch \" + pm.environment.get(\"C-filter_branch_id\"));",
									"                postman.setNextRequest(\"get_list_po_branch\");",
									"            }",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get list po, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/po/get-list?branch_id={{C-filter_branch_id}}&page={{C-page}}&page_size={{C-page_size}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"po",
								"get-list"
							],
							"query": [
								{
									"key": "branch_id",
									"value": "{{C-filter_branch_id}}"
								},
								{
									"key": "contact_id",
									"value": "",
									"disabled": true
								},
								{
									"key": "start_time_created_at",
									"value": "",
									"disabled": true
								},
								{
									"key": "end_time_created_at",
									"value": "",
									"disabled": true
								},
								{
									"key": "start_time_due_at",
									"value": "",
									"disabled": true
								},
								{
									"key": "end_time_due_at",
									"value": "",
									"disabled": true
								},
								{
									"key": "list_contact_ids",
									"value": "",
									"disabled": true
								},
								{
									"key": "option",
									"value": "",
									"disabled": true
								},
								{
									"key": "page",
									"value": "{{C-page}}"
								},
								{
									"key": "page_size",
									"value": "{{C-page_size}}"
								},
								{
									"key": "payment_status",
									"value": "",
									"disabled": true
								},
								{
									"key": "search",
									"value": "",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "",
									"disabled": true
								},
								{
									"key": "status",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "calculate_po",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/**",
									" * ",
									" */",
									"",
									"/**",
									" *  =============================  func randNotDupe(min, max, total)",
									" * total: số lượng random, ko dc nhỏ hơn max-min+1",
									" * return: array",
									" */",
									"function randNotDupe(min, max, total){",
									"  let arrNum = []; // new empty array",
									"  let n, p;",
									"  for (let i = 0; i < total; i++) {",
									"    do {",
									"      n = Math.floor(Math.random() * (max - min + 1)) + min;",
									"      p = arrNum.includes(n);",
									"      if(!p){",
									"        arrNum.push(n);",
									"      }",
									"    }",
									"    while(p);",
									"  }",
									"  return arrNum;",
									"}",
									"",
									"// ============================= random number between min and max",
									"function getRandomInt(min, max) {",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"",
									"// ============================= random characters",
									"function randomChars(length) {",
									"    var result           = '';",
									"    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
									"    var charactersLength = characters.length;",
									"    for ( var i = 0; i < length; i++ ) {",
									"      result += characters.charAt(Math.floor(Math.random() * charactersLength));",
									"   }",
									"   return result;",
									"}",
									"",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let today = new Date();",
									"let d30_stp = Math.floor(today.getTime()/1000) + 30*24*60*60;",
									"let d30 = new Date(d30_stp*1000);",
									"",
									"let current_timestamp = Math.floor(today.getTime()/1000);",
									"let past_date, past_due_date;",
									"",
									"let last_date_stp = Math.floor(today.getTime()/1000) - 24*60*60;",
									"let last_date = new Date(last_date_stp*1000);",
									"",
									"let next_date_stp = Math.floor(today.getTime()/1000) + 24*60*60;",
									"let next_date = new Date(next_date_stp*1000);",
									"",
									"let tax_types = [\"price_excluding_tax\", \"price_including_tax\", \"tax_not_applicable\"];",
									"let is_pre_tax = true;",
									"let tax_type;",
									"let list_tax = pm.environment.get(\"C-list_tax\");",
									"console.log(\"list_tax: \" + list_tax.length);",
									"",
									"let list_sku_use_create = pm.environment.get(\"C-list_sku_use_create\");",
									"console.log(\"list_sku_use_create: \" + list_sku_use_create.length);",
									"",
									"let discounts = [];",
									"let sub_total_amount = 0, sum_total_item_amount, created_order_at, due_at, note, email;",
									"",
									"let branch_id, contact_id;",
									"// let payment_method_list = [\"bank_transfer\",\"domestic_card\",\"credit_card\",\"ewallet_momo\",\"ewallet_zalopay\",\"ewallet_viettel\",\"ewallet_galaxypay\"];",
									"let payment_method_list = pm.environment.get(\"C-payment_method_list\");",
									"// khi chọn bank_transfer, phải gửi kèm payment_account_id (tài khoản sẽ nhận tiền khi buyer quét QR thanh toán)",
									"let po_code, payment_config = [];",
									"let status;",
									"let items = [];",
									"let default_item = [{",
									"    \"account_id\": list_sku_use_create[0].income_account_id,",
									"    \"item_amount\": list_sku_use_create[0].price,",
									"    // \"currency\": \"\",",
									"    \"name\": list_sku_use_create[0].name,",
									"    \"note\": \"[API] note for SKU \" + list_sku_use_create[0].name,",
									"    \"quantity\": 1,",
									"    \"product_id\": list_sku_use_create[0].product_id,",
									"    \"sku_id\": list_sku_use_create[0].sku_id,",
									"    \"taxes\": []",
									"}];",
									"",
									"let payment_account_id, total_net_amount;",
									"let list_bank_account = pm.environment.get(\"C-list_bank_account\");",
									"",
									"console.log(\"Happy case: \");",
									"contact_id = pm.environment.get(\"C-contact_id\");",
									"email = \"chau.lth@finan.me\";",
									"",
									"branch_id = pm.environment.get(\"C-branch_id\");",
									"po_code = \"PO-\" + randomChars(6);",
									"note = \"[API] Note for purchase_order \" + po_code;",
									"",
									"/**",
									" * Công thức tính: ",
									" */",
									"let ranTimeCase = getRandomInt(1,6);",
									"pm.environment.set(\"C-ranTimeCase\",ranTimeCase);",
									"console.log(\"ranTimeCase: \" + ranTimeCase);",
									"switch(ranTimeCase){",
									"    case 1:",
									"        // due_at + 61d < current < due_at + 91d => overdue 60-90",
									"        past_date = new Date((current_timestamp - 91*24*60*60)*1000);",
									"        past_due_date = new Date((current_timestamp - 61*24*60*60)*1000);",
									"        created_order_at = past_date.toISOString();",
									"        due_at = past_due_date.toISOString();",
									"        break;",
									"    case 2:",
									"        // created_order_at == current => ngay hiện tại, ko overdue",
									"        created_order_at = today.toISOString();",
									"        due_at = d30.toISOString();",
									"        break;",
									"    case 3:",
									"        // created_order_at > current => tương lai, ko overdue",
									"        created_order_at = next_date.toISOString();",
									"        due_at = next_date.toISOString();",
									"        break;",
									"    case 4:",
									"        // due_at + 91d < current => overdue > 90d",
									"        past_date = new Date((current_timestamp - 121*24*60*60)*1000);",
									"        past_due_date = new Date((current_timestamp - 91*24*60*60)*1000);",
									"        created_order_at = past_date.toISOString();",
									"        due_at = past_due_date.toISOString();",
									"        break;",
									"    case 5:",
									"        // due_at + 31d < current < due_at + 61d => overdue 30-60",
									"        past_date = new Date((current_timestamp - 61*24*60*60)*1000);",
									"        past_due_date = new Date((current_timestamp - 31*24*60*60)*1000);",
									"        created_order_at = past_date.toISOString();",
									"        due_at = past_due_date.toISOString();",
									"        break;",
									"    default:",
									"        // due_at < current => overdue < 30d",
									"        let ranPastDay = getRandomInt(1,29);",
									"        past_date = new Date((current_timestamp - (ranPastDay+30)*24*60*60)*1000);",
									"        past_due_date = new Date((current_timestamp - ranPastDay*24*60*60)*1000);",
									"        created_order_at = past_date.toISOString();",
									"        due_at = past_due_date.toISOString();",
									"        break;",
									"}",
									"",
									"// product / item",
									"// discount => tạm thời chỉ chọn 1 hoặc 0, dev chưa handle 2+ discount",
									"let randTotalDC = getRandomInt(0,1);",
									"",
									"let case_ = 1; //getRandomInt(1,5); // FIX CHO PURCHASE ORDER CÔNG THỨC CASE 1",
									"pm.environment.set('C-tax_case',case_);",
									"switch(case_){ // ",
									"    case 1:",
									"        /**",
									"         * price_excluding_tax, is_pre_tax = true",
									"         * 1. Giảm giá trước (tỉ trọng product amount theo giá fix hoặc %)",
									"         * 2. Tính thuế trên giá đã giàm",
									"         */",
									"        console.log(\"Create purchase_order with price_excluding_tax & is_pre_tax\");",
									"        tax_type = tax_types[0];",
									"        is_pre_tax = true;",
									"        break;",
									"    case 2:",
									"        /**",
									"         * price_including_tax, is_pre_tax = true",
									"         * 1. Tách thuế ra khỏi product amount (sau khi đã *quantity)",
									"         * 2.a. Tính discount theo tỉ trọng product amount (nếu là số fix)",
									"         * 2.b. Tính discount theo product amount (nếu là %)",
									"         * 3. Giảm discount",
									"         * 4. Tính lại thuế trên giá đã giảm",
									"         */",
									"        console.log(\"Create purchase_order with price_including_tax & is_pre_tax\");",
									"        tax_type = tax_types[1];",
									"        is_pre_tax = true;",
									"        break;",
									"    case 3:",
									"        /**",
									"         * price_excluding_tax, is_pre_tax = false",
									"         * 1. Tính thuế trước",
									"         * 2. Giảm giá (tỉ trọng product amount theo giá fix hoặc %)",
									"         */",
									"        console.log(\"Create purchase_order with price_excluding_tax & !is_pre_tax\");",
									"        tax_type = tax_types[0];",
									"        is_pre_tax = false;",
									"        break;",
									"    case 4:",
									"        /**",
									"         * price_including_tax, is_pre_tax = false",
									"         * 1. Tách thuế ra khỏi product amount (sau khi đã *quantity)",
									"         * 2.a. Tính discount theo tỉ trọng product amount (nếu là số fix)",
									"         * 2.b. Tính discount theo product amount (nếu là %)",
									"         * 3. Giảm discount",
									"         * 4. Tính lại thuế trên giá đã giảm => ko có bước này",
									"         */ ",
									"        console.log(\"Create purchase_order with price_including_tax & !is_pre_tax\");",
									"        tax_type = tax_types[1];",
									"        is_pre_tax = false;",
									"        break;",
									"    case 5:",
									"    default:",
									"        /**",
									"         * tax_not_applicable",
									"         * 1. Giảm giá (tỉ trọng product amount theo giá fix hoặc %)",
									"         */",
									"        console.log(\"Create purchase_order with tax_not_applicable\");",
									"        tax_type = tax_types[2];",
									"        break;",
									"}",
									"",
									"// ==================== fee",
									"let inspection_fees = getRandomInt(10,80)*1000;",
									"let delivery_fee_amount = getRandomInt(10,80)*1000;",
									"let other_fees = getRandomInt(10,80)*1000;",
									"let term_total_fee = inspection_fees + delivery_fee_amount + other_fees;",
									"",
									"// ================== configs",
									"let configs = pm.environment.get(\"C-configs\");",
									"",
									"let term_discount, total_discount_amount;",
									"switch (configs.sku_type){",
									"    case \"physical\": case \"imei_product\":",
									"        // KHỞI TẠO GIÁ TRỊ BAN ĐẦU CHO LINE_ITEMS",
									"        for(let i in list_sku_use_create){",
									"            let randTotalTax_i = getRandomInt(0,1); // chỉ support tối đa 1 tax cho 1 line item",
									"            let randListPos_i = randNotDupe(0,list_tax.length - 1,randTotalTax_i);",
									"            let taxes_i = [];",
									"            let quantity_i = getRandomInt(10,30);",
									"",
									"            // amount của tax chỉ là tượng trưng, server sẽ tự tính lại dựa vào tax_id (cthuc hiện tại đang sai vì chưa discount)",
									"            for(let j in randListPos_i){",
									"                taxes_i[taxes_i.length] = {",
									"                    \"account_id\": list_tax[randListPos_i[j]].account_id, // tạm thời chưa tạo ra account_id nên tạm ignore",
									"                    \"rate\": list_tax[randListPos_i[j]].rate,",
									"                    \"amount\": 0, // sẽ được tính lại",
									"                    \"name\": list_tax[randListPos_i[j]].name, // field này không cần",
									"                    \"tax_id\": list_tax[randListPos_i[j]].tax_id",
									"                };",
									"            }",
									"",
									"            let sku_info_i = {",
									"                \"product_name\": list_sku_use_create[i].product_name,",
									"                \"sku_name\": list_sku_use_create[i].sku_name,",
									"                \"sku_code\": list_sku_use_create[i].sku_code",
									"                // \"tax_info\":tax_info_i, // thêm tạm field này để có thông tin thuế trong PO, sau này BE phải trả về",
									"            }",
									"",
									"            items[items.length] = {",
									"                // \"account_id\": list_sku_use_create[i].income_account_id, // ko cần FE truyền (vì cũng ko biết) => BE sẽ đẩy vào COA giá vốn hàng bán",
									"                \"item_amount\": list_sku_use_create[i].sale_price,",
									"                \"name\": list_sku_use_create[i].sku_name,",
									"                \"note\": \"[API] note for SKU \" + list_sku_use_create[i].sku_name,",
									"                \"cost_per_line\":0, // khởi tạo",
									"                \"quantity\":quantity_i,",
									"                \"product_id\": list_sku_use_create[i].product_id,",
									"                \"sku_id\": list_sku_use_create[i].sku_id,",
									"                \"taxes\": taxes_i,",
									"                \"track_batch\":false,",
									"                \"batches\":[],",
									"                \"sku_info\":sku_info_i // thêm tạm field này để có thông tin SKU trong PO, sau này BE phải trả về",
									"            }",
									"        }",
									"",
									"        // KHỞI TẠO GIÁ TRỊ BAN ĐẦU CHO sub_total_amount",
									"        for(let i in items){",
									"            if(items[i].batches.length == 0){",
									"                sub_total_amount += items[i].item_amount*items[i].quantity;",
									"            }",
									"        }",
									"",
									"        // KHỞI TẠO GIÁ TRỊ BAN ĐẦU CHO DISCOUNT",
									"        for(let i = 0; i < randTotalDC; i++){",
									"            if(getRandomInt(0,1)){ // getRandomInt(0,1)",
									"                discounts[discounts.length] = {",
									"                    \"note\": \"\",",
									"                    \"is_rate\": true,",
									"                    \"value\": getRandomInt(10,800) / 10",
									"                }",
									"            } else {",
									"                discounts[discounts.length] = {",
									"                    \"note\": \"\",",
									"                    \"is_rate\": false,",
									"                    \"value\": Math.ceil(sub_total_amount / getRandomInt(2,9)) //getRandomInt(2,10)",
									"                }",
									"            }",
									"        }",
									"",
									"        total_discount_amount = 0;",
									"        console.log(\"sub_total_amount: \" + sub_total_amount);",
									"        // TÍNH TOÁN GIÁ TRỊ TRÊN line_items",
									"        for(let i in discounts){",
									"            if(discounts[i].is_rate){",
									"                total_discount_amount += Math.round(discounts[i].value*sub_total_amount/100);",
									"            } else {",
									"                total_discount_amount += Math.round(discounts[i].value);",
									"            }",
									"        }",
									"",
									"        // (*1) chỉ support case discount_amount - tính round cuối - line_item",
									"        sum_total_item_amount = 0;",
									"        for(let i in items){",
									"            sum_total_item_amount += items[i].item_amount*items[i].quantity;",
									"        }",
									"",
									"        term_discount = 0, term_net_total_amount = 0;",
									"        for(let i in items){",
									"            // (*1) tính toán tầng line_item",
									"            if(items[i].batches.length == 0){",
									"                items[i].total_item_amount = items[i].item_amount*items[i].quantity;",
									"                items[i].before_tax_amount = items[i].item_amount*items[i].quantity;",
									"            } else {",
									"                let total_quantity_i = 0;",
									"                for(let j in items[i].batches){",
									"                    total_quantity_i += items[i].batches[j].quantity;",
									"                }",
									"                items[i].total_item_amount = items[i].item_amount * total_quantity_i;",
									"                items[i].before_tax_amount = items[i].item_amount * total_quantity_i;",
									"            }",
									"",
									"            // (*1) discount_amount - tính round cuối - line_item",
									"            let item_total_discount_i = 0;",
									"            if(i != items.length - 1){",
									"                for(let k in discounts){",
									"                    if(discounts[k].is_rate){",
									"                        // debug",
									"                        item_total_discount_i += Math.round(items[i].before_tax_amount * discounts[k].value/100);",
									"                        // item_total_discount_i += Math.round(items[i].total_item_amount * discounts[k].value/100);",
									"                    } ",
									"                    else {",
									"                        // item_total_discount_i += Math.round(discounts[k].value * items[i].before_tax_amount/total_net_amount);",
									"                        item_total_discount_i += Math.round(discounts[k].value * items[i].total_item_amount/sum_total_item_amount);",
									"                    }",
									"                }",
									"                items[i].discount_amount = item_total_discount_i;",
									"                term_discount += item_total_discount_i;",
									"            } else {",
									"                for(let k in discounts){",
									"                    // ở đây không cần làm tròn nữa vì chỉ là hiệu của 2 số chẵn",
									"                    if(discounts[k].is_rate){ // => case này không cần tính số tổng rồi trừ lại",
									"                        // item_total_discount_i += Math.round(total_net_amount * discounts[k].value/100 - term_discount);",
									"                        item_total_discount_i += Math.round(items[i].before_tax_amount * discounts[k].value/100);",
									"                    } else {",
									"                        item_total_discount_i += Math.round(discounts[k].value - term_discount);",
									"                        // item_total_discount_i += Math.round(discounts[k].value*items[i].before_tax_amount/total_net_amount);",
									"                    }",
									"                }",
									"                items[i].discount_amount = item_total_discount_i;",
									"            }",
									"",
									"            // (*1) item_tax_amount - line_item",
									"            let total_tax_amount_i = 0;",
									"            for(let k in items[i].taxes){",
									"                for(let j in list_tax){",
									"                    if(items[i].taxes[k].tax_id == list_tax[j].tax_id){",
									"                        items[i].taxes[k].item_tax_amount = Math.round(list_tax[j].rate*(items[i].total_item_amount - items[i].discount_amount)/100);",
									"                        // // update lại amount",
									"                        // items[i].taxes[k].amount = items[i].taxes[k].item_tax_amount;",
									"                        total_tax_amount_i += Math.round(list_tax[j].rate*(items[i].total_item_amount - items[i].discount_amount)/100);",
									"                        break;",
									"                    }",
									"                }",
									"            }",
									"",
									"            // (*1) after_tax_amount - line_item",
									"            items[i].after_tax_amount = items[i].before_tax_amount + total_tax_amount_i;",
									"",
									"            // (*1) total_amount - line_item",
									"            items[i].total_amount = items[i].before_tax_amount - items[i].discount_amount + total_tax_amount_i;",
									"            term_net_total_amount += items[i].total_amount;",
									"        }",
									"        ",
									"        /**",
									"         * cost_per_line = (((SL in line * Đơn giá nhập) / Tổng tiền hàng ) * Chi phí ) / SL",
									"         * === (SL in line * Đơn giá nhập) => items[i].total_amount",
									"         * === Tổng tiền hàng => sum(items[i].total_amount) => term_net_total_amount",
									"         * === Chi phí => term_total_fee",
									"         */",
									"        for(let i in items){",
									"            items[i].cost_per_line = Math.round(items[i].total_amount / term_net_total_amount * term_total_fee / items[i].quantity + items[i].total_amount / items[i].quantity,0);",
									"        }",
									"",
									"        break;",
									"    case \"batch_product\": // cost_per_item_amount => giá vốn hàng bán",
									"        // KHỞI TẠO GIÁ TRỊ BAN ĐẦU CHO LINE_ITEMS",
									"        for(let i in list_sku_use_create){",
									"            let randTotalTax_i = getRandomInt(0,1); // chỉ support tối đa 1 tax cho 1 line item",
									"            let randListPos_i = randNotDupe(0,list_tax.length - 1,randTotalTax_i);",
									"            let taxes_i = [], tax_info_i = [];",
									"            let quantity_i = getRandomInt(1,3);",
									"",
									"            // amount của tax chỉ là tượng trưng, server sẽ tự tính lại dựa vào tax_id (cthuc hiện tại đang sai vì chưa discount)",
									"            for(let j in randListPos_i){",
									"                tax_info_i[tax_info_i.length] = {",
									"                    \"rate\": list_tax[randListPos_i[j]].rate,",
									"                    \"amount\": 0, // sẽ được tính lại",
									"                    \"name\": list_tax[randListPos_i[j]].name,",
									"                    \"tax_id\": list_tax[randListPos_i[j]].tax_id",
									"                }",
									"",
									"                taxes_i[taxes_i.length] = {",
									"                    \"account_id\": list_tax[randListPos_i[j]].account_id, // tạm thời chưa tạo ra account_id nên tạm ignore",
									"                    \"rate\": list_tax[randListPos_i[j]].rate,",
									"                    \"amount\": 0, // sẽ được tính lại",
									"                    \"name\": list_tax[randListPos_i[j]].name, // field này không cần",
									"                    \"tax_id\": list_tax[randListPos_i[j]].tax_id",
									"                };",
									"            }",
									"",
									"            let randTotalBatch_i = getRandomInt(1,5); // hiện tại BE muốn line_item sẽ có default 1 batch tương ứng với line_item, dùng trach_batch để phân biệt",
									"            // hiện tại track_batch theo số lượng batch random, sau này cần handle product_type, nếu là batch_product mới handle case track_batch true và có random số lượng batch, case physical và imeil_product thì ko",
									"            let track_batch_i = true;",
									"            // if(randTotalBatch_i == 1){",
									"            //     track_batch_i = false;",
									"            // }",
									"            // nếu sku vị trí i có batch thì setup mỗi batch cách nhau 1 ngày (NSX và HSD)",
									"            // batch code lấy sku name và tăng dần, name tương tự => có thể ko truyền để server tự sinh",
									"            // khi có batch thì sẽ lấy sum(batch.quantity), ko care item.quantity nữa",
									"            // IMPORTANT NOTE: ĐẨY TÍNH TOÁN XUỐNG TẦNG BATCH",
									"            let batches_i = [];",
									"            let production_date_i_stp = Math.floor(today.getTime()/1000) - getRandomInt(7,13)*24*60*60;",
									"            let production_date_ik_stp, production_date_ik, expiration_date_ik_stp, expiration_date_ik;",
									"            let batch_amount_ik = list_sku_use_create[i].sale_price;",
									"            for(let k = 0; k < randTotalBatch_i; k++){",
									"                let quantity_ik = getRandomInt(10,30);",
									"                // let batch_code_ik = ",
									"                if(k == 0) {",
									"                    production_date_ik_stp = production_date_i_stp;",
									"                    expiration_date_ik_stp = production_date_i_stp + 7*24*60*60;",
									"                } else {",
									"                    production_date_ik_stp = production_date_ik_stp + 24*60*60;",
									"                    expiration_date_ik_stp = expiration_date_ik_stp + 7*24*60*60;",
									"                    batch_amount_ik = Math.round(batch_amount_ik*95/100);",
									"                }",
									"                production_date_ik = new Date(production_date_ik_stp * 1000);",
									"                production_date_ik = production_date_ik.toISOString();",
									"                expiration_date_ik = new Date(expiration_date_ik_stp * 1000);",
									"                expiration_date_ik = expiration_date_ik.toISOString();",
									"                ",
									"                batches_i[batches_i.length] = {",
									"                    \"batch_code\": \"\", // có thể không truyền",
									"                    \"expiration_date\": expiration_date_ik,",
									"                    \"name\": \"[API] Lô \" + po_code + \" \" + i + \"-\" + k,",
									"                    \"item_amount\":batch_amount_ik,",
									"                    \"product_id\": list_sku_use_create[i].product_id,",
									"                    \"production_date\": production_date_ik,",
									"                    \"quantity\": quantity_ik,",
									"                    \"sku_id\": list_sku_use_create[i].sku_id",
									"                }",
									"            }",
									"",
									"            let sku_info_i = {",
									"                \"product_name\": list_sku_use_create[i].product_name,",
									"                \"sku_name\": list_sku_use_create[i].sku_name,",
									"                \"sku_code\": list_sku_use_create[i].sku_code",
									"                // \"tax_info\":tax_info_i, // thêm tạm field này để có thông tin thuế trong PO, sau này BE phải trả về",
									"            }",
									"",
									"            items[items.length] = {",
									"                // \"account_id\": list_sku_use_create[i].income_account_id, // ko cần FE truyền (vì cũng ko biết) => BE sẽ đẩy vào COA giá vốn hàng bán",
									"                \"item_amount\": list_sku_use_create[i].sale_price,",
									"                \"name\": list_sku_use_create[i].sku_name,",
									"                \"note\": \"[API] note for SKU \" + list_sku_use_create[i].sku_name,",
									"                \"quantity\":quantity_i,",
									"                \"product_id\": list_sku_use_create[i].product_id,",
									"                \"product_name\": list_sku_use_create[i].product_name,",
									"                \"sku_id\": list_sku_use_create[i].sku_id,",
									"                \"sku_name\": list_sku_use_create[i].sku_name,",
									"                \"taxes\": taxes_i,",
									"                // \"tax_info\":tax_info_i, // thêm tạm field này để có thông tin thuế trong PO, sau này BE phải trả về",
									"                \"track_batch\":track_batch_i,",
									"                \"batches\":batches_i,",
									"                \"sku_info\":sku_info_i // thêm tạm field này để có thông tin SKU trong PO, sau này BE phải trả về",
									"            }",
									"        }",
									"",
									"        // KHỞI TẠO GIÁ TRỊ BAN ĐẦU CHO sub_total_amount",
									"        for(let i in items){",
									"            if(items[i].batches.length == 0){",
									"                sub_total_amount += items[i].item_amount*items[i].quantity;",
									"            } else {",
									"                let total_quantity_i = 0;",
									"                for(let j in items[i].batches){",
									"                    sub_total_amount += items[i].batches[j].item_amount * items[i].batches[j].quantity;",
									"                    total_quantity_i += items[i].batches[j].quantity;",
									"                }",
									"                // update thêm bên ngoài",
									"                items[i].quantity = total_quantity_i;",
									"            }",
									"        }",
									"",
									"        // KHỞI TẠO GIÁ TRỊ BAN ĐẦU CHO DISCOUNT",
									"        for(let i = 0; i < randTotalDC; i++){",
									"            if(getRandomInt(0,1)){ // getRandomInt(0,1)",
									"                discounts[discounts.length] = {",
									"                    \"note\": \"\",",
									"                    \"is_rate\": true,",
									"                    \"value\": getRandomInt(10,800) / 10",
									"                }",
									"            } else {",
									"                discounts[discounts.length] = {",
									"                    \"note\": \"\",",
									"                    \"is_rate\": false,",
									"                    \"value\": Math.ceil(sub_total_amount / getRandomInt(2,9)) //getRandomInt(2,10)",
									"                }",
									"            }",
									"        }",
									"",
									"        total_discount_amount = 0;",
									"        console.log(\"sub_total_amount: \" + sub_total_amount);",
									"        // TÍNH TOÁN GIÁ TRỊ TRÊN batches",
									"        for(let i in discounts){",
									"            if(discounts[i].is_rate){",
									"                total_discount_amount += Math.round(discounts[i].value*sub_total_amount/100);",
									"            } else {",
									"                total_discount_amount += Math.round(discounts[i].value);",
									"            }",
									"        }",
									"",
									"        // (*1) chỉ support case discount_amount - tính round cuối - line_item",
									"        // sum_total_item_amount = 0;",
									"        // for(let i in items){",
									"        //     sum_total_item_amount += items[i].item_amount*items[i].quantity;",
									"        // }",
									"        // (*2) chỉ support case discount_amount - tính round cuối - batch",
									"        sum_total_item_amount = 0;",
									"        for(let i in items){",
									"            for(let j in items[i].batches){",
									"                sum_total_item_amount += items[i].batches[j].item_amount*items[i].batches[j].quantity;",
									"            }",
									"        }",
									"",
									"        term_discount = 0, term_net_total_amount = 0;",
									"        for(let i in items){",
									"            // (*1) tính toán tầng line_item",
									"            // if(items[i].batches.length == 0){",
									"            //     items[i].total_item_amount = items[i].item_amount*items[i].quantity;",
									"            //     items[i].before_tax_amount = items[i].item_amount*items[i].quantity;",
									"            // } else {",
									"            //     let total_quantity_i = 0;",
									"            //     for(let j in items[i].batches){",
									"            //         total_quantity_i += items[i].batches[j].quantity;",
									"            //     }",
									"            //     items[i].total_item_amount = items[i].item_amount * total_quantity_i;",
									"            //     items[i].before_tax_amount = items[i].item_amount * total_quantity_i;",
									"            // }",
									"            // (*2) tính toán tầng batches => bắt buộc batch không được rỗng",
									"            for(let j in items[i].batches){",
									"                items[i].batches[j].total_item_amount = items[i].batches[j].item_amount * items[i].batches[j].quantity;",
									"                items[i].batches[j].before_tax_amount = items[i].batches[j].item_amount * items[i].batches[j].quantity;",
									"            }",
									"",
									"            // (*1) discount_amount - ko tính round cuối - line_item",
									"            // let discount_i = 0;",
									"            // for(let j in discounts){",
									"            //     if(discounts[j].is_rate){",
									"            //         discount_i += Math.round(discounts[j].value*items[i].total_item_amount/100);",
									"            //     } else {",
									"            //         discount_i += Math.round(discounts[j].value*items[i].total_item_amount/sub_total_amount);",
									"            //     }",
									"            // }",
									"            // items[i].discount_amount = discount_i;",
									"            // (*2) discount_amount - ko tính round cuối - batch",
									"            // for(let k in items[i].batches){",
									"            //     let discount_ik = 0;",
									"            //     for(let j in discounts){ // discount sẽ chỉ có 1",
									"            //         if(discounts[j].is_rate){",
									"            //             discount_ik += Math.round(discounts[j].value*items[i].batches[k].total_item_amount/100);",
									"            //         } else {",
									"            //             discount_ik += Math.round(discounts[j].value*items[i].batches[k].total_item_amount/sub_total_amount);",
									"            //         }",
									"            //     }",
									"            //     items[i].batches[k].discount_amount = discount_ik;",
									"            // }",
									"",
									"            // (*1) discount_amount - tính round cuối - line_item",
									"            // let item_total_discount_i = 0;",
									"            // if(i != items.length - 1){",
									"            //     for(let k in discounts){",
									"            //         if(discounts[k].is_rate){",
									"            //             // debug",
									"            //             item_total_discount_i += Math.round(items[i].before_tax_amount * discounts[k].value/100);",
									"            //             // item_total_discount_i += Math.round(items[i].total_item_amount * discounts[k].value/100);",
									"            //         } ",
									"            //         else {",
									"            //             // item_total_discount_i += Math.round(discounts[k].value * items[i].before_tax_amount/total_net_amount);",
									"            //             item_total_discount_i += Math.round(discounts[k].value * items[i].total_item_amount/sum_total_item_amount);",
									"            //         }",
									"            //     }",
									"            //     items[i].discount_amount = item_total_discount_i;",
									"            //     term_discount += item_total_discount_i;",
									"            // } else {",
									"            //     for(let k in discounts){",
									"            //         // ở đây không cần làm tròn nữa vì chỉ là hiệu của 2 số chẵn",
									"            //         if(discounts[k].is_rate){ // => case này không cần tính số tổng rồi trừ lại",
									"            //             // item_total_discount_i += Math.round(total_net_amount * discounts[k].value/100 - term_discount);",
									"            //             item_total_discount_i += Math.round(items[i].before_tax_amount * discounts[k].value/100);",
									"            //         } else {",
									"            //             item_total_discount_i += Math.round(discounts[k].value - term_discount);",
									"            //             // item_total_discount_i += Math.round(discounts[k].value*items[i].before_tax_amount/total_net_amount);",
									"            //         }",
									"            //     }",
									"            //     items[i].discount_amount = item_total_discount_i;",
									"            // }",
									"            // (*2) discount_amount - tính round cuối - batch",
									"            for(let l in items[i].batches){",
									"                let item_total_discount_i = 0;",
									"                if(i == (items.length - 1) && l == (items[i].batches.length - 1)){",
									"                    console.log(\"term_discount: \" + term_discount);",
									"                    for(let k in discounts){",
									"                        // ở đây không cần làm tròn nữa vì chỉ là hiệu của 2 số chẵn",
									"                        if(discounts[k].is_rate){ // => case này không cần tính số tổng rồi trừ lại",
									"                            // item_total_discount_i += Math.round(total_net_amount * discounts[k].value/100 - term_discount);",
									"                            item_total_discount_i += Math.round(items[i].batches[l].before_tax_amount * discounts[k].value/100);",
									"                        } else {",
									"                            console.log(\"discounts[k].value: \" + discounts[k].value);",
									"                            item_total_discount_i += Math.round(discounts[k].value - term_discount);",
									"                            // item_total_discount_i += Math.round(discounts[k].value*items[i].before_tax_amount/total_net_amount);",
									"                        }",
									"                    }",
									"                    items[i].batches[l].discount_amount = item_total_discount_i;",
									"                } else {",
									"                    for(let k in discounts){",
									"                        if(discounts[k].is_rate){",
									"                            // debug",
									"                            item_total_discount_i += Math.round(items[i].batches[l].before_tax_amount * discounts[k].value/100);",
									"                            // item_total_discount_i += Math.round(items[i].total_item_amount * discounts[k].value/100);",
									"                        } ",
									"                        else {",
									"                            // item_total_discount_i += Math.round(discounts[k].value * items[i].before_tax_amount/total_net_amount);",
									"                            item_total_discount_i += Math.round(discounts[k].value * items[i].batches[l].total_item_amount/sum_total_item_amount);",
									"                        }",
									"                    }",
									"                    items[i].batches[l].discount_amount = item_total_discount_i;",
									"                    term_discount += item_total_discount_i;",
									"                }",
									"            }",
									"",
									"            // (*1) item_tax_amount - line_item",
									"            // let total_tax_amount_i = 0;",
									"            // for(let k in items[i].taxes){",
									"            //     for(let j in list_tax){",
									"            //         if(items[i].taxes[k].tax_id == list_tax[j].tax_id){",
									"            //             items[i].taxes[k].item_tax_amount = Math.round(list_tax[j].rate*(items[i].total_item_amount - items[i].discount_amount)/100);",
									"            //             // // update lại amount",
									"            //             // items[i].taxes[k].amount = items[i].taxes[k].item_tax_amount;",
									"            //             total_tax_amount_i += Math.round(list_tax[j].rate*(items[i].total_item_amount - items[i].discount_amount)/100);",
									"            //             break;",
									"            //         }",
									"            //     }",
									"            // }",
									"",
									"            // (*1) after_tax_amount - line_item",
									"            // items[i].after_tax_amount = items[i].before_tax_amount + total_tax_amount_i;",
									"",
									"            // (*1) total_amount - line_item",
									"            // items[i].total_amount = items[i].before_tax_amount - items[i].discount_amount + total_tax_amount_i;",
									"",
									"            // (*2) item_tax_amount - batch",
									"            for(let m in items[i].batches){",
									"                let total_tax_amount_im = 0;",
									"                for(let k in items[i].taxes){ // chỉ có 1 tax, nhiều hơn 1 sẽ có khả năng lỗi",
									"                    for(let j in list_tax){",
									"                        if(items[i].taxes[k].tax_id == list_tax[j].tax_id){",
									"                            items[i].batches[m].item_tax_amount = Math.round(list_tax[j].rate*(items[i].batches[m].total_item_amount - items[i].batches[m].discount_amount)/100);",
									"                            // // update lại amount",
									"                            // items[i].taxes[k].amount = items[i].taxes[k].item_tax_amount;",
									"                            total_tax_amount_im += Math.round(list_tax[j].rate*(items[i].batches[m].total_item_amount - items[i].batches[m].discount_amount)/100);",
									"                            break;",
									"                        }",
									"                    }",
									"                }",
									"",
									"                // (*2) after_tax_amount - batch",
									"                items[i].batches[m].after_tax_amount = items[i].batches[m].before_tax_amount + total_tax_amount_im;",
									"",
									"                // (*2) total_amount - batch",
									"                items[i].batches[m].total_amount = items[i].batches[m].before_tax_amount - items[i].batches[m].discount_amount + total_tax_amount_im;",
									"                term_net_total_amount += items[i].batches[m].total_amount;",
									"            }",
									"        }",
									"",
									"        /**",
									"         * cost_per_line = (((SL in line * Đơn giá nhập) / Tổng tiền hàng ) * Chi phí ) / SL",
									"         * === (SL in line * Đơn giá nhập) => items[i].total_amount",
									"         * === Tổng tiền hàng => sum(items[i].total_amount) => term_net_total_amount",
									"         * === Chi phí => term_total_fee",
									"         */",
									"        for(let i in items){",
									"            for(let j in items[i].batches){",
									"                items[i].batches[j].cost_per_line = Math.round(items[i].batches[j].total_amount / term_net_total_amount * term_total_fee / items[i].batches[j].quantity + items[i].batches[j].total_amount / items[i].batches[j].quantity,0);",
									"            }",
									"        }",
									"        break;",
									"    case \"mix\":",
									"    default:",
									"        break;",
									"}",
									"",
									"// payment_config",
									"for(let i in payment_method_list){",
									"    payment_config[payment_config.length] = payment_method_list[i].id;",
									"}",
									"// payment_account_id = list_bank_account[getRandomInt(0,list_bank_account.length - 1)].account_id; => chỉ có với invoice",
									"",
									"let payload = {",
									"    // \"branch_id\": branch_id, => để trang tạo handle",
									"    // \"cart_status\": status, // draft, saved => ko care",
									"    \"contact_id\": contact_id,",
									"    \"currency\": \"vnd\",",
									"    \"discounts\": discounts,",
									"    \"due_at\": due_at,",
									"    \"email\": email,",
									"    \"items\": items,",
									"    \"po_code\": po_code,",
									"    // \"reference_code\": \"string\", // => mã tham chiếu",
									"    // \"custom_field\": \"string\", // tạm thời ko cần quan tâm",
									"    // \"ops_status\": \"string\", // sẽ có bộ status cho po, khi tạo ko cần quan tâm",
									"    // \"po_pic_id\": \"string\", // sẽ chọn dc user follow PO => phase sau",
									"    // \"po_pic_info\": \"string\", // sẽ chọn dc user follow PO => phase sau handle việc chọn nhân viên follow PO",
									"    \"po_type\": \"inbound\", // inbound là nhập (po), inbound là xuất (chưa có) ",
									"    \"payment_config\":payment_config,",
									"    \"tax_type\": tax_type, // cần confirm lại với PO",
									"    \"is_pre_tax\":is_pre_tax, // true là trước thuế, false là sau thuế => cần confirm lại với PO",
									"    \"value_at\": created_order_at,",
									"    // \"note\": \"string\", // user nhập => field này lúc create sẽ truyền",
									"    // \"short_des\": \"string\", // system gen",
									"    \"inspection_fees\": inspection_fees, // phí ...",
									"    \"delivery_fee_amount\": delivery_fee_amount, // phí ...",
									"    \"other_fees\": other_fees, // phí ...",
									"    \"warehouse_id\": null // cần discuss lại",
									"}",
									"",
									"console.log(\"payload: \",payload);",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));",
									"pm.environment.set(\"C-po_obj\",payload);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    // console.log(\"debug: \", jsData.data);",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let configs = pm.environment.get(\"C-configs\");    ",
									"",
									"    pm.test(\"System code is 102001\", function () {",
									"        pm.expect(jsData.code).to.eql(102001);",
									"    });",
									"",
									"    let po_obj = pm.environment.get(\"C-po_obj\");",
									"    let expected_items = [];",
									"    let exp_discount_amount = 0, exp_items_amount = 0, exp_total_amount = 0, exp_tax_amount = 0;",
									"    switch(configs.sku_type){",
									"        case \"batch_product\": case \"mix\":",
									"            // (*2) update thông tin cho tax - batch",
									"            for(let i in po_obj.items){",
									"                let list_tax_i = [];",
									"                let item_tax_amount_i = 0; // do hiện tại chỉ có 1 tax",
									"                for(let j in po_obj.items[i].taxes){",
									"                    list_tax_i[list_tax_i.length] = {",
									"                        \"tax_id\": po_obj.items[i].taxes[j].tax_id,",
									"                        \"rate\": po_obj.items[i].taxes[j].rate,",
									"                        \"account_id\": po_obj.items[i].taxes[j].account_id",
									"                    }         ",
									"                }",
									"",
									"                let list_batch_i = [];",
									"                let item_discount_amount_i = 0, total_item_amount_i = 0, total_amount_i = 0;",
									"                for(let k in po_obj.items[i].batches){",
									"                    // item_tax_amount",
									"                    if(\"item_tax_amount\" in po_obj.items[i].batches[k]){",
									"                        item_tax_amount_i += po_obj.items[i].batches[k].item_tax_amount;",
									"                    }",
									"                    item_discount_amount_i += po_obj.items[i].batches[k].discount_amount;",
									"                    total_item_amount_i += po_obj.items[i].batches[k].total_item_amount;",
									"                    total_amount_i += po_obj.items[i].batches[k].total_amount;",
									"",
									"                    // batch",
									"                    if(\"item_tax_amount\" in po_obj.items[i].batches[k]){",
									"                        list_batch_i[list_batch_i.length] = {",
									"                            \"name\":po_obj.items[i].batches[k].name,",
									"                            \"sku_id\":po_obj.items[i].batches[k].sku_id,",
									"                            \"product_id\":po_obj.items[i].batches[k].product_id,",
									"                            \"quantity\":po_obj.items[i].batches[k].quantity,",
									"                            \"item_amount\":po_obj.items[i].batches[k].item_amount,",
									"                            \"cost_per_line\":po_obj.items[i].batches[k].cost_per_line,",
									"                            // \"production_date\":po_obj.items[i].batches[k].production_date,",
									"                            // \"expiration_date\":po_obj.items[i].batches[k].expiration_date,",
									"                            \"total_item_amount\":po_obj.items[i].batches[k].total_item_amount,",
									"                            \"total_line_item_amount\":po_obj.items[i].batches[k].item_amount*po_obj.items[i].batches[k].quantity,",
									"                            \"discount_amount\":po_obj.items[i].batches[k].discount_amount,",
									"                            \"item_tax_amount\":po_obj.items[i].batches[k].item_tax_amount,",
									"                            \"total_amount\":po_obj.items[i].batches[k].total_amount",
									"                        }",
									"                    } else {",
									"                        list_batch_i[list_batch_i.length] = {",
									"                            \"name\":po_obj.items[i].batches[k].name,",
									"                            \"sku_id\":po_obj.items[i].batches[k].sku_id,",
									"                            \"product_id\":po_obj.items[i].batches[k].product_id,",
									"                            \"quantity\":po_obj.items[i].batches[k].quantity,",
									"                            \"item_amount\":po_obj.items[i].batches[k].item_amount,",
									"                            \"cost_per_line\":po_obj.items[i].batches[k].cost_per_line,",
									"                            // \"production_date\":po_obj.items[i].batches[k].production_date,",
									"                            // \"expiration_date\":po_obj.items[i].batches[k].expiration_date,",
									"                            \"total_item_amount\":po_obj.items[i].batches[k].total_item_amount,",
									"                            \"total_line_item_amount\":po_obj.items[i].batches[k].item_amount*po_obj.items[i].batches[k].quantity,",
									"                            \"discount_amount\":po_obj.items[i].batches[k].discount_amount,",
									"                            \"item_tax_amount\":0,",
									"                            \"total_amount\":po_obj.items[i].batches[k].total_amount",
									"                        }",
									"                    }",
									"                }",
									"                ",
									"                ",
									"                // item",
									"                expected_items[expected_items.length] = {",
									"                    // \"id\": \"00000000-0000-0000-0000-000000000000\",",
									"                    \"product_id\": po_obj.items[i].product_id,",
									"                    \"sku_id\": po_obj.items[i].sku_id,",
									"                    // \"item_amount\": po_obj.items[i].item_amount, // => ko cần care vì tính ờ batch",
									"                    // \"discount_amount\": po_obj.items[i].discount_amount,",
									"                    \"item_tax_amount\": item_tax_amount_i,",
									"                    // \"before_tax_amount\": po_obj.items[i].before_tax_amount,",
									"                    // \"after_tax_amount\": po_obj.items[i].after_tax_amount,",
									"                    // \"total_item_amount\": po_obj.items[i].total_item_amount,",
									"                    // \"total_line_item_amount\":po_obj.items[i].quantity*po_obj.items[i].item_amount, // => ko cần care vì tính ờ batch",
									"                    \"currency\": \"\",",
									"                    \"quantity\": po_obj.items[i].quantity,",
									"                    \"account_id\": po_obj.items[i].account_id,",
									"                    \"note\": po_obj.items[i].note,",
									"                    \"taxes\": list_tax_i,",
									"                    \"batches\": list_batch_i",
									"                }",
									"",
									"                exp_tax_amount += item_tax_amount_i;",
									"                exp_discount_amount += item_discount_amount_i;",
									"                exp_items_amount += total_item_amount_i;",
									"                exp_total_amount += total_amount_i;",
									"            }",
									"            break;",
									"        case \"physical\": case \"imei_product\":",
									"        default:",
									"            // (*1) update thông tin cho tax - line_item",
									"            for(let i in po_obj.items){",
									"                let list_tax_i = [];",
									"                let item_tax_amount = 0; // do hiện tại chỉ có 1 tax",
									"                for(let j in po_obj.items[i].taxes){",
									"                    if(\"item_tax_amount\" in po_obj.items[i].taxes[j]){",
									"                        list_tax_i[list_tax_i.length] = {",
									"                            \"tax_id\": po_obj.items[i].taxes[j].tax_id,",
									"                            \"rate\": po_obj.items[i].taxes[j].rate,",
									"                            // \"amount\": po_obj.items[i].taxes[j].item_tax_amount,",
									"                            \"account_id\": po_obj.items[i].taxes[j].account_id",
									"                        }",
									"                        item_tax_amount += po_obj.items[i].taxes[j].item_tax_amount;",
									"                    } else {",
									"                        list_tax_i[list_tax_i.length] = {",
									"                            \"tax_id\": po_obj.items[i].taxes[j].tax_id,",
									"                            \"rate\": po_obj.items[i].taxes[j].rate,",
									"                            // \"amount\": po_obj.items[i].taxes[j].amount,",
									"                            \"account_id\": po_obj.items[i].taxes[j].account_id",
									"                        }",
									"                        item_tax_amount += po_obj.items[i].taxes[j].amount;",
									"                    }         ",
									"                }",
									"                ",
									"                expected_items[expected_items.length] = {",
									"                    // \"id\": \"00000000-0000-0000-0000-000000000000\",",
									"                    \"product_id\": po_obj.items[i].product_id,",
									"                    \"sku_id\": po_obj.items[i].sku_id,",
									"                    \"item_amount\": po_obj.items[i].item_amount,",
									"                    \"cost_per_line\":po_obj.items[i].cost_per_line, // cần tính cho chi chí giá vốn hàng bán => giá net",
									"                    // \"discount_amount\": po_obj.items[i].discount_amount,",
									"                    \"item_tax_amount\": item_tax_amount,",
									"                    \"before_tax_amount\": po_obj.items[i].before_tax_amount,",
									"                    // \"after_tax_amount\": po_obj.items[i].after_tax_amount,",
									"                    // \"total_item_amount\": po_obj.items[i].total_item_amount,",
									"                    \"total_line_item_amount\":po_obj.items[i].quantity*po_obj.items[i].item_amount,",
									"                    \"currency\": \"\",",
									"                    \"quantity\": po_obj.items[i].quantity,",
									"                    \"account_id\": po_obj.items[i].account_id,",
									"                    \"note\": po_obj.items[i].note,",
									"                    \"taxes\": list_tax_i",
									"                }",
									"",
									"                // exp_tax_amount += po_obj.items[i].after_tax_amount;",
									"                exp_tax_amount += item_tax_amount;",
									"                exp_discount_amount += po_obj.items[i].discount_amount;",
									"                exp_items_amount += po_obj.items[i].total_item_amount;",
									"                exp_total_amount += po_obj.items[i].total_amount;",
									"            }",
									"            break;",
									"    }",
									"    po_obj.exp_tax_amount = exp_tax_amount;",
									"",
									"    // exp_total_fees",
									"    let exp_total_fees = po_obj.inspection_fees + po_obj.delivery_fee_amount + po_obj.other_fees;",
									"    po_obj.exp_total_fees = exp_total_fees;",
									"    // exp_total_amount nếu có phí",
									"    exp_total_amount += exp_total_fees;",
									"",
									"    // is_pre_tax",
									"    pm.test(\"is_pre_tax of po correctly! \", function () {",
									"        pm.expect(jsData.data.is_pre_tax == po_obj.is_pre_tax).to.be.true;",
									"    });",
									"",
									"    // tax_type",
									"    pm.test(\"tax_type of po correctly! \", function () {",
									"        pm.expect(jsData.data.tax_type == po_obj.tax_type).to.be.true;",
									"    });",
									"    ",
									"    // check discounts obj",
									"    pm.test(\"discounts of po correctly! \", function () {",
									"        // console.log(\"exp discounts: \",po_obj.discounts);",
									"        // console.log(\"act discounts: \",jsData.data.discounts);",
									"        pm.expect(JSON.stringify(jsData.data.discounts) == JSON.stringify(po_obj.discounts)).to.be.true;",
									"    });",
									"",
									"    let act_items = [];",
									"    switch(configs.sku_type){",
									"        case \"batch_product\": case \"mix\":",
									"            // console.log(\"debug:\",jsData.data);",
									"            for(let i in jsData.data.items){",
									"                let list_tax_i = [];",
									"                let item_tax_amount = 0; // do hiện tại chỉ có 1 tax",
									"                for(let j in jsData.data.items[i].taxes){",
									"                    list_tax_i[list_tax_i.length] = {",
									"                        \"tax_id\": jsData.data.items[i].taxes[j].tax_id,",
									"                        \"rate\": jsData.data.items[i].taxes[j].rate,",
									"                        \"account_id\": jsData.data.items[i].taxes[j].account_id",
									"                    }",
									"                    item_tax_amount += jsData.data.items[i].taxes[j].amount;",
									"                }",
									"",
									"                let list_batch_i = [];",
									"                for(let k in jsData.data.items[i].batches){",
									"                    list_batch_i[list_batch_i.length] = {",
									"                        \"name\":jsData.data.items[i].batches[k].name,",
									"                        \"sku_id\":jsData.data.items[i].batches[k].sku_id,",
									"                        \"product_id\":jsData.data.items[i].batches[k].product_id,",
									"                        \"quantity\":jsData.data.items[i].batches[k].quantity,",
									"                        \"item_amount\":jsData.data.items[i].batches[k].item_amount,",
									"                        \"cost_per_line\":jsData.data.items[i].batches[k].cost_per_item_amount,",
									"                        // \"production_date\":jsData.data.items[i].batches[k].production_date,",
									"                        // \"expiration_date\":jsData.data.items[i].batches[k].expiration_date,",
									"                        \"total_item_amount\":jsData.data.items[i].batches[k].total_item_amount,",
									"                        \"total_line_item_amount\":jsData.data.items[i].batches[k].total_line_item_amount,",
									"                        \"discount_amount\":jsData.data.items[i].batches[k].discount_amount,",
									"                        \"item_tax_amount\":jsData.data.items[i].batches[k].tax_amount,",
									"                        \"total_amount\":jsData.data.items[i].batches[k].after_tax_amount",
									"                    }",
									"                }",
									"",
									"                act_items[act_items.length] = {",
									"                    // \"id\": \"00000000-0000-0000-0000-000000000000\",",
									"                    \"product_id\": jsData.data.items[i].product_id,",
									"                    \"sku_id\": jsData.data.items[i].sku_id,",
									"                    // \"item_amount\": jsData.data.items[i].item_amount,",
									"                    // \"discount_amount\": jsData.data.items[i].discount_amount,",
									"                    \"item_tax_amount\": item_tax_amount, // => tạm không care",
									"                    // \"before_tax_amount\": jsData.data.items[i].before_tax_amount,",
									"                    // \"after_tax_amount\": jsData.data.items[i].after_tax_amount,",
									"                    // \"total_item_amount\": jsData.data.items[i].total_item_amount,",
									"                    // \"total_line_item_amount\":jsData.data.items[i].total_line_item_amount,",
									"                    \"currency\": \"\",",
									"                    \"quantity\": jsData.data.items[i].quantity,",
									"                    // \"account_id\": jsData.data.items[i].account_id,",
									"                    \"note\": jsData.data.items[i].note,",
									"                    \"taxes\": list_tax_i,",
									"                    \"batches\": list_batch_i",
									"                }",
									"            }",
									"            break;",
									"        case \"physical\": case \"imei_product\":",
									"        default:",
									"            for(let i in jsData.data.items){",
									"                let list_tax_i = [];",
									"                let item_tax_amount = 0; // do hiện tại chỉ có 1 tax",
									"                for(let j in jsData.data.items[i].taxes){",
									"                    list_tax_i[list_tax_i.length] = {",
									"                        \"tax_id\": jsData.data.items[i].taxes[j].tax_id,",
									"                        \"rate\": jsData.data.items[i].taxes[j].rate,",
									"                        \"account_id\": jsData.data.items[i].taxes[j].account_id",
									"                    }",
									"                    item_tax_amount += jsData.data.items[i].taxes[j].amount;",
									"                }",
									"",
									"                act_items[act_items.length] = {",
									"                    // \"id\": \"00000000-0000-0000-0000-000000000000\",",
									"                    \"product_id\": jsData.data.items[i].product_id,",
									"                    \"sku_id\": jsData.data.items[i].sku_id,",
									"                    \"item_amount\": jsData.data.items[i].item_amount,",
									"                    \"cost_per_line\": jsData.data.items[i].cost_per_item_amount,",
									"                    // \"discount_amount\": jsData.data.items[i].discount_amount,",
									"                    \"item_tax_amount\": item_tax_amount,",
									"                    \"before_tax_amount\": jsData.data.items[i].before_tax_amount,",
									"                    // \"after_tax_amount\": jsData.data.items[i].after_tax_amount,",
									"                    // \"total_item_amount\": jsData.data.items[i].total_item_amount,",
									"                    \"total_line_item_amount\":jsData.data.items[i].total_line_item_amount,",
									"                    \"currency\": \"\",",
									"                    \"quantity\": jsData.data.items[i].quantity,",
									"                    // \"account_id\": jsData.data.items[i].account_id,",
									"                    \"note\": jsData.data.items[i].note,",
									"                    \"taxes\": list_tax_i",
									"                }",
									"            }",
									"            break;",
									"    }",
									"    // check items obj",
									"    pm.test(\"items of po correctly! \", function () {",
									"        console.log(\"exp items: \" + JSON.stringify(expected_items));",
									"        console.log(\"act items: \" + JSON.stringify(act_items));",
									"        pm.expect(JSON.stringify(act_items) == JSON.stringify(expected_items)).to.be.true;",
									"    });",
									"",
									"    // check discount amount",
									"    pm.test(\"discount_amount of po correctly! \", function () {",
									"        console.log(\"exp discount_amount: \" + exp_discount_amount);",
									"        console.log(\"act discount_amount: \" + jsData.data.discount_amount);",
									"        pm.expect(jsData.data.discount_amount == exp_discount_amount).to.be.true;",
									"    });",
									"    po_obj.exp_discount_amount = exp_discount_amount;",
									"",
									"    // check total item amount",
									"    pm.test(\"total_amount of po correctly! \", function () {",
									"        console.log(\"exp total_amount: \" + exp_total_amount);",
									"        console.log(\"act total_amount: \" + jsData.data.total_amount);",
									"        pm.expect(jsData.data.total_amount == exp_total_amount).to.be.true;",
									"    });",
									"    po_obj.exp_total_amount = exp_total_amount;",
									"",
									"    // check sub_total_amount",
									"    pm.test(\"sub_total_amount of po correctly! \", function () {",
									"        console.log(\"exp sub_total_amount: \" + exp_items_amount);",
									"        console.log(\"act sub_total_amount: \" + jsData.data.sub_total_amount);",
									"        pm.expect(jsData.data.sub_total_amount == exp_items_amount).to.be.true;",
									"    });",
									"    po_obj.sub_total_amount = exp_items_amount;",
									"    // po_obj.exp_items_amount = exp_items_amount;",
									"",
									"    pm.environment.unset(\"C-tax_case\");",
									"    testcase++;",
									"    pm.environment.set(\"C-testcase\",testcase);",
									"    pm.environment.set(\"C-po_obj\",po_obj);",
									"    postman.setNextRequest(\"create_po\"); // create_po",
									"} else {",
									"    console.log(\"Can't call calculate po, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/po/calculate",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"po",
								"calculate"
							]
						}
					},
					"response": []
				},
				{
					"name": "create_po",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// ============================= random number between min and max",
									"function getRandomInt(min, max) {",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"",
									"// ============================= random characters",
									"function randomChars(length) {",
									"    var result           = '';",
									"    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
									"    var charactersLength = characters.length;",
									"    for ( var i = 0; i < length; i++ ) {",
									"      result += characters.charAt(Math.floor(Math.random() * charactersLength));",
									"   }",
									"   return result;",
									"}",
									"",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"// ====================== configs",
									"let configs = pm.environment.get(\"C-configs\");",
									"let po_obj = pm.environment.get(\"C-po_obj\");",
									"",
									"// add more info",
									"po_obj.branch_id = pm.environment.get(\"C-branch_id\");",
									"if(configs.create_po_status != \"completed\"){",
									"    po_obj.cart_status = configs.create_po_status;",
									"} else {",
									"    po_obj.cart_status = \"saved\";",
									"}",
									"",
									"po_obj.attachment_url = []; // string",
									"po_obj.note = \"[API] Note for po \" + po_obj.po_code;",
									"po_obj.contact_id = pm.environment.get(\"C-contact_id\");",
									"// po_obj.po_pic_id = \"\";",
									"// po_obj.reference_code = \"\";",
									"// po_obj.ops_status = \"\";",
									"",
									"console.log(\"payload: \",po_obj);",
									"pm.environment.set(\"C-payload\",JSON.stringify(po_obj));",
									"pm.environment.set(\"C-po_obj\",po_obj);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let configs = pm.environment.get(\"C-configs\");",
									"    console.log(\"debug: \", jsData.data);",
									"",
									"    pm.test(\"System code is 102001\", function () {",
									"        pm.expect(jsData.code).to.eql(102001);",
									"    });",
									"",
									"    let po_obj = pm.environment.get(\"C-po_obj\");",
									"    let expected_items = [];",
									"",
									"    po_obj.po_id = jsData.data.id;",
									"    po_obj.id = jsData.data.id;",
									"    po_obj.system_code = jsData.data.system_code;",
									"",
									"    // tax_type",
									"    pm.test(\"tax_type of po correctly! \", function () {",
									"        pm.expect(jsData.data.tax_type == po_obj.tax_type).to.be.true;",
									"    });",
									"",
									"    po_obj.expected_items = expected_items;",
									"",
									"    // check discount amount",
									"    pm.test(\"discount_amount of po correctly! \", function () {",
									"        console.log(\"exp discount_amount: \" + po_obj.exp_discount_amount);",
									"        console.log(\"act discount_amount: \" + jsData.data.discount_amount);",
									"        pm.expect(jsData.data.discount_amount == po_obj.exp_discount_amount).to.be.true;",
									"    });",
									"",
									"    // sub_total_amount",
									"    pm.test(\"sub_total_amount of po correctly! \", function () {",
									"        console.log(\"exp sub_total_amount: \" + po_obj.sub_total_amount);",
									"        console.log(\"act sub_total_amount: \" + jsData.data.items_amount);",
									"        pm.expect(jsData.data.sub_total_amount == po_obj.sub_total_amount).to.be.true;",
									"    });",
									"",
									"    // check total item amount",
									"    pm.test(\"total_amount of po correctly! \", function () {",
									"        console.log(\"exp total_amount: \" + po_obj.exp_total_amount);",
									"        console.log(\"act total_amount: \" + jsData.data.total_amount);",
									"        pm.expect(jsData.data.total_amount == po_obj.exp_total_amount).to.be.true;",
									"    });",
									"",
									"    // payment_due_amount => ko cần check ở create",
									"    // pm.test(\"total_amount, payment_due_amount of po correctly! \", function () {",
									"    //     pm.expect(jsData.data.payment_due_amount == po_obj.exp_total_amount).to.be.true;",
									"    // });",
									"",
									"    // tax_amount",
									"    pm.test(\"tax_amount of po correctly! \", function () {",
									"        console.log(\"exp tax_amount: \" + po_obj.exp_tax_amount);",
									"        console.log(\"act tax_amount: \" + jsData.data.tax_amount);",
									"        pm.expect(jsData.data.tax_amount == po_obj.exp_tax_amount).to.be.true;",
									"    });",
									"",
									"    // paid_amount must be 0",
									"    pm.test(\"paid_amount must be 0\", function () {",
									"        pm.expect(jsData.data.paid_amount == 0).to.be.true;",
									"    });",
									"",
									"    pm.environment.set(\"C-po_obj\",po_obj);",
									"    if(configs.create_po_status == \"completed\"){",
									"        pm.environment.set(\"must_update\",true); // set để call detail còn biết case nào",
									"",
									"        postman.setNextRequest(\"get_po_detail\"); // get_po_detail",
									"    } else {",
									"        testcase++;",
									"        pm.environment.set(\"C-testcase\",testcase);",
									"",
									"        postman.setNextRequest(\"get_list_po\"); // get_list_po",
									"    }",
									"} else {",
									"    console.log(\"Can't create po, end test \", jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/po/create",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"po",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "update_po",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let po_obj = pm.environment.get(\"C-po_obj\");",
									"let po_id = po_obj.po_id;",
									"",
									"let payload = JSON.parse(JSON.stringify(po_obj));",
									"payload.cart_status = \"completed\";",
									"console.log(\"payload: \", payload);",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));",
									"",
									"po_obj.cart_status = \"completed\";",
									"pm.environment.set(\"C-po_obj\",po_obj);",
									"pm.environment.set(\"C-po_id\",po_id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    console.log(\"debug: \", jsData.data);",
									"",
									"    pm.test(\"System code is 102000\", function () {",
									"        pm.expect(jsData.code).to.eql(102000);",
									"    });",
									"",
									"    let po_obj = pm.environment.get(\"C-po_obj\");",
									"    let expected_items = [];",
									"",
									"    // tax_type",
									"    pm.test(\"tax_type of po correctly! \", function () {",
									"        pm.expect(jsData.data.tax_type == po_obj.tax_type).to.be.true;",
									"    });",
									"",
									"    po_obj.expected_items = expected_items;",
									"",
									"    // check discount amount",
									"    pm.test(\"discount_amount of po correctly! \", function () {",
									"        console.log(\"exp discount_amount: \" + po_obj.exp_discount_amount);",
									"        console.log(\"act discount_amount: \" + jsData.data.discount_amount);",
									"        pm.expect(jsData.data.discount_amount == po_obj.exp_discount_amount).to.be.true;",
									"    });",
									"",
									"    // sub_total_amount",
									"    pm.test(\"sub_total_amount of po correctly! \", function () {",
									"        console.log(\"exp sub_total_amount: \" + po_obj.sub_total_amount);",
									"        console.log(\"act sub_total_amount: \" + jsData.data.items_amount);",
									"        pm.expect(jsData.data.sub_total_amount == po_obj.sub_total_amount).to.be.true;",
									"    });",
									"",
									"    // check total item amount",
									"    // pm.test(\"total_amount, payment_due_amount of po correctly! \", function () {",
									"    //     console.log(\"exp total_amount: \" + po_obj.exp_total_amount);",
									"    //     console.log(\"act total_amount: \" + jsData.data.total_amount);",
									"    //     pm.expect(jsData.data.total_amount == po_obj.exp_total_amount && jsData.data.payment_due_amount == po_obj.exp_total_amount).to.be.true;",
									"    // });",
									"",
									"    // tax_amount",
									"    pm.test(\"tax_amount of po correctly! \", function () {",
									"        console.log(\"exp tax_amount: \" + po_obj.exp_tax_amount);",
									"        console.log(\"act tax_amount: \" + jsData.data.tax_amount);",
									"        pm.expect(jsData.data.tax_amount == po_obj.exp_tax_amount).to.be.true;",
									"    });",
									"",
									"    // payment_due_amount, return_amount, paid_amount must be 0",
									"    // pm.test(\"return_amount, paid_amount must be 0\", function () {",
									"    //     pm.expect(jsData.data.return_amount == 0 && jsData.data.paid_amount == 0).to.be.true;",
									"    // });",
									"",
									"    testcase++;",
									"    pm.environment.set(\"C-testcase\",testcase);",
									"    pm.environment.set(\"C-po_obj\",po_obj);",
									"    postman.setNextRequest(\"get_list_po\"); // get_list_po",
									"} else {",
									"    console.log(\"Can't create po, end test \", jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/po/update/{{C-po_id}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"po",
								"update",
								"{{C-po_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "batch",
			"item": [
				{
					"name": "get_list_batch",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"// let page = pm.environment.get(\"C-page\");",
									"",
									"// if(!page){",
									"//     page = 1;",
									"//     pm.environment.set(\"C-page\",page);",
									"",
									"//     let page_size = 50;",
									"//     pm.environment.set(\"C-page_size\",page_size);",
									"// }"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ============================= random number between min and max",
									"function getRandomInt(min, max) {",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let configs = pm.environment.get(\"C-configs\");",
									"    let total_pages = 0, total_batch = 0;",
									"    try {",
									"        total_pages = jsData.meta.total_pages;",
									"        total_batch = jsData.meta.total_rows;",
									"    } catch {",
									"        console.log(\"Missing meta data\");",
									"    }",
									"    let page = pm.environment.get(\"C-page\");",
									"",
									"    switch(testcase){",
									"        case 2:",
									"            pm.environment.unset(\"C-page\");",
									"            pm.environment.unset(\"C-page_size\");",
									"            pm.test(\"Got total batch! \" + total_batch, function () {",
									"                pm.expect(total_batch > 0).to.be.true;",
									"            });",
									"            pm.environment.set(\"C-total_batch\",total_batch);",
									"",
									"            postman.setNextRequest(\"get_batch_overview\"); // get_batch_overview",
									"            break;",
									"        case 5: case 8:",
									"            let create_branch = pm.environment.get(\"C-branch_id\");",
									"",
									"            let old_total_batch = pm.environment.get(\"C-total_batch\");",
									"            let po_obj = pm.environment.get(\"C-po_obj\");",
									"            let exchange_batch = 0, count_batch = 0;",
									"",
									"            switch(configs.create_po_status){",
									"                case \"completed\":",
									"                    for(let i in po_obj.items){",
									"                        if(\"batches\" in po_obj.items[i]){",
									"                            exchange_batch += po_obj.items[i].batches.length;",
									"                        } else {",
									"                            exchange_batch++;",
									"                        }",
									"",
									"                        for(let j in po_obj.items[i].batches){",
									"                            for(let n in jsData.data){",
									"                                if(po_obj.items[i].batches[j].sku_id == jsData.data[n].sku_id && po_obj.items[i].batches[j].name == jsData.data[n].name && jsData.data[n].branch_id == create_branch){",
									"                                    // console.log(\"act: \", jsData.data[n]);",
									"                                    count_batch++;",
									"                                    // name",
									"                                    pm.test(\"name of batch \" + po_obj.items[i].batches[j].name, function () {",
									"                                        pm.expect(po_obj.items[i].batches[j].name).to.eql(jsData.data[n].name);",
									"                                    });",
									"",
									"                                    // item_amount",
									"                                    pm.test(\"item_amount of batch \" + po_obj.items[i].batches[j].item_amount, function () {",
									"                                        pm.expect(po_obj.items[i].batches[j].item_amount).to.eql(jsData.data[n].item_amount);",
									"                                    });",
									"",
									"                                    // expiration_date",
									"                                    pm.test(\"expiration_date of batch \" + po_obj.items[i].batches[j].expiration_date, function () {",
									"                                        if(j == 0){",
									"                                            console.log(\"act: \" + jsData.data[n].expiration_date);",
									"                                        }",
									"                                        pm.expect(po_obj.items[i].batches[j].expiration_date.substring(0,19)).to.eql(jsData.data[n].expiration_date.substring(0,19));",
									"                                    });",
									"",
									"                                    // quantity => received_quantity",
									"                                    pm.test(\"received_quantity of batch \" + po_obj.items[i].batches[j].quantity, function () {",
									"                                        pm.expect(po_obj.items[i].batches[j].quantity).to.eql(jsData.data[n].received_quantity);",
									"                                    });",
									"",
									"                                    // status is received => cần check thêm lô quá hạn, lô cận hạn hay lô mới",
									"                                    // pm.test(\"status of batch must be received\", function () {",
									"                                    //     pm.expect(\"received\").to.eql(jsData.data[n].status);",
									"                                    // });",
									"",
									"                                    // batch_status",
									"                                    pm.test(\"batch_status of batch must be received\", function () {",
									"                                        pm.expect(\"received\").to.eql(jsData.data[n].batch_status);",
									"                                    });",
									"                                    break;",
									"                                }",
									"                            }",
									"                        }",
									"                    }",
									"                    break;",
									"                case \"saved\":",
									"                    for(let i in po_obj.items){",
									"                        if(\"batches\" in po_obj.items[i]){",
									"                            exchange_batch += po_obj.items[i].batches.length;",
									"                        } else {",
									"                            exchange_batch++;",
									"                        }",
									"",
									"                        for(let j in po_obj.items[i].batches){",
									"                            for(let n in jsData.data){",
									"                                if(po_obj.items[i].batches[j].sku_id == jsData.data[n].sku_id && po_obj.items[i].batches[j].name == jsData.data[n].name && jsData.data[n].branch_id == create_branch){",
									"                                    // console.log(\"act: \", jsData.data[n]);",
									"                                    count_batch++;",
									"                                    // name",
									"                                    pm.test(\"name of batch \" + po_obj.items[i].batches[j].name, function () {",
									"                                        pm.expect(po_obj.items[i].batches[j].name).to.eql(jsData.data[n].name);",
									"                                    });",
									"",
									"                                    // item_amount",
									"                                    pm.test(\"item_amount of batch \" + po_obj.items[i].batches[j].item_amount, function () {",
									"                                        pm.expect(po_obj.items[i].batches[j].item_amount).to.eql(jsData.data[n].item_amount);",
									"                                    });",
									"",
									"                                    // expiration_date",
									"                                    pm.test(\"expiration_date of batch \" + po_obj.items[i].batches[j].expiration_date, function () {",
									"                                        if(j == 0){",
									"                                            console.log(\"act: \" + jsData.data[n].expiration_date);",
									"                                        }",
									"                                        pm.expect(po_obj.items[i].batches[j].expiration_date.substring(0,19)).to.eql(jsData.data[n].expiration_date.substring(0,19));",
									"                                    });",
									"",
									"                                    // quantity => pending_quantity",
									"                                    pm.test(\"pending_quantity of batch \" + po_obj.items[i].batches[j].quantity, function () {",
									"                                        pm.expect(po_obj.items[i].batches[j].quantity).to.eql(jsData.data[n].pending_quantity);",
									"                                    });",
									"",
									"                                    // status is pending",
									"                                    pm.test(\"status of batch must be pending\", function () {",
									"                                        pm.expect(\"pending\").to.eql(jsData.data[n].status);",
									"                                    });",
									"",
									"                                    // batch_status is pending",
									"                                    pm.test(\"batch_status of batch must be pending\", function () {",
									"                                        pm.expect(\"pending\").to.eql(jsData.data[n].batch_status);",
									"                                    });",
									"                                    break;",
									"                                }",
									"                            }",
									"                        }",
									"                    }",
									"                    break;",
									"                case \"draft\":",
									"                default:",
									"                    exchange_batch = 0; // vẫn tạo ở DB, cần handle thêm mở connection DB và build API get data từ table tương ứng (hỏi BE table)",
									"                    break;",
									"            }",
									"",
									"            pm.test(\"Found all batch\", function () {",
									"                pm.expect(count_batch).to.eql(exchange_batch);",
									"            });",
									"",
									"            pm.test(\"Total batch increase \" + exchange_batch, function () {",
									"                console.log(\"old: \" + old_total_batch);",
									"                console.log(\"new: \" + total_batch);",
									"                pm.expect(total_batch).to.eql(old_total_batch + exchange_batch);",
									"            });",
									"",
									"            postman.setNextRequest(\"get_batch_overview\"); // get_batch_overview",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get list batch, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/batch/get-list?list_contact_ids&page=1&page_size=50",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"batch",
								"get-list"
							],
							"query": [
								{
									"key": "list_contact_ids",
									"value": null
								},
								{
									"key": "page",
									"value": "1",
									"description": "{{C-page}}"
								},
								{
									"key": "page_size",
									"value": "50",
									"description": "{{C-page_size}}"
								},
								{
									"key": "search",
									"value": "",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "",
									"disabled": true
								},
								{
									"key": "status",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get_batch_detail",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/batch/get-one/{{C-batch_id}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"batch",
								"get-one",
								"{{C-batch_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_batch_overview",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let configs = pm.environment.get(\"C-configs\");",
									"",
									"    let batch_overview = null;",
									"    try {",
									"        batch_overview = jsData.data;",
									"    } catch {",
									"        console.log(\"missing data\");",
									"    }",
									"",
									"    let old_batch_overview;",
									"    switch(testcase){",
									"        case 2:",
									"            pm.test(\"got batch_overview data\", function () {",
									"                pm.expect(batch_overview != null).to.be.true;",
									"            });",
									"            pm.environment.set(\"C-batch_overview\",batch_overview);",
									"            console.log(\"batch_overview: \",batch_overview);",
									"",
									"            postman.setNextRequest(\"get_po_overview\"); // get_po_overview",
									"            break;",
									"        case 5: case 8:",
									"            old_batch_overview = pm.environment.get(\"C-batch_overview\");",
									"            console.log(\"batch_overview: \",batch_overview);",
									"            console.log(\"old_batch_overview: \",old_batch_overview);",
									"            let po_obj = pm.environment.get(\"C-po_obj\");",
									"",
									"            let exchange_expiration_quantity = 0, exchange_expiration_count = 0;",
									"            let exchange_pending_quantity = 0, exchange_pending_count = 0;",
									"            let today = new Date();",
									"            switch(configs.create_po_status){",
									"                case \"completed\":",
									"                    // trạng thái này thì sẽ không có chờ nhập",
									"                    // count_po_saved",
									"                    pm.test(\"Nothing happen with count_po_saved\", function () {",
									"                        pm.expect(old_batch_overview.count_po_saved).to.eql(batch_overview.count_po_saved);",
									"                    });",
									"",
									"                    // count_batch_pending",
									"                    pm.test(\"Nothing happen with count_batch_pending\", function () {",
									"                        pm.expect(old_batch_overview.count_batch_pending).to.eql(batch_overview.count_batch_pending);",
									"                    });",
									"",
									"                    // total_expiration",
									"                    for(let i in po_obj.items){",
									"                        for(let j in po_obj.items[i].batches){",
									"                            let expiration_date_j = new Date(po_obj.items[i].batches[j].expiration_date);",
									"                            if(expiration_date_j < today){",
									"                                console.log(po_obj.items[i].batches[j].name + \" is expired \" + expiration_date_j);",
									"                                // exchange_expiration_quantity += po_obj.items[i].batches[j].quantity; // chổ này là số lô chứ ko phải số lượng sắp/hết hạn",
									"                                exchange_expiration_quantity++;",
									"                                exchange_expiration_count++;",
									"                            }",
									"                            // thêm điều kiện gần hết hạn => hiện tại chưa define dc nên pending",
									"",
									"                        }",
									"                    }",
									"",
									"                    // count_batch_near_expiration",
									"                    pm.test(\"count_batch_near_expiration increase \" + exchange_expiration_count, function () {",
									"                        pm.expect(old_batch_overview.count_batch_near_expiration + exchange_expiration_count).to.eql(batch_overview.count_batch_near_expiration);",
									"                    });",
									"                    break;",
									"                case \"saved\":",
									"                    exchange_pending_count = 1;",
									"                    for(let i in po_obj.items){",
									"                        if(po_obj.items[i].batches.length > 0){",
									"                            exchange_pending_quantity += po_obj.items[i].batches.length;",
									"                        } else {",
									"                            exchange_pending_quantity++; // mỗi sp không quản lý lô cũng có 1 batch nhập hàng",
									"                        }",
									"                    }",
									"",
									"                    // count_batch_pending",
									"                    pm.test(\"count_batch_pending increase \" + exchange_pending_quantity, function () {",
									"                        pm.expect(old_batch_overview.count_batch_pending + exchange_pending_quantity).to.eql(batch_overview.count_batch_pending);",
									"                    });",
									"",
									"                    // count_po_saved => tổng số nhiếu nhập trạng thái chờ nhập được tạo hôm nay",
									"                    pm.test(\"count_pending_today increase \" + exchange_pending_count, function () {",
									"                        pm.expect(old_batch_overview.count_po_saved + exchange_pending_count).to.eql(batch_overview.count_po_saved);",
									"                    });",
									"",
									"                    // count_batch_near_expiration",
									"                    pm.test(\"nothing happen with count_batch_near_expiration\", function () {",
									"                        pm.expect(old_batch_overview.count_batch_near_expiration).to.eql(batch_overview.count_batch_near_expiration);",
									"                    });",
									"",
									"                    // total_expiration => loại bỏ field này vì ko có giá trị (ko tính dc)",
									"                    // pm.test(\"nothing happen with total_expiration\", function () {",
									"                    //     pm.expect(old_batch_overview.total_expiration).to.eql(batch_overview.total_expiration);",
									"                    // });",
									"                    break;",
									"                case \"draft\":",
									"                default:",
									"                    pm.test(\"Nothing happen with batch_overview data\", function () {",
									"                        pm.expect(JSON.stringify(old_batch_overview)).to.eql(JSON.stringify(batch_overview));",
									"                    });",
									"                    break;",
									"            }",
									"            ",
									"            postman.setNextRequest(\"get_list_inventory\"); // get_list_posting, get_list_inventory",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get batch overview\");",
									"    postman.setNextRequest(null);",
									"    // postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/batch/overview",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"batch",
								"overview"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_list_batch_branch",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let page = pm.environment.get(\"C-page\");",
									"",
									"if(!page){",
									"    page = 1;",
									"    pm.environment.set(\"C-page\",page);",
									"",
									"    let page_size = 50;",
									"    pm.environment.set(\"C-page_size\",page_size);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ============================= random number between min and max",
									"function getRandomInt(min, max) {",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = pm.response.json();",
									"if(pm.response.code == 200 || pm.response.code == 404){ // tạm thời handle 404 vì BE chưa push code",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let total_pages = 0, total_batch = 0;",
									"    try {",
									"        total_pages = jsData.meta.total_pages;",
									"        total_batch = jsData.meta.total_rows;",
									"    } catch {",
									"        console.log(\"Missing meta data\");",
									"    }",
									"    let page = pm.environment.get(\"C-page\");",
									"",
									"    let list_batch, old_total_batch;",
									"    switch(testcase){",
									"        case 2:",
									"            pm.environment.unset(\"C-page\");",
									"            pm.environment.unset(\"C-page_size\");",
									"            pm.test(\"Got total batch! \" + total_batch, function () {",
									"                pm.expect(total_batch > 0).to.be.true;",
									"            });",
									"            pm.environment.set(\"C-total_batch\",total_batch);",
									"",
									"            postman.setNextRequest(\"\"); // get_batch_overview",
									"            break;",
									"        case 5: case 8:",
									"            list_batch = pm.environment.get(\"C-list_batch\");",
									"            if(!list_batch){",
									"                list_batch = [];",
									"            }",
									"",
									"            for(let item in jsData.data){",
									"                list_batch[list_batch.length] = {",
									"                    \"batch_id\":jsData.data[item].id,",
									"                    \"created_at\":jsData.data[item].created_at,",
									"                    \"batch_code\":jsData.data[item].batch_code,",
									"                    \"system_code\":jsData.data[item].system_code,",
									"                    \"cart_status\":jsData.data[item].cart_status,",
									"                    \"payment_status\":jsData.data[item].payment_status,",
									"                    \"items_amount\":jsData.data[item].items_amount,",
									"                    \"sub_total_amount\":jsData.data[item].sub_total_amount,",
									"                    \"paid_amount\":jsData.data[item].paid_amount,",
									"                    \"currency\":jsData.data[item].currency,",
									"                    \"contact_id\":jsData.data[item].contact_id,",
									"                    \"entry_type\":jsData.data[item].entry_type,",
									"                    \"note\":jsData.data[item].note,",
									"                    \"value_at\":jsData.data[item].value_at,",
									"                    \"due_at\":jsData.data[item].due_at,",
									"                    \"send_at\":jsData.data[item].send_at,",
									"                    \"account_id\":jsData.data[item].account_id,",
									"                    \"tax_type\":jsData.data[item].tax_type,",
									"                    \"final_status\":jsData.data[item].final_status,",
									"                    \"sales_rep_info\":jsData.data[item].sales_rep_info",
									"                }",
									"                // list_batch[list_batch.length] = jsData.data[item];",
									"            }",
									"            pm.environment.set(\"C-list_batch\",list_batch);",
									"",
									"            let configs = pm.environment.get(\"C-configs\");",
									"            if(page >= total_pages || page >= configs.limit_page){",
									"                // must clear page & page_size",
									"                pm.environment.unset(\"C-page\");",
									"                pm.environment.unset(\"C-page_size\");",
									"",
									"                postman.setNextRequest(\"\"); // get_batch_overview",
									"            } else {",
									"                page++;",
									"                pm.environment.set(\"C-page\",page);",
									"",
									"                console.log(\"view next page (\" + page + \") to get more batch on branch \" + pm.environment.get(\"C-filter_branch_id\"));",
									"                postman.setNextRequest(\"get_list_batch_branch\");",
									"            }",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get list batch, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/batch/get-list?list_contact_ids&page={{C-page}}&page_size={{C-page_size}}&search&sort&status&branch_id={{C-filter_branch_id}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"batch",
								"get-list"
							],
							"query": [
								{
									"key": "list_contact_ids",
									"value": null
								},
								{
									"key": "page",
									"value": "{{C-page}}"
								},
								{
									"key": "page_size",
									"value": "{{C-page_size}}"
								},
								{
									"key": "search",
									"value": null
								},
								{
									"key": "sort",
									"value": null
								},
								{
									"key": "status",
									"value": null
								},
								{
									"key": "branch_id",
									"value": "{{C-filter_branch_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get_batch_overview_branch",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200 || pm.response.code == 404){ // tạm thời để 404 vì BE chưa push code",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let batch_overview = null;",
									"    try {",
									"        batch_overview = jsData.data;",
									"    } catch {",
									"        console.log(\"missing data\");",
									"    }",
									"",
									"    let old_batch_overview;",
									"    switch(testcase){",
									"        case 2:",
									"            pm.test(\"got batch_overview data\", function () {",
									"                pm.expect(batch_overview != null).to.be.true;",
									"            });",
									"            pm.environment.set(\"C-batch_overview\",batch_overview);",
									"",
									"            postman.setNextRequest(\"\"); // get_list_posting",
									"            break;",
									"        case 5:",
									"            old_batch_overview = pm.environment.get(\"C-batch_overview\");",
									"            pm.test(\"Nothing happen with batch_overview data\", function () {",
									"                pm.expect(JSON.stringify(old_batch_overview)).to.eql(JSON.stringify(batch_overview));",
									"            });",
									"            ",
									"            postman.setNextRequest(\"\"); // get_list_posting",
									"            break;",
									"        case 8:",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get batch overview\");",
									"    postman.setNextRequest(null);",
									"    // postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/batch/overview?branch_id={{C-filter_branch_id}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"batch",
								"overview"
							],
							"query": [
								{
									"key": "branch_id",
									"value": "{{C-filter_branch_id}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "posting",
			"item": [
				{
					"name": "get_list_posting",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let page = pm.environment.get(\"C-page\");",
									"",
									"if(!page){",
									"    page = 1;",
									"    pm.environment.set(\"C-page\",page);",
									"",
									"    let page_size = 50;",
									"    pm.environment.set(\"C-page_size\",page_size);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let total_pages = jsData.meta.total_pages;",
									"    let total_records = jsData.meta.total_rows;",
									"    let page = pm.environment.get(\"C-page\");",
									"",
									"    let list_posting, old_list_posting;",
									"    // console.log(\"debug total record in page: \" + jsData.data.length);",
									"    switch(testcase){",
									"        case 2:",
									"            list_posting = pm.environment.get(\"C-list_posting\");",
									"            if(!list_posting){",
									"                list_posting = [];",
									"            }",
									"            break;",
									"        case 5: case 8:",
									"            old_list_posting = pm.environment.get(\"C-old_list_posting\");",
									"            if(!old_list_posting){",
									"                old_list_posting = pm.environment.get(\"C-list_posting\");",
									"                pm.environment.unset(\"C-list_posting\");",
									"                pm.environment.set(\"C-old_list_posting\",old_list_posting);",
									"            }",
									"",
									"            list_posting = pm.environment.get(\"C-list_posting\");",
									"            if(!list_posting){",
									"                list_posting = [];",
									"            }",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow\");",
									"            break;",
									"    }",
									"",
									"    for(let item in jsData.data){",
									"        list_posting[list_posting.length] = {",
									"            \"posting_id\":jsData.data[item].id,",
									"            \"account_id\":jsData.data[item].account_id,",
									"            \"amount\":jsData.data[item].amount,",
									"            \"branch_id\":jsData.data[item].branch_id,",
									"            \"created_at\":jsData.data[item].created_at,",
									"            \"currency\":jsData.data[item].currency,",
									"            \"deleted_at\":jsData.data[item].deleted_at,",
									"            \"is_credit\":jsData.data[item].is_credit,",
									"            \"is_final_status\":jsData.data[item].is_final_status,",
									"            \"object_ref_id\":jsData.data[item].object_ref_id,",
									"            \"object_ref_type\":jsData.data[item].object_ref_type, // product (line_item), tax, discount",
									"            \"object_id\":jsData.data[item].object_id,",
									"            \"object_type\":jsData.data[item].object_type,",
									"            // \"value_at\":jsData.data[item].value_at,",
									"            \"short_desc\":jsData.data[item].short_desc",
									"        }",
									"    }",
									"    pm.environment.set(\"C-list_posting\",list_posting);",
									"",
									"    let configs = pm.environment.get(\"C-configs\");",
									"    if(page >= total_pages || page >= configs.limit_page){",
									"        // must clear page & page_size",
									"        pm.environment.unset(\"C-page\");",
									"        pm.environment.unset(\"C-page_size\");",
									"",
									"        let old_total_records;",
									"        switch(testcase){",
									"            case 2:",
									"                pm.test(\"Got all posting! \" + total_records, function () {",
									"                    pm.expect(total_records > 0).to.be.true;",
									"                });",
									"                pm.environment.set(\"C-total_posting\",total_records);",
									"",
									"                postman.setNextRequest(\"get_list_inventory\"); // get_list_inventory",
									"                break;",
									"            case 8: case 5:",
									"                /**",
									"                 * CÁC BƯỚC GHI NHẬN POSTING CHO po:",
									"                 * 1. Ghi Có (đầu debit)",
									"                 *  - account_payable: ghi 1 giá trị phải thu cho po (đã trừ đi credit của discount)",
									"                 *  - discount: ghi tương ứng cho từng line_item, chỉ có 1 default coa discount",
									"                 * 2. Ghi Nợ (đầu credit)",
									"                 *  - coa product: ghi tương ứng cho từng line_item, mỗi line_item có coa bán hàng riêng (tự config)",
									"                 *  - coa tax: ghi tương ứng cho từng tax trong line_item (hiện tại chỉ có 1 tax/line_item)",
									"                 * Note: https://sobanhang.larksuite.com/wiki/LMTCwervWiMtTOkP9zJuynt8sgg#part-Su1idq1droSHCZxlxIDuBAX4s3e",
									"                 */ ",
									"                let old_total_records = pm.environment.get(\"C-total_posting\");",
									"                let po_obj = pm.environment.get(\"C-po_obj\");",
									"                // console.log(\"po_obj: \",po_obj);",
									"                let account_discount = pm.environment.get(\"C-discount\");",
									"                let account_payable = pm.environment.get(\"C-account_payable\");",
									"                let account_inventory = pm.environment.get(\"C-inventory\");",
									"                let account_fee_not_tax = pm.environment.get(\"C-fee_not_tax\");",
									"                let list_expected_posting = [];",
									"",
									"                switch(configs.create_po_status){",
									"                    case \"draft\": case \"saved\":",
									"                        pm.test(\"Nothing happen with total posting!\", function () {",
									"                            pm.expect(total_records).to.eql(old_total_records);",
									"                        });",
									"                        break;",
									"                    case \"completed\":",
									"                        // ghi posting Nhập kho - Credit B1-001 (account_payable)",
									"                        list_expected_posting[0] = {",
									"                            \"object_type\":\"po\",",
									"                            \"object_id\":po_obj.po_id,",
									"                            \"object_ref_id\":\"\", // 00000000-0000-0000-0000-000000000000",
									"                            \"account_id\":account_payable.id,",
									"                            \"is_credit\":true,",
									"                            \"amount\":po_obj.exp_total_amount,",
									"                            \"type\":\"account_payable\"",
									"                        }",
									"                        // ghi posting Nhập kho - Debit A2-xxx: Hàng tồn kho (Inventory)",
									"                        for(let i in po_obj.items){",
									"                            if(po_obj.items[i].batches.length > 0){ // luôn gửi batches dù rỗng",
									"                                for(let j in po_obj.items[i].batches){",
									"                                    list_expected_posting[list_expected_posting.length] = {",
									"                                        \"object_type\":\"po\",",
									"                                        \"object_id\":po_obj.po_id,",
									"                                        \"object_ref_id\":po_obj.items[i].item_id, // => sku_id or item_id ???",
									"                                        \"account_id\":account_inventory.id,",
									"                                        \"is_credit\":false,",
									"                                        \"amount\":po_obj.items[i].batches[j].total_item_amount, // PO chỉ có 1 loại là giá chưa bao gồm thuế",
									"                                        \"type\":\"account_inventory\"",
									"                                    }",
									"                                }",
									"                            } else {",
									"                                list_expected_posting[list_expected_posting.length] = {",
									"                                    \"object_type\":\"po\",",
									"                                    \"object_id\":po_obj.po_id,",
									"                                    \"object_ref_id\":po_obj.items[i].item_id, // => sku_id or item_id ???",
									"                                    \"account_id\":account_inventory.id,",
									"                                    \"is_credit\":false,",
									"                                    \"amount\":po_obj.items[i].before_tax_amount,",
									"                                    \"type\":\"account_inventory\"",
									"                                }",
									"                            }",
									"                        }",
									"",
									"                        if(po_obj.discounts.length > 0){",
									"                            // ghi posting discounts - Debit B1-001: Phải trả người bán (Account Payable)",
									"                            list_expected_posting[list_expected_posting.length] = {",
									"                                \"object_type\":\"po\",",
									"                                \"object_id\":po_obj.po_id,",
									"                                \"object_ref_id\":\"\",",
									"                                \"account_id\":account_discount.id,",
									"                                \"is_credit\":false,",
									"                                \"amount\":po_obj.exp_discount_amount,",
									"                                \"type\":\"discount_account_payable\"",
									"                            }",
									"                            // ghi posting discounts - Credit A2-xxx: Hàng tồn kho (Inventory)",
									"                            for(let i in po_obj.items){",
									"                                if(po_obj.items[i].batches.length > 0){",
									"                                    for(let j in po_obj.items[i].batches){",
									"                                        list_expected_posting[list_expected_posting.length] = {",
									"                                            \"object_type\":\"po\",",
									"                                            \"object_id\":po_obj.po_id,",
									"                                            \"object_ref_id\":po_obj.items[i].item_id, // => sku_id or item_id ???",
									"                                            \"account_id\":account_inventory.id,",
									"                                            \"is_credit\":true,",
									"                                            \"amount\":po_obj.items[i].batches[j].discount_amount, // PO chỉ có 1 loại là giá chưa bao gồm thuế",
									"                                            \"type\":\"discount_account_inventory\"",
									"                                        }",
									"                                    }",
									"                                } else {",
									"                                    list_expected_posting[list_expected_posting.length] = {",
									"                                        \"object_type\":\"po\",",
									"                                        \"object_id\":po_obj.po_id,",
									"                                        \"object_ref_id\":po_obj.items[i].item_id, // => sku_id or item_id ???",
									"                                        \"account_id\":account_inventory.id,",
									"                                        \"is_credit\":true,",
									"                                        \"amount\":po_obj.items[i].discount_amount,",
									"                                        \"type\":\"discount_account_inventory\"",
									"                                    }",
									"                                }",
									"                            }",
									"                        }",
									"",
									"                        // ghi posting taxs - Debit B2-001 Thuế (Chi tiết CoA do user tự tạo)",
									"                        for(let i in po_obj.items){",
									"                            if(po_obj.tax_type != \"tax_not_applicable\"){ // thật ra không cần vì PO fix đúng 1 công thức",
									"                                if(po_obj.items[i].batches.length > 0){",
									"                                    for(let j in po_obj.items[i].batches){",
									"                                        if(\"item_tax_amount\" in po_obj.items[i].batches[j]){",
									"                                            list_expected_posting[list_expected_posting.length] = {",
									"                                                \"object_type\":\"po\",",
									"                                                \"object_id\":po_obj.po_id,",
									"                                                \"object_ref_id\":po_obj.items[i].item_id,",
									"                                                \"account_id\":po_obj.items[i].taxes[0].account_id, // fix code 1 tax",
									"                                                \"is_credit\":false,",
									"                                                \"amount\":po_obj.items[i].batches[j].item_tax_amount,",
									"                                                \"type\":\"item_tax\",",
									"                                                \"name\":po_obj.items[i].name,",
									"                                                \"tax_name\":po_obj.items[i].taxes[0].name",
									"                                            }",
									"                                        } ",
									"                                        // else {",
									"                                        //     list_expected_posting[list_expected_posting.length] = {",
									"                                        //         \"object_type\":\"po\",",
									"                                        //         \"object_id\":po_obj.po_id,",
									"                                        //         \"object_ref_id\":po_obj.items[i].item_id,",
									"                                        //         \"account_id\":po_obj.items[i].taxes[j].account_id,",
									"                                        //         \"is_credit\":true,",
									"                                        //         \"amount\":0,",
									"                                        //         \"type\":\"item_tax\",",
									"                                        //         \"name\":po_obj.items[i].name,",
									"                                        //         \"tax_name\":po_obj.items[i].taxes[j].name",
									"                                        //     }",
									"                                        // }",
									"                                    }",
									"                                } else {",
									"                                    for(let j in po_obj.items[i].taxes){",
									"                                        if(\"item_tax_amount\" in po_obj.items[i].taxes[j]){",
									"                                            list_expected_posting[list_expected_posting.length] = {",
									"                                                \"object_type\":\"po\",",
									"                                                \"object_id\":po_obj.po_id,",
									"                                                \"object_ref_id\":po_obj.items[i].item_id,",
									"                                                \"account_id\":po_obj.items[i].taxes[j].account_id,",
									"                                                \"is_credit\":false,",
									"                                                \"amount\":po_obj.items[i].taxes[j].item_tax_amount,",
									"                                                \"type\":\"item_tax\",",
									"                                                \"name\":po_obj.items[i].name,",
									"                                                \"tax_name\":po_obj.items[i].taxes[j].name",
									"                                            }",
									"                                        } else {",
									"                                            list_expected_posting[list_expected_posting.length] = {",
									"                                                \"object_type\":\"po\",",
									"                                                \"object_id\":po_obj.po_id,",
									"                                                \"object_ref_id\":po_obj.items[i].item_id,",
									"                                                \"account_id\":po_obj.items[i].taxes[j].account_id,",
									"                                                \"is_credit\":false,",
									"                                                \"amount\":po_obj.items[i].taxes[j].amount,",
									"                                                \"type\":\"item_tax\",",
									"                                                \"name\":po_obj.items[i].name,",
									"                                                \"tax_name\":po_obj.items[i].taxes[j].name",
									"                                            }",
									"                                        }",
									"                                    }",
									"                                }",
									"                            }",
									"                        }",
									"                        ",
									"                        if(po_obj.exp_tax_amount != 0){",
									"                            // ghi posting taxs - Credit B1-001: Phải trả người bán (Account Payable)",
									"                            list_expected_posting[list_expected_posting.length] = {",
									"                                \"object_type\":\"po\",",
									"                                \"object_id\":po_obj.po_id,",
									"                                \"object_ref_id\":\"\",",
									"                                \"account_id\":account_payable.id,",
									"                                \"is_credit\":true,",
									"                                \"amount\":po_obj.exp_tax_amount,",
									"                                \"type\":\"tax_account_payable\"",
									"                            }",
									"                        }",
									"",
									"                        // ghi chi phí - Debit A2-002 Chi phí mua hàng chưa thuế exp_total_fees",
									"                        if(\"exp_total_fees\" in po_obj){",
									"                            list_expected_posting[list_expected_posting.length] = {",
									"                                \"object_type\":\"po\",",
									"                                \"object_id\":po_obj.po_id,",
									"                                \"object_ref_id\":\"\",",
									"                                \"account_id\":account_fee_not_tax.id,",
									"                                \"is_credit\":false,",
									"                                \"amount\":po_obj.exp_total_fees,",
									"                                \"type\":\"total_fees\"",
									"                            }",
									"                            // ghi chi phí - Credit B1-001: Phải trả người bán (Account Payable)",
									"                            list_expected_posting[list_expected_posting.length] = {",
									"                                \"object_type\":\"po\",",
									"                                \"object_id\":po_obj.po_id,",
									"                                \"object_ref_id\":\"\",",
									"                                \"account_id\":account_payable.id,",
									"                                \"is_credit\":true,",
									"                                \"amount\":po_obj.exp_total_fees,",
									"                                \"type\":\"fees_account_payable\"",
									"                            }",
									"                        }",
									"",
									"                        console.log(\"list_expected_posting: \" + JSON.stringify(list_expected_posting));",
									"",
									"                        // xử lý cho act posting",
									"                        let list_actual_posting = [];",
									"                        // console.log(\"start debug =====\");",
									"                        // console.log(\"po_id: \"  + po_obj.po_id);",
									"                        // console.log(\"debug: \" + list_posting.length);",
									"                        for(let i in list_posting){",
									"                            // console.log(\"type: \"  + list_posting[i].object_type);",
									"                            // console.log(i + \". object_id: \"  + list_posting[i].object_id);",
									"                            ",
									"                            if(list_posting[i].object_type == \"po\" && list_posting[i].object_id == po_obj.po_id){",
									"                                list_actual_posting[list_actual_posting.length] = {",
									"                                    \"object_type\":list_posting[i].object_type,",
									"                                    \"object_id\":list_posting[i].object_id,",
									"                                    \"object_ref_id\":list_posting[i].object_ref_id,",
									"                                    \"object_ref_type\":list_posting[i].object_ref_type,",
									"                                    \"account_id\":list_posting[i].account_id,",
									"                                    \"is_credit\":list_posting[i].is_credit,",
									"                                    \"amount\":list_posting[i].amount",
									"                                }",
									"                            }",
									"                        }",
									"                        console.log(\"list_actual_posting: \" + JSON.stringify(list_actual_posting));",
									"",
									"                        let count_record = list_expected_posting.length;",
									"                        old_total_records = pm.environment.get(\"C-total_posting\");",
									"                        pm.test(\"Have \" + count_record + \" new records\", function () {",
									"                            console.log(\"old: \" + old_total_records);",
									"                            console.log(\"new: \" + total_records);",
									"                            pm.expect(total_records == old_total_records + count_record).to.be.true;",
									"                        });",
									"                        ",
									"                        let count = 0;",
									"                        let foundAll = false;",
									"",
									"                        let credit_amount = 0, debit_amount = 0;",
									"                        for(let i in list_actual_posting){",
									"                            if(list_actual_posting[i].is_credit){",
									"                                credit_amount += list_actual_posting[i].amount;",
									"                                // item amount & tax amount",
									"                                for(let j in list_expected_posting){",
									"                                    if(list_expected_posting[j].is_credit){",
									"                                        if(list_actual_posting[i].account_id == list_expected_posting[j].account_id && list_actual_posting[i].object_ref_id == list_expected_posting[j].object_ref_id){",
									"                                            count++;",
									"                                            switch(list_expected_posting[j].type){",
									"                                                case \"account_payable\":",
									"                                                    pm.test(\"Found account_payable with amount correctly \" + list_expected_posting[j].amount, function () {",
									"                                                        console.log(\"act amount: \" + list_actual_posting[i].amount);",
									"                                                        pm.expect(list_expected_posting[j].amount == list_actual_posting[i].amount).to.be.true;",
									"                                                    });",
									"                                                    break;",
									"                                                case \"discount_account_inventory\":",
									"                                                    pm.test(\"Found discount_account_inventory with amount correctly \" + list_expected_posting[j].amount, function () {",
									"                                                        console.log(\"act amount: \" + list_actual_posting[i].amount);",
									"                                                        pm.expect(list_expected_posting[j].amount == list_actual_posting[i].amount).to.be.true;",
									"                                                    });",
									"                                                    break;",
									"                                                case \"tax_account_payable\":",
									"                                                    pm.test(\"Found tax_account_payable amount correctly \" + list_expected_posting[j].amount, function () {",
									"                                                        console.log(\"act amount: \" + list_actual_posting[i].amount);",
									"                                                        pm.expect(list_expected_posting[j].amount == list_actual_posting[i].amount).to.be.true;",
									"                                                    });",
									"                                                    break;",
									"                                                case \"fees_account_payable\":",
									"                                                    pm.test(\"Found fees_account_payable amount correctly \" + list_expected_posting[j].amount, function () {",
									"                                                        console.log(\"act amount: \" + list_actual_posting[i].amount);",
									"                                                        pm.expect(list_expected_posting[j].amount == list_actual_posting[i].amount).to.be.true;",
									"                                                    });",
									"                                                    break;",
									"                                                default:",
									"                                                    pm.test(\"Missing case\", function () {",
									"                                                        pm.expect(false).to.be.true;",
									"                                                    });",
									"                                                    break;",
									"                                            }",
									"                                            break;",
									"                                        }",
									"                                    }",
									"                                }",
									"                            } else {",
									"                                debit_amount += list_actual_posting[i].amount;",
									"                                // account_payable & discount amount",
									"                                for(let j in list_expected_posting){",
									"                                    if(!list_expected_posting[j].is_credit){",
									"                                        if(list_actual_posting[i].account_id == list_expected_posting[j].account_id && list_actual_posting[i].object_ref_id == list_expected_posting[j].object_ref_id){",
									"                                            count++;",
									"                                            switch(list_expected_posting[j].type){",
									"                                                case \"account_inventory\":",
									"                                                    pm.test(\"Found account_inventory with amount correctly \" + list_expected_posting[j].amount, function () {",
									"                                                        console.log(\"act amount: \" + list_actual_posting[i].amount);",
									"                                                        pm.expect(list_expected_posting[j].amount == list_actual_posting[i].amount).to.be.true;",
									"                                                    });",
									"                                                    break;",
									"                                                case \"discount_account_payable\":",
									"                                                    pm.test(\"Found discount_account_payable with amount correctly \" + list_expected_posting[j].amount, function () {",
									"                                                        console.log(\"act amount: \" + list_actual_posting[i].amount);",
									"                                                        pm.expect(list_expected_posting[j].amount == list_actual_posting[i].amount).to.be.true;",
									"                                                    });",
									"                                                    break;",
									"                                                case \"item_tax\":",
									"                                                    pm.test(\"Found item_tax with amount correctly \" + list_expected_posting[j].amount, function () {",
									"                                                        console.log(\"act amount: \" + list_actual_posting[i].amount);",
									"                                                        pm.expect(list_expected_posting[j].amount == list_actual_posting[i].amount).to.be.true;",
									"                                                    });",
									"                                                    break;",
									"                                                case \"total_fees\":",
									"                                                    pm.test(\"Found total_fees with amount correctly \" + list_expected_posting[j].amount, function () {",
									"                                                        console.log(\"act amount: \" + list_actual_posting[i].amount);",
									"                                                        pm.expect(list_expected_posting[j].amount == list_actual_posting[i].amount).to.be.true;",
									"                                                    });",
									"                                                    break;",
									"                                                default:",
									"                                                    pm.test(\"Missing case\", function () {",
									"                                                        pm.expect(false).to.be.true;",
									"                                                    });",
									"                                                    break;",
									"                                            }",
									"                                            break;",
									"                                        }",
									"                                    }",
									"                                }",
									"                            }",
									"",
									"                            if(count == count_record){",
									"                                foundAll = true;",
									"                                break;",
									"                            }",
									"                        }",
									"",
									"                        pm.test(\"Found all posting\", function () {",
									"                            pm.expect(foundAll).to.be.true;",
									"                        });",
									"",
									"                        pm.test(\"total credit_amount == total debit_amount\", function () {",
									"                            console.log(\"debit_amount: \" + debit_amount);",
									"                            console.log(\"credit_amount: \" + credit_amount);",
									"                            pm.expect(debit_amount == credit_amount).to.be.true;",
									"                        });",
									"                        break;",
									"                    default:",
									"                        console.log(\"Missing status \" + configs.create_po_status);",
									"                        break;",
									"                }",
									"",
									"                // clear old data to update at next testcase",
									"                pm.environment.unset(\"C-old_list_posting\");",
									"",
									"                console.log(\"--- End Testsuite 81 ---\");",
									"                postman.setNextRequest(null);",
									"                break;",
									"            default:",
									"                console.log(\"Missing flow, end test\");",
									"                postman.setNextRequest(null);",
									"                break;",
									"        }",
									"    } else {",
									"        page++;",
									"        pm.environment.set(\"C-page\",page);",
									"",
									"        console.log(\"view next page (\" + page + \") to get more posting\");",
									"        postman.setNextRequest(\"get_list_posting\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get list posting, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-ledger/api/v1/posting/get-list?business_id={{C-business_id}}&page={{C-page}}&page_size={{C-page_size}}&search=&sort=",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-ledger",
								"api",
								"v1",
								"posting",
								"get-list"
							],
							"query": [
								{
									"key": "business_id",
									"value": "{{C-business_id}}"
								},
								{
									"key": "page",
									"value": "{{C-page}}"
								},
								{
									"key": "page_size",
									"value": "{{C-page_size}}"
								},
								{
									"key": "search",
									"value": ""
								},
								{
									"key": "sort",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "inventory",
			"item": [
				{
					"name": "get_list_inventory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let configs = pm.environment.get(\"C-configs\");",
									"    let total_pages = 1;",
									"    let total_records = 0;",
									"    try {",
									"        total_pages = jsData.meta.total_pages;",
									"        total_records = jsData.meta.total_rows;",
									"    } catch {",
									"        console.log(\"currently, this branch with null data\");",
									"    }",
									"    let page = pm.environment.get(\"C-page\");",
									"",
									"    let list_inventory_sku, old_list_inventory_sku;",
									"    switch(testcase){",
									"        case 2:",
									"            list_inventory_sku = pm.environment.get(\"C-list_inventory_sku\");",
									"            if(!list_inventory_sku){",
									"                list_inventory_sku = [];",
									"            }",
									"            break;",
									"        case 5: case 8:",
									"            old_list_inventory_sku = pm.environment.get(\"C-old_list_inventory_sku\");",
									"            if(!old_list_inventory_sku){",
									"                old_list_inventory_sku = pm.environment.get(\"C-list_inventory_sku\");",
									"                pm.environment.unset(\"C-list_inventory_sku\");",
									"                pm.environment.set(\"C-old_list_inventory_sku\",old_list_inventory_sku);",
									"            }",
									"",
									"            list_inventory_sku = pm.environment.get(\"C-list_inventory_sku\");",
									"            if(!list_inventory_sku){",
									"                list_inventory_sku = [];",
									"            }",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow\");",
									"            break;",
									"    }",
									"",
									"    let list_sku_use_create = pm.environment.get(\"C-list_sku_use_create\"); // chỉ lấy inventory tương ứng",
									"    for(let j in list_sku_use_create){",
									"        for(let i in jsData.data){",
									"            if(jsData.data[i].sku_id == list_sku_use_create[j].sku_id){",
									"                list_inventory_sku[list_inventory_sku.length] = {",
									"                    \"sku_id\":jsData.data[i].sku_id,",
									"                    \"sku_code\":jsData.data[i].sku_code,",
									"                    \"sku_name\":jsData.data[i].sku_name,",
									"                    \"product_name\":jsData.data[i].product_name,",
									"                    \"sale_price\":jsData.data[i].sale_price,",
									"                    \"cost_price\":jsData.data[i].cost_price,",
									"                    \"selling_price\":jsData.data[i].selling_price,",
									"                    \"sold_quantity\":jsData.data[i].sold_quantity,",
									"                    \"uom\":jsData.data[i].uom,",
									"                    \"total_quantity\":jsData.data[i].total_quantity, ",
									"                    \"total_inventory_value\":jsData.data[i].total_inventory_value, ",
									"                    \"total_can_pick_quantity\":jsData.data[i].total_can_pick_quantity, ",
									"                    \"total_delivery_quantity\":jsData.data[i].total_delivery_quantity",
									"                }",
									"",
									"                if(\"inventory\" in list_sku_use_create[j]){",
									"                    list_sku_use_create[j].new_inventory = {",
									"                        \"sku_id\":jsData.data[i].sku_id,",
									"                        \"sku_code\":jsData.data[i].sku_code,",
									"                        \"sku_name\":jsData.data[i].sku_name,",
									"                        \"product_name\":jsData.data[i].product_name,",
									"                        \"sale_price\":jsData.data[i].sale_price,",
									"                        \"cost_price\":jsData.data[i].cost_price,",
									"                        \"selling_price\":jsData.data[i].selling_price,",
									"                        \"sold_quantity\":jsData.data[i].sold_quantity,",
									"                        \"uom\":jsData.data[i].uom,",
									"                        \"total_quantity\":jsData.data[i].total_quantity, ",
									"                        \"total_inventory_value\":jsData.data[i].total_inventory_value, ",
									"                        \"total_can_pick_quantity\":jsData.data[i].total_can_pick_quantity, ",
									"                        \"total_delivery_quantity\":jsData.data[i].total_delivery_quantity",
									"                    }",
									"                } else {",
									"                    list_sku_use_create[j].inventory = {",
									"                        \"sku_id\":jsData.data[i].sku_id,",
									"                        \"sku_code\":jsData.data[i].sku_code,",
									"                        \"sku_name\":jsData.data[i].sku_name,",
									"                        \"product_name\":jsData.data[i].product_name,",
									"                        \"sale_price\":jsData.data[i].sale_price,",
									"                        \"cost_price\":jsData.data[i].cost_price,",
									"                        \"selling_price\":jsData.data[i].selling_price,",
									"                        \"sold_quantity\":jsData.data[i].sold_quantity,",
									"                        \"uom\":jsData.data[i].uom,",
									"                        \"total_quantity\":jsData.data[i].total_quantity, ",
									"                        \"total_inventory_value\":jsData.data[i].total_inventory_value, ",
									"                        \"total_can_pick_quantity\":jsData.data[i].total_can_pick_quantity, ",
									"                        \"total_delivery_quantity\":jsData.data[i].total_delivery_quantity",
									"                    }",
									"                }",
									"                break;",
									"            }",
									"        }",
									"    }",
									"    pm.environment.set(\"C-list_inventory_sku\",list_inventory_sku);",
									"    pm.environment.set(\"C-list_sku_use_create\",list_sku_use_create);",
									"",
									"    if(page >= total_pages || list_inventory_sku.length == list_sku_use_create.length){",
									"        pm.environment.unset(\"C-page\");",
									"        pm.environment.unset(\"C-page_size\");",
									"",
									"        let old_total_inventory_sku = pm.environment.get(\"C-total_inventory_sku\");",
									"        switch(testcase){",
									"            case 2:",
									"                pm.test(\"got total_inventory_sku \" + total_records, function () {",
									"                    pm.expect(total_records != 0).to.be.true;",
									"                });",
									"                pm.environment.set(\"C-total_inventory_sku\",total_records);",
									"                console.log(\"list_inventory_sku: \",list_inventory_sku);",
									"                console.log(\"list_sku_use_create: \",list_sku_use_create);",
									"",
									"                postman.setNextRequest(\"get_inventory_overview\"); // get_inventory_overview",
									"                break;",
									"            case 5: case 8:",
									"                let po_obj = pm.environment.get(\"C-po_obj\");",
									"",
									"                console.log(\"old_list_inventory_sku: \", old_list_inventory_sku);",
									"                console.log(\"list_inventory_sku: \", list_inventory_sku);",
									"                // console.log(\"list_sku_use_create: \", list_sku_use_create);",
									"",
									"                let count_sku = 0;",
									"                switch(configs.create_po_status){",
									"                    case \"completed\":",
									"                        for(let i in list_inventory_sku){",
									"                            for(let j in old_list_inventory_sku){",
									"                                if(list_inventory_sku[i].sku_id == old_list_inventory_sku[j].sku_id){",
									"                                    count_sku++;",
									"                                    console.log(\"SKU \" + list_inventory_sku[i].sku_id + \" of product \" + list_inventory_sku[i].product_name);",
									"                                    // total_quantity",
									"                                    let exchange_quantity_j = 0, exchange_value_j = 0;",
									"                                    for(let k in po_obj.items){",
									"                                        if(list_inventory_sku[i].sku_id == po_obj.items[k].sku_id){",
									"                                            if(po_obj.items[k].batches.length > 0){",
									"                                                for(let l in po_obj.items[k].batches){",
									"                                                    exchange_quantity_j += po_obj.items[k].batches[l].quantity;",
									"                                                    exchange_value_j += po_obj.items[k].batches[l].quantity * list_inventory_sku[i].cost_price;",
									"                                                }",
									"                                            } else {",
									"                                                exchange_quantity_j += po_obj.items[k].quantity;",
									"                                                exchange_value_j += po_obj.items[k].quantity * list_inventory_sku[i].cost_price;",
									"                                            }",
									"                                            po_obj.items[k].exchange_quantity = exchange_quantity_j;",
									"                                            po_obj.items[k].exchange_value = exchange_value_j;",
									"                                        }",
									"                                    }",
									"                                    pm.test(\"--- total_quantity increate \" + exchange_quantity_j, function () {",
									"                                        pm.expect(old_list_inventory_sku[j].total_quantity + exchange_quantity_j).to.eql(list_inventory_sku[i].total_quantity);",
									"                                    });",
									"",
									"                                    // total_inventory_value",
									"                                    pm.test(\"--- total_inventory_value increase \" + exchange_value_j, function () {",
									"                                        pm.expect(old_list_inventory_sku[j].total_inventory_value + exchange_value_j).to.eql(list_inventory_sku[i].total_inventory_value);",
									"                                    });",
									"",
									"                                    // total_can_pick_quantity",
									"                                    pm.test(\"--- total_can_pick_quantity increase \" + exchange_quantity_j, function () {",
									"                                        pm.expect(old_list_inventory_sku[j].total_can_pick_quantity + exchange_quantity_j).to.eql(list_inventory_sku[i].total_can_pick_quantity);",
									"                                    });",
									"",
									"                                    // total_delivery_quantity",
									"                                    pm.test(\"--- Nothing happen with total_delivery_quantity\", function () {",
									"                                        pm.expect(old_list_inventory_sku[j].total_delivery_quantity).to.eql(list_inventory_sku[i].total_delivery_quantity);",
									"                                    });",
									"                                    break;",
									"                                }",
									"                            }",
									"                        }",
									"",
									"                        pm.test(\"Found all sku inventory to check \" + list_sku_use_create.length, function () {",
									"                            pm.expect(count_sku).to.eql(list_sku_use_create.length);",
									"                        });",
									"                        break;",
									"                    case \"saved\": // CHƯA NHẬP VÀO NÊN INVENTORY CHƯA TĂNG",
									"                        pm.test(\"Nothing happen with list_inventory_sku data\", function () {",
									"                            pm.expect(JSON.stringify(old_list_inventory_sku)).to.eql(JSON.stringify(list_inventory_sku));",
									"                        });",
									"                        break;",
									"                    case \"draft\":",
									"                    default:",
									"                        pm.test(\"Nothing happen with list_inventory_sku data\", function () {",
									"                            pm.expect(JSON.stringify(old_list_inventory_sku)).to.eql(JSON.stringify(list_inventory_sku));",
									"                        });",
									"                        break;",
									"                }",
									"",
									"                pm.test(\"Nothing happen with total_inventory\", function () {",
									"                    pm.expect(old_total_inventory_sku).to.eql(total_records);",
									"                });",
									"                ",
									"                pm.environment.set(\"C-po_obj\",po_obj);",
									"                postman.setNextRequest(\"get_inventory_overview\"); // get_inventory_overview",
									"                break;",
									"            default:",
									"                console.log(\"Missing flow\");",
									"                postman.setNextRequest(null);",
									"                break;",
									"        }",
									"    } else {",
									"        page++;",
									"        pm.environment.set(\"C-page\",page);",
									"",
									"        console.log(\"view next page (\" + page + \") to get more inventory\");",
									"        postman.setNextRequest(\"get_list_inventory\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get list sku in inventory, end test\", jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"/**",
									" * API check inventory cần check ",
									" * \"\": all",
									" * string: 1 branch",
									" * string, string ... : n branch",
									" * Note:",
									" */",
									"",
									"let page = pm.environment.get(\"C-page\");",
									"",
									"if(!page){",
									"    page = 1;",
									"    pm.environment.set(\"C-page\",page);",
									"",
									"    let page_size = 50;",
									"    pm.environment.set(\"C-page_size\",page_size);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/inventory/get-list?page={{C-page}}&page_size={{C-page_size}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"inventory",
								"get-list"
							],
							"query": [
								{
									"key": "list_contact_ids",
									"value": null,
									"disabled": true
								},
								{
									"key": "page",
									"value": "{{C-page}}"
								},
								{
									"key": "page_size",
									"value": "{{C-page_size}}"
								},
								{
									"key": "search",
									"value": "",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "asc",
									"disabled": true
								},
								{
									"key": "status",
									"value": "",
									"disabled": true
								},
								{
									"key": "category_ids",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get_inventory_overview",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let configs = pm.environment.get(\"C-configs\");",
									"    let total_inventory_summary = null;",
									"    try {",
									"        total_inventory_summary = jsData.data;",
									"    } catch {",
									"        console.log(\"Missing meta data\");",
									"    }",
									"",
									"    let old_total_inventory_summary;",
									"    switch(testcase){",
									"        case 2:",
									"            pm.test(\"got total_inventory_summary\", function () {",
									"                pm.expect(total_inventory_summary != null).to.be.true;",
									"            });",
									"            pm.environment.set(\"C-total_inventory_summary\",total_inventory_summary);",
									"            console.log(\"total_inventory_summary: \", total_inventory_summary);",
									"",
									"            postman.setNextRequest(\"get_list_inventory_branch\"); // get_list_inventory_branch",
									"            break;",
									"        case 5: case 8:",
									"            let po_obj = pm.environment.get(\"C-po_obj\");",
									"            console.log(\"po_obj: \", po_obj);",
									"            old_total_inventory_summary = pm.environment.get(\"C-total_inventory_summary\");",
									"            console.log(\"old: \", old_total_inventory_summary);",
									"            console.log(\"new: \", total_inventory_summary);",
									"",
									"            let count_exchange_inventory = 0, value_exchange_inventory = 0;",
									"            switch(configs.create_po_status){",
									"                case \"completed\":",
									"                    for(let i in po_obj.items){",
									"                        count_exchange_inventory += po_obj.items[i].exchange_quantity;",
									"                        if(po_obj.items[i].batches.length > 0){",
									"                            for(let j in po_obj.items[i].batches){",
									"                                value_exchange_inventory += po_obj.items[i].batches[j].cost_per_line * po_obj.items[i].batches[j].quantity;",
									"                            }",
									"                        } else {",
									"                            // value_exchange_inventory += po_obj.items[i].exchange_value;",
									"                            value_exchange_inventory += po_obj.items[i].cost_per_line * po_obj.items[i].quantity;",
									"                        }",
									"                    }",
									"",
									"                    // inventory_value",
									"                    pm.test(\"inventory_value increase \" + value_exchange_inventory, function () {",
									"                        pm.expect(old_total_inventory_summary.inventory_value + value_exchange_inventory).to.eql(total_inventory_summary.inventory_value);",
									"                    });",
									"",
									"                    // count_inventory_product",
									"                    pm.test(\"count_inventory_product increase \" + count_exchange_inventory, function () {",
									"                        pm.expect(old_total_inventory_summary.count_inventory_product + count_exchange_inventory).to.eql(total_inventory_summary.count_inventory_product);",
									"                    });",
									"",
									"                    // total_inventory_low",
									"                    pm.test(\"Nothing happen with total_inventory_low\", function () {",
									"                        pm.expect(old_total_inventory_summary.total_inventory_low).to.eql(total_inventory_summary.total_inventory_low);",
									"                    });",
									"",
									"                    // total_non_inventory_over",
									"                    pm.test(\"Nothing happen with total_non_inventory_over\", function () {",
									"                        pm.expect(old_total_inventory_summary.total_non_inventory_over).to.eql(total_inventory_summary.total_non_inventory_over);",
									"                    });",
									"                    break;",
									"                case \"saved\": // CHƯA VÀO KHO NÊN KO THAY ĐỔI GÌ CẢ",
									"                    pm.test(\"Nothing happen with total_inventory_summary data\", function () {",
									"                        pm.expect(JSON.stringify(old_total_inventory_summary)).to.eql(JSON.stringify(total_inventory_summary));",
									"                    });",
									"                    break;",
									"                case \"draft\":",
									"                default:",
									"                    pm.test(\"Nothing happen with total_inventory_summary data\", function () {",
									"                        pm.expect(JSON.stringify(old_total_inventory_summary)).to.eql(JSON.stringify(total_inventory_summary));",
									"                    });",
									"                    break;",
									"            }",
									"",
									"            postman.setNextRequest(\"get_list_inventory_branch\"); // get_list_inventory_branch",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get inventory summary, end test\", jsData);",
									"    postman.setNextRequest(null);",
									"}  ",
									"",
									"let rep = {",
									"    \"data\": {",
									"        \"count_inventory_product\": 0,",
									"        \"inventory_value\": 0,",
									"        \"total_inventory_low\": 0,",
									"        \"total_non_inventory_over\": 0",
									"    }",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/inventory/overview",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"inventory",
								"overview"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_list_inventory_branch",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let configs = pm.environment.get(\"C-configs\");",
									"    let total_pages = 1;",
									"    let total_records = 0;",
									"    try {",
									"        total_pages = jsData.meta.total_pages;",
									"        total_records = jsData.meta.total_rows;",
									"    } catch {",
									"        console.log(\"currently, this branch with null data\");",
									"    }",
									"    let page = pm.environment.get(\"C-page\");",
									"",
									"    let list_inventory_sku_branch, old_list_inventory_sku_branch;",
									"    switch(testcase){",
									"        case 2:",
									"            list_inventory_sku_branch = pm.environment.get(\"C-list_inventory_sku_branch\");",
									"            if(!list_inventory_sku_branch){",
									"                list_inventory_sku_branch = [];",
									"            }",
									"            break;",
									"        case 5: case 8:",
									"            old_list_inventory_sku_branch = pm.environment.get(\"C-old_list_inventory_sku_branch\");",
									"            if(!old_list_inventory_sku_branch){",
									"                old_list_inventory_sku_branch = pm.environment.get(\"C-list_inventory_sku_branch\");",
									"                pm.environment.unset(\"C-list_inventory_sku_branch\");",
									"                pm.environment.set(\"C-old_list_inventory_sku_branch\",old_list_inventory_sku_branch);",
									"            }",
									"",
									"            list_inventory_sku_branch = pm.environment.get(\"C-list_inventory_sku_branch\");",
									"            if(!list_inventory_sku_branch){",
									"                list_inventory_sku_branch = [];",
									"            }",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow\");",
									"            break;",
									"    }",
									"",
									"    let list_sku_use_create = pm.environment.get(\"C-list_sku_use_create\"); // chỉ lấy inventory tương ứng",
									"    for(let j in list_sku_use_create){",
									"        for(let i in jsData.data){",
									"            if(jsData.data[i].sku_id == list_sku_use_create[j].sku_id){",
									"                list_inventory_sku_branch[list_inventory_sku_branch.length] = {",
									"                    \"sku_id\":jsData.data[i].sku_id,",
									"                    \"sku_code\":jsData.data[i].sku_code,",
									"                    \"sku_name\":jsData.data[i].sku_name,",
									"                    \"product_name\":jsData.data[i].product_name,",
									"                    \"sale_price\":jsData.data[i].sale_price,",
									"                    \"cost_price\":jsData.data[i].cost_price,",
									"                    \"selling_price\":jsData.data[i].selling_price,",
									"                    \"sold_quantity\":jsData.data[i].sold_quantity,",
									"                    \"uom\":jsData.data[i].uom,",
									"                    \"total_quantity\":jsData.data[i].total_quantity, ",
									"                    \"total_inventory_value\":jsData.data[i].total_inventory_value, ",
									"                    \"total_can_pick_quantity\":jsData.data[i].total_can_pick_quantity, ",
									"                    \"total_delivery_quantity\":jsData.data[i].total_delivery_quantity",
									"                }",
									"                break;",
									"            }",
									"        }",
									"    }",
									"    pm.environment.set(\"C-list_inventory_sku_branch\",list_inventory_sku_branch);",
									"",
									"    if(page >= total_pages || list_inventory_sku_branch.length == list_sku_use_create.length){",
									"        pm.environment.unset(\"C-page\");",
									"        pm.environment.unset(\"C-page_size\");",
									"",
									"        let old_total_inventory_sku_branch = pm.environment.get(\"C-total_inventory_sku_branch\");",
									"        switch(testcase){",
									"            case 2:",
									"                pm.test(\"got total_inventory_sku_branch \" + total_records, function () {",
									"                    pm.expect(total_records != 0).to.be.true;",
									"                });",
									"                pm.environment.set(\"C-total_inventory_sku_branch\",total_records);",
									"                console.log(\"list_inventory_sku_branch: \",list_inventory_sku_branch);",
									"",
									"                postman.setNextRequest(\"get_inventory_overview_branch\"); // get_inventory_overview_branch, get_list_batch",
									"                break;",
									"            case 5: case 8:",
									"                if(configs.is_the_same_branch){",
									"                    // xử lý data như list inventory",
									"                    let po_obj = pm.environment.get(\"C-po_obj\");",
									"                    // console.log(\"list_sku_use_create: \", list_sku_use_create);",
									"",
									"                    let count_sku = 0;",
									"                    switch(configs.create_po_status){",
									"                        case \"completed\":",
									"                            for(let i in list_inventory_sku_branch){",
									"                                for(let j in old_list_inventory_sku_branch){",
									"                                    if(list_inventory_sku_branch[i].sku_id == old_list_inventory_sku_branch[j].sku_id){",
									"                                        count_sku++;",
									"                                        console.log(\"SKU \" + list_inventory_sku_branch[i].sku_id + \" of product \" + list_inventory_sku_branch[i].product_name);",
									"                                        // total_quantity",
									"                                        let exchange_quantity_j = 0, exchange_value_j = 0;",
									"                                        for(let k in po_obj.items){",
									"                                            if(list_inventory_sku_branch[i].sku_id == po_obj.items[k].sku_id){",
									"                                                if(po_obj.items[k].batches.length > 0){",
									"                                                    for(let l in po_obj.items[k].batches){",
									"                                                        exchange_quantity_j += po_obj.items[k].batches[l].quantity;",
									"                                                        exchange_value_j += po_obj.items[k].batches[l].quantity * list_inventory_sku_branch[i].cost_price;",
									"                                                    }",
									"                                                } else {",
									"                                                    exchange_quantity_j += po_obj.items[k].quantity;",
									"                                                    exchange_value_j += po_obj.items[k].quantity * list_inventory_sku_branch[i].cost_price;",
									"                                                }",
									"                                                po_obj.items[k].exchange_quantity = exchange_quantity_j;",
									"                                                po_obj.items[k].exchange_value = exchange_value_j;",
									"                                            }",
									"                                        }",
									"                                        pm.test(\"--- total_quantity increate \" + exchange_quantity_j, function () {",
									"                                            pm.expect(old_list_inventory_sku_branch[j].total_quantity + exchange_quantity_j).to.eql(list_inventory_sku_branch[i].total_quantity);",
									"                                        });",
									"",
									"                                        // total_inventory_value",
									"                                        pm.test(\"--- total_inventory_value increase \" + exchange_value_j, function () {",
									"                                            pm.expect(old_list_inventory_sku_branch[j].total_inventory_value + exchange_value_j).to.eql(list_inventory_sku_branch[i].total_inventory_value);",
									"                                        });",
									"",
									"                                        // total_can_pick_quantity",
									"                                        pm.test(\"--- total_can_pick_quantity increase \" + exchange_quantity_j, function () {",
									"                                            pm.expect(old_list_inventory_sku_branch[j].total_can_pick_quantity + exchange_quantity_j).to.eql(list_inventory_sku_branch[i].total_can_pick_quantity);",
									"                                        });",
									"",
									"                                        // total_delivery_quantity",
									"                                        pm.test(\"--- Nothing happen with total_delivery_quantity\", function () {",
									"                                            pm.expect(old_list_inventory_sku_branch[j].total_delivery_quantity).to.eql(list_inventory_sku_branch[i].total_delivery_quantity);",
									"                                        });",
									"                                        break;",
									"                                    }",
									"                                }",
									"                            }",
									"",
									"                            pm.test(\"Found all sku inventory to check \" + list_sku_use_create.length, function () {",
									"                                pm.expect(count_sku).to.eql(list_sku_use_create.length);",
									"                            });",
									"                            break;",
									"                        case \"saved\":",
									"                            pm.test(\"Nothing happen with list_inventory_sku_branch data\", function () {",
									"                                pm.expect(JSON.stringify(old_list_inventory_sku_branch)).to.eql(JSON.stringify(list_inventory_sku_branch));",
									"                            });",
									"                            break;",
									"                        case \"draft\":",
									"                        default:",
									"                            pm.test(\"Nothing happen with list_inventory_sku_branch data\", function () {",
									"                                pm.expect(JSON.stringify(old_list_inventory_sku_branch)).to.eql(JSON.stringify(list_inventory_sku_branch));",
									"                            });",
									"                            break;",
									"                    }",
									"                } else {",
									"                    // data không đổi",
									"                    pm.test(\"nothing happen with total_inventory_sku_branch\", function () {",
									"                        pm.expect(old_total_inventory_sku_branch).to.eql(total_records);",
									"                    });",
									"                }",
									"",
									"                postman.setNextRequest(\"get_inventory_overview_branch\"); // get_inventory_overview_branch",
									"                break;",
									"            default:",
									"                console.log(\"Missing flow\");",
									"                postman.setNextRequest(null);",
									"                break;",
									"        }",
									"    } else {",
									"        page++;",
									"        pm.environment.set(\"C-page\",page);",
									"",
									"        console.log(\"view next page (\" + page + \") to get more inventory on branch \" + pm.environment.get(\"C-filter_branch_id\"));",
									"        postman.setNextRequest(\"get_list_inventory_branch\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get list sku in inventory, end test\", jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"/**",
									" * API check inventory cần check ",
									" * \"\": all",
									" * string: 1 branch",
									" * string, string ... : n branch",
									" * Note:",
									" */",
									"",
									"let page = pm.environment.get(\"C-page\");",
									"",
									"if(!page){",
									"    page = 1;",
									"    pm.environment.set(\"C-page\",page);",
									"",
									"    let page_size = 50;",
									"    pm.environment.set(\"C-page_size\",page_size);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/inventory/get-list?page={{C-page}}&page_size={{C-page_size}}&branch_id={{C-filter_branch_id}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"inventory",
								"get-list"
							],
							"query": [
								{
									"key": "list_contact_ids",
									"value": "",
									"disabled": true
								},
								{
									"key": "page",
									"value": "{{C-page}}"
								},
								{
									"key": "page_size",
									"value": "{{C-page_size}}"
								},
								{
									"key": "search",
									"value": "",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "asc",
									"disabled": true
								},
								{
									"key": "status",
									"value": "",
									"disabled": true
								},
								{
									"key": "category_ids",
									"value": "",
									"disabled": true
								},
								{
									"key": "branch_id",
									"value": "{{C-filter_branch_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get_inventory_overview_branch",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let configs = pm.environment.get(\"C-configs\");",
									"    let total_inventory_summary_branch = null;",
									"    try {",
									"        total_inventory_summary_branch = jsData.data;",
									"    } catch {",
									"        console.log(\"Missing meta data\");",
									"    }",
									"",
									"    let old_total_inventory_summary_branch = pm.environment.get(\"C-total_inventory_summary_branch\");",
									"    switch(testcase){",
									"        case 2:",
									"            pm.test(\"got total_inventory_summary_branch\", function () {",
									"                pm.expect(total_inventory_summary_branch != null).to.be.true;",
									"            });",
									"            pm.environment.set(\"C-total_inventory_summary_branch\",total_inventory_summary_branch);",
									"",
									"             postman.setNextRequest(\"get_list_batch\"); // get_list_batch",
									"            break;",
									"        case 5: case 8:",
									"            let po_obj = pm.environment.get(\"C-po_obj\");",
									"            console.log(\"old: \", old_total_inventory_summary_branch);",
									"            console.log(\"new: \", total_inventory_summary_branch);",
									"",
									"            if(configs.is_the_same_branch){",
									"                // xử lý data như inventory overview",
									"                let count_exchange_inventory = 0, value_exchange_inventory = 0;",
									"                switch(configs.create_po_status){",
									"                    case \"completed\":",
									"                        for(let i in po_obj.items){",
									"                            count_exchange_inventory += po_obj.items[i].exchange_quantity;",
									"                            if(po_obj.items[i].batches.length > 0){",
									"                                for(let j in po_obj.items[i].batches){",
									"                                    value_exchange_inventory += po_obj.items[i].batches[j].cost_per_line * po_obj.items[i].batches[j].quantity;",
									"                                }",
									"                            } else {",
									"                                // value_exchange_inventory += po_obj.items[i].exchange_value;",
									"                                value_exchange_inventory += po_obj.items[i].cost_per_line * po_obj.items[i].quantity;",
									"                            }",
									"                        }",
									"",
									"                        // inventory_value",
									"                        pm.test(\"inventory_value increase \" + value_exchange_inventory, function () {",
									"                            pm.expect(old_total_inventory_summary_branch.inventory_value + value_exchange_inventory).to.eql(total_inventory_summary_branch.inventory_value);",
									"                        });",
									"",
									"                        // count_inventory_product",
									"                        pm.test(\"count_inventory_product increase \" + count_exchange_inventory, function () {",
									"                            pm.expect(old_total_inventory_summary_branch.count_inventory_product + count_exchange_inventory).to.eql(total_inventory_summary_branch.count_inventory_product);",
									"                        });",
									"",
									"                        // total_inventory_low",
									"                        pm.test(\"Nothing happen with total_inventory_low\", function () {",
									"                            pm.expect(old_total_inventory_summary_branch.total_inventory_low).to.eql(total_inventory_summary_branch.total_inventory_low);",
									"                        });",
									"",
									"                        // total_non_inventory_over",
									"                        pm.test(\"Nothing happen with total_non_inventory_over\", function () {",
									"                            pm.expect(old_total_inventory_summary_branch.total_non_inventory_over).to.eql(total_inventory_summary_branch.total_non_inventory_over);",
									"                        });",
									"                        break;",
									"                    case \"saved\": // CHƯA VÀO KHO NÊN KO THAY ĐỔI GÌ CẢ",
									"                        pm.test(\"Nothing happen with total_inventory_summary_branch data\", function () {",
									"                            pm.expect(JSON.stringify(old_total_inventory_summary_branch)).to.eql(JSON.stringify(total_inventory_summary_branch));",
									"                        });",
									"                        break;",
									"                    case \"draft\":",
									"                    default:",
									"                        pm.test(\"Nothing happen with total_inventory_summary_branch data\", function () {",
									"                            pm.expect(JSON.stringify(old_total_inventory_summary_branch)).to.eql(JSON.stringify(total_inventory_summary_branch));",
									"                        });",
									"                        break;",
									"                }",
									"            } else {",
									"                // data không đổi",
									"                pm.test(\"nothing happen with total_inventory_summary_branch\", function () {",
									"                    pm.expect(JSON.stringify(total_inventory_summary_branch)).to.eql(JSON.stringify(old_total_inventory_summary_branch));",
									"                });",
									"            }",
									"",
									"            postman.setNextRequest(\"get_list_posting\"); // get_list_posting",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get inventory summary, end test\", jsData);",
									"    postman.setNextRequest(null);",
									"}  "
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/inventory/overview?branch_id={{C-filter_branch_id}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"inventory",
								"overview"
							],
							"query": [
								{
									"key": "branch_id",
									"value": "{{C-filter_branch_id}}"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"let configs = {",
					"    \"is_use_email\":true,",
					"    \"limit_page\":10,",
					"    \"timeout\":12000, // miliseconds => timeout to call API",
					"    // \"is_buyer_gen\":false,",
					"    // \"is_use_the_same_product_price\":false,",
					"    \"sku_type\":\"batch_product\", // physical, imei_product, batch_product, book_product, mix",
					"    \"create_po_status\":\"completed\", // draft => lưu nháp, saved => chờ nhập hàng, completed => hoàn thành (không thể edit/nhập)",
					"    \"total_sku\":3,",
					"    // \"none_uuid\":\"00000000-0000-0000-0000-000000000000\", // 8-4-4-4-12",
					"    \"is_the_same_branch\":true, // true: branch tạo po và branch check là giống nhau, false: khác nhau",
					"    // \"test_payment_method\":\"va_galaxy\" // bank_transfer, viet_qr_pro_mb, va_galaxy",
					"}",
					"",
					"pm.environment.set(\"C-configs\",configs);",
					"// console.log(\"configs: \",configs);",
					"",
					"/**",
					" * API cần check ",
					" * \"\": all",
					" * string: 1 branch",
					" * string, string ... : n branch",
					" * Note:",
					" * - Tạm thời random branch để check",
					" * - Apply branch theo user's role để test đúng và đa dạng case: user A branch 1, tạo nhập kho cho SP tại branch 1, user B branch 2 ko thấy, user C all branch thấy ...",
					" */"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"// ====================================== parser cURL",
					"function parseCURL(request_api){",
					"    let curl = \"\";",
					"    switch(request_api.method){",
					"        case \"PUT\":",
					"            curl = \"curl --location --request PUT \";",
					"            break;",
					"        case \"PATCH\":",
					"            curl = \"curl --location --request PATCH \";",
					"            break;",
					"        case \"DELETE\":",
					"            curl = \"curl --location --request DELETE \";",
					"            break;",
					"        default:",
					"            curl = \"curl --location \";",
					"            break;",
					"    }",
					"    curl += \"'\" + request_api.url.protocol + \"://\"",
					"    // host",
					"    for(let i in request_api.url.host){",
					"        if(i >= request_api.url.host.length - 1){",
					"            curl += request_api.url.host[i] + \"/\";",
					"        } else {",
					"            curl += request_api.url.host[i] + \".\";",
					"        }",
					"    }",
					"    // path",
					"    for(let i in request_api.url.path){",
					"        if(i >= request_api.url.path.length - 1){",
					"            curl += request_api.url.path[i];",
					"        } else {",
					"            curl += request_api.url.path[i] + \"/\";",
					"        }",
					"    }",
					"    // query (if have)",
					"    if(\"query\" in request_api.url){",
					"        if(request_api.url.length > 0){",
					"            curl += \"? \";",
					"            for(let i in request_api.url.query){",
					"                if(i >= request_api.url.query.length - 1){",
					"                    curl += request_api.url.query[i].key + \"=\" + request_api.url.query[i].value + \"' \";",
					"                } else {",
					"                    curl += request_api.url.query[i].key + \"=\" + request_api.url.query[i].value + \"&\";",
					"                }",
					"            }",
					"        } else {",
					"            curl += \"' \";",
					"        }",
					"    } else {",
					"        curl += \"' \";",
					"    }",
					"    // header",
					"    for(let i in request_api.header){",
					"        if(i >= request_api.header.length - 1){",
					"            curl += \"--header '\" + request_api.header[i].key + \": \" + request_api.header[i].value + \"'\";",
					"        } else {",
					"            curl += \"--header '\" + request_api.header[i].key + \": \" + request_api.header[i].value + \"' \";",
					"        }",
					"    }",
					"    switch(request_api.method){",
					"        case \"POST\":",
					"            curl += \" --data '\" + request_api.body.raw + \"'\"",
					"            break;",
					"        case \"PUT\": case \"PATCH\":",
					"            curl += \" --data-raw '\" + request_api.body.raw + \"'\"",
					"            break;",
					"        default:",
					"            break;",
					"    }",
					"    console.log(curl);",
					"    return curl;",
					"}",
					"const request_api = pm.request.toJSON();",
					"parseCURL(request_api);"
				]
			}
		}
	]
}