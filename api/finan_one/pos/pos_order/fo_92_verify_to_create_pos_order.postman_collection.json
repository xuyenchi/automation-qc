{
	"info": {
		"_postman_id": "98d9f1d5-a0ce-4a0d-8dbb-947849759a42",
		"name": "fo_92_verify_to_create_pos_order",
		"description": "### Testsuite: Verify to create new pos-order\n\n###### Steps:\n\n1. Login\n    \n    1. owner account => owner_token => random branch để tạo PO\n        \n    2. \\[NY\\] accountant account => accountant_token\n        \n    3. \\[NY\\] staff account => staff_token\n        \n    4. \\[NY\\] ... (\\*)\n        \n    5. Verify token => get business_id\n        \n    6. Get business detail => get branch_id (id tạo) & filter_branch_id (id check)\n        \n    7. Get business config => get tax_mode, discount_mode\n        \n2. Get data\n    \n    1. contact / get list contact => get all list & random 1 on them, get payable - receivable\n        \n    2. COA account / get list account => save internal_account_obj (credit_account, discount_account)\n        \n    3. account cash_n_bank / get list bank account => use to create invoice with payment method bank_transfer\n        \n    4. ~~product / get list product => save all products (link with coa) (\\*1)~~\n        \n    5. sku / get list sku => get some product to create order (\\*1)\n        \n    6. tax / get list tax => get a tax\n        \n    7. promotion / get list promotion => get a promotion\n        \n    8. surcharge / get list surcharge => get some surcharge\n        \n    9. inventory / get list inventory => get data\n        \n    10. inventory / get inventory overview => get data\n        \n    11. \\[NY\\] inventory / get list inventory branch => get data\n        \n    12. \\[NY\\] inventory / get inventory overview branch => get data\n        \n    13. batch / get list batch => get total only\n        \n    14. batch / get list batch by sku => get data matching with sku at step 2.e (all batch)\n        \n    15. batch / get batch overview => get data\n        \n    16. \\[NY\\] batch / get list batch branch => get data (total only)\n        \n    17. \\[NY\\] batch / get list batch by sku branch => get data\n        \n    18. \\[NY\\] batch / get over batch branch => get data\n        \n    19. \\[NY\\] posting / get list posting => get all with type (debit/credit)\n        \n    20. pos-order / get list order => get data\n        \n3. Check calculate pos-order\n    \n4. Create (processing / completed) pos-order\n    \n    1. Unhappy case: ... update & handle later\n        \n    2. Happy case: successful\n        \n5. Check data\n    \n    1. pos-order / list order => new order with correct data\n        \n    2. pos-order / order detail => had order with correct data\n        \n    3. buyer order / buyer view order detail\n        \n    4. contact / get list contact => check payable, receivable nothing happen\n        \n    5. inventory / get list inventory => check data\n        \n    6. inventory / get inventory overview => check data\n        \n    7. \\[NY\\] inventory / get list inventory branch => check data\n        \n    8. \\[NY\\] inventory / get inventory overview branch => check data\n        \n    9. batch / get list batch => check data\n        \n    10. batch / get batch overview => check data\n        \n    11. \\[NY\\] batch / get list batch branch => check data\n        \n    12. \\[NY\\] batch / get over batch branch => check data\n        \n    13. posting / list posting => nothing happen\n        \n\n###### Note:\n\n- (\\*1) check 1 sku physical, 1 sku batch_product, 1 sku imei_product\n    \n- batch_product: Mặc định bật tồn kho (ko thể tắt) + Ẩn đi field Tồn kho ban đầu (ko thể input vì sp theo lô tồn kho đi theo nhập hàng, ko chỉnh sửa dc trực tiếp)\n    \n- imei_product: Mặc định bật tồn kho (ko thể tắt) + Mặc định check Cho phép bán tồn kho âm. Cho phép nhập Tồn kho ban đầu + Bỏ UOM (Sp theo Serial/ Imei ko có UOM)\n    \n- Hiện tại chỉ support tạo POS ORDER với uom gốc\n    \n- Chưa tích hợp shipment\n    \n- Tích hợp thêm thanh toán",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "282640"
	},
	"item": [
		{
			"name": "authen",
			"item": [
				{
					"name": "login",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// ============================= random characters",
									"function randomChars(length) {",
									"    var result           = '';",
									"    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
									"    var charactersLength = characters.length;",
									"    for ( var i = 0; i < length; i++ ) {",
									"        result += characters.charAt(Math.floor(Math.random() * charactersLength));",
									"    }",
									"   return result;",
									"}",
									"",
									"let testcase = 1;",
									"console.log(\"-------- Start Testsuite 92 --------\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let platform = [\"desktop-web\",\"mobile-web\",\"mobile-app\"];",
									"let configs = pm.environment.get(\"C-configs\");",
									"let payload;",
									"if(configs.is_use_email){",
									"    payload = {",
									"        \"app_version\": \"1.0.0\",",
									"        \"device_info\": {",
									"            \"id\": randomChars(7) + \"-\" + randomChars(4) + \"-\" + randomChars(4) + \"-\" + randomChars(4) + \"-\" + randomChars(12),",
									"            \"name\": \"IP name\",",
									"            \"os\": \"iphone\"",
									"        },",
									"        \"email\": pm.environment.get(\"SER-email\"), // pm.environment.get(\"SER-email\")",
									"        \"encrypted_password\": pm.environment.get(\"SER-password\"),",
									"        \"phone_number\": \"\",",
									"        \"platform_key\": platform[0]",
									"    }",
									"} else {",
									"    payload = {",
									"        \"app_version\": \"1.0.0\",",
									"        \"device_info\": {",
									"            \"id\": randomChars(7) + \"-\" + randomChars(4) + \"-\" + randomChars(4) + \"-\" + randomChars(4) + \"-\" + randomChars(12),",
									"            \"name\": \"IP name\",",
									"            \"os\": \"iphone\"",
									"        },",
									"        \"email\":\"\", // pm.environment.get(\"SER-email\")",
									"        \"encrypted_password\": pm.environment.get(\"SER-password\"),",
									"        \"phone_number\": pm.environment.get(\"SER-phone_number\"),",
									"        \"platform_key\": platform[0]",
									"    }",
									"}",
									"",
									"console.log(\"payload: \",payload);",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));",
									"pm.environment.set(\"C-testcase\",testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// const clRandom = pm.require('@chaule2906/cl-random');",
									"// console.log(\"debug: \" + clRandom.getRandomInt(1,5));",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    pm.test(\"System code is 102000\", function () {",
									"        pm.expect(jsData.code).to.eql(102000);",
									"    });",
									"",
									"    if(jsData.code == 102000){",
									"        let userToken = null;",
									"        try {",
									"            userToken = jsData.data.access_token;",
									"            pm.environment.set(\"C-userToken\",userToken);",
									"        } catch {",
									"            console.log(\"Can't get userToken\");",
									"        }",
									"",
									"        pm.test(\"Got userToken\", function () {",
									"            pm.expect(userToken != null).to.be.true;",
									"        });",
									"",
									"        let userInfo = jsData.data.user_info;",
									"",
									"        // show log",
									"        console.log(\"userInfo:\",JSON.stringify(userInfo));",
									"        pm.environment.set(\"C-userInfo\",userInfo);",
									"",
									"        postman.setNextRequest(\"verify_token_to_get_business\"); // verify_token_to_get_business",
									"    } else {",
									"        console.log(\"Can't get Token, end test\",jsData);",
									"        postman.setNextRequest(null);",
									"    }",
									"} else {",
									"    console.log(\"Can't login new account, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "x-locale",
								"value": "<string>",
								"description": "locale",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-user/api/v1/auth/login",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-user",
								"api",
								"v1",
								"auth",
								"login"
							]
						},
						"description": "Login User"
					},
					"response": []
				},
				{
					"name": "verify_token_to_get_business",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// verify token to get business",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = JSON.parse(responseBody);",
									"if(pm.response.code == 200 && jsData.code == 102000){",
									"    const jsData = pm.response.json();",
									"    pm.environment.set(\"C-user_id\",jsData.data.user_id);",
									"",
									"    let business_id = jsData.data.headers[\"x-business-id\"];",
									"    console.log(\"business_id: \" + business_id);",
									"    pm.environment.set(\"C-business_id\",business_id);",
									"",
									"    postman.setNextRequest(\"get_current_business\");",
									"} else {",
									"    console.log(\"Can't check token to get business_id, end test\");",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"token\": \"{{C-userToken}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-user/api/v1/auth/verify-token",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-user",
								"api",
								"v1",
								"auth",
								"verify-token"
							]
						},
						"description": "Login User"
					},
					"response": []
				},
				{
					"name": "get_current_business",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ============================= random number between min and max",
									"function getRandomInt(min, max) {",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    // console.log(\"Current business info: \", jsData.data);",
									"    let configs = pm.environment.get(\"C-configs\");",
									"    let branch_id = null, filter_branch_id = null, list_branch = [];",
									"    try {",
									"        list_branch = jsData.data.current_business.list_branch;",
									"        branch_id = list_branch[0].id; // getRandomInt(0,list_branch.length - 1)",
									"        if(configs.is_the_same_branch){",
									"            filter_branch_id = branch_id;",
									"        } else {",
									"            while(1){",
									"                filter_branch_id = list_branch[getRandomInt(0,list_branch.length - 1)].id;",
									"",
									"                if(branch_id != filter_branch_id) break;",
									"            }",
									"            // for(let i in list_branch){",
									"            //     if(list_branch[i].id != branch_id){",
									"            //         filter_branch_id = list_branch[i].id;",
									"            //         break;",
									"            //     }",
									"            // }",
									"        }",
									"        pm.environment.set(\"C-branch_id\",branch_id);",
									"        pm.environment.set(\"C-filter_branch_id\",filter_branch_id);",
									"    } catch {",
									"        console.log(\"Can't get branch id\");",
									"    }",
									"",
									"    pm.test(\"Got all branch \" + list_branch.length, function () {",
									"        pm.expect(list_branch != null).to.be.true;",
									"    });",
									"    pm.environment.set(\"C-list_branch\",list_branch);",
									"",
									"    pm.test(\"Got branch id \" + branch_id, function () {",
									"        pm.expect(branch_id != null).to.be.true;",
									"    });",
									"",
									"    // debug",
									"    for(let i in list_branch){",
									"        if(list_branch[i].id == branch_id){",
									"            console.log(\"Will create PO at branch \" + list_branch[i].branch_name);",
									"            break;",
									"        }",
									"    }",
									"    for(let i in list_branch){",
									"        if (list_branch[i].id == filter_branch_id){",
									"            console.log(\"Will check PO, Batch, Inventory at branch \" + list_branch[i].branch_name);",
									"            break;",
									"        }",
									"    }",
									"",
									"    let payment_method_list = [];",
									"    for(let i in jsData.data.list_payment_method){",
									"        if(jsData.data.list_payment_method[i].is_active){",
									"            payment_method_list[payment_method_list.length] = jsData.data.list_payment_method[i];",
									"        }",
									"    }",
									"",
									"    pm.test(\"Got payment_method_list \" + payment_method_list.length, function () {",
									"        pm.expect(payment_method_list.length > 0).to.be.true;",
									"    });",
									"    pm.environment.set(\"C-payment_method_list\",payment_method_list);",
									"    ",
									"    // let testcase = pm.environment.get(\"C-testcase\");",
									"    // testcase++;",
									"    // pm.environment.set(\"C-testcase\",testcase);",
									"    postman.setNextRequest(\"get_business_config\"); // get_business_config",
									"} else {",
									"    console.log(\"Can't get business detail, end test\", jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-business/api/v1/business/get-current",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-business",
								"api",
								"v1",
								"business",
								"get-current"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_business_config",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ============================= random number between min and max",
									"function getRandomInt(min, max) {",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    // console.log(\"Current business config: \", jsData.data);",
									"    // let configs = pm.environment.get(\"C-configs\");",
									"    let discount_mode = null, tax_mode = null;",
									"    try {",
									"        tax_mode = jsData.data.tax_mode;",
									"        discount_mode = jsData.data.discount_mode;",
									"",
									"        pm.environment.set(\"C-discount_mode\",discount_mode);",
									"        pm.environment.set(\"C-tax_mode\",tax_mode);",
									"    } catch {",
									"        console.log(\"Can't get tax_mode, discount_mode\");",
									"    }",
									"",
									"    pm.test(\"Got config discount_mode, tax_mode\", function () {",
									"        pm.expect(tax_mode != null && discount_mode != null).to.be.true;",
									"    });",
									"",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    testcase++;",
									"    pm.environment.set(\"C-testcase\",testcase);",
									"    postman.setNextRequest(\"get_list_contact\"); // get_list_contact",
									"} else {",
									"    console.log(\"Can't get business detail, end test\", jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-business/api/v1/invoice-setting/get-by-business?business_id={{C-business_id}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-business",
								"api",
								"v1",
								"invoice-setting",
								"get-by-business"
							],
							"query": [
								{
									"key": "business_id",
									"value": "{{C-business_id}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "contact",
			"item": [
				{
					"name": "get_list_contact",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// const clRandom = pm.require('@chaule2906/cl-random');",
									"// ============================= random number between min and max",
									"function getRandomInt(min, max) {",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = pm.response.json();",
									"if(pm.response.code == 200 && jsData.code == 102000){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let total_pages = jsData.meta.total_pages;",
									"    let page = pm.environment.get(\"C-page\");",
									"",
									"    let list_contact, old_list_contact;",
									"    switch(testcase){",
									"        case 2:",
									"            list_contact = pm.environment.get(\"C-list_contact\");",
									"            if(!list_contact){",
									"                list_contact = [];",
									"            }",
									"            break;",
									"        case 5: case 8:",
									"            old_list_contact = pm.environment.get(\"C-old_list_contact\");",
									"            if(!old_list_contact){",
									"                old_list_contact = pm.environment.get(\"C-list_contact\");",
									"                pm.environment.unset(\"C-list_contact\");",
									"                pm.environment.set(\"C-old_list_contact\",old_list_contact);",
									"            }",
									"",
									"            list_contact = pm.environment.get(\"C-list_contact\");",
									"            if(!list_contact){",
									"                list_contact = [];",
									"            }",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow\");",
									"            break;",
									"    }",
									"",
									"    for(let item in jsData.data){",
									"        if(jsData.data[item].contact_name.includes(\"[API]\")){",
									"            list_contact[list_contact.length] = {",
									"                \"contact_id\":jsData.data[item].id,",
									"                \"name\":jsData.data[item].contact_name,",
									"                \"phone_number\":jsData.data[item].phone_number,",
									"                \"email\":jsData.data[item].email,",
									"                \"pos_order_config\":jsData.data[item].pos_order_config,",
									"                \"tax_code\":jsData.data[item].tax_code,",
									"                \"payment_methods\":jsData.data[item].payment_methods,",
									"                \"total_payable\":jsData.data[item].total_payable,",
									"                \"total_receivable\":jsData.data[item].total_receivable",
									"            }",
									"        }",
									"    }",
									"    pm.environment.set(\"C-list_contact\",list_contact);",
									"",
									"    if(page >= total_pages){",
									"        // must clear page & page_size",
									"        pm.environment.unset(\"C-page\");",
									"        pm.environment.unset(\"C-page_size\");",
									"",
									"        let contact_obj, old_contact_obj;",
									"        let pos_order_obj = pm.environment.get(\"C-pos_order_obj\"); ",
									"        switch(testcase){",
									"            case 2:",
									"                pm.test(\"Got all contact! \" + list_contact.length, function () {",
									"                    pm.expect(list_contact.length > 0).to.be.true;",
									"                });",
									"",
									"                // let contact_obj = list_contact[clRandom.getRandomInt(0,list_contact.length - 1)];",
									"                contact_obj = list_contact[getRandomInt(0,list_contact.length - 1)];",
									"                console.log(\"will create pos_order for contact: \", contact_obj);",
									"                pm.environment.set(\"C-contact_obj\",contact_obj);",
									"                pm.environment.set(\"C-contact_id\",contact_obj.contact_id);",
									"",
									"                postman.setNextRequest(\"get_list_internal_account\"); // get_list_internal_account",
									"                break;",
									"            case 5: case 8:",
									"                old_contact_obj = pm.environment.get(\"C-contact_obj\");",
									"                // console.log(\"debug list_contact: \", list_contact);",
									"                for(let i in list_contact){",
									"                    if(list_contact[i].contact_id == old_contact_obj.contact_id){",
									"                        contact_obj = list_contact[i];",
									"                        // console.log(\"debug: \", contact_obj);",
									"                        break;",
									"                    }",
									"                }",
									"",
									"                // tạo pos_order sẽ tăng total_receivable cho customer",
									"                pm.test(\"total_receivable increase \" + pos_order_obj.exp_total_amount, function () {",
									"                    console.log(\"old: \" + old_contact_obj.total_receivable);",
									"                    console.log(\"new: \" + contact_obj.total_receivable);",
									"                    pm.expect(contact_obj.total_receivable).to.eql(old_contact_obj.total_receivable + pos_order_obj.exp_total_amount);",
									"                });",
									"",
									"                postman.setNextRequest(\"get_list_inventory\"); // get_list_inventory, get_list_posting",
									"                break;",
									"            default:",
									"                break;",
									"        }",
									"    } else {",
									"        page++;",
									"        pm.environment.set(\"C-page\",page);",
									"",
									"        console.log(\"view next page (\" + page + \") to get more contact\");",
									"        postman.setNextRequest(\"get_list_contact\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get list contact, end test\");",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let configs = pm.environment.get(\"C-configs\");",
									"// if(testcase == 5 || testcase == 8){",
									"//     setTimeout(function(){}, configs.timeout);",
									"// }",
									"",
									"let page = pm.environment.get(\"C-page\");",
									"",
									"if(!page){",
									"    page = 1;",
									"    pm.environment.set(\"C-page\",page);",
									"",
									"    let page_size = 50;",
									"    pm.environment.set(\"C-page_size\",page_size);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-business/api/v1/contact/get-list?business_id={{C-business_id}}&page={{C-page}}&page_size={{C-page_size}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-business",
								"api",
								"v1",
								"contact",
								"get-list"
							],
							"query": [
								{
									"key": "search",
									"value": "",
									"disabled": true
								},
								{
									"key": "business_id",
									"value": "{{C-business_id}}"
								},
								{
									"key": "page",
									"value": "{{C-page}}"
								},
								{
									"key": "page_size",
									"value": "{{C-page_size}}"
								},
								{
									"key": "sort",
									"value": "",
									"disabled": true
								},
								{
									"key": "option",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "account coa",
			"item": [
				{
					"name": "get_list_internal_account",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let configs = pm.environment.get(\"C-configs\");",
									"    let coa = [];",
									"    try {",
									"        for(let i in jsData.data){",
									"            let sub_group_i = [];",
									"            for(let j in jsData.data[i].sub_group){",
									"                let accounts_j = [];",
									"                for(let k in jsData.data[i].sub_group[j].accounts){",
									"                    accounts_j[accounts_j.length] = {",
									"                        \"account_name\":jsData.data[i].sub_group[j].accounts[k].account_name,",
									"                        \"account_id\":jsData.data[i].sub_group[j].accounts[k].id,",
									"                        \"account_name_custom\":jsData.data[i].sub_group[j].accounts[k].account_name_custom,",
									"                        \"account_type\":jsData.data[i].sub_group[j].accounts[k].account_type,",
									"                        \"business_id\":jsData.data[i].sub_group[j].accounts[k].business_id,",
									"                        \"account_source\":jsData.data[i].sub_group[j].accounts[k].account_source,",
									"                        \"account_type\":jsData.data[i].sub_group[j].accounts[k].account_type,",
									"                        \"account_number\":jsData.data[i].sub_group[j].accounts[k].account_number,",
									"                        \"coa_type\":jsData.data[i].sub_group[j].accounts[k].coa_type,",
									"                        \"status\":jsData.data[i].sub_group[j].accounts[k].status,",
									"                        \"parent_account_id\":jsData.data[i].sub_group[j].accounts[k].parent_account_id,",
									"                        \"description\":jsData.data[i].sub_group[j].accounts[k].description,",
									"                        \"open_amount\":jsData.data[i].sub_group[j].accounts[k].open_amount,",
									"                        \"currency\":jsData.data[i].sub_group[j].accounts[k].currency",
									"                    }",
									"",
									"                    if(jsData.data[i].sub_group[j].accounts[k].account_key == \"A3001\"){ // coa đổi key account_receivable => A3001",
									"                        pm.environment.set(\"C-account_receivable\",jsData.data[i].sub_group[j].accounts[k]);",
									"                    } else if (jsData.data[i].sub_group[j].accounts[k].account_key == \"C1002\") { // coa đổi key Discount => C1002",
									"                        pm.environment.set(\"C-discount\",jsData.data[i].sub_group[j].accounts[k]);",
									"                    } else if (jsData.data[i].sub_group[j].accounts[k].account_key == \"C1001\") {",
									"                        pm.environment.set(\"C-sale_income\",jsData.data[i].sub_group[j].accounts[k]);",
									"                    } else if (jsData.data[i].sub_group[j].accounts[k].account_key == \"B2001\") {",
									"                        pm.environment.set(\"C-sale_tax\",jsData.data[i].sub_group[j].accounts[k]);",
									"                    } else if (jsData.data[i].sub_group[j].accounts[k].account_key == \"D1001\") {",
									"                        pm.environment.set(\"C-history_cost\",jsData.data[i].sub_group[j].accounts[k]);",
									"                    }",
									"                }",
									"",
									"                sub_group_i[sub_group_i.length] = {",
									"                    \"sub_group_name\":jsData.data[i].sub_group[j].name,",
									"                    \"sub_group_id\":jsData.data[i].sub_group[j].id,",
									"                    \"sub_group_description\":jsData.data[i].sub_group[j].description,",
									"                    \"accounts\":accounts_j",
									"                }",
									"            }",
									"",
									"            coa[coa.length] = {",
									"                \"group_name\":jsData.data[i].name,",
									"                \"value\":jsData.data[i].value,",
									"                \"index\":jsData.data[i].index,",
									"                \"sub_group\":sub_group_i",
									"            }",
									"        }",
									"    } catch {",
									"        console.log(\"can't get all account in coa\");",
									"    }",
									"",
									"    pm.test(\"Got coa of this user's business\", function () {",
									"        pm.expect(coa.length > 0).to.be.true;",
									"    });",
									"",
									"    if(coa.length > 0){",
									"        // console.log(\"coa: \", coa);",
									"        pm.environment.set(\"C-coa\",coa);",
									"        let list_internal_account = [];",
									"",
									"        /**",
									"         * lấy những account_id sẽ bị ảnh hưởng bởi invoice để lưu thành array => PENDING (wait confirm with PO, DEV BE-FE)",
									"         */ ",
									"",
									"        pm.environment.set(\"C-list_internal_account\",list_internal_account);",
									"        postman.setNextRequest(\"get_list_payment_account\"); // get_list_payment_account",
									"    } else {",
									"        console.log(\"Can't get list internal account, end test \");",
									"        postman.setNextRequest(null);",
									"    }",
									"} else {",
									"    console.log(\"Can't get list internal account, end test \", jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "authorization",
								"value": "Bearer {{C-userToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-ledger/api/v1/account/get-list-setting?business_id={{C-business_id}}&coa_type=",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-ledger",
								"api",
								"v1",
								"account",
								"get-list-setting"
							],
							"query": [
								{
									"key": "business_id",
									"value": "{{C-business_id}}"
								},
								{
									"key": "coa_type",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get_internal_account_detail",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let list_internal_account = pm.environment.get(\"C-list_internal_account\");",
									"let pos = pm.environment.get(\"C-pos\");",
									"if(!pos){",
									"    pos = 0;",
									"    pm.environment.set(\"C-pos\",pos);",
									"}",
									"",
									"let internal_account_id = list_internal_account[pos].account_id;",
									"console.log(\"view detail account: \" + account_id);",
									"",
									"pm.environment.set(\"C-internal_account_id\",internal_account_id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    const jsData = pm.response.json();",
									"    // let testcase = pm.environment.get(\"C-testcase\");",
									"    console.log(\"Debug: \" + JSON.stringify(jsData));",
									"",
									"    let list_internal_account = pm.environment.get(\"C-list_internal_account\");",
									"    let pos = pm.environment.get(\"C-pos\");",
									"",
									"    if(pos >= list_internal_account.length - 1){",
									"        pm.environment.unset(\"C-pos\");",
									"",
									"        postman.setNextRequest(\"get_list_tax\"); // get_list_tax",
									"    } else {",
									"        pos++;",
									"        pm.environment.set(\"C-pos\",pos);",
									"",
									"        postman.setNextRequest(\"get_internal_account_detail\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get internal account detail, end test\");",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{finone_url}}​​/fo-ledger/api/v1/account/get-one/{{C-internal_account_id}}",
							"host": [
								"{{finone_url}}​​"
							],
							"path": [
								"fo-ledger",
								"api",
								"v1",
								"account",
								"get-one",
								"{{C-internal_account_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "account cash_n_bank",
			"item": [
				{
					"name": "get_list_payment_account",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let configs = pm.environment.get(\"C-configs\");",
									"",
									"    let list_bank_account = [], list_cash_account = [];",
									"    for(let j in jsData.data[0].accounts){",
									"        // if(jsData.data[0].accounts[j].provider_id != \"\"){ // remove va bank account out list",
									"        list_bank_account[list_bank_account.length] = {",
									"            \"account_id\":jsData.data[0].accounts[j].id,",
									"            \"account_name\":jsData.data[0].accounts[j].account_name,",
									"            \"status\":jsData.data[0].accounts[j].status,",
									"            \"external_account_id\":jsData.data[0].accounts[j].external_account_id,",
									"            \"provider_id\":jsData.data[0].accounts[j].provider_id",
									"        }",
									"",
									"        if(configs.use_payment_method == \"cash\"){",
									"            list_cash_account[list_cash_account.length] = {",
									"                \"account_id\":jsData.data[0].accounts[j].id,",
									"                \"account_name\":jsData.data[0].accounts[j].account_name,",
									"                \"status\":jsData.data[0].accounts[j].status,",
									"                \"total_balance_amount\":jsData.data[0].accounts[j].total_balance_amount",
									"            }",
									"            pm.environment.set(\"C-list_cash_account\",list_cash_account);",
									"        }",
									"        // }",
									"    }",
									"",
									"    switch(testcase){",
									"        case 2:",
									"            pm.test(\"Got list bank account\", function () {",
									"                pm.expect(list_bank_account.length > 0).to.be.true;",
									"            });",
									"            console.log(\"list_bank_account: \", list_bank_account);",
									"            pm.environment.set(\"C-list_bank_account\",list_bank_account);",
									"",
									"            postman.setNextRequest(\"get_list_sku\"); // get_list_product, get_list_sku",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get list payment account, end test\", jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-ledger/api/v1/account/get-list-sub?business_id={{C-business_id}}&sub_account_key=A1",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-ledger",
								"api",
								"v1",
								"account",
								"get-list-sub"
							],
							"query": [
								{
									"key": "business_id",
									"value": "{{C-business_id}}"
								},
								{
									"key": "sub_account_key",
									"value": "A1"
								},
								{
									"key": "account_type",
									"value": "link_bank,va_bank,galaxy_pay",
									"description": "system, default, manual",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get_list_bank",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"",
									"    let list_bank_account = [];",
									"    for(let j in jsData.data.accounts){",
									"        if(jsData.data.accounts[j].provider_id != \"\"){ // remove va bank account out list",
									"            list_bank_account[list_bank_account.length] = {",
									"                \"account_id\":jsData.data.accounts[j].id,",
									"                \"account_name\":jsData.data.accounts[j].name,",
									"                \"status\":jsData.data.accounts[j].status,",
									"                \"external_account_id\":jsData.data.accounts[j].external_account_id,",
									"                \"provider_id\":jsData.data.accounts[j].provider_id",
									"            }",
									"        }",
									"    }",
									"",
									"    switch(testcase){",
									"        case 2:",
									"            pm.test(\"Got list bank account\", function () {",
									"                pm.expect(list_bank_account.length > 0).to.be.true;",
									"            });",
									"            console.log(\"list_bank_account: \", list_bank_account);",
									"            pm.environment.set(\"C-list_bank_account\",list_bank_account);",
									"",
									"            postman.setNextRequest(\"get_list_product\"); // get_list_product",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get list payment account, end test\", jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-banking/api/v1/bank-account/get-list?page=1&page_size=20&sort",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-banking",
								"api",
								"v1",
								"bank-account",
								"get-list"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "page_size",
									"value": "20"
								},
								{
									"key": "sort",
									"value": null
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "product",
			"item": [
				{
					"name": "get_list_product",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let page = pm.environment.get(\"C-page\");",
									"",
									"if(!page){",
									"    page = 1;",
									"    pm.environment.set(\"C-page\",page);",
									"",
									"    let page_size = 50;",
									"    pm.environment.set(\"C-page_size\",page_size);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = pm.response.json();",
									"if(pm.response.code === 200 && jsData.code === 102000){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let total_pages = jsData.meta.total_pages;",
									"    let page = pm.environment.get(\"C-page\");",
									"",
									"    let list_product = pm.environment.get(\"C-list_product\");",
									"    if(!list_product){",
									"        list_product = [];",
									"    }",
									"",
									"    for(let item in jsData.data){",
									"        if(jsData.data[item].income_account_id !== 0 && jsData.data[item].product_link_account !== null){",
									"            list_product[list_product.length] = {",
									"                \"product_id\": jsData.data[item].id,",
									"                \"name\": jsData.data[item].product_name,",
									"                \"price\": jsData.data[item].list_sku[0].sale_price,",
									"                \"sku_code\": jsData.data[item].list_sku[0].sku_code,",
									"                \"sku_id\": jsData.data[item].list_sku[0].id,",
									"                \"income_account_id\": jsData.data[item].product_link_account.income_account_id,",
									"                \"expense_account_id\": jsData.data[item].product_link_account.expense_account_id,",
									"                \"income_taxes\": jsData.data[item].income_taxes,",
									"                \"expense_taxes\": jsData.data[item].expense_taxes",
									"            }",
									"        }",
									"    }",
									"    pm.environment.set(\"C-list_product\", list_product);",
									"",
									"    if(page >= total_pages){",
									"        pm.environment.unset(\"C-page\");",
									"        pm.environment.unset(\"C-page_size\");",
									"",
									"        pm.test(\"Got all valid product! \" + list_product.length, function () {",
									"            pm.expect(list_product.length > 0).to.be.true;",
									"        });",
									"",
									"        console.log(\"list_product: \", list_product);",
									"",
									"        postman.setNextRequest(\"\");",
									"    } else {",
									"        page++;",
									"        pm.environment.set(\"C-page\", page);",
									"",
									"        console.log(\"view next page (\" + page + \") to get more product\");",
									"        postman.setNextRequest(\"\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get list product, end test\", jsData);",
									"    postman.setNextRequest(null);",
									"}",
									"pm.test(\"Response time is less than 300ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(300);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "authorization",
								"value": "Bearer {{C-userToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-business/api/v1/product/get-list?business_id={{C-business_id}}&page={{C-page}}&page_size={{C-page_size}}&search=&sort=&get_account_id=true",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-business",
								"api",
								"v1",
								"product",
								"get-list"
							],
							"query": [
								{
									"key": "business_id",
									"value": "{{C-business_id}}"
								},
								{
									"key": "page",
									"value": "{{C-page}}"
								},
								{
									"key": "page_size",
									"value": "{{C-page_size}}"
								},
								{
									"key": "search",
									"value": ""
								},
								{
									"key": "sort",
									"value": ""
								},
								{
									"key": "get_account_id",
									"value": "true"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "sku",
			"item": [
				{
					"name": "get_list_sku",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let page = pm.environment.get(\"C-page\");",
									"",
									"if(!page){",
									"    page = 1;",
									"    pm.environment.set(\"C-page\",page);",
									"",
									"    let page_size = 50;",
									"    pm.environment.set(\"C-page_size\",page_size);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"/**",
									" *  =============================  func randNotDupe(min, max, total)",
									" * total: số lượng random, ko dc nhỏ hơn max-min+1",
									" * return: array",
									" */",
									"function randNotDupe(min, max, total){",
									"  let arrNum = []; // new empty array",
									"  let n, p;",
									"  for (let i = 0; i < total; i++) {",
									"    do {",
									"      n = Math.floor(Math.random() * (max - min + 1)) + min;",
									"      p = arrNum.includes(n);",
									"      if(!p){",
									"        arrNum.push(n);",
									"      }",
									"    }",
									"    while(p);",
									"  }",
									"  return arrNum;",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let configs = pm.environment.get(\"C-configs\");",
									"    let total_pages = jsData.meta.total_pages;",
									"    let page = pm.environment.get(\"C-page\");",
									"",
									"    let list_sku, old_list_sku;",
									"    switch(testcase){",
									"        case 2:",
									"            list_sku = pm.environment.get(\"C-list_sku\");",
									"            if(!list_sku){",
									"                list_sku = [];",
									"            }",
									"            break;",
									"        case 4:",
									"            old_list_sku = pm.environment.get(\"C-old_list_sku\");",
									"            if(!old_list_sku){",
									"                old_list_sku = pm.environment.get(\"C-list_sku\");",
									"                pm.environment.unset(\"C-list_sku\");",
									"                pm.environment.set(\"C-old_list_sku\",old_list_sku);",
									"            }",
									"",
									"            list_sku = pm.environment.get(\"C-list_sku\");",
									"            if(!list_sku){",
									"                list_sku = [];",
									"            }",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow\");",
									"            break;",
									"    }",
									"",
									"    let branch_id = pm.environment.get(\"C-branch_id\");",
									"    // should choice variant, non_variant, product to create po",
									"    for(let item in jsData.data){",
									"        if(jsData.data[item].is_in_business){",
									"            switch(configs.sku_type){",
									"                case \"physical\":",
									"                    if(jsData.data[item].sku_name.includes(\"[API] physical\") || jsData.data[item].product_type == configs.sku_type){ ",
									"                        // thêm điều kiện chi nhánh hiện tại phải có sản phẩm",
									"                        if(jsData.data[item].track_inventory){",
									"                            // sản phẩm có check tồn kho thì phải có list branch => sẽ xử lý thêm sau",
									"                            if(\"list_branches\" in jsData.data[item]){",
									"                                list_sku[list_sku.length] = {",
									"                                    \"sku_id\":jsData.data[item].id,",
									"                                    \"product_id\":jsData.data[item].product_id,",
									"                                    // \"account_id\":jsData.data[item].account_id,",
									"                                    \"sku_name\":jsData.data[item].sku_name,",
									"                                    \"sku_code\":jsData.data[item].sku_code,",
									"                                    \"sale_price\":jsData.data[item].sale_price,",
									"                                    \"cost_price\":jsData.data[item].cost_price,",
									"                                    \"product_type\":jsData.data[item].product_type,",
									"                                    \"selling_price\":jsData.data[item].selling_price,",
									"                                    \"sold_quantity\":jsData.data[item].sold_quantity,",
									"                                    \"track_inventory\":jsData.data[item].track_inventory,",
									"                                    \"uom\":jsData.data[item].uom,",
									"                                    \"weight\":jsData.data[item].weight,",
									"                                    \"weight_unit\":jsData.data[item].weight_unit,",
									"                                    \"list_branches\":jsData.data[item].list_branches",
									"                                    // \"warning_quantity\":jsData.data[item].warning_quantity",
									"                                    // \"list_attributes\":jsData.data[item].list_attributes",
									"                                }",
									"                            }",
									"                        } ",
									"                        else {",
									"                            // sp không có tồn kho thì ko cần lưu branch/batch",
									"                            list_sku[list_sku.length] = {",
									"                                \"sku_id\":jsData.data[item].id,",
									"                                \"product_id\":jsData.data[item].product_id,",
									"                                // \"account_id\":jsData.data[item].account_id,",
									"                                \"sku_name\":jsData.data[item].sku_name,",
									"                                \"sku_code\":jsData.data[item].sku_code,",
									"                                \"sale_price\":jsData.data[item].sale_price,",
									"                                \"cost_price\":jsData.data[item].cost_price,",
									"                                \"product_type\":jsData.data[item].product_type,",
									"                                \"selling_price\":jsData.data[item].selling_price,",
									"                                \"sold_quantity\":jsData.data[item].sold_quantity,",
									"                                \"track_inventory\":jsData.data[item].track_inventory,",
									"                                \"uom\":jsData.data[item].uom,",
									"                                \"weight\":jsData.data[item].weight,",
									"                                \"weight_unit\":jsData.data[item].weight_unit",
									"                                // \"warning_quantity\":jsData.data[item].warning_quantity",
									"                                // \"list_attributes\":jsData.data[item].list_attributes",
									"                            }",
									"                        }",
									"                    }",
									"                    break;",
									"                case \"batch_product\":",
									"                    if(jsData.data[item].sku_name.includes(\"[API] batch\") || jsData.data[item].product_type == configs.sku_type){",
									"                        // thêm điều kiện branch tạo đang có tồn kho > 0",
									"                        for(let j in jsData.data[item].list_branches){",
									"                            if(jsData.data[item].list_branches[j].branch_id == pm.environment.get(\"C-branch_id\") && jsData.data[item].list_branches[j].inventory_quantity > 0){",
									"                                list_sku[list_sku.length] = {",
									"                                    \"sku_id\":jsData.data[item].id,",
									"                                    \"product_id\":jsData.data[item].product_id,",
									"                                    // \"account_id\":jsData.data[item].account_id,",
									"                                    \"sku_name\":jsData.data[item].sku_name,",
									"                                    \"sku_code\":jsData.data[item].sku_code,",
									"                                    \"sale_price\":jsData.data[item].sale_price,",
									"                                    \"cost_price\":jsData.data[item].cost_price,",
									"                                    \"selling_price\":jsData.data[item].selling_price,",
									"                                    \"sold_quantity\":jsData.data[item].sold_quantity,",
									"                                    \"track_inventory\":jsData.data[item].track_inventory,",
									"                                    \"uom\":jsData.data[item].uom,",
									"                                    \"weight\":jsData.data[item].weight,",
									"                                    \"weight_unit\":jsData.data[item].weight_unit,",
									"                                    \"list_branches\":jsData.data[item].list_branches",
									"                                    // \"warning_quantity\":jsData.data[item].warning_quantity,",
									"                                    // \"list_attributes\":jsData.data[item].list_attributes",
									"                                }",
									"                                break;",
									"                            }",
									"                        }",
									"                    }",
									"                    break;",
									"                case \"imei_product\":",
									"                    if(jsData.data[item].sku_name.includes(\"[API] imei\") || jsData.data[item].product_type == configs.sku_type){",
									"                        list_sku[list_sku.length] = {",
									"                            \"sku_id\":jsData.data[item].id,",
									"                            \"product_id\":jsData.data[item].product_id,",
									"                            // \"account_id\":jsData.data[item].account_id,",
									"                            \"sku_name\":jsData.data[item].sku_name,",
									"                            \"sku_code\":jsData.data[item].sku_code,",
									"                            \"sale_price\":jsData.data[item].sale_price,",
									"                            \"cost_price\":jsData.data[item].cost_price,",
									"                            \"selling_price\":jsData.data[item].selling_price,",
									"                            \"sold_quantity\":jsData.data[item].sold_quantity,",
									"                            \"track_inventory\":jsData.data[item].track_inventory,",
									"                            \"uom\":jsData.data[item].uom,",
									"                            \"weight\":jsData.data[item].weight,",
									"                            \"weight_unit\":jsData.data[item].weight_unit,",
									"                            \"list_branches\":jsData.data[item].list_branches",
									"                            // \"warning_quantity\":jsData.data[item].warning_quantity,",
									"                            // \"list_attributes\":jsData.data[item].list_attributes",
									"                        }",
									"                    }",
									"                    break;",
									"                case \"book_product\":",
									"                    if(jsData.data[item].sku_name.includes(\"[API] product\")){",
									"                        list_sku[list_sku.length] = {",
									"                            \"sku_id\":jsData.data[item].id,",
									"                            \"product_id\":jsData.data[item].product_id,",
									"                            \"account_id\":jsData.data[item].account_id,",
									"                            \"sku_name\":jsData.data[item].sku_name,",
									"                            \"sku_code\":jsData.data[item].sku_code,",
									"                            \"sale_price\":jsData.data[item].sale_price,",
									"                            \"cost_price\":jsData.data[item].cost_price,",
									"                            \"selling_price\":jsData.data[item].selling_price,",
									"                            \"sold_quantity\":jsData.data[item].sold_quantity,",
									"                            \"uom\":jsData.data[item].uom,",
									"                            \"weight\":jsData.data[item].weight,",
									"                            \"weight_unit\":jsData.data[item].weight_unit,",
									"                            \"can_pick_quantity\":jsData.data[item].can_pick_quantity,",
									"                            \"warning_quantity\":jsData.data[item].warning_quantity,",
									"                            \"list_attributes\":jsData.data[item].list_attributes",
									"                        }",
									"                    }",
									"                    break;",
									"                case \"mix\":",
									"                    if(jsData.data[item].sku_name.includes(\"[API]\") && \"list_branches\" in jsData.data[item] && configs.track_inventory){",
									"                        list_sku[list_sku.length] = {",
									"                            \"sku_id\":jsData.data[item].id,",
									"                            \"product_id\":jsData.data[item].product_id,",
									"                            // \"account_id\":jsData.data[item].account_id,",
									"                            \"sku_name\":jsData.data[item].sku_name,",
									"                            \"sku_code\":jsData.data[item].sku_code,",
									"                            \"sale_price\":jsData.data[item].sale_price,",
									"                            \"cost_price\":jsData.data[item].cost_price,",
									"                            \"selling_price\":jsData.data[item].selling_price,",
									"                            \"sold_quantity\":jsData.data[item].sold_quantity,",
									"                            \"uom\":jsData.data[item].uom,",
									"                            \"weight\":jsData.data[item].weight,",
									"                            \"weight_unit\":jsData.data[item].weight_unit,",
									"                            \"list_branches\":jsData.data[item].list_branches",
									"                            // \"warning_quantity\":jsData.data[item].warning_quantity,",
									"                            // \"list_attributes\":jsData.data[item].list_attributes",
									"                        }",
									"                    }",
									"                    break;",
									"                default: ",
									"                    console.log(\"Missing product_type\");",
									"                    break;",
									"            }",
									"        }",
									"    }",
									"    pm.environment.set(\"C-list_sku\",list_sku);",
									"",
									"    if(page >= total_pages || page >= configs.limit_page){",
									"        // must clear page & page_size",
									"        pm.environment.unset(\"C-page\");",
									"        pm.environment.unset(\"C-page_size\");",
									"",
									"        switch(testcase){",
									"            case 2:",
									"                pm.test(\"Got all sku! \" + list_sku.length, function () {",
									"                    pm.expect(list_sku.length > 0).to.be.true;",
									"                });",
									"                ",
									"                // console.log(\"list_sku: \",list_sku);",
									"                let total_sku_use_create_order = configs.total_sku;",
									"                if(list_sku.length < configs.total_sku){",
									"                    total_sku_use_create_order = list_sku.length;",
									"                }",
									"                let list_rand_sku_pos = randNotDupe(0,list_sku.length - 1,total_sku_use_create_order);",
									"                let list_sku_use_create = [];",
									"                for(let i in list_rand_sku_pos){",
									"                    list_sku_use_create[list_sku_use_create.length] = list_sku[list_rand_sku_pos[i]];",
									"                }",
									"                console.log(\"Will create pos-order with list sku: \", list_sku_use_create);",
									"                console.log(\"branch create: \" + pm.environment.get(\"C-branch_id\"));",
									"                console.log(\"branch check: \" + pm.environment.get(\"C-filter_branch_id\"));",
									"",
									"                if(list_sku_use_create.length > 0){",
									"                    pm.environment.set(\"C-list_sku_use_create\",list_sku_use_create);",
									"                    postman.setNextRequest(\"get_list_tax\"); // get_list_tax",
									"                } else {",
									"                    console.log(\"can't get list_sku_use_create, please check\");",
									"                    postman.setNextRequest(null);",
									"                }",
									"                break;",
									"            default:",
									"                console.log(\"Missing flow, end test\");",
									"                postman.setNextRequest(null);",
									"                break;",
									"        }",
									"    } else {",
									"        page++;",
									"        pm.environment.set(\"C-page\",page);",
									"",
									"        console.log(\"view next page (\" + page + \") to get more sku\");",
									"        postman.setNextRequest(\"get_list_sku\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get list sku, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "authorization",
								"value": "Bearer {{C-userToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-business/api/v1/sku/get-list?business_id={{C-business_id}}&page={{C-page}}&page_size={{C-page_size}}&search=&sort=&include=inventory",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-business",
								"api",
								"v1",
								"sku",
								"get-list"
							],
							"query": [
								{
									"key": "business_id",
									"value": "{{C-business_id}}"
								},
								{
									"key": "page",
									"value": "{{C-page}}"
								},
								{
									"key": "page_size",
									"value": "{{C-page_size}}"
								},
								{
									"key": "search",
									"value": ""
								},
								{
									"key": "sort",
									"value": ""
								},
								{
									"key": "include",
									"value": "inventory"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "tax",
			"item": [
				{
					"name": "get_list_tax",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = JSON.parse(responseBody);",
									"if(pm.response.code == 200 && jsData.code == 102000){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let total_pages = jsData.meta.total_pages;",
									"    let page = pm.environment.get(\"C-page\");",
									"",
									"    let list_tax = pm.environment.get(\"C-list_tax\");",
									"    if(!list_tax){",
									"        list_tax = [];",
									"    }",
									"",
									"    for(let item in jsData.data){",
									"        if(jsData.data[item].description.includes(\"[API]\") && jsData.data[item].rate > 0 && jsData.data[item].rate < 100){",
									"            list_tax[list_tax.length] = {",
									"                \"tax_id\":jsData.data[item].id,",
									"                \"name\":jsData.data[item].name,",
									"                \"rate\":jsData.data[item].rate,",
									"                \"account_id\":jsData.data[item].account_id,",
									"                \"description\":jsData.data[item].description",
									"            }",
									"        }",
									"    }",
									"    pm.environment.set(\"C-list_tax\",list_tax);",
									"",
									"    if(page >= total_pages){",
									"        // must clear page & page_size",
									"        pm.environment.unset(\"C-page\");",
									"        pm.environment.unset(\"C-page_size\");",
									"",
									"        pm.test(\"Got all tax! \" + list_tax.length, function () {",
									"            pm.expect(list_tax.length > 0).to.be.true;",
									"        });",
									"        // console.log(\"list_tax: \", list_tax);",
									"",
									"        postman.setNextRequest(\"get_list_promotion\"); // get_list_promotion",
									"    } else {",
									"        page++;",
									"        pm.environment.set(\"C-page\",page);",
									"",
									"        console.log(\"view next page (\" + page + \") to get more tax\");",
									"        postman.setNextRequest(\"get_list_tax\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get list tax, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let page = pm.environment.get(\"C-page\");",
									"",
									"if(!page){",
									"    page = 1;",
									"    pm.environment.set(\"C-page\",page);",
									"",
									"    let page_size = 20;",
									"    pm.environment.set(\"C-page_size\",page_size);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-business/api/v1/tax/get-list?business_id={{C-business_id}}&page={{C-page}}&page_size={{C-page_size}}&option=&status=",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-business",
								"api",
								"v1",
								"tax",
								"get-list"
							],
							"query": [
								{
									"key": "business_id",
									"value": "{{C-business_id}}"
								},
								{
									"key": "page",
									"value": "{{C-page}}"
								},
								{
									"key": "page_size",
									"value": "{{C-page_size}}"
								},
								{
									"key": "option",
									"value": ""
								},
								{
									"key": "status",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "promotion",
			"item": [
				{
					"name": "get_list_promotion",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let page = pm.environment.get(\"C-page\");",
									"",
									"if(!page){",
									"    page = 1;",
									"    pm.environment.set(\"C-page\",page);",
									"",
									"    let page_size = 50;",
									"    pm.environment.set(\"C-page_size\",page_size);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = JSON.parse(responseBody);",
									"if(pm.response.code == 200 && jsData.code == 102000){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let total_pages = jsData.meta.total_pages;",
									"    let page = pm.environment.get(\"C-page\");",
									"",
									"    let list_promotion = pm.environment.get(\"C-list_promotion\");",
									"    if(!list_promotion){",
									"        list_promotion = [];",
									"    }",
									"",
									"    for(let item in jsData.data){",
									"        if(jsData.data[item].name.includes(\"[API]\") && jsData.data[item].is_active){",
									"            list_promotion[list_promotion.length] = {",
									"                \"promotion_id\":jsData.data[item].id,",
									"                \"name\":jsData.data[item].name,",
									"                \"code\":jsData.data[item].code,",
									"                \"is_rate\":jsData.data[item].is_rate,",
									"                \"value\":jsData.data[item].value,",
									"                \"min_order_price\":jsData.data[item].min_order_price,",
									"                \"max_price_discount\":jsData.data[item].max_price_discount,",
									"                \"max_size\":jsData.data[item].max_size,",
									"                \"max_size_per_user\":jsData.data[item].max_size_per_user,",
									"                \"start_time\":jsData.data[item].start_time,",
									"                \"end_time\":jsData.data[item].end_time",
									"            }",
									"        }",
									"    }",
									"    pm.environment.set(\"C-list_promotion\",list_promotion);",
									"",
									"    if(page >= total_pages){",
									"        // must clear page & page_size",
									"        pm.environment.unset(\"C-page\");",
									"        pm.environment.unset(\"C-page_size\");",
									"",
									"        pm.test(\"Got all promotion! \" + list_promotion.length, function () {",
									"            pm.expect(list_promotion.length > 0).to.be.true;",
									"        });",
									"        // console.log(\"list_promotion: \", list_promotion);",
									"",
									"        postman.setNextRequest(\"get_list_surcharge\"); // get_list_surcharge",
									"    } else {",
									"        page++;",
									"        pm.environment.set(\"C-page\",page);",
									"",
									"        console.log(\"view next page (\" + page + \") to get more promotion\");",
									"        postman.setNextRequest(\"get_list_promotion\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get list promotion, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/promotion/get-list?business_id={{C-business_id}}&page={{C-page}}&page_size={{C-page_size}}&search=&sort=",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"promotion",
								"get-list"
							],
							"query": [
								{
									"key": "business_id",
									"value": "{{C-business_id}}"
								},
								{
									"key": "page",
									"value": "{{C-page}}"
								},
								{
									"key": "page_size",
									"value": "{{C-page_size}}"
								},
								{
									"key": "search",
									"value": ""
								},
								{
									"key": "sort",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"// Thương hiệu"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "surcharge",
			"item": [
				{
					"name": "get_list_surcharge",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let page = pm.environment.get(\"C-page\");",
									"",
									"if(!page){",
									"    page = 1;",
									"    pm.environment.set(\"C-page\",page);",
									"",
									"    let page_size = 50;",
									"    pm.environment.set(\"C-page_size\",page_size);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = JSON.parse(responseBody);",
									"if(pm.response.code == 200 && jsData.code == 102000){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let total_pages = 0;",
									"    let page = pm.environment.get(\"C-page\");",
									"    try {",
									"        total_pages = jsData.meta.total_pages;",
									"    } catch {",
									"        console.log(\"Missing meta data\");",
									"    }",
									"",
									"    let list_surcharge = pm.environment.get(\"C-list_surcharge\");",
									"    if(!list_surcharge){",
									"        list_surcharge = [];",
									"    }",
									"",
									"    for(let item in jsData.data){",
									"        if(jsData.data[item].name.includes(\"[API]\")){",
									"            list_surcharge[list_surcharge.length] = {",
									"                \"surcharge_id\":jsData.data[item].id,",
									"                \"name\":jsData.data[item].name,",
									"                \"code\":jsData.data[item].code,",
									"                \"is_rate\":jsData.data[item].is_rate,",
									"                \"value\":jsData.data[item].value,",
									"                \"setting\":jsData.data[item].setting",
									"            }",
									"        }",
									"    }",
									"    pm.environment.set(\"C-list_surcharge\",list_surcharge);",
									"",
									"    if(page >= total_pages){ // => tắt tạm đợi BE cover meta",
									"        // must clear page & page_size",
									"        pm.environment.unset(\"C-page\");",
									"        pm.environment.unset(\"C-page_size\");",
									"",
									"        pm.test(\"Got all surcharge! \" + list_surcharge.length, function () {",
									"            pm.expect(list_surcharge.length > 0).to.be.true;",
									"        });",
									"        // console.log(\"list_surcharge: \", list_surcharge);",
									"",
									"        postman.setNextRequest(\"get_list_inventory\"); // get_list_inventory",
									"    } else {",
									"        page++;",
									"        pm.environment.set(\"C-page\",page);",
									"",
									"        console.log(\"view next page (\" + page + \") to get more surcharge\");",
									"        postman.setNextRequest(\"get_list_surcharge\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get list surcharge, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/surcharge/get-list?page={{C-page}}&page_size={{C-page_size}}&search=&sort=",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"surcharge",
								"get-list"
							],
							"query": [
								{
									"key": "business_id",
									"value": "{{C-business_id}}",
									"disabled": true
								},
								{
									"key": "page",
									"value": "{{C-page}}"
								},
								{
									"key": "page_size",
									"value": "{{C-page_size}}"
								},
								{
									"key": "search",
									"value": ""
								},
								{
									"key": "sort",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"// Thương hiệu"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "pos-order",
			"item": [
				{
					"name": "calculate_pos_order",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/**",
									" * Note: should refactor for happy case:",
									" * - Calculate all discount, tax the same include_tax case",
									" * - Refactor discounts in items is array matching with data (after support more 1 discount)",
									" * - GIỮ LOGIC CŨ, FE VÀ BE TÍNH RIÊNG => cần show log để check lại UI",
									" * total_line_item_amount => thành tiền cho từng line item = quantity*item_amount",
									" */",
									"",
									"/**",
									" *  =============================  func randNotDupe(min, max, total)",
									" * total: số lượng random, ko dc nhỏ hơn max-min+1",
									" * return: array",
									" */",
									"function randNotDupe(min, max, total){",
									"  let arrNum = []; // new empty array",
									"  let n, p;",
									"  for (let i = 0; i < total; i++) {",
									"    do {",
									"      n = Math.floor(Math.random() * (max - min + 1)) + min;",
									"      p = arrNum.includes(n);",
									"      if(!p){",
									"        arrNum.push(n);",
									"      }",
									"    }",
									"    while(p);",
									"  }",
									"  return arrNum;",
									"}",
									"",
									"// ============================= random number between min and max",
									"function getRandomInt(min, max) {",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"",
									"// ============================= random characters",
									"function randomChars(length) {",
									"    var result           = '';",
									"    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
									"    var charactersLength = characters.length;",
									"    for ( var i = 0; i < length; i++ ) {",
									"      result += characters.charAt(Math.floor(Math.random() * charactersLength));",
									"   }",
									"   return result;",
									"}",
									"",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"let configs = pm.environment.get(\"C-configs\");",
									"",
									"let today = new Date();",
									"let d30_stp = Math.floor(today.getTime()/1000) + 30*24*60*60;",
									"let d30 = new Date(d30_stp*1000);",
									"",
									"let current_timestamp = Math.floor(today.getTime()/1000);",
									"let past_date, past_due_date;",
									"",
									"let last_date_stp = Math.floor(today.getTime()/1000) - 24*60*60;",
									"let last_date = new Date(last_date_stp*1000);",
									"",
									"let next_date_stp = Math.floor(today.getTime()/1000) + 24*60*60;",
									"let next_date = new Date(next_date_stp*1000);",
									"",
									"let tax_types = [\"price_excluding_tax\", \"price_including_tax\", \"tax_not_applicable\"];",
									"",
									"let discount_mode = pm.environment.get(\"C-discount_mode\");",
									"let is_pre_tax = true;",
									"if(discount_mode == \"after_tax\"){",
									"    is_pre_tax = false;",
									"}",
									"",
									"let tax_type;",
									"let list_tax = pm.environment.get(\"C-list_tax\");",
									"console.log(\"list_tax: \" + list_tax.length);",
									"",
									"let list_sku_use_create = pm.environment.get(\"C-list_sku_use_create\");",
									"console.log(\"list_sku_use_create: \" + list_sku_use_create.length);",
									"",
									"let discounts = [];",
									"let sub_total_amount = 0, sum_total_item_amount, created_order_at, due_at, note, email;",
									"",
									"let branch_id, contact_id;",
									"// let payment_method_list = [\"bank_transfer\",\"domestic_card\",\"credit_card\",\"ewallet_momo\",\"ewallet_zalopay\",\"ewallet_viettel\",\"ewallet_galaxypay\"];",
									"let payment_method_list = pm.environment.get(\"C-payment_method_list\");",
									"// khi chọn bank_transfer, phải gửi kèm payment_account_id (tài khoản sẽ nhận tiền khi buyer quét QR thanh toán)",
									"let po_code, payment_config = [];",
									"let status;",
									"let items = [];",
									"// let default_item = [{",
									"//     \"account_id\": \"\", // hiện tại POS chưa có",
									"//     \"item_amount\": list_sku_use_create[0].sale_price,",
									"//     // \"currency\": \"\",",
									"//     \"name\": list_sku_use_create[0].sku_name,",
									"//     \"note\": \"[API] note for SKU \" + list_sku_use_create[0].sku_name,",
									"//     \"quantity\": 1,",
									"//     \"product_id\": list_sku_use_create[0].product_id,",
									"//     \"sku_id\": list_sku_use_create[0].sku_id,",
									"//     \"taxes\": []",
									"// }];",
									"",
									"let payment_account_id, total_net_amount;",
									"let list_bank_account = pm.environment.get(\"C-list_bank_account\");",
									"",
									"console.log(\"Happy case: \");",
									"contact_id = pm.environment.get(\"C-contact_id\");",
									"email = \"chau.lth@finan.me\";",
									"",
									"branch_id = pm.environment.get(\"C-branch_id\");",
									"entry_code = \"POS-\" + randomChars(6);",
									"description = \"[API] Note for pos-order \" + entry_code;",
									"",
									"/**",
									" * Công thức tính: ",
									" */",
									"let ranTimeCase = getRandomInt(1,6);",
									"pm.environment.set(\"C-ranTimeCase\",ranTimeCase);",
									"console.log(\"ranTimeCase: \" + ranTimeCase);",
									"switch(ranTimeCase){",
									"    case 1:",
									"        // due_at + 61d < current < due_at + 91d => overdue 60-90",
									"        past_date = new Date((current_timestamp - 91*24*60*60)*1000);",
									"        past_due_date = new Date((current_timestamp - 61*24*60*60)*1000);",
									"        created_order_at = past_date.toISOString();",
									"        due_at = past_due_date.toISOString();",
									"        break;",
									"    case 2:",
									"        // created_order_at == current => ngay hiện tại, ko overdue",
									"        created_order_at = today.toISOString();",
									"        due_at = d30.toISOString();",
									"        break;",
									"    case 3:",
									"        // created_order_at > current => tương lai, ko overdue",
									"        created_order_at = next_date.toISOString();",
									"        due_at = next_date.toISOString();",
									"        break;",
									"    case 4:",
									"        // due_at + 91d < current => overdue > 90d",
									"        past_date = new Date((current_timestamp - 121*24*60*60)*1000);",
									"        past_due_date = new Date((current_timestamp - 91*24*60*60)*1000);",
									"        created_order_at = past_date.toISOString();",
									"        due_at = past_due_date.toISOString();",
									"        break;",
									"    case 5:",
									"        // due_at + 31d < current < due_at + 61d => overdue 30-60",
									"        past_date = new Date((current_timestamp - 61*24*60*60)*1000);",
									"        past_due_date = new Date((current_timestamp - 31*24*60*60)*1000);",
									"        created_order_at = past_date.toISOString();",
									"        due_at = past_due_date.toISOString();",
									"        break;",
									"    default:",
									"        // due_at < current => overdue < 30d",
									"        let ranPastDay = getRandomInt(1,29);",
									"        past_date = new Date((current_timestamp - (ranPastDay+30)*24*60*60)*1000);",
									"        past_due_date = new Date((current_timestamp - ranPastDay*24*60*60)*1000);",
									"        created_order_at = past_date.toISOString();",
									"        due_at = past_due_date.toISOString();",
									"        break;",
									"}",
									"",
									"// product / item",
									"// discount => tạm thời chỉ chọn 1 hoặc 0, dev chưa handle 2+ discount",
									"let randTotalDC = getRandomInt(0,1);",
									"",
									"let case_ = getRandomInt(1,3);",
									"pm.environment.set('C-tax_case',case_);",
									"switch(case_){ // ",
									"    case 1:",
									"        console.log(\"Create pos_order with price_excluding_ta & is_pre_tax is \" + is_pre_tax);",
									"        tax_type = tax_types[0];",
									"        break;",
									"    case 2:",
									"        console.log(\"Create pos_order with price_including_tax & is_pre_tax is \" + is_pre_tax);",
									"        tax_type = tax_types[1];",
									"        break;",
									"    case 3:",
									"    default:",
									"        console.log(\"Create pos_order with tax_not_applicable\");",
									"        tax_type = tax_types[2];",
									"        break;",
									"}",
									"",
									"// KHỞI TẠO GIÁ TRỊ BAN ĐẦU CHO LINE_ITEMS",
									"for(let i in list_sku_use_create){",
									"    let randTotalTax_i = getRandomInt(0,1); // chỉ support tối đa 1 loại thuế",
									"    let randListPos_i = randNotDupe(0,list_tax.length - 1,randTotalTax_i);",
									"    let taxes_i = [];",
									"    let quantity_i = getRandomInt(1,4);",
									"",
									"    // amount của tax chỉ là tượng trưng, server sẽ tự tính lại dựa vào tax_id (cthuc hiện tại đang sai vì chưa discount)",
									"    for(let j in randListPos_i){",
									"        taxes_i[taxes_i.length] = {",
									"            \"account_id\": list_tax[randListPos_i[j]].account_id, // tạm thời chưa tạo ra account_id nên tạm ignore",
									"            \"rate\": list_tax[randListPos_i[j]].rate,",
									"            \"amount\": 0, // sẽ được tính lại",
									"            \"name\": list_tax[randListPos_i[j]].name, // field này không cần",
									"            \"tax_id\": list_tax[randListPos_i[j]].tax_id",
									"        };",
									"    }",
									"",
									"    // add batch info",
									"    let batches_i = [];",
									"    if(configs.sku_type != \"batch_product\"){",
									"        // khác batch_product thì ko cần truyền batch",
									"        items[items.length] = {",
									"            \"account_id\": 0, // list_sku_use_create[i].income_account_id, => hiện chỉ support Book, tạm hide",
									"            // \"batchs\": [ => lúc tính toán ko truyền batch",
									"            //         \"batch_id\": \"string\",",
									"            //         \"quantity\": 0}],",
									"            \"item_amount\": list_sku_use_create[i].sale_price,",
									"            // \"currency\": \"\",",
									"            \"name\": list_sku_use_create[i].sku_name,",
									"            \"note\": \"[API] note for SKU \" + list_sku_use_create[i].sku_name,",
									"            \"quantity\":quantity_i,",
									"            // \"cost_per_item\":list_sku_use_create[i].list_branches[j].list_batches[k].cost_per_item_amount,",
									"            \"product_id\": list_sku_use_create[i].product_id,",
									"            \"sku_id\": list_sku_use_create[i].sku_id,",
									"            \"taxes\": taxes_i,",
									"            \"uom\": list_sku_use_create[i].uom,",
									"            \"uom_id\": configs.none_uuid, // uom gốc thì ko cần truyền field này hoặc truyền mặc định",
									"            \"track_inventory\":list_sku_use_create[i].track_inventory // thêm vào để check",
									"        }",
									"    } else {",
									"        // cần truyền batch để BE xử lý => sau này cần check số lượng để validate case thiếu sp",
									"        switch(quantity_i){",
									"            case 1: case 2:// trừ 1 batch",
									"                for(let j in list_sku_use_create[i].list_branches){",
									"                    if(list_sku_use_create[i].list_branches[j].branch_id == branch_id){",
									"                        // check can_pick_quantity in batch > quantity_i mới chọn để đặt",
									"                        let found_k = false;",
									"                        for(let k in list_sku_use_create[i].list_branches[j].list_batches){",
									"                            if(list_sku_use_create[i].list_branches[j].list_batches[k].can_pick_quantity >= quantity_i){",
									"                                found_k = true;",
									"                                batches_i[batches_i.length] = {",
									"                                    \"batch_id\":list_sku_use_create[i].list_branches[j].list_batches[k].batch_id, // chọn ngay batch đầu tiên để trừ => hiện tại chưa có nhiều data, cần thử trên 1 account ít product để check",
									"                                    \"batch_name\":list_sku_use_create[i].list_branches[j].list_batches[k].name,",
									"                                    \"received_quantity\":list_sku_use_create[i].list_branches[j].list_batches[k].received_quantity,",
									"                                    \"delivery_quantity\":list_sku_use_create[i].list_branches[j].list_batches[k].delivery_quantity,",
									"                                    \"cost_per_item\":list_sku_use_create[i].list_branches[j].list_batches[k].cost_per_item_amount,",
									"                                    \"blocked_quantity\":list_sku_use_create[i].list_branches[j].list_batches[k].blocked_quantity,",
									"                                    \"can_pick_quantity\":list_sku_use_create[i].list_branches[j].list_batches[k].can_pick_quantity,",
									"                                    \"item_amount\":list_sku_use_create[i].list_branches[j].list_batches[k].item_amount,",
									"                                    \"quantity\":quantity_i",
									"                                }",
									"                                break;",
									"                            }",
									"                        }",
									"",
									"                        if(!found_k){",
									"                            console.log(\"case này phải báo lỗi out_of_stock nha!!!\");",
									"                            pm.environment.set(\"C-out_of_stock\",true);",
									"",
									"                            batches_i[batches_i.length] = {",
									"                                \"batch_id\":list_sku_use_create[i].list_branches[j].list_batches[0].batch_id, // chọn ngay batch đầu tiên để trừ => hiện tại chưa có nhiều data, cần thử trên 1 account ít product để check",
									"                                \"batch_name\":list_sku_use_create[i].list_branches[j].list_batches[0].name,",
									"                                \"received_quantity\":list_sku_use_create[i].list_branches[j].list_batches[0].received_quantity,",
									"                                \"delivery_quantity\":list_sku_use_create[i].list_branches[j].list_batches[0].delivery_quantity,",
									"                                \"cost_per_item\":list_sku_use_create[i].list_branches[j].list_batches[0].cost_per_item_amount,",
									"                                \"blocked_quantity\":list_sku_use_create[i].list_branches[j].list_batches[0].blocked_quantity,",
									"                                \"can_pick_quantity\":list_sku_use_create[i].list_branches[j].list_batches[0].can_pick_quantity,",
									"                                \"item_amount\":list_sku_use_create[i].list_branches[j].list_batches[0].item_amount,",
									"                                \"quantity\":quantity_i",
									"                            }",
									"                        }",
									"                        break;",
									"                    }",
									"                }",
									"                break;",
									"            case 3: // trừ nhiều hơn 1 batch",
									"            default:",
									"                for(let j in list_sku_use_create[i].list_branches){",
									"                    if(list_sku_use_create[i].list_branches[j].branch_id == branch_id){",
									"                        if(list_sku_use_create[i].list_branches[j].list_batches.length > 1){",
									"                            // nếu sku có nhiều hơn 1 batch, trừ 2 batch",
									"                            // vẫn cần check can_pick_quantity có > 2 & quantity_i - 2",
									"                            let found_k = 0;",
									"                            for(let k in list_sku_use_create[i].list_branches[j].list_batches){",
									"                                if(list_sku_use_create[i].list_branches[j].list_batches[k].can_pick_quantity >= 2 && batches_i.length == 0){",
									"                                    found_k++;",
									"",
									"                                    batches_i[0] = {",
									"                                        \"batch_id\":list_sku_use_create[i].list_branches[j].list_batches[k].batch_id,",
									"                                        \"batch_name\":list_sku_use_create[i].list_branches[j].list_batches[k].name,",
									"                                        \"received_quantity\":list_sku_use_create[i].list_branches[j].list_batches[k].received_quantity,",
									"                                        \"delivery_quantity\":list_sku_use_create[i].list_branches[j].list_batches[k].delivery_quantity,",
									"                                        \"cost_per_item\":list_sku_use_create[i].list_branches[j].list_batches[k].cost_per_item_amount,",
									"                                        \"blocked_quantity\":list_sku_use_create[i].list_branches[j].list_batches[k].blocked_quantity,",
									"                                        \"can_pick_quantity\":list_sku_use_create[i].list_branches[j].list_batches[k].can_pick_quantity,",
									"                                        \"item_amount\":list_sku_use_create[i].list_branches[j].list_batches[k].item_amount,",
									"                                        \"quantity\":2",
									"                                    }",
									"                                } else if(list_sku_use_create[i].list_branches[j].list_batches[k].can_pick_quantity >= (quantity_i - 2) && batches_i.length == 1){",
									"                                    found_k++;",
									"",
									"                                    batches_i[1] = {",
									"                                        \"batch_id\":list_sku_use_create[i].list_branches[j].list_batches[k].batch_id,",
									"                                        \"batch_name\":list_sku_use_create[i].list_branches[j].list_batches[k].name,",
									"                                        \"received_quantity\":list_sku_use_create[i].list_branches[j].list_batches[k].received_quantity,",
									"                                        \"delivery_quantity\":list_sku_use_create[i].list_branches[j].list_batches[k].delivery_quantity,",
									"                                        \"cost_per_item\":list_sku_use_create[i].list_branches[j].list_batches[k].cost_per_item_amount,",
									"                                        \"blocked_quantity\":list_sku_use_create[i].list_branches[j].list_batches[k].blocked_quantity,",
									"                                        \"can_pick_quantity\":list_sku_use_create[i].list_branches[j].list_batches[k].can_pick_quantity,",
									"                                        \"item_amount\":list_sku_use_create[i].list_branches[j].list_batches[k].item_amount,",
									"                                        \"quantity\":quantity_i - 2",
									"                                    }",
									"                                }",
									"",
									"                                if(found_k == 2) break;",
									"                            }",
									"                            ",
									"                            if(found_k != 2){",
									"                                console.log(\"case này phải báo lỗi out_of_stock nha!!!\");",
									"                                pm.environment.set(\"C-out_of_stock\",true);",
									"                            ",
									"                                batches_i[0] = {",
									"                                    \"batch_id\":list_sku_use_create[i].list_branches[j].list_batches[0].batch_id,",
									"                                    \"batch_name\":list_sku_use_create[i].list_branches[j].list_batches[0].name,",
									"                                    \"received_quantity\":list_sku_use_create[i].list_branches[j].list_batches[0].received_quantity,",
									"                                    \"delivery_quantity\":list_sku_use_create[i].list_branches[j].list_batches[0].delivery_quantity,",
									"                                    \"cost_per_item\":list_sku_use_create[i].list_branches[j].list_batches[0].cost_per_item_amount,",
									"                                    \"blocked_quantity\":list_sku_use_create[i].list_branches[j].list_batches[0].blocked_quantity,",
									"                                    \"can_pick_quantity\":list_sku_use_create[i].list_branches[j].list_batches[0].can_pick_quantity,",
									"                                    \"item_amount\":list_sku_use_create[i].list_branches[j].list_batches[0].item_amount,",
									"                                    \"quantity\":2",
									"                                }",
									"                                batches_i[1] = {",
									"                                    \"batch_id\":list_sku_use_create[i].list_branches[j].list_batches[1].batch_id,",
									"                                    \"batch_name\":list_sku_use_create[i].list_branches[j].list_batches[1].name,",
									"                                    \"received_quantity\":list_sku_use_create[i].list_branches[j].list_batches[1].received_quantity,",
									"                                    \"delivery_quantity\":list_sku_use_create[i].list_branches[j].list_batches[1].delivery_quantity,",
									"                                    \"cost_per_item\":list_sku_use_create[i].list_branches[j].list_batches[1].cost_per_item_amount,",
									"                                    \"blocked_quantity\":list_sku_use_create[i].list_branches[j].list_batches[1].blocked_quantity,",
									"                                    \"can_pick_quantity\":list_sku_use_create[i].list_branches[j].list_batches[1].can_pick_quantity,",
									"                                    \"item_amount\":list_sku_use_create[i].list_branches[j].list_batches[1].item_amount,",
									"                                    \"quantity\":quantity_i - 2",
									"                                }",
									"                            }",
									"                        } else {",
									"                            // ngược lại thì trừ 1 batch như case trên",
									"                            // vẫn cần check can_pick_quantity có > quantity_i",
									"                            if(list_sku_use_create[i].list_branches[j].list_batches[0].can_pick_quantity < quantity_i){",
									"                                console.log(\"case này phải báo lỗi out_of_stock nha!!!\");",
									"                                pm.environment.set(\"C-out_of_stock\",true);",
									"                            }",
									"                            batches_i[batches_i.length] = {",
									"                                \"batch_id\":list_sku_use_create[i].list_branches[j].list_batches[0].batch_id,",
									"                                \"batch_name\":list_sku_use_create[i].list_branches[j].list_batches[0].name,",
									"                                \"received_quantity\":list_sku_use_create[i].list_branches[j].list_batches[0].received_quantity,",
									"                                \"delivery_quantity\":list_sku_use_create[i].list_branches[j].list_batches[0].delivery_quantity,",
									"                                \"cost_per_item\":list_sku_use_create[i].list_branches[j].list_batches[0].cost_per_item_amount,",
									"                                \"blocked_quantity\":list_sku_use_create[i].list_branches[j].list_batches[0].blocked_quantity,",
									"                                \"can_pick_quantity\":list_sku_use_create[i].list_branches[j].list_batches[0].can_pick_quantity,",
									"                                \"item_amount\":list_sku_use_create[i].list_branches[j].list_batches[0].item_amount,",
									"                                \"quantity\":quantity_i",
									"                            }",
									"                        }",
									"                        break;",
									"                    }",
									"                }",
									"                break;",
									"        }",
									"",
									"        items[items.length] = {",
									"            \"account_id\": 0, // list_sku_use_create[i].income_account_id, => hiện chỉ support Book, tạm hide",
									"            // \"batchs\": [ => lúc tính toán ko truyền batch",
									"            //         \"batch_id\": \"string\",",
									"            //         \"quantity\": 0}],",
									"            \"item_amount\": list_sku_use_create[i].sale_price,",
									"            // \"currency\": \"\",",
									"            \"name\": list_sku_use_create[i].sku_name,",
									"            \"note\": \"[API] note for SKU \" + list_sku_use_create[i].sku_name,",
									"            \"quantity\":quantity_i,",
									"            \"product_id\": list_sku_use_create[i].product_id,",
									"            \"sku_id\": list_sku_use_create[i].sku_id,",
									"            \"taxes\": taxes_i,",
									"            \"batches\":batches_i,",
									"            \"uom\": list_sku_use_create[i].uom,",
									"            \"uom_id\": configs.none_uuid, // uom gốc thì ko cần truyền field này hoặc truyền mặc định",
									"            \"track_inventory\":list_sku_use_create[i].track_inventory // thêm vào để check",
									"        }",
									"    }",
									"}",
									"",
									"for(let i in items){",
									"    sub_total_amount += items[i].item_amount*items[i].quantity;",
									"}",
									"",
									"// discounts",
									"for(let i = 0; i < randTotalDC; i++){",
									"    if(getRandomInt(0,1)){ // getRandomInt(0,1)",
									"        discounts[discounts.length] = {",
									"            \"note\": \"\",",
									"            \"is_rate\": true,",
									"            \"value\": getRandomInt(10,800) / 10",
									"        }",
									"    } else {",
									"        discounts[discounts.length] = {",
									"            \"note\": \"\",",
									"            \"is_rate\": false,",
									"            \"value\": Math.ceil(sub_total_amount / getRandomInt(2,9)) //getRandomInt(2,10)",
									"        }",
									"    }",
									"}",
									"",
									"let term_discount;",
									"let total_discount_amount = 0;",
									"console.log(\"sub_total_amount: \" + sub_total_amount);",
									"switch(case_){",
									"    case 1:",
									"        if(is_pre_tax){",
									"            for(let i in discounts){",
									"                if(discounts[i].is_rate){",
									"                    total_discount_amount += Math.round(discounts[i].value*sub_total_amount/100);",
									"                } else {",
									"                    total_discount_amount += Math.round(discounts[i].value);",
									"                }",
									"            }",
									"",
									"            // chỉ support case discount_amount - tính round cuối",
									"            sum_total_item_amount = 0;",
									"            for(let i in items){",
									"                sum_total_item_amount += items[i].item_amount*items[i].quantity;",
									"            }",
									"",
									"            term_discount = 0;",
									"            for(let i in items){",
									"                // total_item_amount, before_tax_amount",
									"                items[i].total_item_amount = items[i].item_amount*items[i].quantity;",
									"                items[i].before_tax_amount = items[i].item_amount*items[i].quantity;",
									"",
									"                // discount_amount - ko tính round cuối",
									"                // let discount_i = 0;",
									"                // for(let j in discounts){",
									"                //     if(discounts[j].is_rate){",
									"                //         discount_i += Math.round(discounts[j].value*items[i].total_item_amount/100);",
									"                //     } else {",
									"                //         discount_i += Math.round(discounts[j].value*items[i].total_item_amount/sub_total_amount);",
									"                //     }",
									"                // }",
									"                // items[i].discount_amount = discount_i;",
									"                // discount_amount - tính round cuối",
									"                let item_total_discount_i = 0;",
									"                if(i != items.length - 1){",
									"                    for(let k in discounts){",
									"                        if(discounts[k].is_rate){",
									"                            // debug",
									"                            item_total_discount_i += Math.round(items[i].before_tax_amount * discounts[k].value/100);",
									"                            // item_total_discount_i += Math.round(items[i].total_item_amount * discounts[k].value/100);",
									"                        } ",
									"                        else {",
									"                            // item_total_discount_i += Math.round(discounts[k].value * items[i].before_tax_amount/total_net_amount);",
									"                            item_total_discount_i += Math.round(discounts[k].value * items[i].total_item_amount/sum_total_item_amount);",
									"                        }",
									"                    }",
									"                    items[i].discount_amount = item_total_discount_i;",
									"                    term_discount += item_total_discount_i;",
									"                } else {",
									"                    for(let k in discounts){",
									"                        // ở đây không cần làm tròn nữa vì chỉ là hiệu của 2 số chẵn",
									"                        if(discounts[k].is_rate){ // => case này không cần tính số tổng rồi trừ lại",
									"                            // item_total_discount_i += Math.round(total_net_amount * discounts[k].value/100 - term_discount);",
									"                            item_total_discount_i += Math.round(items[i].before_tax_amount * discounts[k].value/100);",
									"                        } else {",
									"                            item_total_discount_i += Math.round(discounts[k].value - term_discount);",
									"                            // item_total_discount_i += Math.round(discounts[k].value * items[i].total_item_amount/sum_total_item_amount);",
									"                        }",
									"                    }",
									"                    items[i].discount_amount = item_total_discount_i;",
									"                }",
									"",
									"                // item_tax_amount",
									"                let total_tax_amount_i = 0;",
									"                for(let k in items[i].taxes){",
									"                    for(let j in list_tax){",
									"                        if(items[i].taxes[k].tax_id == list_tax[j].tax_id){",
									"                            items[i].taxes[k].item_tax_amount = Math.round(list_tax[j].rate*(items[i].total_item_amount - items[i].discount_amount)/100);",
									"                            // // update lại amount",
									"                            // items[i].taxes[k].amount = items[i].taxes[k].item_tax_amount;",
									"                            total_tax_amount_i += Math.round(list_tax[j].rate*(items[i].total_item_amount - items[i].discount_amount)/100);",
									"                            break;",
									"                        }",
									"                    }",
									"                }",
									"",
									"                // after_tax_amount",
									"                items[i].after_tax_amount = items[i].before_tax_amount + total_tax_amount_i;",
									"",
									"                // total_amount",
									"                items[i].total_amount = items[i].before_tax_amount - items[i].discount_amount + total_tax_amount_i;",
									"            }",
									"        } else {",
									"            // sub_total_amount cần được tính lại giá sau thuế => rule mới, vẫn giữ giá trước thuế",
									"            sub_total_amount = 0;",
									"",
									"            for(let i in items){",
									"                // total_item_amount, before_tax_amount",
									"                items[i].total_item_amount = items[i].item_amount*items[i].quantity;",
									"                items[i].before_tax_amount = items[i].item_amount*items[i].quantity;",
									"",
									"                // item_tax_amount",
									"                let total_tax_amount_i = 0;",
									"                for(let k in items[i].taxes){",
									"                    for(let j in list_tax){",
									"                        if(items[i].taxes[k].tax_id == list_tax[j].tax_id){",
									"                            // hiện tại chỉ apply 1 tax, nếu hơn phải update lại",
									"                            items[i].taxes[k].item_tax_amount = Math.round(list_tax[j].rate * items[i].total_item_amount/100);",
									"                            total_tax_amount_i += Math.round(list_tax[j].rate * items[i].total_item_amount/100);",
									"                            break;",
									"                        }",
									"                    }",
									"                }",
									"",
									"                // after_tax_amount",
									"                items[i].after_tax_amount = items[i].before_tax_amount + total_tax_amount_i;",
									"                // sub_total_amount += items[i].after_tax_amount;",
									"                sub_total_amount += items[i].before_tax_amount;",
									"            }",
									"            console.log(\"new sub_total_amount: \" + sub_total_amount);",
									"",
									"            for(let i in discounts){",
									"                if(discounts[i].is_rate){",
									"                    total_discount_amount += Math.round(discounts[i].value * sub_total_amount/100);",
									"                } else {",
									"                    total_discount_amount += Math.round(discounts[i].value);",
									"                }",
									"            }",
									"",
									"            for(let i in items){",
									"                // discount_amount",
									"                let discount_i = 0;",
									"                for(let j in discounts){",
									"                    if(discounts[j].is_rate){",
									"                        discount_i += Math.round(discounts[j].value * items[i].after_tax_amount/100);",
									"                        // discount_i += Math.round(discounts[j].value * items[i].before_tax_amount/100);",
									"                    } else {",
									"                        // discount_i += Math.round(discounts[j].value * items[i].after_tax_amount/sub_total_amount);",
									"                        discount_i += Math.round(discounts[j].value * items[i].before_tax_amount/sub_total_amount);",
									"                    }",
									"                }",
									"                items[i].discount_amount = discount_i;",
									"",
									"                // total_amount",
									"                if(items[i].taxes.length > 0){",
									"                    items[i].total_amount = items[i].before_tax_amount - items[i].discount_amount + items[i].taxes[0].item_tax_amount;",
									"                } else {",
									"                    items[i].total_amount = items[i].before_tax_amount - items[i].discount_amount;",
									"                }",
									"            }",
									"        }",
									"        break;",
									"    case 2:",
									"        // sub_total_amount cần được tính lại giá trước thuế",
									"        if(is_pre_tax){",
									"            sub_total_amount = 0;",
									"            sum_total_item_amount = 0;",
									"",
									"            // tính lại thuế (thuế chưa giảm giá)",
									"            total_net_amount = 0;",
									"            for(let i in items){",
									"                // total_item_amount",
									"                items[i].total_item_amount = items[i].item_amount*items[i].quantity;",
									"                sum_total_item_amount += items[i].total_item_amount;",
									"",
									"                // tổng rate thuế theo item => hiện tại chỉ apply 1 thuế",
									"                let total_tax_rate_i = 0;",
									"                for(let j in items[i].taxes){",
									"                    total_tax_rate_i += items[i].taxes[j].rate;",
									"                }",
									"                items[i].total_tax_rate_i = total_tax_rate_i;",
									"",
									"                // giá chưa thuế before_tax_amount",
									"                let item_net_amount_i = Math.round(items[i].total_item_amount / (1 + items[i].total_tax_rate_i/100));",
									"                items[i].before_tax_amount = item_net_amount_i;",
									"",
									"                total_net_amount += item_net_amount_i;",
									"            }",
									"",
									"            // chỉ support 1 discount trong 1 pos_order",
									"            term_discount = 0;",
									"            for(let i in items){",
									"                // giảm giá",
									"                let item_total_discount_i = 0;",
									"                if(i != items.length - 1){",
									"                    for(let k in discounts){",
									"                        if(discounts[k].is_rate){",
									"                            // debug",
									"                            item_total_discount_i += Math.round(items[i].before_tax_amount * discounts[k].value/100);",
									"                            // item_total_discount_i += Math.round(items[i].total_item_amount * discounts[k].value/100);",
									"                        } ",
									"                        else {",
									"                            // item_total_discount_i += Math.round(discounts[k].value * items[i].before_tax_amount/total_net_amount);",
									"                            item_total_discount_i += Math.round(discounts[k].value * items[i].total_item_amount/sum_total_item_amount);",
									"                        }",
									"                    }",
									"                    items[i].discount_amount = item_total_discount_i;",
									"                    term_discount += item_total_discount_i;",
									"",
									"                } else {",
									"                    for(let k in discounts){",
									"                        // ở đây không cần làm tròn nữa vì chỉ là hiệu của 2 số chẵn",
									"                        if(discounts[k].is_rate){ // => case này không cần tính số tổng rồi trừ lại",
									"                            // item_total_discount_i += Math.round(total_net_amount * discounts[k].value/100 - term_discount);",
									"                            item_total_discount_i += Math.round(items[i].before_tax_amount * discounts[k].value/100);",
									"                        } else {",
									"                            item_total_discount_i += Math.round(discounts[k].value - term_discount);",
									"                            // item_total_discount_i += Math.round(discounts[k].value*items[i].before_tax_amount/total_net_amount);",
									"                        }",
									"                    }",
									"                    items[i].discount_amount = item_total_discount_i;",
									"                }",
									"",
									"                // giá sau discount => after_tax_amount",
									"                let item_net_amount_after_discount_i = items[i].before_tax_amount - items[i].discount_amount;",
									"                items[i].after_tax_amount = item_net_amount_after_discount_i;",
									"                sub_total_amount += item_net_amount_after_discount_i;",
									"",
									"                // tính lại thuế (thuế đã giảm giá)",
									"                let total_tax_amount_i = 0;",
									"                for(let j in items[i].taxes){",
									"                    items[i].taxes[j].amount = Math.round(items[i].after_tax_amount * items[i].taxes[j].rate/100);",
									"                    total_tax_amount_i += items[i].taxes[j].amount;",
									"                }",
									"",
									"                // total_amount",
									"                items[i].total_amount = items[i].before_tax_amount - items[i].discount_amount + total_tax_amount_i;",
									"            }",
									"        } else {",
									"            // sub_total_amount cần được tính lại giá trước thuế",
									"            sub_total_amount = 0;",
									"            sum_total_item_amount = 0;",
									"",
									"            // tính lại thuế (thuế chưa giảm giá)",
									"            total_net_amount = 0;",
									"            for(let i in items){",
									"                // total_item_amount",
									"                items[i].total_item_amount = items[i].item_amount*items[i].quantity;",
									"",
									"                sum_total_item_amount += items[i].total_item_amount;",
									"",
									"                // tổng rate thuế theo item => hiện tại chỉ apply 1 thuế",
									"                let total_tax_rate_i = 0;",
									"                for(let j in items[i].taxes){",
									"                    total_tax_rate_i += items[i].taxes[j].rate;",
									"                }",
									"                items[i].total_tax_rate_i = total_tax_rate_i;",
									"",
									"                // giá chưa thuế before_tax_amount",
									"                let item_net_amount_i = Math.round(items[i].total_item_amount / (1 + items[i].total_tax_rate_i/100));",
									"                items[i].before_tax_amount = item_net_amount_i;",
									"",
									"                total_net_amount += item_net_amount_i;",
									"            }",
									"",
									"            // chỉ support 1 discount trong 1 pos_order",
									"            term_discount = 0;",
									"            for(let i in items){",
									"                // giảm giá => tạm thời ko tính ra số cuối để trừ, nếu PO yêu cầu thì update lại",
									"                let item_total_discount_i = 0;",
									"                // if(i != items.length - 1){",
									"                    for(let k in discounts){",
									"                        if(discounts[k].is_rate){",
									"                            // item_total_discount_i += Math.round(items[i].before_tax_amount * discounts[k].value/100);",
									"                            item_total_discount_i += Math.round(items[i].total_item_amount * discounts[k].value/100);",
									"                        } else {",
									"                            // item_total_discount_i += Math.round(discounts[k].value * items[i].before_tax_amount/total_net_amount);",
									"                            item_total_discount_i += Math.round(discounts[k].value * items[i].total_item_amount/sum_total_item_amount);",
									"                        }",
									"                    }",
									"                    items[i].discount_amount = item_total_discount_i;",
									"                    term_discount += item_total_discount_i;",
									"",
									"                // } else {",
									"                //     for(let k in discounts){",
									"                //         // ở đây không cần làm tròn nữa vì chỉ là hiệu của 2 số chẵn",
									"                //         if(discounts[k].is_rate){",
									"                //             // item_total_discount_i += Math.round(total_net_amount * discounts[k].value/100 - term_discount);",
									"                //             item_total_discount_i += Math.round(total_net_amount * discounts[k].value/100 - term_discount);",
									"                //         } else {",
									"                //             item_total_discount_i += Math.round(discounts[k].value - term_discount);",
									"                //             // item_total_discount_i += Math.round(discounts[k].value*items[i].before_tax_amount/total_net_amount);",
									"                //         }",
									"                //     }",
									"                //     items[i].discount_amount = item_total_discount_i;",
									"                // }",
									"                // giá sau discount => after_tax_amount",
									"                let item_net_amount_after_discount_i = items[i].before_tax_amount - items[i].discount_amount;",
									"                items[i].after_tax_amount = item_net_amount_after_discount_i;",
									"                sub_total_amount += item_net_amount_after_discount_i;",
									"",
									"                // tính lại thuế (thuế đã giảm giá)",
									"                let total_tax_amount_i = 0;",
									"                for(let j in items[i].taxes){",
									"                    items[i].taxes[j].amount = Math.round(items[i].before_tax_amount * items[i].taxes[j].rate/100);",
									"                    total_tax_amount_i += items[i].taxes[j].amount;",
									"                }",
									"",
									"                // total_amount",
									"                items[i].total_amount = items[i].before_tax_amount - items[i].discount_amount + total_tax_amount_i;",
									"            }",
									"        }",
									"        break;",
									"    case 3:",
									"    default:",
									"        for(let i in discounts){",
									"            if(discounts[i].is_rate){",
									"                total_discount_amount += Math.round(discounts[i].value*sub_total_amount/100);",
									"            } else {",
									"                total_discount_amount += Math.round(discounts[i].value);",
									"            }",
									"        }",
									"",
									"        for(let i in items){",
									"            // total_item_amount, before_tax_amount",
									"            items[i].total_item_amount = items[i].item_amount*items[i].quantity;",
									"            items[i].before_tax_amount = items[i].item_amount*items[i].quantity;",
									"",
									"            // discount_amount",
									"            let discount_i = 0;",
									"            for(let j in discounts){",
									"                if(discounts[j].is_rate){",
									"                    discount_i += Math.round(discounts[j].value*items[i].total_item_amount/100);",
									"                } else {",
									"                    discount_i += Math.round(discounts[j].value*items[i].total_item_amount/sub_total_amount);",
									"                }",
									"            }",
									"            items[i].discount_amount = discount_i;",
									"",
									"            // item_tax_amount",
									"",
									"            // after_tax_amount",
									"            items[i].after_tax_amount = items[i].before_tax_amount;",
									"",
									"            // total_amount",
									"            items[i].total_amount = items[i].before_tax_amount - items[i].discount_amount;",
									"        }",
									"        break;",
									"}",
									"",
									"// payment_config",
									"for(let i in payment_method_list){",
									"    payment_config[payment_config.length] = payment_method_list[i].id;",
									"}",
									"",
									"// payment_account_id = list_bank_account[getRandomInt(0,list_bank_account.length - 1)].account_id;",
									"",
									"// NEW",
									"let list_surcharge = pm.environment.get(\"C-list_surcharge\");",
									"let totalRandSur = getRandomInt(1,list_surcharge.length - 1);",
									"let list_rand_sur = randNotDupe(0,list_surcharge.length - 1,totalRandSur);",
									"let surcharges = [];",
									"for(let i in list_rand_sur){",
									"    surcharges[surcharges.length] = {",
									"        \"id\":list_surcharge[list_rand_sur[i]].surcharge_id,",
									"        \"is_rate\":list_surcharge[list_rand_sur[i]].is_rate,",
									"        \"name\":list_surcharge[list_rand_sur[i]].name,",
									"        \"value\":list_surcharge[list_rand_sur[i]].value",
									"    }",
									"}",
									"",
									"let list_promotion = pm.environment.get(\"C-list_promotion\");",
									"let randPromo = getRandomInt(0,list_promotion.length - 1);",
									"let promotions = [{",
									"    \"id\":list_promotion[randPromo].promotion_id,",
									"    \"name\":list_promotion[randPromo].name,",
									"    \"is_rate\":list_promotion[randPromo].is_rate,",
									"    \"code\":list_promotion[randPromo].code,",
									"    \"value\":list_promotion[randPromo].value,",
									"    \"min_order_price\":list_promotion[randPromo].min_order_price,",
									"    \"max_price_discount\":list_promotion[randPromo].max_price_discount,",
									"    \"max_size\":list_promotion[randPromo].max_size,",
									"    \"max_size_per_user\":list_promotion[randPromo].max_size_per_user",
									"}];",
									"",
									"// tính lại giá trị",
									"",
									"let payload = {",
									"    \"branch_id\": branch_id,",
									"    // \"cart_status\": status, // draft, saved => ko care",
									"    \"contact_id\": contact_id,",
									"    \"currency\": \"vnd\",",
									"    \"discounts\": discounts,",
									"    \"due_at\": due_at,",
									"    \"email\": email,",
									"    \"items\": items,",
									"    \"order_code\": entry_code,",
									"    \"payment_config\":payment_config,",
									"    \"tax_type\": tax_type, // thấy theo business configs",
									"    \"is_pre_tax\":is_pre_tax, // true là trước thuế, false là sau thuế => lấy theo business configs",
									"    \"promotions\":promotions,",
									"    \"surcharges\":surcharges,",
									"    \"value_at\": created_order_at",
									"}",
									"",
									"console.log(\"payload: \",payload);",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));",
									"pm.environment.set(\"C-pos_order_obj\",payload);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = pm.response.json();",
									"let is_out_of_stock = pm.environment.get(\"C-out_of_stock\");",
									"if(is_out_of_stock){",
									"    pm.test(\"Must show error message about out_of_stock\", function () {",
									"        pm.expect(jsData.message.content).to.contains(\"Số lượng sản phẩm không đủ\");",
									"    });",
									"}",
									"",
									"if(pm.response.code == 200){",
									"    // console.log(\"debug: \", jsData.data);",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"",
									"    pm.test(\"System code is 102001\", function () {",
									"        pm.expect(jsData.code).to.eql(102001);",
									"    });",
									"",
									"    let pos_order_obj = pm.environment.get(\"C-pos_order_obj\");",
									"    let expected_items = [];",
									"    let exp_discount_amount = 0, exp_items_amount = 0, exp_total_amount = 0, exp_tax_amount = 0;",
									"    for(let i in pos_order_obj.items){",
									"        let list_tax_i = [];",
									"        let item_tax_amount = 0; // do hiện tại chỉ có 1 tax",
									"        for(let j in pos_order_obj.items[i].taxes){",
									"            if(\"item_tax_amount\" in pos_order_obj.items[i].taxes[j]){",
									"                list_tax_i[list_tax_i.length] = {",
									"                    \"tax_id\": pos_order_obj.items[i].taxes[j].tax_id,",
									"                    \"rate\": pos_order_obj.items[i].taxes[j].rate,",
									"                    \"amount\": pos_order_obj.items[i].taxes[j].item_tax_amount,",
									"                    \"account_id\": pos_order_obj.items[i].taxes[j].account_id",
									"                }",
									"                item_tax_amount += pos_order_obj.items[i].taxes[j].item_tax_amount;",
									"            } else {",
									"                list_tax_i[list_tax_i.length] = {",
									"                    \"tax_id\": pos_order_obj.items[i].taxes[j].tax_id,",
									"                    \"rate\": pos_order_obj.items[i].taxes[j].rate,",
									"                    \"amount\": pos_order_obj.items[i].taxes[j].amount,",
									"                    \"account_id\": pos_order_obj.items[i].taxes[j].account_id",
									"                }",
									"                item_tax_amount += pos_order_obj.items[i].taxes[j].amount;",
									"            }         ",
									"        }",
									"        ",
									"        if(pos_order_obj.tax_type == \"tax_not_applicable\") {",
									"            expected_items[expected_items.length] = {",
									"                // \"id\": \"00000000-0000-0000-0000-000000000000\",",
									"                \"product_id\": pos_order_obj.items[i].product_id,",
									"                \"sku_id\": pos_order_obj.items[i].sku_id,",
									"                \"item_amount\": pos_order_obj.items[i].item_amount,",
									"                // \"discount_amount\": pos_order_obj.items[i].discount_amount,",
									"                \"item_tax_amount\": item_tax_amount,",
									"                \"before_tax_amount\": pos_order_obj.items[i].before_tax_amount,",
									"                // \"after_tax_amount\": pos_order_obj.items[i].after_tax_amount,",
									"                // \"total_item_amount\": pos_order_obj.items[i].total_item_amount,",
									"                \"total_line_item_amount\":pos_order_obj.items[i].quantity*pos_order_obj.items[i].item_amount,",
									"                \"currency\": \"\",",
									"                \"quantity\": pos_order_obj.items[i].quantity,",
									"                \"account_id\": pos_order_obj.items[i].account_id,",
									"                \"note\": pos_order_obj.items[i].note,",
									"                \"taxes\": []",
									"            }",
									"        } else {",
									"            expected_items[expected_items.length] = {",
									"                // \"id\": \"00000000-0000-0000-0000-000000000000\",",
									"                \"product_id\": pos_order_obj.items[i].product_id,",
									"                \"sku_id\": pos_order_obj.items[i].sku_id,",
									"                \"item_amount\": pos_order_obj.items[i].item_amount,",
									"                // \"discount_amount\": pos_order_obj.items[i].discount_amount,",
									"                \"item_tax_amount\": item_tax_amount,",
									"                \"before_tax_amount\": pos_order_obj.items[i].before_tax_amount,",
									"                // \"after_tax_amount\": pos_order_obj.items[i].after_tax_amount,",
									"                // \"total_item_amount\": pos_order_obj.items[i].total_item_amount,",
									"                \"total_line_item_amount\":pos_order_obj.items[i].quantity*pos_order_obj.items[i].item_amount,",
									"                \"currency\": \"\",",
									"                \"quantity\": pos_order_obj.items[i].quantity,",
									"                \"account_id\": pos_order_obj.items[i].account_id,",
									"                \"note\": pos_order_obj.items[i].note,",
									"                \"taxes\": list_tax_i",
									"            }",
									"        }",
									"",
									"        exp_tax_amount += item_tax_amount;",
									"        exp_discount_amount += pos_order_obj.items[i].discount_amount;",
									"        exp_items_amount += pos_order_obj.items[i].total_item_amount;",
									"        exp_total_amount += pos_order_obj.items[i].total_amount;",
									"    }",
									"    pos_order_obj.exp_tax_amount = exp_tax_amount;",
									"",
									"    // is_pre_tax",
									"    pm.test(\"is_pre_tax of pos_order correctly! \", function () {",
									"        pm.expect(jsData.data.is_pre_tax == pos_order_obj.is_pre_tax).to.be.true;",
									"    });",
									"",
									"    // tax_type",
									"    pm.test(\"tax_type of pos_order correctly! \", function () {",
									"        pm.expect(jsData.data.tax_type == pos_order_obj.tax_type).to.be.true;",
									"    });",
									"    ",
									"    // check discounts obj",
									"    pm.test(\"discounts of pos_order correctly! \", function () {",
									"        // console.log(\"exp discounts: \",pos_order_obj.discounts);",
									"        // console.log(\"act discounts: \",jsData.data.discounts);",
									"        pm.expect(JSON.stringify(jsData.data.discounts) == JSON.stringify(pos_order_obj.discounts)).to.be.true;",
									"    });",
									"",
									"    let act_items = [];",
									"    // console.log(\"debug:\",jsData.data);",
									"    for(let i in jsData.data.items){",
									"        let list_tax_i = [];",
									"        let item_tax_amount = 0; // do hiện tại chỉ có 1 tax",
									"        for(let j in jsData.data.items[i].taxes){",
									"            list_tax_i[list_tax_i.length] = {",
									"                \"tax_id\": jsData.data.items[i].taxes[j].tax_id,",
									"                \"rate\": jsData.data.items[i].taxes[j].rate,",
									"                \"amount\": jsData.data.items[i].taxes[j].amount,",
									"                \"account_id\": jsData.data.items[i].taxes[j].account_id",
									"            }",
									"            item_tax_amount += jsData.data.items[i].taxes[j].amount;",
									"        }",
									"",
									"        act_items[act_items.length] = {",
									"            // \"id\": \"00000000-0000-0000-0000-000000000000\",",
									"            \"product_id\": jsData.data.items[i].product_id,",
									"            \"sku_id\": jsData.data.items[i].sku_id,",
									"            \"item_amount\": jsData.data.items[i].item_amount,",
									"            // \"discount_amount\": jsData.data.items[i].discount_amount,",
									"            \"item_tax_amount\": item_tax_amount,",
									"            \"before_tax_amount\": jsData.data.items[i].before_tax_amount,",
									"            // \"after_tax_amount\": jsData.data.items[i].after_tax_amount,",
									"            // \"total_item_amount\": jsData.data.items[i].total_item_amount,",
									"            \"total_line_item_amount\":jsData.data.items[i].total_line_item_amount,",
									"            \"currency\": \"\",",
									"            \"quantity\": jsData.data.items[i].quantity,",
									"            \"account_id\": jsData.data.items[i].account_id,",
									"            \"note\": jsData.data.items[i].note,",
									"            \"taxes\": list_tax_i",
									"        }",
									"    }",
									"    // check items obj",
									"    pm.test(\"items of pos_order correctly! \", function () {",
									"        console.log(\"exp items: \" + JSON.stringify(expected_items));",
									"        console.log(\"act items: \" + JSON.stringify(act_items));",
									"        pm.expect(JSON.stringify(act_items) == JSON.stringify(expected_items)).to.be.true;",
									"    });",
									"",
									"    // check discount amount",
									"    pm.test(\"discount_amount of pos_order correctly! \", function () {",
									"        console.log(\"exp discount_amount: \" + exp_discount_amount);",
									"        console.log(\"act discount_amount: \" + jsData.data.discount_amount);",
									"        pm.expect(jsData.data.discount_amount == exp_discount_amount).to.be.true;",
									"    });",
									"    pos_order_obj.exp_discount_amount = exp_discount_amount;",
									"",
									"    // cần tính lại sau khi apply promotion & surcharge",
									"    let surcharge_fee = 0;",
									"    for(let i in pos_order_obj.surcharges){",
									"        if(pos_order_obj.surcharges[i].is_rate){",
									"            surcharge_fee += pos_order_obj.surcharges[i].value * exp_items_amount / 100;",
									"        } else {",
									"            surcharge_fee += pos_order_obj.surcharges[i].value;",
									"        }",
									"    }",
									"    console.log(\"surcharge_fee: \" + surcharge_fee);",
									"    surcharge_fee = Math.round(surcharge_fee);",
									"    // check surcharge_fee",
									"    pm.test(\"surcharge_amount of pos_order correctly! \", function () {",
									"        console.log(\"exp surcharge_amount: \" + surcharge_fee);",
									"        console.log(\"act surcharge_amount: \" + jsData.data.surcharge_amount);",
									"        pm.expect(jsData.data.surcharge_amount == surcharge_fee).to.be.true;",
									"    });",
									"    pos_order_obj.exp_surcharge_amount = surcharge_fee;",
									"    let promotion_discount = 0;",
									"    for(let i in pos_order_obj.promotions){",
									"        if(pos_order_obj.promotions[i].is_rate){",
									"            promotion_discount += pos_order_obj.promotions[i].value * exp_items_amount / 100;",
									"        } else {",
									"            promotion_discount += pos_order_obj.promotions[i].value;",
									"        }",
									"",
									"        // check điều kiện",
									"        if(exp_items_amount >= pos_order_obj.promotions[i].min_order_price){",
									"            if(promotion_discount > pos_order_obj.promotions[i].max_price_discount){",
									"                promotion_discount = pos_order_obj.promotions[i].max_price_discount;",
									"            }",
									"        } else {",
									"            promotion_discount = 0;",
									"        }",
									"    }",
									"    console.log(\"promotion_discount: \" + promotion_discount);",
									"    promotion_discount = Math.round(promotion_discount);",
									"    // check promotion_amount",
									"    pm.test(\"promotion_amount of pos_order correctly! \", function () {",
									"        console.log(\"exp promotion_amount: \" + promotion_discount);",
									"        console.log(\"act promotion_amount: \" + jsData.data.promotion_amount);",
									"        pm.expect(jsData.data.promotion_amount == promotion_discount).to.be.true;",
									"    });",
									"    pos_order_obj.exp_promotion_amount = promotion_discount;",
									"",
									"    // check total item amount",
									"    exp_total_amount = exp_total_amount + surcharge_fee - promotion_discount;",
									"    pm.test(\"total_amount of pos_order correctly! \", function () {",
									"        console.log(\"exp total_amount: \" + exp_total_amount);",
									"        console.log(\"act total_amount: \" + jsData.data.total_amount);",
									"        pm.expect(jsData.data.total_amount == exp_total_amount).to.be.true;",
									"    });",
									"    pos_order_obj.exp_total_amount = exp_total_amount;",
									"",
									"    // check sub_total_amount",
									"    pm.test(\"sub_total_amount of pos_order correctly! \", function () {",
									"        console.log(\"exp sub_total_amount: \" + exp_items_amount);",
									"        console.log(\"act sub_total_amount: \" + jsData.data.sub_total_amount);",
									"        pm.expect(jsData.data.sub_total_amount == exp_items_amount).to.be.true;",
									"    });",
									"    pos_order_obj.sub_total_amount = exp_items_amount;",
									"",
									"    pm.environment.unset(\"C-tax_case\");",
									"    testcase++;",
									"    pm.environment.set(\"C-testcase\",testcase);",
									"    pm.environment.set(\"C-pos_order_obj\",pos_order_obj);",
									"    postman.setNextRequest(\"create_pos_order\"); // create_pos_order",
									"} else {",
									"    console.log(\"Can't call calculate pos_order, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/pos-order/calculate",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"pos-order",
								"calculate"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_list_pos_order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ============================= random number between min and max",
									"function getRandomInt(min, max) {",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"",
									"/**",
									" * NOTE:",
									" * testcase == 2: get total only",
									" * testcase == 4: get all record & check (after apply sort, can get only 1st page)",
									" */",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = pm.response.json();",
									"if(pm.response.code == 200 && jsData.code == 102000){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let total_pages = 0, total_pos_order = 0;",
									"    try {",
									"        total_pages = jsData.meta.total_pages;",
									"        total_pos_order = jsData.meta.total_rows;",
									"    } catch {",
									"        console.log(\"Missing meta data\");",
									"    }",
									"    let page = pm.environment.get(\"C-page\");",
									"",
									"    let list_pos_order, old_total_pos_order;",
									"    switch(testcase){",
									"        case 2:",
									"            pm.environment.unset(\"C-page\");",
									"            pm.environment.unset(\"C-page_size\");",
									"            pm.test(\"Got total pos_order! \" + total_pos_order, function () {",
									"                pm.expect(total_pos_order > 0).to.be.true;",
									"            });",
									"            pm.environment.set(\"C-total_pos_order\",total_pos_order);",
									"",
									"            // for(let i in jsData.data){",
									"            //     if(jsData.data[i].cart_status == \"active\"){",
									"            //         pm.environment.set(\"C-existed_order_code\",jsData.data[i].order_code);",
									"            //         break;",
									"            //     }",
									"            // }",
									" ",
									"            testcase++;",
									"            // testcase = 6;",
									"            pm.environment.set(\"C-testcase\",testcase);",
									"            postman.setNextRequest(\"calculate_pos_order\"); // calculate_pos_order",
									"            break;",
									"        case 5: case 8:",
									"            list_pos_order = pm.environment.get(\"C-list_pos_order\");",
									"            if(!list_pos_order){",
									"                list_pos_order = [];",
									"            }",
									"",
									"            for(let item in jsData.data){",
									"                list_pos_order[list_pos_order.length] = {",
									"                    \"pos_order_id\":jsData.data[item].id,",
									"                    \"created_at\":jsData.data[item].created_at,",
									"                    \"order_code\":jsData.data[item].order_code,",
									"                    \"system_code\":jsData.data[item].system_code,",
									"                    \"cart_status\":jsData.data[item].cart_status,",
									"                    \"payment_status\":jsData.data[item].payment_status,",
									"                    \"items_amount\":jsData.data[item].items_amount,",
									"                    \"sub_total_amount\":jsData.data[item].sub_total_amount,",
									"                    \"paid_amount\":jsData.data[item].paid_amount,",
									"                    \"currency\":jsData.data[item].currency,",
									"                    \"contact_id\":jsData.data[item].contact_id,",
									"                    \"entry_type\":jsData.data[item].entry_type,",
									"                    \"note\":jsData.data[item].note,",
									"                    \"value_at\":jsData.data[item].value_at,",
									"                    \"due_at\":jsData.data[item].due_at,",
									"                    \"send_at\":jsData.data[item].send_at,",
									"                    \"account_id\":jsData.data[item].account_id,",
									"                    \"tax_type\":jsData.data[item].tax_type,",
									"                    \"final_status\":jsData.data[item].final_status,",
									"                    \"sales_rep_info\":jsData.data[item].sales_rep_info",
									"                }",
									"                // list_pos_order[list_pos_order.length] = jsData.data[item];",
									"            }",
									"            pm.environment.set(\"C-list_pos_order\",list_pos_order);",
									"",
									"            let configs = pm.environment.get(\"C-configs\");",
									"            if(page >= total_pages || page >= configs.limit_page){",
									"                // must clear page & page_size",
									"                pm.environment.unset(\"C-page\");",
									"                pm.environment.unset(\"C-page_size\");",
									"",
									"                let pos_order_obj = pm.environment.get(\"C-pos_order_obj\");",
									"                // console.log(\"pos_order_obj: \", pos_order_obj);",
									"                old_total_pos_order = pm.environment.get(\"C-total_pos_order\");",
									"",
									"                pm.test(\"Total pos_order increase 1\", function () {",
									"                    pm.expect(total_pos_order == old_total_pos_order + 1).to.be.true;",
									"                });",
									"",
									"                let isFound = false;",
									"                for(let i in list_pos_order){",
									"                    if(list_pos_order[i].pos_order_id == pos_order_obj.pos_order_id){",
									"                        isFound = true;",
									"                        console.log(\"debug: \" + JSON.stringify(list_pos_order[i]));",
									"",
									"                        pm.test(\"order_code of pos_order correctly! \" + pos_order_obj.order_code, function () {",
									"                            pm.expect(pos_order_obj.order_code == list_pos_order[i].order_code).to.be.true;",
									"                        });",
									"",
									"                        pm.test(\"sub_total_amount of pos_order correctly! \" + pos_order_obj.sub_total_amount, function () {",
									"                            pm.expect(pos_order_obj.sub_total_amount == list_pos_order[i].sub_total_amount).to.be.true;",
									"                        });",
									"",
									"                        pm.test(\"contact_id of pos_order correctly! \" + pos_order_obj.contact_id, function () {",
									"                            pm.expect(pos_order_obj.contact_id == list_pos_order[i].contact_id).to.be.true;",
									"                        });",
									"",
									"                        // pm.test(\"email of pos_order correctly! \" + pos_order_obj.email, function () {",
									"                        //     pm.expect(pos_order_obj.email == list_pos_order[i].email).to.be.true;",
									"                        // });",
									"",
									"                        pm.test(\"value_at of pos_order correctly! \" + pos_order_obj.value_at, function () {",
									"                            console.log(\"exp value_at: \" + pos_order_obj.value_at);",
									"                            console.log(\"act value_at: \" + list_pos_order[i].value_at);",
									"                            pm.expect(pos_order_obj.value_at.substring(0,17) == list_pos_order[i].value_at.substring(0,17)).to.be.true;",
									"                        });",
									"",
									"                        pm.test(\"due_at of pos_order correctly! \" + pos_order_obj.due_at, function () {",
									"                            console.log(\"exp due_at: \" + pos_order_obj.due_at);",
									"                            console.log(\"act due_at: \" + list_pos_order[i].due_at);",
									"                            pm.expect(pos_order_obj.due_at.substring(0,17) == list_pos_order[i].due_at.substring(0,17)).to.be.true;",
									"                        });",
									"",
									"                        pm.test(\"note of pos_order correctly! \" + pos_order_obj.note, function () {",
									"                            // console.log(\"pos_order at i: \",list_pos_order[i]);",
									"                            pm.expect(pos_order_obj.note == list_pos_order[i].note).to.be.true;",
									"                        });",
									"",
									"                        pm.test(\"tax_type of pos_order correctly! \" + pos_order_obj.tax_type, function () {",
									"                            pm.expect(pos_order_obj.tax_type == list_pos_order[i].tax_type).to.be.true;",
									"                        });",
									"",
									"                        // pm.test(\"taxes of pos_order correctly! \" + pos_order_obj.taxes, function () {",
									"                        //     pm.expect(JSON.stringify(pos_order_obj.taxes) == JSON.stringify(list_pos_order[i].taxes)).to.be.true;",
									"                        // });",
									"",
									"                        // pm.test(\"payment_config of pos_order correctly! \" + pos_order_obj.payment_config, function () {",
									"                        //     pm.expect(JSON.stringify(pos_order_obj.payment_config) == JSON.stringify(list_pos_order[i].payment_config)).to.be.true;",
									"                        // });",
									"",
									"                        pm.test(\"status of pos_order correctly! \" + pos_order_obj.cart_status, function () {",
									"                            pm.expect(pos_order_obj.cart_status == list_pos_order[i].cart_status).to.be.true;",
									"                        });",
									"",
									"                        // final_status",
									"                        let exp_final_status;",
									"                        if(testcase == 8){",
									"                            let ranTimeCase = pm.environment.get(\"C-ranTimeCase\");",
									"                            if(ranTimeCase == 2 || ranTimeCase == 3){",
									"                                exp_final_status = \"unsent\";",
									"                            } else {",
									"                                exp_final_status = \"overdue\"; // khả năng sẽ sai do đã thay đổi ranTimeCase => update sau",
									"                            }",
									"                        } else {",
									"                            exp_final_status = pos_order_obj.cart_status;",
									"                        }",
									"                        pm.test(\"final_status of pos_order is \" + exp_final_status, function () {",
									"                            console.log(\"act final_status:  \" + list_pos_order[i].final_status);",
									"                            console.log(\"exp final_status:  \" + exp_final_status);",
									"                            pm.expect(exp_final_status == list_pos_order[i].final_status).to.be.true;",
									"                        });",
									"                        pos_order_obj.exp_final_status = exp_final_status;",
									"",
									"                        // sales_rep_info.id => user_id, sales_rep_info.full_name",
									"                        let userInfo = pm.environment.get(\"C-userInfo\");",
									"                        console.log(\"userInfo: \", userInfo);",
									"                        pm.test(\"sales_rep_info.user_id of pos_order is \" + userInfo.id, function () {",
									"                            console.log(\"act sales_rep_info.user_id:  \" + list_pos_order[i].sales_rep_info.id);",
									"                            pm.expect(list_pos_order[i].sales_rep_info.user_id == userInfo.id).to.be.true;",
									"                        });",
									"",
									"                        // pm.test(\"sales_rep_info.full_name of pos_order is \" + userInfo.first_name, function () {",
									"                        //     console.log(\"act sales_rep_inf.full_name:  \" + list_pos_order[i].sales_rep_info.full_name);",
									"                        //     pm.expect(list_pos_order[i].sales_rep_info.full_name == userInfo.first_name).to.be.true;",
									"                        // });",
									"",
									"                        // pm.test(\"discounts of pos_order correctly! \" + pos_order_obj.discounts, function () {",
									"                        //     pm.expect(JSON.stringify(pos_order_obj.discounts) == JSON.stringify(list_pos_order[i].discounts)).to.be.true;",
									"                        // });",
									"                        break;",
									"                    }",
									"                }",
									"",
									"                pm.test(\"Found new product\", function () {",
									"                    pm.expect(isFound).to.be.true;",
									"                });",
									"",
									"                // update total records",
									"                pm.environment.set(\"C-total_pos_order\",total_pos_order);",
									"                pm.environment.set(\"C-pos_order_obj\",pos_order_obj);",
									"                pm.environment.unset(\"C-list_pos_order\");",
									"",
									"                postman.setNextRequest(\"get_pos_order_detail\"); // get_pos_order_detail",
									"            } else {",
									"                page++;",
									"                pm.environment.set(\"C-page\",page);",
									"",
									"                console.log(\"view next page (\" + page + \") to get more product\");",
									"                postman.setNextRequest(\"get_list_pos_order\");",
									"            }",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow\");",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get list pos_order, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let page = pm.environment.get(\"C-page\");",
									"",
									"if(!page){",
									"    page = 1;",
									"    pm.environment.set(\"C-page\",page);",
									"",
									"    let page_size = 50;",
									"    pm.environment.set(\"C-page_size\",page_size);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/pos-order/get-list?business_id={{C-business_id}}&page={{C-page}}&page_size={{C-page_size}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"pos-order",
								"get-list"
							],
							"query": [
								{
									"key": "business_id",
									"value": "{{C-business_id}}"
								},
								{
									"key": "page",
									"value": "{{C-page}}"
								},
								{
									"key": "page_size",
									"value": "{{C-page_size}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get_pos_order_detail",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let pos_order_obj = pm.environment.get(\"C-pos_order_obj\");",
									"let pos_order_id = pos_order_obj.pos_order_id;",
									"console.log(\"view detail pos_order: \" + pos_order_id);",
									"",
									"pm.environment.set(\"C-pos_order_id\",pos_order_id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200 && jsData.code == 102000){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let configs = pm.environment.get(\"C-configs\");",
									"    console.log(\"Debug: \" + JSON.stringify(jsData));",
									"",
									"    let pos_order_obj = pm.environment.get(\"C-pos_order_obj\");",
									"    for(let i in pos_order_obj.items){",
									"        for(let j in jsData.data.items){",
									"            if(pos_order_obj.items[i].product_id == jsData.data.items[j].product_id && pos_order_obj.items[i].item_amount == jsData.data.items[j].item_amount && pos_order_obj.items[i].quantity == jsData.data.items[j].quantity){",
									"                pos_order_obj.items[i].item_id = jsData.data.items[j].id;",
									"                break;",
									"            }",
									"        }",
									"    }",
									"    pm.environment.set(\"C-pos_order_obj\",pos_order_obj);",
									"    ",
									"    pm.test(\"order_code of pos_order correctly! \" + pos_order_obj.order_code, function () {",
									"        pm.expect(pos_order_obj.order_code == jsData.data.order_code).to.be.true;",
									"    });",
									"",
									"    pm.test(\"sub_total_amount of pos_order correctly! \" + pos_order_obj.sub_total_amount, function () {",
									"        pm.expect(pos_order_obj.sub_total_amount == jsData.data.sub_total_amount).to.be.true;",
									"    });",
									"",
									"    pm.test(\"contact_id of pos_order correctly! \" + pos_order_obj.contact_id, function () {",
									"        pm.expect(pos_order_obj.contact_id == jsData.data.contact_id).to.be.true;",
									"    });",
									"",
									"    pm.test(\"email of pos_order correctly! \" + pos_order_obj.email, function () {",
									"        pm.expect(pos_order_obj.email == jsData.data.email).to.be.true;",
									"    });",
									"",
									"    pm.test(\"created_order_at of pos_order correctly! \" + pos_order_obj.value_at, function () {",
									"        pm.expect(pos_order_obj.value_at.substring(0,19) == jsData.data.value_at.substring(0,19)).to.be.true;",
									"    });",
									"",
									"    pm.test(\"due_at of pos_order correctly! \" + pos_order_obj.due_at, function () {",
									"        pm.expect(pos_order_obj.due_at.substring(0,19) == jsData.data.due_at.substring(0,19)).to.be.true;",
									"    });",
									"",
									"    pm.test(\"note of pos_order correctly! \" + pos_order_obj.note, function () {",
									"        // console.log(\"jsData.data: \",jsData.data);",
									"        pm.expect(pos_order_obj.note == jsData.data.note).to.be.true;",
									"    });",
									"",
									"    // tax_type",
									"    pm.test(\"tax_type of pos_order correctly! \", function () {",
									"        pm.expect(jsData.data.tax_type == pos_order_obj.tax_type).to.be.true;",
									"    });",
									"    ",
									"    // check discounts obj",
									"    // pm.test(\"discounts of pos_order correctly! \", function () {",
									"    //     console.log(\"exp discounts: \",pos_order_obj.discounts);",
									"    //     console.log(\"act discounts: \",jsData.data.discounts);",
									"    //     pm.expect(JSON.stringify(jsData.data.discounts) == JSON.stringify(pos_order_obj.discounts)).to.be.true;",
									"    // });",
									"",
									"    // check items obj",
									"    // pm.test(\"items of pos_order correctly! \", function () {",
									"    //     console.log(\"exp items: \",pos_order_obj.expected_items);",
									"    //     console.log(\"act items: \",jsData.data.items);",
									"    //     pm.expect(JSON.stringify(jsData.data.items) == JSON.stringify(pos_order_obj.expected_items)).to.be.true;",
									"    // });",
									"",
									"    // check discount amount",
									"    pm.test(\"discount_amount of pos_order correctly! \", function () {",
									"        console.log(\"act discount_amount: \" + jsData.data.discount_amount);",
									"        pm.expect(jsData.data.discount_amount == pos_order_obj.exp_discount_amount).to.be.true;",
									"    });",
									"",
									"    // check total item amount",
									"    pm.test(\"total_amount of pos_order correctly! \", function () {",
									"        console.log(\"act total_amount: \" + jsData.data.total_amount);",
									"        pm.expect(jsData.data.total_amount == pos_order_obj.exp_total_amount).to.be.true;",
									"    });",
									"",
									"    // check surcharge_amount",
									"    pm.test(\"surcharge_amount of pos_order correctly! \", function () {",
									"        console.log(\"exp surcharge_amount: \" + pos_order_obj.exp_surcharge_amount);",
									"        console.log(\"act surcharge_amount: \" + jsData.data.surcharge_amount);",
									"        pm.expect(jsData.data.surcharge_amount == pos_order_obj.exp_surcharge_amount).to.be.true;",
									"    });",
									"",
									"    // check promotion_amount",
									"    pm.test(\"promotion_amount of pos_order correctly! \", function () {",
									"        console.log(\"exp promotion_amount: \" + pos_order_obj.exp_promotion_amount);",
									"        console.log(\"act promotion_amount: \" + jsData.data.promotion_amount);",
									"        pm.expect(jsData.data.promotion_amount == pos_order_obj.exp_promotion_amount).to.be.true;",
									"    });",
									"",
									"    // tax_amount",
									"    pm.test(\"tax_amount of pos_order correctly! \", function () {",
									"        console.log(\"act tax_amount: \" + jsData.data.tax_amount);",
									"        pm.expect(jsData.data.tax_amount == pos_order_obj.exp_tax_amount).to.be.true;",
									"    });",
									"",
									"    // return_amount, paid_amount must be 0",
									"    pm.test(\"return_amount must be 0\", function () {",
									"        pm.expect(jsData.data.return_amount == 0).to.be.true;",
									"    });",
									"",
									"    // paid_amount, payment_due_amount",
									"    let exp_paid_amount = 0, exp_payment_due_amount = jsData.data.total_amount;",
									"    if(configs.create_order_status == \"completed\" && configs.use_payment_method == \"cash\"){",
									"        exp_paid_amount = pos_order_obj.payment_request.amount;",
									"        exp_payment_due_amount = exp_payment_due_amount - exp_paid_amount;",
									"        if(exp_payment_due_amount < 0){ // khi BE tính sai",
									"            exp_payment_due_amount = 0;",
									"        }",
									"    }",
									"",
									"    pm.test(\"paid_amount of pos_order correctly! \", function () {",
									"        console.log(\"exp paid_amount: \" + exp_paid_amount);",
									"        console.log(\"act paid_amount: \" + jsData.data.paid_amount);",
									"        pm.expect(jsData.data.paid_amount == exp_paid_amount).to.be.true;",
									"    });",
									"    // pos_order_obj.exp_paid_amount = exp_paid_amount;",
									"    pm.test(\"payment_due_amount of pos_order correctly! \", function () {",
									"        console.log(\"exp payment_due_amount: \" + exp_payment_due_amount);",
									"        console.log(\"act payment_due_amount: \" + jsData.data.payment_due_amount);",
									"        pm.expect(jsData.data.payment_due_amount == exp_payment_due_amount).to.be.true;",
									"    });",
									"    // pos_order_obj.exp_payment_due_amount = exp_payment_due_amount;",
									"",
									"    // chưa có setting này",
									"    // pm.test(\"payment_config of pos_order correctly! \" + pos_order_obj.payment_config, function () {",
									"    //     pm.expect(JSON.stringify(pos_order_obj.payment_config) == JSON.stringify(jsData.data.payment_config)).to.be.true;",
									"    // });",
									"",
									"    pm.test(\"cart_status of pos_order correctly! \" + pos_order_obj.cart_status, function () {",
									"        pm.expect(pos_order_obj.cart_status == jsData.data.cart_status).to.be.true;",
									"    });",
									"",
									"    // final_status",
									"    pm.test(\"final_status of pos_order correctly! \" + pos_order_obj.exp_final_status, function () {",
									"        pm.expect(pos_order_obj.exp_final_status == jsData.data.final_status).to.be.true;",
									"    });",
									"",
									"    postman.setNextRequest(\"buyer_view_pos_order\"); // buyer_view_pos_order",
									"} else {",
									"    console.log(\"Can't get internal contact detail, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/pos-order/get-one/{{C-pos_order_id}}?business_id={{C-business_id}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"pos-order",
								"get-one",
								"{{C-pos_order_id}}"
							],
							"query": [
								{
									"key": "business_id",
									"value": "{{C-business_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "create_pos_order",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/**",
									" *  =============================  func randNotDupe(min, max, total)",
									" * total: số lượng random, ko dc nhỏ hơn max-min+1",
									" * return: array",
									" */",
									"function randNotDupe(min, max, total){",
									"  let arrNum = []; // new empty array",
									"  let n, p;",
									"  for (let i = 0; i < total; i++) {",
									"    do {",
									"      n = Math.floor(Math.random() * (max - min + 1)) + min;",
									"      p = arrNum.includes(n);",
									"      if(!p){",
									"        arrNum.push(n);",
									"      }",
									"    }",
									"    while(p);",
									"  }",
									"  return arrNum;",
									"}",
									"",
									"// ============================= random number between min and max",
									"function getRandomInt(min, max) {",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"",
									"// ============================= random characters",
									"function randomChars(length) {",
									"    var result           = '';",
									"    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
									"    var charactersLength = characters.length;",
									"    for ( var i = 0; i < length; i++ ) {",
									"      result += characters.charAt(Math.floor(Math.random() * charactersLength));",
									"   }",
									"   return result;",
									"}",
									"",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let configs = pm.environment.get(\"C-configs\");",
									"let pos_order_obj = pm.environment.get(\"C-pos_order_obj\");",
									"",
									"// payment_request",
									"if(configs.use_payment_method == \"cash\" && configs.create_order_status == \"completed\"){",
									"    let list_cash_account = pm.environment.get(\"C-list_cash_account\");",
									"    let cash_obj = list_cash_account[getRandomInt(0,list_cash_account.length - 1)];",
									"    pos_order_obj.payment_request = {",
									"        \"account_id\":cash_obj.account_id,",
									"        \"account_type\":\"manual\",",
									"        \"amount\":pos_order_obj.exp_total_amount // case này thanh toán đủ, làm trước cho thông luồng",
									"    }",
									"}",
									"",
									"// add more info",
									"pos_order_obj.branch_id = pm.environment.get(\"C-branch_id\");",
									"pos_order_obj.cart_status = configs.create_order_status;",
									"pos_order_obj.attachment_url = []; // string",
									"pos_order_obj.note = \"[API] Note for pos_order \" + pos_order_obj.order_code;",
									"pos_order_obj.contact_id = pm.environment.get(\"C-contact_id\");",
									"",
									"pos_order_obj.reference_code = \"APIREF\" + randomChars(4);",
									"// pos_order_obj.pos_order_pic_id = \"\";",
									"// pos_order_obj.reference_code = \"\";",
									"// pos_order_obj.ops_status = \"\";",
									"",
									"console.log(\"payload: \",pos_order_obj);",
									"pm.environment.set(\"C-payload\",JSON.stringify(pos_order_obj));",
									"pm.environment.set(\"C-pos_order_obj\",pos_order_obj);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let configs = pm.environment.get(\"C-configs\");",
									"    // console.log(\"debug: \" + JSON.stringify(jsData));",
									"",
									"    pm.test(\"System code is 102001\", function () {",
									"        pm.expect(jsData.code).to.eql(102001);",
									"    });",
									"",
									"    let pos_order_obj = pm.environment.get(\"C-pos_order_obj\");",
									"    let expected_items = [];",
									"",
									"    pos_order_obj.pos_order_id = jsData.data.id;",
									"    pos_order_obj.system_code = jsData.data.system_code;",
									"",
									"    // tax_type",
									"    pm.test(\"tax_type of pos_order correctly! \", function () {",
									"        pm.expect(jsData.data.tax_type == pos_order_obj.tax_type).to.be.true;",
									"    });",
									"",
									"    pos_order_obj.expected_items = expected_items;",
									"",
									"    // check discount amount",
									"    pm.test(\"discount_amount of pos_order correctly! \", function () {",
									"        console.log(\"exp discount_amount: \" + pos_order_obj.exp_discount_amount);",
									"        console.log(\"act discount_amount: \" + jsData.data.discount_amount);",
									"        pm.expect(jsData.data.discount_amount == pos_order_obj.exp_discount_amount).to.be.true;",
									"    });",
									"",
									"    // check surcharge_amount",
									"    pm.test(\"surcharge_amount of pos_order correctly! \", function () {",
									"        console.log(\"exp surcharge_amount: \" + pos_order_obj.exp_surcharge_amount);",
									"        console.log(\"act surcharge_amount: \" + jsData.data.surcharge_amount);",
									"        pm.expect(jsData.data.surcharge_amount == pos_order_obj.exp_surcharge_amount).to.be.true;",
									"    });",
									"",
									"    // check promotion_amount",
									"    pm.test(\"promotion_amount of pos_order correctly! \", function () {",
									"        console.log(\"exp promotion_amount: \" + pos_order_obj.exp_promotion_amount);",
									"        console.log(\"act promotion_amount: \" + jsData.data.promotion_amount);",
									"        pm.expect(jsData.data.promotion_amount == pos_order_obj.exp_promotion_amount).to.be.true;",
									"    });",
									"",
									"    // sub_total_amount",
									"    pm.test(\"sub_total_amount of pos_order correctly! \", function () {",
									"        console.log(\"exp sub_total_amount: \" + pos_order_obj.sub_total_amount);",
									"        console.log(\"act sub_total_amount: \" + jsData.data.items_amount);",
									"        pm.expect(jsData.data.sub_total_amount == pos_order_obj.sub_total_amount).to.be.true;",
									"    });",
									"",
									"    // check total item amount",
									"    pm.test(\"total_amount of pos_order correctly! \", function () {",
									"        console.log(\"exp total_amount: \" + pos_order_obj.exp_total_amount);",
									"        console.log(\"act total_amount: \" + jsData.data.total_amount);",
									"        pm.expect(jsData.data.total_amount == pos_order_obj.exp_total_amount).to.be.true;",
									"    });",
									"",
									"    // tax_amount",
									"    pm.test(\"tax_amount of pos_order correctly! \", function () {",
									"        console.log(\"exp tax_amount: \" + pos_order_obj.exp_tax_amount);",
									"        console.log(\"act tax_amount: \" + jsData.data.tax_amount);",
									"        pm.expect(jsData.data.tax_amount == pos_order_obj.exp_tax_amount).to.be.true;",
									"    });",
									"",
									"    // return_amount must be 0",
									"    pm.test(\"return_amount must be 0\", function () {",
									"        pm.expect(jsData.data.return_amount == 0).to.be.true;",
									"    });",
									"",
									"    // payment_due_amount, paid_amount => nếu complete & payment_method là cash thì cần tính lại",
									"    // let exp_paid_amount = 0, exp_payment_due_amount = jsData.data.total_amount;",
									"    // if(configs.create_order_status == \"completed\" && configs.use_payment_method == \"cash\"){",
									"    //     exp_paid_amount = pos_order_obj.payment_request.amount;",
									"    //     exp_payment_due_amount = exp_payment_due_amount - exp_paid_amount;",
									"    //     if(exp_payment_due_amount < 0){ // khi BE tính sai",
									"    //         exp_payment_due_amount = 0;",
									"    //     }",
									"    // }",
									"",
									"    // 2 thông số này BE ko trả, check trong list và detail",
									"    // pm.test(\"exp_paid_amount of pos_order correctly! \", function () {",
									"    //     console.log(\"exp paid_amount: \" + exp_paid_amount);",
									"    //     console.log(\"act paid_amount: \" + jsData.data.paid_amount);",
									"    //     pm.expect(jsData.data.paid_amount == exp_paid_amount).to.be.true;",
									"    // });",
									"    // pos_order_obj.exp_paid_amount = exp_paid_amount;",
									"    // pm.test(\"payment_due_amount of pos_order correctly! \", function () {",
									"    //     console.log(\"exp payment_due_amount: \" + exp_payment_due_amount);",
									"    //     console.log(\"act payment_due_amount: \" + jsData.data.payment_due_amount);",
									"    //     pm.expect(jsData.data.payment_due_amount == exp_payment_due_amount).to.be.true;",
									"    // });",
									"    // pos_order_obj.exp_payment_due_amount = exp_payment_due_amount;",
									"",
									"    testcase++;",
									"    pm.environment.set(\"C-testcase\",testcase);",
									"    pm.environment.set(\"C-pos_order_obj\",pos_order_obj);",
									"    postman.setNextRequest(\"get_list_pos_order\"); // get_list_pos_order",
									"} else {",
									"    console.log(\"Can't create pos_order, end test \", jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							},
							{
								"key": "X-Location-Timezone",
								"value": "UTC+07:00"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/pos-order/create",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"pos-order",
								"create"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "buyer view",
			"item": [
				{
					"name": "buyer_view_pos_order",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let pos_order_obj = pm.environment.get(\"C-pos_order_obj\");",
									"let system_code = pos_order_obj.system_code;",
									"console.log(\"view detail pos_order: \" + system_code);",
									"",
									"pm.environment.set(\"C-system_code\",system_code);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    console.log(\"Debug: \" + JSON.stringify(jsData));",
									"",
									"    let pos_order_obj = pm.environment.get(\"C-pos_order_obj\");",
									"    for(let i in pos_order_obj.items){",
									"        for(let j in jsData.data.entry_items){",
									"            if(pos_order_obj.items[i].product_id == jsData.data.entry_items[j].product_id){",
									"                pos_order_obj.items[i].item_id = jsData.data.entry_items[j].id;",
									"                break;",
									"            }",
									"        }",
									"    }",
									"    pm.environment.set(\"C-pos_order_obj\",pos_order_obj);",
									"    ",
									"    pm.test(\"order_code of pos_order correctly! \" + pos_order_obj.order_code, function () {",
									"        pm.expect(pos_order_obj.order_code == jsData.data.order_code).to.be.true;",
									"    });",
									"",
									"    pm.test(\"sub_total_amount of pos_order correctly! \" + pos_order_obj.sub_total_amount, function () {",
									"        pm.expect(pos_order_obj.sub_total_amount == jsData.data.sub_total_amount).to.be.true;",
									"    });",
									"",
									"    pm.test(\"contact_id of pos_order correctly! \" + pos_order_obj.contact_id, function () {",
									"        pm.expect(pos_order_obj.contact_id == jsData.data.contact_id).to.be.true;",
									"    });",
									"",
									"    pm.test(\"email of pos_order correctly! \" + pos_order_obj.email, function () {",
									"        pm.expect(pos_order_obj.email == jsData.data.email).to.be.true;",
									"    });",
									"",
									"    pm.test(\"created_order_at of pos_order correctly! \" + pos_order_obj.value_at, function () {",
									"        pm.expect(pos_order_obj.value_at.substring(0,19) == jsData.data.value_at.substring(0,19)).to.be.true;",
									"    });",
									"",
									"    pm.test(\"due_at of pos_order correctly! \" + pos_order_obj.due_at, function () {",
									"        pm.expect(pos_order_obj.due_at.substring(0,19) == jsData.data.due_at.substring(0,19)).to.be.true;",
									"    });",
									"",
									"    pm.test(\"note of pos_order correctly! \" + pos_order_obj.note, function () {",
									"        pm.expect(pos_order_obj.note == jsData.data.note).to.be.true;",
									"    });",
									"",
									"    // tax_type",
									"    pm.test(\"tax_type of pos_order correctly! \", function () {",
									"        pm.expect(jsData.data.tax_type == pos_order_obj.tax_type).to.be.true;",
									"    });",
									"    ",
									"    // check discounts obj",
									"    // pm.test(\"discounts of pos_order correctly! \", function () {",
									"    //     console.log(\"exp discounts: \",pos_order_obj.discounts);",
									"    //     console.log(\"act discounts: \",jsData.data.discounts);",
									"    //     pm.expect(JSON.stringify(jsData.data.discounts) == JSON.stringify(pos_order_obj.discounts)).to.be.true;",
									"    // });",
									"",
									"    // check items obj",
									"    // pm.test(\"items of pos_order correctly! \", function () {",
									"    //     console.log(\"exp items: \",pos_order_obj.expected_items);",
									"    //     console.log(\"act items: \",jsData.data.items);",
									"    //     pm.expect(JSON.stringify(jsData.data.items) == JSON.stringify(pos_order_obj.expected_items)).to.be.true;",
									"    // });",
									"",
									"    // check discount amount",
									"    pm.test(\"discount_amount of pos_order correctly! \", function () {",
									"        console.log(\"act discount_amount: \" + jsData.data.discount_amount);",
									"        pm.expect(jsData.data.discount_amount == pos_order_obj.exp_discount_amount).to.be.true;",
									"    });",
									"",
									"    // check total item amount",
									"    pm.test(\"total_amount of pos_order correctly! \", function () {",
									"        console.log(\"act total_amount: \" + jsData.data.total_amount);",
									"        pm.expect(jsData.data.total_amount == pos_order_obj.exp_total_amount).to.be.true;",
									"    });",
									"",
									"    // tax_amount",
									"    pm.test(\"tax_amount of pos_order correctly! \", function () {",
									"        console.log(\"act tax_amount: \" + jsData.data.tax_amount);",
									"        pm.expect(jsData.data.tax_amount == pos_order_obj.exp_tax_amount).to.be.true;",
									"    });",
									"",
									"    // payment_due_amount, return_amount, paid_amount must be 0",
									"    pm.test(\"return_amount, paid_amount must be 0\", function () {",
									"        pm.expect(jsData.data.return_amount == 0 && jsData.data.paid_amount == 0).to.be.true;",
									"    });",
									"",
									"    // chưa có setting này",
									"    // pm.test(\"payment_config of pos_order correctly! \" + pos_order_obj.payment_config, function () {",
									"    //     pm.expect(JSON.stringify(pos_order_obj.payment_config) == JSON.stringify(jsData.data.payment_config)).to.be.true;",
									"    // });",
									"",
									"    pm.test(\"cart_status of pos_order correctly! \" + pos_order_obj.cart_status, function () {",
									"        pm.expect(pos_order_obj.cart_status == jsData.data.cart_status).to.be.true;",
									"    });",
									"",
									"    // final_status",
									"    pm.test(\"final_status of pos_order correctly! \" + pos_order_obj.exp_final_status, function () {",
									"        pm.expect(pos_order_obj.exp_final_status == jsData.data.final_status).to.be.true;",
									"    });",
									"",
									"    postman.setNextRequest(\"get_list_contact\"); // get_list_contact",
									"} else {",
									"    console.log(\"Can't get internal contact detail, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/{{C-business_id}}/invoice/{{C-system_code}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"{{C-business_id}}",
								"invoice",
								"{{C-system_code}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "inventory",
			"item": [
				{
					"name": "get_list_inventory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let configs = pm.environment.get(\"C-configs\");",
									"    let branch_id = pm.environment.get(\"C-branch_id\");",
									"    let total_pages = 1;",
									"    let total_records = 0;",
									"    try {",
									"        total_pages = jsData.meta.total_pages;",
									"        total_records = jsData.meta.total_rows;",
									"    } catch {",
									"        console.log(\"currently, this branch with null data\");",
									"    }",
									"    let page = pm.environment.get(\"C-page\");",
									"",
									"    let list_inventory_sku, old_list_inventory_sku;",
									"    switch(testcase){",
									"        case 2:",
									"            list_inventory_sku = pm.environment.get(\"C-list_inventory_sku\");",
									"            if(!list_inventory_sku){",
									"                list_inventory_sku = [];",
									"            }",
									"            break;",
									"        case 5: case 8:",
									"            old_list_inventory_sku = pm.environment.get(\"C-old_list_inventory_sku\");",
									"            if(!old_list_inventory_sku){",
									"                old_list_inventory_sku = pm.environment.get(\"C-list_inventory_sku\");",
									"                pm.environment.unset(\"C-list_inventory_sku\");",
									"                pm.environment.set(\"C-old_list_inventory_sku\",old_list_inventory_sku);",
									"            }",
									"",
									"            list_inventory_sku = pm.environment.get(\"C-list_inventory_sku\");",
									"            if(!list_inventory_sku){",
									"                list_inventory_sku = [];",
									"            }",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow\");",
									"            break;",
									"    }",
									"",
									"    let list_sku_use_create = pm.environment.get(\"C-list_sku_use_create\"); // chỉ lấy inventory tương ứng",
									"    for(let j in list_sku_use_create){",
									"        for(let i in jsData.data){",
									"            // thêm lớp xử lý có track_inventory",
									"            if(jsData.data[i].sku_id == list_sku_use_create[j].sku_id){",
									"                // xử lý thêm để data gọn, dễ check cho branch",
									"                let branches_i = [];",
									"                for(let k in jsData.data[i].branches){",
									"                    if(jsData.data[i].branches[k].branch_id == branch_id){",
									"                        branches_i[branches_i.length] = jsData.data[i].branches[k];",
									"                    }",
									"                }",
									"",
									"                list_inventory_sku[list_inventory_sku.length] = {",
									"                    \"sku_id\":jsData.data[i].sku_id,",
									"                    \"sku_code\":jsData.data[i].sku_code,",
									"                    \"sku_name\":jsData.data[i].sku_name,",
									"                    \"sale_price\":jsData.data[i].sale_price,",
									"                    \"cost_price\":jsData.data[i].cost_price,",
									"                    \"selling_price\":jsData.data[i].selling_price,",
									"                    \"sold_quantity\":jsData.data[i].sold_quantity,",
									"                    \"uom\":jsData.data[i].uom,",
									"                    \"total_quantity\":jsData.data[i].total_quantity, ",
									"                    \"total_inventory_value\":jsData.data[i].total_inventory_value, ",
									"                    \"total_can_pick_quantity\":jsData.data[i].total_can_pick_quantity, ",
									"                    \"total_delivery_quantity\":jsData.data[i].total_delivery_quantity,",
									"                    \"track_batch\":jsData.data[i].track_batch,",
									"                    // \"branches\":jsData.data[i].branches",
									"                    \"branches\":branches_i",
									"                }",
									"                break;",
									"            }",
									"        }",
									"    }",
									"    pm.environment.set(\"C-list_inventory_sku\",list_inventory_sku);",
									"",
									"    if(page >= total_pages || list_inventory_sku.length == list_sku_use_create.length){",
									"        pm.environment.unset(\"C-page\");",
									"        pm.environment.unset(\"C-page_size\");",
									"",
									"        let old_total_inventory_sku = pm.environment.get(\"C-total_inventory_sku\");",
									"        switch(testcase){",
									"            case 2:",
									"                pm.test(\"got total_inventory_sku \" + total_records, function () {",
									"                    pm.expect(total_records != 0).to.be.true;",
									"                });",
									"                pm.environment.set(\"C-total_inventory_sku\",total_records);",
									"                console.log(\"list_inventory_sku: \",list_inventory_sku);",
									"",
									"                postman.setNextRequest(\"get_inventory_overview\"); // get_inventory_overview",
									"                break;",
									"            case 5: case 8:",
									"                let pos_order_obj = pm.environment.get(\"C-pos_order_obj\");",
									"                let list_branch_exchange = [];",
									"                // update data for old_list_inventory_sku",
									"                for(let i in pos_order_obj.items){",
									"                    let total_exchange_line_item = 0;",
									"                    switch(configs.sku_type){",
									"                        case \"batch_product\": // physical, imei_product, batch_product, book_product, mix",
									"                            for(let j in pos_order_obj.items[i].batches){",
									"                                total_exchange_line_item += pos_order_obj.items[i].batches[j].quantity;",
									"                            }",
									"                            break;",
									"                        case \"physical\": case \"imei_product\":",
									"                            total_exchange_line_item += pos_order_obj.items[i].quantity;",
									"                            break;",
									"                        default:",
									"                            console.log(\"Not handle yet\");",
									"                            break;",
									"                    }",
									"",
									"                    for(let k in old_list_inventory_sku){",
									"                        if(old_list_inventory_sku[k].sku_id == pos_order_obj.items[i].sku_id){",
									"                            old_list_inventory_sku[k].exchange = total_exchange_line_item;",
									"                            old_list_inventory_sku[k].track_inventory = pos_order_obj.items[i].track_inventory;",
									"                            break;",
									"                        }",
									"                    }",
									"                    ",
									"                }",
									"",
									"                // debug",
									"                console.log(\"old: \", old_list_inventory_sku);",
									"                console.log(\"new: \", list_inventory_sku);",
									"",
									"                // check data with list_inventory_sku",
									"                let countSKU = 0, countSKU_in_branch = 0;",
									"                for(let i in list_inventory_sku){",
									"                    for(let j in old_list_inventory_sku){",
									"                        if(list_inventory_sku[i].sku_id == old_list_inventory_sku[j].sku_id){",
									"                            countSKU++;",
									"                            console.log(\"============== SKU \" + list_inventory_sku[i].sku_name);",
									"",
									"                            if(old_list_inventory_sku[j].track_inventory){",
									"                                pm.test(\"total_can_pick_quantity SKU \" + list_inventory_sku[i].sku_name + \" decrease \" + old_list_inventory_sku[j].exchange, function () {",
									"                                    console.log(\"old: \" + old_list_inventory_sku[j].total_can_pick_quantity);",
									"                                    console.log(\"new: \" + list_inventory_sku[j].total_can_pick_quantity);",
									"                                    pm.expect(old_list_inventory_sku[j].total_can_pick_quantity - old_list_inventory_sku[j].exchange).to.eql(list_inventory_sku[i].total_can_pick_quantity);",
									"                                });",
									"",
									"                                if(configs.create_order_status == \"completed\"){",
									"                                    // trừ total",
									"                                    pm.test(\"total_quantity SKU \" + list_inventory_sku[i].sku_name + \" decrease \" + old_list_inventory_sku[j].exchange, function () {",
									"                                        pm.expect(old_list_inventory_sku[j].total_quantity - old_list_inventory_sku[j].exchange).to.eql(list_inventory_sku[i].total_quantity);",
									"                                    });",
									"",
									"                                    // đã clear số lượng delivery",
									"                                    pm.test(\"nothing happen with total_delivery_quantity SKU \" + list_inventory_sku[i].sku_name, function () {",
									"                                        pm.expect(old_list_inventory_sku[j].total_delivery_quantity).to.eql(list_inventory_sku[i].total_delivery_quantity);",
									"                                    });",
									"",
									"                                } else {",
									"                                    // chưa trừ total",
									"                                    pm.test(\"nothing happen with total_quantity SKU \" + list_inventory_sku[i].sku_name, function () {",
									"                                        pm.expect(old_list_inventory_sku[j].total_quantity).to.eql(list_inventory_sku[i].total_quantity);",
									"                                    });",
									"",
									"                                    // tăng số lượng delivery",
									"                                    pm.test(\"total_delivery_quantity SKU \" + list_inventory_sku[i].sku_name + \" increase \" + old_list_inventory_sku[j].exchange, function () {",
									"                                        pm.expect(old_list_inventory_sku[j].total_delivery_quantity + old_list_inventory_sku[j].exchange).to.eql(list_inventory_sku[i].total_delivery_quantity);",
									"                                    });",
									"                                }",
									"",
									"                                loop_branch:",
									"                                for(let k in list_inventory_sku[i].branches){",
									"                                    for(let l in old_list_inventory_sku[j].branches){",
									"                                        if(branch_id == list_inventory_sku[i].branches[k].branch_id && branch_id == old_list_inventory_sku[j].branches[l].branch_id){",
									"                                            countSKU_in_branch++;",
									"                                            ",
									"                                            if(configs.create_order_status == \"completed\"){",
									"                                                // complete là trừ luôn",
									"                                                pm.test(\"nothing happen with total_delivery_quantity SKU \" + list_inventory_sku[i].sku_name + \" at branch \" + branch_id, function () {",
									"                                                    pm.expect(list_inventory_sku[i].branches[k].total_delivery_quantity).to.eql(old_list_inventory_sku[j].branches[l].total_delivery_quantity);",
									"                                                });",
									"",
									"                                                pm.test(\"total_quantity SKU \" + list_inventory_sku[i].sku_name + \" at branch \" + branch_id + \" decrease \" + old_list_inventory_sku[j].exchange, function () {",
									"                                                    pm.expect(list_inventory_sku[i].branches[k].total_quantity).to.eql(old_list_inventory_sku[j].branches[l].total_quantity - old_list_inventory_sku[j].exchange);",
									"                                                });",
									"                                            } else {",
									"                                                // processing là total_delivery_quantity (blocked => là để ko bán)",
									"                                                pm.test(\"total_delivery_quantity SKU \" + list_inventory_sku[i].sku_name + \" at branch \" + branch_id + \" increase \" + old_list_inventory_sku[j].exchange, function () {",
									"                                                    pm.expect(list_inventory_sku[i].branches[k].total_delivery_quantity).to.eql(old_list_inventory_sku[j].branches[l].total_delivery_quantity + old_list_inventory_sku[j].exchange);",
									"                                                });",
									"",
									"                                                pm.test(\"nothing happen with total_quantity SKU \" + list_inventory_sku[i].sku_name + \" at branch \" + branch_id, function () {",
									"                                                    pm.expect(list_inventory_sku[i].branches[k].total_quantity).to.eql(old_list_inventory_sku[j].branches[l].total_quantity);",
									"                                                });",
									"                                            }",
									"                                            break loop_branch;",
									"                                        }",
									"                                    }",
									"                                }",
									"                            } else {",
									"                                // total_quantity",
									"                                pm.test(\"Nothing happen with SKU \" + list_inventory_sku[i].sku_name, function () {",
									"                                    pm.expect(old_list_inventory_sku[j].total_quantity).to.eql(list_inventory_sku[i].total_quantity);",
									"                                });",
									"",
									"                                countSKU_in_branch++;",
									"                            }",
									"",
									"                            // sold_quantity => tạm thời hide vì chưa có nghiệp vụ check",
									"                            // if(configs.create_order_status == \"completed\"){",
									"                            //     pm.test(\"sold_quantity SKU \" + list_inventory_sku[i].sku_name + \" increase \" + old_list_inventory_sku[j].exchange, function () {",
									"                            //         pm.expect(old_list_inventory_sku[j].sold_quantity + old_list_inventory_sku[j].exchange).to.eql(list_inventory_sku[i].sold_quantity);",
									"                            //     });",
									"                            // } else {",
									"                            //     pm.test(\"nothing happen with sold_quantity SKU \" + list_inventory_sku[i].sku_name, function () {",
									"                            //         pm.expect(old_list_inventory_sku[j].sold_quantity).to.eql(list_inventory_sku[i].sold_quantity);",
									"                            //     });",
									"                            // }",
									"                            break;",
									"                        }",
									"                    }",
									"                }",
									"",
									"                pm.test(\"Found all SKU\", function () {",
									"                    pm.expect(countSKU).to.eql(old_list_inventory_sku.length);",
									"                });",
									"",
									"                pm.test(\"Found all SKU in branch \" + branch_id, function () {",
									"                    pm.expect(countSKU_in_branch).to.eql(old_list_inventory_sku.length);",
									"                });",
									"",
									"                postman.setNextRequest(\"get_inventory_overview\"); // get_inventory_overview",
									"                break;",
									"            default:",
									"                console.log(\"Missing flow\");",
									"                postman.setNextRequest(null);",
									"                break;",
									"        }",
									"    } else {",
									"        page++;",
									"        pm.environment.set(\"C-page\",page);",
									"",
									"        console.log(\"view next page (\" + page + \") to get more inventory\");",
									"        postman.setNextRequest(\"get_list_inventory\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get list sku in inventory, end test\", jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"/**",
									" * API check inventory cần check ",
									" * \"\": all",
									" * string: 1 branch",
									" * string, string ... : n branch",
									" * Note:",
									" */",
									"",
									"let page = pm.environment.get(\"C-page\");",
									"",
									"if(!page){",
									"    page = 1;",
									"    pm.environment.set(\"C-page\",page);",
									"",
									"    let page_size = 50;",
									"    pm.environment.set(\"C-page_size\",page_size);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/inventory/get-list?page={{C-page}}&page_size={{C-page_size}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"inventory",
								"get-list"
							],
							"query": [
								{
									"key": "list_contact_ids",
									"value": "",
									"disabled": true
								},
								{
									"key": "page",
									"value": "{{C-page}}"
								},
								{
									"key": "page_size",
									"value": "{{C-page_size}}"
								},
								{
									"key": "search",
									"value": "",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "asc",
									"disabled": true
								},
								{
									"key": "status",
									"value": "",
									"disabled": true
								},
								{
									"key": "category_ids",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get_inventory_overview",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let configs = pm.environment.get(\"C-configs\");",
									"    let total_inventory_summary = null;",
									"    try {",
									"        total_inventory_summary = jsData.data;",
									"    } catch {",
									"        console.log(\"Missing meta data\");",
									"    }",
									"",
									"    let old_total_inventory_summary;",
									"    switch(testcase){",
									"        case 2:",
									"            pm.test(\"got total_inventory_summary\", function () {",
									"                pm.expect(total_inventory_summary != null).to.be.true;",
									"            });",
									"            pm.environment.set(\"C-total_inventory_summary\",total_inventory_summary);",
									"",
									"            postman.setNextRequest(\"get_list_batch\"); // get_batch_overview, get_list_batch",
									"            break;",
									"        case 5: case 8:",
									"            old_total_inventory_summary = pm.environment.get(\"C-total_inventory_summary\");",
									"            let pos_order_obj = pm.environment.get(\"C-pos_order_obj\");",
									"",
									"            let total_exchange = 0;",
									"            for(let i in pos_order_obj.items){",
									"                if(configs.sku_type == \"batch_product\"){",
									"                    for(let j in pos_order_obj.items[i].batches){",
									"                        total_exchange += pos_order_obj.items[i].batches[j].quantity;",
									"                    }",
									"                } else {",
									"                    if(pos_order_obj.items[i].track_inventory){",
									"                        total_exchange += pos_order_obj.items[i].quantity;",
									"                    }",
									"                }",
									"            }",
									"",
									"            // debug",
									"            console.log(\"old: \", old_total_inventory_summary);",
									"            console.log(\"new: \", total_inventory_summary);",
									"",
									"            if(configs.create_order_status == \"completed\"){",
									"                // => trừ kho",
									"                // inventory_value => chưa có công thức chuẩn từ PO",
									"                pm.test(\"inventory_value => PO chưa final\", function () {",
									"                    pm.expect(true).to.eql(false);",
									"                });",
									"",
									"                // count_inventory_product",
									"                pm.test(\"count_inventory_product descrease \" + total_exchange, function () {",
									"                    pm.expect(total_inventory_summary.count_inventory_product).to.eql(old_total_inventory_summary.count_inventory_product - total_exchange);",
									"                });",
									"",
									"                // total_inventory_low",
									"                pm.test(\"nothing happen with total_inventory_low\", function () {",
									"                    pm.expect(total_inventory_summary.total_inventory_low).to.eql(old_total_inventory_summary.total_inventory_low);",
									"                });",
									"",
									"                // total_non_inventory_over",
									"                pm.test(\"nothing happen with total_non_inventory_over\", function () {",
									"                    pm.expect(total_inventory_summary.total_non_inventory_over).to.eql(old_total_inventory_summary.total_non_inventory_over);",
									"                });",
									"            } else {",
									"                // => chưa trừ kho",
									"                pm.test(\"nothing happen\", function () {",
									"                    pm.expect(JSON.stringify(total_inventory_summary)).to.eql(JSON.stringify(old_total_inventory_summary));",
									"                });",
									"            }",
									"",
									"            postman.setNextRequest(\"get_list_batch\"); // get_list_inventory_branch, get_list_batch",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get inventory summary, end test\", jsData);",
									"    postman.setNextRequest(null);",
									"}  ",
									"",
									"let rep = {",
									"    \"data\": {",
									"        \"count_inventory_product\": 0,",
									"        \"inventory_value\": 0,",
									"        \"total_inventory_low\": 0,",
									"        \"total_non_inventory_over\": 0",
									"    }",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/inventory/overview",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"inventory",
								"overview"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_list_inventory_branch",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let configs = pm.environment.get(\"C-configs\");",
									"    let total_pages = 1;",
									"    let total_records = 0;",
									"    try {",
									"        total_pages = jsData.meta.total_pages;",
									"        total_records = jsData.meta.total_rows;",
									"    } catch {",
									"        console.log(\"currently, this branch with null data\");",
									"    }",
									"    let page = pm.environment.get(\"C-page\");",
									"",
									"    let list_inventory_sku_branch, old_list_inventory_sku_branch;",
									"    switch(testcase){",
									"        case 2:",
									"            list_inventory_sku_branch = pm.environment.get(\"C-list_inventory_sku_branch\");",
									"            if(!list_inventory_sku_branch){",
									"                list_inventory_sku_branch = [];",
									"            }",
									"            break;",
									"        case 5: case 8:",
									"            old_list_inventory_sku_branch = pm.environment.get(\"C-old_list_inventory_sku_branch\");",
									"            if(!old_list_inventory_sku_branch){",
									"                old_list_inventory_sku_branch = pm.environment.get(\"C-list_inventory_sku_branch\");",
									"                pm.environment.unset(\"C-list_inventory_sku_branch\");",
									"                pm.environment.set(\"C-old_list_inventory_sku_branch\",old_list_inventory_sku_branch);",
									"            }",
									"",
									"            list_inventory_sku_branch = pm.environment.get(\"C-list_inventory_sku_branch\");",
									"            if(!list_inventory_sku_branch){",
									"                list_inventory_sku_branch = [];",
									"            }",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow\");",
									"            break;",
									"    }",
									"",
									"    let list_sku_use_create = pm.environment.get(\"C-list_sku_use_create\"); // chỉ lấy inventory tương ứng",
									"    for(let j in list_sku_use_create){",
									"        for(let i in jsData.data){",
									"            if(jsData.data[i].sku_id == list_sku_use_create[j].sku_id){",
									"                list_inventory_sku_branch[list_inventory_sku_branch.length] = {",
									"                    \"sku_id\":jsData.data[i].sku_id,",
									"                    \"sku_code\":jsData.data[i].sku_code,",
									"                    \"sku_name\":jsData.data[i].sku_name,",
									"                    \"sale_price\":jsData.data[i].sale_price,",
									"                    \"cost_price\":jsData.data[i].cost_price,",
									"                    \"selling_price\":jsData.data[i].selling_price,",
									"                    \"sold_quantity\":jsData.data[i].sold_quantity,",
									"                    \"uom\":jsData.data[i].uom,",
									"                    \"total_quantity\":jsData.data[i].total_quantity, ",
									"                    \"total_inventory_value\":jsData.data[i].total_inventory_value, ",
									"                    \"total_can_pick_quantity\":jsData.data[i].total_can_pick_quantity, ",
									"                    \"total_delivery_quantity\":jsData.data[i].total_delivery_quantity",
									"                }",
									"                break;",
									"            }",
									"        }",
									"    }",
									"    pm.environment.set(\"C-list_inventory_sku_branch\",list_inventory_sku_branch);",
									"",
									"    if(page >= total_pages || list_inventory_sku_branch.length == list_sku_use_create.length){",
									"        pm.environment.unset(\"C-page\");",
									"        pm.environment.unset(\"C-page_size\");",
									"",
									"        let old_total_inventory_sku_branch = pm.environment.get(\"C-total_inventory_sku_branch\");",
									"        switch(testcase){",
									"            case 2:",
									"                pm.test(\"got total_inventory_sku_branch \" + total_records, function () {",
									"                    pm.expect(total_records != 0).to.be.true;",
									"                });",
									"                pm.environment.set(\"C-total_inventory_sku_branch\",total_records);",
									"                console.log(\"list_inventory_sku_branch: \",list_inventory_sku_branch);",
									"",
									"                postman.setNextRequest(\"get_inventory_overview_branch\"); // get_inventory_overview_branch",
									"                break;",
									"            case 5:",
									"                pm.test(\"nothing happen with total_inventory_sku_branch\", function () {",
									"                    pm.expect(old_total_inventory_sku_branch).to.eql(total_records);",
									"                });",
									"",
									"                postman.setNextRequest(\"get_inventory_overview_branch\"); // get_inventory_overview_branch",
									"                break;",
									"            case 8:",
									"                if(configs.is_the_same_branch){",
									"                    // xử lý data như list inventory",
									"",
									"                } else {",
									"                    // data không đổi",
									"                    pm.test(\"nothing happen with total_inventory_sku_branch\", function () {",
									"                        pm.expect(old_total_inventory_sku_branch).to.eql(total_records);",
									"                    });",
									"                }",
									"",
									"                postman.setNextRequest(\"get_inventory_overview_branch\"); // get_inventory_overview_branch",
									"                break;",
									"            default:",
									"                console.log(\"Missing flow\");",
									"                postman.setNextRequest(null);",
									"                break;",
									"        }",
									"    } else {",
									"        page++;",
									"        pm.environment.set(\"C-page\",page);",
									"",
									"        console.log(\"view next page (\" + page + \") to get more inventory on branch \" + pm.environment.get(\"C-filter_branch_id\"));",
									"        postman.setNextRequest(\"get_list_inventory_branch\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get list sku in inventory, end test\", jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"/**",
									" * API check inventory cần check ",
									" * \"\": all",
									" * string: 1 branch",
									" * string, string ... : n branch",
									" * Note:",
									" */",
									"",
									"let page = pm.environment.get(\"C-page\");",
									"",
									"if(!page){",
									"    page = 1;",
									"    pm.environment.set(\"C-page\",page);",
									"",
									"    let page_size = 50;",
									"    pm.environment.set(\"C-page_size\",page_size);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/inventory/get-list?page={{C-page}}&page_size={{C-page_size}}&branch_id={{C-filter_branch_id}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"inventory",
								"get-list"
							],
							"query": [
								{
									"key": "list_contact_ids",
									"value": null,
									"disabled": true
								},
								{
									"key": "page",
									"value": "{{C-page}}"
								},
								{
									"key": "page_size",
									"value": "{{C-page_size}}"
								},
								{
									"key": "search",
									"value": "",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "asc",
									"disabled": true
								},
								{
									"key": "status",
									"value": "",
									"disabled": true
								},
								{
									"key": "branch_id",
									"value": "{{C-filter_branch_id}}"
								},
								{
									"key": "category_ids",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get_inventory_overview_branch",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let configs = pm.environment.get(\"C-configs\");",
									"    let total_inventory_summary_branch = null;",
									"    try {",
									"        total_inventory_summary_branch = jsData.data;",
									"    } catch {",
									"        console.log(\"Missing meta data\");",
									"    }",
									"",
									"    let old_total_inventory_summary_branch = pm.environment.get(\"C-total_inventory_summary_branch\");",
									"    switch(testcase){",
									"        case 2:",
									"            pm.test(\"got total_inventory_summary_branch\", function () {",
									"                pm.expect(total_inventory_summary_branch != null).to.be.true;",
									"            });",
									"            pm.environment.set(\"C-total_inventory_summary_branch\",total_inventory_summary_branch);",
									"",
									"            postman.setNextRequest(\"get_po_overview\"); // get_po_overview",
									"            break;",
									"        case 5:",
									"            pm.test(\"nothing happen with total_inventory_summary_branch\", function () {",
									"                pm.expect(JSON.stringify(total_inventory_summary_branch)).to.eql(JSON.stringify(old_total_inventory_summary_branch));",
									"            });",
									"",
									"            postman.setNextRequest(\"\"); // ",
									"            break;",
									"        case 8:",
									"            if(configs.is_the_same_branch){",
									"                    // xử lý data như inventory overview",
									"",
									"                } else {",
									"                    // data không đổi",
									"                    pm.test(\"nothing happen with total_inventory_summary_branch\", function () {",
									"                        pm.expect(JSON.stringify(total_inventory_summary_branch)).to.eql(JSON.stringify(old_total_inventory_summary_branch));",
									"                    });",
									"                }",
									"",
									"            console.log(\"--- End Testsuite 81 ---\");",
									"            postman.setNextRequest(\"\"); //",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get inventory summary, end test\", jsData);",
									"    postman.setNextRequest(null);",
									"}  ",
									"",
									"let rep = {",
									"    \"data\": {",
									"        \"count_inventory_product\": 0,",
									"        \"inventory_value\": 0,",
									"        \"total_inventory_low\": 0,",
									"        \"total_non_inventory_over\": 0",
									"    }",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/inventory/overview?branch_id={{C-filter_branch_id}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"inventory",
								"overview"
							],
							"query": [
								{
									"key": "branch_id",
									"value": "{{C-filter_branch_id}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "batch",
			"item": [
				{
					"name": "get_list_batch",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"// let page = pm.environment.get(\"C-page\");",
									"",
									"// if(!page){",
									"//     page = 1;",
									"//     pm.environment.set(\"C-page\",page);",
									"",
									"//     let page_size = 50;",
									"//     pm.environment.set(\"C-page_size\",page_size);",
									"// }"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let configs = pm.environment.get(\"C-configs\");",
									"    let total_records = 0;",
									"    try {",
									"        total_pages = jsData.meta.total_pages;",
									"        total_records = jsData.meta.total_rows;",
									"    } catch {",
									"        console.log(\"currently, this business with null data\");",
									"    }",
									"",
									"    let old_total_batch_sku;",
									"    switch(testcase){",
									"        case 2:",
									"            pm.test(\"got total_batch_sku \" + total_records, function () {",
									"                pm.expect(total_records != 0).to.be.true;",
									"            });",
									"            pm.environment.set(\"C-total_batch_sku\",total_records);",
									"",
									"            postman.setNextRequest(\"get_list_batch_by_sku\"); // get_list_batch_by_sku",
									"            break;",
									"        case 5: case 8:",
									"            old_total_batch_sku = pm.environment.get(\"C-total_batch_sku\");",
									"            pm.test(\"nothing happen with total_batch_sku\", function () {",
									"                pm.expect(old_total_batch_sku).to.eql(total_records);",
									"            });",
									"",
									"            postman.setNextRequest(\"get_list_batch_by_sku\"); // get_batch_overview, get_list_batch_by_sku",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get list sku in batch, end test\", jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/batch/get-list?list_contact_ids&page=1&page_size=50",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"batch",
								"get-list"
							],
							"query": [
								{
									"key": "list_contact_ids",
									"value": null
								},
								{
									"key": "page",
									"value": "1",
									"description": "{{C-page}}"
								},
								{
									"key": "page_size",
									"value": "50",
									"description": "{{C-page_size}}"
								},
								{
									"key": "search",
									"value": "",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "",
									"disabled": true
								},
								{
									"key": "status",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get_list_batch_by_sku",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let list_sku_use_create = pm.environment.get(\"C-list_sku_use_create\");",
									"let sku_pos = pm.environment.get(\"C-sku_pos\");",
									"if(!sku_pos){",
									"    sku_pos = 0;",
									"    pm.environment.set(\"C-sku_pos\",sku_pos);  ",
									"    // if(testcase == 5 || testcase == 8){",
									"    //     // timeout lần đầu 5s",
									"    //     setTimeout(function(){}, 5000);",
									"    // }",
									"}",
									"let filter_sku_id = list_sku_use_create[sku_pos].sku_id;",
									"pm.environment.set(\"C-filter_sku_id\",filter_sku_id);",
									"",
									"let page = pm.environment.get(\"C-page\");",
									"",
									"if(!page){",
									"    page = 1;",
									"    pm.environment.set(\"C-page\",page);",
									"",
									"    let page_size = 50;",
									"    pm.environment.set(\"C-page_size\",page_size);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let configs = pm.environment.get(\"C-configs\");",
									"    let list_sku_use_create = pm.environment.get(\"C-list_sku_use_create\");",
									"    let sku_pos = pm.environment.get(\"C-sku_pos\");",
									"    let total_pages = 1;",
									"    let total_records = 0;",
									"    try {",
									"        total_pages = jsData.meta.total_pages;",
									"        total_records = jsData.meta.total_rows;",
									"    } catch {",
									"        console.log(\"currently, this branch with null data\");",
									"    }",
									"    let page = pm.environment.get(\"C-page\");",
									"",
									"    switch(testcase){",
									"        case 2:",
									"            for(let i in jsData.data){",
									"                for(let j in list_sku_use_create[sku_pos].list_branches){",
									"                    if(jsData.data[i].branch_id == list_sku_use_create[sku_pos].list_branches[j].branch_id){",
									"                        if(\"list_batches\" in list_sku_use_create[sku_pos].list_branches[j]){",
									"                            list_sku_use_create[sku_pos].list_branches[j].list_batches[list_sku_use_create[sku_pos].list_branches[j].list_batches.length] = {",
									"                                \"batch_id\":jsData.data[i].id,",
									"                                \"branch_id\":jsData.data[i].branch_id,",
									"                                \"sku_id\":jsData.data[i].sku_id,",
									"                                \"sku_name\":jsData.data[i].sku_name,",
									"                                \"uom_id\":jsData.data[i].uom_id,",
									"                                \"status\":jsData.data[i].status,",
									"                                \"batch_status\":jsData.data[i].batch_status,",
									"                                \"production_date\":jsData.data[i].production_date,",
									"                                \"expiration_date\":jsData.data[i].expiration_date,",
									"                                \"batch_code\":jsData.data[i].batch_code,",
									"                                \"item_amount\":jsData.data[i].item_amount,",
									"                                \"cost_per_item_amount\":jsData.data[i].cost_per_item_amount,",
									"                                \"name\":jsData.data[i].name,",
									"                                \"expected_quantity\":jsData.data[i].expected_quantity,",
									"                                \"total_quantity\":jsData.data[i].total_quantity,",
									"                                \"pending_quantity\":jsData.data[i].pending_quantity,",
									"                                \"received_quantity\":jsData.data[i].received_quantity,",
									"                                \"delivery_quantity\":jsData.data[i].delivery_quantity,",
									"                                // \"returned_quantity\":jsData.data[i].returned_quantity,",
									"                                \"blocked_quantity\":jsData.data[i].blocked_quantity,",
									"                                \"can_pick_quantity\":jsData.data[i].can_pick_quantity",
									"                            };",
									"                        } else {",
									"                            list_sku_use_create[sku_pos].list_branches[j].list_batches = [];",
									"                            list_sku_use_create[sku_pos].list_branches[j].list_batches[0] = {",
									"                                \"batch_id\":jsData.data[i].id,",
									"                                \"branch_id\":jsData.data[i].branch_id,",
									"                                \"sku_id\":jsData.data[i].sku_id,",
									"                                \"sku_name\":jsData.data[i].sku_name,",
									"                                \"uom_id\":jsData.data[i].uom_id,",
									"                                \"status\":jsData.data[i].status,",
									"                                \"batch_status\":jsData.data[i].batch_status,",
									"                                \"production_date\":jsData.data[i].production_date,",
									"                                \"expiration_date\":jsData.data[i].expiration_date,",
									"                                \"batch_code\":jsData.data[i].batch_code,",
									"                                \"item_amount\":jsData.data[i].item_amount,",
									"                                \"cost_per_item_amount\":jsData.data[i].cost_per_item_amount,",
									"                                \"name\":jsData.data[i].name,",
									"                                \"expected_quantity\":jsData.data[i].expected_quantity,",
									"                                \"total_quantity\":jsData.data[i].total_quantity,",
									"                                \"pending_quantity\":jsData.data[i].pending_quantity,",
									"                                \"received_quantity\":jsData.data[i].received_quantity,",
									"                                \"delivery_quantity\":jsData.data[i].delivery_quantity,",
									"                                // \"returned_quantity\":jsData.data[i].returned_quantity,",
									"                                \"blocked_quantity\":jsData.data[i].blocked_quantity,",
									"                                \"can_pick_quantity\":jsData.data[i].can_pick_quantity",
									"                            };",
									"                        }",
									"                    }",
									"                }",
									"            }",
									"            pm.environment.set(\"C-list_sku_use_create\",list_sku_use_create);",
									"",
									"            if(page >= total_pages){",
									"                pm.environment.unset(\"C-page\");",
									"                pm.environment.unset(\"C-page_size\");",
									"",
									"                if(sku_pos >= list_sku_use_create.length - 1){",
									"                    // console.log(\"list_sku_use_create: \",list_sku_use_create);",
									"                    pm.environment.unset(\"C-sku_pos\");",
									"",
									"                    let branch_id = pm.environment.get(\"C-branch_id\"); // branch_id dùng để tạo pos-order",
									"                    let list_batch_will_create = [];",
									"                    for(let i in list_sku_use_create){",
									"                        for(let j in list_sku_use_create[i].list_branches){",
									"                            if(list_sku_use_create[i].list_branches[j].branch_id == branch_id){",
									"                                for(let k in list_sku_use_create[i].list_branches[j].list_batches){",
									"                                    list_batch_will_create[list_batch_will_create.length] = {",
									"                                        \"sku_id\":list_sku_use_create[i].sku_id,",
									"                                        \"product_id\":list_sku_use_create[i].product_id,",
									"                                        \"sku_name\":list_sku_use_create[i].sku_name,",
									"                                        \"sale_price\":list_sku_use_create[i].sale_price,",
									"                                        \"cost_per_item_amount\":list_sku_use_create[i].list_branches[j].list_batches[k].cost_per_item_amount,",
									"                                        \"branch_id\":list_sku_use_create[i].list_branches[j].branch_id,",
									"                                        \"branch_name\":list_sku_use_create[i].list_branches[j].branch_name,",
									"                                        \"uom_id\":list_sku_use_create[i].list_branches[j].uom_id,",
									"                                        \"inventory_quantity\":list_sku_use_create[i].list_branches[j].inventory_quantity,",
									"                                        \"track_inventory\":list_sku_use_create[i].track_inventory,",
									"                                        \"uom_id\":list_sku_use_create[i].list_branches[j].uom_id,",
									"                                        \"batch_id\":list_sku_use_create[i].list_branches[j].list_batches[k].batch_id,",
									"                                        \"batch_name\":list_sku_use_create[i].list_branches[j].list_batches[k].name,",
									"                                        \"batch_total_inventory\":list_sku_use_create[i].list_branches[j].list_batches[k].total_quantity,",
									"                                        \"batch_total_received\":list_sku_use_create[i].list_branches[j].list_batches[k].received_quantity,",
									"                                        \"batch_total_delivered\":list_sku_use_create[i].list_branches[j].list_batches[k].delivery_quantity,",
									"                                        \"batch_total_expected\":list_sku_use_create[i].list_branches[j].list_batches[k].expected_quantity,",
									"                                        \"batch_status\":list_sku_use_create[i].list_branches[j].list_batches[k].batch_status",
									"                                    }",
									"                                }",
									"                            }",
									"                        }",
									"                    }",
									"                    console.log(\"total batch: \" + list_batch_will_create.length);",
									"                    console.log(\"list_batch_will_create: \",list_batch_will_create);",
									"                    // console.log(\"list_sku_use_create: \",list_sku_use_create);",
									"                    pm.environment.set(\"C-list_batch_will_create\",list_batch_will_create);",
									"",
									"                    postman.setNextRequest(\"get_batch_overview\"); // get_batch_overview",
									"                } else {",
									"                    sku_pos++;",
									"                    pm.environment.set(\"C-sku_pos\",sku_pos);",
									"",
									"                    postman.setNextRequest(\"get_list_batch_by_sku\"); // get_batch_overview",
									"                }",
									"            } else {",
									"                page++;",
									"                pm.environment.set(\"C-page\",page);",
									"",
									"                console.log(\"view next page (\" + page + \") to get more batch\");",
									"                postman.setNextRequest(\"get_list_batch_by_sku\");",
									"            }",
									"            break;",
									"        case 5: case 8:",
									"            for(let i in jsData.data){",
									"                for(let j in list_sku_use_create[sku_pos].list_branches){",
									"                    if(jsData.data[i].branch_id == list_sku_use_create[sku_pos].list_branches[j].branch_id){",
									"                        if(\"list_batches_new\" in list_sku_use_create[sku_pos].list_branches[j]){",
									"                            list_sku_use_create[sku_pos].list_branches[j].list_batches_new[list_sku_use_create[sku_pos].list_branches[j].list_batches_new.length] = {",
									"                                \"batch_id\":jsData.data[i].id,",
									"                                \"branch_id\":jsData.data[i].branch_id,",
									"                                \"sku_id\":jsData.data[i].sku_id,",
									"                                \"sku_name\":jsData.data[i].sku_name,",
									"                                \"uom_id\":jsData.data[i].uom_id,",
									"                                \"status\":jsData.data[i].status,",
									"                                \"batch_status\":jsData.data[i].batch_status,",
									"                                \"production_date\":jsData.data[i].production_date,",
									"                                \"expiration_date\":jsData.data[i].expiration_date,",
									"                                \"batch_code\":jsData.data[i].batch_code,",
									"                                \"item_amount\":jsData.data[i].item_amount,",
									"                                // \"cost_per_item_amount\":jsData.data[i].cost_per_item_amount,",
									"                                \"name\":jsData.data[i].name,",
									"                                \"expected_quantity\":jsData.data[i].expected_quantity,",
									"                                \"total_quantity\":jsData.data[i].total_quantity,",
									"                                \"pending_quantity\":jsData.data[i].pending_quantity,",
									"                                \"received_quantity\":jsData.data[i].received_quantity,",
									"                                \"delivery_quantity\":jsData.data[i].delivery_quantity,",
									"                                // \"returned_quantity\":jsData.data[i].returned_quantity,",
									"                                \"blocked_quantity\":jsData.data[i].blocked_quantity,",
									"                                \"can_pick_quantity\":jsData.data[i].can_pick_quantity",
									"                            };",
									"                        } else {",
									"                            list_sku_use_create[sku_pos].list_branches[j].list_batches_new = [];",
									"                            list_sku_use_create[sku_pos].list_branches[j].list_batches_new[0] = {",
									"                                \"batch_id\":jsData.data[i].id,",
									"                                \"branch_id\":jsData.data[i].branch_id,",
									"                                \"sku_id\":jsData.data[i].sku_id,",
									"                                \"sku_name\":jsData.data[i].sku_name,",
									"                                \"uom_id\":jsData.data[i].uom_id,",
									"                                \"status\":jsData.data[i].status,",
									"                                \"batch_status\":jsData.data[i].batch_status,",
									"                                \"production_date\":jsData.data[i].production_date,",
									"                                \"expiration_date\":jsData.data[i].expiration_date,",
									"                                \"batch_code\":jsData.data[i].batch_code,",
									"                                \"item_amount\":jsData.data[i].item_amount,",
									"                                \"name\":jsData.data[i].name,",
									"                                \"expected_quantity\":jsData.data[i].expected_quantity,",
									"                                \"total_quantity\":jsData.data[i].total_quantity,",
									"                                \"pending_quantity\":jsData.data[i].pending_quantity,",
									"                                \"received_quantity\":jsData.data[i].received_quantity,",
									"                                \"delivery_quantity\":jsData.data[i].delivery_quantity,",
									"                                // \"returned_quantity\":jsData.data[i].returned_quantity,",
									"                                \"blocked_quantity\":jsData.data[i].blocked_quantity,",
									"                                \"can_pick_quantity\":jsData.data[i].can_pick_quantity",
									"                            };",
									"                        }",
									"                    }",
									"                }",
									"            }",
									"            pm.environment.set(\"C-list_sku_use_create\",list_sku_use_create);",
									"",
									"            if(page >= total_pages){",
									"                pm.environment.unset(\"C-page\");",
									"                pm.environment.unset(\"C-page_size\");",
									"",
									"                if(sku_pos >= list_sku_use_create.length - 1){",
									"                    // console.log(\"list_sku_use_create: \",list_sku_use_create);",
									"                    pm.environment.unset(\"C-sku_pos\");",
									"",
									"                    /**",
									"                     *  xử lý cho pos-order",
									"                     * - batch_product => có truyền batch để tính",
									"                     * - physical/imei => ko truyền nên phải get oldest (FIFO)",
									"                     */ ",
									"                    let pos_order_obj = pm.environment.get(\"C-pos_order_obj\");",
									"                    let list_batches_exchange = [];",
									"                    for(let i in pos_order_obj.items){",
									"                        for(let j in pos_order_obj.items[i].batches){",
									"                            list_batches_exchange[list_batches_exchange.length] = pos_order_obj.items[i].batches[j];",
									"                        }",
									"                    }",
									"",
									"                    let branch_id = pm.environment.get(\"C-branch_id\"); // branch_id dùng để tạo pos-order",
									"                    let list_batch_created = [];",
									"                    for(let i in list_sku_use_create){",
									"                        for(let j in list_sku_use_create[i].list_branches){",
									"                            if(list_sku_use_create[i].list_branches[j].branch_id == branch_id){",
									"                                for(let k in list_sku_use_create[i].list_branches[j].list_batches_new){",
									"                                    list_batch_created[list_batch_created.length] = {",
									"                                        \"sku_id\":list_sku_use_create[i].sku_id,",
									"                                        \"product_id\":list_sku_use_create[i].product_id,",
									"                                        \"sku_name\":list_sku_use_create[i].sku_name,",
									"                                        \"sale_price\":list_sku_use_create[i].sale_price,",
									"                                        \"branch_id\":list_sku_use_create[i].list_branches[j].branch_id,",
									"                                        \"branch_name\":list_sku_use_create[i].list_branches[j].branch_name,",
									"                                        \"uom_id\":list_sku_use_create[i].list_branches[j].uom_id,",
									"                                        \"inventory_quantity\":list_sku_use_create[i].list_branches[j].inventory_quantity,",
									"                                        \"track_inventory\":list_sku_use_create[i].track_inventory,",
									"                                        \"uom_id\":list_sku_use_create[i].list_branches[j].uom_id,",
									"                                        \"batch_id\":list_sku_use_create[i].list_branches[j].list_batches_new[k].batch_id,",
									"                                        \"batch_name\":list_sku_use_create[i].list_branches[j].list_batches_new[k].name,",
									"                                        \"batch_total_inventory\":list_sku_use_create[i].list_branches[j].list_batches_new[k].total_quantity,",
									"                                        \"batch_total_received\":list_sku_use_create[i].list_branches[j].list_batches_new[k].received_quantity,",
									"                                        \"batch_total_delivered\":list_sku_use_create[i].list_branches[j].list_batches_new[k].delivery_quantity,",
									"                                        \"batch_total_expected\":list_sku_use_create[i].list_branches[j].list_batches_new[k].expected_quantity,",
									"                                        \"batch_status\":list_sku_use_create[i].list_branches[j].list_batches_new[k].batch_status",
									"                                    }",
									"                                }",
									"                            }",
									"                        }",
									"                    }",
									"                    // console.log(\"total batch: \" + list_batch_created.length);",
									"                    // console.log(\"list_batch_created: \",list_batch_created);",
									"                    // console.log(\"list_sku_use_create: \",list_sku_use_create);",
									"                    pm.environment.set(\"C-list_batch_created\",list_batch_created);",
									"",
									"                    // xử lý cho batch đã dùng để tạo pos-order",
									"                    for(let i in list_sku_use_create){",
									"                        for(j in list_sku_use_create[i].list_branches){",
									"                            if(list_sku_use_create[i].list_branches[j].branch_id == branch_id){",
									"                                for(let k in list_sku_use_create[i].list_branches[j].list_batches){",
									"                                    for(let l in list_batches_exchange){",
									"                                        if(list_sku_use_create[i].list_branches[j].list_batches[k].batch_id == list_batches_exchange[l].batch_id){",
									"                                            list_batches_exchange[l].old_list_batches = list_sku_use_create[i].list_branches[j].list_batches[k];",
									"                                            break;",
									"                                        }",
									"                                    }",
									"                                }",
									"",
									"                                for(let k in list_sku_use_create[i].list_branches[j].list_batches_new){",
									"                                    for(let l in list_batches_exchange){",
									"                                        if(list_sku_use_create[i].list_branches[j].list_batches_new[k].batch_id == list_batches_exchange[l].batch_id){",
									"                                            list_batches_exchange[l].new_list_batches = list_sku_use_create[i].list_branches[j].list_batches_new[k];",
									"                                            break;",
									"                                        }",
									"                                    }",
									"                                }",
									"                            }",
									"                        }",
									"                    }",
									"                    console.log(\"list_batches_exchange: \", list_batches_exchange);",
									"",
									"                    // check data của từng batch đã tham gia vào PO",
									"                    let countBatch = 0;",
									"                    for(let i in list_batches_exchange){",
									"                        if(\"old_list_batches\" in list_batches_exchange[i] && \"new_list_batches\" in list_batches_exchange[i]){",
									"                            countBatch++;",
									"                            console.log(\"====== batch: \" + list_batches_exchange[i].batch_name);",
									"",
									"                            if(configs.create_order_status == \"completed\"){",
									"                                // total_quantity",
									"                                pm.test(\"total_quantity of batch \" + list_batches_exchange[i].batch_id + \" descrease \" + list_batches_exchange[i].quantity, function () {",
									"                                    pm.expect(list_batches_exchange[i].new_list_batches.total_quantity).to.eql(list_batches_exchange[i].old_list_batches.total_quantity - list_batches_exchange[i].quantity);",
									"                                });",
									"",
									"                                // received_quantity",
									"                                pm.test(\"nothing happen with received_quantity of batch\", function () {",
									"                                    pm.expect(list_batches_exchange[i].new_list_batches.received_quantity).to.eql(list_batches_exchange[i].old_list_batches.received_quantity);",
									"                                });",
									"",
									"                                // delivery_quantity",
									"                                pm.test(\"nothing happen with delivery_quantity of batch\", function () {",
									"                                    pm.expect(list_batches_exchange[i].new_list_batches.delivery_quantity).to.eql(list_batches_exchange[i].old_list_batches.delivery_quantity);",
									"                                });",
									"",
									"                                // blocked_quantity",
									"                                pm.test(\"nothing happen with blocked_quantity of batch\", function () {",
									"                                    pm.expect(list_batches_exchange[i].new_list_batches.blocked_quantity).to.eql(list_batches_exchange[i].old_list_batches.blocked_quantity);",
									"                                });",
									"",
									"                                // can_pick_quantity",
									"                                pm.test(\"can_pick_quantity of batch \" + list_batches_exchange[i].batch_id + \" descrease \" + list_batches_exchange[i].quantity, function () {",
									"                                    pm.expect(list_batches_exchange[i].new_list_batches.can_pick_quantity).to.eql(list_batches_exchange[i].old_list_batches.can_pick_quantity - list_batches_exchange[i].quantity);",
									"                                });",
									"",
									"                            } else {",
									"                                // total_quantity",
									"                                pm.test(\"nothing happen with total_quantity of batch \" + list_batches_exchange[i].batch_id, function () {",
									"                                    pm.expect(list_batches_exchange[i].new_list_batches.total_quantity).to.eql(list_batches_exchange[i].old_list_batches.total_quantity);",
									"                                });",
									"",
									"                                // received_quantity",
									"                                pm.test(\"nothing happen with received_quantity of batch\", function () {",
									"                                    pm.expect(list_batches_exchange[i].new_list_batches.received_quantity).to.eql(list_batches_exchange[i].old_list_batches.received_quantity);",
									"                                });",
									"",
									"                                // delivery_quantity",
									"                                pm.test(\"delivery_quantity of batch \" + list_batches_exchange[i].batch_id + \" increase \" + list_batches_exchange[i].quantity, function () {",
									"                                    pm.expect(list_batches_exchange[i].new_list_batches.delivery_quantity).to.eql(list_batches_exchange[i].old_list_batches.delivery_quantity + list_batches_exchange[i].quantity);",
									"                                });",
									"                                ",
									"                                // blocked_quantity",
									"                                pm.test(\"nothing happen with blocked_quantity of batch\", function () {",
									"                                    pm.expect(list_batches_exchange[i].new_list_batches.blocked_quantity).to.eql(list_batches_exchange[i].old_list_batches.blocked_quantity);",
									"                                });",
									"",
									"                                // can_pick_quantity",
									"                                pm.test(\"can_pick_quantity of batch \" + list_batches_exchange[i].batch_id + \" descrease \" + list_batches_exchange[i].quantity, function () {",
									"                                    pm.expect(list_batches_exchange[i].new_list_batches.can_pick_quantity).to.eql(list_batches_exchange[i].old_list_batches.can_pick_quantity - list_batches_exchange[i].quantity);",
									"                                });",
									"                            }",
									"                        }",
									"                    }",
									"",
									"                    pm.test(\"Found all batch! \" + list_batches_exchange.length, function () {",
									"                        pm.expect(list_batches_exchange.length).to.eql(countBatch);",
									"                    });",
									"",
									"                    postman.setNextRequest(\"get_batch_overview\"); // get_batch_overview",
									"                } else {",
									"                    sku_pos++;",
									"                    pm.environment.set(\"C-sku_pos\",sku_pos);",
									"",
									"                    postman.setNextRequest(\"get_list_batch_by_sku\"); // get_batch_overview",
									"                }",
									"            } else {",
									"                page++;",
									"                pm.environment.set(\"C-page\",page);",
									"",
									"                console.log(\"view next page (\" + page + \") to get more batch\");",
									"                postman.setNextRequest(\"get_list_batch_by_sku\");",
									"            }",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow\");",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get list sku in batch, end test\", jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/batch/get-list?list_contact_ids&page_size={{C-page_size}}&page={{C-page}}&sku_id={{C-filter_sku_id}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"batch",
								"get-list"
							],
							"query": [
								{
									"key": "list_contact_ids",
									"value": null
								},
								{
									"key": "sort",
									"value": "",
									"disabled": true
								},
								{
									"key": "status",
									"value": "",
									"disabled": true
								},
								{
									"key": "page_size",
									"value": "{{C-page_size}}"
								},
								{
									"key": "page",
									"value": "{{C-page}}"
								},
								{
									"key": "sku_id",
									"value": "{{C-filter_sku_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get_batch_overview",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200 || pm.response.code == 404){ // tạm thời để 404 vì BE chưa push code",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let configs = pm.environment.get(\"C-configs\");",
									"    let batch_overview = null;",
									"    try {",
									"        batch_overview = jsData.data;",
									"    } catch {",
									"        console.log(\"missing data\");",
									"    }",
									"",
									"    let old_batch_overview;",
									"    switch(testcase){",
									"        case 2:",
									"            pm.test(\"got batch_overview data\", function () {",
									"                pm.expect(batch_overview != null).to.be.true;",
									"            });",
									"            pm.environment.set(\"C-batch_overview\",batch_overview);",
									"",
									"            postman.setNextRequest(\"get_list_posting\"); // get_list_batch_branch, get_list_pos_order, get_list_posting",
									"            break;",
									"        case 5: case 8:",
									"            old_batch_overview = pm.environment.get(\"C-batch_overview\");",
									"            // let pos_order_obj = pm.environment.get(\"C-pos_order_obj\");",
									"            // let total_batch_quantity = 0, total_batch_value = 0;",
									"            // for(let i in pos_order_obj.items){",
									"            //     for(let j in pos_order_obj.items[i].batches){",
									"            //         total_batch_quantity += pos_order_obj.items[i].batches[j].quantity;",
									"            //         total_batch_value += pos_order_obj.items[i].batches[j].quantity*pos_order_obj.items[i].batches[j].item_amount;",
									"            //     }",
									"            // }",
									"",
									"            // // total_pending",
									"",
									"            // // count_pending",
									"",
									"            // if(configs.create_order_status == \"completed\"){",
									"            //     // total_expiration",
									"",
									"            //     // count_expiration",
									"            // } else {",
									"            //     // total_expiration",
									"",
									"            //     // count_expiration",
									"            // }",
									"",
									"            // quản lý lô hàng phần overview không bị ảnh hưởng gì cả",
									"",
									"            pm.test(\"Nothing happen with batch_overview data\", function () {",
									"                console.log(\"old: \", old_batch_overview);",
									"                console.log(\"new: \", batch_overview);",
									"                pm.expect(JSON.stringify(old_batch_overview)).to.eql(JSON.stringify(batch_overview));",
									"            });",
									"            ",
									"            postman.setNextRequest(\"get_list_posting\"); // get_list_posting",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get batch overview\");",
									"    postman.setNextRequest(null);",
									"    // postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/batch/overview",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"batch",
								"overview"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_list_batch_branch",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let page = pm.environment.get(\"C-page\");",
									"",
									"if(!page){",
									"    page = 1;",
									"    pm.environment.set(\"C-page\",page);",
									"",
									"    let page_size = 50;",
									"    pm.environment.set(\"C-page_size\",page_size);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ============================= random number between min and max",
									"function getRandomInt(min, max) {",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = pm.response.json();",
									"if(pm.response.code == 200 || pm.response.code == 404){ // tạm thời handle 404 vì BE chưa push code",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let total_pages = 0, total_batch = 0;",
									"    try {",
									"        total_pages = jsData.meta.total_pages;",
									"        total_batch = jsData.meta.total_rows;",
									"    } catch {",
									"        console.log(\"Missing meta data\");",
									"    }",
									"    let page = pm.environment.get(\"C-page\");",
									"",
									"    let list_batch, old_total_batch;",
									"    switch(testcase){",
									"        case 2:",
									"            pm.environment.unset(\"C-page\");",
									"            pm.environment.unset(\"C-page_size\");",
									"            pm.test(\"Got total batch! \" + total_batch, function () {",
									"                pm.expect(total_batch > 0).to.be.true;",
									"            });",
									"            pm.environment.set(\"C-total_batch\",total_batch);",
									"",
									"            postman.setNextRequest(\"\"); // get_batch_overview",
									"            break;",
									"        case 5: case 8:",
									"            list_batch = pm.environment.get(\"C-list_batch\");",
									"            if(!list_batch){",
									"                list_batch = [];",
									"            }",
									"",
									"            for(let item in jsData.data){",
									"                list_batch[list_batch.length] = {",
									"                    \"batch_id\":jsData.data[item].id,",
									"                    \"created_at\":jsData.data[item].created_at,",
									"                    \"batch_code\":jsData.data[item].batch_code,",
									"                    \"system_code\":jsData.data[item].system_code,",
									"                    \"cart_status\":jsData.data[item].cart_status,",
									"                    \"payment_status\":jsData.data[item].payment_status,",
									"                    \"items_amount\":jsData.data[item].items_amount,",
									"                    \"sub_total_amount\":jsData.data[item].sub_total_amount,",
									"                    \"paid_amount\":jsData.data[item].paid_amount,",
									"                    \"currency\":jsData.data[item].currency,",
									"                    \"contact_id\":jsData.data[item].contact_id,",
									"                    \"entry_type\":jsData.data[item].entry_type,",
									"                    \"note\":jsData.data[item].note,",
									"                    \"value_at\":jsData.data[item].value_at,",
									"                    \"due_at\":jsData.data[item].due_at,",
									"                    \"send_at\":jsData.data[item].send_at,",
									"                    \"account_id\":jsData.data[item].account_id,",
									"                    \"tax_type\":jsData.data[item].tax_type,",
									"                    \"final_status\":jsData.data[item].final_status,",
									"                    \"sales_rep_info\":jsData.data[item].sales_rep_info",
									"                }",
									"                // list_batch[list_batch.length] = jsData.data[item];",
									"            }",
									"            pm.environment.set(\"C-list_batch\",list_batch);",
									"",
									"            let configs = pm.environment.get(\"C-configs\");",
									"            if(page >= total_pages || page >= configs.limit_page){",
									"                // must clear page & page_size",
									"                pm.environment.unset(\"C-page\");",
									"                pm.environment.unset(\"C-page_size\");",
									"",
									"                postman.setNextRequest(\"\"); // get_batch_overview",
									"            } else {",
									"                page++;",
									"                pm.environment.set(\"C-page\",page);",
									"",
									"                console.log(\"view next page (\" + page + \") to get more batch on branch \" + pm.environment.get(\"C-filter_branch_id\"));",
									"                postman.setNextRequest(\"get_list_batch_branch\");",
									"            }",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get list batch, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/batch/get-list?list_contact_ids&page={{C-page}}&page_size={{C-page_size}}&search&sort&status&branch_id={{C-filter_branch_id}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"batch",
								"get-list"
							],
							"query": [
								{
									"key": "list_contact_ids",
									"value": null
								},
								{
									"key": "page",
									"value": "{{C-page}}"
								},
								{
									"key": "page_size",
									"value": "{{C-page_size}}"
								},
								{
									"key": "search",
									"value": null
								},
								{
									"key": "sort",
									"value": null
								},
								{
									"key": "status",
									"value": null
								},
								{
									"key": "branch_id",
									"value": "{{C-filter_branch_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get_batch_overview_branch",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200 || pm.response.code == 404){ // tạm thời để 404 vì BE chưa push code",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let batch_overview = null;",
									"    try {",
									"        batch_overview = jsData.data;",
									"    } catch {",
									"        console.log(\"missing data\");",
									"    }",
									"",
									"    let old_batch_overview;",
									"    switch(testcase){",
									"        case 2:",
									"            pm.test(\"got batch_overview data\", function () {",
									"                pm.expect(batch_overview != null).to.be.true;",
									"            });",
									"            pm.environment.set(\"C-batch_overview\",batch_overview);",
									"",
									"            postman.setNextRequest(\"\"); // get_list_posting",
									"            break;",
									"        case 5:",
									"            old_batch_overview = pm.environment.get(\"C-batch_overview\");",
									"            pm.test(\"Nothing happen with batch_overview data\", function () {",
									"                pm.expect(JSON.stringify(old_batch_overview)).to.eql(JSON.stringify(batch_overview));",
									"            });",
									"            ",
									"            postman.setNextRequest(\"\"); // get_list_posting",
									"            break;",
									"        case 8:",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get batch overview\");",
									"    postman.setNextRequest(null);",
									"    // postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/batch/overview?branch_id={{C-filter_branch_id}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"batch",
								"overview"
							],
							"query": [
								{
									"key": "branch_id",
									"value": "{{C-filter_branch_id}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "posting",
			"item": [
				{
					"name": "get_list_posting",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/**",
									" * hiện tại page_size limit 20 (performance issue)",
									" * => chỉ quét tối đa 5 page, hạn chế broken log file",
									" */",
									"",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let page = pm.environment.get(\"C-page\");",
									"",
									"if(!page){",
									"    page = 1;",
									"    pm.environment.set(\"C-page\",page);",
									"",
									"    let page_size = 50;",
									"    pm.environment.set(\"C-page_size\",page_size);",
									"}",
									"",
									"// ============================================================================================================",
									"let invoice_obj = pm.environment.get(\"C-invoice_obj\");",
									"// console.log(\"invoice_obj: \",invoice_obj);",
									"let account_discount = pm.environment.get(\"C-discount\");",
									"let account_receivable = pm.environment.get(\"C-account_receivable\");",
									"let list_expected_posting = [];",
									"",
									"// // ghi posting account_receivable",
									"// list_expected_posting[0] = {",
									"//     \"object_type\":\"invoice\",",
									"//     \"object_id\":invoice_obj.invoice_id,",
									"//     \"object_id_ref\":\"00000000-0000-0000-0000-000000000000\",",
									"//     \"account_id\":account_receivable.id,",
									"//     \"is_credit\":false,",
									"//     \"amount\":invoice_obj.exp_total_amount,",
									"//     \"type\":\"account_receivable\"",
									"// }",
									"",
									"// // ghi posting discounts",
									"// for(let i in invoice_obj.discounts){",
									"//     if(invoice_obj.discounts[i].is_rate){",
									"//         for(let j in invoice_obj.items){",
									"//             list_expected_posting[list_expected_posting.length] = {",
									"//                 \"object_type\":\"invoice\",",
									"//                 \"object_id\":invoice_obj.invoice_id,",
									"//                 \"object_id_ref\":invoice_obj.items[j].item_id,",
									"//                 \"account_id\":account_discount.id,",
									"//                 \"is_credit\":false,",
									"//                 \"amount\":invoice_obj.items[j].discount_amount,",
									"//                 \"type\":\"discount_rate\"",
									"//             }",
									"//         }",
									"//     } else {",
									"//         for(let j in invoice_obj.items){",
									"//             list_expected_posting[list_expected_posting.length] = {",
									"//                 \"object_type\":\"invoice\",",
									"//                 \"object_id\":invoice_obj.invoice_id,",
									"//                 \"object_id_ref\":invoice_obj.items[j].item_id,",
									"//                 \"account_id\":account_discount.id,",
									"//                 \"is_credit\":false,",
									"//                 \"amount\":invoice_obj.items[j].discount_amount,",
									"//                 \"type\":\"discount_fix\"",
									"//             }",
									"//         }",
									"//     }",
									"// }",
									"",
									"// // ghi posting line items",
									"// for(let item in invoice_obj.items){",
									"//     list_expected_posting[list_expected_posting.length] = {",
									"//         \"object_type\":\"invoice\",",
									"//         \"object_id\":invoice_obj.invoice_id,",
									"//         \"object_id_ref\":invoice_obj.items[item].item_id,",
									"//         \"account_id\":invoice_obj.items[item].account_id,",
									"//         \"is_credit\":true,",
									"//         \"amount\":invoice_obj.items[item].before_tax_amount,",
									"//         \"type\":\"item\",",
									"//         \"name\":invoice_obj.items[item].name",
									"//     }",
									"//     // ghi posting taxs",
									"//     if(invoice_obj.tax_type != \"tax_not_applicable\"){",
									"//         for(let j in invoice_obj.items[item].taxes){",
									"//             if(\"item_tax_amount\" in invoice_obj.items[item].taxes[j]){",
									"//                 list_expected_posting[list_expected_posting.length] = {",
									"//                     \"object_type\":\"invoice\",",
									"//                     \"object_id\":invoice_obj.invoice_id,",
									"//                     \"object_id_ref\":invoice_obj.items[item].item_id,",
									"//                     \"account_id\":invoice_obj.items[item].taxes[j].account_id,",
									"//                     \"is_credit\":true,",
									"//                     \"amount\":invoice_obj.items[item].taxes[j].item_tax_amount,",
									"//                     \"type\":\"item_tax\",",
									"//                     \"name\":invoice_obj.items[item].name,",
									"//                     \"tax_name\":invoice_obj.items[item].taxes[j].name",
									"//                 }",
									"//             } else {",
									"//                 list_expected_posting[list_expected_posting.length] = {",
									"//                     \"object_type\":\"invoice\",",
									"//                     \"object_id\":invoice_obj.invoice_id,",
									"//                     \"object_id_ref\":invoice_obj.items[item].item_id,",
									"//                     \"account_id\":invoice_obj.items[item].taxes[j].account_id,",
									"//                     \"is_credit\":true,",
									"//                     \"amount\":invoice_obj.items[item].taxes[j].amount,",
									"//                     \"type\":\"item_tax\",",
									"//                     \"name\":invoice_obj.items[item].name,",
									"//                     \"tax_name\":invoice_obj.items[item].taxes[j].name",
									"//                 }",
									"//             }",
									"//         }",
									"//     }",
									"// }",
									"",
									"// let total_credit = 0, total_debit = 0;",
									"// for(let i in list_expected_posting){",
									"//     if(list_expected_posting[i].is_credit){",
									"//         total_credit += list_expected_posting[i].amount;",
									"//     } else {",
									"//         total_debit += list_expected_posting[i].amount;",
									"//     }",
									"// }",
									"// console.log(\"total_credit: \"  + total_credit);",
									"// console.log(\"total_debit: \"  + total_debit);",
									"// console.log(\"list_expected_posting: \" + JSON.stringify(list_expected_posting));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let total_pages = jsData.meta.total_pages;",
									"    let total_records = jsData.meta.total_rows;",
									"    let page = pm.environment.get(\"C-page\");",
									"",
									"    let list_posting, old_list_posting;",
									"    // console.log(\"debug total record in page: \" + jsData.data.length);",
									"    switch(testcase){",
									"        case 2:",
									"            list_posting = pm.environment.get(\"C-list_posting\");",
									"            if(!list_posting){",
									"                list_posting = [];",
									"            }",
									"            break;",
									"        case 5: case 8:",
									"            old_list_posting = pm.environment.get(\"C-old_list_posting\");",
									"            if(!old_list_posting){",
									"                old_list_posting = pm.environment.get(\"C-list_posting\");",
									"                pm.environment.unset(\"C-list_posting\");",
									"                pm.environment.set(\"C-old_list_posting\",old_list_posting);",
									"            }",
									"",
									"            list_posting = pm.environment.get(\"C-list_posting\");",
									"            if(!list_posting){",
									"                list_posting = [];",
									"            }",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow\");",
									"            break;",
									"    }",
									"",
									"    for(let item in jsData.data){",
									"        list_posting[list_posting.length] = {",
									"            \"posting_id\":jsData.data[item].id,",
									"            \"account_id\":jsData.data[item].account_id,",
									"            \"amount\":jsData.data[item].amount,",
									"            \"branch_id\":jsData.data[item].branch_id,",
									"            \"created_at\":jsData.data[item].created_at,",
									"            \"currency\":jsData.data[item].currency,",
									"            \"deleted_at\":jsData.data[item].deleted_at,",
									"            \"is_credit\":jsData.data[item].is_credit,",
									"            \"is_final_status\":jsData.data[item].is_final_status,",
									"            \"object_ref_id\":jsData.data[item].object_ref_id,",
									"            \"object_ref_type\":jsData.data[item].object_ref_type, // product (line_item), tax, discount",
									"            \"object_id\":jsData.data[item].object_id,",
									"            \"object_type\":jsData.data[item].object_type,",
									"            // \"value_at\":jsData.data[item].value_at,",
									"            \"short_desc\":jsData.data[item].short_desc",
									"        }",
									"    }",
									"    pm.environment.set(\"C-list_posting\",list_posting);",
									"",
									"    let configs = pm.environment.get(\"C-configs\");",
									"    if(page >= total_pages || page >= configs.limit_page){",
									"        // must clear page & page_size",
									"        pm.environment.unset(\"C-page\");",
									"        pm.environment.unset(\"C-page_size\");",
									"",
									"        let old_total_records;",
									"        switch(testcase){",
									"            case 2:",
									"                pm.test(\"Got all posting! \" + total_records, function () {",
									"                    pm.expect(total_records > 0).to.be.true;",
									"                });",
									"                pm.environment.set(\"C-total_posting\",total_records);",
									"",
									"                postman.setNextRequest(\"get_list_pos_order\"); // get_report_account_receivable_unpaid, get_list_pos_order",
									"                break;",
									"            case 8: case 5:",
									"                /**",
									"                 * configs.create_order_status = processing => chưa ghi nhận gì cả, kể cả xuất kho và pos",
									"                 * configs.create_order_status = completed",
									"                 *  - configs.use_payment_method != cash => ghi nhận xuất kho, ghi nhận pos như pos_order",
									"                 *  - configs.use_payment_method = cash => ghi nhận xuất kho, ghi nhận pos new rule (*2)",
									"                 *    + Trả đủ:",
									"                 *    + Trả dư:",
									"                 *    + Trả 1 phần:",
									"                 * Note:",
									"                 * - (*1) rule xuất kho: https://sobanhang.larksuite.com/wiki/LMTCwervWiMtTOkP9zJuynt8sgg#part-NuVUdAPlao6U6HxOAdnu7QMFsBh",
									"                 * - (*2) rule pos: https://sobanhang.larksuite.com/wiki/LMTCwervWiMtTOkP9zJuynt8sgg#part-LMqHdW1Neom9bfxkWTruaxGGsBb",
									"                 */ ",
									"                let old_total_records = pm.environment.get(\"C-total_posting\");",
									"                let pos_order_obj = pm.environment.get(\"C-pos_order_obj\");",
									"                // console.log(\"pos_order_obj: \",pos_order_obj);",
									"                let account_discount = pm.environment.get(\"C-discount\");",
									"                let account_receivable = pm.environment.get(\"C-account_receivable\");",
									"                let account_sale_income = pm.environment.get(\"C-sale_income\");",
									"                let account_sale_tax = pm.environment.get(\"C-sale_tax\");",
									"                let account_history_cost = pm.environment.get(\"C-history_cost\");",
									"                let list_expected_posting = [];",
									"",
									"                switch(configs.create_order_status){",
									"                    case \"processing\":",
									"                        pm.test(\"Nothing happen with total posting!\", function () {",
									"                            pm.expect(total_records).to.eql(old_total_records);",
									"                        });",
									"                        break;",
									"                    case \"completed\":",
									"                        // ghi nhận xuất kho",
									"                        // 1. Debit D1-001: Gía vốn hàng bán (COGS)",
									"                        for(let item in pos_order_obj.items){",
									"                            if(\"batches\" in pos_order_obj.items[item]){",
									"                                for(let j in pos_order_obj.items[item].batches){",
									"                                    list_expected_posting[list_expected_posting.length] = {",
									"                                        \"object_type\":\"warehouse\",",
									"                                        \"object_id\":pos_order_obj.pos_order_id, // cần confirm lại lưu object_id gì cho xuất kho",
									"                                        \"object_ref_type\":\"batch\",",
									"                                        \"object_ref_id\":pos_order_obj.items[item].batches[j].batch_id, //",
									"                                        \"account_id\":account_history_cost.id,",
									"                                        \"is_credit\":false,",
									"                                        \"amount\":pos_order_obj.items[item].batches[j].cost_per_item * pos_order_obj.items[item].batches[j].quantity, // CẦN PO CONFIRM LẠI SỐ LƯU Ở ĐÂY",
									"                                        \"type\":\"history_cost\"",
									"                                    }",
									"                                }",
									"                            } else {",
									"                                // hiện tại sp ko có lô ko trả về dc lô hàng khi khởi tạo, khi nhập",
									"",
									"                            }",
									"                        }",
									"                        // 2. Credit A2-001: Hàng tồn kho (Inventory) - giá nhập",
									"                        // hiện tại batch chưa trả ra giá nhập => PENDING",
									"",
									"                        // 3. Credit A2-002: Chi phí mua hàng chưa thuế - chi phí",
									"                        // hiện tại batch chưa trả ra chi phí => đợi có giá nhập thì trừ giá vốn để ra chi phí => PENDING",
									"",
									"                        // ghi nhận pos",
									"                        if(configs.use_payment_method == \"cash\"){",
									"                            switch(configs.paid_type){",
									"                                case \"partial_paid\":",
									"                                    console.log(\"Not support paid_type \" + configs.paid_type);",
									"                                    break;",
									"                                case \"fully_paid\": // hiện tại chỉ support ghi posting cho case này",
									"                                    /**",
									"                                     * doanh thu",
									"                                     *  - Debit A1-001 Tiền mặt -> giao dịch thu tiền mặt => COA của Cash account dc chọn",
									"                                     *  - Credit C1-001: Bán hàng",
									"                                     */",
									"                                    list_expected_posting[list_expected_posting.length] = {",
									"                                        \"object_type\":\"pos_order\",",
									"                                        \"object_id\":pos_order_obj.pos_order_id,",
									"                                        \"object_ref_id\":\"\", // 00000000-0000-0000-0000-000000000000",
									"                                        \"account_id\":pos_order_obj.payment_request.account_id, // cash account dùng để nhận thanh toán",
									"                                        \"is_credit\":false,",
									"                                        \"amount\":pos_order_obj.exp_total_amount, // CẦN PO CONFIRM LẠI SỐ LƯU Ở ĐÂY",
									"                                        \"type\":\"account_cash\"",
									"                                    }",
									"                                    for(let item in pos_order_obj.items){",
									"                                        list_expected_posting[list_expected_posting.length] = {",
									"                                            \"object_type\":\"pos_order\",",
									"                                            \"object_id\":pos_order_obj.pos_order_id,",
									"                                            \"object_ref_id\":pos_order_obj.items[item].item_id,",
									"                                            \"object_ref_type\":\"product\", // product ?",
									"                                            \"account_id\":account_sale_income.id, // sản phẩm của POS ko có configs coa nên chỉ ghi vào đúng doanh thu bán hàng",
									"                                            \"is_credit\":true,",
									"                                            \"amount\":pos_order_obj.items[item].before_tax_amount, // CẦN PO CONFIRM LẠI SỐ LƯU Ở ĐÂY",
									"                                            \"type\":\"item\",",
									"                                            \"name\":pos_order_obj.items[item].name",
									"                                        }",
									"                                    }",
									"",
									"                                    /**",
									"                                     * thuế bán hàng",
									"                                     *  - Debit A1-001 Tiền mặt",
									"                                     *  - Credit B2-001: Thuế bán hàng",
									"                                     */",
									"                                    list_expected_posting[list_expected_posting.length] = {",
									"                                        \"object_type\":\"pos_order\",",
									"                                        \"object_id\":pos_order_obj.pos_order_id,",
									"                                        \"object_ref_id\":\"\", // 00000000-0000-0000-0000-000000000000",
									"                                        \"account_id\":pos_order_obj.payment_request.account_id,",
									"                                        \"is_credit\":false,",
									"                                        \"amount\":pos_order_obj.exp_tax_amount, // CẦN PO CONFIRM LẠI SỐ LƯU Ở ĐÂY",
									"                                        \"type\":\"tax_account_cash\"",
									"                                    }",
									"                                    for(let item in pos_order_obj.items){",
									"                                        if(pos_order_obj.tax_type != \"tax_not_applicable\"){",
									"                                            for(let j in pos_order_obj.items[item].taxes){",
									"                                                if(\"item_tax_amount\" in pos_order_obj.items[item].taxes[j]){",
									"                                                    list_expected_posting[list_expected_posting.length] = {",
									"                                                        \"object_type\":\"pos_order\",",
									"                                                        \"object_id\":pos_order_obj.pos_order_id,",
									"                                                        \"object_ref_id\":pos_order_obj.items[item].item_id,",
									"                                                        \"account_id\":pos_order_obj.items[item].taxes[j].account_id, // PO confirm lại chổ thuế này ghi theo coa của thuế hay B2001",
									"                                                        \"is_credit\":true,",
									"                                                        \"amount\":pos_order_obj.items[item].taxes[j].item_tax_amount,",
									"                                                        \"type\":\"item_tax\",",
									"                                                        \"name\":pos_order_obj.items[item].name,",
									"                                                        \"tax_name\":pos_order_obj.items[item].taxes[j].name",
									"                                                    }",
									"                                                }",
									"                                            }",
									"                                        }",
									"                                    }",
									"",
									"                                    /**",
									"                                     * giảm giá",
									"                                     *  - Debit C1-002: giảm giá hàng bán (nếu có)",
									"                                     *  - Credit A1-001 Tiền mặt",
									"                                     */",
									"                                    if(pos_order_obj.discounts.length > 0){",
									"                                        list_expected_posting[list_expected_posting.length] = {",
									"                                            \"object_type\":\"pos_order\",",
									"                                            \"object_id\":pos_order_obj.pos_order_id,",
									"                                            \"object_ref_id\":\"\", // 00000000-0000-0000-0000-000000000000",
									"                                            \"account_id\":pos_order_obj.payment_request.account_id,",
									"                                            \"is_credit\":true,",
									"                                            \"amount\":pos_order_obj.exp_discount_amount, // CẦN PO CONFIRM LẠI SỐ LƯU Ở ĐÂY",
									"                                            \"type\":\"discount_account_cash\"",
									"                                        }",
									"                                        for(let j in pos_order_obj.items){",
									"                                            list_expected_posting[list_expected_posting.length] = {",
									"                                                \"object_type\":\"pos_order\",",
									"                                                \"object_id\":pos_order_obj.pos_order_id,",
									"                                                \"object_ref_id\":pos_order_obj.items[j].item_id,",
									"                                                \"account_id\":account_discount.id,",
									"                                                \"is_credit\":false,",
									"                                                \"amount\":pos_order_obj.items[j].discount_amount,",
									"                                                \"type\":\"item_discount\"",
									"                                            }",
									"                                        }",
									"                                    }",
									"",
									"                                    // promotion ??? PO chưa define",
									"                                    // surcharge ??? PO chưa define",
									"                                    break;",
									"                                case \"extra_paid\":",
									"                                    console.log(\"Not support paid_type \" + configs.paid_type);",
									"                                    break;",
									"                                default:",
									"                                    console.log(\"Missing paid_type \" + configs.paid_type);",
									"                                    break;",
									"                            }",
									"                        } else {",
									"                            /** ghi nhận bút toán như invoice */",
									"                            /**",
									"                             * doanh thu",
									"                             *  - Debit A3-001: Phải thu khách hàng",
									"                             *  - Credit C1-001: Bán hàng",
									"                             */",
									"                            list_expected_posting[list_expected_posting.length] = {",
									"                                \"object_type\":\"pos_order\",",
									"                                \"object_id\":pos_order_obj.pos_order_id,",
									"                                \"object_ref_id\":\"\", // 00000000-0000-0000-0000-000000000000",
									"                                \"account_id\":account_receivable.id,",
									"                                \"is_credit\":false,",
									"                                \"amount\":pos_order_obj.exp_total_amount, // CẦN PO CONFIRM LẠI SỐ LƯU Ở ĐÂY",
									"                                \"type\":\"account_receivable\"",
									"                            }",
									"                            for(let item in pos_order_obj.items){",
									"                                list_expected_posting[list_expected_posting.length] = {",
									"                                    \"object_type\":\"pos_order\",",
									"                                    \"object_id\":pos_order_obj.pos_order_id,",
									"                                    \"object_ref_id\":pos_order_obj.items[item].item_id,",
									"                                    \"object_ref_type\":\"product\", // product ?",
									"                                    \"account_id\":account_sale_income.id, // sản phẩm của POS ko có configs coa nên chỉ ghi vào đúng doanh thu bán hàng",
									"                                    \"is_credit\":true,",
									"                                    \"amount\":pos_order_obj.items[item].before_tax_amount, // CẦN PO CONFIRM LẠI SỐ LƯU Ở ĐÂY",
									"                                    \"type\":\"item\",",
									"                                    \"name\":pos_order_obj.items[item].name",
									"                                }",
									"                            }",
									"",
									"                            /**",
									"                             * thuế bán hàng",
									"                             *  - Debit A3-001: Phải thu khách hàng",
									"                             *  - Credit B2-001: Thuế bán hàng",
									"                             */",
									"                            list_expected_posting[list_expected_posting.length] = {",
									"                                \"object_type\":\"pos_order\",",
									"                                \"object_id\":pos_order_obj.pos_order_id,",
									"                                \"object_ref_id\":\"\", // 00000000-0000-0000-0000-000000000000",
									"                                \"account_id\":account_receivable.id,",
									"                                \"is_credit\":false,",
									"                                \"amount\":pos_order_obj.exp_tax_amount, // CẦN PO CONFIRM LẠI SỐ LƯU Ở ĐÂY",
									"                                \"type\":\"tax_account_receivable\"",
									"                            }",
									"                            for(let item in pos_order_obj.items){",
									"                                if(pos_order_obj.tax_type != \"tax_not_applicable\"){",
									"                                    for(let j in pos_order_obj.items[item].taxes){",
									"                                        if(\"item_tax_amount\" in pos_order_obj.items[item].taxes[j]){",
									"                                            list_expected_posting[list_expected_posting.length] = {",
									"                                                \"object_type\":\"pos_order\",",
									"                                                \"object_id\":pos_order_obj.pos_order_id,",
									"                                                \"object_ref_id\":pos_order_obj.items[item].item_id,",
									"                                                \"account_id\":pos_order_obj.items[item].taxes[j].account_id, // PO confirm lại chổ thuế này ghi theo coa của thuế hay B2001",
									"                                                \"is_credit\":true,",
									"                                                \"amount\":pos_order_obj.items[item].taxes[j].item_tax_amount,",
									"                                                \"type\":\"item_tax\",",
									"                                                \"name\":pos_order_obj.items[item].name,",
									"                                                \"tax_name\":pos_order_obj.items[item].taxes[j].name",
									"                                            }",
									"                                        } ",
									"                                        // else { // tax_amount = 0 thì khỏi ghi posting",
									"                                        //     list_expected_posting[list_expected_posting.length] = {",
									"                                        //         \"object_type\":\"pos_order\",",
									"                                        //         \"object_id\":pos_order_obj.pos_order_id,",
									"                                        //         \"object_ref_id\":pos_order_obj.items[item].item_id,",
									"                                        //         \"account_id\":pos_order_obj.items[item].taxes[j].account_id,",
									"                                        //         \"is_credit\":true,",
									"                                        //         \"amount\":pos_order_obj.items[item].taxes[j].amount,",
									"                                        //         \"type\":\"item_tax\",",
									"                                        //         \"name\":pos_order_obj.items[item].name,",
									"                                        //         \"tax_name\":pos_order_obj.items[item].taxes[j].name",
									"                                        //     }",
									"                                        // }",
									"                                    }",
									"                                }",
									"                            }",
									"",
									"                            /**",
									"                             * giảm giá",
									"                             *  - Debit C1-002: giảm giá hàng bán (nếu có)",
									"                             *  - Credit A3-001: Phải thu khách hàng",
									"                             */",
									"                            if(pos_order_obj.discounts.length > 0){",
									"                                list_expected_posting[list_expected_posting.length] = {",
									"                                    \"object_type\":\"pos_order\",",
									"                                    \"object_id\":pos_order_obj.pos_order_id,",
									"                                    \"object_ref_id\":\"\", // 00000000-0000-0000-0000-000000000000",
									"                                    \"account_id\":account_receivable.id,",
									"                                    \"is_credit\":true,",
									"                                    \"amount\":pos_order_obj.exp_discount_amount, // CẦN PO CONFIRM LẠI SỐ LƯU Ở ĐÂY",
									"                                    \"type\":\"discount_account_receivable\"",
									"                                }",
									"                                for(let j in pos_order_obj.items){",
									"                                    list_expected_posting[list_expected_posting.length] = {",
									"                                        \"object_type\":\"pos_order\",",
									"                                        \"object_id\":pos_order_obj.pos_order_id,",
									"                                        \"object_ref_id\":pos_order_obj.items[j].item_id,",
									"                                        \"account_id\":account_discount.id,",
									"                                        \"is_credit\":false,",
									"                                        \"amount\":pos_order_obj.items[j].discount_amount,",
									"                                        \"type\":\"item_discount\"",
									"                                    }",
									"                                }",
									"                            }",
									"",
									"                            // promotion ??? PO chưa define",
									"                            // surcharge ??? PO chưa define",
									"                        }",
									"                        console.log(\"list_expected_posting: \" + JSON.stringify(list_expected_posting));",
									"",
									"                        // xử lý cho act posting",
									"                        let list_actual_posting = [];",
									"                        // console.log(\"start debug =====\");",
									"                        // console.log(\"pos_order_id: \"  + pos_order_obj.pos_order_id);",
									"                        // console.log(\"debug: \" + list_posting.length);",
									"                        for(let i in list_posting){",
									"                            // console.log(\"type: \"  + list_posting[i].object_type);",
									"                            // console.log(i + \". object_id: \"  + list_posting[i].object_id);",
									"                            ",
									"                            if(list_posting[i].object_type == \"pos_order\" && list_posting[i].object_id == pos_order_obj.pos_order_id){",
									"                                list_actual_posting[list_actual_posting.length] = {",
									"                                    \"object_type\":list_posting[i].object_type,",
									"                                    \"object_id\":list_posting[i].object_id,",
									"                                    \"object_ref_id\":list_posting[i].object_ref_id,",
									"                                    \"object_ref_type\":list_posting[i].object_ref_type,",
									"                                    \"account_id\":list_posting[i].account_id,",
									"                                    \"is_credit\":list_posting[i].is_credit,",
									"                                    \"amount\":list_posting[i].amount",
									"                                }",
									"                            } else if(list_posting[i].object_type == \"warehouse\" && list_posting[i].object_id == pos_order_obj.pos_order_id) {",
									"                                list_actual_posting[list_actual_posting.length] = {",
									"                                    \"object_type\":list_posting[i].object_type,",
									"                                    \"object_id\":list_posting[i].object_id,",
									"                                    \"object_ref_id\":list_posting[i].object_ref_id,",
									"                                    \"object_ref_type\":list_posting[i].object_ref_type,",
									"                                    \"account_id\":list_posting[i].account_id,",
									"                                    \"is_credit\":list_posting[i].is_credit,",
									"                                    \"amount\":list_posting[i].amount",
									"                                }",
									"                            }",
									"                        }",
									"                        console.log(\"list_actual_posting: \" + JSON.stringify(list_actual_posting));",
									"",
									"                        let count_record = list_expected_posting.length;",
									"                        old_total_records = pm.environment.get(\"C-total_posting\");",
									"                        pm.test(\"Have \" + count_record + \" new records\", function () {",
									"                            console.log(\"old: \" + old_total_records);",
									"                            console.log(\"new: \" + total_records);",
									"                            pm.expect(total_records == old_total_records + count_record).to.be.true;",
									"                        });",
									"                        ",
									"                        let count = 0;",
									"                        let foundAll = false;",
									"",
									"                        let credit_amount = 0, debit_amount = 0;",
									"                        for(let i in list_actual_posting){",
									"                            if(list_actual_posting[i].is_credit){",
									"                                credit_amount += list_actual_posting[i].amount;",
									"                                // item amount & tax amount",
									"                                for(let j in list_expected_posting){",
									"                                    if(list_expected_posting[j].is_credit){",
									"                                        if(list_actual_posting[i].account_id == list_expected_posting[j].account_id && list_actual_posting[i].object_ref_id == list_expected_posting[j].object_ref_id){",
									"                                            count++;",
									"                                            switch(list_expected_posting[j].type){",
									"                                                case \"item\":",
									"                                                    pm.test(\"Found item with amount correctly \" + list_expected_posting[j].amount, function () {",
									"                                                        console.log(\"act amount: \" + list_actual_posting[i].amount);",
									"                                                        pm.expect(list_expected_posting[j].amount == list_actual_posting[i].amount).to.be.true;",
									"                                                    });",
									"                                                    break;",
									"                                                case \"discount_account_cash\":",
									"                                                    pm.test(\"Found discount_account_cash with amount correctly \" + list_expected_posting[j].amount, function () {",
									"                                                        console.log(\"act amount: \" + list_actual_posting[i].amount);",
									"                                                        pm.expect(list_expected_posting[j].amount == list_actual_posting[i].amount).to.be.true;",
									"                                                    });",
									"                                                    break;",
									"                                                case \"\":",
									"                                                    pm.test(\"Found discount_fix with amount correctly \" + list_expected_posting[j].amount, function () {",
									"                                                        console.log(\"act amount: \" + list_actual_posting[i].amount);",
									"                                                        pm.expect(list_expected_posting[j].amount == list_actual_posting[i].amount).to.be.true;",
									"                                                    });",
									"                                                    break;",
									"                                                case \"\":",
									"                                                    pm.test(\"Found discount amount correctly \" + list_expected_posting[j].amount, function () {",
									"                                                        console.log(\"act amount: \" + list_actual_posting[i].amount);",
									"                                                        pm.expect(list_expected_posting[j].amount == list_actual_posting[i].amount).to.be.true;",
									"                                                    });",
									"                                                    break;",
									"                                                default:",
									"                                                    pm.test(\"Missing case\", function () {",
									"                                                        pm.expect(false).to.be.true;",
									"                                                    });",
									"                                                    break;",
									"                                            }",
									"                                            break;",
									"                                        }",
									"                                    }",
									"                                }",
									"                            } else {",
									"                                debit_amount += list_actual_posting[i].amount;",
									"                                // account_receivable & discount amount",
									"                                for(let j in list_expected_posting){",
									"                                    if(!list_expected_posting[j].is_credit){",
									"                                        if(list_actual_posting[i].account_id == list_expected_posting[j].account_id && list_actual_posting[i].object_ref_id == list_expected_posting[j].object_ref_id){",
									"                                            count++;",
									"                                            switch(list_expected_posting[j].type){",
									"                                                case \"history_cost\":",
									"                                                    pm.test(\"Found history_cost with amount correctly \" + list_expected_posting[j].amount, function () {",
									"                                                        console.log(\"act amount: \" + list_actual_posting[i].amount);",
									"                                                        pm.expect(list_expected_posting[j].amount == list_actual_posting[i].amount).to.be.true;",
									"                                                    });",
									"                                                    break;",
									"                                                case \"item_discount\":",
									"                                                    pm.test(\"Found item_discount with amount correctly \" + list_expected_posting[j].amount, function () {",
									"                                                        console.log(\"act amount: \" + list_actual_posting[i].amount);",
									"                                                        pm.expect(list_expected_posting[j].amount == list_actual_posting[i].amount).to.be.true;",
									"                                                    });",
									"                                                    break;",
									"                                                case \"account_cash\":",
									"                                                    pm.test(\"Found account_cash with amount correctly \" + list_expected_posting[j].amount, function () {",
									"                                                        console.log(\"act amount: \" + list_actual_posting[i].amount);",
									"                                                        pm.expect(list_expected_posting[j].amount == list_actual_posting[i].amount).to.be.true;",
									"                                                    });",
									"                                                    break;",
									"                                                case \"tax_account_cash\":",
									"                                                    pm.test(\"Found tax_account_cash amount correctly \" + list_expected_posting[j].amount, function () {",
									"                                                        console.log(\"act amount: \" + list_actual_posting[i].amount);",
									"                                                        pm.expect(list_expected_posting[j].amount == list_actual_posting[i].amount).to.be.true;",
									"                                                    });",
									"                                                    break;",
									"                                                default:",
									"                                                    pm.test(\"Missing case\", function () {",
									"                                                        pm.expect(false).to.be.true;",
									"                                                    });",
									"                                                    break;",
									"                                            }",
									"                                            break;",
									"                                        }",
									"                                    }",
									"                                }",
									"                            }",
									"",
									"                            if(count == count_record){",
									"                                foundAll = true;",
									"                                break;",
									"                            }",
									"                        }",
									"",
									"                        pm.test(\"Found all posting\", function () {",
									"                            pm.expect(foundAll).to.be.true;",
									"                        });",
									"",
									"                        pm.test(\"total credit_amount == total debit_amount\", function () {",
									"                            console.log(\"debit_amount: \" + debit_amount);",
									"                            console.log(\"credit_amount: \" + credit_amount);",
									"                            pm.expect(debit_amount == credit_amount).to.be.true;",
									"                        });",
									"                        break;",
									"                    default:",
									"                        console.log(\"Missing order status \" + configs.create_order_status);",
									"                        break;",
									"                }",
									"",
									"                // clear old data to update at next testcase",
									"                pm.environment.unset(\"C-old_list_posting\");",
									"",
									"                postman.setNextRequest(\"\"); // get_report_account_receivable_unpaid",
									"                break;",
									"            default:",
									"                console.log(\"Missing flow, end test\");",
									"                postman.setNextRequest(null);",
									"                break;",
									"        }",
									"    } else {",
									"        page++;",
									"        pm.environment.set(\"C-page\",page);",
									"",
									"        console.log(\"view next page (\" + page + \") to get more posting\");",
									"        postman.setNextRequest(\"get_list_posting\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get list posting, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-ledger/api/v1/posting/get-list?business_id={{C-business_id}}&page={{C-page}}&page_size={{C-page_size}}&search=&sort=",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-ledger",
								"api",
								"v1",
								"posting",
								"get-list"
							],
							"query": [
								{
									"key": "business_id",
									"value": "{{C-business_id}}"
								},
								{
									"key": "page",
									"value": "{{C-page}}"
								},
								{
									"key": "page_size",
									"value": "{{C-page_size}}"
								},
								{
									"key": "search",
									"value": ""
								},
								{
									"key": "sort",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "home-report",
			"item": [
				{
					"name": "get_report_account_receivable_unpaid",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let payload = {",
									"    \"account_key\": \"A3001\", // account_receivable => A3001, account_payable => B1001",
									"    \"branch_id\": pm.environment.get(\"C-branch_id\"),",
									"    \"business_id\": parseInt(pm.environment.get(\"C-business_id\"))",
									"    //   \"current_period_end\": \"string\",",
									"    //   \"current_period_start\": \"string\",",
									"    // \"page\": 1,",
									"    // \"page_size\": 20,",
									"    //   \"period\": \"string\",  // old due_days",
									"    //   \"previous_period_end\": \"string\",",
									"    //   \"previous_period_start\": \"string\",",
									"    //   \"report_type\": \"string\",",
									"    // \"timezone\": \"UTC+07:00\"",
									"}",
									"",
									"console.log(\"payload: \",payload);",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));",
									"pm.environment.set(\"C-report_obj\",payload);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ============================= get last day (Sun is end of Week)",
									"function getLastDayOfCurrentWeek() {",
									"    const now = new Date();",
									"    const lastDay = new Date(now);",
									"    const daysUntilSunday = 7 - now.getDay();  // if Saturday is end, change 7 => 6",
									"    lastDay.setDate(now.getDate() + daysUntilSunday);",
									"    return lastDay;",
									"}",
									"",
									"// ============================= get first day (Sun is end of Week)",
									"function getFirstDayOfCurrentWeek() {",
									"    const now = new Date();",
									"    const firstDay = new Date(now);",
									"    firstDay.setDate(now.getDate() - now.getDay() + 1);  // if Saturday is end, remove +1",
									"    return firstDay;",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let unpaid_account_receivable = null;",
									"    try {",
									"        unpaid_account_receivable = jsData.data.unpaid_amount_lifetime_categories;",
									"    } catch {",
									"        console.log(\"Can't get data\");",
									"    }",
									"",
									"    switch(testcase){",
									"        case 2:",
									"            pm.test(\"Got unpaid_account_receivable data\", function () {",
									"                pm.environment.set(\"C-unpaid_account_receivable\",unpaid_account_receivable);",
									"                pm.expect(unpaid_account_receivable != null).to.be.true;",
									"            });",
									"",
									"            postman.setNextRequest(\"get_report_account_receivable_customer\"); //get_report_account_receivable_customer",
									"            break;",
									"        case 8:",
									"            let invoice_obj = pm.environment.get(\"C-invoice_obj\");",
									"            let old_data = pm.environment.get(\"C-unpaid_account_receivable\");",
									"            let total_amount = parseFloat(invoice_obj.exp_total_amount);",
									"            console.log(\"total_amount: \" + (total_amount + old_data.unpaid_total));",
									"",
									"            // unpaid_total",
									"            pm.test(\"Total unpaid increase \" + total_amount, function () {",
									"                console.log(\"old: \" + old_data.unpaid_total);",
									"                console.log(\"new: \" + unpaid_account_receivable.unpaid_total);",
									"                pm.expect(unpaid_account_receivable.unpaid_total == total_amount + old_data.unpaid_total).to.be.true;",
									"            });",
									"",
									"            let due_date = new Date(invoice_obj.due_at);",
									"            let due_date_timestamp = Math.floor(due_date.getTime()/1000);",
									"            let today = new Date();",
									"            let today_timestamp = Math.floor(today.getTime()/1000);",
									"            let due_type;",
									"            let last_day_of_current_week = getLastDayOfCurrentWeek();",
									"            let last_day_of_current_week_stp = Math.floor(last_day_of_current_week.getTime()/1000);",
									"            let first_day_of_current_week = getFirstDayOfCurrentWeek();",
									"            let first_day_of_current_week_stp = Math.floor(first_day_of_current_week.getTime()/1000);",
									"            // console.log(\"debug: \" + (due_date_timestamp - today_timestamp));",
									"            if(due_date_timestamp > today_timestamp){",
									"                if(due_date_timestamp < last_day_of_current_week_stp){",
									"                    due_type = \"undue_n_7d\";",
									"                } else {",
									"                    due_type = \"undue\";",
									"                }",
									"            } else {",
									"                if(today_timestamp - due_date_timestamp > 90*24*60*60){",
									"                    due_type = \"overdue_over\";",
									"                } else if (today_timestamp - due_date_timestamp > 60*24*60*60){",
									"                    due_type = \"overdue_between\";",
									"                } else if (today_timestamp - due_date_timestamp > 30*24*60*60){",
									"                    due_type = \"overdue_less\";",
									"                } else {",
									"                    if(due_date_timestamp > first_day_of_current_week_stp){",
									"                        due_type = \"due_n_7d\";",
									"                    } else {",
									"                        due_type = \"due\";",
									"                    }",
									"                }",
									"            }",
									"            pm.environment.set(\"C-due_type\",due_type);",
									"            console.log(\"due_type: \" + due_type);",
									"",
									"            console.log(\"old: \",old_data);",
									"            console.log(\"new: \",unpaid_account_receivable);",
									"            switch(due_type){",
									"                case \"due\": case \"due_n_7d\":",
									"                    // unpaid_due",
									"                    pm.test(\"unpaid_due increase \" + total_amount, function () {",
									"                        console.log(\"old: \" + old_data.unpaid_due);",
									"                        console.log(\"expected: \" + (total_amount + old_data.unpaid_due));",
									"                        console.log(\"new: \" + unpaid_account_receivable.unpaid_due);",
									"                        pm.expect(unpaid_account_receivable.unpaid_due == total_amount + old_data.unpaid_due).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_less",
									"                    pm.test(\"nothing happen unpaid_overdue_less\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_less == old_data.unpaid_overdue_less).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_between",
									"                    pm.test(\"nothing happen unpaid_overdue_between\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_between == old_data.unpaid_overdue_between).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_over",
									"                    pm.test(\"nothing happen unpaid_overdue_over\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_over == old_data.unpaid_overdue_over).to.be.true;",
									"                    });",
									"                    break;",
									"                case \"overdue_less\":",
									"                    // unpaid_due",
									"                    pm.test(\"nothing happen unpaid_due\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_due == old_data.unpaid_due).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_less",
									"                    pm.test(\"unpaid_overdue_less increase \" + total_amount, function () {",
									"                        console.log(\"old: \" + old_data.unpaid_overdue_less);",
									"                        // console.log(\"expected: \" + (total_amount + old_data.unpaid_overdue_less));",
									"                        console.log(\"new: \" + unpaid_account_receivable.unpaid_overdue_less);",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_less == total_amount + old_data.unpaid_overdue_less).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_between",
									"                    pm.test(\"nothing happen unpaid_overdue_between\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_between == old_data.unpaid_overdue_between).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_over",
									"                    pm.test(\"nothing happen unpaid_overdue_over\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_over == old_data.unpaid_overdue_over).to.be.true;",
									"                    });",
									"                    break;",
									"                case \"overdue_between\":",
									"                    // unpaid_due",
									"                    pm.test(\"nothing happen unpaid_due\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_due == old_data.unpaid_due).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_less",
									"                    pm.test(\"nothing happen unpaid_overdue_less\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_less == old_data.unpaid_overdue_less).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_between",
									"                    pm.test(\"unpaid_overdue_between increase \" + total_amount, function () {",
									"                        console.log(\"old: \" + old_data.unpaid_overdue_between);",
									"                        console.log(\"new: \" + unpaid_account_receivable.unpaid_overdue_between);",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_between == total_amount + old_data.unpaid_overdue_between).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_over",
									"                    pm.test(\"nothing happen unpaid_overdue_over\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_over == old_data.unpaid_overdue_over).to.be.true;",
									"                    });",
									"                    break;",
									"                case \"overdue_over\":",
									"                    // unpaid_due",
									"                    pm.test(\"nothing happen unpaid_due\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_due == old_data.unpaid_due).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_less",
									"                    pm.test(\"nothing happen unpaid_overdue_less\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_less == old_data.unpaid_overdue_less).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_between",
									"                    pm.test(\"unpaid_overdue_between increase\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_between == old_data.unpaid_overdue_between).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_over",
									"                    pm.test(\"unpaid_overdue_over increase \" + total_amount, function () {",
									"                        console.log(\"old: \" + old_data.unpaid_overdue_over);",
									"                        console.log(\"new: \" + unpaid_account_receivable.unpaid_overdue_over);",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_over == total_amount + old_data.unpaid_overdue_over).to.be.true;",
									"                    });",
									"                    break;",
									"                default:",
									"                    // unpaid_due",
									"                    pm.test(\"nothing happen unpaid_due\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_due == old_data.unpaid_due).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_less",
									"                    pm.test(\"nothing happen unpaid_overdue_less\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_less == old_data.unpaid_overdue_less).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_between",
									"                    pm.test(\"unpaid_overdue_between increase\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_between == old_data.unpaid_overdue_between).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_over",
									"                    pm.test(\"nothing happen unpaid_overdue_over\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_over == old_data.unpaid_overdue_over).to.be.true;",
									"                    });",
									"                    break;",
									"            }",
									"",
									"            if(due_type == \"undue_n_7d\"){",
									"                // unpaid_overdue_more_than_today",
									"                pm.test(\"nothing happen unpaid_overdue_more_than_today\", function () {",
									"                    pm.expect(unpaid_account_receivable.unpaid_overdue_more_than_today == old_data.unpaid_overdue_more_than_today).to.be.true;",
									"                });",
									"",
									"                // unpaid_overdue_less_than_today",
									"                pm.test(\"unpaid_overdue_less_than_today increase \" + total_amount, function () {",
									"                    console.log(\"old: \" + old_data.unpaid_overdue_less_than_today);",
									"                    console.log(\"expected: \" + (total_amount + old_data.unpaid_overdue_less_than_today));",
									"                    console.log(\"new: \" + unpaid_account_receivable.unpaid_overdue_less_than_today);",
									"                    pm.expect(unpaid_account_receivable.unpaid_overdue_less_than_today == total_amount + old_data.unpaid_overdue_less_than_today).to.be.true;",
									"                });",
									"",
									"                // unpaid_overdue_in_week",
									"                pm.test(\"unpaid_overdue_in_week increase \" + total_amount, function () {",
									"                    console.log(\"old: \" + old_data.unpaid_overdue_in_week);",
									"                    console.log(\"expected: \" + (total_amount + old_data.unpaid_overdue_in_week));",
									"                    console.log(\"new: \" + unpaid_account_receivable.unpaid_overdue_in_week);",
									"                    pm.expect(unpaid_account_receivable.unpaid_overdue_in_week == total_amount + old_data.unpaid_overdue_in_week).to.be.true;",
									"                });",
									"            } else if(due_type == \"due_n_7d\"){",
									"                // unpaid_overdue_more_than_today",
									"                pm.test(\"unpaid_overdue_more_than_today increase \" + total_amount, function () {",
									"                    console.log(\"old: \" + old_data.unpaid_overdue_more_than_today);",
									"                    console.log(\"expected: \" + (total_amount + old_data.unpaid_overdue_more_than_today));",
									"                    console.log(\"new: \" + unpaid_account_receivable.unpaid_overdue_more_than_today);",
									"                    pm.expect(unpaid_account_receivable.unpaid_overdue_more_than_today == total_amount + old_data.unpaid_overdue_more_than_today).to.be.true;",
									"                });",
									"",
									"                // unpaid_overdue_less_than_today",
									"                pm.test(\"nothing happen unpaid_overdue_less_than_today\", function () {",
									"                    pm.expect(unpaid_account_receivable.unpaid_overdue_less_than_today == old_data.unpaid_overdue_less_than_today).to.be.true;",
									"                });",
									"",
									"                // unpaid_overdue_in_week",
									"                pm.test(\"unpaid_overdue_in_week increase \" + total_amount, function () {",
									"                    console.log(\"old: \" + old_data.unpaid_overdue_in_week);",
									"                    console.log(\"expected: \" + (total_amount + old_data.unpaid_overdue_in_week));",
									"                    console.log(\"new: \" + unpaid_account_receivable.unpaid_overdue_in_week);",
									"                    pm.expect(unpaid_account_receivable.unpaid_overdue_in_week == total_amount + old_data.unpaid_overdue_in_week).to.be.true;",
									"                });",
									"            } else if (due_type == \"undue\"){",
									"                // unpaid_overdue_more_than_today",
									"                pm.test(\"nothing happen unpaid_overdue_more_than_today\", function () {",
									"                    pm.expect(unpaid_account_receivable.unpaid_overdue_more_than_today == old_data.unpaid_overdue_more_than_today).to.be.true;",
									"                });",
									"",
									"                // unpaid_overdue_less_than_today",
									"                pm.test(\"unpaid_overdue_less_than_today increase \" + total_amount, function () {",
									"                    console.log(\"old: \" + old_data.unpaid_overdue_less_than_today);",
									"                    console.log(\"expected: \" + (total_amount + old_data.unpaid_overdue_less_than_today));",
									"                    console.log(\"new: \" + unpaid_account_receivable.unpaid_overdue_less_than_today);",
									"                    pm.expect(unpaid_account_receivable.unpaid_overdue_less_than_today == total_amount + old_data.unpaid_overdue_less_than_today).to.be.true;",
									"                });",
									"",
									"                // unpaid_overdue_in_week",
									"                pm.test(\"nothing happen unpaid_overdue_in_week\", function () {",
									"                    pm.expect(unpaid_account_receivable.unpaid_overdue_in_week == old_data.unpaid_overdue_in_week).to.be.true;",
									"                });",
									"            } else {",
									"                // unpaid_overdue_more_than_today",
									"                pm.test(\"unpaid_overdue_more_than_today increase \" + total_amount, function () {",
									"                    console.log(\"old: \" + old_data.unpaid_overdue_more_than_today);",
									"                    console.log(\"expected: \" + (total_amount + old_data.unpaid_overdue_more_than_today));",
									"                    console.log(\"new: \" + unpaid_account_receivable.unpaid_overdue_more_than_today);",
									"                    pm.expect(unpaid_account_receivable.unpaid_overdue_more_than_today == total_amount + old_data.unpaid_overdue_more_than_today).to.be.true;",
									"                });",
									"",
									"                // unpaid_overdue_less_than_today",
									"                pm.test(\"nothing happen unpaid_overdue_less_than_today\", function () {",
									"                    pm.expect(unpaid_account_receivable.unpaid_overdue_less_than_today == old_data.unpaid_overdue_less_than_today).to.be.true;",
									"                });",
									"",
									"                // unpaid_overdue_in_week",
									"                pm.test(\"nothing happen unpaid_overdue_in_week\", function () {",
									"                    pm.expect(unpaid_account_receivable.unpaid_overdue_in_week == old_data.unpaid_overdue_in_week).to.be.true;",
									"                });",
									"            }",
									"",
									"            // update new data",
									"            pm.environment.set(\"C-unpaid_account_receivable\",unpaid_account_receivable);",
									"",
									"            postman.setNextRequest(\"get_report_account_receivable_customer\"); //get_report_account_receivable_customer",
									"            break;",
									"        case 5:",
									"            let old_unpaid_account_receivable = pm.environment.get(\"C-unpaid_account_receivable\");",
									"            pm.test(\"Nothing happen with unpaid_account_receivable\", function () {",
									"                console.log(\"old: \", unpaid_account_receivable);",
									"                console.log(\"new: \", old_unpaid_account_receivable);",
									"                pm.expect(JSON.stringify(unpaid_account_receivable) == JSON.stringify(old_unpaid_account_receivable)).to.be.true;",
									"            });",
									"",
									"            // nếu bị bug, có thay đổi, cần lưu lại data mới",
									"            pm.environment.set(\"C-unpaid_account_receivable\",unpaid_account_receivable);",
									"",
									"            postman.setNextRequest(\"get_report_account_receivable_customer\"); //get_report_account_receivable_customer",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get report account receivable unpaid, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/report/account-receivable-card-unpaid",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"report",
								"account-receivable-card-unpaid"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_report_account_receivable_customer",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let page = pm.environment.get(\"C-page\");",
									"",
									"if(!page){",
									"    page = 1;",
									"    pm.environment.set(\"C-page\",page);",
									"",
									"    let page_size = 20;",
									"    pm.environment.set(\"C-page_size\",page_size);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = JSON.parse(responseBody);",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let total_pages = jsData.meta.total_pages;",
									"    let page = pm.environment.get(\"C-page\");",
									"",
									"    let list_report_customer, old_list_report_customer;",
									"    switch(testcase){",
									"        case 2:",
									"            list_report_customer = pm.environment.get(\"C-list_report_customer\");",
									"            if(!list_report_customer){",
									"                list_report_customer = [];",
									"            }",
									"            break;",
									"        case 5: case 8:",
									"            old_list_report_customer = pm.environment.get(\"C-old_list_report_customer\");",
									"            if(!old_list_report_customer){",
									"                old_list_report_customer = pm.environment.get(\"C-list_report_customer\");",
									"                pm.environment.unset(\"C-list_report_customer\");",
									"                pm.environment.set(\"C-old_list_report_customer\",old_list_report_customer);",
									"            }",
									"",
									"            list_report_customer = pm.environment.get(\"C-list_report_customer\");",
									"            if(!list_report_customer){",
									"                list_report_customer = [];",
									"            }",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow\");",
									"            break;",
									"    }",
									"",
									"    for(let item in jsData.data){",
									"        list_report_customer[list_report_customer.length] = {",
									"            \"contact_id\":jsData.data[item].contact_id,",
									"            \"unpaid_total\":jsData.data[item].unpaid_total,",
									"            \"unpaid_due\":jsData.data[item].unpaid_due,",
									"            \"unpaid_overdue_less\":jsData.data[item].unpaid_overdue_less,",
									"            \"unpaid_overdue_between\":jsData.data[item].unpaid_overdue_between,",
									"            \"unpaid_overdue_over\":jsData.data[item].unpaid_overdue_over,",
									"            \"full_count\":jsData.data[item].full_count,",
									"            \"contact_name\":jsData.data[item].contact_info.contact_name,",
									"            \"contact_phone\":jsData.data[item].contact_info.contact_phone",
									"        }",
									"    }",
									"    pm.environment.set(\"C-list_report_customer\",list_report_customer);",
									"",
									"    if(page >= total_pages){",
									"        // must clear page & page_size",
									"        pm.environment.unset(\"C-page\");",
									"        pm.environment.unset(\"C-page_size\");",
									"",
									"        let contact_id = pm.environment.get(\"C-contact_id\");",
									"        let invoice_obj = pm.environment.get(\"C-invoice_obj\");",
									"        let total_amount;",
									"        let isFound = false, hasRecord = false;",
									"        switch(testcase){",
									"            case 2:",
									"                pm.test(\"Got all record! \" + list_report_customer.length, function () {",
									"                    pm.expect(list_report_customer.length > 0).to.be.true;",
									"                });",
									"",
									"                postman.setNextRequest(\"get_report_income_expense\"); // get_list_invoice, get_report_income_expense",
									"                break;",
									"            case 8:",
									"                total_amount = parseFloat(invoice_obj.exp_total_amount);",
									"                let record_obj = null;",
									"                let inList = false;",
									"                for(let i in old_list_report_customer){",
									"                    if(old_list_report_customer[i].contact_id == contact_id){",
									"                        inList = true;",
									"                        record_obj = old_list_report_customer[i];",
									"                        break;",
									"                    }",
									"                }",
									"",
									"                if(inList){",
									"                    pm.test(\"Nothing happen with total record\", function () {",
									"                        pm.expect(list_report_customer.length == old_list_report_customer.length).to.be.true;",
									"                    });",
									"                } else {",
									"                    pm.test(\"Total record increase 1\", function () {",
									"                        pm.expect(list_report_customer.length == old_list_report_customer.length + 1).to.be.true;",
									"                    });",
									"                    record_obj = {",
									"                        \"contact_id\":invoice_obj.contact_id,",
									"                        \"unpaid_total\":0,",
									"                        \"unpaid_due\":0,",
									"                        \"unpaid_overdue_less\":0,",
									"                        \"unpaid_overdue_between\":0,",
									"                        \"unpaid_overdue_over\":0,",
									"                        \"full_count\":0,",
									"                        \"contact_name\":null,",
									"                        \"contact_phone\":null",
									"                    }",
									"                }",
									"",
									"                let due_type = pm.environment.get(\"C-due_type\");",
									"                for(let i in list_report_customer){",
									"                    if(list_report_customer[i].contact_id == contact_id){",
									"                        isFound = true;",
									"                        console.log(\"Found \" + list_report_customer[i].contact_name + ' - ' + list_report_customer[i].contact_phone);",
									"                        ",
									"                        pm.test(\"unpaid_total increase \" + total_amount, function () {",
									"                            console.log(\"old: \" + record_obj.unpaid_total);",
									"                            console.log(\"expected: \" + (record_obj.unpaid_total + total_amount));",
									"                            console.log(\"new: \" + list_report_customer[i].unpaid_total);",
									"                            pm.expect(list_report_customer[i].unpaid_total.toFixed(2) == (record_obj.unpaid_total + total_amount).toFixed(2)).to.be.true;",
									"                        });",
									"",
									"                        switch(due_type){",
									"                            case \"due\": case \"due_n_7d\":",
									"                                // unpaid_due",
									"                                pm.test(\"unpaid_due increase \" + total_amount, function () {",
									"                                    console.log(\"old: \" + record_obj.unpaid_due);",
									"                                    console.log(\"new: \" + list_report_customer[i].unpaid_due);",
									"                                    pm.expect(list_report_customer[i].unpaid_due.toFixed(2) == (record_obj.unpaid_due + total_amount).toFixed(2)).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_less",
									"                                pm.test(\"nothing happen unpaid_overdue_less\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_less == record_obj.unpaid_overdue_less).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_between",
									"                                pm.test(\"nothing happen unpaid_overdue_between\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_between == record_obj.unpaid_overdue_between).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_over",
									"                                pm.test(\"nothing happen unpaid_overdue_over\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_over == record_obj.unpaid_overdue_over).to.be.true;",
									"                                });",
									"                                break;",
									"                            case \"overdue_less\":",
									"                                // unpaid_due",
									"                                pm.test(\"nothing happen unpaid_due\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_due == record_obj.unpaid_due).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_less",
									"                                pm.test(\"unpaid_overdue_less increase \" + total_amount, function () {",
									"                                    console.log(\"old: \" + record_obj.unpaid_overdue_less);",
									"                                    console.log(\"new: \" + list_report_customer[i].unpaid_overdue_less);",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_less.toFixed(2) == (total_amount + record_obj.unpaid_overdue_less).toFixed(2)).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_between",
									"                                pm.test(\"nothing happen unpaid_overdue_between\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_between == record_obj.unpaid_overdue_between).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_over",
									"                                pm.test(\"nothing happen unpaid_overdue_over\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_over == record_obj.unpaid_overdue_over).to.be.true;",
									"                                });",
									"                                break;",
									"                            case \"overdue_between\":",
									"                                // unpaid_due",
									"                                pm.test(\"nothing happen unpaid_due\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_due == record_obj.unpaid_due).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_less",
									"                                pm.test(\"nothing happen unpaid_overdue_less\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_less == record_obj.unpaid_overdue_less).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_between",
									"                                pm.test(\"unpaid_overdue_between increase \" + total_amount, function () {",
									"                                    console.log(\"old: \" + record_obj.unpaid_overdue_between);",
									"                                    console.log(\"new: \" + list_report_customer[i].unpaid_overdue_between);",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_between.toFixed(2) == (total_amount + record_obj.unpaid_overdue_between).toFixed(2)).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_over",
									"                                pm.test(\"nothing happen unpaid_overdue_over\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_over == record_obj.unpaid_overdue_over).to.be.true;",
									"                                });",
									"                                break;",
									"                            case \"overdue_over\":",
									"                                // unpaid_due",
									"                                pm.test(\"nothing happen unpaid_due\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_due == record_obj.unpaid_due).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_less",
									"                                pm.test(\"nothing happen unpaid_overdue_less\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_less == record_obj.unpaid_overdue_less).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_between",
									"                                pm.test(\"unpaid_overdue_between increase\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_between == record_obj.unpaid_overdue_between).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_over",
									"                                pm.test(\"unpaid_overdue_over increase \" + total_amount, function () {",
									"                                    console.log(\"old: \" + record_obj.unpaid_overdue_over);",
									"                                    console.log(\"new: \" + list_report_customer[i].unpaid_overdue_over);",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_over.toFixed(2) == (total_amount + record_obj.unpaid_overdue_over).toFixed(2)).to.be.true;",
									"                                });",
									"                                break;",
									"                            default:",
									"                                // unpaid_due",
									"                                pm.test(\"nothing happen unpaid_due\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_due == record_obj.unpaid_due).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_less",
									"                                pm.test(\"nothing happen unpaid_overdue_less\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_less == record_obj.unpaid_overdue_less).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_between",
									"                                pm.test(\"nothing happen unpaid_overdue_between\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_between == record_obj.unpaid_overdue_between).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_over",
									"                                pm.test(\"nothing happen unpaid_overdue_over\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_over == record_obj.unpaid_overdue_over).to.be.true;",
									"                                });",
									"                                break;",
									"                        }",
									"                        break;",
									"                    }",
									"                }",
									"",
									"                pm.test(\"Found new product\", function () {",
									"                    pm.expect(isFound).to.be.true;",
									"                });",
									"",
									"                // clear old data to update at next case",
									"                pm.environment.unset(\"C-old_list_report_customer\");",
									"",
									"                postman.setNextRequest(\"get_report_income_expense\"); // get_report_income_expense",
									"                break;",
									"            case 5:",
									"                old_list_report_customer = pm.environment.get(\"C-list_report_customer\");",
									"                pm.test(\"Nothing happen with total record: \" + list_report_customer.length, function () {",
									"                    console.log(\"old: \", old_list_report_customer);",
									"                    console.log(\"new: \", list_report_customer);",
									"                    pm.expect(list_report_customer.length == old_list_report_customer.length).to.be.true;",
									"                });",
									"",
									"                loop:",
									"                for(let j in old_list_report_customer){",
									"                    if(old_list_report_customer[j].contact_id == contact_id){",
									"                        for(let i in list_report_customer){",
									"                            if(list_report_customer[i].contact_id == contact_id){",
									"                                pm.test(\"Nothing happen with data\", function () {",
									"                                    pm.expect(JSON.stringify(list_report_customer[i]) == JSON.stringify(old_list_report_customer[j])).to.be.true;",
									"                                });",
									"                                isFound = true;",
									"                                hasRecord = true;",
									"                                break loop;",
									"                            }",
									"                        }",
									"                        break;",
									"                    }",
									"                }",
									"",
									"                if(!isFound){",
									"                    for(let i in list_report_customer){",
									"                        if(list_report_customer[i].contact_id == contact_id){",
									"                            hasRecord = true;",
									"                            break;",
									"                        }",
									"                    }",
									"                }",
									"",
									"                // console.log(\"hasRecord: \" + hasRecord);",
									"                // console.log(\"isFound: \" + isFound);",
									"                if(hasRecord){",
									"                    pm.test(\"Found data record\", function () {",
									"                        pm.expect(isFound).to.be.true;",
									"                    });",
									"                } else {",
									"                    pm.test(\"Checked data record\", function () {",
									"                        pm.expect(isFound).to.be.false;",
									"                    });",
									"                }",
									"",
									"                // nếu bị bug, có thay đổi, cần lưu lại data mới",
									"                pm.environment.set(\"C-list_report_customer\",list_report_customer);",
									"                pm.environment.unset(\"C-old_list_report_customer\");",
									"",
									"                postman.setNextRequest(\"get_report_income_expense\"); // get_report_income_expense",
									"                break;",
									"            default:",
									"                console.log(\"Missing flow, end test\");",
									"                postman.setNextRequest(null);",
									"                break;",
									"        }",
									"    } else {",
									"        page++;",
									"        pm.environment.set(\"C-page\",page);",
									"",
									"        console.log(\"view next page (\" + page + \") to get more product\");",
									"        postman.setNextRequest(\"get_report_account_receivable_customer\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get list product, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"account_key\": \"A3001\",\n    \"branch_id\": \"{{C-branch_id}}\",\n    \"business_id\": {{C-business_id}},\n    \"page\": {{C-page}},\n    \"page_size\": {{C-page_size}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/report/account-receivable-customer-unpaid",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"report",
								"account-receivable-customer-unpaid"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_report_income_expense",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"// lấy full tháng hiện tại",
									"let today = new Date();",
									"let start_current_month = new Date(today.getFullYear(), today.getMonth(), 1);",
									"let end_current_month = new Date(today.getFullYear(), today.getMonth() + 1, 1);",
									"",
									"// lấy full tháng trước",
									"let start_last_month = new Date(today.getFullYear(), today.getMonth() - 1, 1);",
									"let end_last_month = new Date(today.getFullYear(), today.getMonth(), 1);",
									"",
									"// lấy full ngày hiện tại",
									"// let firstDay = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0 ,0, 0);",
									"// let lastDay = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 23, 59 ,59, 0);",
									"",
									"// lấy n ngày đến hiện tại",
									"// let firstDayTimestamp = Math.floor(firstDay.getTime()/1000) - 2*24*60*60;",
									"// let start_day_ago = new Date(firstDayTimestamp*1000);",
									"",
									"let current_period_start = start_current_month.toISOString();",
									"let current_period_end = end_current_month.toISOString();",
									"let previous_period_start = start_last_month.toISOString();",
									"let previous_period_end = end_last_month.toISOString();",
									"",
									"/**",
									"/**",
									" * Khi tạo invoice chỉ check income thay đổi",
									" */",
									"",
									"let report_type = \"income\";",
									"let period = \"month\";",
									"// let full_check = pm.environment.get(\"C-full_check\");",
									"// if(!full_check){",
									"//     full_check = 1;",
									"//     pm.environment.set(\"C-full_check\",full_check);",
									"//     report_type = \"income\";",
									"// } else {",
									"//     report_type = \"expense\";",
									"// }",
									"// console.log(\"full_check: \" + full_check);",
									"pm.environment.set(\"C-period\",period);",
									"",
									"let payload = {",
									"    \"branch_id\": pm.environment.get(\"C-branch_id\"),",
									"    \"business_id\": parseInt(pm.environment.get(\"C-business_id\")),",
									"    \"report_type\": report_type,",
									"    \"period\": period",
									"    // \"current_period_start\": current_period_start,",
									"    // \"current_period_end\": current_period_end",
									"}",
									"",
									"console.log(\"payload: \",payload);",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));",
									"",
									"pm.environment.set(\"C-current_period_start\",current_period_start);",
									"pm.environment.set(\"C-current_period_end\",current_period_end);",
									"pm.environment.set(\"C-previous_period_start\",previous_period_start);",
									"pm.environment.set(\"C-previous_period_end\",previous_period_end);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ============================= sort by key",
									"function sortByKey(array, key, type) {",
									"    if(type == \"asc\"){",
									"        return array.sort(function(a, b) {",
									"            var x = a[key]; var y = b[key];",
									"            return ((x > y) ? -1 : ((x < y) ? 1 : 0));",
									"        });",
									"    } else {",
									"        return array.sort(function(a, b) {",
									"            var x = a[key]; var y = b[key];",
									"            return ((x < y) ? -1 : ((x > y) ? 1 : 0));",
									"        });",
									"    }",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let report_income = null;",
									"    try {",
									"        report_income = jsData.data;",
									"    } catch {",
									"        console.log(\"Can't get report cash_flow data\");",
									"    }",
									"",
									"    let old_report_income;",
									"    switch(testcase){",
									"        case 2:",
									"            pm.test(\"Got report_income\", function () {",
									"                pm.expect(report_income != null).to.be.true;",
									"            });",
									"            pm.environment.set(\"C-report_income\",report_income);",
									"            // console.log(\"report_income: \" + JSON.stringify(report_income));",
									"",
									"            postman.setNextRequest(\"report_profit_loss_period\"); // report_profit_loss_period",
									"            break;",
									"        case 8:",
									"            let ranTimeCase = pm.environment.get(\"C-ranTimeCase\");",
									"            // hiện tại report đang lấy thời gian 1 tháng hiện tại => chỉ handle với case ranTimeCase == 2;",
									"            if(ranTimeCase == 2){",
									"                let invoice_obj = pm.environment.get(\"C-invoice_obj\");",
									"                old_report_income = pm.environment.get(\"C-report_income\");",
									"                /**",
									"                 * Check rule:",
									"                 * - Xử lý data cho invoice_obj: sum amount của tất cả product cùng coa",
									"                 * - IF line_item trong invoice_obj có tồn tại trong old_report_income => thay đổi total_amount tương ứng",
									"                 * - ELSE:",
									"                 *    - IF line_item trong invoice_obj có tồn tại trong report_income => so sánh total_amount của product tương ứng với old_report_income (*)",
									"                 * Note:",
									"                 * (*) Cách so sánh: report_income[i].total_amount - invoice_obj.items[item].before_tax_amount < min(old_report_income.amount)",
									"                 */",
									"",
									"                console.log(\"invoice_obj: \", invoice_obj);",
									"                console.log(\"===================\");",
									"                console.log(\"old_report_income: \",old_report_income);",
									"                console.log(\"===================\");",
									"                console.log(\"report_income: \",report_income);",
									"",
									"                let list_item_objs = [];",
									"                for(let item in invoice_obj.items){",
									"                    if(list_item_objs.length == 0){",
									"                        list_item_objs[list_item_objs.length] = {",
									"                            \"account_id\":invoice_obj.items[item].account_id,",
									"                            \"name\":invoice_obj.items[item].name,",
									"                            \"before_tax_amount\":invoice_obj.items[item].before_tax_amount",
									"                        }",
									"                    } else {",
									"                        let is_found_item = false;",
									"                        for(let i in list_item_objs){",
									"                            if(list_item_objs[i].account_id == invoice_obj.items[item].account_id){",
									"                                is_found_item = true;",
									"                                list_item_objs[i].before_tax_amount += invoice_obj.items[item].before_tax_amount;",
									"                                break;",
									"                            }",
									"                        }",
									"",
									"                        if(!is_found_item){",
									"                            list_item_objs[list_item_objs.length] = {",
									"                                \"account_id\":invoice_obj.items[item].account_id,",
									"                                \"name\":invoice_obj.items[item].name,",
									"                                \"before_tax_amount\":invoice_obj.items[item].before_tax_amount",
									"                            }",
									"                        }",
									"                    }",
									"                }",
									"                console.log(\"===================\");",
									"                console.log(\"list_item_objs: \",list_item_objs);",
									"",
									"                let old_list_objs = [];",
									"                for(let i in old_report_income){",
									"                    for(let item in list_item_objs){",
									"                        if(old_report_income[i].coa_id == list_item_objs[item].account_id){",
									"                            console.log(\"Find product \" + list_item_objs[item].name + \" with coa \" + old_report_income[i].coa_name + \" in report!\");",
									"                            old_list_objs[old_list_objs.length] = old_report_income[i];",
									"",
									"                            old_list_objs[old_list_objs.length - 1 ].amount = list_item_objs[item].before_tax_amount;",
									"                            // ở đây ko break vì có thể có nhiều product;",
									"                        }",
									"                    }",
									"                }",
									"",
									"                let count = 0;",
									"                if(old_list_objs.length > 0){",
									"                    for(let i in old_list_objs){",
									"                        for(let j in report_income){",
									"                            if(old_list_objs[i].coa_id == report_income[j].coa_id){",
									"                                count++;",
									"                                pm.test(\"coa_name \" + old_list_objs[i].coa_name + \" increase \" + old_list_objs[i].amount, function () {",
									"                                    pm.expect(report_income[j].total_amount).to.eql(old_list_objs[i].total_amount + old_list_objs[i].amount);",
									"                                });",
									"                                break;",
									"                            }",
									"                        }",
									"                    }",
									"",
									"                    // check total",
									"                } else {",
									"                    let new_list_objs = [];",
									"                    for(let i in report_income){",
									"                        for(let item in list_item_objs){",
									"                            if(report_income[i].coa_id == list_item_objs[item].account_id){",
									"                                new_list_objs[new_list_objs.length] = report_income[i];",
									"",
									"                                new_list_objs[new_list_objs.length - 1 ].amount = list_item_objs[item].before_tax_amount;",
									"                                // ở đây ko break vì có thể có nhiều product;",
									"                            }",
									"                        }",
									"                    }",
									"",
									"                    if(new_list_objs.length > 0){",
									"                        for(let i in new_list_objs){",
									"                            for(let j in report_income){",
									"                                if(new_list_objs[i].coa_id == report_income[j].coa_id){",
									"                                    pm.test(\"coa_name \" + new_list_objs[i].coa_name + \" increase \" + new_list_objs[i].amount, function () {",
									"                                        pm.expect(old_report_income[old_report_income.length - 1].total_amount > new_list_objs[i].total_amount + new_list_objs[i].amount).to.be.true;",
									"                                    });",
									"                                    break;",
									"                                }",
									"                            }",
									"                        }",
									"                    }",
									"                }",
									"            } else {",
									"                // pm.test(\"Nothing happen with report_income\", function () {",
									"                //     pm.expect(JSON.stringify(report_income) == JSON.stringify(old_report_income)).to.be.true;",
									"                // });",
									"            }",
									"         ",
									"            // console.log(\"-------- End Testsuite 06 --------\");",
									"            postman.setNextRequest(\"report_profit_loss_period\");",
									"            break;",
									"        case 5:",
									"            old_report_income = pm.environment.get(\"C-report_income\");",
									"            pm.test(\"Nothing happen with report_income\", function () {",
									"                console.log(\"old_report_income: \",old_report_income);",
									"                console.log(\"===================\");",
									"                console.log(\"report_income: \",report_income);",
									"                pm.expect(JSON.stringify(report_income) == JSON.stringify(old_report_income)).to.be.true;",
									"            });",
									"            ",
									"            postman.setNextRequest(\"report_profit_loss_period\"); // report_profit_loss_period",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get report cash_flow, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-ledger/api/v1/report/summary-by-category",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-ledger",
								"api",
								"v1",
								"report",
								"summary-by-category"
							]
						}
					},
					"response": []
				},
				{
					"name": "report_profit_loss_period",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/**",
									" * \"report_type\": sum,income,expense",
									" * Note: report_type = sum => hiện tại bị null dates_data",
									" * - C1: call từng loại income, expense dể lấy dates_data",
									" * - C2: wait fixing from dev",
									" * => tạm thời xử lý case sum, 2 case còn lại sẽ handle sau",
									" */",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let full_check = pm.environment.get(\"C-full_check\");",
									"if(!full_check){",
									"    full_check = 1;",
									"    pm.environment.set(\"C-full_check\",full_check);",
									"    report_type = \"income\";",
									"} else {",
									"    report_type = \"expense\";",
									"}",
									"pm.environment.set(\"C-report_type\",report_type);",
									"console.log(\"full_check: \" + full_check);",
									"console.log(\"report_type: \" + report_type);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ============================= getFirstDayOfMonth",
									"function getFirstDayOfMonth(date_timestamp){",
									"  let setDate = new Date(date_timestamp*1000);",
									"  let getDate = new Date(setDate.getFullYear(), setDate.getMonth(), 1);",
									"  return getDate.toISOString();",
									"}",
									"",
									"// ============================= getLastDayOfMonth",
									"function getLastDayOfMonth(date_timestamp){",
									"  let setDate = new Date(date_timestamp*1000);",
									"  let firstDayOfNextMonth = new Date(setDate.getFullYear(), setDate.getMonth() + 1, 1);",
									"  let lastDayOfMonth = new Date(firstDayOfNextMonth - 1);",
									"  return lastDayOfMonth.toISOString();",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let full_check = pm.environment.get(\"C-full_check\");",
									"    let profit_period = null, loss_period = null;",
									"    try {",
									"        if(full_check == 1){",
									"            profit_period = jsData.data;",
									"        } else {",
									"            loss_period = jsData.data;",
									"        }",
									"        /**",
									"         * period: week, month, year",
									"         * sum_card_data",
									"         * dates_data",
									"         */",
									"    } catch {",
									"        console.log(\"Can't get report cash_flow data\");",
									"    }",
									"",
									"    let invoice_obj, invoice_date;",
									"    switch(testcase){",
									"        case 2:",
									"            if(full_check == 1){",
									"                pm.test(\"Got profit_period \", function () {",
									"                    pm.environment.set(\"C-profit_period\",profit_period);",
									"                    pm.expect(profit_period != null).to.be.true;",
									"                });",
									"                pm.environment.set(\"C-profit_period\",profit_period);",
									"                // console.log(\"profit_period: \", profit_period);",
									"",
									"                full_check++;",
									"                pm.environment.set(\"C-full_check\",full_check);",
									"                postman.setNextRequest(\"report_profit_loss_period\");",
									"            } else {",
									"                pm.test(\"Got loss_period \", function () {",
									"                    pm.environment.set(\"C-loss_period\",loss_period);",
									"                    pm.expect(loss_period != null).to.be.true;",
									"                });",
									"                pm.environment.set(\"C-loss_period\",loss_period);",
									"                // console.log(\"loss_period: \", loss_period);",
									"",
									"                pm.environment.unset(\"C-full_check\");",
									"                postman.setNextRequest(\"get_list_invoice\"); // get_list_invoice",
									"            }",
									"            break;",
									"        case 5:",
									"            invoice_obj = pm.environment.get(\"C-invoice_obj\");",
									"            invoice_date = invoice_obj.value_at.substring(0,10);",
									"            // Invoice sẽ tăng profit (income), Bill sẽ tăng loss (chi phí)",
									"            ",
									"            if(full_check == 1){",
									"                let old_profit_period = pm.environment.get(\"C-profit_period\");",
									"                // console.log(\"debug old_loss_period: \", old_profit_period);",
									"                // console.log(\"debug loss_period: \", profit_period);",
									"",
									"                pm.test(\"Nothing happen!!!\", function () {",
									"                    pm.expect(JSON.stringify(profit_period) == JSON.stringify(old_profit_period)).to.be.true;",
									"                });",
									"",
									"                full_check++;",
									"                pm.environment.set(\"C-full_check\",full_check);",
									"                postman.setNextRequest(\"report_profit_loss_period\");",
									"            } else {",
									"                let old_loss_period = pm.environment.get(\"C-loss_period\");",
									"                // console.log(\"debug old_loss_period: \", old_loss_period);",
									"                // console.log(\"debug loss_period: \", loss_period);",
									"                ",
									"                pm.test(\"Nothing happen!!!\", function () {",
									"                    pm.expect(JSON.stringify(loss_period) == JSON.stringify(old_loss_period)).to.be.true;",
									"                });",
									"",
									"                pm.environment.unset(\"C-full_check\");",
									"",
									"                testcase++;",
									"                pm.environment.set(\"C-testcase\",testcase);",
									"                postman.setNextRequest(\"calculate_invoice\"); // calculate_invoice",
									"            }",
									"            break;",
									"        case 8:",
									"            invoice_obj = pm.environment.get(\"C-invoice_obj\");",
									"            invoice_date = invoice_obj.value_at;",
									"            console.log(\"invoice_date: \" + invoice_date);",
									"",
									"            if(full_check == 1){",
									"                let old_profit_period = pm.environment.get(\"C-profit_period\");",
									"                // console.log(\"debug old_loss_period: \", old_profit_period);",
									"                // console.log(\"debug loss_period: \", profit_period);",
									"",
									"                // do thời gian lọc là tháng hiện tại => chỉ thay đổi khi value_at nằm trong tháng hiện tại",
									"                let today = new Date();",
									"                let today_tmp = Math.floor(today.getTime()/1000);",
									"                let firstDayOfThisMonth = getFirstDayOfMonth(today_tmp);",
									"                let lastDayOfThisMonth = getLastDayOfMonth(today_tmp);",
									"                if(invoice_date < firstDayOfThisMonth || invoice_date > lastDayOfThisMonth){",
									"                    // nothing happen",
									"                    pm.test(\"Nothing happen!!!\", function () {",
									"                        pm.expect(JSON.stringify(profit_period) == JSON.stringify(old_profit_period)).to.be.true;",
									"                    });",
									"                } else {",
									"                    invoice_date = invoice_date.substring(0,10);",
									"",
									"                    let income_product = 0, income_discount = 0;",
									"                    for(let i in invoice_obj.items){",
									"                        income_product += invoice_obj.items[i].before_tax_amount;",
									"                        income_discount += invoice_obj.items[i].discount_amount;",
									"                    }",
									"                    let exp_change = income_product - income_discount;",
									"                    // có thay đổi => total_income increase",
									"                    pm.test(\"total_income increase \" + exp_change, function () {",
									"                        pm.expect(profit_period.sum_card_data.total_income == old_profit_period.sum_card_data.total_income + exp_change).to.be.true;",
									"                    });",
									"                    // thay đổi ngày tương ứng",
									"                    let old_date = null, act_date = null;",
									"                    for(let i in profit_period.dates_data){",
									"                        let day_i = profit_period.dates_data[i].date.substring(0,10);",
									"                        if(day_i == invoice_date){",
									"                            act_date = profit_period.dates_data[i];",
									"                            break;",
									"                        }",
									"                    }",
									"",
									"                    for(let i in old_profit_period.dates_data){",
									"                        let day_i = old_profit_period.dates_data[i].date.substring(0,10);",
									"                        if(day_i == invoice_date){",
									"                            old_date = old_profit_period.dates_data[i];",
									"                            break;",
									"                        }",
									"                    }",
									"",
									"                    if(old_date != null && act_date != null){",
									"                        console.log(\"act_date: \",act_date);",
									"                        console.log(\"old_date: \",old_date);",
									"                        pm.test(\"income at \" + invoice_date + \" increase \" + exp_change, function () {",
									"                            pm.expect(act_date.income == old_date.income + exp_change).to.be.true;",
									"                        });",
									"                    }",
									"                }",
									"",
									"                full_check++;",
									"                pm.environment.set(\"C-full_check\",full_check);",
									"                postman.setNextRequest(\"report_profit_loss_period\");",
									"            } else {",
									"                let old_loss_period = pm.environment.get(\"C-loss_period\");",
									"                // console.log(\"debug old_loss_period: \", old_loss_period);",
									"                // console.log(\"debug loss_period: \", loss_period);",
									"                ",
									"                pm.test(\"Nothing happen!!!\", function () {",
									"                    pm.expect(JSON.stringify(loss_period) == JSON.stringify(old_loss_period)).to.be.true;",
									"                });",
									"",
									"                pm.environment.unset(\"C-full_check\");",
									"",
									"                console.log(\"-------- End Testsuite 06 --------\");",
									"                postman.setNextRequest(null);",
									"            }",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get report cash_flow, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-location-timezone",
								"value": "UTC+07:00"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"branch_id\": \"{{C-branch_id}}\",\n    \"business_id\": {{C-business_id}},\n    \"period\": \"{{C-period}}\",\n    \"report_type\": \"{{C-report_type}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-ledger/api/v1/report/profit-loss-period",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-ledger",
								"api",
								"v1",
								"report",
								"profit-loss-period"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"let configs = {",
					"    \"is_use_email\":true,",
					"    \"limit_page\":10,",
					"    \"timeout\":12000, // miliseconds => timeout to call API",
					"    \"is_buyer_gen\":false,",
					"    \"is_use_the_same_product_price\":false,",
					"    \"sku_type\":\"batch_product\", // physical, imei_product, batch_product, book_product, mix",
					"    // \"track_inventory\":true, // true: có tồn kho",
					"    \"create_order_status\":\"completed\", // processing => đang xử lý (tương đương khách đặt), completed => hoàn thành (trừ kho) (phải kèm payment_method)",
					"    \"total_sku\":3,",
					"    \"check_out_of_stock\":false, // chưa handle",
					"    \"none_uuid\":\"00000000-0000-0000-0000-000000000000\", // 8-4-4-4-12",
					"    \"is_the_same_branch\":true, // true: branch tạo po và branch check là giống nhau, false: khác nhau => ",
					"    \"use_payment_method\":\"cash\", // bank_transfer, viet_qr_pro_mb, va_galaxy, cash",
					"    \"paid_type\":\"fully_paid\" // chỉ có khi use_payment_method == cash (fully_paid, partial_paid, extra_paid)",
					"}",
					"/**",
					" * Thanh toán tiền mặt: gửi kèm payment_request",
					" * Thanh toán mb: gen QR và đợi 10s",
					" * Thanh toán shinhan/GP: luồng hook cũ như invoice",
					" * Status define: https://sobanhang.larksuite.com/wiki/UfF4wZ3BkiSH1ckmQRBuWPwMsuh",
					" * completed => bán tại chổ, ko có ship",
					" * processing => tạo đơn, chờ ship => luồng shipment => completed",
					" */",
					"",
					"pm.environment.set(\"C-configs\",configs);",
					"// console.log(\"configs: \",configs);"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"// ====================================== parser cURL",
					"function parseCURL(request_api){",
					"    let curl = \"\";",
					"    switch(request_api.method){",
					"        case \"PUT\":",
					"            curl = \"curl --location --request PUT \";",
					"            break;",
					"        case \"PATCH\":",
					"            curl = \"curl --location --request PATCH \";",
					"            break;",
					"        case \"DELETE\":",
					"            curl = \"curl --location --request DELETE \";",
					"            break;",
					"        default:",
					"            curl = \"curl --location \";",
					"            break;",
					"    }",
					"    curl += \"'\" + request_api.url.protocol + \"://\"",
					"    // host",
					"    for(let i in request_api.url.host){",
					"        if(i >= request_api.url.host.length - 1){",
					"            curl += request_api.url.host[i] + \"/\";",
					"        } else {",
					"            curl += request_api.url.host[i] + \".\";",
					"        }",
					"    }",
					"    // path",
					"    for(let i in request_api.url.path){",
					"        if(i >= request_api.url.path.length - 1){",
					"            curl += request_api.url.path[i];",
					"        } else {",
					"            curl += request_api.url.path[i] + \"/\";",
					"        }",
					"    }",
					"    // query (if have)",
					"    if(\"query\" in request_api.url){",
					"        if(request_api.url.length > 0){",
					"            curl += \"? \";",
					"            for(let i in request_api.url.query){",
					"                if(i >= request_api.url.query.length - 1){",
					"                    curl += request_api.url.query[i].key + \"=\" + request_api.url.query[i].value + \"' \";",
					"                } else {",
					"                    curl += request_api.url.query[i].key + \"=\" + request_api.url.query[i].value + \"&\";",
					"                }",
					"            }",
					"        } else {",
					"            curl += \"' \";",
					"        }",
					"    } else {",
					"        curl += \"' \";",
					"    }",
					"    // header",
					"    for(let i in request_api.header){",
					"        if(i >= request_api.header.length - 1){",
					"            curl += \"--header '\" + request_api.header[i].key + \": \" + request_api.header[i].value + \"'\";",
					"        } else {",
					"            curl += \"--header '\" + request_api.header[i].key + \": \" + request_api.header[i].value + \"' \";",
					"        }",
					"    }",
					"    switch(request_api.method){",
					"        case \"POST\":",
					"            curl += \" --data '\" + request_api.body.raw + \"'\"",
					"            break;",
					"        case \"PUT\": case \"PATCH\":",
					"            curl += \" --data-raw '\" + request_api.body.raw + \"'\"",
					"            break;",
					"        default:",
					"            break;",
					"    }",
					"    console.log(curl);",
					"    return curl;",
					"}",
					"const request_api = pm.request.toJSON();",
					"parseCURL(request_api);"
				]
			}
		}
	]
}