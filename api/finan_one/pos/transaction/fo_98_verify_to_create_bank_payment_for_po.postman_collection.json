{
	"info": {
		"_postman_id": "2a5298c9-4531-491d-b9f9-faa371f31126",
		"name": "fo_98_verify_to_create_bank_payment_for_po",
		"description": "Testsuite: Verify to create external_transfer for bill via shinhan va\n\nTestcase:\n\n1. Login with owner account\n    \n2. Get data\n    \n    1. account coa / get list account\n        \n    2. account bank / get list bank account\n        \n    3. account bank / get list bank transaction => get total\n        \n    4. po / get list po => get po had status un_paid/partital_paid\n        \n    5. \\[Review\\] bill / get bill detail => update more data for bill at 2.c.\n        \n    6. Posting / Get list posting => get total posting\n        \n    7. payment / get list payment => get total (get va_bank only)\n        \n    8. \\[PENDING\\] home-report / cash flow => get data\n        \n    9. \\[PENDING\\] home-report / account receivable unpaid => get data (only account_receivable)\n        \n    10. \\[PENDING\\] home-report / account receivable customer => get data (only account_receivable)\n        \n    11. \\[PENDING\\] home-report / account life time => get data\n        \n    12. \\[PENDING\\] home-report / cash-flow period => get data\n        \n    13. \\[PENDING\\] home-report / profit loss period => get data (income & expense)\n        \n    14. Transaction / Get list transaction => get total transaction\n        \n3. Create transaction\n    \n    1. payment / create cash-out request\n        \n    2. (\\*) hook / pay for this request\n        \n4. Check data\n    \n    1. Transaction / Get list transaction => have new record (\\*2)\n        \n    2. Transaction / Get transaction detail => data correctly\n        \n    3. \\[New\\] payment / get list payment => increase 1\n        \n    4. \\[New\\] payment / get payment detail => data correctly\n        \n    5. account bank / Get list account => check respective banlance_amount\n        \n    6. account bank / get list bank transaction => check new bank tranasaction\n        \n    7. po / Get list po => check po status at 2.c\n        \n    8. po / Get po detail => update data\n        \n    9. Posting / get list posting => have 2 new posting (account receivable & account debit)\n        \n\nNote:",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "282640"
	},
	"item": [
		{
			"name": "authen",
			"item": [
				{
					"name": "login",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// ============================= random characters",
									"function randomChars(length) {",
									"    var result           = '';",
									"    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
									"    var charactersLength = characters.length;",
									"    for ( var i = 0; i < length; i++ ) {",
									"      result += characters.charAt(Math.floor(Math.random() * ",
									" charactersLength));",
									"   }",
									"   return result;",
									"}",
									"",
									"let testcase = 1;",
									"console.log(\"-------- Start Testsuite 98 --------\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let platform = [\"desktop-web\",\"mobile-web\",\"mobile-app\"];",
									"let configs = pm.environment.get(\"C-configs\");",
									"let payload;",
									"if(configs.is_use_email){",
									"    payload = {",
									"        \"app_version\": \"1.0.0\",",
									"        \"device_info\": {",
									"            \"id\": randomChars(7) + \"-\" + randomChars(4) + \"-\" + randomChars(4) + \"-\" + randomChars(4) + \"-\" + randomChars(12),",
									"            \"name\": \"IP name\",",
									"            \"os\": \"iphone\"",
									"        },",
									"        \"email\": pm.environment.get(\"SER-email\"), // pm.environment.get(\"SER-email\")",
									"        \"encrypted_password\": pm.environment.get(\"SER-password\"),",
									"        \"phone_number\": \"\",",
									"        \"platform_key\": platform[0]",
									"    }",
									"} else {",
									"    payload = {",
									"        \"app_version\": \"1.0.0\",",
									"        \"device_info\": {",
									"            \"id\": randomChars(7) + \"-\" + randomChars(4) + \"-\" + randomChars(4) + \"-\" + randomChars(4) + \"-\" + randomChars(12),",
									"            \"name\": \"IP name\",",
									"            \"os\": \"iphone\"",
									"        },",
									"        \"email\":\"\", // pm.environment.get(\"SER-email\")",
									"        \"encrypted_password\": pm.environment.get(\"SER-password\"),",
									"        \"phone_number\": pm.environment.get(\"SER-phone_number\"),",
									"        \"platform_key\": platform[0]",
									"    }",
									"}",
									"",
									"console.log(\"payload: \",payload);",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));",
									"pm.environment.set(\"C-testcase\",testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    pm.test(\"System code is 102000\", function () {",
									"        pm.expect(jsData.code).to.eql(102000);",
									"    });",
									"",
									"    if(jsData.code == 102000){",
									"        let userToken = null;",
									"        try {",
									"            userToken = jsData.data.access_token;",
									"            pm.environment.set(\"C-userToken\",userToken);",
									"        } catch {",
									"            console.log(\"Can't get userToken\");",
									"        }",
									"",
									"        pm.test(\"Got userToken\", function () {",
									"            pm.expect(userToken != null).to.be.true;",
									"        });",
									"",
									"        let userInfo = jsData.data.user_info;",
									"",
									"        // show log",
									"        console.log(\"userInfo:\",JSON.stringify(userInfo));",
									"        pm.environment.set(\"C-userInfo\",userInfo);",
									"",
									"        postman.setNextRequest(\"verify_token_to_get_business\");",
									"    } else {",
									"        console.log(\"Can't get Token, end test\",jsData);",
									"        postman.setNextRequest(null);",
									"    }",
									"} else {",
									"    console.log(\"Can't login new account, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-user/api/v1/auth/login",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-user",
								"api",
								"v1",
								"auth",
								"login"
							]
						},
						"description": "Login User"
					},
					"response": []
				},
				{
					"name": "verify_token_to_get_business",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// verify token to get business",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = JSON.parse(responseBody);",
									"if(pm.response.code == 200 && jsData.code == 102000){",
									"    const jsData = pm.response.json();",
									"    pm.environment.set(\"C-user_id\",jsData.data.user_id);",
									"",
									"    let business_id = jsData.data.headers[\"x-business-id\"];",
									"    console.log(\"business_id: \" + business_id);",
									"    pm.environment.set(\"C-business_id\",business_id);",
									"",
									"    postman.setNextRequest(\"get_current_business\");",
									"} else {",
									"    console.log(\"Can't check token to get business_id, end test\");",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"token\": \"{{C-userToken}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-user/api/v1/auth/verify-token",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-user",
								"api",
								"v1",
								"auth",
								"verify-token"
							]
						},
						"description": "Login User"
					},
					"response": []
				},
				{
					"name": "get_current_business",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ============================= random number between min and max",
									"function getRandomInt(min, max) {",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    // console.log(\"Current business info: \", jsData.data);",
									"    let branch_id = null;",
									"    try {",
									"        branch_id = jsData.data.current_business.list_branch[0].id;",
									"        pm.environment.set(\"C-branch_id\",branch_id);",
									"    } catch {",
									"        console.log(\"Can't get branch id\");",
									"    }",
									"",
									"    pm.test(\"Got branch id \" + branch_id, function () {",
									"        pm.expect(branch_id != null).to.be.true;",
									"    });",
									"",
									"    let payment_method = null;",
									"    let list_payment_method = [];",
									"    let configs = pm.environment.get(\"C-configs\");",
									"    let test_payment_method = configs.test_payment_method;",
									"    try {",
									"        switch(test_payment_method){",
									"            case \"viet_qr_pro_mb\":",
									"                for(let i in jsData.data.list_payment_method){",
									"                    if(jsData.data.list_payment_method[i].key == test_payment_method){ ",
									"                        // payment_method = jsData.data.list_payment_method[i];",
									"                        // break;",
									"                        list_payment_method[list_payment_method.length] = jsData.data.list_payment_method[i];",
									"                    }",
									"                }",
									"                payment_method = list_payment_method[getRandomInt(0,list_payment_method.length -1)];",
									"                break;",
									"            case \"va_galaxy\":",
									"                for(let i in jsData.data.list_payment_method){",
									"                    if(jsData.data.list_payment_method[i].bank_account.account_number.includes(\"SBB\")){ ",
									"                        list_payment_method[list_payment_method.length] = jsData.data.list_payment_method[i];",
									"                    }",
									"                }",
									"                payment_method = list_payment_method[getRandomInt(0,list_payment_method.length -1)];",
									"                break;",
									"            case \"bank_transfer\":",
									"                for(let i in jsData.data.list_payment_method){",
									"                    if(jsData.data.list_payment_method[i].key == test_payment_method){ ",
									"                        list_payment_method[list_payment_method.length] = jsData.data.list_payment_method[i];",
									"                    }",
									"                }",
									"                payment_method = list_payment_method[getRandomInt(0,list_payment_method.length -1)];",
									"                break;",
									"            default:",
									"                console.log(\"Missing flow\");",
									"                break;",
									"        }",
									"    } catch {",
									"        console.log(\"Can't get branch id\");",
									"    }",
									"    pm.environment.set(\"C-payment_method\",payment_method);",
									"",
									"    pm.test(\"Got branch id \" + branch_id, function () {",
									"        pm.expect(branch_id != null).to.be.true;",
									"    });",
									"    ",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    testcase++;",
									"    pm.environment.set(\"C-testcase\",testcase);",
									"    postman.setNextRequest(\"get_list_internal_account\");",
									"} else {",
									"    console.log(\"Can't get business detail, end test\", jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-business/api/v1/business/get-current",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-business",
								"api",
								"v1",
								"business",
								"get-current"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "account coa",
			"item": [
				{
					"name": "get_list_internal_account",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let coa = [];",
									"    try {",
									"        for(let i in jsData.data){",
									"            let sub_group_i = [];",
									"            for(let j in jsData.data[i].sub_group){",
									"                let accounts_j = [];",
									"                for(let k in jsData.data[i].sub_group[j].accounts){",
									"                    accounts_j[accounts_j.length] = {",
									"                        \"account_name\":jsData.data[i].sub_group[j].accounts[k].account_name,",
									"                        \"account_id\":jsData.data[i].sub_group[j].accounts[k].id,",
									"                        \"business_id\":jsData.data[i].sub_group[j].accounts[k].business_id,",
									"                        \"account_source\":jsData.data[i].sub_group[j].accounts[k].account_source,",
									"                        \"total_balance_amount\":jsData.data[i].sub_group[j].accounts[k].total_balance_amount,",
									"                        \"account_type\":jsData.data[i].sub_group[j].accounts[k].account_type,",
									"                        \"account_number\":jsData.data[i].sub_group[j].accounts[k].account_number,",
									"                        \"coa_type\":jsData.data[i].sub_group[j].accounts[k].coa_type,",
									"                        \"status\":jsData.data[i].sub_group[j].accounts[k].status,",
									"                        \"parent_account_id\":jsData.data[i].sub_group[j].accounts[k].parent_account_id,",
									"                        \"description\":jsData.data[i].sub_group[j].accounts[k].description,",
									"                        \"open_amount\":jsData.data[i].sub_group[j].accounts[k].open_amount,",
									"                        \"currency\":jsData.data[i].sub_group[j].accounts[k].currency",
									"                    }",
									"",
									"                    if(jsData.data[i].sub_group[j].accounts[k].account_key == \"A3001\"){",
									"                        pm.environment.set(\"C-account_receivable\",jsData.data[i].sub_group[j].accounts[k]);",
									"                    } else if(jsData.data[i].sub_group[j].accounts[k].account_key == \"D1004\"){",
									"                        pm.environment.set(\"C-account_fee\",jsData.data[i].sub_group[j].accounts[k]);",
									"                    } else if(jsData.data[i].sub_group[j].accounts[k].account_key == \"B1001\"){",
									"                        pm.environment.set(\"C-account_payable\",jsData.data[i].sub_group[j].accounts[k]);",
									"                    }",
									"                }",
									"",
									"                sub_group_i[sub_group_i.length] = {",
									"                    \"sub_group_name\":jsData.data[i].sub_group[j].name,",
									"                    \"sub_group_id\":jsData.data[i].sub_group[j].id,",
									"                    \"sub_group_value\":jsData.data[i].sub_group[j].value,",
									"                    \"sub_group_description\":jsData.data[i].sub_group[j].description,",
									"                    \"accounts\":accounts_j",
									"                }",
									"            }",
									"",
									"            coa[coa.length] = {",
									"                \"group_name\":jsData.data[i].name,",
									"                \"value\":jsData.data[i].value,",
									"                \"index\":jsData.data[i].index,",
									"                \"sub_group\":sub_group_i",
									"            }",
									"        }",
									"    } catch {",
									"        console.log(\"can't get all account in coa\");",
									"    }",
									"",
									"    pm.test(\"Got coa of this user's business\", function () {",
									"        pm.expect(coa.length > 0).to.be.true;",
									"    });",
									"",
									"    if(coa.length > 0){",
									"        // console.log(\"coa: \", coa);",
									"        pm.environment.set(\"C-coa\",coa);",
									"        let list_debit_account = [];",
									"        let list_credit_account = [];",
									"        /**",
									"         * lấy những account_id và phân loại thành debit/credit",
									"         * - credit: tài khoản (only cash & bank)",
									"         * - debit: phân loại (all)",
									"         */ ",
									"        for(let i in coa){",
									"            for(let j in coa[i].sub_group){",
									"                for(let k in coa[i].sub_group[j].accounts){",
									"                    // if(coa[i].group_name == \"income\" || coa[i].group_name == \"expense\"){ // mở điều kiện này khi cần debug tạo tnx có report cassh-flow",
									"                        list_debit_account[list_debit_account.length] = coa[i].sub_group[j].accounts[k];",
									"                    // }",
									"                    if(coa[i].sub_group[j].sub_group_value == \"cash_and_bank\"){ ",
									"                        // console.log(\"debug: \", coa[i].sub_group[j].accounts[k]);",
									"                        if(coa[i].sub_group[j].accounts[k].account_name.includes(\"[API]\")){ // do 1 số name bị null (dev chưa validation dẫn đến report sẽ không biết của account nào - report ko trả về id)",
									"                            list_credit_account[list_credit_account.length] = coa[i].sub_group[j].accounts[k];",
									"                        }",
									"                    }",
									"                }",
									"            }",
									"        }",
									"",
									"        // console.log(\"list_debit_account: \", list_debit_account);",
									"        // console.log(\"list_credit_account: \", list_credit_account);",
									"",
									"        pm.environment.set(\"C-list_debit_account\",list_debit_account);",
									"        pm.environment.set(\"C-list_credit_account\",list_credit_account);",
									"        ",
									"        postman.setNextRequest(\"get_list_payment_account\"); // get_list_payment_account",
									"    } else {",
									"        console.log(\"Can't get list internal account, end test \");",
									"        postman.setNextRequest(null);",
									"    }",
									"} else {",
									"    console.log(\"Can't get list internal account, end test \", jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{finone_url}}​/fo-ledger/api/v1/account/get-list-setting?business_id={{C-business_id}}&coa_type=",
							"host": [
								"{{finone_url}}​"
							],
							"path": [
								"fo-ledger",
								"api",
								"v1",
								"account",
								"get-list-setting"
							],
							"query": [
								{
									"key": "business_id",
									"value": "{{C-business_id}}"
								},
								{
									"key": "coa_type",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get_internal_account_detail",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/**",
									" * Only check credit_account",
									" */",
									"",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let list_internal_account = pm.environment.get(\"C-list_internal_account\");",
									"let pos = pm.environment.get(\"C-pos\");",
									"if(!pos){",
									"    pos = 0;",
									"    pm.environment.set(\"C-pos\",pos);",
									"}",
									"",
									"let internal_account_id = list_internal_account[pos].account_id;",
									"console.log(\"view detail account: \" + account_id);",
									"",
									"pm.environment.set(\"C-internal_account_id\",internal_account_id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    const jsData = pm.response.json();",
									"    // let testcase = pm.environment.get(\"C-testcase\");",
									"    console.log(\"Debug: \" + JSON.stringify(jsData));",
									"",
									"    let list_internal_account = pm.environment.get(\"C-list_internal_account\");",
									"    let pos = pm.environment.get(\"C-pos\");",
									"",
									"    if(pos >= list_internal_account.length - 1){",
									"        pm.environment.unset(\"C-pos\");",
									"",
									"        postman.setNextRequest(\"get_list_tax\"); // get_list_tax",
									"    } else {",
									"        pos++;",
									"        pm.environment.set(\"C-pos\",pos);",
									"",
									"        postman.setNextRequest(\"get_internal_account_detail\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get internal account detail, end test\");",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{finone_url}}​​/fo-ledger/api/v1/account/get-one/{{C-internal_account_id}}",
							"host": [
								"{{finone_url}}​​"
							],
							"path": [
								"fo-ledger",
								"api",
								"v1",
								"account",
								"get-one",
								"{{C-internal_account_id}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.request.headers.add({",
							" key: \"authorization\",",
							" value: \"Bearer \" + pm.environment.get(\"C-userToken\")",
							"});",
							"",
							"pm.request.headers.add({",
							" key: \"Content-Type\",",
							" value: \"application/json\"",
							"});"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "account cash_n_bank",
			"item": [
				{
					"name": "get_list_payment_account",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"",
									"    let list_bank_account = [];",
									"    let payment_method = pm.environment.get(\"C-payment_method\");",
									"    for(let j in jsData.data[0].accounts){",
									"        if(jsData.data[0].accounts[j].external_account_id == payment_method.bank_account.id){",
									"            list_bank_account[list_bank_account.length] = {",
									"                \"account_id\":jsData.data[0].accounts[j].id,",
									"                \"account_name\":jsData.data[0].accounts[j].account_name,",
									"                \"account_number\":jsData.data[0].accounts[j].account_number,",
									"                \"account_name_custom\":jsData.data[0].accounts[j].account_name_custom,",
									"                \"account_key\":jsData.data[0].accounts[j].account_key,",
									"                \"account_type\":jsData.data[0].accounts[j].account_type,",
									"                \"status\":jsData.data[0].accounts[j].status,",
									"                \"external_account_id\":jsData.data[0].accounts[j].external_account_id,",
									"                \"provider_id\":jsData.data[0].accounts[j].provider_id,",
									"                \"total_balance_amount\":jsData.data[0].accounts[j].total_balance_amount",
									"            }",
									"        }",
									"    }",
									"",
									"    switch(testcase){",
									"        case 2:",
									"            pm.test(\"Got list bank account\", function () {",
									"                pm.expect(list_bank_account.length > 0).to.be.true;",
									"            });",
									"",
									"            pm.environment.set(\"C-list_bank_account\",list_bank_account);",
									"",
									"            postman.setNextRequest(\"get_list_bank_transaction\"); // get_list_bank_transaction",
									"            break;",
									"        case 4:",
									"            let old_list_bank_account = pm.environment.get(\"C-list_bank_account\");",
									"            let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"            let configs = pm.environment.get(\"C-configs\");",
									"",
									"            let expected_balance_amout, expected_account_name;",
									"            for(let j in old_list_bank_account){",
									"                if(tnx_obj.account_debit == old_list_bank_account[j].account_id){",
									"                    expected_balance_amout = old_list_bank_account[j].total_balance_amount - tnx_obj.amount;",
									"                    expected_account_name = old_list_bank_account[j].account_name;",
									"                    break;",
									"                }",
									"            }",
									"",
									"            let actual_balance_amout;",
									"            for(let j in jsData.data[0].accounts){",
									"                if(tnx_obj.account_debit == jsData.data[0].accounts[j].id){",
									"                    actual_balance_amout = jsData.data[0].accounts[j].total_balance_amount;",
									"                    break;",
									"                }",
									"            }",
									"",
									"            pm.test(\"total_balance_amount of \" + expected_account_name + \" decrease \" + tnx_obj.amount, function () {",
									"                console.log(\"act: \" + actual_balance_amout);",
									"                console.log(\"exp: \" + expected_balance_amout);",
									"                pm.expect(actual_balance_amout == expected_balance_amout).to.be.true;",
									"            });",
									"",
									"            postman.setNextRequest(\"get_list_po\"); // get_list_po",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get list payment account, end test\", jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-ledger/api/v1/account/get-list-sub?sub_account_key=A1&account_type=va_bank",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-ledger",
								"api",
								"v1",
								"account",
								"get-list-sub"
							],
							"query": [
								{
									"key": "sub_account_key",
									"value": "A1"
								},
								{
									"key": "account_type",
									"value": "va_bank",
									"description": "manual, link_bank,va_bank,galaxy_pay"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get_list_bank_transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let total_bank_txn = null;",
									"    try {",
									"        total_bank_txn = jsData.meta.total_rows;",
									"    } catch {",
									"        console.log(\"Missing meta data\");",
									"    }",
									"",
									"    switch(testcase){",
									"        case 2:",
									"        ",
									"            pm.test(\"Got total_bank_txn \" + total_bank_txn, function () {",
									"                pm.expect(total_bank_txn != null).to.be.true;",
									"            });",
									"            pm.environment.set(\"C-total_bank_txn\",total_bank_txn);",
									"",
									"            postman.setNextRequest(\"get_list_po\"); // get_list_po",
									"            break;",
									"        case 4:",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get list bank transaction, end test\");",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-banking/api/v1/payment-request/get-list?page=1&page_size=20&sort=&search=&from_time=&to_time=&payment_method=&status=",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-banking",
								"api",
								"v1",
								"payment-request",
								"get-list"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "page_size",
									"value": "20"
								},
								{
									"key": "sort",
									"value": ""
								},
								{
									"key": "search",
									"value": ""
								},
								{
									"key": "from_time",
									"value": ""
								},
								{
									"key": "to_time",
									"value": ""
								},
								{
									"key": "payment_method",
									"value": "",
									"description": "ewallet_zalopay,credit_card,ewallet_momo"
								},
								{
									"key": "status",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "contact",
			"item": [
				{
					"name": "get_list_contact",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// const clRandom = pm.require('@chaule2906/cl-random');",
									"// ============================= random number between min and max",
									"function getRandomInt(min, max) {",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = pm.response.json();",
									"if(pm.response.code == 200 && jsData.code == 102000){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let configs = pm.environment.get(\"C-configs\");",
									"    let total_pages = jsData.meta.total_pages;",
									"    let page = pm.environment.get(\"C-page\");",
									"",
									"    let list_contact = pm.environment.get(\"C-list_contact\");",
									"    if(!list_contact){",
									"        list_contact = [];",
									"    }",
									"",
									"    for(let item in jsData.data){",
									"        if(jsData.data[item].contact_name.includes(\"[API]\")){",
									"            list_contact[list_contact.length] = {",
									"                \"contact_id\":jsData.data[item].id,",
									"                \"name\":jsData.data[item].contact_name,",
									"                \"phone_number\":jsData.data[item].phone_number,",
									"                \"email\":jsData.data[item].email,",
									"                \"po_config\":jsData.data[item].po_config,",
									"                \"tax_code\":jsData.data[item].tax_code,",
									"                \"payment_methods\":jsData.data[item].payment_methods,",
									"                \"total_payable\":jsData.data[item].total_payable,",
									"                \"total_receivable\":jsData.data[item].total_receivable",
									"            }",
									"        }",
									"    }",
									"    pm.environment.set(\"C-list_contact\",list_contact);",
									"",
									"    if(page >= total_pages){",
									"        // must clear page & page_size",
									"        pm.environment.unset(\"C-page\");",
									"        pm.environment.unset(\"C-page_size\");",
									"",
									"        let contact_obj, old_contact_obj;",
									"        let po_obj = pm.environment.get(\"C-po_obj\"); ",
									"        switch(testcase){",
									"            case 2:",
									"                pm.test(\"Got all contact! \" + list_contact.length, function () {",
									"                    pm.environment.set(\"C-list_contact\",list_contact);",
									"                    pm.expect(list_contact.length > 0).to.be.true;",
									"                });",
									"",
									"                // let contact_obj = list_contact[clRandom.getRandomInt(0,list_contact.length - 1)];",
									"                contact_obj = list_contact[getRandomInt(0,list_contact.length - 1)];",
									"                console.log(\"will create po for contact: \", contact_obj);",
									"                pm.environment.set(\"C-contact_obj\",contact_obj);",
									"                pm.environment.set(\"C-contact_id\",contact_obj.contact_id);",
									"",
									"                postman.setNextRequest(\"get_list_sku\"); // get_list_sku",
									"                break;",
									"            case 5: case 8:",
									"                old_contact_obj = pm.environment.get(\"C-contact_obj\");",
									"                for(let i in list_contact){",
									"                    if(list_contact[i].contact_id == old_contact_obj.contact_id){",
									"                        contact_obj = list_contact[i];",
									"                        break;",
									"                    }",
									"                }",
									"",
									"                switch(configs.create_po_status){",
									"                    case \"saved\":",
									"                    case \"completed\":",
									"                        // tạo po sẽ tăng total_receivable cho customer",
									"                        pm.test(\"total_receivable increase \" + po_obj.exp_total_amount, function () {",
									"                            console.log(\"old: \" + old_contact_obj.total_receivable);",
									"                            console.log(\"new: \" + contact_obj.total_receivable);",
									"                            pm.expect(contact_obj.total_receivable).to.eql(old_contact_obj.total_receivable + po_obj.exp_total_amount);",
									"                        });",
									"",
									"                        break;",
									"                    case \"draft\":",
									"                    default:",
									"                        pm.test(\"Nothing happen!\", function () {",
									"                            pm.expect(JSON.stringify(old_contact_obj) == JSON.stringify(contact_obj)).to.be.true;",
									"                        });",
									"                        break;",
									"                }",
									"            ",
									"                postman.setNextRequest(\"get_list_batch\"); // get_list_batch",
									"                break;",
									"            default:",
									"                console.log(\"Missing flow, end test\");",
									"                postman.setNextRequest(null);",
									"                break;",
									"        }",
									"    } else {",
									"        page++;",
									"        pm.environment.set(\"C-page\",page);",
									"",
									"        console.log(\"view next page (\" + page + \") to get more contact\");",
									"        postman.setNextRequest(\"get_list_contact\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get list contact, end test\");",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let page = pm.environment.get(\"C-page\");",
									"",
									"if(!page){",
									"    page = 1;",
									"    pm.environment.set(\"C-page\",page);",
									"",
									"    let page_size = 50;",
									"    pm.environment.set(\"C-page_size\",page_size);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-business/api/v1/contact/get-list?business_id={{C-business_id}}&page={{C-page}}&page_size={{C-page_size}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-business",
								"api",
								"v1",
								"contact",
								"get-list"
							],
							"query": [
								{
									"key": "search",
									"value": "",
									"disabled": true
								},
								{
									"key": "business_id",
									"value": "{{C-business_id}}"
								},
								{
									"key": "page",
									"value": "{{C-page}}"
								},
								{
									"key": "page_size",
									"value": "{{C-page_size}}"
								},
								{
									"key": "sort",
									"value": "",
									"disabled": true
								},
								{
									"key": "option",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "bill",
			"item": [
				{
					"name": "get_list_bill",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ============================= random number between min and max",
									"function getRandomInt(min, max) {",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = JSON.parse(responseBody);",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let configs = pm.environment.get(\"C-configs\");",
									"    let total_pages = 1;",
									"    try {",
									"        total_pages = jsData.meta.total_pages;",
									"    } catch {",
									"        console.log(\"currently, this branch with null data\");",
									"    }",
									"    let page = pm.environment.get(\"C-page\");",
									"",
									"    let list_bill, new_bill_obj;",
									"    let isFound = false;",
									"    switch(testcase){",
									"        case 2:",
									"            list_bill = pm.environment.get(\"C-list_bill\");",
									"            if(!list_bill){",
									"                list_bill = [];",
									"            }",
									"",
									"            // let test_day = new Date(\"2024-05-17T07:00:00.000Z\");",
									"            for(let item in jsData.data){",
									"                if(jsData.data[item].cart_status == \"saved\" && jsData.data[item].payment_due_amount > 0){",
									"                    // get list bill create after \"2024-03-15T09:00:00.000Z\"",
									"                    // let created_at_i = new Date(jsData.data[item].created_at);",
									"                    if(jsData.data[item].payment_status == configs.payment_status){ // && test_day < created_at_i && jsData.data[item].payment_account_id == 1000531 tạm handle gen QR vs bill còn nợ, fix payment account đang thanh toán dc (1000531, 1001914) => sẽ loại bỏ vì ko fix 1 payment_id cho bill nữa, jsData.data[item].created_at > \"2024-03-24T16:00:00.000Z\"",
									"                        list_bill[list_bill.length] = {",
									"                            \"bill_id\":jsData.data[item].id,",
									"                            \"order_code\":jsData.data[item].order_code,",
									"                            \"system_code\":jsData.data[item].system_code,",
									"                            \"created_at\":jsData.data[item].created_at,",
									"                            \"cart_status\":jsData.data[item].cart_status,",
									"                            \"payment_status\":jsData.data[item].payment_status,",
									"                            \"items_amount\":jsData.data[item].items_amount,",
									"                            \"total_amount\":jsData.data[item].total_amount,",
									"                            \"discount_amount\":jsData.data[item].discount_amount,",
									"                            \"tax_amount\":jsData.data[item].tax_amount,",
									"                            \"payment_due_amount\":jsData.data[item].payment_due_amount,",
									"                            \"paid_amount\":jsData.data[item].paid_amount,",
									"                            // \"entry_type\":jsData.data[item].entry_type,",
									"                            // \"description\":jsData.data[item].description,",
									"                            \"value_at\":jsData.data[item].value_at,",
									"                            \"due_at\":jsData.data[item].due_at,",
									"                            // \"send_at\":jsData.data[item].send_at,",
									"                            \"account_id\":jsData.data[item].account_id,",
									"                            \"tax_type\":jsData.data[item].tax_type,",
									"                            \"email\":jsData.data[item].email,",
									"                            \"payment_config\":jsData.data[item].payment_config,",
									"                            \"contact_id\":jsData.data[item].contact_id,",
									"                            \"contact_name\":jsData.data[item].contact_info.contact_name",
									"                            // \"contact_phone\":jsData.data[item].contact_info.contact_phone",
									"                            // \"payment_account_id\":jsData.data[item].payment_account_id",
									"                        }",
									"                    }",
									"                }",
									"            }",
									"            pm.environment.set(\"C-list_bill\",list_bill);",
									"            break;",
									"        case 4:",
									"        let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"            for(let item in jsData.data){",
									"                if(jsData.data[item].id == tnx_obj.object_id){",
									"                    isFound = true;",
									"                    new_bill_obj = jsData.data[item];",
									"                    break;",
									"                }",
									"            }",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow\");",
									"            break;",
									"    }",
									"",
									"    if(page >= total_pages || isFound){",
									"        // must clear page & page_size",
									"        pm.environment.unset(\"C-page\");",
									"        pm.environment.unset(\"C-page_size\");",
									"",
									"        let bill_obj;",
									"        switch(testcase){",
									"            case 2:",
									"                pm.test(\"Got all bill! \" + list_bill.length, function () {",
									"                    pm.expect(list_bill.length > 0).to.be.true;",
									"                });",
									"                bill_obj = list_bill[getRandomInt(0,list_bill.length - 1)];",
									"",
									"                // thêm lọc random bill dc gen QR (partial_paid - had bank tnx, partial_paid - had manual tnx, un_paid)",
									"",
									"                pm.environment.set(\"C-bill_obj\",bill_obj);",
									"                console.log(\"=============================================\");",
									"                console.log(\"Will create bank transaction with bill \",bill_obj);",
									"                // console.log(\"--- value_at: \" + bill_obj.value_at);",
									"                // console.log(\"--- due_at: \" + bill_obj.due_at);",
									"                // console.log(\"--- total_amount: \" + bill_obj.total_amount);",
									"                // console.log(\"--- paid_amount: \" + bill_obj.paid_amount);",
									"                console.log(\"=============================================\");",
									"",
									"                if(list_bill.length > 0){",
									"                    postman.setNextRequest(\"get_list_posting\"); // get_list_posting",
									"                } else {",
									"                    pm.test(\"DON'T HAVE bill TO PAYMENT\", function () {",
									"                        pm.expect(true).to.be.false;",
									"                    });",
									"                    postman.setNextRequest(null);",
									"                }",
									"                break;",
									"            case 4:",
									"                bill_obj = pm.environment.get(\"C-bill_obj\");",
									"                let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"                ",
									"                pm.test(\"Update paid_amount \" + tnx_obj.amount, function () {",
									"                    console.log(\"old: \" + bill_obj.paid_amount);",
									"                    console.log(\"new: \" + new_bill_obj.paid_amount);",
									"                    pm.expect(bill_obj.paid_amount + tnx_obj.amount == new_bill_obj.paid_amount).to.be.true;",
									"                });",
									"",
									"                pm.test(\"Update payment_due_amount (số tiền còn nợ) - decrease \" + tnx_obj.amount, function () {",
									"                    console.log(\"act: \" + new_bill_obj.payment_due_amount);",
									"                    console.log(\"exp: \" + (bill_obj.payment_due_amount - tnx_obj.amount));",
									"                    pm.expect((bill_obj.payment_due_amount - tnx_obj.amount).toFixed(2) == new_bill_obj.payment_due_amount.toFixed(2)).to.be.true;",
									"                });",
									"",
									"                let isFullyPaid = pm.environment.get(\"C-isFullyPaid\");",
									"                if(isFullyPaid){",
									"                    pm.test(\"Update payment_status to fully_paid\", function () {",
									"                        pm.expect(\"fully_paid\" == new_bill_obj.payment_status).to.be.true;",
									"                    });",
									"                } else {",
									"                    pm.test(\"Update payment_status to partial_paid\", function () {",
									"                        pm.expect(\"partial_paid\" == new_bill_obj.payment_status).to.be.true;",
									"                    });",
									"                }",
									"",
									"                pm.test(\"Found bill\", function () {",
									"                    pm.expect(isFound).to.be.true;",
									"                });",
									"",
									"                postman.setNextRequest(\"get_bill_detail\"); // get_bill_detail",
									"                break;",
									"            default:",
									"                console.log(\"Missing flow, end test\");",
									"                postman.setNextRequest(null);",
									"                break;",
									"        }",
									"    } else {",
									"        page++;",
									"        pm.environment.set(\"C-page\",page);",
									"",
									"        console.log(\"view next page (\" + page + \") to get more bill\");",
									"        postman.setNextRequest(\"get_list_bill\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get list bill, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let page = pm.environment.get(\"C-page\");",
									"",
									"if(!page){",
									"    page = 1;",
									"    pm.environment.set(\"C-page\",page);",
									"",
									"    let page_size = 20;",
									"    pm.environment.set(\"C-page_size\",page_size);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/bill/get-list?business_id={{C-business_id}}&page={{C-page}}&page_size={{C-page_size}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"bill",
								"get-list"
							],
							"query": [
								{
									"key": "business_id",
									"value": "{{C-business_id}}"
								},
								{
									"key": "page",
									"value": "{{C-page}}"
								},
								{
									"key": "page_size",
									"value": "{{C-page_size}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get_bill_detail",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let bill_obj = pm.environment.get(\"C-bill_obj\");",
									"let bill_id = bill_obj.bill_id;",
									"console.log(\"view detail bill: \" + bill_id);",
									"",
									"pm.environment.set(\"C-bill_id\",bill_id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    // let testcase = pm.environment.get(\"C-testcase\");",
									"    console.log(\"Debug: \" + JSON.stringify(jsData));",
									"",
									"    let bill_obj = pm.environment.get(\"C-bill_obj\");",
									"    let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"    ",
									"    pm.test(\"Update paid_amount \" + tnx_obj.amount, function () {",
									"        // console.log(\"old: \", bill_obj);",
									"        // console.log(\"new: \", jsData.data);",
									"        pm.expect((bill_obj.paid_amount + tnx_obj.amount).toFixed(2) == jsData.data.paid_amount.toFixed(2)).to.be.true;",
									"    });",
									"",
									"    pm.test(\"Update payment_due_amount (số tiền còn nợ) - decrease \" + tnx_obj.amount, function () {",
									"        // console.log(\"old: \", bill_obj);",
									"        // console.log(\"new: \", jsData.data);",
									"        pm.expect((bill_obj.payment_due_amount - tnx_obj.amount).toFixed(2) == jsData.data.payment_due_amount.toFixed(2)).to.be.true;",
									"    });",
									"",
									"    let isFullyPaid = pm.environment.get(\"C-isFullyPaid\");",
									"    if(isFullyPaid){",
									"        pm.test(\"Update payment_status to fully_paid\", function () {",
									"            pm.expect(\"fully_paid\" == jsData.data.payment_status).to.be.true;",
									"        });",
									"    } else {",
									"        pm.test(\"Update payment_status to partial_paid\", function () {",
									"            pm.expect(\"partial_paid\" == jsData.data.payment_status).to.be.true;",
									"        });",
									"    }",
									"",
									"    postman.setNextRequest(\"get_list_posting\"); // get_list_posting",
									"} else {",
									"    console.log(\"Can't get bill detail, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/bill/get-one/{{C-bill_id}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"bill",
								"get-one",
								"{{C-bill_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "purchase_order",
			"item": [
				{
					"name": "get_po_overview",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"let configs = pm.environment.get(\"C-configs\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let configs = pm.environment.get(\"C-configs\");",
									"",
									"    let po_overview = null;",
									"    try {",
									"        po_overview = jsData.data;",
									"    } catch {",
									"        console.log(\"missing data\");",
									"    }",
									"",
									"    let old_po_overview;",
									"    switch(testcase){",
									"        case 2:",
									"            pm.test(\"got po_overview data\", function () {",
									"                pm.expect(po_overview != null).to.be.true;",
									"            });",
									"            pm.environment.set(\"C-po_overview\",po_overview);",
									"",
									"            postman.setNextRequest(\"get_list_po\"); // get_list_po",
									"            break;",
									"        case 5: case 8:",
									"            let po_obj = pm.environment.get(\"C-po_obj\");",
									"",
									"            old_po_overview = pm.environment.get(\"C-po_overview\");",
									"            console.log(\"old_po_overview: \", old_po_overview);",
									"            console.log(\"po_overview: \", po_overview);",
									"",
									"            switch(configs.create_po_status){",
									"                case \"saved\":",
									"                    // total_processing",
									"                    pm.test(\"total_processing increase \" + po_obj.exp_total_amount, function () {",
									"                        pm.expect(old_po_overview.total_processing + po_obj.exp_total_amount).to.eql(po_overview.total_processing);",
									"                    });",
									"",
									"                    // count_processing",
									"                    pm.test(\"count_processing increase 1\", function () {",
									"                        pm.expect(old_po_overview.count_processing + 1).to.eql(po_overview.count_processing);",
									"                    });",
									"",
									"                    // total_today",
									"                    pm.test(\"nothing happen with total_today\", function () {",
									"                        pm.expect(old_po_overview.total_today).to.eql(po_overview.total_today);",
									"                    });",
									"",
									"                    // count_today",
									"                    pm.test(\"nothing happen with count_today \", function () {",
									"                        pm.expect(old_po_overview.count_today).to.eql(po_overview.count_today);",
									"                    });",
									"",
									"                    // total_unpaid => phụ thuộc payment gửi lên, tạm thời tính là chưa thanh toán => handle ở luồng thanh toán po",
									"                    pm.test(\"total_unpaid increase \" + po_obj.exp_total_amount, function () {",
									"                        pm.expect(old_po_overview.total_unpaid + po_obj.exp_total_amount).to.eql(po_overview.total_unpaid);",
									"                    });",
									"",
									"                    // count_unpaid => phụ thuộc payment gửi lên, tạm thời tính là chưa thanh toán",
									"                    pm.test(\"count_unpaid increase 1\", function () {",
									"                        pm.expect(old_po_overview.count_unpaid + 1).to.eql(po_overview.count_unpaid);",
									"                    });",
									"                    break;",
									"                case \"completed\":",
									"                    // total_processing",
									"                    pm.test(\"Nothing happen with total_processing\", function () {",
									"                        pm.expect(old_po_overview.total_processing).to.eql(po_overview.total_processing);",
									"                    });",
									"",
									"                    // count_processing",
									"                    pm.test(\"Nothing happen with count_processing\", function () {",
									"                        pm.expect(old_po_overview.count_processing).to.eql(po_overview.count_processing);",
									"                    });",
									"",
									"                    // total_today",
									"                    pm.test(\"count_today increase \" + po_obj.exp_total_amount, function () {",
									"                        pm.expect(old_po_overview.total_today + po_obj.exp_total_amount).to.eql(po_overview.total_today);",
									"                    });",
									"",
									"                    // count_today",
									"                    pm.test(\"count_today increase 1\", function () {",
									"                        pm.expect(old_po_overview.count_today + 1).to.eql(po_overview.count_today);",
									"                    });",
									"",
									"                    // total_unpaid => phụ thuộc payment gửi lên, tạm thời tính là chưa thanh toán",
									"                    pm.test(\"total_unpaid increase \" + po_obj.exp_total_amount, function () {",
									"                        pm.expect(old_po_overview.total_unpaid + po_obj.exp_total_amount).to.eql(po_overview.total_unpaid);",
									"                    });",
									"",
									"                    // count_unpaid => phụ thuộc payment gửi lên, tạm thời tính là chưa thanh toán",
									"                    pm.test(\"count_unpaid increase 1\", function () {",
									"                        pm.expect(old_po_overview.count_unpaid + 1).to.eql(po_overview.count_unpaid);",
									"                    });",
									"                    break;",
									"                case \"draft\":",
									"                default:",
									"                    pm.test(\"nothing happen with po_overview\", function () {",
									"                        pm.expect(JSON.stringify(old_po_overview)).to.eql(JSON.stringify(po_overview));",
									"                    });",
									"                    break;",
									"            }",
									"",
									"            postman.setNextRequest(\"get_list_contact\"); // get_list_contact",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get po overview\");",
									"    postman.setNextRequest(null);",
									"    // postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/po/overview?list_contact_ids={{C-filter_contact_ids}}&option=&payment_status=&search=&status=",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"po",
								"overview"
							],
							"query": [
								{
									"key": "branch_id",
									"value": "{{C-filter_branch_id}}",
									"disabled": true
								},
								{
									"key": "start_time_created_at",
									"value": "",
									"disabled": true
								},
								{
									"key": "end_time_created_at",
									"value": "",
									"disabled": true
								},
								{
									"key": "start_time_due_at",
									"value": "",
									"disabled": true
								},
								{
									"key": "end_time_due_at",
									"value": "",
									"disabled": true
								},
								{
									"key": "list_contact_ids",
									"value": "{{C-filter_contact_ids}}"
								},
								{
									"key": "option",
									"value": ""
								},
								{
									"key": "payment_status",
									"value": ""
								},
								{
									"key": "search",
									"value": ""
								},
								{
									"key": "sort",
									"value": "asc",
									"disabled": true
								},
								{
									"key": "status",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get_list_po",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let page = pm.environment.get(\"C-page\");",
									"",
									"if(!page){",
									"    page = 1;",
									"    pm.environment.set(\"C-page\",page);",
									"",
									"    let page_size = 50;",
									"    pm.environment.set(\"C-page_size\",page_size);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ============================= random number between min and max",
									"function getRandomInt(min, max) {",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = JSON.parse(responseBody);",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let configs = pm.environment.get(\"C-configs\");",
									"    let total_pages = 1;",
									"    try {",
									"        total_pages = jsData.meta.total_pages;",
									"        console.log(\"total_pages: \" + total_pages);",
									"    } catch {",
									"        console.log(\"currently, this branch with null data\");",
									"    }",
									"    let page = pm.environment.get(\"C-page\");",
									"",
									"    let list_po, new_po_obj;",
									"    let isFound = false;",
									"    switch(testcase){",
									"        case 2:",
									"            list_po = pm.environment.get(\"C-list_po\");",
									"            if(!list_po){",
									"                list_po = [];",
									"            }",
									"",
									"            // let test_day = new Date(\"2024-05-17T07:00:00.000Z\");",
									"            for(let item in jsData.data){",
									"                if((jsData.data[item].cart_status == \"completed\" || jsData.data[item].cart_status == \"saved\") && jsData.data[item].payment_due_amount > 0){",
									"                    // get list po create after \"2024-03-15T09:00:00.000Z\"",
									"                    // let created_at_i = new Date(jsData.data[item].created_at);",
									"                    if(jsData.data[item].payment_status == configs.payment_status){ // && test_day < created_at_i && jsData.data[item].payment_account_id == 1000531 tạm handle gen QR vs po còn nợ, fix payment account đang thanh toán dc (1000531, 1001914) => sẽ loại bỏ vì ko fix 1 payment_id cho po nữa, jsData.data[item].created_at > \"2024-03-24T16:00:00.000Z\"",
									"                        list_po[list_po.length] = {",
									"                            \"po_id\":jsData.data[item].id,",
									"                            \"po_code\":jsData.data[item].po_code,",
									"                            \"system_code\":jsData.data[item].system_code,",
									"                            // \"status\":jsData.data[item].status,",
									"                            \"payment_status\":jsData.data[item].payment_status,",
									"                            \"sub_total_amount\":jsData.data[item].sub_total_amount,",
									"                            \"total_amount\":jsData.data[item].total_amount,",
									"                            // \"discount_amount\":jsData.data[item].discount_amount,",
									"                            // \"total_tax_amount\":jsData.data[item].total_tax_amount,",
									"                            \"payment_due_amount\":jsData.data[item].payment_due_amount,",
									"                            \"paid_amount\":jsData.data[item].paid_amount,",
									"                            // \"entry_type\":jsData.data[item].entry_type,",
									"                            \"note\":jsData.data[item].note,",
									"                            \"value_at\":jsData.data[item].value_at,",
									"                            \"due_at\":jsData.data[item].due_at,",
									"                            // \"send_at\":jsData.data[item].send_at,",
									"                            \"account_id\":jsData.data[item].account_id,",
									"                            \"tax_type\":jsData.data[item].tax_type,",
									"                            // \"email\":jsData.data[item].email,",
									"                            // \"payment_info\":jsData.data[item].payment_info,",
									"                            \"contact_id\":jsData.data[item].contact_id,",
									"                            // \"contact_name\":jsData.data[item].contact_info.contact_name,",
									"                            // \"contact_phone\":jsData.data[item].contact_info.contact_phone",
									"                        }",
									"                    }",
									"                }",
									"            }",
									"            pm.environment.set(\"C-list_po\",list_po);",
									"            break;",
									"        case 4:",
									"        let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"            for(let item in jsData.data){",
									"                if(jsData.data[item].id == tnx_obj.object_id){",
									"                    isFound = true;",
									"                    new_po_obj = jsData.data[item];",
									"                    break;",
									"                }",
									"            }",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow\");",
									"            break;",
									"    }",
									"",
									"    if(page >= total_pages || isFound){",
									"        // must clear page & page_size",
									"        pm.environment.unset(\"C-page\");",
									"        pm.environment.unset(\"C-page_size\");",
									"",
									"        let po_obj;",
									"        switch(testcase){",
									"            case 2:",
									"                pm.test(\"Got all po! \" + list_po.length, function () {",
									"                    pm.expect(list_po.length > 0).to.be.true;",
									"                });",
									"                po_obj = list_po[getRandomInt(0,list_po.length - 1)];",
									"",
									"                // thêm lọc random po dc gen QR (partial_paid - had bank tnx, partial_paid - had manual tnx, un_paid)",
									"",
									"                pm.environment.set(\"C-po_obj\",po_obj);",
									"                console.log(\"=============================================\");",
									"                console.log(\"Will create bank transaction with po \",po_obj);",
									"                // console.log(\"--- value_at: \" + po_obj.value_at);",
									"                // console.log(\"--- due_at: \" + po_obj.due_at);",
									"                // console.log(\"--- total_amount: \" + po_obj.total_amount);",
									"                // console.log(\"--- paid_amount: \" + po_obj.paid_amount);",
									"                console.log(\"=============================================\");",
									"",
									"                if(list_po.length > 0){",
									"                    postman.setNextRequest(\"get_list_posting\"); // get_list_posting",
									"                } else {",
									"                    pm.test(\"DON'T HAVE PO TO PAYMENT\", function () {",
									"                        pm.expect(true).to.be.false;",
									"                    });",
									"                    postman.setNextRequest(null);",
									"                }",
									"                break;",
									"            case 4:",
									"                po_obj = pm.environment.get(\"C-po_obj\");",
									"                let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"                ",
									"                pm.test(\"Update paid_amount \" + tnx_obj.amount, function () {",
									"                    console.log(\"old: \" + po_obj.paid_amount);",
									"                    console.log(\"new: \" + new_po_obj.paid_amount);",
									"                    pm.expect(po_obj.paid_amount + tnx_obj.amount == new_po_obj.paid_amount).to.be.true;",
									"                });",
									"",
									"                pm.test(\"Update payment_due_amount (số tiền còn nợ) - decrease \" + tnx_obj.amount, function () {",
									"                    console.log(\"act: \" + new_po_obj.payment_due_amount);",
									"                    console.log(\"exp: \" + (po_obj.payment_due_amount - tnx_obj.amount));",
									"                    pm.expect((po_obj.payment_due_amount - tnx_obj.amount).toFixed(2) == new_po_obj.payment_due_amount.toFixed(2)).to.be.true;",
									"                });",
									"",
									"                let isFullyPaid = pm.environment.get(\"C-isFullyPaid\");",
									"                if(isFullyPaid){",
									"                    pm.test(\"Update payment_status to fully_paid\", function () {",
									"                        pm.expect(\"fully_paid\" == new_po_obj.payment_status).to.be.true;",
									"                    });",
									"                } else {",
									"                    pm.test(\"Update payment_status to partial_paid\", function () {",
									"                        pm.expect(\"partial_paid\" == new_po_obj.payment_status).to.be.true;",
									"                    });",
									"                }",
									"",
									"                pm.test(\"Found po\", function () {",
									"                    pm.expect(isFound).to.be.true;",
									"                });",
									"",
									"                postman.setNextRequest(\"get_po_detail\"); // get_po_detail",
									"                break;",
									"            default:",
									"                console.log(\"Missing flow, end test\");",
									"                postman.setNextRequest(null);",
									"                break;",
									"        }",
									"    } else {",
									"        page++;",
									"        pm.environment.set(\"C-page\",page);",
									"",
									"        console.log(\"view next page (\" + page + \") to get more po\");",
									"        postman.setNextRequest(\"get_list_po\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get list po, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/po/get-list?branch_id={{C-branch_id}}&page={{C-page}}&page_size={{C-page_size}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"po",
								"get-list"
							],
							"query": [
								{
									"key": "branch_id",
									"value": "{{C-branch_id}}"
								},
								{
									"key": "contact_id",
									"value": "",
									"disabled": true
								},
								{
									"key": "start_time_created_at",
									"value": "",
									"disabled": true
								},
								{
									"key": "end_time_created_at",
									"value": "",
									"disabled": true
								},
								{
									"key": "start_time_due_at",
									"value": "",
									"disabled": true
								},
								{
									"key": "end_time_due_at",
									"value": "",
									"disabled": true
								},
								{
									"key": "list_contact_ids",
									"value": "",
									"disabled": true
								},
								{
									"key": "option",
									"value": null,
									"disabled": true
								},
								{
									"key": "page",
									"value": "{{C-page}}"
								},
								{
									"key": "page_size",
									"value": "{{C-page_size}}"
								},
								{
									"key": "payment_status",
									"value": null,
									"disabled": true
								},
								{
									"key": "search",
									"value": null,
									"disabled": true
								},
								{
									"key": "sort",
									"value": "",
									"disabled": true
								},
								{
									"key": "status",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get_po_detail",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let po_obj = pm.environment.get(\"C-po_obj\");",
									"let po_id = po_obj.po_id;",
									"console.log(\"view detail po: \" + po_id);",
									"",
									"pm.environment.set(\"C-po_id\",po_id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    // let testcase = pm.environment.get(\"C-testcase\");",
									"    console.log(\"Debug: \" + JSON.stringify(jsData));",
									"",
									"    let po_obj = pm.environment.get(\"C-po_obj\");",
									"    let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"    ",
									"    pm.test(\"Update paid_amount \" + tnx_obj.amount, function () {",
									"        // console.log(\"old: \", po_obj);",
									"        // console.log(\"new: \", jsData.data);",
									"        pm.expect((po_obj.paid_amount + tnx_obj.amount).toFixed(2) == jsData.data.paid_amount.toFixed(2)).to.be.true;",
									"    });",
									"",
									"    pm.test(\"Update payment_due_amount (số tiền còn nợ) - decrease \" + tnx_obj.amount, function () {",
									"        // console.log(\"old: \", po_obj);",
									"        // console.log(\"new: \", jsData.data);",
									"        pm.expect((po_obj.payment_due_amount - tnx_obj.amount).toFixed(2) == jsData.data.payment_due_amount.toFixed(2)).to.be.true;",
									"    });",
									"",
									"    let isFullyPaid = pm.environment.get(\"C-isFullyPaid\");",
									"    if(isFullyPaid){",
									"        pm.test(\"Update payment_status to fully_paid\", function () {",
									"            pm.expect(\"fully_paid\" == jsData.data.payment_status).to.be.true;",
									"        });",
									"    } else {",
									"        pm.test(\"Update payment_status to partial_paid\", function () {",
									"            pm.expect(\"partial_paid\" == jsData.data.payment_status).to.be.true;",
									"        });",
									"    }",
									"",
									"    postman.setNextRequest(\"get_list_posting\"); // get_list_posting",
									"} else {",
									"    console.log(\"Can't get po detail, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/po/get-one/{{C-po_id}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"po",
								"get-one",
								"{{C-po_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_po_overview_branch",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"let configs = pm.environment.get(\"C-configs\");",
									"",
									"let filter_branch_id = \"\"; // nếu ko chọn branch thì truyền rỗng để lấy all",
									"filter_branch_id = configs.none_uuid; // fix tạm để by pass",
									"let filter_contact_ids = \"\";",
									"pm.environment.set(\"C-filter_branch_id\",filter_branch_id);",
									"pm.environment.set(\"C-filter_contact_ids\",filter_contact_ids);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200 || pm.response.code == 400){ // tạm thời để 404 vì BE chưa push code",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let po_overview = null;",
									"    try {",
									"        po_overview = jsData.data;",
									"    } catch {",
									"        console.log(\"missing data\");",
									"    }",
									"",
									"    let old_po_overview;",
									"    switch(testcase){",
									"        case 2:",
									"            pm.test(\"got po_overview data\", function () {",
									"                pm.expect(po_overview != null).to.be.true;",
									"            });",
									"            pm.environment.set(\"C-po_overview\",po_overview);",
									"",
									"            postman.setNextRequest(\"\"); // get_list_po",
									"            break;",
									"        case 5:",
									"            old_po_overview = pm.environment.get(\"C-po_overview\");",
									"            pm.test(\"Nothing happen with po_overview data\", function () {",
									"                pm.expect(JSON.stringify(old_po_overview)).to.eql(JSON.stringify(po_overview));",
									"            });",
									"            ",
									"            postman.setNextRequest(\"\"); // get_list_contact",
									"            break;",
									"        case 8:",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get po overview\");",
									"    postman.setNextRequest(null);",
									"    // postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/po/overview?branch_id={{C-filter_branch_id}}&list_contact_ids={{C-filter_contact_ids}}&option=&payment_status=&search=&status=",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"po",
								"overview"
							],
							"query": [
								{
									"key": "branch_id",
									"value": "{{C-filter_branch_id}}"
								},
								{
									"key": "start_time_created_at",
									"value": "",
									"disabled": true
								},
								{
									"key": "end_time_created_at",
									"value": "",
									"disabled": true
								},
								{
									"key": "start_time_due_at",
									"value": "",
									"disabled": true
								},
								{
									"key": "end_time_due_at",
									"value": "",
									"disabled": true
								},
								{
									"key": "list_contact_ids",
									"value": "{{C-filter_contact_ids}}"
								},
								{
									"key": "option",
									"value": ""
								},
								{
									"key": "payment_status",
									"value": ""
								},
								{
									"key": "search",
									"value": ""
								},
								{
									"key": "sort",
									"value": "asc",
									"disabled": true
								},
								{
									"key": "status",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get_list_po_branch",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let page = pm.environment.get(\"C-page\");",
									"",
									"if(!page){",
									"    page = 1;",
									"    pm.environment.set(\"C-page\",page);",
									"",
									"    let page_size = 50;",
									"    pm.environment.set(\"C-page_size\",page_size);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ============================= random number between min and max",
									"function getRandomInt(min, max) {",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = pm.response.json();",
									"if(pm.response.code == 200 || pm.response.code == 400){ // tạm thời handle 404 vì BE chưa push code",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let total_pages = 0, total_po = 0;",
									"    try {",
									"        total_pages = jsData.meta.total_pages;",
									"        total_po = jsData.meta.total_rows;",
									"    } catch {",
									"        console.log(\"Missing meta data\");",
									"    }",
									"    let page = pm.environment.get(\"C-page\");",
									"",
									"    let list_po, old_total_po;",
									"    switch(testcase){",
									"        case 2:",
									"            pm.environment.unset(\"C-page\");",
									"            pm.environment.unset(\"C-page_size\");",
									"            pm.test(\"Got total po! \" + total_po, function () {",
									"                pm.expect(total_po > 0).to.be.true;",
									"            });",
									"            pm.environment.set(\"C-total_po\",total_po);",
									"",
									"            for(let i in jsData.data){",
									"                if(jsData.data[i].cart_status == \"active\"){",
									"                    pm.environment.set(\"C-existed_po_code\",jsData.data[i].po_code);",
									"                    break;",
									"                }",
									"            }",
									" ",
									"            testcase++;",
									"            // testcase = 6;",
									"            pm.environment.set(\"C-testcase\",testcase);",
									"            postman.setNextRequest(\"calculate_po\"); // calculate_po",
									"            break;",
									"        case 5: case 8:",
									"            list_po = pm.environment.get(\"C-list_po\");",
									"            if(!list_po){",
									"                list_po = [];",
									"            }",
									"",
									"            for(let item in jsData.data){",
									"                list_po[list_po.length] = {",
									"                    \"po_id\":jsData.data[item].id,",
									"                    \"created_at\":jsData.data[item].created_at,",
									"                    \"po_code\":jsData.data[item].po_code,",
									"                    \"system_code\":jsData.data[item].system_code,",
									"                    \"cart_status\":jsData.data[item].cart_status,",
									"                    \"payment_status\":jsData.data[item].payment_status,",
									"                    \"items_amount\":jsData.data[item].items_amount,",
									"                    \"sub_total_amount\":jsData.data[item].sub_total_amount,",
									"                    \"paid_amount\":jsData.data[item].paid_amount,",
									"                    \"currency\":jsData.data[item].currency,",
									"                    \"contact_id\":jsData.data[item].contact_id,",
									"                    \"entry_type\":jsData.data[item].entry_type,",
									"                    \"note\":jsData.data[item].note,",
									"                    \"value_at\":jsData.data[item].value_at,",
									"                    \"due_at\":jsData.data[item].due_at,",
									"                    \"send_at\":jsData.data[item].send_at,",
									"                    \"account_id\":jsData.data[item].account_id,",
									"                    \"tax_type\":jsData.data[item].tax_type,",
									"                    \"final_status\":jsData.data[item].final_status,",
									"                    \"sales_rep_info\":jsData.data[item].sales_rep_info",
									"                }",
									"                // list_po[list_po.length] = jsData.data[item];",
									"            }",
									"            pm.environment.set(\"C-list_po\",list_po);",
									"",
									"            let configs = pm.environment.get(\"C-configs\");",
									"            if(page >= total_pages || page >= configs.limit_page){",
									"                // must clear page & page_size",
									"                pm.environment.unset(\"C-page\");",
									"                pm.environment.unset(\"C-page_size\");",
									"",
									"                let po_obj = pm.environment.get(\"C-po_obj\");",
									"                // console.log(\"po_obj: \", po_obj);",
									"                old_total_po = pm.environment.get(\"C-total_po\");",
									"",
									"                pm.test(\"Total po increase 1\", function () {",
									"                    pm.expect(total_po == old_total_po + 1).to.be.true;",
									"                });",
									"",
									"                let isFound = false;",
									"                for(let i in list_po){",
									"                    if(list_po[i].po_id == po_obj.po_id){",
									"                        isFound = true;",
									"                        console.log(\"debug: \" + JSON.stringify(list_po[i]));",
									"",
									"                        pm.test(\"po_code of po correctly! \" + po_obj.po_code, function () {",
									"                            pm.expect(po_obj.po_code == list_po[i].po_code).to.be.true;",
									"                        });",
									"",
									"                        pm.test(\"sub_total_amount of po correctly! \" + po_obj.sub_total_amount, function () {",
									"                            pm.expect(po_obj.sub_total_amount == list_po[i].sub_total_amount).to.be.true;",
									"                        });",
									"",
									"                        pm.test(\"contact_id of po correctly! \" + po_obj.contact_id, function () {",
									"                            pm.expect(po_obj.contact_id == list_po[i].contact_id).to.be.true;",
									"                        });",
									"",
									"                        pm.test(\"value_at of po correctly! \" + po_obj.value_at, function () {",
									"                            console.log(\"exp value_at: \" + po_obj.value_at);",
									"                            console.log(\"act value_at: \" + list_po[i].value_at);",
									"                            pm.expect(po_obj.value_at.substring(0,17) == list_po[i].value_at.substring(0,17)).to.be.true;",
									"                        });",
									"",
									"                        pm.test(\"due_at of po correctly! \" + po_obj.due_at, function () {",
									"                            console.log(\"exp due_at: \" + po_obj.due_at);",
									"                            console.log(\"act due_at: \" + list_po[i].due_at);",
									"                            pm.expect(po_obj.due_at.substring(0,17) == list_po[i].due_at.substring(0,17)).to.be.true;",
									"                        });",
									"",
									"                        pm.test(\"note of po correctly! \" + po_obj.note, function () {",
									"                            // console.log(\"po at i: \",list_po[i]);",
									"                            pm.expect(po_obj.note == list_po[i].note).to.be.true;",
									"                        });",
									"",
									"                        pm.test(\"tax_type of po correctly! \" + po_obj.tax_type, function () {",
									"                            pm.expect(po_obj.tax_type == list_po[i].tax_type).to.be.true;",
									"                        });",
									"",
									"                        pm.test(\"status of po correctly! \" + po_obj.cart_status, function () {",
									"                            pm.expect(po_obj.cart_status == list_po[i].cart_status).to.be.true;",
									"                        });",
									"",
									"                        // final_status",
									"                        let exp_final_status;",
									"                        if(testcase == 8){",
									"                            let ranTimeCase = pm.environment.get(\"C-ranTimeCase\");",
									"                            if(ranTimeCase == 2 || ranTimeCase == 3){",
									"                                exp_final_status = \"unsent\";",
									"                            } else {",
									"                                exp_final_status = \"overdue\"; // khả năng sẽ sai do đã thay đổi ranTimeCase => update sau",
									"                            }",
									"                        } else {",
									"                            exp_final_status = po_obj.cart_status;",
									"                        }",
									"                        pm.test(\"final_status of po is \" + exp_final_status, function () {",
									"                            console.log(\"act final_status:  \" + list_po[i].final_status);",
									"                            console.log(\"exp final_status:  \" + exp_final_status);",
									"                            pm.expect(exp_final_status == list_po[i].final_status).to.be.true;",
									"                        });",
									"                        po_obj.exp_final_status = exp_final_status;",
									"",
									"                        // sales_rep_info.id => user_id, sales_rep_info.full_name",
									"                        let userInfo = pm.environment.get(\"C-userInfo\");",
									"                        console.log(\"userInfo: \", userInfo);",
									"                        pm.test(\"sales_rep_info.id of po is \" + userInfo.id, function () {",
									"                            console.log(\"act final_status:  \" + list_po[i].sales_rep_info.id);",
									"                            pm.expect(list_po[i].sales_rep_info.id == userInfo.id).to.be.true;",
									"                        });",
									"",
									"                        pm.test(\"sales_rep_info.full_name of po is \" + userInfo.first_name, function () {",
									"                            console.log(\"act final_status:  \" + list_po[i].sales_rep_info.full_name);",
									"                            pm.expect(list_po[i].sales_rep_info.full_name == userInfo.first_name).to.be.true;",
									"                        });",
									"                        break;",
									"                    }",
									"                }",
									"",
									"                pm.test(\"Found new product\", function () {",
									"                    pm.expect(isFound).to.be.true;",
									"                });",
									"",
									"                // update total records",
									"                pm.environment.set(\"C-total_po\",total_po);",
									"                pm.environment.set(\"C-po_obj\",po_obj);",
									"                pm.environment.unset(\"C-list_po\");",
									"",
									"                postman.setNextRequest(\"get_po_detail\"); // get_po_detail",
									"            } else {",
									"                page++;",
									"                pm.environment.set(\"C-page\",page);",
									"",
									"                console.log(\"view next page (\" + page + \") to get more po on branch \" + pm.environment.get(\"C-filter_branch_id\"));",
									"                postman.setNextRequest(\"get_list_po_branch\");",
									"            }",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get list po, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/po/get-list?branch_id={{C-filter_branch_id}}&page={{C-page}}&page_size={{C-page_size}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"po",
								"get-list"
							],
							"query": [
								{
									"key": "branch_id",
									"value": "{{C-filter_branch_id}}"
								},
								{
									"key": "contact_id",
									"value": "",
									"disabled": true
								},
								{
									"key": "start_time_created_at",
									"value": "",
									"disabled": true
								},
								{
									"key": "end_time_created_at",
									"value": "",
									"disabled": true
								},
								{
									"key": "start_time_due_at",
									"value": "",
									"disabled": true
								},
								{
									"key": "end_time_due_at",
									"value": "",
									"disabled": true
								},
								{
									"key": "list_contact_ids",
									"value": "",
									"disabled": true
								},
								{
									"key": "option",
									"value": "",
									"disabled": true
								},
								{
									"key": "page",
									"value": "{{C-page}}"
								},
								{
									"key": "page_size",
									"value": "{{C-page_size}}"
								},
								{
									"key": "payment_status",
									"value": "",
									"disabled": true
								},
								{
									"key": "search",
									"value": "",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "",
									"disabled": true
								},
								{
									"key": "status",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "transaction",
			"item": [
				{
					"name": "get_list_transaction",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = JSON.parse(responseBody);",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let configs = pm.environment.get(\"C-configs\");",
									"    let total_tnx = null;",
									"    try {",
									"        total_tnx = jsData.meta.total_rows;",
									"    } catch {",
									"        console.log(\"Can't get total tnx\");",
									"    }",
									"",
									"    switch(testcase){",
									"        case 2:",
									"            pm.test(\"Got total tnx! \" + total_tnx, function () {",
									"                pm.expect(total_tnx != null).to.be.true;",
									"            });",
									"            pm.environment.set(\"C-total_tnx\",total_tnx);",
									"            console.log(\"total_tnx: \" + total_tnx);",
									"",
									"            testcase++;",
									"            pm.environment.set(\"C-testcase\",testcase);",
									"            ",
									"            postman.setNextRequest(\"request_cash_out\"); // request_cash_out",
									"            break;",
									"        case 4:",
									"            let old_total_tnx = pm.environment.get(\"C-total_tnx\");",
									"            let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"",
									"            let isFound = false;",
									"            pm.test(\"Total tnx increase 1\", function () {",
									"                console.log(\"Actual: \" + total_tnx);",
									"                console.log(\"Expected: \" + (old_total_tnx + 1));",
									"                pm.expect(total_tnx == old_total_tnx + 1).to.be.true;",
									"            });",
									"            ",
									"            for(let i in jsData.data){",
									"                if(tnx_obj.object_id == jsData.data[i].object_id && jsData.data[i].is_txn_bank){ // jsData.data[i].description == tnx_obj.description => hiện tại ko ghi discription cho tnx bank nữa",
									"                    tnx_obj.tnx_id = jsData.data[i].id;",
									"                    tnx_obj.payment_id = jsData.data[i].payment_id;",
									"                    pm.environment.set(\"C-tnx_obj\",tnx_obj);",
									"                    isFound = true;",
									"                    pm.test(\"amount of tnx correctly! \" + tnx_obj.amount, function () {",
									"                        pm.expect(tnx_obj.amount == jsData.data[i].amount).to.be.true;",
									"                    });",
									"",
									"                    pm.test(\"txn_type of tnx correctly! \" + tnx_obj.txn_type, function () {",
									"                        pm.expect(tnx_obj.txn_type == jsData.data[i].txn_type).to.be.true;",
									"                    });",
									"",
									"                    pm.test(\"account_id of tnx correctly! \" + tnx_obj.account_debit, function () {",
									"                        pm.expect(tnx_obj.account_debit == jsData.data[i].account_id).to.be.true;",
									"                    });",
									"",
									"                    pm.test(\"category_id of tnx correctly! \" + tnx_obj.account_credit, function () {",
									"                        pm.expect(tnx_obj.account_credit == jsData.data[i].category_id).to.be.true;",
									"                    });",
									"",
									"                    pm.test(\"value_at of tnx correctly! \" + tnx_obj.value_at.substring(0,19), function () {",
									"                        let act_value_at = jsData.data[i].value_at.substring(0,19);",
									"                        console.log(\"actual value_at: \" + act_value_at);",
									"                        pm.expect(tnx_obj.value_at.substring(0,16) == act_value_at.substring(0,16)).to.be.true; // tạm thời lấy mốc giờ +7 nên fix cứng, sau này sẽ dùng biến",
									"                    });",
									"",
									"                    pm.test(\"object_id of tnx correctly! \" + tnx_obj.object_id, function () {",
									"                        pm.expect(tnx_obj.object_type).to.eql(jsData.data[i].object_type);",
									"                    });",
									"",
									"                    // payment_method => chỉ trả trong payment object",
									"                    // pm.test(\"payment_method of tnx is ! `bank_transfer`\", function () {",
									"                    //     pm.expect(\"bank_transfer\").to.eql(jsData.data[i].payment_method);",
									"                    // });",
									"                    break;",
									"                }",
									"            }",
									"",
									"            pm.test(\"Found new tnx\", function () {",
									"                pm.expect(isFound).to.be.true;",
									"            });",
									"",
									"            if(isFound){",
									"                postman.setNextRequest(\"get_transaction_detail\"); // get_transaction_detail (get tnx detail đang lỗi nên tạm thời skip) get_report_cash_flow",
									"            } else {",
									"                postman.setNextRequest(\"get_list_payment\"); // get_list_payment",
									"            }",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get list tnx, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-ledger/api/v1/transaction/get-list?page=1&page_size=20&sort",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-ledger",
								"api",
								"v1",
								"transaction",
								"get-list"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "page_size",
									"value": "20"
								},
								{
									"key": "sort",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get_transaction_detail",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"",
									"let tnx_id = tnx_obj.tnx_id;",
									"console.log(\"view detail tnx: \" + tnx_id);",
									"",
									"pm.environment.set(\"C-tnx_id\",tnx_id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    // let testcase = pm.environment.get(\"C-testcase\");",
									"    console.log(\"Debug: \" + JSON.stringify(jsData));",
									"    let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"",
									"    pm.test(\"amount of tnx correctly! \" + tnx_obj.amount, function () {",
									"        pm.expect(tnx_obj.amount == jsData.data.amount).to.be.true;",
									"    });",
									"",
									"    pm.test(\"value_at of tnx correctly! \" + tnx_obj.value_at.substring(0,19), function () {",
									"        let act_value_at = jsData.data.value_at.substring(0,19);",
									"        console.log(\"actual value_at: \" + act_value_at);",
									"        pm.expect(tnx_obj.value_at.substring(0,16) == act_value_at.substring(0,16)).to.be.true;",
									"    });",
									"",
									"    pm.test(\"object_type of tnx correctly! \" + tnx_obj.object_type, function () {",
									"        pm.expect(tnx_obj.object_type).to.eql(jsData.data.object_type);",
									"    });",
									"",
									"    pm.test(\"object_id of tnx correctly! \" + tnx_obj.object_id, function () {",
									"        pm.expect(tnx_obj.object_id).to.eql(jsData.data.object_id);",
									"    });",
									"",
									"    postman.setNextRequest(\"get_list_payment\"); // get_list_payment",
									"} else {",
									"    console.log(\"Can't get internal contact detail, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{finone_url}}/fo-ledger/api/v1/transaction/get-one/{{C-tnx_id}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-ledger",
								"api",
								"v1",
								"transaction",
								"get-one",
								"{{C-tnx_id}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.request.headers.add({",
							" key: \"authorization\",",
							" value: \"Bearer \" + pm.environment.get(\"C-userToken\")",
							"});",
							"",
							"pm.request.headers.add({",
							" key: \"Content-Type\",",
							" value: \"application/json\"",
							"});"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "posting",
			"item": [
				{
					"name": "get_list_posting",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let page = pm.environment.get(\"C-page\");",
									"",
									"if(!page){",
									"    page = 1;",
									"    pm.environment.set(\"C-page\",page);",
									"",
									"    let page_size = 20;",
									"    pm.environment.set(\"C-page_size\",page_size);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"/**",
									" * object_type: transaction, invoice",
									" * object_id => id respective with object_type (tnx_id, invoice_id)",
									" * object_id_ref => use for invoice with product/item (product_id, item_id)",
									" * is_credit",
									" * created_at",
									" * value_at",
									" */",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = JSON.parse(responseBody);",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let total_pages = 1;",
									"    let total_records = 0;",
									"    try {",
									"        total_pages = jsData.meta.total_pages;",
									"        total_records = jsData.meta.total_rows;",
									"    } catch {",
									"        console.log(\"currently, this branch with null data\");",
									"    }",
									"    let page = pm.environment.get(\"C-page\");",
									"",
									"    let list_posting, old_list_posting;",
									"    switch(testcase){",
									"        case 2:",
									"            list_posting = pm.environment.get(\"C-list_posting\");",
									"            if(!list_posting){",
									"                list_posting = [];",
									"            }",
									"            break;",
									"        case 4:",
									"            old_list_posting = pm.environment.get(\"C-old_list_posting\");",
									"            if(!old_list_posting){",
									"                old_list_posting = pm.environment.get(\"C-list_posting\");",
									"                pm.environment.unset(\"C-list_posting\");",
									"                pm.environment.set(\"C-old_list_posting\",old_list_posting);",
									"            }",
									"",
									"            list_posting = pm.environment.get(\"C-list_posting\");",
									"            if(!list_posting){",
									"                list_posting = [];",
									"            }",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow\");",
									"            break;",
									"    }",
									"",
									"    for(let item in jsData.data){",
									"        list_posting[list_posting.length] = {",
									"            \"posting_id\":jsData.data[item].id,",
									"            \"account_id\":jsData.data[item].account_id,",
									"            \"amount\":jsData.data[item].amount,",
									"            \"branch_id\":jsData.data[item].branch_id,",
									"            \"created_at\":jsData.data[item].created_at,",
									"            \"currency\":jsData.data[item].currency,",
									"            \"deleted_at\":jsData.data[item].deleted_at,",
									"            \"is_credit\":jsData.data[item].is_credit,",
									"            \"is_final_status\":jsData.data[item].is_final_status,",
									"            \"object_id_ref\":jsData.data[item].object_id_ref,",
									"            \"object_id\":jsData.data[item].object_id,",
									"            \"object_type\":jsData.data[item].object_type,",
									"            // \"value_at\":jsData.data[item].value_at,",
									"            \"short_desc\":jsData.data[item].short_desc",
									"        }",
									"    }",
									"    pm.environment.set(\"C-list_posting\",list_posting);",
									"",
									"    let configs = pm.environment.get(\"C-configs\");",
									"    if(page >= total_pages || page >= configs.limit_page){",
									"        // must clear page & page_size",
									"        pm.environment.unset(\"C-page\");",
									"        pm.environment.unset(\"C-page_size\");",
									"",
									"        switch(testcase){",
									"            case 2:",
									"                pm.test(\"Got all posting! \" + list_posting.length, function () {",
									"                    pm.expect(list_posting.length > 0).to.be.true;",
									"                });",
									"                pm.environment.set(\"C-total_records\",total_records);",
									"",
									"                postman.setNextRequest(\"get_list_payment\"); // get_list_payment",
									"                break;",
									"            case 4:",
									"                let old_total_records = pm.environment.get(\"C-total_records\");",
									"                let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"                let account_payable = pm.environment.get(\"C-account_payable\");",
									"                // console.log(\"account_payable: \",account_payable);",
									"                let count = 0;",
									"                let foundAll = false;",
									"",
									"                pm.test(\"Have 2 new records\", function () {",
									"                    console.log(\"old: \" + old_total_records);",
									"                    console.log(\"new: \" + total_records);",
									"                    pm.expect(total_records == old_total_records + 2).to.be.true;",
									"                });",
									"",
									"                for(let i in list_posting){",
									"                    if(list_posting[i].object_type == \"transaction\" && list_posting[i].object_id == tnx_obj.tnx_id){",
									"                        // console.log(\"list_posting[i]: \", list_posting[i]);",
									"                        if(!list_posting[i].is_credit){",
									"                            count++;",
									"                            pm.test(\"Found account_payable for debit\", function () {",
									"                                pm.expect(list_posting[i].account_id == account_payable.id).to.be.true;",
									"                            });",
									"",
									"                            pm.test(\"--- amount correctly \" + tnx_obj.amount, function () {",
									"                                console.log(\"actual: \" + list_posting[i].amount);",
									"                                pm.expect(list_posting[i].amount.toFixed(2) == tnx_obj.amount.toFixed(2)).to.be.true;",
									"                            });",
									"                        } else {",
									"                            count++;",
									"                            pm.test(\"Found account_debit for credit\", function () {",
									"                                // console.log(\"account_debit: \" + tnx_obj.account_debit);",
									"                                pm.expect(list_posting[i].account_id == tnx_obj.account_debit).to.be.true;",
									"                            });",
									"",
									"                            pm.test(\"--- amount correctly \" + tnx_obj.amount, function () {",
									"                                console.log(\"actual: \" + list_posting[i].amount);",
									"                                pm.expect(list_posting[i].amount.toFixed(2) == tnx_obj.amount.toFixed(2)).to.be.true;",
									"                            });",
									"                        }",
									"",
									"                        if(count == 2){",
									"                            foundAll = true;",
									"                            break;",
									"                        }",
									"                    }",
									"                }",
									"",
									"                pm.test(\"Found all posting\", function () {",
									"                    pm.expect(foundAll).to.be.true;",
									"                });",
									"",
									"                postman.setNextRequest(\"\"); // get_report_cash_flow",
									"                break;",
									"            default:",
									"                console.log(\"Missing flow, end test\");",
									"                postman.setNextRequest(null);",
									"                break;",
									"        }",
									"    } else {",
									"        page++;",
									"        pm.environment.set(\"C-page\",page);",
									"",
									"        console.log(\"view next page (\" + page + \") to get more posting\");",
									"        postman.setNextRequest(\"get_list_posting\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get list posting, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-ledger/api/v1/posting/get-list?page={{C-page}}&page_size={{C-page_size}}&search=&sort=",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-ledger",
								"api",
								"v1",
								"posting",
								"get-list"
							],
							"query": [
								{
									"key": "page",
									"value": "{{C-page}}"
								},
								{
									"key": "page_size",
									"value": "{{C-page_size}}"
								},
								{
									"key": "search",
									"value": ""
								},
								{
									"key": "sort",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.request.headers.add({",
							" key: \"authorization\",",
							" value: \"Bearer \" + pm.environment.get(\"C-userToken\")",
							"});",
							"",
							"pm.request.headers.add({",
							" key: \"Content-Type\",",
							" value: \"application/json\"",
							"});"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "payment",
			"item": [
				{
					"name": "get_list_payment",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = JSON.parse(responseBody);",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let configs = pm.environment.get(\"C-configs\");",
									"    let total_payment = null;",
									"    try {",
									"        total_payment = jsData.meta.total_rows;",
									"    } catch {",
									"        console.log(\"Can't get total payment\");",
									"    }",
									"",
									"    switch(testcase){",
									"        case 2:",
									"           pm.test(\"Got total payment! \" + total_payment, function () {",
									"                pm.expect(total_payment != null).to.be.true;",
									"            });",
									"            pm.environment.set(\"C-total_payment\",total_payment);",
									"            console.log(\"total_payment: \" + total_payment);",
									"",
									"            postman.setNextRequest(\"get_list_transaction\"); // get_list_transaction",
									"            break;",
									"        case 4:",
									"            let old_total_payment = pm.environment.get(\"C-total_payment\");",
									"            let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"            let payment_obj = pm.environment.get(\"C-payment_obj\");",
									"",
									"            pm.test(\"Total tnx increase 1\", function () {",
									"                console.log(\"Actual: \" + total_payment);",
									"                console.log(\"Expected: \" + (old_total_payment + 1));",
									"                pm.expect(total_payment == old_total_payment + 1).to.be.true;",
									"            });",
									"",
									"            let isFound = false;",
									"            let act_payment_obj = null;",
									"            for(let i in jsData.data){",
									"                if(tnx_obj.payment_id == jsData.data[i].id){",
									"                    isFound = true;",
									"                    act_payment_obj = jsData.data[i];",
									"                    console.log(\"act_payment_obj: \", act_payment_obj);",
									"                    break;",
									"                }",
									"            }",
									"",
									"            pm.test(\"Found new payment\", function () {",
									"                pm.expect(isFound).to.be.true;",
									"            });",
									"",
									"            if(act_payment_obj != null){",
									"                pm.test(\"after_fee_amount of payment correctly! \" + tnx_obj.amount, function () {",
									"                    console.log(\"act: \" + act_payment_obj.after_fee_amount);",
									"                    pm.expect(tnx_obj.amount == act_payment_obj.after_fee_amount).to.be.true;",
									"                });",
									"                // tnx_obj.after_fee_amount = act_payment_obj.after_fee_amount;",
									"",
									"                pm.test(\"fee_amount of payment is 0\", function () { // sẽ handle fee_amount ở va",
									"                    pm.expect(0 == act_payment_obj.fee_amount).to.be.true;",
									"                });",
									"                tnx_obj.fee_amount = act_payment_obj.fee_amount;",
									"",
									"                pm.test(\"status of payment is success! \", function () {",
									"                    console.log(\"act: \" + act_payment_obj.status);",
									"                    pm.expect(\"success\" == act_payment_obj.status).to.be.true;",
									"                });",
									"",
									"                pm.test(\"description of payment correctly! \" + tnx_obj.description, function () {",
									"                    console.log(\"act: \" + act_payment_obj.description);",
									"                    pm.expect(tnx_obj.description == act_payment_obj.description).to.be.true;",
									"                });",
									"",
									"                pm.test(\"account_id of payment is: \" + tnx_obj.account_debit, function () {",
									"                    console.log(\"act: \" + act_payment_obj.account_id);",
									"                    pm.expect(tnx_obj.account_debit == act_payment_obj.account_id).to.be.true;",
									"                });",
									"",
									"                pm.test(\"value_at of payment correctly! \" + tnx_obj.value_at, function () {",
									"                    let act_value_at = act_payment_obj.value_at;",
									"                    console.log(\"actual value_at: \" + act_value_at.substring(0,19));",
									"                    pm.expect(tnx_obj.value_at.substring(0,16) == act_value_at.substring(0,16)).to.be.true; // tạm thời lấy mốc giờ +7 nên fix cứng, sau này sẽ dùng biến",
									"                });",
									"",
									"                pm.test(\"object_type of payment correctly! \" + tnx_obj.object_type, function () {",
									"                    pm.expect(tnx_obj.object_type).to.eql(act_payment_obj.object_type);",
									"                });",
									"",
									"                pm.test(\"object_id of payment correctly! \" + tnx_obj.object_id, function () {",
									"                    pm.expect(tnx_obj.object_id).to.eql(act_payment_obj.object_id);",
									"                });",
									"",
									"                // pm.test(\"payment_method of payment is \" + configs.test_payment_method, function () {",
									"                //     pm.expect(configs.test_payment_methodod).to.eql(act_payment_obj.payment_method);",
									"                // });",
									"",
									"                pm.environment.set(\"C-tnx_obj\",tnx_obj);",
									"",
									"                postman.setNextRequest(\"get_payment_detail\"); // get_payment_detail",
									"            } else {",
									"                postman.setNextRequest(\"get_list_payment_account\"); // get_list_payment_account",
									"            }",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get list payment, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-ledger/api/v1/payment/get-list?business_id={{C-business_id}}&page=1&page_size=20&sort",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-ledger",
								"api",
								"v1",
								"payment",
								"get-list"
							],
							"query": [
								{
									"key": "business_id",
									"value": "{{C-business_id}}"
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "page_size",
									"value": "20"
								},
								{
									"key": "sort",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get_payment_detail",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"let payment_id = tnx_obj.payment_id;",
									"console.log(\"view detail payment: \" + payment_id);",
									"",
									"pm.environment.set(\"C-payment_id\",payment_id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    // let testcase = pm.environment.get(\"C-testcase\");",
									"    let configs = pm.environment.get(\"C-configs\");",
									"    // console.log(\"Debug: \" + JSON.stringify(jsData));",
									"",
									"    let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"",
									"    // pm.test(\"after_fee_amount of payment correctly! \" + tnx_obj.after_fee_amount, function () {",
									"    //     pm.expect(tnx_obj.after_fee_amount == jsData.data.after_fee_amount).to.be.true;",
									"    // });",
									"",
									"    pm.test(\"fee_amount of payment is \" + tnx_obj.fee_amount, function () { // sẽ handle fee_amount ở va",
									"        pm.expect(tnx_obj.fee_amount == jsData.data.fee_amount).to.be.true;",
									"    });",
									"",
									"    pm.test(\"value_at of payment correctly! \" + tnx_obj.value_at, function () {",
									"        let act_value_at = jsData.data.value_at;",
									"        console.log(\"actual value_at: \" + act_value_at);",
									"        pm.expect(tnx_obj.value_at.substring(0,16) == act_value_at.substring(0,16)).to.be.true;",
									"    });   ",
									"",
									"    pm.test(\"status of payment is success! \", function () {",
									"        console.log(\"act: \" + jsData.data.status);",
									"        pm.expect(\"success\" == jsData.data.status).to.be.true;",
									"    });",
									"",
									"    pm.test(\"account_id of payment is: \" + tnx_obj.account_debit, function () {",
									"        console.log(\"act: \" + jsData.data.account_id);",
									"        pm.expect(tnx_obj.account_debit == jsData.data.account_id).to.be.true;",
									"    });",
									"",
									"    pm.test(\"object_type of payment correctly! \" + tnx_obj.object_type, function () {",
									"        pm.expect(tnx_obj.object_type).to.eql(jsData.data.object_type);",
									"    });",
									"",
									"    pm.test(\"object_id of payment correctly! \" + tnx_obj.object_id, function () {",
									"        pm.expect(tnx_obj.object_id).to.eql(jsData.data.object_id);",
									"    });",
									"",
									"    // pm.test(\"payment_method of payment correctly! \" + configs.test_payment_method, function () {",
									"    //     pm.expect(configs.test_payment_method).to.eql(jsData.data.payment_method);",
									"    // });",
									"",
									"    postman.setNextRequest(\"get_list_payment_account\"); // get_list_payment_account",
									"} else {",
									"    console.log(\"Can't get internal contact detail, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-ledger/api/v1/payment/get-one/{{C-payment_id}}?business_id={{C-business_id}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-ledger",
								"api",
								"v1",
								"payment",
								"get-one",
								"{{C-payment_id}}"
							],
							"query": [
								{
									"key": "business_id",
									"value": "{{C-business_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "request_cash_out",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"function toISOStringWithTimezone(date, offset) {",
									"    const tzOffset = offset * 60; // offset in minutes",
									"    const localISOTime = new Date(date.getTime() - (date.getTimezoneOffset() * 60000));",
									"    const adjustedTime = new Date(localISOTime.getTime() + (tzOffset * 60000));",
									"    const isoString = adjustedTime.toISOString().slice(0, -1); // remove the 'Z' at the end",
									"    ",
									"    const sign = offset >= 0 ? \"+\" : \"-\";",
									"    const absOffset = Math.abs(offset);",
									"    const hours = String(Math.floor(absOffset)).padStart(2, '0');",
									"    const minutes = String(absOffset % 1 * 60).padStart(2, '0');",
									"",
									"    return `${isoString}${sign}${hours}:${minutes}`;",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    console.log(\"debug: \", jsData); // hook",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let po_obj = pm.environment.get(\"C-po_obj\");",
									"",
									"    let request_cash_out_obj = pm.environment.get(\"C-request_cash_out_obj\");",
									"    let payment_method = pm.environment.get(\"C-payment_method\");",
									"    let list_bank_account = pm.environment.get(\"C-list_bank_account\");",
									"",
									"    // pm.test(\"request_amount correctly \" + request_cash_out_obj.amount, function () {",
									"    //     console.log(\"act: \" + jsData.data.payment_info.request_amount);",
									"    //     pm.expect(request_cash_out_obj.amount == jsData.data.payment_info.request_amount).to.be.true;",
									"    // });",
									"",
									"    // pm.test(\"account_number correctly \" + payment_method.bank_account.account_number, function () {",
									"    //     console.log(\"act: \" + jsData.data.linking_bank_account.account_number);",
									"    //     pm.expect(jsData.data.linking_bank_account.account_number == payment_method.bank_account.account_number).to.be.true;",
									"    // });",
									"",
									"    // pm.test(\"account_name correctly \" + payment_method.bank_account.account_name, function () {",
									"    //     console.log(\"act: \" + jsData.data.linking_bank_account.account_name);",
									"    //     pm.expect(jsData.data.linking_bank_account.account_name == payment_method.bank_account.account_name).to.be.true;",
									"    // });",
									"",
									"    // pm.test(\"bank_account_id correctly \" + request_cash_out_obj.bank_account_id, function () {",
									"    //     console.log(\"act: \" + jsData.data.bank_account_id);",
									"    //     pm.expect(jsData.data.bank_account_id == request_cash_out_obj.bank_account_id).to.be.true;",
									"    // });",
									"",
									"    let today = new Date();",
									"    let account_payable = pm.environment.get(\"C-account_payable\");",
									"    let account_debit_id;",
									"    // console.log(\"payment_method:\",payment_method);",
									"    // console.log(\"=======================\");",
									"    // console.log(\"list_bank_account:\",list_bank_account);",
									"    for(let i in list_bank_account){",
									"        if(list_bank_account[i].account_name == payment_method.bank_account.account_name && list_bank_account[i].external_account_id == payment_method.bank_account.id){",
									"            account_debit_id = list_bank_account[i].account_id;",
									"            break;",
									"        }",
									"    }",
									"    let tnx_obj = {",
									"        \"object_id\":po_obj.po_id,",
									"        \"object_type\":\"po\",",
									"        \"account_credit\":account_payable.id,",
									"        \"account_debit\":account_debit_id, // đợi update API get list payment account",
									"        \"amount\":request_cash_out_obj.amount,",
									"        \"branch_id\":pm.environment.get(\"C-branch_id\"),",
									"        \"txn_type\":\"out\",",
									"        \"request_cash_out_id\":jsData.data.id,",
									"        \"bank_payment_id\":jsData.data.id,",
									"        \"bank_payment_number\":jsData.data.bank_payment_number,",
									"        // \"payment_request_code\":jsData.data.payment_request_code,",
									"        // \"payment_info\":jsData.data.payment_info,",
									"        \"description\":\"TTINV \" + po_obj.system_code,",
									"        // \"payment_note\":jsData.data.payment_info.payment_note,",
									"        \"payment_method\":payment_method.key,",
									"        \"note\":request_cash_out_obj.note,",
									"        // \"linking_bank_account\":jsData.data.linking_bank_account,",
									"        \"value_at\":toISOStringWithTimezone(today,0)",
									"    }",
									"    pm.environment.set(\"C-tnx_obj\",tnx_obj);",
									"    console.log(\"tnx_obj\",tnx_obj);",
									"",
									"    let configs = pm.environment.get(\"C-configs\");",
									"    if(configs.test_payment_method == \"bank_transfer\" || configs.test_payment_method == \"va_galaxy\"){",
									"        postman.setNextRequest(\"confirm_cash_out\"); // hook_payment_via_finesys, confirm_cash_out",
									"    } else {",
									"        testcase++;",
									"        pm.environment.set(\"C-testcase\",testcase);",
									"        postman.setNextRequest(\"get_list_transaction\"); // get_list_transaction",
									"    }",
									"} else {",
									"    console.log(\"Can't request cash out, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// ============================= random number between min and max",
									"function getRandomInt(min, max) {",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let configs = pm.environment.get(\"C-configs\");",
									"let payment_method = pm.environment.get(\"C-payment_method\");",
									"let po_obj = pm.environment.get(\"C-po_obj\");",
									"console.log(\"po_obj: \", po_obj);",
									"",
									"let amount;",
									"if(configs.is_pay_full){",
									"    amount = po_obj.payment_due_amount;",
									"    pm.environment.set(\"C-isFullyPaid\",true);",
									"} else if(po_obj.total_amount > 100000){",
									"    amount = Math.round(getRandomInt(po_obj.total_amount/3,po_obj.total_amount/2));",
									"} else {",
									"    if(po_obj.total_amount < 20000){",
									"        amount = po_obj.total_amount; // rơi vào case này thì phải fully_paid;",
									"        pm.environment.set(\"C-isFullyPaid\",true);",
									"    } else {",
									"        amount = getRandomInt(10,20)*1000;",
									"    }",
									"}",
									"",
									"let payload = {",
									"    \"account_id\": payment_method.bank_account.id,",
									"    \"amount\": amount,",
									"    \"beneficiary_account_name\":\"ACCOUNT 22550369\", // fix tạm 1 external account nhận => trên prod sẽ có API verify trước",
									"    \"beneficiary_account_number\": \"0245952489218\",",
									"    \"beneficiary_bank_id\": \"313\",",
									"    // \"category_id\": 0,",
									"    \"currency_code\": \"VND\",",
									"    \"is_internal_transfer\": false,",
									"    \"note\": \"THANH TOÁN po \" + po_obj.system_code,",
									"    \"so_system_code\": \"po|\" + po_obj.system_code // nếu là bill thì bill|system_code",
									"}",
									"",
									"console.log(\"payload: \",payload);",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));",
									"pm.environment.set(\"C-request_cash_out_obj\",payload);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-banking/api/v1/cash-out/request",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-banking",
								"api",
								"v1",
								"cash-out",
								"request"
							]
						}
					},
					"response": []
				},
				{
					"name": "confirm_cash_out",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"let payload = {",
									"    \"id\": tnx_obj.bank_payment_id,",
									"    \"pass_code\": \"123456\" // hard code",
									"}",
									"",
									"console.log(\"payload: \",payload);",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));",
									"// pm.environment.set(\"C-confirm_cash_out_obj\",payload);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    console.log(\"debug: \", jsData); // hook",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"",
									"    tnx_obj.provider_transaction_number = jsData.data.provider_transaction_number;",
									"    tnx_obj.provider_payment_number = jsData.data.provider_payment_number;",
									"    pm.environment.set(\"C-tnx_obj\",tnx_obj);",
									"",
									"    postman.setNextRequest(\"hook_payment_via_finesys\"); // hook_payment_via_finesys",
									"} else {",
									"    console.log(\"Can't confirm cash-out, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-banking/api/v1/cash-out/verify",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-banking",
								"api",
								"v1",
								"cash-out",
								"verify"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "hook",
			"item": [
				{
					"name": "hook_payment_via_finesys",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function toISOStringWithTimezone(date, offset) {",
									"    const tzOffset = offset * 60; // offset in minutes",
									"    const localISOTime = new Date(date.getTime() - (date.getTimezoneOffset() * 60000));",
									"    const adjustedTime = new Date(localISOTime.getTime() + (tzOffset * 60000));",
									"    const isoString = adjustedTime.toISOString().slice(0, -1); // remove the 'Z' at the end",
									"    ",
									"    const sign = offset >= 0 ? \"+\" : \"-\";",
									"    const absOffset = Math.abs(offset);",
									"    const hours = String(Math.floor(absOffset)).padStart(2, '0');",
									"    const minutes = String(absOffset % 1 * 60).padStart(2, '0');",
									"",
									"    return `${isoString}${sign}${hours}:${minutes}`;",
									"}",
									"",
									"// ============================= random characters",
									"function randomChars(length) {",
									"    var result           = '';",
									"    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';",
									"    var charactersLength = characters.length;",
									"    for ( var i = 0; i < length; i++ ) {",
									"      result += characters.charAt(Math.floor(Math.random() * ",
									" charactersLength));",
									"   }",
									"   return result;",
									"}",
									"",
									"// ============================= random number between min and max",
									"function getRandomInt(min, max) {",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let payment_method = pm.environment.get(\"C-payment_method\");",
									"console.log(\"payment_method: \", payment_method);",
									"let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"let po_obj = pm.environment.get(\"C-po_obj\");",
									"",
									"let date = new Date();",
									"let today = toISOStringWithTimezone(date,0).substring(0,19).replace(\"T\",\" \")",
									"let next_day_stp = Math.floor(date.getTime()/1000) + 24*60*60;",
									"let next_day = new Date(next_day_stp*1000);",
									"let term_next = toISOStringWithTimezone(next_day,0).substring(0,19).replace(\"T\",\" \")",
									"",
									"let base_fee_amount = 2000 + Math.round(tnx_obj.amount * 0.02);",
									"let net_amount = tnx_obj.amount - base_fee_amount;",
									"let redirect_url = \"https://book-dev.finan.one/pay/\" + pm.environment.get(\"C-business_id\") + \"/po/\" + po_obj.system_code + \"/\" + tnx_obj.payment_request_code;",
									"",
									"let configs = pm.environment.get(\"C-configs\");",
									"",
									"// Hook cash out",
									"let payload = {",
									"    \"business_id\": \"B00200000001\", // ko care",
									"    \"notify_data\": {",
									"        \"bank_code\": \"616\", // hard code cho shinhan, sau này support thêm bank thì get-list-bank để lấy",
									"        \"account_name\": payment_method.bank_account.account_name, //",
									"        \"currency_code\": \"704\", // => fix vnd",
									"        \"account_number\": payment_method.bank_account.account_number.substring(3,payment_method.bank_account.account_number.length), //",
									"        \"payment_number\": tnx_obj.provider_payment_number, // xử lý cho po",
									"        \"payment_status\": \"success\",",
									"        \"transaction_at\": today, // get current",
									"        \"adjusted_amount\": 29450,  // ko care (nếu có vấn đề thì tính toán lại)",
									"        \"transaction_code\": \"T\" + getRandomInt(1000,9999),  // ko care",
									"        \"transaction_note\": tnx_obj.note,  // cần check lại",
									"        \"transaction_type\": \"DR\", // DR - debit: cash-out, credit: cash-in",
									"        \"transaction_amount\": tnx_obj.amount, // => tnx amount",
									"        \"transaction_number\": tnx_obj.provider_transaction_number,",
									"        \"bank_account_number\": payment_method.bank_account.account_number, // => bank_account coa",
									"        \"payment_failed_reason\": \"\"",
									"    },",
									"    \"notify_type\": \"payment_changed\"",
									"}",
									"",
									"// pm.environment.set(\"C-tnx_obj\",tnx_obj);",
									"",
									"console.log(\"payload: \",payload);",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));",
									"pm.environment.set(\"C-payment_obj\",payload);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    console.log(\"debug: \", jsData); // hook",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"",
									"    testcase++;",
									"    pm.environment.set(\"C-testcase\",testcase);",
									"    postman.setNextRequest(\"get_list_transaction\"); // get_list_transaction",
									"} else {",
									"    console.log(\"Can't call hook, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-banking/hook/v1/finesys",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-banking",
								"hook",
								"v1",
								"finesys"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "home-report",
			"item": [
				{
					"name": "get_report_cash_flow",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ============================= sort by key",
									"function sortByKey(array, key, type) {",
									"    if(type == \"asc\"){",
									"        return array.sort(function(a, b) {",
									"            var x = a[key]; var y = b[key];",
									"            return ((x > y) ? -1 : ((x < y) ? 1 : 0));",
									"        });",
									"    } else {",
									"        return array.sort(function(a, b) {",
									"            var x = a[key]; var y = b[key];",
									"            return ((x < y) ? -1 : ((x > y) ? 1 : 0));",
									"        });",
									"    }",
									"}",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let report_cash_flow = null;",
									"    try {",
									"        report_cash_flow = jsData.data;",
									"        /**",
									"         * db_data",
									"         * sum_card_data",
									"         * top_income_categories_data",
									"         * full_income_categories_data",
									"         * top_expense_categories_data",
									"         * full_expense_categories_data",
									"         */",
									"    } catch {",
									"        console.log(\"Can't get report cash_flow data\");",
									"    }",
									"",
									"    let total_income = 0, total_expense = 0;",
									"    let income_list = [], expense_list = [];",
									"    let exp_sum_card_data;",
									"    let full_income_categories_data;",
									"    if(\"full_income_categories_data\" in jsData.data){",
									"        full_income_categories_data = JSON.parse(JSON.stringify(jsData.data.full_income_categories_data));",
									"    } else {",
									"        full_income_categories_data = [];",
									"    }",
									"    let full_expense_categories_data;",
									"    if(\"full_expense_categories_data\" in jsData.data){",
									"        full_expense_categories_data = JSON.parse(JSON.stringify(jsData.data.full_expense_categories_data));",
									"    } else {",
									"        full_expense_categories_data = [];",
									"    }",
									"    switch(testcase){",
									"        case 2:",
									"            pm.environment.set(\"C-report_cash_flow\",report_cash_flow);",
									"            // console.log(\"report_cash_flow: \",report_cash_flow);",
									"",
									"            // ================================================ bonus check current data",
									"            // try {",
									"            //     for(let i in jsData.data.db_data){",
									"            //         if(jsData.data.db_data[i].coa_type == \"income\"){",
									"            //             income_list[income_list.length] = JSON.parse(JSON.stringify(jsData.data.db_data[i]));",
									"            //             total_income += jsData.data.db_data[i].current_income;",
									"            //         } else if (jsData.data.db_data[i].coa_type == \"expense\"){",
									"            //             expense_list[expense_list.length] = JSON.parse(JSON.stringify(jsData.data.db_data[i]));",
									"            //             total_expense += jsData.data.db_data[i].current_expense;",
									"            //         }",
									"            //     }",
									"            //     exp_sum_card_data = {",
									"            //         \"total_current_income\": total_income,",
									"            //         \"total_current_expense\": total_expense,",
									"            //         \"total_current_gap\": (total_income - total_expense)",
									"            //     }",
									"            //     console.log(\"exp_sum_card_data: \", exp_sum_card_data);",
									"",
									"            //     for(let i in income_list){",
									"            //         income_list[i].percentage = parseFloat((income_list[i].current_income/total_income*100).toFixed(2));",
									"            //         delete income_list[i]['coa_type'];",
									"            //         delete income_list[i]['current_income'];",
									"            //     }",
									"            //     console.log(\"income_list: \", sortByKey(income_list,\"percentage\",\"asc\"));",
									"",
									"            //     for(let i in expense_list){",
									"            //         expense_list[i].percentage = parseFloat((expense_list[i].current_expense/total_expense*100).toFixed(2));",
									"            //         delete expense_list[i]['coa_type'];",
									"            //         delete expense_list[i]['current_expense'];",
									"            //     }",
									"            //     console.log(\"expense_list: \", sortByKey(expense_list,\"percentage\",\"asc\"));",
									"",
									"            //     pm.test(\"sum_card_data correctly\", function () {",
									"            //         console.log(\"act data: \",JSON.stringify(jsData.data.sum_card_data));",
									"            //         console.log(\"exp data: \",JSON.stringify(exp_sum_card_data));",
									"            //         pm.expect(JSON.stringify(jsData.data.sum_card_data) == JSON.stringify(exp_sum_card_data)).to.be.true;",
									"            //     });",
									"",
									"            //     for(let i in full_income_categories_data){",
									"            //         delete full_income_categories_data[i]['current_amount'];",
									"            //     }",
									"            //     pm.test(\"full_income_categories_data correctly\", function () {",
									"            //         console.log(\"act data: \",JSON.stringify(full_income_categories_data));",
									"            //         console.log(\"exp data: \",JSON.stringify(income_list));",
									"            //         pm.expect(JSON.stringify(full_income_categories_data) == JSON.stringify(income_list)).to.be.true;",
									"            //     });",
									"",
									"            //     for(let i in full_expense_categories_data){",
									"            //         delete full_expense_categories_data[i]['current_amount'];",
									"            //     }",
									"            //     pm.test(\"full_expense_categories_data correctly\", function () {",
									"            //         console.log(\"act data: \",JSON.stringify(full_expense_categories_data));",
									"            //         console.log(\"exp data: \",JSON.stringify(expense_list));",
									"            //         pm.expect(JSON.stringify(full_expense_categories_data) == JSON.stringify(expense_list)).to.be.true;",
									"            //         // pm.expect(jsData.data.full_expense_categories_data).to.deep.include(expense_list);",
									"            //     });",
									"            // } catch {",
									"            //     console.log(\"Null data\");",
									"            // }",
									"            // ================================================ ",
									"",
									"            postman.setNextRequest(\"get_report_account_receivable_unpaid\"); // get_report_account_receivable_unpaid",
									"            break;",
									"        case 4: case 6:",
									"            let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"            let old_report_cash_flow = pm.environment.get(\"C-report_cash_flow\");",
									"",
									"            /**",
									"             * Đạt PO update 22Mar: đầu lấy COA ko phải từ income & expense nữa mà lấy từ cash & Bank",
									"             * => đợi PO update lại rule",
									"             */",
									"            // pm.test(\"Nothing happen!!!\", function () {",
									"            //     console.log(\"old: \" + JSON.stringify(old_report_cash_flow));",
									"            //     console.log(\"new: \" + JSON.stringify(report_cash_flow));",
									"            //     pm.expect(JSON.stringify(report_cash_flow) == JSON.stringify(old_report_cash_flow)).to.be.true;",
									"            // });",
									"",
									"            postman.setNextRequest(\"get_report_account_receivable_unpaid\"); // get_report_account_receivable_unpaid",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get report cash_flow, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"// lấy full tháng hiện tại",
									"let today = new Date();",
									"let start_current_month = new Date(today.getFullYear(), today.getMonth(), 1);",
									"let end_current_month = new Date(today.getFullYear(), today.getMonth() + 1, 1);",
									"",
									"// lấy full tháng trước",
									"let start_last_month = new Date(today.getFullYear(), today.getMonth() - 1, 1);",
									"let end_last_month = new Date(today.getFullYear(), today.getMonth(), 1);",
									"",
									"// lấy full ngày hiện tại",
									"// let firstDay = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0 ,0, 0);",
									"// let lastDay = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 23, 59 ,59, 0);",
									"",
									"// lấy n ngày đến hiện tại",
									"// let firstDayTimestamp = Math.floor(firstDay.getTime()/1000) - 2*24*60*60;",
									"// let start_day_ago = new Date(firstDayTimestamp*1000);",
									"",
									"let current_period_start = start_current_month.toISOString();",
									"let current_period_end = end_current_month.toISOString();",
									"let previous_period_start = start_last_month.toISOString();",
									"let previous_period_end = end_last_month.toISOString();",
									"",
									"/**",
									" * currently, display error if missing previous_period_start & previous_period_end or them = \"\";",
									" */",
									"let payload = {",
									"    \"branch_id\": pm.environment.get(\"C-branch_id\"),",
									"    \"business_id\": parseInt(pm.environment.get(\"C-business_id\")),",
									"    \"current_period_start\": current_period_start,",
									"    \"current_period_end\": current_period_end,",
									"    \"previous_period_start\": previous_period_start,",
									"    \"previous_period_end\": previous_period_end",
									"    // \"timezone\": \"Asia/Ho_Chi_Minh\" // UTC, Asia/Ho_Chi_Minh == UTC+07:00",
									"}",
									"",
									"console.log(\"payload: \",payload);",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));",
									"",
									"pm.environment.set(\"C-current_period_start\",current_period_start);",
									"pm.environment.set(\"C-current_period_end\",current_period_end);",
									"pm.environment.set(\"C-previous_period_start\",previous_period_start);",
									"pm.environment.set(\"C-previous_period_end\",previous_period_end);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-ledger/api/v1/report/cash-flow",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-ledger",
								"api",
								"v1",
								"report",
								"cash-flow"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_report_account_receivable_unpaid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ============================= get last day (Sun is end of Week)",
									"function getLastDayOfCurrentWeek() {",
									"    const now = new Date();",
									"    const lastDay = new Date(now);",
									"    const daysUntilSunday = 7 - now.getDay();  // if Saturday is end, change 7 => 6",
									"    lastDay.setDate(now.getDate() + daysUntilSunday);",
									"    return lastDay;",
									"}",
									"",
									"// ============================= get first day (Sun is end of Week)",
									"function getFirstDayOfCurrentWeek() {",
									"    const now = new Date();",
									"    const firstDay = new Date(now);",
									"    firstDay.setDate(now.getDate() - now.getDay() + 1);  // if Saturday is end, remove +1",
									"    return firstDay;",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let unpaid_account_receivable = null;",
									"    try {",
									"        unpaid_account_receivable = jsData.data.unpaid_amount_lifetime_categories;",
									"    } catch {",
									"        console.log(\"Can't get data\");",
									"    }",
									"",
									"    switch(testcase){",
									"        case 2:",
									"            pm.test(\"Got unpaid_account_receivable data\", function () {",
									"                pm.expect(unpaid_account_receivable != null).to.be.true;",
									"            });",
									"            pm.environment.set(\"C-unpaid_account_receivable\",unpaid_account_receivable);",
									"            // console.log(\"unpaid_account_receivable: \",unpaid_account_receivable);",
									"",
									"            postman.setNextRequest(\"get_report_account_receivable_customer\"); //get_report_account_receivable_customer",
									"            break;",
									"        case 4: case 6:",
									"            let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"            let invoice_obj = pm.environment.get(\"C-invoice_obj\");",
									"            let old_data = pm.environment.get(\"C-unpaid_account_receivable\");",
									"            let paid_amount = parseFloat(tnx_obj.amount);",
									"",
									"            // unpaid_total",
									"            pm.test(\"Total unpaid decrease \" + paid_amount, function () {",
									"                console.log(\"old: \" + old_data.unpaid_total);",
									"                console.log(\"new: \" + unpaid_account_receivable.unpaid_total);",
									"                pm.expect(unpaid_account_receivable.unpaid_total.toFixed(2) == (old_data.unpaid_total - paid_amount).toFixed(2)).to.be.true;",
									"            });",
									"",
									"            let due_date = new Date(invoice_obj.due_at);",
									"            let due_date_timestamp = Math.floor(due_date.getTime()/1000);",
									"            let today = new Date();",
									"            let today_timestamp = Math.floor(today.getTime()/1000);",
									"            let last_day_of_current_week = getLastDayOfCurrentWeek();",
									"            let last_day_of_current_week_stp = Math.floor(last_day_of_current_week.getTime()/1000);",
									"            let first_day_of_current_week = getFirstDayOfCurrentWeek();",
									"            let first_day_of_current_week_stp = Math.floor(first_day_of_current_week.getTime()/1000);",
									"            let due_type;",
									"            // console.log(\"debug: \" + (due_date_timestamp - today_timestamp));",
									"            if(due_date_timestamp > today_timestamp){",
									"                if(due_date_timestamp < last_day_of_current_week_stp){",
									"                    due_type = \"undue_n_7d\";",
									"                } else {",
									"                    due_type = \"undue\";",
									"                }",
									"            } else {",
									"                if(today_timestamp - due_date_timestamp > 90*24*60*60){",
									"                    due_type = \"overdue_over\";",
									"                } else if (today_timestamp - due_date_timestamp > 60*24*60*60){",
									"                    due_type = \"overdue_between\";",
									"                } else if (today_timestamp - due_date_timestamp > 30*24*60*60){",
									"                    due_type = \"overdue_less\";",
									"                } else {",
									"                    if(due_date_timestamp > first_day_of_current_week_stp){",
									"                        due_type = \"due_n_7d\";",
									"                    } else {",
									"                        due_type = \"due\";",
									"                    }",
									"                }",
									"            }",
									"            pm.environment.set(\"C-due_type\",due_type);",
									"",
									"            console.log(\"old: \",old_data);",
									"            console.log(\"new: \",unpaid_account_receivable);",
									"            switch(due_type){",
									"                case \"due\": case \"due_n_7d\":",
									"                    // unpaid_due",
									"                    pm.test(\"unpaid_due decrease \" + paid_amount, function () {",
									"                        console.log(\"old: \" + old_data.unpaid_due);",
									"                        console.log(\"expected: \" + (old_data.unpaid_due - paid_amount));",
									"                        console.log(\"new: \" + unpaid_account_receivable.unpaid_due);",
									"                        pm.expect(unpaid_account_receivable.unpaid_due.toFixed(2) == (old_data.unpaid_due - paid_amount).toFixed(2)).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_less",
									"                    pm.test(\"nothing happen unpaid_overdue_less\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_less == old_data.unpaid_overdue_less).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_between",
									"                    pm.test(\"nothing happen unpaid_overdue_between\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_between == old_data.unpaid_overdue_between).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_over",
									"                    pm.test(\"nothing happen unpaid_overdue_over\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_over == old_data.unpaid_overdue_over).to.be.true;",
									"                    });",
									"                    break;",
									"                case \"overdue_less\":",
									"                    // unpaid_due",
									"                    pm.test(\"nothing happen unpaid_due\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_due == old_data.unpaid_due).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_less",
									"                    pm.test(\"unpaid_overdue_less decrease \" + paid_amount, function () {",
									"                        console.log(\"old: \" + old_data.unpaid_overdue_less);",
									"                        console.log(\"new: \" + unpaid_account_receivable.unpaid_overdue_less);",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_less.toFixed(2) == (old_data.unpaid_overdue_less - paid_amount).toFixed(2)).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_between",
									"                    pm.test(\"nothing happen unpaid_overdue_between\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_between == old_data.unpaid_overdue_between).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_over",
									"                    pm.test(\"nothing happen unpaid_overdue_over\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_over == old_data.unpaid_overdue_over).to.be.true;",
									"                    });",
									"                    break;",
									"                case \"overdue_between\":",
									"                    // unpaid_due",
									"                    pm.test(\"nothing happen unpaid_due\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_due == old_data.unpaid_due).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_less",
									"                    pm.test(\"nothing happen unpaid_overdue_less\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_less == old_data.unpaid_overdue_less).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_between",
									"                    pm.test(\"unpaid_overdue_between decrease \" + paid_amount, function () {",
									"                        console.log(\"old: \" + old_data.unpaid_overdue_between);",
									"                        console.log(\"new: \" + unpaid_account_receivable.unpaid_overdue_between);",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_between.toFixed(2) == (old_data.unpaid_overdue_between - paid_amount).toFixed(2)).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_over",
									"                    pm.test(\"nothing happen unpaid_overdue_over\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_over == old_data.unpaid_overdue_over).to.be.true;",
									"                    });",
									"                    break;",
									"                case \"overdue_over\":",
									"                    // unpaid_due",
									"                    pm.test(\"nothing happen unpaid_due\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_due == old_data.unpaid_due).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_less",
									"                    pm.test(\"nothing happen unpaid_overdue_less\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_less == old_data.unpaid_overdue_less).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_between",
									"                    pm.test(\"unpaid_overdue_between decrease\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_between == old_data.unpaid_overdue_between).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_over",
									"                    pm.test(\"unpaid_overdue_over decrease \" + paid_amount, function () {",
									"                        console.log(\"old: \" + old_data.unpaid_overdue_over);",
									"                        console.log(\"new: \" + unpaid_account_receivable.unpaid_overdue_over);",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_over.toFixed(2) == (old_data.unpaid_overdue_over - paid_amount).toFixed(2)).to.be.true;",
									"                    });",
									"                    break;",
									"                default:",
									"                    // unpaid_due",
									"                    pm.test(\"nothing happen unpaid_due\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_due == old_data.unpaid_due).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_less",
									"                    pm.test(\"nothing happen unpaid_overdue_less\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_less == old_data.unpaid_overdue_less).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_between",
									"                    pm.test(\"nothing happen unpaid_overdue_between\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_between == old_data.unpaid_overdue_between).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_over",
									"                    pm.test(\"nothing happen unpaid_overdue_over\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_over == old_data.unpaid_overdue_over).to.be.true;",
									"                    });",
									"                    break;",
									"            }",
									"",
									"            if(due_type == \"undue_n_7d\"){",
									"                // unpaid_overdue_more_than_today",
									"                pm.test(\"nothing happen unpaid_overdue_more_than_today\", function () {",
									"                    pm.expect(unpaid_account_receivable.unpaid_overdue_more_than_today == old_data.unpaid_overdue_more_than_today).to.be.true;",
									"                });",
									"",
									"                // unpaid_overdue_less_than_today",
									"                pm.test(\"unpaid_overdue_less_than_today decrease \" + paid_amount, function () {",
									"                    console.log(\"old: \" + old_data.unpaid_overdue_less_than_today);",
									"                    console.log(\"expected: \" + (old_data.unpaid_overdue_less_than_today - paid_amount));",
									"                    console.log(\"new: \" + unpaid_account_receivable.unpaid_overdue_less_than_today);",
									"                    pm.expect(unpaid_account_receivable.unpaid_overdue_less_than_today == old_data.unpaid_overdue_less_than_today - paid_amount).to.be.true;",
									"                });",
									"",
									"                // unpaid_overdue_in_week",
									"                pm.test(\"unpaid_overdue_in_week decrease \" + paid_amount, function () {",
									"                    console.log(\"old: \" + old_data.unpaid_overdue_in_week);",
									"                    console.log(\"expected: \" + (old_data.unpaid_overdue_in_week - paid_amount));",
									"                    console.log(\"new: \" + unpaid_account_receivable.unpaid_overdue_in_week);",
									"                    pm.expect(unpaid_account_receivable.unpaid_overdue_in_week == old_data.unpaid_overdue_in_week - paid_amount).to.be.true;",
									"                });",
									"            } else if(due_type == \"due_n_7d\"){",
									"                // unpaid_overdue_more_than_today",
									"                pm.test(\"unpaid_overdue_more_than_today decrease \" + paid_amount, function () {",
									"                    console.log(\"old: \" + old_data.unpaid_overdue_more_than_today);",
									"                    console.log(\"expected: \" + (old_data.unpaid_overdue_more_than_today - paid_amount));",
									"                    console.log(\"new: \" + unpaid_account_receivable.unpaid_overdue_more_than_today);",
									"                    pm.expect(unpaid_account_receivable.unpaid_overdue_more_than_today == old_data.unpaid_overdue_more_than_today - paid_amount).to.be.true;",
									"                });",
									"",
									"                // unpaid_overdue_less_than_today",
									"                pm.test(\"nothing happen unpaid_overdue_less_than_today\", function () {",
									"                    pm.expect(unpaid_account_receivable.unpaid_overdue_less_than_today == old_data.unpaid_overdue_less_than_today).to.be.true;",
									"                });",
									"",
									"                // unpaid_overdue_in_week",
									"                pm.test(\"unpaid_overdue_in_week increase \" + paid_amount, function () {",
									"                    console.log(\"old: \" + old_data.unpaid_overdue_in_week);",
									"                    console.log(\"expected: \" + (old_data.unpaid_overdue_in_week - paid_amount));",
									"                    console.log(\"new: \" + unpaid_account_receivable.unpaid_overdue_in_week);",
									"                    pm.expect(unpaid_account_receivable.unpaid_overdue_in_week == old_data.unpaid_overdue_in_week - paid_amount).to.be.true;",
									"                });",
									"            } else if (due_type == \"undue\"){",
									"                // unpaid_overdue_more_than_today",
									"                pm.test(\"nothing happen unpaid_overdue_more_than_today\", function () {",
									"                    pm.expect(unpaid_account_receivable.unpaid_overdue_more_than_today == old_data.unpaid_overdue_more_than_today).to.be.true;",
									"                });",
									"",
									"                // unpaid_overdue_less_than_today",
									"                pm.test(\"unpaid_overdue_less_than_today increase \" + paid_amount, function () {",
									"                    console.log(\"old: \" + old_data.unpaid_overdue_less_than_today);",
									"                    console.log(\"expected: \" + (old_data.unpaid_overdue_less_than_today - paid_amount));",
									"                    console.log(\"new: \" + unpaid_account_receivable.unpaid_overdue_less_than_today);",
									"                    pm.expect(unpaid_account_receivable.unpaid_overdue_less_than_today == old_data.unpaid_overdue_less_than_today - paid_amount).to.be.true;",
									"                });",
									"",
									"                // unpaid_overdue_in_week",
									"                pm.test(\"nothing happen unpaid_overdue_in_week\", function () {",
									"                    pm.expect(unpaid_account_receivable.unpaid_overdue_in_week == old_data.unpaid_overdue_in_week).to.be.true;",
									"                });",
									"            } else {",
									"                // unpaid_overdue_more_than_today",
									"                pm.test(\"unpaid_overdue_more_than_today increase \" + paid_amount, function () {",
									"                    console.log(\"old: \" + old_data.unpaid_overdue_more_than_today);",
									"                    console.log(\"expected: \" + (old_data.unpaid_overdue_more_than_today - paid_amount));",
									"                    console.log(\"new: \" + unpaid_account_receivable.unpaid_overdue_more_than_today);",
									"                    pm.expect(unpaid_account_receivable.unpaid_overdue_more_than_today == old_data.unpaid_overdue_more_than_today - paid_amount).to.be.true;",
									"                });",
									"",
									"                // unpaid_overdue_less_than_today",
									"                pm.test(\"nothing happen unpaid_overdue_less_than_today\", function () {",
									"                    pm.expect(unpaid_account_receivable.unpaid_overdue_less_than_today == old_data.unpaid_overdue_less_than_today).to.be.true;",
									"                });",
									"",
									"                // unpaid_overdue_in_week",
									"                pm.test(\"nothing happen unpaid_overdue_in_week\", function () {",
									"                    pm.expect(unpaid_account_receivable.unpaid_overdue_in_week == old_data.unpaid_overdue_in_week).to.be.true;",
									"                });",
									"            }",
									"",
									"            postman.setNextRequest(\"get_report_account_receivable_customer\"); // get_report_account_receivable_customer",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get report account receivable unpaid, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let payload = {",
									"    \"account_key\": \"account_receivable\",",
									"    \"branch_id\": pm.environment.get(\"C-branch_id\"),",
									"    \"business_id\": parseInt(pm.environment.get(\"C-business_id\"))",
									"    //   \"current_period_end\": \"string\",",
									"    //   \"current_period_start\": \"string\",",
									"    // \"page\": 1,",
									"    // \"page_size\": 20,",
									"    //   \"period\": \"string\",  // old due_days",
									"    //   \"previous_period_end\": \"string\",",
									"    //   \"previous_period_start\": \"string\",",
									"    //   \"report_type\": \"string\",",
									"    // \"timezone\": \"UTC+07:00\"",
									"}",
									"",
									"console.log(\"payload: \",payload);",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));",
									"pm.environment.set(\"C-report_obj\",payload);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/report/account-receivable-card-unpaid",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"report",
								"account-receivable-card-unpaid"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_report_account_receivable_customer",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"if(testcase != 2){",
									"    // timeout 2s to sync elastic search",
									"    setTimeout(function(){}, 2000);",
									"}",
									"",
									"let page = pm.environment.get(\"C-page\");",
									"",
									"if(!page){",
									"    page = 1;",
									"    pm.environment.set(\"C-page\",page);",
									"",
									"    let page_size = 20;",
									"    pm.environment.set(\"C-page_size\",page_size);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = JSON.parse(responseBody);",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let total_pages = jsData.meta.total_pages;",
									"    let page = pm.environment.get(\"C-page\");",
									"",
									"    let list_report_customer, old_list_report_customer;",
									"    switch(testcase){",
									"        case 2:",
									"            list_report_customer = pm.environment.get(\"C-list_report_customer\");",
									"            if(!list_report_customer){",
									"                list_report_customer = [];",
									"            }",
									"            break;",
									"        case 4: case 6:",
									"            old_list_report_customer = pm.environment.get(\"C-old_list_report_customer\");",
									"            if(!old_list_report_customer){",
									"                old_list_report_customer = pm.environment.get(\"C-list_report_customer\");",
									"                pm.environment.unset(\"C-list_report_customer\");",
									"                pm.environment.set(\"C-old_list_report_customer\",old_list_report_customer);",
									"            }",
									"",
									"            list_report_customer = pm.environment.get(\"C-list_report_customer\");",
									"            if(!list_report_customer){",
									"                list_report_customer = [];",
									"            }",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow\");",
									"            break;",
									"    }",
									"",
									"    for(let item in jsData.data){",
									"        list_report_customer[list_report_customer.length] = {",
									"            \"contact_id\":jsData.data[item].contact_id,",
									"            \"unpaid_total\":jsData.data[item].unpaid_total,",
									"            \"unpaid_due\":jsData.data[item].unpaid_due,",
									"            \"unpaid_overdue_less\":jsData.data[item].unpaid_overdue_less,",
									"            \"unpaid_overdue_between\":jsData.data[item].unpaid_overdue_between,",
									"            \"unpaid_overdue_over\":jsData.data[item].unpaid_overdue_over,",
									"            \"full_count\":jsData.data[item].full_count,",
									"            \"contact_name\":jsData.data[item].contact_info.contact_name,",
									"            \"contact_phone\":jsData.data[item].contact_info.contact_phone",
									"        }",
									"    }",
									"    pm.environment.set(\"C-list_report_customer\",list_report_customer);",
									"",
									"    if(page >= total_pages){",
									"        // must clear page & page_size",
									"        pm.environment.unset(\"C-page\");",
									"        pm.environment.unset(\"C-page_size\");",
									"",
									"        let invoice_obj = pm.environment.get(\"C-invoice_obj\");",
									"        let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"        let isFound = false, hasRecord = false;",
									"        switch(testcase){",
									"            case 2:",
									"                pm.test(\"Got all record! \" + list_report_customer.length, function () {",
									"                    pm.expect(list_report_customer.length > 0).to.be.true;",
									"                });",
									"",
									"                // console.log(\"list_report_customer: \",list_report_customer);",
									"",
									"                postman.setNextRequest(\"report_account_lifetime\"); // report_account_lifetime",
									"                break;",
									"            case 4: case 6:",
									"                let record_obj = null;",
									"                console.log(\"contact_id: \" + invoice_obj.contact_id);",
									"                for(let i in old_list_report_customer){",
									"                    if(old_list_report_customer[i].contact_id == invoice_obj.contact_id){",
									"                        record_obj = old_list_report_customer[i];",
									"                        break;",
									"                    }",
									"                }",
									"                // console.log(\"old_list_report_customer: \", old_list_report_customer);",
									"",
									"                pm.test(\"Nothing happen with total record\", function () {",
									"                    pm.expect(list_report_customer.length == old_list_report_customer.length).to.be.true;",
									"                });",
									"",
									"                let due_type = pm.environment.get(\"C-due_type\");",
									"                for(let i in list_report_customer){",
									"                    if(list_report_customer[i].contact_id == invoice_obj.contact_id){",
									"                        isFound = true;",
									"                        console.log(\"Found \" + list_report_customer[i].contact_name + ' - ' + list_report_customer[i].contact_phone);",
									"                        ",
									"                        pm.test(\"unpaid_total decrease \" + tnx_obj.amount, function () {",
									"                            console.log(\"exp: \" + (record_obj.unpaid_total - tnx_obj.amount));",
									"                            console.log(\"new: \" + list_report_customer[i].unpaid_total);",
									"                            pm.expect(list_report_customer[i].unpaid_total == record_obj.unpaid_total - tnx_obj.amount).to.be.true;",
									"                        });",
									"",
									"                        switch(due_type){",
									"                            case \"due\": case \"due_n_7d\":",
									"                                // unpaid_due",
									"                                pm.test(\"unpaid_due decrease \" + tnx_obj.amount, function () {",
									"                                    console.log(\"old: \" + record_obj.unpaid_due);",
									"                                    console.log(\"new: \" + list_report_customer[i].unpaid_due);",
									"                                    pm.expect(list_report_customer[i].unpaid_due == record_obj.unpaid_due - tnx_obj.amount).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_less",
									"                                pm.test(\"nothing happen unpaid_overdue_less\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_less == record_obj.unpaid_overdue_less).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_between",
									"                                pm.test(\"nothing happen unpaid_overdue_between\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_between == record_obj.unpaid_overdue_between).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_over",
									"                                pm.test(\"nothing happen unpaid_overdue_over\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_over == record_obj.unpaid_overdue_over).to.be.true;",
									"                                });",
									"                                break;",
									"                            case \"overdue_less\":",
									"                                // unpaid_due",
									"                                pm.test(\"nothing happen unpaid_due\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_due == record_obj.unpaid_due).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_less",
									"                                pm.test(\"unpaid_overdue_less decrease \" + tnx_obj.amount, function () {",
									"                                    console.log(\"old: \" + record_obj.unpaid_overdue_less);",
									"                                    console.log(\"new: \" + list_report_customer[i].unpaid_overdue_less);",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_less == (record_obj.unpaid_overdue_less - tnx_obj.amount).toFixed(2)).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_between",
									"                                pm.test(\"nothing happen unpaid_overdue_between\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_between == record_obj.unpaid_overdue_between).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_over",
									"                                pm.test(\"nothing happen unpaid_overdue_over\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_over == record_obj.unpaid_overdue_over).to.be.true;",
									"                                });",
									"                                break;",
									"                            case \"overdue_between\":",
									"                                // unpaid_due",
									"                                pm.test(\"nothing happen unpaid_due\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_due == record_obj.unpaid_due).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_less",
									"                                pm.test(\"nothing happen unpaid_overdue_less\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_less == record_obj.unpaid_overdue_less).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_between",
									"                                pm.test(\"unpaid_overdue_between decrease \" + tnx_obj.amount, function () {",
									"                                    console.log(\"old: \" + record_obj.unpaid_overdue_between);",
									"                                    console.log(\"new: \" + list_report_customer[i].unpaid_overdue_between);",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_between == (record_obj.unpaid_overdue_between - tnx_obj.amount).toFixed(2)).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_over",
									"                                pm.test(\"nothing happen unpaid_overdue_over\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_over == record_obj.unpaid_overdue_over).to.be.true;",
									"                                });",
									"                                break;",
									"                            case \"overdue_over\":",
									"                                // unpaid_due",
									"                                pm.test(\"nothing happen unpaid_due\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_due == record_obj.unpaid_due).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_less",
									"                                pm.test(\"nothing happen unpaid_overdue_less\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_less == record_obj.unpaid_overdue_less).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_between",
									"                                pm.test(\"nothing happen unpaid_overdue_between\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_between == record_obj.unpaid_overdue_between).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_over",
									"                                pm.test(\"unpaid_overdue_over decrease \" + tnx_obj.amount, function () {",
									"                                    console.log(\"old: \" + record_obj.unpaid_overdue_over);",
									"                                    console.log(\"new: \" + list_report_customer[i].unpaid_overdue_over);",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_over == (record_obj.unpaid_overdue_over - tnx_obj.amount).toFixed(2)).to.be.true;",
									"                                });",
									"                                break;",
									"                            default:",
									"                                // unpaid_due",
									"                                pm.test(\"nothing happen unpaid_due\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_due == record_obj.unpaid_due).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_less",
									"                                pm.test(\"nothing happen unpaid_overdue_less\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_less == record_obj.unpaid_overdue_less).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_between",
									"                                pm.test(\"nothing happen unpaid_overdue_between\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_between == record_obj.unpaid_overdue_between).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_over",
									"                                pm.test(\"nothing happen unpaid_overdue_over\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_over == record_obj.unpaid_overdue_over).to.be.true;",
									"                                });",
									"                                break;",
									"                        }",
									"                        break;",
									"                    }",
									"                }",
									"",
									"                pm.test(\"Found new customer\", function () {",
									"                    pm.expect(isFound).to.be.true;",
									"                });",
									"",
									"                postman.setNextRequest(\"report_account_lifetime\"); // report_account_lifetime",
									"                break;",
									"            default:",
									"                console.log(\"Missing flow, end test\");",
									"                postman.setNextRequest(null);",
									"                break;",
									"        }",
									"    } else {",
									"        page++;",
									"        pm.environment.set(\"C-page\",page);",
									"",
									"        console.log(\"view next page (\" + page + \") to get more product\");",
									"        postman.setNextRequest(\"get_report_account_receivable_customer\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get list product, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"account_key\": \"account_receivable\",\n    \"branch_id\": \"{{C-branch_id}}\",\n    \"business_id\": {{C-business_id}},\n    \"page\": {{C-page}},\n    \"page_size\": {{C-page_size}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/report/account-receivable-customer-unpaid",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"report",
								"account-receivable-customer-unpaid"
							]
						}
					},
					"response": []
				},
				{
					"name": "report_account_lifetime",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ====================================== parser cURL",
									"function parseCURL(request_api){",
									"    let curl = \"\";",
									"    switch(request_api.method){",
									"        case \"PUT\":",
									"            curl = \"curl --location --request PUT \";",
									"            break;",
									"        case \"PATCH\":",
									"            curl = \"curl --location --request PATCH \";",
									"            break;",
									"        case \"DELETE\":",
									"            curl = \"curl --location --request DELETE \";",
									"            break;",
									"        default:",
									"            curl = \"curl --location \";",
									"            break;",
									"    }",
									"    curl += \"'\" + request_api.url.protocol + \"://\"",
									"    // host",
									"    for(let i in request_api.url.host){",
									"        if(i >= request_api.url.host.length - 1){",
									"            curl += request_api.url.host[i] + \"/\";",
									"        } else {",
									"            curl += request_api.url.host[i] + \".\";",
									"        }",
									"    }",
									"    // path",
									"    for(let i in request_api.url.path){",
									"        if(i >= request_api.url.path.length - 1){",
									"            curl += request_api.url.path[i];",
									"        } else {",
									"            curl += request_api.url.path[i] + \"/\";",
									"        }",
									"    }",
									"    // query (if have)",
									"    if(\"query\" in request_api.url){",
									"        if(request_api.url.length > 0){",
									"            curl += \"? \";",
									"            for(let i in request_api.url.query){",
									"                if(i >= request_api.url.query.length - 1){",
									"                    curl += request_api.url.query[i].key + \"=\" + request_api.url.query[i].value + \"' \";",
									"                } else {",
									"                    curl += request_api.url.query[i].key + \"=\" + request_api.url.query[i].value + \"&\";",
									"                }",
									"            }",
									"        } else {",
									"            curl += \"' \";",
									"        }",
									"    } else {",
									"        curl += \"' \";",
									"    }",
									"    // header",
									"    for(let i in request_api.header){",
									"        if(i >= request_api.header.length - 1){",
									"            curl += \"--header '\" + request_api.header[i].key + \": \" + request_api.header[i].value + \"'\";",
									"        } else {",
									"            curl += \"--header '\" + request_api.header[i].key + \": \" + request_api.header[i].value + \"' \";",
									"        }",
									"    }",
									"    switch(request_api.method){",
									"        case \"POST\":",
									"            curl += \" --data '\" + request_api.body.raw + \"'\"",
									"            break;",
									"        case \"PUT\": case \"PATCH\":",
									"            curl += \" --data-raw '\" + request_api.body.raw + \"'\"",
									"            break;",
									"        default:",
									"            break;",
									"    }",
									"    console.log(curl);",
									"    return curl;",
									"}",
									"const request_api = pm.request.toJSON();",
									"parseCURL(request_api);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let account_lifetime = null;",
									"    try {",
									"        account_lifetime = jsData.data;",
									"    } catch {",
									"        console.log(\"Can't get data\");",
									"    }",
									"",
									"    let old_account_lifetime = pm.environment.get(\"C-account_lifetime\");",
									"    switch(testcase){",
									"        case 2:",
									"            pm.test(\"Got account_lifetime \" + account_lifetime.sum_balance, function () {",
									"                pm.environment.set(\"C-account_lifetime\",account_lifetime);",
									"                pm.expect(account_lifetime != null).to.be.true;",
									"            });",
									"",
									"            // check data",
									"            let total_balance = 0;",
									"            for(let i in jsData.data.data){",
									"                total_balance += jsData.data.data[i].balance;",
									"            }",
									"            pm.test(\"Data correctly \" + total_balance, function () {",
									"                pm.expect(total_balance.toFixed(2) == jsData.data.sum_balance).to.be.true;",
									"            });",
									"",
									"            postman.setNextRequest(\"report_cash_flow_period\"); // report_cash_flow_period, get_list_transaction",
									"            break;",
									"        case 4: case 6:",
									"            /**",
									"             * - nếu tnx_obj.account_id (in - credit) tnx_obj.account_id (out - debit) trong list tăng lên => tăng tương ứng",
									"             * - ngược lại, name (remaining_accounts) sẽ tăng tương ứng",
									"            */",
									"            let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"            // sum_balance",
									"            console.log(\"old: \" + old_account_lifetime.sum_balance);",
									"            console.log(\"exp: \" + (old_account_lifetime.sum_balance + tnx_obj.amount));",
									"            console.log(\"act: \" + account_lifetime.sum_balance);",
									"            if(tnx_obj.txn_type == \"in\"){",
									"                // case tăng debit => tăng sum_balance",
									"                pm.test(\"sum_balance increase \" + tnx_obj.amount, function () {",
									"                    pm.expect(account_lifetime.sum_balance == old_account_lifetime.sum_balance + tnx_obj.amount).to.be.true;",
									"                });",
									"            } else {",
									"                // case tăng credit => giảm sum_balance",
									"                pm.test(\"sum_balance decrease \" + tnx_obj.amount, function () {",
									"                    pm.expect(account_lifetime.sum_balance == old_account_lifetime.sum_balance - tnx_obj.amount).to.be.true;",
									"                });",
									"            }",
									"",
									"            // data cũ",
									"            let account_obj = null;",
									"            for(let i = 0; i < old_account_lifetime.data.length; i++){",
									"                if(old_account_lifetime.data[i].id == tnx_obj.account_id){",
									"                    account_obj = old_account_lifetime.data[i];",
									"                    break;",
									"                }",
									"",
									"                if(i == old_account_lifetime.data.length - 1){",
									"                    // remaining_accounts",
									"                    account_obj = old_account_lifetime.data[i];",
									"                    break;",
									"                }",
									"            }",
									"",
									"            // data mới",
									"            let isFound = false;",
									"            for(let i in account_lifetime.data){",
									"                if(account_lifetime.data[i].id == account_obj.id){",
									"                    isFound = true;",
									"                    console.log(\"old: \" + account_obj.balance);",
									"                    console.log(\"act: \" + account_lifetime.data[i].balance);",
									"                    if(tnx_obj.txn_type == \"in\"){",
									"                        // case tăng debit => balance = debit - credit",
									"                        pm.test(\"balance of \" + account_lifetime.data[i].account_name + \" increase \" + tnx_obj.amount, function () {",
									"                            pm.expect(account_lifetime.data[i].balance == account_obj.balance + tnx_obj.amount).to.be.true;",
									"                        });",
									"                    } else {",
									"                        // case tăng credit",
									"                        pm.test(\"balance of \" + account_lifetime.data[i].account_name + \" decrease \" + tnx_obj.amount, function () {",
									"                            pm.expect(account_lifetime.data[i].balance == account_obj.balance - tnx_obj.amount).to.be.true;",
									"                        });",
									"                    }",
									"                    break;",
									"                }",
									"            }",
									"",
									"            pm.test(\"Found exchange account\", function () {",
									"                pm.expect(isFound).to.be.true;",
									"            });",
									"            ",
									"            postman.setNextRequest(\"report_cash_flow_period\"); // report_cash_flow_period",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get report account receivable unpaid, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/**",
									" * case handle:",
									" * - Nếu account tăng balance ko nằm trong top 5:",
									" *   + TH1: balance tăng làm cho account nhảy vào top 5 => phải show account trong top 5",
									" *   + TH2: balance tăng ko làm cho account nhảy vào top 5 => chỉ thay đổi số của remaining_accounts",
									" * Note: tạo invoice sẽ ko ảnh hưởng, chỉ ảnh hưởng bởi tnx",
									" */",
									"",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"if(testcase == 4){",
									"    // setTimeout(function(){}, 5000); // timeout 5s khi chưa có đủ 5 records",
									"}",
									"",
									"let payload = {",
									"    \"branch_id\": pm.environment.get(\"C-branch_id\"),",
									"    \"business_id\": parseInt(pm.environment.get(\"C-business_id\"))",
									"}",
									"",
									"console.log(\"payload: \",payload);",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-location-timezone",
								"value": "UTC+07:00",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-ledger/api/v1/report/account-lifetime",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-ledger",
								"api",
								"v1",
								"report",
								"account-lifetime"
							]
						}
					},
					"response": []
				},
				{
					"name": "report_cash_flow_period",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/**",
									" * period: year, month, week",
									" */",
									"",
									"let period = \"month\";",
									"pm.environment.set(\"C-period\",period);",
									"",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"console.log(\"period: \" + period);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let cash_flow_period = null;",
									"    try {",
									"        cash_flow_period = jsData.data;",
									"        /**",
									"         * period: week, month, year",
									"         * sum_card_data",
									"         * dates_data",
									"         */",
									"    } catch {",
									"        console.log(\"Can't get report cash_flow data\");",
									"    }",
									"",
									"    switch(testcase){",
									"        case 2:",
									"            pm.test(\"Got cash_flow_period \", function () {",
									"                pm.expect(cash_flow_period != null).to.be.true;",
									"            });",
									"            pm.environment.set(\"C-cash_flow_period\",cash_flow_period);",
									"            console.log(\"cash_flow_period: \", cash_flow_period);",
									"",
									"            // ================================================ bonus check current data",
									"            // waiting logic updated at phase 2",
									"            // ================================================ ",
									"",
									"            postman.setNextRequest(\"report_profit_loss_period\"); // report_profit_loss_period, get_list_transaction",
									"            break;",
									"        case 4: case 6:",
									"            let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"            let old_cash_flow_period = pm.environment.get(\"C-cash_flow_period\");",
									"            // console.log(\"old_cash_flow_period:\",old_cash_flow_period);",
									"            // console.log(\"===================\");",
									"            // console.log(\"cash_flow_period:\",cash_flow_period);",
									"",
									"            // tăng income",
									"            pm.test(\"total_income increase \" + tnx_obj.amount, function () {",
									"                console.log(\"old: \" + old_cash_flow_period.sum_card_data.total_income);",
									"                console.log(\"new: \" + cash_flow_period.sum_card_data.total_income);",
									"                pm.expect(cash_flow_period.sum_card_data.total_income == old_cash_flow_period.sum_card_data.total_income + tnx_obj.amount).to.be.true;",
									"            });",
									"",
									"            pm.test(\"nothing happen with total_expense\", function () {",
									"                console.log(\"old: \" + old_cash_flow_period.sum_card_data.total_expense);",
									"                console.log(\"new: \" + cash_flow_period.sum_card_data.total_expense);",
									"                pm.expect(cash_flow_period.sum_card_data.total_expense == old_cash_flow_period.sum_card_data.total_expense).to.be.true;",
									"            });",
									"",
									"            pm.test(\"total_gap increase \" + tnx_obj.amount, function () {",
									"                console.log(\"old: \" + old_cash_flow_period.sum_card_data.total_gap);",
									"                console.log(\"new: \" + cash_flow_period.sum_card_data.total_gap);",
									"                pm.expect(cash_flow_period.sum_card_data.total_gap == old_cash_flow_period.sum_card_data.total_gap + tnx_obj.amount).to.be.true;",
									"            });",
									"",
									"            // thay đổi ngày tương ứng",
									"            let tnx_date = tnx_obj.value_at.substring(0,10);",
									"            let old_date = null, act_date = null;",
									"            for(let i in cash_flow_period.dates_data){",
									"                let day_i = cash_flow_period.dates_data[i].date.substring(0,10);",
									"                if(day_i == tnx_date){",
									"                    act_date = cash_flow_period.dates_data[i];",
									"                    break;",
									"                }",
									"            }",
									"",
									"            for(let i in old_cash_flow_period.dates_data){",
									"                let day_i = old_cash_flow_period.dates_data[i].date.substring(0,10);",
									"                if(day_i == tnx_date){",
									"                    old_date = old_cash_flow_period.dates_data[i];",
									"                    break;",
									"                }",
									"            }",
									"",
									"            if(old_date != null && act_date != null){",
									"                console.log(\"act_date: \",act_date);",
									"                console.log(\"old_date: \",old_date);",
									"                pm.test(\"income at \" + tnx_date + \" increase \" + tnx_obj.amount, function () {",
									"                    pm.expect(act_date.income == old_date.income + tnx_obj.amount).to.be.true;",
									"                });",
									"",
									"                pm.test(\"gap at \" + tnx_date + \" increase \" + tnx_obj.amount, function () {",
									"                    pm.expect(act_date.gap == old_date.gap + tnx_obj.amount).to.be.true;",
									"                });",
									"            }",
									"",
									"            postman.setNextRequest(\"report_profit_loss_period\"); // report_profit_loss_period",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get report cash_flow, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-location-timezone",
								"value": "UTC+07:00"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"branch_id\": \"{{C-branch_id}}\",\n    \"business_id\": {{C-business_id}},\n    \"period\": \"{{C-period}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-ledger/api/v1/report/cash-flow-period",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-ledger",
								"api",
								"v1",
								"report",
								"cash-flow-period"
							]
						}
					},
					"response": []
				},
				{
					"name": "report_profit_loss_period",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/**",
									" * \"report_type\": sum,income,expense",
									" * Note: report_type = sum => hiện tại bị null dates_data",
									" * - C1: call từng loại income, expense dể lấy dates_data",
									" * - C2: wait fixing from dev",
									" * => tạm thời xử lý case sum, 2 case còn lại sẽ handle sau",
									" */",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let full_check = pm.environment.get(\"C-full_check\");",
									"if(!full_check){",
									"    full_check = 1;",
									"    pm.environment.set(\"C-full_check\",full_check);",
									"    report_type = \"income\";",
									"} else {",
									"    report_type = \"expense\";",
									"}",
									"pm.environment.set(\"C-report_type\",report_type);",
									"console.log(\"full_check: \" + full_check);",
									"console.log(\"report_type: \" + report_type);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let full_check = pm.environment.get(\"C-full_check\");",
									"    let profit_period = null, loss_period = null;",
									"    try {",
									"        if(full_check == 1){",
									"            profit_period = jsData.data;",
									"        } else {",
									"            loss_period = jsData.data;",
									"        }",
									"        /**",
									"         * period: week, month, year",
									"         * sum_card_data",
									"         * dates_data",
									"         */",
									"    } catch {",
									"        console.log(\"Can't get report cash_flow data\");",
									"    }",
									"",
									"    switch(testcase){",
									"        case 2:",
									"            if(full_check == 1){",
									"                pm.test(\"Got profit_period \", function () {",
									"                    pm.environment.set(\"C-profit_period\",profit_period);",
									"                    pm.expect(profit_period != null).to.be.true;",
									"                });",
									"                pm.environment.set(\"C-profit_period\",profit_period);",
									"                // console.log(\"profit_period: \", profit_period);",
									"",
									"                full_check++;",
									"                pm.environment.set(\"C-full_check\",full_check);",
									"                postman.setNextRequest(\"report_profit_loss_period\");",
									"            } else {",
									"                pm.test(\"Got loss_period \", function () {",
									"                    pm.environment.set(\"C-loss_period\",loss_period);",
									"                    pm.expect(loss_period != null).to.be.true;",
									"                });",
									"                pm.environment.set(\"C-loss_period\",loss_period);",
									"                // console.log(\"loss_period: \", loss_period);",
									"",
									"                pm.environment.unset(\"C-full_check\");",
									"                postman.setNextRequest(\"report_chart_balance_change\"); // report_chart_balance_change",
									"            }",
									"            break;",
									"        case 4: case 6:",
									"            let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"            let tnx_date = tnx_obj.value_at.substring(0,10);",
									"            ",
									"            if(full_check == 1){",
									"                let old_profit_period = pm.environment.get(\"C-profit_period\");",
									"                // KHÔNG THAY ĐỔI INCOME KHI TẠO TRANSACTION CHO INVOICE, VÌ KHI TẠO INVOICE ĐÃ GHI RỒI",
									"                // nothing happen",
									"                pm.test(\"Nothing happen!!!\", function () {",
									"                    pm.expect(JSON.stringify(profit_period) == JSON.stringify(old_profit_period)).to.be.true;",
									"                });",
									"",
									"                // // có thay đổi => total_income increase",
									"                // pm.test(\"total_income increase \" + tnx_obj.amount, function () {",
									"                //     pm.expect(profit_period.sum_card_data.total_income == old_profit_period.sum_card_data.total_income + tnx_obj.amount).to.be.true;",
									"                // });",
									"                // // thay đổi ngày tương ứng",
									"                // let old_date = null, act_date = null;",
									"                // for(let i in profit_period.dates_data){",
									"                //     let day_i = profit_period.dates_data[i].date.substring(0,10);",
									"                //     if(day_i == tnx_date){",
									"                //         act_date = profit_period.dates_data[i];",
									"                //         break;",
									"                //     }",
									"                // }",
									"",
									"                // for(let i in old_profit_period.dates_data){",
									"                //     let day_i = old_profit_period.dates_data[i].date.substring(0,10);",
									"                //     if(day_i == tnx_date){",
									"                //         old_date = old_profit_period.dates_data[i];",
									"                //         break;",
									"                //     }",
									"                // }",
									"",
									"                // if(old_date != null && act_date != null){",
									"                //     console.log(\"act_date: \",act_date);",
									"                //     console.log(\"old_date: \",old_date);",
									"                //     pm.test(\"income at \" + tnx_date + \" increase \" + tnx_obj.amount, function () {",
									"                //         pm.expect(act_date.income == old_date.income + tnx_obj.amount).to.be.true;",
									"                //     });",
									"                // }",
									"",
									"                full_check++;",
									"                pm.environment.set(\"C-full_check\",full_check);",
									"                postman.setNextRequest(\"report_profit_loss_period\");",
									"            } else {",
									"                let old_loss_period = pm.environment.get(\"C-loss_period\");",
									"                // console.log(\"debug old_loss_period: \", old_loss_period);",
									"                // console.log(\"debug loss_period: \", loss_period);",
									"                if(tnx_obj.txn_type == \"out\"){",
									"                    // có thay đổi => total_expense increase",
									"                    pm.test(\"total_expense increase \" + tnx_obj.amount, function () {",
									"                        pm.expect(loss_period.sum_card_data.total_expense == old_loss_period.sum_card_data.total_expense + tnx_obj.amount).to.be.true;",
									"                    });",
									"                    // thay đổi ngày tương ứng",
									"                    let old_date = null, act_date = null;",
									"                    for(let i in loss_period.dates_data){",
									"                        let day_i = loss_period.dates_data[i].date.substring(0,10);",
									"                        if(day_i == tnx_date){",
									"                            act_date = loss_period.dates_data[i];",
									"                            break;",
									"                        }",
									"                    }",
									"",
									"                    for(let i in old_loss_period.dates_data){",
									"                        let day_i = old_loss_period.dates_data[i].date.substring(0,10);",
									"                        if(day_i == tnx_date){",
									"                            old_date = old_loss_period.dates_data[i];",
									"                            break;",
									"                        }",
									"                    }",
									"",
									"                    if(old_date != null && act_date != null){",
									"                        console.log(\"act_date: \",act_date);",
									"                        console.log(\"old_date: \",old_date);",
									"                        pm.test(\"expense at \" + tnx_date + \" increase \" + tnx_obj.amount, function () {",
									"                            pm.expect(act_date.expense == old_date.expense + tnx_obj.amount).to.be.true;",
									"                        });",
									"                    }",
									"                } else {",
									"                    // nothing happen",
									"                    pm.test(\"Nothing happen!!!\", function () {",
									"                        pm.expect(JSON.stringify(loss_period) == JSON.stringify(old_loss_period)).to.be.true;",
									"                    });",
									"                }",
									"",
									"                pm.environment.unset(\"C-full_check\");",
									"                postman.setNextRequest(\"report_chart_balance_change\"); // report_chart_balance_change",
									"            }",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get report cash_flow, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-location-timezone",
								"value": "UTC+07:00"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"branch_id\": \"{{C-branch_id}}\",\n    \"business_id\": {{C-business_id}},\n    \"period\": \"{{C-period}}\",\n    \"report_type\": \"{{C-report_type}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-ledger/api/v1/report/profit-loss-period",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-ledger",
								"api",
								"v1",
								"report",
								"profit-loss-period"
							]
						}
					},
					"response": []
				},
				{
					"name": "report_chart_balance_change",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/**",
									" * \"report_type\": sum,income,expense",
									" * Note: report_type = sum => hiện tại bị null dates_data",
									" * - C1: call từng loại income, expense dể lấy dates_data",
									" * - C2: wait fixing from dev",
									" * => tạm thời xử lý case sum, 2 case còn lại sẽ handle sau",
									" * period thêm 1 số filter: quarter, l7d, l30d, l90d",
									" */",
									"let report_type = \"sum\";",
									"pm.environment.set(\"C-report_type\",report_type);",
									"",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"console.log(\"report_type: \" + report_type);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let chart_balance_change = null;",
									"    try {",
									"        chart_balance_change = jsData.data;",
									"        /**",
									"         * period: week, month, year",
									"         * sum_card_data",
									"         * dates_data",
									"         */",
									"    } catch {",
									"        console.log(\"Can't get report cash_flow data\");",
									"    }",
									"",
									"    switch(testcase){",
									"        case 2:",
									"            pm.test(\"Got chart_balance_change \", function () {",
									"                pm.environment.set(\"C-chart_balance_change\",chart_balance_change);",
									"                pm.expect(chart_balance_change != null).to.be.true;",
									"            });",
									"",
									"            console.log(\"chart_balance_change: \", chart_balance_change);",
									"",
									"            // ================================================ bonus check current data",
									"            // waiting logic updated at phase 2",
									"            // ================================================ ",
									"",
									"            postman.setNextRequest(\"get_list_transaction\"); // get_list_transaction",
									"            break;",
									"        case 4: case 6:",
									"            let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"            let old_chart_balance_change = pm.environment.get(\"C-chart_balance_change\");",
									"            // console.log(\"debug old_chart_balance_change: \", old_chart_balance_change);",
									"            // console.log(\"debug chart_balance_change: \", chart_balance_change);",
									"",
									"            let tnx_date = tnx_obj.value_at.substring(0,10);",
									"            let old_date = null, act_date = null;",
									"            for(let i in chart_balance_change.dates_data){",
									"                let day_i = chart_balance_change.dates_data[i].date.substring(0,10);",
									"                if(day_i == tnx_date){",
									"                    act_date = chart_balance_change.dates_data[i];",
									"                    break;",
									"                }",
									"            }",
									"",
									"            for(let i in old_chart_balance_change.dates_data){",
									"                let day_i = old_chart_balance_change.dates_data[i].date.substring(0,10);",
									"                if(day_i == tnx_date){",
									"                    old_date = old_chart_balance_change.dates_data[i];",
									"                    break;",
									"                }",
									"            }",
									"",
									"            // có thay đổi => total_debit increase",
									"            pm.test(\"total_debit increase \" + tnx_obj.amount, function () {",
									"                pm.expect(chart_balance_change.sum_card_data.total_debit == old_chart_balance_change.sum_card_data.total_debit + tnx_obj.amount).to.be.true;",
									"            });",
									"            // thay đổi ngày tương ứng",
									"            if(old_date != null && act_date != null){",
									"                console.log(\"act_date: \",act_date);",
									"                console.log(\"old_date: \",old_date);",
									"                pm.test(\"debit_amount at \" + tnx_date + \" increase \" + tnx_obj.amount, function () {",
									"                    pm.expect(act_date.debit_amount == old_date.debit_amount + tnx_obj.amount).to.be.true;",
									"                });",
									"",
									"                pm.test(\"end_amount at \" + tnx_date + \" increase \" + tnx_obj.amount, function () {",
									"                    pm.expect(act_date.end_amount == old_date.end_amount + tnx_obj.amount).to.be.true;",
									"                });",
									"",
									"                pm.test(\"gap at \" + tnx_date + \" increase \" + tnx_obj.amount, function () {",
									"                    pm.expect(act_date.gap == old_date.gap + tnx_obj.amount).to.be.true;",
									"                });",
									"            }",
									"",
									"            console.log(\"-------- End Testsuite 48 --------\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get report cash_flow, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-location-timezone",
								"value": "UTC+07:00"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"branch_id\": \"{{C-branch_id}}\",\n    \"business_id\": {{C-business_id}},\n    \"period\": \"{{C-period}}\",\n    \"report_type\": \"{{C-report_type}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-ledger/api/v1/report/chart-balance-change",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-ledger",
								"api",
								"v1",
								"report",
								"chart-balance-change"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.request.headers.add({",
							" key: \"authorization\",",
							" value: \"Bearer \" + pm.environment.get(\"C-userToken\")",
							"});",
							"",
							"pm.request.headers.add({",
							" key: \"Content-Type\",",
							" value: \"application/json\"",
							"});"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"let configs = {",
					"    \"is_use_email\":true,",
					"    \"limit_page\":10,",
					"    \"timeout\":12000, // miliseconds => timeout to call API",
					"    \"is_buyer_gen\":false,",
					"    \"is_pay_full\":true, // true là trả hết",
					"    \"payment_status\":\"un_paid\", // fully_paid, partial_paid, un_paid",
					"    \"test_payment_method\":\"bank_transfer\" // chỉ fix testsuite này cho đúng ShinhanAccount",
					"}",
					"",
					"pm.environment.set(\"C-configs\",configs);",
					"// console.log(\"configs: \",configs);"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"// ====================================== parser cURL",
					"function parseCURL(request_api){",
					"    let curl = \"\";",
					"    switch(request_api.method){",
					"        case \"PUT\":",
					"            curl = \"curl --location --request PUT \";",
					"            break;",
					"        case \"PATCH\":",
					"            curl = \"curl --location --request PATCH \";",
					"            break;",
					"        case \"DELETE\":",
					"            curl = \"curl --location --request DELETE \";",
					"            break;",
					"        default:",
					"            curl = \"curl --location \";",
					"            break;",
					"    }",
					"    curl += \"'\" + request_api.url.protocol + \"://\"",
					"    // host",
					"    for(let i in request_api.url.host){",
					"        if(i >= request_api.url.host.length - 1){",
					"            curl += request_api.url.host[i] + \"/\";",
					"        } else {",
					"            curl += request_api.url.host[i] + \".\";",
					"        }",
					"    }",
					"    // path",
					"    for(let i in request_api.url.path){",
					"        if(i >= request_api.url.path.length - 1){",
					"            curl += request_api.url.path[i];",
					"        } else {",
					"            curl += request_api.url.path[i] + \"/\";",
					"        }",
					"    }",
					"    // query (if have)",
					"    if(\"query\" in request_api.url){",
					"        if(request_api.url.length > 0){",
					"            curl += \"? \";",
					"            for(let i in request_api.url.query){",
					"                if(i >= request_api.url.query.length - 1){",
					"                    curl += request_api.url.query[i].key + \"=\" + request_api.url.query[i].value + \"' \";",
					"                } else {",
					"                    curl += request_api.url.query[i].key + \"=\" + request_api.url.query[i].value + \"&\";",
					"                }",
					"            }",
					"        } else {",
					"            curl += \"' \";",
					"        }",
					"    } else {",
					"        curl += \"' \";",
					"    }",
					"    // header",
					"    for(let i in request_api.header){",
					"        if(i >= request_api.header.length - 1){",
					"            curl += \"--header '\" + request_api.header[i].key + \": \" + request_api.header[i].value + \"'\";",
					"        } else {",
					"            curl += \"--header '\" + request_api.header[i].key + \": \" + request_api.header[i].value + \"' \";",
					"        }",
					"    }",
					"    switch(request_api.method){",
					"        case \"POST\":",
					"            curl += \" --data '\" + request_api.body.raw + \"'\"",
					"            break;",
					"        case \"PUT\": case \"PATCH\":",
					"            curl += \" --data-raw '\" + request_api.body.raw + \"'\"",
					"            break;",
					"        default:",
					"            break;",
					"    }",
					"    console.log(curl);",
					"    return curl;",
					"}",
					"const request_api = pm.request.toJSON();",
					"parseCURL(request_api);"
				]
			}
		}
	]
}