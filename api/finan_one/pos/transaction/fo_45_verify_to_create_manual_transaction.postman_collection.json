{
	"info": {
		"_postman_id": "96f1559e-8c97-4b97-a507-4b3ef5d78f15",
		"name": "fo_45_verify_to_create_manual_transaction",
		"description": "### Testsuite: Verify to create manual transaction\n\n###### Testcase:\n\n1. Login with owner account\n    \n2. Get data\n    \n    1. Account coa / Get list coa => get list debit account\n        \n    2. Account cash_n_bank / Get list account => get list credit\n        \n    3. Contact / get list contact => get random 1 contact\n        \n    4. Tax / get list tax => get data only\n        \n    5. Posting / Get list posting => get total posting\n        \n    6. Report / Get report income expense => get data\n        \n    7. ~~Report / account lifetime => get data~~\n        \n    8. Report / cash flow period => get data\n        \n    9. Report/ profit loss period => get data\n        \n    10. Report / chart balance change => get data\n        \n    11. report-app / balance_n_forecast / get chart balance_change => get data\n        \n    12. report-app / balance_n_forecast / get forecast dashboard=> get data\n        \n    13. report-app / cash flow / get cash flow chart => get data\n        \n    14. report-app / cash flow / get cash flow table => get data\n        \n    15. report-app / invoice / get receivable invoice => get data\n        \n    16. report-app / invoice / get receivable customer => get data\n        \n    17. report-app / bill / get payable bill => get data\n        \n    18. report-app / bill / get payable supplier => get data\n        \n    19. report-app / sales / get profit chart => get data\n        \n    20. report-app / sales / get income report => get data\n        \n    21. report-app / sales / get product report => get data\n        \n    22. report-app / sales / get expense chart => get data\n        \n    23. report-app / sales / get expense report => get data\n        \n    24. Transaction / Get list transaction => get total transaction\n        \n3. Create manual transaction\n    \n    1. Unhappy case: null data (except txn_type > default 'out', value_at)\n        \n    2. Unhappy case: amount < 0\n        \n    3. Unhappy case: missing credit ()\n        \n    4. Unhappy case: missing debit ()\n        \n    5. Unhappy case: credit is not existed\n        \n    6. Unhappy case: debit is not existed\n        \n    7. Unhappy case: min/max characters for description\n        \n    8. Unhappy case: value_at is later current\n        \n    9. Happy case => check all data created\n        \n4. Check data\n    \n    1. Transaction / Get list transaction => have new record\n        \n    2. Transaction / Get transaction detail => data correctly\n        \n    3. Account cash_n_bank / Get list account => check respective banlance_amount\n        \n    4. Contact / get list contact => find contact & check data\n        \n    5. Posting / get list posting => have x new posting (must double check x)\n        \n    6. Report / Get report income expense => check data\n        \n    7. ~~Report / account lifetime => check data~~\n        \n    8. Report / cash flow period => check data\n        \n    9. Report/ profit loss period => check data\n        \n    10. Report / chart balance change => check data\n        \n    11. report-app / balance_n_forecast / get chart balance_change => check data\n        \n    12. report-app / balance_n_forecast / get forecast dashboard=> check data\n        \n    13. report-app / cash flow / get cash flow chart => check data\n        \n    14. report-app / cash flow / get cash flow table => check data\n        \n    15. report-app / invoice / get receivable invoice => check data\n        \n    16. report-app / invoice / get receivable customer => check data\n        \n    17. report-app / bill / get payable bill => check data\n        \n    18. report-app / bill / get payable supplier => check data\n        \n    19. report-app / sales / get profit chart => check data\n        \n    20. report-app / sales / get income report => check data\n        \n    21. report-app / sales / get product report => check data\n        \n    22. report-app / sales / get expense chart => check data\n        \n    23. report-app / sales / get expense report => check data\n        \n\n###### Note:\n\n- Account sẽ không có số liệu về amount, phần check balance_amount cần thực hiện ở các API về report\n    \n- credit account: all accounts in sub_group: cash_and_bank\n    \n- debit account: all accounts except sub_groups: cash_and_bank, Current Liabilities\n    \n- NEW:\n    \n    - txn_type == in: debit account only income group\n        \n    - txn_type == out: debit account only expense group\n        \n- Phần mới - sau demo: Thêm thuế vào transaction & không chọn được bank account khi thực hiện manual\n    \n- Handle thêm contact_id để tăng/giảm số tiền nợ của khách\n    \n- ~~POSING CHƯA CHỐT NÊN CHƯA HANDLE~~\n    \n- ~~BANK ACCOUNT CHƯA CÓ API~~",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "282640"
	},
	"item": [
		{
			"name": "authen",
			"item": [
				{
					"name": "login",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// ============================= random characters",
									"function randomChars(length) {",
									"    var result           = '';",
									"    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
									"    var charactersLength = characters.length;",
									"    for ( var i = 0; i < length; i++ ) {",
									"      result += characters.charAt(Math.floor(Math.random() * ",
									" charactersLength));",
									"   }",
									"   return result;",
									"}",
									"",
									"let testcase = 1;",
									"console.log(\"-------- Start Testsuite 45 --------\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let platform = [\"desktop-web\",\"mobile-web\",\"mobile-app\"];",
									"let configs = pm.environment.get(\"C-configs\");",
									"let payload;",
									"if(configs.is_use_email){",
									"    payload = {",
									"        \"app_version\": \"1.0.0\",",
									"        \"device_info\": {",
									"            \"id\": randomChars(7) + \"-\" + randomChars(4) + \"-\" + randomChars(4) + \"-\" + randomChars(4) + \"-\" + randomChars(12),",
									"            \"name\": \"IP name\",",
									"            \"os\": \"iphone\"",
									"        },",
									"        \"email\": pm.environment.get(\"SER-email\"), // pm.environment.get(\"SER-email\")",
									"        \"encrypted_password\": pm.environment.get(\"SER-password\"),",
									"        \"phone_number\": \"\",",
									"        \"platform_key\": platform[0]",
									"    }",
									"} else {",
									"    payload = {",
									"        \"app_version\": \"1.0.0\",",
									"        \"device_info\": {",
									"            \"id\": randomChars(7) + \"-\" + randomChars(4) + \"-\" + randomChars(4) + \"-\" + randomChars(4) + \"-\" + randomChars(12),",
									"            \"name\": \"IP name\",",
									"            \"os\": \"iphone\"",
									"        },",
									"        \"email\":\"\", // pm.environment.get(\"SER-email\")",
									"        \"encrypted_password\": pm.environment.get(\"SER-password\"),",
									"        \"phone_number\": pm.environment.get(\"SER-phone_number\"),",
									"        \"platform_key\": platform[0]",
									"    }",
									"}",
									"",
									"console.log(\"payload: \",payload);",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));",
									"pm.environment.set(\"C-testcase\",testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    pm.test(\"System code is 102000\", function () {",
									"        pm.expect(jsData.code).to.eql(102000);",
									"    });",
									"",
									"    if(jsData.code == 102000){",
									"        let userToken = null;",
									"        try {",
									"            userToken = jsData.data.access_token;",
									"            pm.environment.set(\"C-userToken\",userToken);",
									"        } catch {",
									"            console.log(\"Can't get userToken\");",
									"        }",
									"",
									"        pm.test(\"Got userToken\", function () {",
									"            pm.expect(userToken != null).to.be.true;",
									"        });",
									"",
									"        let userInfo = jsData.data.user_info;",
									"",
									"        // show log",
									"        console.log(\"userInfo:\",JSON.stringify(userInfo));",
									"        pm.environment.set(\"C-userInfo\",userInfo);",
									"",
									"        postman.setNextRequest(\"verify_token_to_get_business\");",
									"    } else {",
									"        console.log(\"Can't get Token, end test\",jsData);",
									"        postman.setNextRequest(null);",
									"    }",
									"} else {",
									"    console.log(\"Can't login new account, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "x-locale",
								"value": "<string>",
								"description": "locale",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-user/api/v1/auth/login",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-user",
								"api",
								"v1",
								"auth",
								"login"
							]
						},
						"description": "Login User"
					},
					"response": []
				},
				{
					"name": "verify_token_to_get_business",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// verify token to get business",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = JSON.parse(responseBody);",
									"if(pm.response.code == 200 && jsData.code == 102000){",
									"    const jsData = pm.response.json();",
									"    pm.environment.set(\"C-user_id\",jsData.data.user_id);",
									"",
									"    let business_id = jsData.data.headers[\"x-business-id\"];",
									"    console.log(\"business_id: \" + business_id);",
									"    pm.environment.set(\"C-business_id\",business_id);",
									"",
									"    postman.setNextRequest(\"get_current_business\");",
									"} else {",
									"    console.log(\"Can't check token to get business_id, end test\");",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"token\": \"{{C-userToken}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-user/api/v1/auth/verify-token",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-user",
								"api",
								"v1",
								"auth",
								"verify-token"
							]
						},
						"description": "Login User"
					},
					"response": []
				},
				{
					"name": "get_business_detail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    // console.log(\"Current business info: \", jsData.data);",
									"    let branch_id = null;",
									"    try {",
									"        branch_id = jsData.data.current_business.list_branch[0].id;",
									"        pm.environment.set(\"C-branch_id\",branch_id);",
									"    } catch {",
									"        console.log(\"Can't get branch id\");",
									"    }",
									"",
									"    pm.test(\"Got branch id \" + branch_id, function () {",
									"        pm.expect(branch_id != null).to.be.true;",
									"    });",
									"    ",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    testcase++;",
									"    pm.environment.set(\"C-testcase\",testcase);",
									"    postman.setNextRequest(\"get_list_internal_account\");",
									"} else {",
									"    console.log(\"Can't get business detail, end test\", jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-business/api/v1/business/get-one/{{C-business_id}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-business",
								"api",
								"v1",
								"business",
								"get-one",
								"{{C-business_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_current_business",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    // console.log(\"Current business info: \", jsData.data);",
									"    let branch_id = null;",
									"    try {",
									"        branch_id = jsData.data.current_business.list_branch[0].id;",
									"        pm.environment.set(\"C-branch_id\",branch_id);",
									"    } catch {",
									"        console.log(\"Can't get branch id\");",
									"    }",
									"",
									"    pm.test(\"Got branch id \" + branch_id, function () {",
									"        pm.expect(branch_id != null).to.be.true;",
									"    });",
									"",
									"    let payment_method_list = [];",
									"    for(let i in jsData.data.list_payment_method){",
									"        if(jsData.data.list_payment_method[i].is_active){",
									"            payment_method_list[payment_method_list.length] = jsData.data.list_payment_method[i];",
									"        }",
									"    }",
									"",
									"    pm.test(\"Got payment_method_list \" + payment_method_list.length, function () {",
									"        pm.expect(payment_method_list.length > 0).to.be.true;",
									"    });",
									"    pm.environment.set(\"C-payment_method_list\",payment_method_list);",
									"    ",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    testcase++;",
									"    pm.environment.set(\"C-testcase\",testcase);",
									"    postman.setNextRequest(\"get_list_internal_account\");",
									"} else {",
									"    console.log(\"Can't get business detail, end test\", jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-business/api/v1/business/get-current",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-business",
								"api",
								"v1",
								"business",
								"get-current"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "account coa",
			"item": [
				{
					"name": "get_list_internal_account",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let coa = [], list_income_account = [], list_expense_account = [];",
									"    try {",
									"        for(let i in jsData.data){",
									"            let sub_group_i = [];",
									"            for(let j in jsData.data[i].sub_group){",
									"                let accounts_j = [];",
									"                for(let k in jsData.data[i].sub_group[j].accounts){",
									"                    accounts_j[accounts_j.length] = {",
									"                        \"account_name\":jsData.data[i].sub_group[j].accounts[k].account_name,",
									"                        \"account_id\":jsData.data[i].sub_group[j].accounts[k].id,",
									"                        \"group_name\":jsData.data[i].sub_group[j].accounts[k].group_name,",
									"                        \"sub_group_name\":jsData.data[i].sub_group[j].accounts[k].sub_name,",
									"                        \"account_name_custom\":jsData.data[i].sub_group[j].accounts[k].account_name_custom,",
									"                        \"account_key\":jsData.data[i].sub_group[j].accounts[k].account_key,",
									"                        \"business_id\":jsData.data[i].sub_group[j].accounts[k].business_id,",
									"                        \"account_type\":jsData.data[i].sub_group[j].accounts[k].account_type,",
									"                        \"account_number\":jsData.data[i].sub_group[j].accounts[k].account_number,",
									"                        \"coa_type\":jsData.data[i].sub_group[j].accounts[k].coa_type,",
									"                        \"status\":jsData.data[i].sub_group[j].accounts[k].status,",
									"                        \"parent_account_id\":jsData.data[i].sub_group[j].accounts[k].parent_account_id,",
									"                        \"description\":jsData.data[i].sub_group[j].accounts[k].description",
									"                    }",
									"",
									"                    if(jsData.data[i].value == \"income\" && jsData.data[i].sub_group[j].accounts[k].account_name != \"\"){",
									"                        list_income_account[list_income_account.length] = {",
									"                            \"account_name\":jsData.data[i].sub_group[j].accounts[k].account_name,",
									"                            \"account_id\":jsData.data[i].sub_group[j].accounts[k].id,",
									"                            \"group_name\":jsData.data[i].sub_group[j].accounts[k].group_name,",
									"                            \"sub_group_name\":jsData.data[i].sub_group[j].accounts[k].sub_name,",
									"                            \"account_name_custom\":jsData.data[i].sub_group[j].accounts[k].account_name_custom,",
									"                            \"account_key\":jsData.data[i].sub_group[j].accounts[k].account_key,",
									"                            \"business_id\":jsData.data[i].sub_group[j].accounts[k].business_id,",
									"                            \"account_type\":jsData.data[i].sub_group[j].accounts[k].account_type,",
									"                            \"account_number\":jsData.data[i].sub_group[j].accounts[k].account_number,",
									"                            \"coa_type\":jsData.data[i].sub_group[j].accounts[k].coa_type,",
									"                            \"status\":jsData.data[i].sub_group[j].accounts[k].status,",
									"                            \"parent_account_id\":jsData.data[i].sub_group[j].accounts[k].parent_account_id,",
									"                            \"description\":jsData.data[i].sub_group[j].accounts[k].description",
									"                        };",
									"                    }",
									"",
									"                    if(jsData.data[i].value == \"expense\" && jsData.data[i].sub_group[j].accounts[k].account_name != \"\"){",
									"                        list_expense_account[list_expense_account.length] = {",
									"                            \"account_name\":jsData.data[i].sub_group[j].accounts[k].account_name,",
									"                            \"account_id\":jsData.data[i].sub_group[j].accounts[k].id,",
									"                            \"group_name\":jsData.data[i].sub_group[j].accounts[k].group_name,",
									"                            \"sub_group_name\":jsData.data[i].sub_group[j].accounts[k].sub_name,",
									"                            \"account_name_custom\":jsData.data[i].sub_group[j].accounts[k].account_name_custom,",
									"                            \"account_key\":jsData.data[i].sub_group[j].accounts[k].account_key,",
									"                            \"business_id\":jsData.data[i].sub_group[j].accounts[k].business_id,",
									"                            \"account_type\":jsData.data[i].sub_group[j].accounts[k].account_type,",
									"                            \"account_number\":jsData.data[i].sub_group[j].accounts[k].account_number,",
									"                            \"coa_type\":jsData.data[i].sub_group[j].accounts[k].coa_type,",
									"                            \"status\":jsData.data[i].sub_group[j].accounts[k].status,",
									"                            \"parent_account_id\":jsData.data[i].sub_group[j].accounts[k].parent_account_id,",
									"                            \"description\":jsData.data[i].sub_group[j].accounts[k].description",
									"                        };",
									"                    }",
									"                }",
									"",
									"                sub_group_i[sub_group_i.length] = {",
									"                    \"sub_group_name\":jsData.data[i].sub_group[j].name,",
									"                    \"sub_group_id\":jsData.data[i].sub_group[j].id,",
									"                    \"sub_group_value\":jsData.data[i].sub_group[j].value,",
									"                    \"sub_group_description\":jsData.data[i].sub_group[j].description,",
									"                    \"accounts\":accounts_j",
									"                }",
									"            }",
									"",
									"            coa[coa.length] = {",
									"                \"group_name\":jsData.data[i].name,",
									"                \"value\":jsData.data[i].value,",
									"                \"index\":jsData.data[i].index,",
									"                \"sub_group\":sub_group_i",
									"            }",
									"        }",
									"    } catch {",
									"        console.log(\"can't get all account in coa\");",
									"    }",
									"",
									"    pm.test(\"Got coa of this user's business\", function () {",
									"        pm.expect(coa.length > 0).to.be.true;",
									"    });",
									"",
									"    if(coa.length > 0){",
									"        // console.log(\"coa: \", coa);",
									"        pm.environment.set(\"C-coa\",coa);",
									"        let list_debit_account = [];",
									"        let list_credit_account = [];",
									"        /**",
									"         * lấy những account_id và phân loại thành debit/credit",
									"         * - credit: tài khoản (only cash & bank)",
									"         * - debit: phân loại (all)",
									"         */ ",
									"        for(let i in coa){",
									"            for(let j in coa[i].sub_group){",
									"                for(let k in coa[i].sub_group[j].accounts){",
									"                    if(coa[i].value == \"income\" || coa[i].value == \"expense\"){ // mở điều kiện này khi cần debug tạo tnx có report cash-flow",
									"                        list_debit_account[list_debit_account.length] = coa[i].sub_group[j].accounts[k];",
									"                    }",
									"                    if(coa[i].sub_group[j].sub_group_value == \"A1\"){ ",
									"                        // console.log(\"debug: \", coa[i].sub_group[j].accounts[k]);",
									"                        if(coa[i].sub_group[j].accounts[k].account_name != \"\"){ // do 1 số name bị null (dev chưa validation dẫn đến report sẽ không biết của account nào - report ko trả về id, và loại bỏ bank account, chỉ lấy cash account)",
									"                            list_credit_account[list_credit_account.length] = coa[i].sub_group[j].accounts[k];",
									"                        }",
									"                    }",
									"                }",
									"            }",
									"        }",
									"",
									"        // console.log(\"list_debit_account: \", list_debit_account);",
									"        // console.log(\"list_credit_account: \", list_credit_account);",
									"        // console.log(\"=========== list_income_account: \", list_income_account);",
									"        for(let item in list_income_account){",
									"            if(list_income_account[item].account_key == \"C3001\"){ // uncategorized_income => C3001",
									"                pm.environment.set(\"C-uncategorized_income\",list_income_account[item]);",
									"                break;",
									"            }",
									"        }",
									"        // console.log(\"=========== list_expense_account: \", list_expense_account);",
									"        for(let item in list_expense_account){",
									"            if(list_expense_account[item].account_key == \"D4001\"){ // uncategorized_expense => D4001",
									"                pm.environment.set(\"C-uncategorized_expense\",list_expense_account[item]);",
									"                break;",
									"            }",
									"        }",
									"",
									"        pm.environment.set(\"C-list_debit_account\",list_debit_account);",
									"        pm.environment.set(\"C-list_credit_account\",list_credit_account);",
									"        // console.log(\"list_income_account: \", list_income_account);",
									"        pm.environment.set(\"C-list_income_account\",list_income_account);",
									"        // console.log(\"list_expense_account: \", list_expense_account);",
									"        pm.environment.set(\"C-list_expense_account\",list_expense_account);",
									"        ",
									"        postman.setNextRequest(\"get_list_payment_account\"); //get_list_payment_account",
									"    } else {",
									"        console.log(\"Can't get list internal account, end test \");",
									"        postman.setNextRequest(null);",
									"    }",
									"} else {",
									"    console.log(\"Can't get list internal account, end test \", jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{finone_url}}​/fo-ledger/api/v1/account/get-list-setting?business_id={{C-business_id}}&coa_type=",
							"host": [
								"{{finone_url}}​"
							],
							"path": [
								"fo-ledger",
								"api",
								"v1",
								"account",
								"get-list-setting"
							],
							"query": [
								{
									"key": "business_id",
									"value": "{{C-business_id}}"
								},
								{
									"key": "coa_type",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get_internal_account_detail",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/**",
									" * Only check credit_account",
									" */",
									"",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let list_internal_account = pm.environment.get(\"C-list_internal_account\");",
									"let pos = pm.environment.get(\"C-pos\");",
									"if(!pos){",
									"    pos = 0;",
									"    pm.environment.set(\"C-pos\",pos);",
									"}",
									"",
									"let internal_account_id = list_internal_account[pos].account_id;",
									"console.log(\"view detail account: \" + account_id);",
									"",
									"pm.environment.set(\"C-internal_account_id\",internal_account_id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    const jsData = pm.response.json();",
									"    // let testcase = pm.environment.get(\"C-testcase\");",
									"    console.log(\"Debug: \" + JSON.stringify(jsData));",
									"",
									"    let list_internal_account = pm.environment.get(\"C-list_internal_account\");",
									"    let pos = pm.environment.get(\"C-pos\");",
									"",
									"    if(pos >= list_internal_account.length - 1){",
									"        pm.environment.unset(\"C-pos\");",
									"",
									"        postman.setNextRequest(\"get_list_tax\"); // get_list_tax",
									"    } else {",
									"        pos++;",
									"        pm.environment.set(\"C-pos\",pos);",
									"",
									"        postman.setNextRequest(\"get_internal_account_detail\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get internal account detail, end test\");",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{finan_base_url}}​​/finan-ledger/api/v1/account/detail/{{C-internal_account_id}}",
							"host": [
								"{{finan_base_url}}​​"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"account",
								"detail",
								"{{C-internal_account_id}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.request.headers.add({",
							" key: \"authorization\",",
							" value: \"Bearer \" + pm.environment.get(\"C-userToken\")",
							"});",
							"",
							"pm.request.headers.add({",
							" key: \"Content-Type\",",
							" value: \"application/json\"",
							"});"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "account cash_n_bank",
			"item": [
				{
					"name": "get_list_payment_account",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let list_credit_account = pm.environment.get(\"C-list_credit_account\");",
									"",
									"    let list_bank_account = [];",
									"    for(let j in jsData.data[0].accounts){",
									"        // if(jsData.data[0].accounts[j].provider_id != \"\"){ // remove va bank account out list",
									"            list_bank_account[list_bank_account.length] = {",
									"                \"account_id\":jsData.data[0].accounts[j].id,",
									"                \"account_name\":jsData.data[0].accounts[j].account_name,",
									"                \"status\":jsData.data[0].accounts[j].status,",
									"                \"external_account_id\":jsData.data[0].accounts[j].external_account_id,",
									"                \"provider_id\":jsData.data[0].accounts[j].provider_id",
									"            }",
									"        // }",
									"    }",
									"",
									"    let configs = pm.environment.get(\"C-configs\");",
									"    switch(testcase){",
									"        case 2:",
									"            for(let i in list_credit_account){",
									"                for(let j in jsData.data[0].accounts){",
									"                    if(list_credit_account[i].account_id == jsData.data[0].accounts[j].id){",
									"                        list_credit_account[i].open_amount = jsData.data[0].accounts[j].open_amount;",
									"                        list_credit_account[i].total_balance_amount = jsData.data[0].accounts[j].total_balance_amount;",
									"                        // list_credit_account[i].status = jsData.data[0].accounts[j].status;",
									"                        break;",
									"                    }",
									"                }",
									"            }",
									"",
									"            let term_credit = [];",
									"            switch(configs.credit_type){",
									"                case \"gp\":",
									"                    for(let i in list_credit_account){",
									"                        if(list_credit_account[i].account_type == \"galaxy_pay\"){",
									"                            term_credit[term_credit.length] = list_credit_account[i];",
									"                        }",
									"                    }",
									"                    break;",
									"                case \"mb\":",
									"                    for(let i in list_credit_account){",
									"                        if(list_credit_account[i].account_type == \"link_bank\"){",
									"                            term_credit[term_credit.length] = list_credit_account[i];",
									"                        }",
									"                    }",
									"                    break;",
									"                case \"va\":",
									"                    for(let i in list_credit_account){",
									"                        if(list_credit_account[i].account_type == \"va_bank\"){",
									"                            term_credit[term_credit.length] = list_credit_account[i];",
									"                        }",
									"                    }",
									"                    break;",
									"                case \"cash\":",
									"                default:",
									"                    for(let i in list_credit_account){",
									"                        if(list_credit_account[i].account_type == \"default\" || list_credit_account[i].account_type == \"manual\"){",
									"                            term_credit[term_credit.length] = list_credit_account[i];",
									"                        }",
									"                    }",
									"                    break;",
									"            }",
									"            // console.log(\"term_credit: \",term_credit);",
									"",
									"            pm.environment.set(\"C-list_credit_account\",term_credit);",
									"",
									"            pm.test(\"Got list bank account\", function () {",
									"                pm.expect(list_bank_account.length > 0).to.be.true;",
									"            });",
									"",
									"            pm.environment.set(\"C-list_bank_account\",list_bank_account);",
									"",
									"            postman.setNextRequest(\"get_list_contact\"); // get_list_contact",
									"            break;",
									"        case 4:",
									"            let ranRedPos = pm.environment.get(\"C-ranRedPos\");",
									"            let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"            let tnx_amount = parseFloat(tnx_obj.amount);",
									"            let isFound = false;",
									"            console.log(\"list_credit_account: \",list_credit_account);",
									"            console.log(\"ranRedPos: \" + ranRedPos);",
									"            for(let j in jsData.data[0].accounts){",
									"                if(list_credit_account[ranRedPos].account_id == jsData.data[0].accounts[j].id){",
									"                    isFound = true;",
									"",
									"                    if(tnx_obj.txn_type == \"in\"){",
									"                        pm.test(\"total_balance_amount increase \" + tnx_amount, function () {",
									"                            console.log(\"old: \" + list_credit_account[ranRedPos].total_balance_amount);",
									"                            console.log(\"expected: \" + (list_credit_account[ranRedPos].total_balance_amount + tnx_amount));",
									"                            console.log(\"act: \" + jsData.data[0].accounts[j].total_balance_amount);",
									"                            pm.expect(jsData.data[0].accounts[j].total_balance_amount == list_credit_account[ranRedPos].total_balance_amount + tnx_amount).to.be.true;",
									"                        });",
									"                    } else {",
									"                        pm.test(\"total_balance_amount decrease \" + tnx_amount, function () {",
									"                            console.log(\"old: \" + list_credit_account[ranRedPos].total_balance_amount);",
									"                            console.log(\"expected: \" + (list_credit_account[ranRedPos].total_balance_amount - tnx_amount));",
									"                            console.log(\"act: \" + jsData.data[0].accounts[j].total_balance_amount);",
									"                            pm.expect(jsData.data[0].accounts[j].total_balance_amount == list_credit_account[ranRedPos].total_balance_amount - tnx_amount).to.be.true;",
									"                        });",
									"                    }",
									"                    break;",
									"                }",
									"            }",
									"",
									"            pm.test(\"Found account \" + list_credit_account[ranRedPos].account_name, function () {",
									"                pm.expect(isFound).to.be.true;",
									"            });",
									"",
									"            postman.setNextRequest(\"get_list_contact\"); // get_list_contact",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get list payment account, end test\", jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-ledger/api/v1/account/get-list-sub?business_id={{C-business_id}}&sub_account_key=A1",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-ledger",
								"api",
								"v1",
								"account",
								"get-list-sub"
							],
							"query": [
								{
									"key": "business_id",
									"value": "{{C-business_id}}"
								},
								{
									"key": "sub_account_key",
									"value": "A1"
								},
								{
									"key": "account_type",
									"value": "manual",
									"description": "system, default, manual, link_bank, va_bank",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "contact",
			"item": [
				{
					"name": "get_list_contact",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// const clRandom = pm.require('@chaule2906/cl-random');",
									"// ============================= random number between min and max",
									"function getRandomInt(min, max) {",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = pm.response.json();",
									"if(pm.response.code == 200 && jsData.code == 102000){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let total_pages = jsData.meta.total_pages;",
									"    let page = pm.environment.get(\"C-page\");",
									"",
									"    let list_contact, old_list_contact;",
									"    switch(testcase){",
									"        case 2:",
									"            list_contact = pm.environment.get(\"C-list_contact\");",
									"            if(!list_contact){",
									"                list_contact = [];",
									"            }",
									"            break;",
									"        case 4:",
									"            old_list_contact = pm.environment.get(\"C-old_list_contact\");",
									"            if(!old_list_contact){",
									"                old_list_contact = pm.environment.get(\"C-list_contact\");",
									"                pm.environment.unset(\"C-list_contact\");",
									"                pm.environment.set(\"C-old_list_contact\",old_list_contact);",
									"            }",
									"",
									"            list_contact = pm.environment.get(\"C-list_contact\");",
									"            if(!list_contact){",
									"                list_contact = [];",
									"            }",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow\");",
									"            break;",
									"    }",
									"",
									"    for(let item in jsData.data){",
									"        if(jsData.data[item].contact_name.includes(\"[API]\")){",
									"            list_contact[list_contact.length] = {",
									"                \"contact_id\":jsData.data[item].id,",
									"                \"name\":jsData.data[item].contact_name,",
									"                \"phone_number\":jsData.data[item].phone_number,",
									"                \"email\":jsData.data[item].email,",
									"                \"tnx_config\":jsData.data[item].tnx_config,",
									"                \"tax_code\":jsData.data[item].tax_code,",
									"                \"payment_methods\":jsData.data[item].payment_methods,",
									"                \"total_payable\":jsData.data[item].total_payable,",
									"                \"total_receivable\":jsData.data[item].total_receivable",
									"            }",
									"        }",
									"    }",
									"    pm.environment.set(\"C-list_contact\",list_contact);",
									"",
									"    if(page >= total_pages){",
									"        // must clear page & page_size",
									"        pm.environment.unset(\"C-page\");",
									"        pm.environment.unset(\"C-page_size\");",
									"",
									"        let contact_obj, old_contact_obj;",
									"        let tnx_obj = pm.environment.get(\"C-tnx_obj\"); ",
									"        switch(testcase){",
									"            case 2:",
									"                pm.test(\"Got all contact! \" + list_contact.length, function () {",
									"                    pm.expect(list_contact.length > 0).to.be.true;",
									"                });",
									"",
									"                // let contact_obj = list_contact[clRandom.getRandomInt(0,list_contact.length - 1)];",
									"                contact_obj = list_contact[getRandomInt(0,list_contact.length - 1)];",
									"                console.log(\"will create tnx for contact: \", contact_obj);",
									"                pm.environment.set(\"C-contact_obj\",contact_obj);",
									"                pm.environment.set(\"C-contact_id\",contact_obj.contact_id);",
									"",
									"                postman.setNextRequest(\"get_list_tax\"); // get_list_tax",
									"                break;",
									"            case 4:",
									"                old_contact_obj = pm.environment.get(\"C-contact_obj\");",
									"                // console.log(\"debug list_contact: \", list_contact);",
									"                for(let i in list_contact){",
									"                    if(list_contact[i].contact_id == old_contact_obj.contact_id){",
									"                        contact_obj = list_contact[i];",
									"                        // console.log(\"debug: \", contact_obj);",
									"                        break;",
									"                    }",
									"                }",
									"",
									"                // tạo tnx sẽ tăng total_receivable cho customer",
									"                pm.test(\"total_receivable increase \" + tnx_obj.amount, function () {",
									"                    console.log(\"old: \" + old_contact_obj.total_receivable);",
									"                    console.log(\"new: \" + contact_obj.total_receivable);",
									"                    pm.expect(contact_obj.total_receivable).to.eql(old_contact_obj.total_receivable + tnx_obj.amount);",
									"                });",
									"",
									"                postman.setNextRequest(\"get_list_posting\"); // get_report_cash_flow, get_list_posting",
									"                break;",
									"            default:",
									"                break;",
									"        }",
									"    } else {",
									"        page++;",
									"        pm.environment.set(\"C-page\",page);",
									"",
									"        console.log(\"view next page (\" + page + \") to get more contact\");",
									"        postman.setNextRequest(\"get_list_contact\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get list contact, end test\");",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let configs = pm.environment.get(\"C-configs\");",
									"if(testcase == 5 || testcase == 8){",
									"    setTimeout(function(){}, configs.timeout);",
									"}",
									"",
									"let page = pm.environment.get(\"C-page\");",
									"",
									"if(!page){",
									"    page = 1;",
									"    pm.environment.set(\"C-page\",page);",
									"",
									"    let page_size = 20;",
									"    pm.environment.set(\"C-page_size\",page_size);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-business/api/v1/contact/get-list?business_id={{C-business_id}}&page={{C-page}}&page_size={{C-page_size}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-business",
								"api",
								"v1",
								"contact",
								"get-list"
							],
							"query": [
								{
									"key": "search",
									"value": "",
									"disabled": true
								},
								{
									"key": "business_id",
									"value": "{{C-business_id}}"
								},
								{
									"key": "page",
									"value": "{{C-page}}"
								},
								{
									"key": "page_size",
									"value": "{{C-page_size}}"
								},
								{
									"key": "sort",
									"value": "",
									"disabled": true
								},
								{
									"key": "option",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "tax",
			"item": [
				{
					"name": "get_list_tax",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ============================= random number between min and max",
									"function getRandomInt(min, max) {",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = JSON.parse(responseBody);",
									"if(pm.response.code == 200 && jsData.code == 102000){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let total_pages = jsData.meta.total_pages;",
									"    let page = pm.environment.get(\"C-page\");",
									"",
									"    let list_tax = pm.environment.get(\"C-list_tax\");",
									"    if(!list_tax){",
									"        list_tax = [];",
									"    }",
									"",
									"    for(let item in jsData.data){",
									"        if(jsData.data[item].description.includes(\"[API]\") && jsData.data[item].rate > 0 && jsData.data[item].rate < 100){",
									"            list_tax[list_tax.length] = {",
									"                \"tax_id\":jsData.data[item].id,",
									"                \"name\":jsData.data[item].name,",
									"                \"rate\":jsData.data[item].rate,",
									"                \"account_id\":jsData.data[item].account_id,",
									"                \"description\":jsData.data[item].description",
									"            }",
									"        }",
									"    }",
									"    pm.environment.set(\"C-list_tax\",list_tax);",
									"",
									"    if(page >= total_pages){",
									"        // must clear page & page_size",
									"        pm.environment.unset(\"C-page\");",
									"        pm.environment.unset(\"C-page_size\");",
									"",
									"        pm.test(\"Got all tax! \" + list_tax.length, function () {",
									"            pm.expect(list_tax.length > 0).to.be.true;",
									"        });",
									"        ",
									"        let tax_obj = list_tax[getRandomInt(0,list_tax.length - 1)];",
									"        console.log(\"will create tnx with tax: \", tax_obj);",
									"        pm.environment.set(\"C-tax_obj\",tax_obj);",
									"",
									"        postman.setNextRequest(\"get_list_posting\"); // get_list_posting",
									"    } else {",
									"        page++;",
									"        pm.environment.set(\"C-page\",page);",
									"",
									"        console.log(\"view next page (\" + page + \") to get more tax\");",
									"        postman.setNextRequest(\"get_list_tax\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get list tax, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let page = pm.environment.get(\"C-page\");",
									"",
									"if(!page){",
									"    page = 1;",
									"    pm.environment.set(\"C-page\",page);",
									"",
									"    let page_size = 20;",
									"    pm.environment.set(\"C-page_size\",page_size);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-business/api/v1/tax/get-list?business_id={{C-business_id}}&page={{C-page}}&page_size={{C-page_size}}&option=&status=",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-business",
								"api",
								"v1",
								"tax",
								"get-list"
							],
							"query": [
								{
									"key": "business_id",
									"value": "{{C-business_id}}"
								},
								{
									"key": "page",
									"value": "{{C-page}}"
								},
								{
									"key": "page_size",
									"value": "{{C-page_size}}"
								},
								{
									"key": "option",
									"value": ""
								},
								{
									"key": "status",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "transaction",
			"item": [
				{
					"name": "get_list_transaction",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = JSON.parse(responseBody);",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let total_tnx = null;",
									"    try {",
									"        total_tnx = jsData.meta.total_rows;",
									"    } catch {",
									"        console.log(\"Can't get total tnx\");",
									"    }",
									"",
									"    switch(testcase){",
									"        case 2:",
									"            pm.test(\"Got total tnx! \" + total_tnx, function () {",
									"                pm.expect(total_tnx != null).to.be.true;",
									"            });",
									"            pm.environment.set(\"C-total_tnx\",total_tnx);",
									"",
									"            testcase++;",
									"            pm.environment.set(\"C-testcase\",testcase);",
									"            postman.setNextRequest(\"create_transaction\"); // create_transaction",
									"            break;",
									"        case 4:",
									"            let old_total_tnx = pm.environment.get(\"C-total_tnx\");",
									"            let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"",
									"            pm.test(\"Total tnx increase 1\", function () {",
									"                console.log(\"Actual: \" + total_tnx);",
									"                console.log(\"Expected: \" + (old_total_tnx + 1));",
									"                pm.expect(total_tnx == old_total_tnx + 1).to.be.true;",
									"            });",
									"",
									"            let isFound = false;",
									"            for(let i in jsData.data){",
									"                if(jsData.data[i].id == tnx_obj.tnx_id){",
									"                    isFound = true;",
									"                    pm.test(\"amount of tnx correctly! \" + tnx_obj.amount, function () {",
									"                        pm.expect(tnx_obj.amount == jsData.data[i].amount).to.be.true;",
									"                    });",
									"",
									"                    pm.test(\"txn_type of tnx correctly! \" + tnx_obj.txn_type, function () {",
									"                        pm.expect(tnx_obj.txn_type == jsData.data[i].txn_type).to.be.true;",
									"                    });",
									"",
									"                    pm.test(\"description of tnx correctly! \" + tnx_obj.description, function () {",
									"                        pm.expect(tnx_obj.description == jsData.data[i].description).to.be.true;",
									"                    });",
									"",
									"                    pm.test(\"value_at of tnx correctly! \" + tnx_obj.value_at, function () {",
									"                        let act_value_at = new Date(jsData.data[i].value_at);",
									"                        console.log(\"actual value_at: \" + act_value_at.toISOString());",
									"                        pm.expect(tnx_obj.value_at == act_value_at.toISOString()).to.be.true; // tạm thời lấy mốc giờ +7 nên fix cứng, sau này sẽ dùng biến",
									"                    });",
									"                    break;",
									"                }",
									"            }",
									"",
									"            pm.test(\"Found new tnx\", function () {",
									"                pm.expect(isFound).to.be.true;",
									"            });",
									"",
									"            postman.setNextRequest(\"get_transaction_detail\"); // get_transaction_detail (get tnx detail đang lỗi nên tạm thời skip) get_report_cash_flow",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get list tnx, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{finone_url}}/fo-ledger/api/v1/transaction/get-list?business_id={{C-business_id}}&page=1&page_size=50&sort",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-ledger",
								"api",
								"v1",
								"transaction",
								"get-list"
							],
							"query": [
								{
									"key": "business_id",
									"value": "{{C-business_id}}"
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "page_size",
									"value": "50"
								},
								{
									"key": "sort",
									"value": null
								},
								{
									"key": "is_txn_bank",
									"value": "true",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get_transaction_detail",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"let tnx_id = tnx_obj.tnx_id;",
									"console.log(\"view detail tnx: \" + tnx_id);",
									"",
									"pm.environment.set(\"C-tnx_id\",tnx_id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    // let testcase = pm.environment.get(\"C-testcase\");",
									"    console.log(\"Debug: \" + JSON.stringify(jsData));",
									"",
									"    let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"",
									"    pm.test(\"amount of tnx correctly! \" + tnx_obj.amount, function () {",
									"        pm.expect(tnx_obj.amount == jsData.data.amount).to.be.true;",
									"    });",
									"",
									"    pm.test(\"txn_type of tnx correctly! \" + tnx_obj.txn_type, function () {",
									"        pm.expect(tnx_obj.txn_type == jsData.data.txn_type).to.be.true;",
									"    });",
									"",
									"    pm.test(\"description of tnx correctly! \" + tnx_obj.description, function () {",
									"        pm.expect(tnx_obj.description == jsData.data.description).to.be.true;",
									"    });",
									"",
									"    pm.test(\"value_at of tnx correctly! \" + tnx_obj.value_at, function () {",
									"        let act_value_at = new Date(jsData.data.value_at);",
									"        console.log(\"actual value_at: \" + act_value_at.toISOString());",
									"        pm.expect(tnx_obj.value_at == act_value_at.toISOString()).to.be.true;",
									"    });",
									"",
									"    postman.setNextRequest(\"get_list_payment_account\"); // get_list_payment_account",
									"} else {",
									"    console.log(\"Can't get internal contact detail, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{finone_url}}/fo-ledger/api/v1/transaction/get-one/{{C-tnx_id}}?business_id={{C-business_id}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-ledger",
								"api",
								"v1",
								"transaction",
								"get-one",
								"{{C-tnx_id}}"
							],
							"query": [
								{
									"key": "business_id",
									"value": "{{C-business_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "create_transaction",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// ============================= random number between min and max",
									"function getRandomInt(min, max) {",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"",
									"// ============================= random characters",
									"function randomChars(length) {",
									"    var result           = '';",
									"    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
									"    var charactersLength = characters.length;",
									"    for ( var i = 0; i < length; i++ ) {",
									"      result += characters.charAt(Math.floor(Math.random() * charactersLength));",
									"   }",
									"   return result;",
									"}",
									"",
									"// ============================= get random day in current month",
									"function getRandomDayOfCurrentMonth() {",
									"    const now = new Date(); // Get the current date and time",
									"    const year = now.getFullYear(); // Get the current year",
									"    const month = now.getMonth(); // Get the current month (0-indexed)",
									"    const totalDays = new Date(year, month + 1, 0).getDate();",
									"    const randomDay = Math.floor(Math.random() * totalDays) + 1;",
									"    const randomDate = new Date(year, month, randomDay);",
									"    return randomDate;",
									"}",
									"",
									"/**",
									" * txn_type: in/out => Tạo Thu/ Tạo Chi",
									" * account_credit: Tài khoản => only cash&bank sub_group",
									" * account_debit: Phân loại => all accounts",
									" */",
									"",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"let case_ = pm.environment.get(\"C-case_\");",
									"if(!case_){",
									"    case_ = 9;",
									"    pm.environment.set(\"C-case_\",case_);",
									"}",
									"console.log(\"Testcase: \" + testcase + \".\" + case_);",
									"",
									"let today = new Date();",
									"let next_date_stp = Math.floor(today.getTime()/1000) + 24*60*60;",
									"let next_date = new Date(next_date_stp*1000);",
									"let randDay = getRandomDayOfCurrentMonth();",
									"",
									"let list_debit_account = pm.environment.get(\"C-list_debit_account\");",
									"let list_credit_account = pm.environment.get(\"C-list_credit_account\");",
									"let txn_types = [\"in\",\"out\"];",
									"",
									"let configs = pm.environment.get(\"C-configs\");",
									"let account_credit, account_debit, amount, tax_amount = 0, tax_id;",
									"let value_at, txn_type, description;",
									"switch(case_){",
									"    case 1:",
									"        console.log(\"Unhappy case: null data (except txn_type > default 'out', value_at)\");",
									"        account_credit = null;",
									"        account_debit = null;",
									"        amount = null;",
									"        value_at = today.toISOString();",
									"        txn_type = \"\"; // \"\" == \"out\"",
									"        description = \"\";",
									"        break;",
									"    case 2:",
									"        console.log(\"Unhappy case: amount < 0\");",
									"        account_credit = list_credit_account[getRandomInt(0,list_credit_account.length -  1)].account_id;",
									"        account_debit = list_debit_account[getRandomInt(0,list_debit_account.length -  1)].account_id;",
									"        amount = -getRandomInt(1,50)*100000;",
									"        value_at = today.toISOString();",
									"        txn_type = txn_types[getRandomInt(0,1)];",
									"        description = \"[API][\" + txn_type + \"] transaction \" + randomChars(6);",
									"        break;",
									"    case 3:",
									"        console.log(\"Unhappy case: missing credit\");",
									"        account_credit = null;",
									"        account_debit = list_debit_account[getRandomInt(0,list_debit_account.length -  1)].account_id;",
									"        amount = -getRandomInt(1,50)*100000;",
									"        value_at = today.toISOString();",
									"        txn_type = txn_types[getRandomInt(0,1)];",
									"        description = \"[API][\" + txn_type + \"] transaction \" + randomChars(6);",
									"        break;",
									"    case 4:",
									"        console.log(\"Unhappy case: missing debit\");",
									"        account_credit = list_credit_account[getRandomInt(0,list_credit_account.length -  1)].account_id;",
									"        account_debit = null;",
									"        amount = -getRandomInt(1,50)*100000;",
									"        value_at = today.toISOString();",
									"        txn_type = txn_types[getRandomInt(0,1)];",
									"        description = \"[API][\" + txn_type + \"] transaction \" + randomChars(6);",
									"        break;",
									"    case 5:",
									"        console.log(\"Unhappy case: credit is not existed\");",
									"        account_credit = 9999999999999;",
									"        account_debit = list_debit_account[getRandomInt(0,list_debit_account.length -  1)].account_id;",
									"        amount = -getRandomInt(1,50)*100000;",
									"        value_at = today.toISOString();",
									"        txn_type = txn_types[getRandomInt(0,1)];",
									"        description = \"[API][\" + txn_type + \"] transaction \" + randomChars(6);",
									"        break;",
									"    case 6:",
									"        console.log(\"Unhappy case: debit is not existed\");",
									"        account_credit = list_credit_account[getRandomInt(0,list_credit_account.length -  1)].account_id;",
									"        account_debit = 9999999999999;",
									"        amount = getRandomInt(1,50)*100000;",
									"        value_at = today.toISOString();",
									"        txn_type = txn_types[getRandomInt(0,1)];",
									"        description = \"[API][\" + txn_type + \"] transaction \" + randomChars(6);",
									"        break;",
									"    case 7:",
									"        console.log(\"Unhappy case: min/max characters for description\");",
									"        account_credit = list_credit_account[getRandomInt(0,list_credit_account.length -  1)].account_id;",
									"        account_debit = list_debit_account[getRandomInt(0,list_debit_account.length -  1)].account_id;",
									"        amount = getRandomInt(1,50)*100000;",
									"        value_at = today.toISOString();",
									"        txn_type = txn_types[getRandomInt(0,1)];",
									"        description = \"[API][\" + txn_type + \"] transaction \" + randomChars(1000);",
									"        break;",
									"    case 8:",
									"        console.log(\"Unhappy case: value_at is later current\");",
									"        account_credit = list_credit_account[getRandomInt(0,list_credit_account.length -  1)].account_id;",
									"        account_debit = list_debit_account[getRandomInt(0,list_debit_account.length -  1)].account_id;",
									"        amount = getRandomInt(1,50)*100000;",
									"        value_at = next_date.toISOString();",
									"        txn_type = txn_types[getRandomInt(0,1)];",
									"        description = \"[API][\" + txn_type + \"] transaction \" + randomChars(6);",
									"        break;",
									"    case 9:",
									"        console.log(\"Happy case\");",
									"        let list_income_account = pm.environment.get(\"C-list_income_account\");",
									"        // console.log(\"list_income_account: \",list_income_account);",
									"        let list_expense_account = pm.environment.get(\"C-list_expense_account\");",
									"        // console.log(\"list_expense_account: \",list_expense_account);",
									"",
									"        let ranRedPos = getRandomInt(0,list_credit_account.length -  1);",
									"        console.log(\"list_credit_account: \",list_credit_account);",
									"        // console.log(\"ranRedPos: \" + ranRedPos);",
									"        // debug",
									"        // for(let i in list_credit_account){",
									"        //     if(list_credit_account[i].account_id == 1002424){ // MB account",
									"        //         ranRedPos = i;",
									"        //         break;",
									"        //     }",
									"        // }",
									"        console.log(\"ranRedPos: \" + ranRedPos);",
									"        account_credit = list_credit_account[ranRedPos].account_id;",
									"        pm.environment.set(\"C-ranRedPos\",ranRedPos);",
									"        txn_type = configs.txn_type;",
									"        switch(txn_type){",
									"            case \"in\":",
									"                account_debit = list_income_account[getRandomInt(0,list_income_account.length - 1)].account_id; // getRandomInt(0,list_income_account.length - 1)",
									"                break;",
									"            case \"out\":",
									"                console.log(\"debug: \", list_expense_account)",
									"                account_debit = list_expense_account[getRandomInt(0,list_expense_account.length - 1)].account_id; // getRandomInt(0,list_expense_account.length - 1)",
									"                break;",
									"            case \"mix\":",
									"            default:",
									"                if(getRandomInt(0,1)){",
									"                    console.log(\"type in\");",
									"                    account_debit = list_income_account[getRandomInt(0,list_income_account.length - 1)].account_id; // getRandomInt(0,list_income_account.length - 1)",
									"                    txn_type = \"in\";",
									"                } else {",
									"                    console.log(\"type out\");",
									"                    console.log(\"debug: \", list_expense_account)",
									"                    account_debit = list_expense_account[getRandomInt(0,list_expense_account.length - 1)].account_id; // getRandomInt(0,list_expense_account.length - 1)",
									"                    txn_type = \"out\";",
									"                }",
									"        }",
									"        ",
									"        amount = getRandomInt(1,50)*100000;",
									"        if(configs.has_tax){",
									"            let tax_obj = pm.environment.get(\"C-tax_obj\");",
									"            tax_id = tax_obj.tax_id;",
									"            tax_amount = Math.round(amount*tax_obj.rate/100); // đây ko phải apply sai công thức, chổ này do FE tự tính và user có thể edit được",
									"        }",
									"        value_at = randDay.toISOString();",
									"        description = \"[API][\" + txn_type + \"] transaction \" + randomChars(6);",
									"        break;",
									"    default:",
									"        console.log(\"Missing flow\");",
									"        break;",
									"}",
									"",
									"let payload;",
									"if(configs.has_tax){",
									"    payload = {",
									"        \"account_id\":account_credit,",
									"        \"category_id\":account_debit,",
									"        \"contact_id\":pm.environment.get(\"C-contact_id\"),",
									"        \"amount\":amount,",
									"        \"tax_amount\":tax_amount,",
									"        \"tax_id\":tax_id,",
									"        \"branch_id\":pm.environment.get(\"C-branch_id\"),",
									"        \"business_id\":pm.environment.get(\"C-business_id\"),",
									"        \"txn_type\":txn_type,",
									"        \"description\":description,",
									"        \"value_at\":value_at",
									"    }",
									"} else {",
									"    payload = {",
									"        \"account_id\":account_credit,",
									"        \"category_id\":account_debit,",
									"        \"contact_id\":pm.environment.get(\"C-contact_id\"),",
									"        \"amount\":amount,",
									"        \"branch_id\":pm.environment.get(\"C-branch_id\"),",
									"        \"business_id\":pm.environment.get(\"C-business_id\"),",
									"        \"txn_type\":txn_type,",
									"        \"description\":description,",
									"        \"value_at\":value_at",
									"    }",
									"}",
									"",
									"console.log(\"payload: \",payload);",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));",
									"pm.environment.set(\"C-tnx_obj\",payload);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"let case_ = pm.environment.get(\"C-case_\");",
									"let configs = pm.environment.get(\"C-configs\");",
									"",
									"let jsData = pm.response.json();",
									"switch(case_){",
									"    case 1: case 2:",
									"        pm.test(\"Status code is 400\", function () {",
									"            pm.response.to.have.status(400);",
									"        });",
									"        pm.test(\"System code is 104000\", function () {",
									"            pm.expect(jsData.code).to.eql(104000);",
									"        });",
									"",
									"        console.log(\"debug: \", jsData);",
									"",
									"        // case_++;",
									"        case_ = 9;",
									"        pm.environment.set(\"C-case_\",case_);",
									"        postman.setNextRequest(\"create_transaction\"); // create_transaction",
									"        break;",
									"    case 3: case 4:",
									"        pm.test(\"Status code is 400\", function () {",
									"            pm.response.to.have.status(400);",
									"        });",
									"        pm.test(\"System code is 104000\", function () {",
									"            pm.expect(jsData.code).to.eql(104000);",
									"        });",
									"",
									"        console.log(\"debug: \", jsData);",
									"",
									"        case_++;",
									"        pm.environment.set(\"C-case_\",case_);",
									"        postman.setNextRequest(\"create_transaction\"); // create_transaction",
									"        break;",
									"    case 5: case 6:",
									"        pm.test(\"Status code is 400\", function () {",
									"            pm.response.to.have.status(400);",
									"        });",
									"        pm.test(\"System code is 104000\", function () {",
									"            pm.expect(jsData.code).to.eql(104000);",
									"        });",
									"",
									"        console.log(\"debug: \", jsData);",
									"",
									"        case_++;",
									"        pm.environment.set(\"C-case_\",case_);",
									"        postman.setNextRequest(\"create_transaction\"); // create_transaction",
									"        break;",
									"    case 7: case 8:",
									"        pm.test(\"Status code is 400\", function () {",
									"            pm.response.to.have.status(400);",
									"        });",
									"        pm.test(\"System code is 104000\", function () {",
									"            pm.expect(jsData.code).to.eql(104000);",
									"        });",
									"",
									"        console.log(\"debug: \", jsData);",
									"",
									"        case_++;",
									"        pm.environment.set(\"C-case_\",case_);",
									"        postman.setNextRequest(\"create_transaction\"); // create_transaction",
									"        break;",
									"    case 9:",
									"        // console.log(\"debug: \" + JSON.stringify(jsData));",
									"        // pm.test(\"Status code is 200\", function () {",
									"        //     pm.response.to.have.status(200);",
									"        // });",
									"        if(configs.credit_type == \"cash\" || configs.credit_type == \"mb\"){",
									"            pm.test(\"Status code is 200\", () => {",
									"                pm.expect(pm.response.code).to.be.oneOf([200,201]);",
									"            });",
									"            pm.test(\"System code is 102001\", function () {",
									"                pm.expect(jsData.code).to.eql(102001);",
									"            });",
									"",
									"            pm.environment.unset(\"C-case_\");",
									"            console.log(\"debug: \", jsData);",
									"            let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"",
									"            // update tnx_id for tnx_obj",
									"            try {",
									"                tnx_obj.tnx_id = jsData.data.id;",
									"            } catch {",
									"                console.log(\"Can't get tnx_id\");",
									"            }",
									"",
									"            pm.test(\"amount of tnx correctly! \" + tnx_obj.amount, function () {",
									"                pm.expect(tnx_obj.amount == jsData.data.amount).to.be.true;",
									"            });",
									"",
									"            pm.test(\"txn_type of tnx correctly! \" + tnx_obj.txn_type, function () {",
									"                pm.expect(tnx_obj.txn_type == jsData.data.txn_type).to.be.true;",
									"            });",
									"",
									"            pm.test(\"description of tnx correctly! \" + tnx_obj.description, function () {",
									"                pm.expect(tnx_obj.description == jsData.data.description).to.be.true;",
									"            });",
									"",
									"            pm.test(\"value_at of tnx correctly! \" + tnx_obj.value_at.substring(0,19), function () {",
									"                console.log(\"act: \" + jsData.data.value_at.substring(0,19));",
									"                pm.expect(tnx_obj.value_at.substring(0,19)).to.eql(jsData.data.value_at.substring(0,19));",
									"            });",
									"",
									"            testcase++;",
									"            pm.environment.set(\"C-testcase\",testcase);",
									"            pm.environment.set(\"C-tnx_obj\",tnx_obj);",
									"            postman.setNextRequest(\"get_list_transaction\"); // get_list_transaction",
									"        } else {",
									"            pm.test(\"Status code is 400\", () => {",
									"                pm.expect(pm.response.code).to.be.oneOf([400]);",
									"            });",
									"",
									"            console.log(\"------ End Testsuite 45 ------\");",
									"            postman.setNextRequest(null);",
									"        }",
									"        break;",
									"    default:",
									"        console.log(\"missing flow, end test\");",
									"        postman.setNextRequest(null);",
									"        break;",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-ledger/api/v1/transaction/create",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-ledger",
								"api",
								"v1",
								"transaction",
								"create"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.request.headers.add({",
							" key: \"authorization\",",
							" value: \"Bearer \" + pm.environment.get(\"C-userToken\")",
							"});",
							"",
							"pm.request.headers.add({",
							" key: \"Content-Type\",",
							" value: \"application/json\"",
							"});"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "posting",
			"item": [
				{
					"name": "get_list_posting",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let page = pm.environment.get(\"C-page\");",
									"",
									"if(!page){",
									"    page = 1;",
									"    pm.environment.set(\"C-page\",page);",
									"",
									"    let page_size = 20;",
									"    pm.environment.set(\"C-page_size\",page_size);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"/**",
									" * object_type: transaction, invoice",
									" * object_id => id respective with object_type (tnx_id, invoice_id)",
									" * object_id_ref => use for invoice with product/item (product_id, item_id)",
									" * is_credit",
									" * created_at",
									" * value_at",
									" */",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = JSON.parse(responseBody);",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let total_pages = 1;",
									"    let total_records = 0;",
									"    try {",
									"        total_pages = jsData.meta.total_pages;",
									"        total_records = jsData.meta.total_rows;",
									"    } catch {",
									"        console.log(\"currently, this branch with null data\");",
									"    }",
									"    let page = pm.environment.get(\"C-page\");",
									"",
									"    let list_posting, old_list_posting;",
									"    switch(testcase){",
									"        case 2:",
									"            list_posting = pm.environment.get(\"C-list_posting\");",
									"            if(!list_posting){",
									"                list_posting = [];",
									"            }",
									"            break;",
									"        case 4:",
									"            old_list_posting = pm.environment.get(\"C-old_list_posting\");",
									"            if(!old_list_posting){",
									"                old_list_posting = pm.environment.get(\"C-list_posting\");",
									"                pm.environment.unset(\"C-list_posting\");",
									"                pm.environment.set(\"C-old_list_posting\",old_list_posting);",
									"            }",
									"",
									"            list_posting = pm.environment.get(\"C-list_posting\");",
									"            if(!list_posting){",
									"                list_posting = [];",
									"            }",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow\");",
									"            break;",
									"    }",
									"",
									"    for(let item in jsData.data){",
									"        list_posting[list_posting.length] = {",
									"            \"posting_id\":jsData.data[item].id,",
									"            \"account_id\":jsData.data[item].account_id,",
									"            \"amount\":jsData.data[item].amount,",
									"            \"branch_id\":jsData.data[item].branch_id,",
									"            \"created_at\":jsData.data[item].created_at,",
									"            \"currency\":jsData.data[item].currency,",
									"            \"deleted_at\":jsData.data[item].deleted_at,",
									"            \"is_credit\":jsData.data[item].is_credit,",
									"            \"is_final_status\":jsData.data[item].is_final_status,",
									"            \"object_id_ref\":jsData.data[item].object_id_ref,",
									"            \"object_id\":jsData.data[item].object_id,",
									"            \"object_type\":jsData.data[item].object_type,",
									"            // \"value_at\":jsData.data[item].value_at,",
									"            \"short_desc\":jsData.data[item].short_desc",
									"        }",
									"    }",
									"    pm.environment.set(\"C-list_posting\",list_posting);",
									"",
									"    let configs = pm.environment.get(\"C-configs\");",
									"    // console.log(\"debug configs:\", configs);",
									"    if(page >= total_pages || page >= configs.limit_page){",
									"        // must clear page & page_size",
									"        pm.environment.unset(\"C-page\");",
									"        pm.environment.unset(\"C-page_size\");",
									"",
									"        switch(testcase){",
									"            case 2:",
									"                pm.test(\"Got all posting! \" + total_records, function () {",
									"                    pm.expect(total_records > 0).to.be.true;",
									"                });",
									"                pm.environment.set(\"C-total_records\",total_records);",
									"",
									"                postman.setNextRequest(\"get_report_income_expense\"); // get_report_income_expense",
									"                break;",
									"            case 4:",
									"                // xử lý cho expected list",
									"                let configs = pm.environment.get(\"C-configs\");",
									"                let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"                let list_expected_posting = [];",
									"                let tax_obj = pm.environment.get(\"C-tax_obj\");",
									"",
									"                if(tnx_obj.txn_type == \"out\"){",
									"                    // account",
									"                    list_expected_posting[0] = {",
									"                        \"account_id\":tnx_obj.account_id,",
									"                        \"object_type\":\"transaction\",",
									"                        \"object_id\":tnx_obj.tnx_id,",
									"                        \"amount\":tnx_obj.amount,",
									"                        \"is_credit\":true,",
									"                        \"type\":\"account\"",
									"                    }",
									"                    if(configs.has_tax){",
									"                        // category",
									"                        list_expected_posting[1] = {",
									"                            \"account_id\":tnx_obj.category_id,",
									"                            \"object_type\":\"transaction\",",
									"                            \"object_id\":tnx_obj.tnx_id,",
									"                            \"amount\":tnx_obj.amount - tnx_obj.tax_amount,",
									"                            \"is_credit\":false,",
									"                            \"type\":\"category\"",
									"                        }",
									"",
									"                        // tax",
									"                        list_expected_posting[2] = {",
									"                            \"account_id\":tax_obj.account_id,",
									"                            \"object_type\":\"tax\",",
									"                            \"object_id\":tnx_obj.tnx_id,",
									"                            \"amount\":tnx_obj.tax_amount,",
									"                            \"is_credit\":false,",
									"                            \"type\":\"tax\"",
									"                        }",
									"                    } else {",
									"                        // category",
									"                        list_expected_posting[1] = {",
									"                            \"account_id\":tnx_obj.category_id,",
									"                            \"object_type\":\"transaction\",",
									"                            \"object_id\":tnx_obj.tnx_id,",
									"                            \"amount\":tnx_obj.amount,",
									"                            \"is_credit\":false,",
									"                            \"type\":\"category\"",
									"                        }",
									"                    }",
									"                } else {",
									"                    // account",
									"                    list_expected_posting[0] = {",
									"                        \"account_id\":tnx_obj.account_id,",
									"                        \"object_type\":\"transaction\",",
									"                        \"object_id\":tnx_obj.tnx_id,",
									"                        \"amount\":tnx_obj.amount,",
									"                        \"is_credit\":false,",
									"                        \"type\":\"account\"",
									"                    }",
									"                    if(configs.has_tax){",
									"                        // category",
									"                        list_expected_posting[1] = {",
									"                            \"account_id\":tnx_obj.category_id,",
									"                            \"object_type\":\"transaction\",",
									"                            \"object_id\":tnx_obj.tnx_id,",
									"                            \"amount\":tnx_obj.amount - tnx_obj.tax_amount,",
									"                            \"is_credit\":true,",
									"                            \"type\":\"category\"",
									"                        }",
									"                        // tax",
									"                        list_expected_posting[2] = {",
									"                            \"account_id\":tax_obj.account_id,",
									"                            \"object_type\":\"tax\",",
									"                            \"object_id\":tnx_obj.tnx_id,",
									"                            \"amount\":tnx_obj.tax_amount,",
									"                            \"is_credit\":true,",
									"                            \"type\":\"tax\"",
									"                        }",
									"                    } else {",
									"                        // category",
									"                        list_expected_posting[1] = {",
									"                            \"account_id\":tnx_obj.category_id,",
									"                            \"object_type\":\"transaction\",",
									"                            \"object_id\":tnx_obj.tnx_id,",
									"                            \"amount\":tnx_obj.amount,",
									"                            \"is_credit\":true,",
									"                            \"type\":\"category\"",
									"                        }",
									"                    }",
									"                }",
									"                console.log(\"list_expected_posting: \", list_expected_posting);",
									"",
									"                // xử lý cho actual list",
									"                let list_act_posting = [];",
									"                for(let i in list_posting){",
									"                    if(list_posting[i].object_type == \"transaction\" && list_posting[i].object_id == tnx_obj.tnx_id){",
									"                        list_act_posting[list_act_posting.length] = {",
									"                            \"account_id\":list_posting[i].account_id,",
									"                            \"object_type\":\"transaction\",",
									"                            \"object_id\":list_posting[i].object_id,",
									"                            \"amount\":list_posting[i].amount,",
									"                            \"is_credit\":list_posting[i].is_credit",
									"                        }",
									"                    }",
									"                }",
									"                console.log(\"list_act_posting: \", list_act_posting);",
									"                ",
									"                let old_total_records = pm.environment.get(\"C-total_records\");",
									"                pm.test(\"Have \" + list_expected_posting.length + \" new records\", function () {",
									"                    pm.expect(total_records == old_total_records + list_expected_posting.length).to.be.true;",
									"                });",
									"",
									"                let count = 0;",
									"                for(let i in list_expected_posting){",
									"                    for(let j in list_act_posting){",
									"                        if(list_expected_posting[i].account_id == list_act_posting[j].account_id){",
									"                            count++;",
									"                            if(list_expected_posting[i].type == \"account\"){",
									"                                console.log(\"Found payment account\");",
									"",
									"                                pm.test(\"is_credit correctly\", function () {",
									"                                    pm.expect(list_expected_posting[i].is_credit == list_act_posting[j].is_credit).to.be.true;",
									"                                });",
									"",
									"                                pm.test(\"amount correctly\", function () {",
									"                                    pm.expect(list_expected_posting[i].amount == list_act_posting[j].amount).to.be.true;",
									"                                });",
									"                            } else if(list_expected_posting[i].type == \"category\"){",
									"                                console.log(\"Found category account\");",
									"",
									"                                pm.test(\"is_credit correctly\", function () {",
									"                                    pm.expect(list_expected_posting[i].is_credit == list_act_posting[j].is_credit).to.be.true;",
									"                                });",
									"",
									"                                pm.test(\"amount correctly\", function () {",
									"                                    pm.expect(list_expected_posting[i].amount == list_act_posting[j].amount).to.be.true;",
									"                                });",
									"                            } else {",
									"                                console.log(\"Found tax account\");",
									"",
									"                                pm.test(\"is_credit correctly\", function () {",
									"                                    pm.expect(list_expected_posting[i].is_credit == list_act_posting[j].is_credit).to.be.true;",
									"                                });",
									"",
									"                                pm.test(\"amount correctly\", function () {",
									"                                    pm.expect(list_expected_posting[i].amount == list_act_posting[j].amount).to.be.true;",
									"                                });",
									"                            }",
									"                            break;",
									"                        }",
									"                    }",
									"                }",
									"",
									"                pm.test(\"Found all posting \" + list_expected_posting.length, function () {",
									"                    pm.expect(count == list_expected_posting.length).to.be.true;",
									"                });",
									"",
									"                postman.setNextRequest(\"get_report_income_expense\"); // get_report_income_expense",
									"                break;",
									"            default:",
									"                console.log(\"Missing flow, end test\");",
									"                postman.setNextRequest(null);",
									"                break;",
									"        }",
									"    } else {",
									"        page++;",
									"        pm.environment.set(\"C-page\",page);",
									"",
									"        console.log(\"view next page (\" + page + \") to get more posting\");",
									"        postman.setNextRequest(\"get_list_posting\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get list posting, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-ledger/api/v1/posting/get-list?page={{C-page}}&page_size={{C-page_size}}&search=&sort=",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-ledger",
								"api",
								"v1",
								"posting",
								"get-list"
							],
							"query": [
								{
									"key": "page",
									"value": "{{C-page}}"
								},
								{
									"key": "page_size",
									"value": "{{C-page_size}}"
								},
								{
									"key": "search",
									"value": ""
								},
								{
									"key": "sort",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.request.headers.add({",
							" key: \"authorization\",",
							" value: \"Bearer \" + pm.environment.get(\"C-userToken\")",
							"});",
							"",
							"pm.request.headers.add({",
							" key: \"Content-Type\",",
							" value: \"application/json\"",
							"});"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "home-report",
			"item": [
				{
					"name": "get_report_income_expense",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"// lấy full tháng hiện tại",
									"let today = new Date();",
									"let start_current_month = new Date(today.getFullYear(), today.getMonth(), 1);",
									"let end_current_month = new Date(today.getFullYear(), today.getMonth() + 1, 1);",
									"",
									"// lấy full tháng trước",
									"let start_last_month = new Date(today.getFullYear(), today.getMonth() - 1, 1);",
									"let end_last_month = new Date(today.getFullYear(), today.getMonth(), 1);",
									"",
									"// lấy full ngày hiện tại",
									"// let firstDay = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0 ,0, 0);",
									"// let lastDay = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 23, 59 ,59, 0);",
									"",
									"// lấy n ngày đến hiện tại",
									"// let firstDayTimestamp = Math.floor(firstDay.getTime()/1000) - 2*24*60*60;",
									"// let start_day_ago = new Date(firstDayTimestamp*1000);",
									"",
									"let current_period_start = start_current_month.toISOString();",
									"let current_period_end = end_current_month.toISOString();",
									"let previous_period_start = start_last_month.toISOString();",
									"let previous_period_end = end_last_month.toISOString();",
									"",
									"/**",
									"/**",
									" * \"report_type\": sum,income,expense",
									" * Note: report_type = sum => hiện tại bị null dates_data => ko có type này",
									" * - C1: call từng loại income, expense dể lấy dates_data",
									" * - C2: wait fixing from dev",
									" * => tạm thời xử lý case sum, 2 case còn lại sẽ handle sau",
									" */",
									"",
									"let report_type;",
									"let configs = pm.environment.get(\"C-configs\");",
									"let full_check = pm.environment.get(\"C-full_check\");",
									"if(!full_check){",
									"    full_check = 1;",
									"    pm.environment.set(\"C-full_check\",full_check);",
									"    report_type = \"income\";",
									"} else {",
									"    report_type = \"expense\";",
									"}",
									"console.log(\"full_check: \" + full_check);",
									"",
									"let payload = {",
									"    // \"branch_id\": pm.environment.get(\"C-branch_id\"),",
									"    \"business_id\": parseInt(pm.environment.get(\"C-business_id\")),",
									"    \"report_type\": report_type,",
									"    \"period\": configs.period",
									"    // \"current_period_start\": current_period_start,",
									"    // \"current_period_end\": current_period_end",
									"}",
									"",
									"console.log(\"payload: \",payload);",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));",
									"",
									"pm.environment.set(\"C-current_period_start\",current_period_start);",
									"pm.environment.set(\"C-current_period_end\",current_period_end);",
									"pm.environment.set(\"C-previous_period_start\",previous_period_start);",
									"pm.environment.set(\"C-previous_period_end\",previous_period_end);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ============================= sort by key",
									"function sortByKey(array, key, type) {",
									"    if(type == \"asc\"){",
									"        return array.sort(function(a, b) {",
									"            var x = a[key]; var y = b[key];",
									"            return ((x > y) ? -1 : ((x < y) ? 1 : 0));",
									"        });",
									"    } else {",
									"        return array.sort(function(a, b) {",
									"            var x = a[key]; var y = b[key];",
									"            return ((x < y) ? -1 : ((x > y) ? 1 : 0));",
									"        });",
									"    }",
									"}",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let full_check = pm.environment.get(\"C-full_check\");",
									"    let report_income = null, report_expense = null;",
									"    try {",
									"        if(full_check == 1){",
									"            report_income = jsData.data;",
									"        } else {",
									"            report_expense = jsData.data;",
									"        }",
									"    } catch {",
									"        console.log(\"Can't get report cash_flow data\");",
									"    }",
									"",
									"    let list_debit_account = pm.environment.get(\"C-list_debit_account\");",
									"    let list_credit_account = pm.environment.get(\"C-list_credit_account\");",
									"    let list_income_account = pm.environment.get(\"C-list_income_account\");",
									"    let list_expense_account = pm.environment.get(\"C-list_expense_account\");",
									"    switch(testcase){",
									"        case 2:",
									"            // thay đổi lại list_income_account & list_expense_account, chỉ lấy những account nào có trong top 5 để check",
									"            if(full_check == 1){",
									"                pm.test(\"Got report_income\", function () {",
									"                    pm.expect(report_income != null).to.be.true;",
									"                });",
									"                pm.environment.set(\"C-report_income\",report_income);",
									"                // console.log(\"report_income: \" + JSON.stringify(report_income));",
									"                let new_list_income_account = [];",
									"                for(let i in report_income){",
									"                    for(let j in list_income_account){",
									"                        if(report_income[i].coa_id == list_income_account[j].account_id){",
									"                            new_list_income_account[new_list_income_account.length] = list_income_account[j];",
									"                            break;",
									"                        }",
									"                    }",
									"                }",
									"                if(new_list_income_account.length > 2){",
									"                    list_income_account = new_list_income_account;",
									"                    pm.environment.set(\"C-list_income_account\",list_income_account);",
									"                    console.log(\"list_income_account: \" + JSON.stringify(list_income_account));",
									"                }",
									"",
									"                full_check++;",
									"                pm.environment.set(\"C-full_check\",full_check);",
									"                postman.setNextRequest(\"get_report_income_expense\");",
									"            } else {",
									"                pm.test(\"Got report_expense\", function () {",
									"                    pm.expect(report_expense != null).to.be.true;",
									"                });",
									"                pm.environment.set(\"C-report_expense\",report_expense);",
									"                // console.log(\"report_expense: \" + JSON.stringify(report_expense));",
									"                // xử lý này để chỉ lấy top expense",
									"                let new_list_expense_account = [];",
									"                for(let i in report_expense){",
									"                    for(let j in list_expense_account){",
									"                        if(report_expense[i].coa_id == list_expense_account[j].account_id){",
									"                            new_list_expense_account[new_list_expense_account.length] = list_expense_account[j];",
									"                            break;",
									"                        }",
									"                    }",
									"                }",
									"                if(new_list_expense_account.length > 2){",
									"                    list_expense_account = new_list_expense_account;",
									"                    pm.environment.set(\"C-list_expense_account\",list_expense_account);",
									"                    console.log(\"list_expense_account: \" + JSON.stringify(list_expense_account));",
									"                }",
									"",
									"                pm.environment.unset(\"C-full_check\");",
									"                postman.setNextRequest(\"report_cash_flow_period\"); // report_cash_flow_period",
									"            }",
									"            break;",
									"        case 4:",
									"            let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"            let configs = pm.environment.get(\"C-configs\");",
									"            for(let i in list_credit_account){",
									"                if(list_credit_account[i].account_id == tnx_obj.account_id){",
									"                    console.log(\"Tnx được thực hiện ở tài khoản: \" + list_credit_account[i].account_name);",
									"                    tnx_obj.account_name = list_credit_account[i].account_name;",
									"                    break;",
									"                }",
									"            }",
									"            // console.log(\"list_debit_account:\",list_debit_account);",
									"            for(let i in list_debit_account){",
									"                if(list_debit_account[i].account_id == tnx_obj.category_id){",
									"                    console.log(\"Tnx được thực hiện ở phân loại: \" + list_debit_account[i].account_name);",
									"                    tnx_obj.category_name = list_debit_account[i].account_name;",
									"                    tnx_obj.coa_type = list_debit_account[i].coa_type;",
									"                    break;",
									"                }",
									"            }",
									"            pm.environment.set(\"C-tnx_obj\",tnx_obj);",
									"            console.log(\"tnx_obj after update: \", tnx_obj);",
									"",
									"            let old_report_expense, old_report_income;",
									"            let hasAccountInOldDB = false, hasAccoountInNewDB = false;",
									"            let old_amount, new_amount;",
									"",
									"            let change_amount;",
									"            if(configs.has_tax){",
									"                change_amount = tnx_obj.amount - tnx_obj.tax_amount;",
									"            } else {",
									"                change_amount = tnx_obj.amount;",
									"            }",
									"            ",
									"            if(full_check == 1){",
									"                old_report_income = pm.environment.get(\"C-report_income\");",
									"                for(let i in old_report_income){",
									"                    if(old_report_income[i].coa_name == tnx_obj.category_name){",
									"                        hasAccountInOldDB = true;",
									"                        old_amount = old_report_income[i].total_amount;",
									"                        break;",
									"                    }",
									"                }",
									"",
									"                for(let i in report_income){",
									"                    if(report_income[i].coa_name == tnx_obj.category_name){",
									"                        hasAccoountInNewDB = true;",
									"                        new_amount = report_income[i].total_amount;",
									"                        break;",
									"                    }",
									"                }",
									"",
									"                if(tnx_obj.coa_type == \"income\"){",
									"                    console.log(\"Tnx thực hiện với coa_type là income, tăng income tương ứng trong tk\");",
									"",
									"                    // check db_data",
									"                    if(hasAccountInOldDB){",
									"                        pm.test(\"inscrease account \" + tnx_obj.category_name + \" with amount \" + change_amount, function () {",
									"                            console.log(\"old: \" + old_amount);",
									"                            console.log(\"new: \" + new_amount);",
									"                            pm.expect(new_amount == old_amount + change_amount).to.be.true;",
									"                        });",
									"                    } else {",
									"                        pm.test(\"had new record of account \" + tnx_obj.category_name + \" with amount \" + change_amount, function () {",
									"                            pm.expect(hasAccoountInNewDB && new_amount == change_amount).to.be.true;",
									"                        });",
									"                    }",
									"                } else {",
									"                    console.log(\"Tnx thực hiện với coa_type khác income, nothing happen with report cash-flow\");",
									"",
									"                    pm.test(\"Nothing happen!!!\", function () {",
									"                        pm.expect(JSON.stringify(report_income) == JSON.stringify(old_report_income)).to.be.true;",
									"                    });",
									"                }",
									"",
									"                full_check++;",
									"                pm.environment.set(\"C-full_check\",full_check);",
									"                postman.setNextRequest(\"get_report_income_expense\");",
									"            } else {",
									"                old_report_expense = pm.environment.get(\"C-report_expense\");",
									"                for(let i in old_report_expense){",
									"                    if(old_report_expense[i].coa_name == tnx_obj.category_name){",
									"                        hasAccountInOldDB = true;",
									"                        old_amount = old_report_expense[i].total_amount;",
									"                        break;",
									"                    }",
									"                }",
									"",
									"                for(let i in report_expense){",
									"                    if(report_expense[i].coa_id == tnx_obj.category_id){",
									"                        hasAccoountInNewDB = true;",
									"                        new_amount = report_expense[i].total_amount;",
									"                        break;",
									"                    }",
									"                }",
									"",
									"                if(tnx_obj.coa_type == \"expense\"){",
									"                    console.log(\"Tnx thực hiện với coa_type là expense, giảm expense tương ứng trong tk\");",
									"",
									"                    // check db_data",
									"                    if(hasAccountInOldDB){",
									"                        pm.test(\"increase account \" + tnx_obj.category_name + \" with amount \" + change_amount, function () {",
									"                            console.log(\"old: \" + old_amount);",
									"                            console.log(\"new: \" + new_amount);",
									"                            pm.expect(new_amount == old_amount + change_amount).to.be.true;",
									"                        });",
									"                    } else {",
									"                        pm.test(\"had new record of account \" + tnx_obj.category_name + \" with amount \" + change_amount, function () {",
									"                            pm.expect(hasAccoountInNewDB && new_amount == change_amount).to.be.true;",
									"                        });",
									"                    }",
									"                } else {",
									"                    console.log(\"Tnx thực hiện với coa_type khác expense, nothing happen with report cash-flow\");",
									"",
									"                    pm.test(\"Nothing happen!!!\", function () {",
									"                        pm.expect(JSON.stringify(report_expense) == JSON.stringify(old_report_expense)).to.be.true;",
									"                    });",
									"                }",
									"",
									"                pm.environment.unset(\"C-full_check\");",
									"                postman.setNextRequest(\"report_cash_flow_period\"); // report_cash_flow_period",
									"            }",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get report cash_flow, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-ledger/api/v1/report/summary-by-category",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-ledger",
								"api",
								"v1",
								"report",
								"summary-by-category"
							]
						}
					},
					"response": []
				},
				{
					"name": "report_cash_flow_period",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/**",
									" * period: year, month, week",
									" */",
									"let configs = pm.environment.get(\"C-configs\");",
									"",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let payload = {",
									"    // \"branch_id\": pm.environment.get(\"C-branch_id\"),",
									"    \"business_id\": parseInt(pm.environment.get(\"C-business_id\")),",
									"    \"period\": configs.period",
									"}",
									"",
									"console.log(\"payload: \",payload);",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let cash_flow_period = null;",
									"    try {",
									"        cash_flow_period = jsData.data;",
									"        /**",
									"         * period: week, month, year",
									"         * sum_card_data",
									"         * dates_data",
									"         */",
									"    } catch {",
									"        console.log(\"Can't get report cash_flow data\");",
									"    }",
									"",
									"    switch(testcase){",
									"        case 2:",
									"            pm.test(\"Got cash_flow_period \", function () {",
									"                pm.environment.set(\"C-cash_flow_period\",cash_flow_period);",
									"                pm.expect(cash_flow_period != null).to.be.true;",
									"            });",
									"",
									"            console.log(\"cash_flow_period: \", cash_flow_period);",
									"",
									"            // ================================================ bonus check current data",
									"            // waiting logic updated at phase 2",
									"            // ================================================ ",
									"",
									"            postman.setNextRequest(\"report_profit_loss_period\"); // report_profit_loss_period",
									"            break;",
									"        case 4:",
									"            let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"            // let list_income_account = pm.environment.get(\"C-list_income_account\");",
									"            // let list_expense_account = pm.environment.get(\"C-list_expense_account\");",
									"            let old_cash_flow_period = pm.environment.get(\"C-cash_flow_period\");",
									"",
									"            let configs = pm.environment.get(\"C-configs\");",
									"            let change_amount;",
									"            if(configs.has_tax){",
									"                change_amount = tnx_obj.amount - tnx_obj.tax_amount;",
									"            } else {",
									"                change_amount = tnx_obj.amount;",
									"            }",
									"",
									"            // hiện tại chưa chốt login nên tạm thời check phần sum_card_data",
									"            if(tnx_obj.txn_type == \"in\"){",
									"                // tăng income",
									"                pm.test(\"total_income increase \" + change_amount, function () {",
									"                    pm.expect(cash_flow_period.sum_card_data.total_income == old_cash_flow_period.sum_card_data.total_income + change_amount).to.be.true;",
									"                });",
									"",
									"                pm.test(\"nothing happen with total_expense\", function () {",
									"                    pm.expect(cash_flow_period.sum_card_data.total_expense == old_cash_flow_period.sum_card_data.total_expense).to.be.true;",
									"                });",
									"",
									"                pm.test(\"total_gap increase \" + change_amount, function () {",
									"                    pm.expect(cash_flow_period.sum_card_data.total_gap == old_cash_flow_period.sum_card_data.total_gap + change_amount).to.be.true;",
									"                });",
									"            } else {",
									"                // tăng expense",
									"                pm.test(\"nothing happen with total_income\", function () {",
									"                    pm.expect(cash_flow_period.sum_card_data.total_income == old_cash_flow_period.sum_card_data.total_income).to.be.true;",
									"                });",
									"",
									"                pm.test(\"total_expense increase \"  + change_amount, function () {",
									"                    pm.expect(cash_flow_period.sum_card_data.total_expense == old_cash_flow_period.sum_card_data.total_expense + change_amount).to.be.true;",
									"                });",
									"",
									"                pm.test(\"total_gap decrease \" + change_amount, function () {",
									"                    pm.expect(cash_flow_period.sum_card_data.total_gap == old_cash_flow_period.sum_card_data.total_gap - change_amount).to.be.true;",
									"                });",
									"            }",
									"",
									"            postman.setNextRequest(\"report_profit_loss_period\"); // report_profit_loss_period",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get report cash_flow, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-location-timezone",
								"value": "UTC+07:00"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-ledger/api/v1/report/cash-flow-period",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-ledger",
								"api",
								"v1",
								"report",
								"cash-flow-period"
							]
						}
					},
					"response": []
				},
				{
					"name": "report_profit_loss_period",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/**",
									" * \"report_type\": sum,income,expense",
									" * Note: report_type = sum => hiện tại bị null dates_data",
									" * - C1: call từng loại income, expense dể lấy dates_data",
									" * - C2: wait fixing from dev",
									" * => tạm thời xử lý case sum, 2 case còn lại sẽ handle sau",
									" */",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let configs = pm.environment.get(\"C-configs\");",
									"",
									"let full_check = pm.environment.get(\"C-full_check\");",
									"if(!full_check){",
									"    full_check = 1;",
									"    pm.environment.set(\"C-full_check\",full_check);",
									"    report_type = \"income\";",
									"} else {",
									"    report_type = \"expense\";",
									"}",
									"pm.environment.set(\"C-report_type\",report_type);",
									"console.log(\"full_check: \" + full_check);",
									"",
									"let payload = {",
									"    // \"branch_id\": pm.environment.get(\"C-branch_id\"),",
									"    \"business_id\": parseInt(pm.environment.get(\"C-business_id\")),",
									"    \"period\": configs.period,",
									"    \"report_type\": report_type",
									"}",
									"",
									"console.log(\"payload: \",payload);",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let full_check = pm.environment.get(\"C-full_check\");",
									"    let profit_period = null, loss_period = null;",
									"    try {",
									"        if(full_check == 1){",
									"            profit_period = jsData.data;",
									"        } else {",
									"            loss_period = jsData.data;",
									"        }",
									"        /**",
									"         * period: week, month, year",
									"         * sum_card_data",
									"         * dates_data",
									"         */",
									"    } catch {",
									"        console.log(\"Can't get report cash_flow data\");",
									"    }",
									"",
									"    switch(testcase){",
									"        case 2:",
									"            if(full_check == 1){",
									"                pm.test(\"Got profit_period \", function () {",
									"                    pm.environment.set(\"C-profit_period\",profit_period);",
									"                    pm.expect(profit_period != null).to.be.true;",
									"                });",
									"                pm.environment.set(\"C-profit_period\",profit_period);",
									"                // console.log(\"profit_period: \", profit_period);",
									"",
									"                full_check++;",
									"                pm.environment.set(\"C-full_check\",full_check);",
									"                postman.setNextRequest(\"report_profit_loss_period\");",
									"            } else {",
									"                pm.test(\"Got loss_period \", function () {",
									"                    pm.environment.set(\"C-loss_period\",loss_period);",
									"                    pm.expect(loss_period != null).to.be.true;",
									"                });",
									"                pm.environment.set(\"C-loss_period\",loss_period);",
									"                // console.log(\"loss_period: \", loss_period);",
									"",
									"                pm.environment.unset(\"C-full_check\");",
									"                postman.setNextRequest(\"report_chart_balance_change\"); // report_chart_balance_change",
									"            }",
									"            break;",
									"        case 4:",
									"            let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"            let tnx_date = tnx_obj.value_at.substring(0,10);",
									"",
									"            let configs = pm.environment.get(\"C-configs\");",
									"            let change_amount;",
									"            if(configs.has_tax){",
									"                change_amount = tnx_obj.amount - tnx_obj.tax_amount;",
									"            } else {",
									"                change_amount = tnx_obj.amount;",
									"            }",
									"            ",
									"            if(full_check == 1){",
									"                let old_profit_period = pm.environment.get(\"C-profit_period\");",
									"                // console.log(\"debug old_profit_period: \", old_profit_period);",
									"                // console.log(\"debug profit_period: \", profit_period);",
									"                if(tnx_obj.txn_type == \"in\"){",
									"                    // có thay đổi => total_income increase",
									"                    pm.test(\"total_income increase \" + change_amount, function () {",
									"                        pm.expect(profit_period.sum_card_data.total_income == old_profit_period.sum_card_data.total_income + change_amount).to.be.true;",
									"                    });",
									"                    // thay đổi ngày tương ứng",
									"                    let old_date = null, act_date = null;",
									"                    for(let i in profit_period.dates_data){",
									"                        let day_i = profit_period.dates_data[i].date.substring(0,10);",
									"                        if(day_i == tnx_date){",
									"                            act_date = profit_period.dates_data[i];",
									"                            break;",
									"                        }",
									"                    }",
									"",
									"                    for(let i in old_profit_period.dates_data){",
									"                        let day_i = old_profit_period.dates_data[i].date.substring(0,10);",
									"                        if(day_i == tnx_date){",
									"                            old_date = old_profit_period.dates_data[i];",
									"                            break;",
									"                        }",
									"                    }",
									"",
									"                    if(old_date != null && act_date != null){",
									"                        console.log(\"act_date: \",act_date);",
									"                        console.log(\"old_date: \",old_date);",
									"                        pm.test(\"income at \" + tnx_date + \" increase \" + change_amount, function () {",
									"                            pm.expect(act_date.income == old_date.income + change_amount).to.be.true;",
									"                        });",
									"                    }",
									"                } else {",
									"                    // nothing happen",
									"                    pm.test(\"Nothing happen!!!\", function () {",
									"                        console.log(\"old: \", old_profit_period);",
									"                        console.log(\"new: \", profit_period);",
									"                        pm.expect(JSON.stringify(profit_period) == JSON.stringify(old_profit_period)).to.be.true;",
									"                    });",
									"                }",
									"",
									"                full_check++;",
									"                pm.environment.set(\"C-full_check\",full_check);",
									"                postman.setNextRequest(\"report_profit_loss_period\");",
									"            } else {",
									"                let old_loss_period = pm.environment.get(\"C-loss_period\");",
									"                // console.log(\"debug old_loss_period: \", old_loss_period);",
									"                // console.log(\"debug loss_period: \", loss_period);",
									"                if(tnx_obj.txn_type == \"out\"){",
									"                    // có thay đổi => total_expense increase",
									"                    pm.test(\"total_expense increase \" + change_amount, function () {",
									"                        pm.expect(loss_period.sum_card_data.total_expense == old_loss_period.sum_card_data.total_expense + change_amount).to.be.true;",
									"                    });",
									"                    // thay đổi ngày tương ứng",
									"                    let old_date = null, act_date = null;",
									"                    for(let i in loss_period.dates_data){",
									"                        let day_i = loss_period.dates_data[i].date.substring(0,10);",
									"                        if(day_i == tnx_date){",
									"                            act_date = loss_period.dates_data[i];",
									"                            break;",
									"                        }",
									"                    }",
									"",
									"                    for(let i in old_loss_period.dates_data){",
									"                        let day_i = old_loss_period.dates_data[i].date.substring(0,10);",
									"                        if(day_i == tnx_date){",
									"                            old_date = old_loss_period.dates_data[i];",
									"                            break;",
									"                        }",
									"                    }",
									"",
									"                    if(old_date != null && act_date != null){",
									"                        console.log(\"act_date: \",act_date);",
									"                        console.log(\"old_date: \",old_date);",
									"                        pm.test(\"expense at \" + tnx_date + \" increase \" + change_amount, function () {",
									"                            pm.expect(act_date.expense == old_date.expense + change_amount).to.be.true;",
									"                        });",
									"                    }",
									"                } else {",
									"                    // nothing happen",
									"                    pm.test(\"Nothing happen!!!\", function () {",
									"                        pm.expect(JSON.stringify(loss_period) == JSON.stringify(old_loss_period)).to.be.true;",
									"                    });",
									"                }",
									"",
									"                pm.environment.unset(\"C-full_check\");",
									"                postman.setNextRequest(\"report_chart_balance_change\"); // report_chart_balance_change",
									"            }",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get report cash_flow, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-location-timezone",
								"value": "Asia/Saigon",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-ledger/api/v1/report/profit-loss-period",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-ledger",
								"api",
								"v1",
								"report",
								"profit-loss-period"
							]
						}
					},
					"response": []
				},
				{
					"name": "report_chart_balance_change",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/**",
									" * \"report_type\": sum,income,expense",
									" * Note: report_type = sum => hiện tại bị null dates_data",
									" * - C1: call từng loại income, expense dể lấy dates_data",
									" * - C2: wait fixing from dev",
									" * => tạm thời xử lý case sum, 2 case còn lại sẽ handle sau",
									" * period thêm 1 số filter: quarter, l7d, l30d, l90d",
									" */",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let configs = pm.environment.get(\"C-configs\");",
									"",
									"let payload = {",
									"    // \"branch_id\": pm.environment.get(\"C-branch_id\"),",
									"    \"business_id\": parseInt(pm.environment.get(\"C-business_id\")),",
									"    \"period\": configs.period",
									"}",
									"",
									"console.log(\"payload: \",payload);",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let chart_balance_change = null;",
									"    try {",
									"        chart_balance_change = jsData.data;",
									"        /**",
									"         * period: week, month, year",
									"         * sum_card_data",
									"         * dates_data",
									"         */",
									"    } catch {",
									"        console.log(\"Can't get report cash_flow data\");",
									"    }",
									"",
									"    switch(testcase){",
									"        case 2:",
									"            pm.test(\"Got chart_balance_change \", function () {",
									"                pm.environment.set(\"C-chart_balance_change\",chart_balance_change);",
									"                pm.expect(chart_balance_change != null).to.be.true;",
									"            });",
									"            // console.log(\"chart_balance_change: \", chart_balance_change);",
									"",
									"            postman.setNextRequest(\"get_chart_balance_change\"); // get_chart_balance_change",
									"            break;",
									"        case 4:",
									"            let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"            let old_chart_balance_change = pm.environment.get(\"C-chart_balance_change\");",
									"            // console.log(\"debug old_chart_balance_change: \", old_chart_balance_change);",
									"            // console.log(\"debug chart_balance_change: \", chart_balance_change);",
									"",
									"            let configs = pm.environment.get(\"C-configs\");",
									"            let change_amount;",
									"            if(configs.has_tax){",
									"                change_amount = tnx_obj.amount - tnx_obj.tax_amount;",
									"            } else {",
									"                change_amount = tnx_obj.amount;",
									"            }",
									"",
									"            let tnx_date = tnx_obj.value_at.substring(0,10);",
									"",
									"            let old_date = null, act_date = null;",
									"            for(let i in chart_balance_change.dates_data){",
									"                let day_i = chart_balance_change.dates_data[i].date.substring(0,10);",
									"                if(day_i == tnx_date){",
									"                    act_date = chart_balance_change.dates_data[i];",
									"                    break;",
									"                }",
									"            }",
									"",
									"            for(let i in old_chart_balance_change.dates_data){",
									"                let day_i = old_chart_balance_change.dates_data[i].date.substring(0,10);",
									"                if(day_i == tnx_date){",
									"                    old_date = old_chart_balance_change.dates_data[i];",
									"                    break;",
									"                }",
									"            }",
									"            ",
									"            if(tnx_obj.txn_type == \"in\"){",
									"                // có thay đổi => total_debit increase",
									"                pm.test(\"total_debit increase \" + change_amount, function () {",
									"                    pm.expect(chart_balance_change.sum_card_data.total_debit == old_chart_balance_change.sum_card_data.total_debit + change_amount).to.be.true;",
									"                });",
									"                // thay đổi ngày tương ứng",
									"                if(old_date != null && act_date != null){",
									"                    console.log(\"act_date: \",act_date);",
									"                    console.log(\"old_date: \",old_date);",
									"                    pm.test(\"debit_amount at \" + tnx_date + \" increase \" + change_amount, function () {",
									"                        pm.expect(act_date.debit_amount == old_date.debit_amount + change_amount).to.be.true;",
									"                    });",
									"",
									"                    pm.test(\"end_amount at \" + tnx_date + \" increase \" + change_amount, function () {",
									"                        pm.expect(act_date.end_amount == old_date.end_amount + change_amount).to.be.true;",
									"                    });",
									"",
									"                    pm.test(\"gap at \" + tnx_date + \" increase \" + change_amount, function () {",
									"                        pm.expect(act_date.gap == old_date.gap + change_amount).to.be.true;",
									"                    });",
									"                }",
									"            } else {",
									"                // có thay đổi => total_credit increase",
									"                pm.test(\"total_credit increase \" + change_amount, function () {",
									"                    pm.expect(chart_balance_change.sum_card_data.total_credit == old_chart_balance_change.sum_card_data.total_credit + change_amount).to.be.true;",
									"                });",
									"",
									"                if(old_date != null && act_date != null){",
									"                    console.log(\"act_date: \",act_date);",
									"                    console.log(\"old_date: \",old_date);",
									"                    pm.test(\"credit_amount at \" + tnx_date + \" increase \" + change_amount, function () {",
									"                        pm.expect(act_date.credit_amount == old_date.credit_amount + change_amount).to.be.true;",
									"                    });",
									"",
									"                    pm.test(\"end_amount at \" + tnx_date + \" decrease \" + change_amount, function () {",
									"                        pm.expect(act_date.end_amount == old_date.end_amount - change_amount).to.be.true;",
									"                    });",
									"",
									"                    pm.test(\"gap at \" + tnx_date + \" decrease \" + change_amount, function () {",
									"                        pm.expect(act_date.gap == old_date.gap - change_amount).to.be.true;",
									"                    });",
									"                }",
									"            }",
									"",
									"            postman.setNextRequest(\"get_chart_balance_change\"); // get_chart_balance_change",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get report cash_flow, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-location-timezone",
								"value": "Asia/Saigon",
								"description": "UTC+07:00"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-ledger/api/v1/report/chart-balance-change",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-ledger",
								"api",
								"v1",
								"report",
								"chart-balance-change"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.request.headers.add({",
							" key: \"authorization\",",
							" value: \"Bearer \" + pm.environment.get(\"C-userToken\")",
							"});",
							"",
							"pm.request.headers.add({",
							" key: \"Content-Type\",",
							" value: \"application/json\"",
							"});"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "report-web",
			"item": []
		},
		{
			"name": "report-app",
			"item": [
				{
					"name": "balance_n_forecast_widget",
					"item": [
						{
							"name": "get_chart_balance_change",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let testcase = pm.environment.get(\"C-testcase\");",
											"console.log(\"Testcase: \" + testcase);",
											"",
											"// let configs = pm.environment.get(\"C-configs\");",
											"",
											"let payload;",
											"switch(testcase){",
											"    case 2:",
											"        let is_get_last = pm.environment.get(\"C-is_get_last\");",
											"        if(!is_get_last){",
											"            is_get_last = false;",
											"            pm.environment.set(\"C-is_get_last\",is_get_last);",
											"            ",
											"            payload = {",
											"                \"business_id\": parseInt(pm.environment.get(\"C-business_id\")),",
											"                \"period\": \"last_month\", // last_month, month",
											"                \"account_ids\": []",
											"            }",
											"        } else {",
											"            payload = {",
											"                \"business_id\": parseInt(pm.environment.get(\"C-business_id\")),",
											"                \"period\": \"month\", // last_month, month",
											"                \"account_ids\": []",
											"            }",
											"        }",
											"        break;",
											"    case 4:",
											"        payload = {",
											"            \"business_id\": parseInt(pm.environment.get(\"C-business_id\")),",
											"            \"period\": \"month\", // last_month, month",
											"            \"account_ids\": []",
											"        }",
											"        break;",
											"    default:",
											"        console.log(\"Missing flow\");",
											"}",
											"",
											"console.log(\"payload: \",payload);",
											"pm.environment.set(\"C-payload\",JSON.stringify(payload));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// ============================= getFirstDayOfMonth",
											"function getFirstDayOfMonth(date_timestamp){",
											"  let setDate = new Date(date_timestamp*1000);",
											"  let getDate = new Date(setDate.getFullYear(), setDate.getMonth(), 1);",
											"  return getDate.toISOString();",
											"}",
											"",
											"// ============================= getLastDayOfMonth",
											"function getLastDayOfMonth(date_timestamp){",
											"  let setDate = new Date(date_timestamp*1000);",
											"  let firstDayOfNextMonth = new Date(setDate.getFullYear(), setDate.getMonth() + 1, 1);",
											"  let lastDayOfMonth = new Date(firstDayOfNextMonth - 1);",
											"  return lastDayOfMonth.toISOString();",
											"}",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsData = pm.response.json();",
											"if(pm.response.code == 200){",
											"    let testcase = pm.environment.get(\"C-testcase\");",
											"",
											"    let chart_balance_change = null;",
											"    let chart_balance_change_last_month = pm.environment.get(\"C-chart_balance_change_last_month\");",
											"    let tnx_obj, tnx_date;",
											"    switch(testcase){",
											"        case 2:",
											"            let is_get_last = pm.environment.get(\"C-is_get_last\");",
											"",
											"            if(!is_get_last){",
											"                is_get_last = true;",
											"                pm.environment.set(\"C-is_get_last\",is_get_last);",
											"",
											"                chart_balance_change_last_month = jsData.data.sum_card_data;",
											"                pm.environment.set(\"C-chart_balance_change_last_month\",chart_balance_change_last_month);",
											"",
											"                postman.setNextRequest(\"get_chart_balance_change\");",
											"            } else {",
											"                pm.environment.unset(\"C-is_get_last\");",
											"                ",
											"                chart_balance_change = jsData.data;",
											"                pm.test(\"Got chart_balance_change \", function () {",
											"                    // sum_card_data.total_balance_amount",
											"                    // dates_data",
											"                    pm.environment.set(\"C-chart_balance_change\",chart_balance_change);",
											"                    pm.expect(chart_balance_change != null).to.be.true;",
											"                });",
											"",
											"                // check data chart & table",
											"                let sum_table = {",
											"                    \"total_debit\":0,",
											"                    \"total_credit\":0,",
											"                    \"current_total_debit\":0,",
											"                    \"current_total_credit\":0,",
											"                    \"total_balance_amount\":0,",
											"                }",
											"                let month_obj = {",
											"                    \"start_amount\":0,",
											"                    \"end_amount\":0",
											"                }",
											"                for(let i in jsData.data.dates_data){",
											"                    sum_table.current_total_debit += jsData.data.dates_data[i].debit_amount;",
											"                    sum_table.current_total_credit += jsData.data.dates_data[i].credit_amount;",
											"",
											"                    console.log(\"Date: \" + jsData.data.dates_data[i].date);",
											"                    if(i != 0){",
											"                        // start của ngày hôm nay lả end của ngày hôm trước",
											"                        pm.test(\"--- start_amount must be \" + jsData.data.dates_data[i-1].end_amount, function () {",
											"                            pm.expect(jsData.data.dates_data[i-1].end_amount).to.eql(jsData.data.dates_data[i].start_amount);",
											"                        });",
											"",
											"                        if(i == jsData.data.dates_data.length - 1){",
											"                            month_obj.end_amount = jsData.data.dates_data[i].end_amount;",
											"                        }",
											"                    } else {",
											"                        // start của ngày đầu tháng là total_balance_amount của tháng trước",
											"                        pm.test(\"--- start_amount must be \" + chart_balance_change_last_month.total_balance_amount, function () {",
											"                            pm.expect(chart_balance_change_last_month.total_balance_amount).to.eql(jsData.data.dates_data[i].start_amount);",
											"                        });",
											"                        month_obj.start_amount = chart_balance_change_last_month.total_balance_amount;",
											"                    } ",
											"",
											"                    // gap =  debit_amount - credit_amount",
											"                    pm.test(\"--- gap must be \" + (jsData.data.dates_data[i].debit_amount - jsData.data.dates_data[i].credit_amount), function () {",
											"                        // console.log(\"act gap: \" + jsData.data.dates_data[i].gap);",
											"                        pm.expect(jsData.data.dates_data[i].gap).to.eql(jsData.data.dates_data[i].debit_amount - jsData.data.dates_data[i].credit_amount);",
											"                    });",
											"",
											"                    // end_amount = start_amount + gap",
											"                    pm.test(\"--- end_amount must be \" + (jsData.data.dates_data[i].start_amount + jsData.data.dates_data[i].gap), function () {",
											"                        pm.expect(jsData.data.dates_data[i].end_amount).to.eql(jsData.data.dates_data[i].start_amount + jsData.data.dates_data[i].gap);",
											"                    });",
											"                }",
											"",
											"                // current_total_debit",
											"                pm.test(\"current_total_debit must be \" + sum_table.current_total_debit, function () {",
											"                    pm.expect(jsData.data.sum_card_data.current_total_debit).to.eql(sum_table.current_total_debit);",
											"                });",
											"",
											"                // current_total_credit",
											"                pm.test(\"current_total_credit must be \" + sum_table.current_total_credit, function () {",
											"                    pm.expect(jsData.data.sum_card_data.current_total_credit).to.eql(sum_table.current_total_credit);",
											"                });",
											"",
											"                // total_debit = last_month.total_debit + month.current_total_debit",
											"                // console.log(\"last month data: \", chart_balance_change_last_month);",
											"                pm.test(\"total_debit must be \" + (chart_balance_change_last_month.total_debit + sum_table.current_total_debit), function () {",
											"                    pm.expect(jsData.data.sum_card_data.total_debit).to.eql(chart_balance_change_last_month.total_debit + sum_table.current_total_debit);",
											"                });",
											"",
											"                // total_credit = last_month.total_credit + month.current_total_credit",
											"                pm.test(\"total_credit must be \" + (chart_balance_change_last_month.total_credit + sum_table.current_total_credit), function () {",
											"                    pm.expect(jsData.data.sum_card_data.total_credit).to.eql(chart_balance_change_last_month.total_credit + sum_table.current_total_credit);",
											"                });",
											"",
											"                // total_balance_amount = total_debit - total_credit",
											"                pm.test(\"total_balance_amount must be \" + (jsData.data.sum_card_data.total_debit - jsData.data.sum_card_data.total_credit), function () {",
											"                    pm.expect(jsData.data.sum_card_data.total_balance_amount).to.eql(jsData.data.sum_card_data.total_debit - jsData.data.sum_card_data.total_credit);",
											"                });",
											"",
											"                pm.environment.set(\"C-month_obj\",month_obj);",
											"                postman.setNextRequest(\"get_forecast_dashboard\"); // get_forecast_dashboard",
											"            }",
											"            break;",
											"        case 4:",
											"            tnx_obj = pm.environment.get(\"C-tnx_obj\");",
											"            tnx_date = tnx_obj.value_at;",
											"            console.log(\"tnx_date: \" + tnx_date);",
											"            let old_chart_balance_change = pm.environment.get(\"C-chart_balance_change\");",
											"            chart_balance_change = jsData.data;",
											"            // console.log(\"old_chart_balance_change: \", old_chart_balance_change);",
											"            // console.log(\"chart_balance_change: \", chart_balance_change);",
											"",
											"            let today = new Date();",
											"            let today_tmp = Math.floor(today.getTime()/1000);",
											"            let firstDayOfThisMonth = getFirstDayOfMonth(today_tmp);",
											"            let lastDayOfThisMonth = getLastDayOfMonth(today_tmp);",
											"            if(tnx_date < firstDayOfThisMonth || tnx_date > lastDayOfThisMonth){",
											"                // nothing happen",
											"                pm.test(\"Nothing happen!!!\", function () {",
											"                    pm.expect(JSON.stringify(chart_balance_change) == JSON.stringify(old_chart_balance_change)).to.be.true;",
											"                });",
											"            } else {",
											"                tnx_date = tnx_date.substring(0,10);",
											"                let exp_change = tnx_obj.amount;",
											"                // có thay đổi => total_income increase",
											"                if(tnx_obj.txn_type == \"in\"){",
											"                    // total_debit",
											"                    pm.test(\"total_debit increase \" + exp_change, function () {",
											"                        pm.expect(chart_balance_change.sum_card_data.total_debit == old_chart_balance_change.sum_card_data.total_debit + exp_change).to.be.true;",
											"                    });",
											"",
											"                    // current_total_debit",
											"                    pm.test(\"current_total_debit increase \" + exp_change, function () {",
											"                        pm.expect(chart_balance_change.sum_card_data.current_total_debit == old_chart_balance_change.sum_card_data.current_total_debit + exp_change).to.be.true;",
											"                    });",
											"",
											"                    // thay đổi ngày tương ứng",
											"                    let old_date = null, act_date = null;",
											"                    for(let i in chart_balance_change.dates_data){",
											"                        let day_i = chart_balance_change.dates_data[i].date.substring(0,10);",
											"                        if(day_i == tnx_date){",
											"                            act_date = chart_balance_change.dates_data[i];",
											"                            break;",
											"                        }",
											"                    }",
											"",
											"                    for(let i in old_chart_balance_change.dates_data){",
											"                        let day_i = old_chart_balance_change.dates_data[i].date.substring(0,10);",
											"                        if(day_i == tnx_date){",
											"                            old_date = old_chart_balance_change.dates_data[i];",
											"                            break;",
											"                        }",
											"                    }",
											"",
											"                    if(old_date != null && act_date != null){",
											"                        console.log(\"act_date: \",act_date);",
											"                        console.log(\"old_date: \",old_date);",
											"                        // debit_amount",
											"                        pm.test(\"debit_amount at \" + tnx_date + \" increase \" + exp_change, function () {",
											"                            pm.expect(act_date.debit_amount == old_date.debit_amount + exp_change).to.be.true;",
											"                        });",
											"",
											"                        // end_amount",
											"                        pm.test(\"end_amount at \" + tnx_date + \" increase \" + exp_change, function () {",
											"                            pm.expect(act_date.end_amount == old_date.end_amount + exp_change).to.be.true;",
											"                        });",
											"                    }",
											"                } else {",
											"                    // total_credit",
											"                    pm.test(\"total_debit increase \" + exp_change, function () {",
											"                        pm.expect(chart_balance_change.sum_card_data.total_credit == old_chart_balance_change.sum_card_data.total_credit + exp_change).to.be.true;",
											"                    });",
											"",
											"                    // current_total_credit",
											"                    pm.test(\"current_total_credit increase \" + exp_change, function () {",
											"                        pm.expect(chart_balance_change.sum_card_data.current_total_credit == old_chart_balance_change.sum_card_data.current_total_credit + exp_change).to.be.true;",
											"                    });",
											"",
											"                    // thay đổi ngày tương ứng",
											"                    let old_date = null, act_date = null;",
											"                    for(let i in chart_balance_change.dates_data){",
											"                        let day_i = chart_balance_change.dates_data[i].date.substring(0,10);",
											"                        if(day_i == tnx_date){",
											"                            act_date = chart_balance_change.dates_data[i];",
											"                            break;",
											"                        }",
											"                    }",
											"",
											"                    for(let i in old_chart_balance_change.dates_data){",
											"                        let day_i = old_chart_balance_change.dates_data[i].date.substring(0,10);",
											"                        if(day_i == tnx_date){",
											"                            old_date = old_chart_balance_change.dates_data[i];",
											"                            break;",
											"                        }",
											"                    }",
											"",
											"                    if(old_date != null && act_date != null){",
											"                        console.log(\"act_date: \",act_date);",
											"                        console.log(\"old_date: \",old_date);",
											"                        // credit_amount",
											"                        pm.test(\"credit_amount at \" + tnx_date + \" increase \" + exp_change, function () {",
											"                            pm.expect(act_date.credit_amount == old_date.credit_amount + exp_change).to.be.true;",
											"                        });",
											"                        ",
											"                        // end_amount",
											"                        pm.test(\"end_amount at \" + tnx_date + \" descrease \" + exp_change, function () {",
											"                            pm.expect(act_date.end_amount == old_date.end_amount - exp_change).to.be.true;",
											"                        });",
											"                    }",
											"                }",
											"            }",
											"",
											"            postman.setNextRequest(\"get_forecast_dashboard\"); // get_forecast_dashboard",
											"            break;",
											"        default:",
											"            console.log(\"Missing flow, end test\");",
											"            postman.setNextRequest(null);",
											"            break;",
											"    }",
											"} else {",
											"    console.log(\"Can't get chart balance change, end test\",jsData);",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "authorization",
										"value": "Bearer {{C-userToken}}"
									},
									{
										"key": "x-locale",
										"value": "en",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{C-payload}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{finone_url}}/fo-ledger/api/v1/report/chart-balance-change",
									"host": [
										"{{finone_url}}"
									],
									"path": [
										"fo-ledger",
										"api",
										"v1",
										"report",
										"chart-balance-change"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_chart_balance_change_branch",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let testcase = pm.environment.get(\"C-testcase\");",
											"console.log(\"Testcase: \" + testcase);",
											"",
											"let payload;",
											"switch (testcase) {",
											"    case 2:",
											"        let is_get_last = pm.environment.get(\"C-is_get_last\");",
											"        if (!is_get_last) {",
											"            is_get_last = false;",
											"            pm.environment.set(\"C-is_get_last\", is_get_last);",
											"",
											"            payload = {",
											"                \"business_id\": parseInt(pm.environment.get(\"C-business_id\")),",
											"                \"branch_id\":pm.environment.get(\"C-branch_id\"),",
											"                \"period\": \"last_month\", // last_month, month",
											"                \"account_ids\": []",
											"            }",
											"        } else {",
											"            payload = {",
											"                \"business_id\": parseInt(pm.environment.get(\"C-business_id\")),",
											"                \"branch_id\":pm.environment.get(\"C-branch_id\"),",
											"                \"period\": \"month\", // last_month, month",
											"                \"account_ids\": []",
											"            }",
											"        }",
											"        break;",
											"    case 4:",
											"        payload = {",
											"            \"business_id\": parseInt(pm.environment.get(\"C-business_id\")),",
											"            \"branch_id\":pm.environment.get(\"C-branch_id\"),",
											"            \"period\": \"month\", // last_month, month",
											"            \"account_ids\": []",
											"        }",
											"        break;",
											"    default:",
											"        console.log(\"Missing flow\");",
											"}",
											"",
											"console.log(\"payload: \", payload);",
											"pm.environment.set(\"C-payload\", JSON.stringify(payload));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsData = pm.response.json();",
											"if(pm.response.code == 200){",
											"    let testcase = pm.environment.get(\"C-testcase\");",
											"",
											"    let chart_balance_change = null;",
											"    let chart_balance_change_last_month = pm.environment.get(\"C-chart_balance_change_last_month\");",
											"    let invoice_obj, invoice_date;",
											"    switch(testcase){",
											"        case 2:",
											"            let is_get_last = pm.environment.get(\"C-is_get_last\");",
											"",
											"            if(!is_get_last){",
											"                is_get_last = true;",
											"                pm.environment.set(\"C-is_get_last\",is_get_last);",
											"",
											"                chart_balance_change_last_month = jsData.data.sum_card_data;",
											"                pm.environment.set(\"C-chart_balance_change_last_month\",chart_balance_change_last_month);",
											"",
											"                postman.setNextRequest(\"get_chart_balance_change\");",
											"            } else {",
											"                chart_balance_change = jsData.data;",
											"                pm.test(\"Got chart_balance_change \", function () {",
											"                    // sum_card_data.total_balance_amount",
											"                    // dates_data",
											"                    pm.environment.set(\"C-chart_balance_change\",chart_balance_change);",
											"                    pm.expect(chart_balance_change != null).to.be.true;",
											"                });",
											"",
											"                // check data chart & table",
											"                let sum_table = {",
											"                    \"total_debit\":0,",
											"                    \"total_credit\":0,",
											"                    \"current_total_debit\":0,",
											"                    \"current_total_credit\":0,",
											"                    \"total_balance_amount\":0,",
											"                }",
											"                for(let i in jsData.data.dates_data){",
											"                    sum_table.current_total_debit += jsData.data.dates_data[i].debit_amount;",
											"                    sum_table.current_total_credit += jsData.data.dates_data[i].credit_amount;",
											"",
											"                    console.log(\"Date: \" + jsData.data.dates_data[i].date);",
											"                    if(i != 0){",
											"                        // start của ngày hôm nay lả end của ngày hôm trước",
											"                        pm.test(\"--- start_amount must be \" + jsData.data.dates_data[i-1].end_amount, function () {",
											"                            pm.expect(jsData.data.dates_data[i-1].end_amount).to.eql(jsData.data.dates_data[i].start_amount);",
											"                        });",
											"                    } else {",
											"                        // start của ngày đầu tháng là total_balance_amount của tháng trước",
											"                        pm.test(\"--- start_amount must be \" + chart_balance_change_last_month.total_balance_amount, function () {",
											"                            pm.expect(chart_balance_change_last_month.total_balance_amount).to.eql(jsData.data.dates_data[i].start_amount);",
											"                        });",
											"                    }",
											"",
											"                    // gap =  debit_amount - credit_amount",
											"                    pm.test(\"--- gap must be \" + (jsData.data.dates_data[i].debit_amount - jsData.data.dates_data[i].credit_amount), function () {",
											"                        // console.log(\"act gap: \" + jsData.data.dates_data[i].gap);",
											"                        pm.expect(jsData.data.dates_data[i].gap).to.eql(jsData.data.dates_data[i].debit_amount - jsData.data.dates_data[i].credit_amount);",
											"                    });",
											"",
											"                    // end_amount = start_amount + gap",
											"                    pm.test(\"--- end_amount must be \" + (jsData.data.dates_data[i].start_amount + jsData.data.dates_data[i].gap), function () {",
											"                        pm.expect(jsData.data.dates_data[i].end_amount).to.eql(jsData.data.dates_data[i].start_amount + jsData.data.dates_data[i].gap);",
											"                    });",
											"                }",
											"",
											"                // current_total_debit",
											"                pm.test(\"current_total_debit must be \" + sum_table.current_total_debit, function () {",
											"                    pm.expect(jsData.data.sum_card_data.current_total_debit).to.eql(sum_table.current_total_debit);",
											"                });",
											"",
											"                // current_total_credit",
											"                pm.test(\"current_total_credit must be \" + sum_table.current_total_credit, function () {",
											"                    pm.expect(jsData.data.sum_card_data.current_total_credit).to.eql(sum_table.current_total_credit);",
											"                });",
											"",
											"                // total_debit = last_month.total_debit + month.current_total_debit",
											"                // console.log(\"last month data: \", chart_balance_change_last_month);",
											"                pm.test(\"total_debit must be \" + (chart_balance_change_last_month.total_debit + sum_table.current_total_debit), function () {",
											"                    pm.expect(jsData.data.sum_card_data.total_debit).to.eql(chart_balance_change_last_month.total_debit + sum_table.current_total_debit);",
											"                });",
											"",
											"                // total_credit = last_month.total_credit + month.current_total_credit",
											"                pm.test(\"total_credit must be \" + (chart_balance_change_last_month.total_credit + sum_table.current_total_credit), function () {",
											"                    pm.expect(jsData.data.sum_card_data.total_credit).to.eql(chart_balance_change_last_month.total_credit + sum_table.current_total_credit);",
											"                });",
											"",
											"                // total_balance_amount = total_debit - total_credit",
											"                pm.test(\"total_balance_amount must be \" + (jsData.data.sum_card_data.total_debit - jsData.data.sum_card_data.total_credit), function () {",
											"                    pm.expect(jsData.data.sum_card_data.total_balance_amount).to.eql(jsData.data.sum_card_data.total_debit - jsData.data.sum_card_data.total_credit);",
											"                });",
											"",
											"                postman.setNextRequest(\"get_forecast_dashboard\"); // get_forecast_dashboard",
											"            }",
											"            break;",
											"        case 4:",
											"            invoice_obj = pm.environment.get(\"C-invoice_obj\");",
											"            invoice_date = invoice_obj.value_at;",
											"            console.log(\"invoice_date: \" + invoice_date);",
											"",
											"            if(full_check == 1){",
											"                let old_profit_period = pm.environment.get(\"C-profit_period\");",
											"                // console.log(\"debug old_loss_period: \", old_profit_period);",
											"                // console.log(\"debug loss_period: \", profit_period);",
											"",
											"                // do thời gian lọc là tháng hiện tại => chỉ thay đổi khi value_at nằm trong tháng hiện tại",
											"                let today = new Date();",
											"                let today_tmp = Math.floor(today.getTime()/1000);",
											"                let firstDayOfThisMonth = getFirstDayOfMonth(today_tmp);",
											"                let lastDayOfThisMonth = getLastDayOfMonth(today_tmp);",
											"                if(invoice_date < firstDayOfThisMonth || invoice_date > lastDayOfThisMonth){",
											"                    // nothing happen",
											"                    pm.test(\"Nothing happen!!!\", function () {",
											"                        pm.expect(JSON.stringify(profit_period) == JSON.stringify(old_profit_period)).to.be.true;",
											"                    });",
											"                } else {",
											"                    invoice_date = invoice_date.substring(0,10);",
											"",
											"                    let income_product = 0, income_discount = 0;",
											"                    for(let i in invoice_obj.items){",
											"                        income_product += invoice_obj.items[i].before_tax_amount;",
											"                        income_discount += invoice_obj.items[i].discount_amount;",
											"                    }",
											"                    let exp_change = income_product - income_discount;",
											"                    // có thay đổi => total_income increase",
											"                    pm.test(\"total_income increase \" + exp_change, function () {",
											"                        pm.expect(profit_period.sum_card_data.total_income == old_profit_period.sum_card_data.total_income + exp_change).to.be.true;",
											"                    });",
											"                    // thay đổi ngày tương ứng",
											"                    let old_date = null, act_date = null;",
											"                    for(let i in profit_period.dates_data){",
											"                        let day_i = profit_period.dates_data[i].date.substring(0,10);",
											"                        if(day_i == invoice_date){",
											"                            act_date = profit_period.dates_data[i];",
											"                            break;",
											"                        }",
											"                    }",
											"",
											"                    for(let i in old_profit_period.dates_data){",
											"                        let day_i = old_profit_period.dates_data[i].date.substring(0,10);",
											"                        if(day_i == invoice_date){",
											"                            old_date = old_profit_period.dates_data[i];",
											"                            break;",
											"                        }",
											"                    }",
											"",
											"                    if(old_date != null && act_date != null){",
											"                        console.log(\"act_date: \",act_date);",
											"                        console.log(\"old_date: \",old_date);",
											"                        pm.test(\"income at \" + invoice_date + \" increase \" + exp_change, function () {",
											"                            pm.expect(act_date.income == old_date.income + exp_change).to.be.true;",
											"                        });",
											"                    }",
											"                }",
											"",
											"                full_check++;",
											"                pm.environment.set(\"C-full_check\",full_check);",
											"                postman.setNextRequest(\"report_profit_loss_period\");",
											"            } else {",
											"                let old_loss_period = pm.environment.get(\"C-loss_period\");",
											"                // console.log(\"debug old_loss_period: \", old_loss_period);",
											"                // console.log(\"debug loss_period: \", loss_period);",
											"                ",
											"                pm.test(\"Nothing happen!!!\", function () {",
											"                    pm.expect(JSON.stringify(loss_period) == JSON.stringify(old_loss_period)).to.be.true;",
											"                });",
											"",
											"                pm.environment.unset(\"C-full_check\");",
											"",
											"                console.log(\"-------- End Testsuite 06 --------\");",
											"                postman.setNextRequest(null);",
											"            }",
											"            break;",
											"        default:",
											"            console.log(\"Missing flow, end test\");",
											"            postman.setNextRequest(null);",
											"            break;",
											"    }",
											"} else {",
											"    console.log(\"Can't get chart balance change, end test\",jsData);",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "authorization",
										"value": "Bearer {{C-userToken}}"
									},
									{
										"key": "x-locale",
										"value": "en",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{C-payload}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{finone_url}}/fo-ledger/api/v1/report/chart-balance-change",
									"host": [
										"{{finone_url}}"
									],
									"path": [
										"fo-ledger",
										"api",
										"v1",
										"report",
										"chart-balance-change"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_forecast_dashboard",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let testcase = pm.environment.get(\"C-testcase\");",
											"console.log(\"Testcase: \" + testcase);",
											"",
											"let payload = {",
											"    \"business_id\": parseInt(pm.environment.get(\"C-business_id\")),",
											"    \"current_period_start\": pm.environment.get(\"C-current_period_start\"),",
											"    \"current_period_end\": pm.environment.get(\"C-current_period_end\")",
											"}",
											"",
											"console.log(\"payload: \",payload);",
											"pm.environment.set(\"C-payload\",JSON.stringify(payload));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsData = pm.response.json();",
											"if(pm.response.code == 200){",
											"    let testcase = pm.environment.get(\"C-testcase\");",
											"",
											"    let forecast_dashboard = null;",
											"    let tnx_obj, tnx_date;",
											"    switch(testcase){",
											"        case 2:",
											"            forecast_dashboard = jsData.data;",
											"            pm.test(\"Got forecast_dashboard \", function () {",
											"                pm.environment.set(\"C-forecast_dashboard\",forecast_dashboard);",
											"                pm.expect(forecast_dashboard != null).to.be.true;",
											"            });",
											"            console.log(\"forecast_dashboard: \",forecast_dashboard);",
											"",
											"            postman.setNextRequest(\"get_cash_flow_chart\"); // get_cash_flow_chart",
											"            break;",
											"        case 4:",
											"            let old_forecast_dashboard = pm.environment.get(\"C-forecast_dashboard\");",
											"            forecast_dashboard = jsData.data;",
											"            console.log(\"old_forecast_dashboard: \", old_forecast_dashboard);",
											"            console.log(\"forecast_dashboard: \", forecast_dashboard);",
											"",
											"            let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
											"            ",
											"            if(tnx_obj.txn_type == \"in\"){",
											"                // total_balance",
											"                pm.test(\"total_balance increase \" + tnx_obj.amount, function () {",
											"                    pm.expect(old_forecast_dashboard.total_balance + tnx_obj.amount == forecast_dashboard.total_balance).to.be.true;",
											"                });",
											"",
											"                // forecasted_balance",
											"                pm.test(\"forecasted_balance increase \" + tnx_obj.amount, function () {",
											"                    pm.expect(old_forecast_dashboard.forecasted_balance + tnx_obj.amount == forecast_dashboard.forecasted_balance).to.be.true;",
											"                });",
											"            } else {",
											"                // total_balance",
											"                pm.test(\"total_balance decrease \" + tnx_obj.amount, function () {",
											"                    pm.expect(old_forecast_dashboard.total_balance - tnx_obj.amount == forecast_dashboard.total_balance).to.be.true;",
											"                });",
											"",
											"                // forecasted_balance",
											"                pm.test(\"forecasted_balance decrease \" + tnx_obj.amount, function () {",
											"                    pm.expect(old_forecast_dashboard.forecasted_balance - tnx_obj.amount == forecast_dashboard.forecasted_balance).to.be.true;",
											"                });",
											"            }",
											"",
											"            postman.setNextRequest(\"get_cash_flow_chart\"); // get_cash_flow_chart",
											"            break;",
											"        default:",
											"            console.log(\"Missing flow, end test\");",
											"            postman.setNextRequest(null);",
											"            break;",
											"    }",
											"} else {",
											"    console.log(\"Can't get forecast dashboard, end test\",jsData);",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "authorization",
										"value": "Bearer {{C-userToken}}"
									},
									{
										"key": "x-locale",
										"value": "en"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{C-payload}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{finone_url}}/fo-ledger/api/v1/report/forecast-dashboard",
									"host": [
										"{{finone_url}}"
									],
									"path": [
										"fo-ledger",
										"api",
										"v1",
										"report",
										"forecast-dashboard"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_forecast_dashboard_branch",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let testcase = pm.environment.get(\"C-testcase\");",
											"console.log(\"Testcase: \" + testcase);",
											"",
											"let payload = {",
											"    \"business_id\": parseInt(pm.environment.get(\"C-business_id\")),",
											"    \"branch_id\":pm.environment.get(\"C-branch_id\"),",
											"    \"current_period_start\": pm.environment.get(\"C-current_period_start\"),",
											"    \"current_period_end\": pm.environment.get(\"C-current_period_end\")",
											"}",
											"",
											"console.log(\"payload: \",payload);",
											"pm.environment.set(\"C-payload\",JSON.stringify(payload));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsData = pm.response.json();",
											"if(pm.response.code == 200){",
											"    let testcase = pm.environment.get(\"C-testcase\");",
											"",
											"    let forecast_dashboard = null;",
											"    let invoice_obj, invoice_date;",
											"    switch(testcase){",
											"        case 2:",
											"            forecast_dashboard = jsData.data;",
											"            pm.test(\"Got forecast_dashboard \", function () {",
											"                pm.environment.set(\"C-forecast_dashboard\",forecast_dashboard);",
											"                pm.expect(forecast_dashboard != null).to.be.true;",
											"            });",
											"            console.log(\"forecast_dashboard: \",forecast_dashboard);",
											"",
											"            postman.setNextRequest(\"\"); // get_cash_flow_chart",
											"            break;",
											"        default:",
											"            console.log(\"Missing flow, end test\");",
											"            postman.setNextRequest(null);",
											"            break;",
											"    }",
											"} else {",
											"    console.log(\"Can't get forecast dashboard, end test\",jsData);",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "authorization",
										"value": "Bearer {{C-userToken}}"
									},
									{
										"key": "x-locale",
										"value": "en"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{C-payload}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{finone_url}}/fo-ledger/api/v1/report/forecast-dashboard",
									"host": [
										"{{finone_url}}"
									],
									"path": [
										"fo-ledger",
										"api",
										"v1",
										"report",
										"forecast-dashboard"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "cash_flow_widget",
					"item": [
						{
							"name": "get_cash_flow_chart",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let testcase = pm.environment.get(\"C-testcase\");",
											"console.log(\"Testcase: \" + testcase);",
											"",
											"let configs = pm.environment.get(\"C-configs\");",
											"let payload = {",
											"    \"business_id\": parseInt(pm.environment.get(\"C-business_id\")),",
											"    \"period\": configs.period",
											"}",
											"",
											"console.log(\"payload: \",payload);",
											"pm.environment.set(\"C-payload\",JSON.stringify(payload));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// ============================= getFirstDayOfMonth",
											"function getFirstDayOfMonth(date_timestamp){",
											"  let setDate = new Date(date_timestamp*1000);",
											"  let getDate = new Date(setDate.getFullYear(), setDate.getMonth(), 1);",
											"  return getDate.toISOString();",
											"}",
											"",
											"// ============================= getLastDayOfMonth",
											"function getLastDayOfMonth(date_timestamp){",
											"  let setDate = new Date(date_timestamp*1000);",
											"  let firstDayOfNextMonth = new Date(setDate.getFullYear(), setDate.getMonth() + 1, 1);",
											"  let lastDayOfMonth = new Date(firstDayOfNextMonth - 1);",
											"  return lastDayOfMonth.toISOString();",
											"}",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsData = pm.response.json();",
											"if(pm.response.code == 200){",
											"    let testcase = pm.environment.get(\"C-testcase\");",
											"",
											"    let chart_cash_flow = null;",
											"    let tnx_obj, tnx_date;",
											"    switch(testcase){",
											"        case 2:",
											"            chart_cash_flow = jsData.data;",
											"            pm.test(\"Got chart_cash_flow \", function () {",
											"                // sum_card_data.total_balance_amount",
											"                // dates_data",
											"                pm.environment.set(\"C-chart_cash_flow\",chart_cash_flow);",
											"                pm.expect(chart_cash_flow != null).to.be.true;",
											"            });",
											"",
											"            // check data chart & table",
											"            let sum_table = {",
											"                \"total_income\":0,",
											"                \"total_expense\":0,",
											"                \"total_gap\":0,",
											"                \"total_profit\":0",
											"            }",
											"            for(let i in jsData.data.dates_data){",
											"                sum_table.total_income += jsData.data.dates_data[i].income;",
											"                sum_table.total_expense += jsData.data.dates_data[i].expense;",
											"",
											"                console.log(\"Date: \" + jsData.data.dates_data[i].date);",
											"",
											"                // gap =  debit_amount - credit_amount",
											"                pm.test(\"--- gap must be \" + (jsData.data.dates_data[i].income - jsData.data.dates_data[i].expense), function () {",
											"                    // console.log(\"act gap: \" + jsData.data.dates_data[i].gap);",
											"                    pm.expect(jsData.data.dates_data[i].gap).to.eql(jsData.data.dates_data[i].income - jsData.data.dates_data[i].expense);",
											"                });",
											"",
											"                // profit => chưa define",
											"            }",
											"",
											"            // total_income",
											"            pm.test(\"total_income must be \" + sum_table.total_income, function () {",
											"                pm.expect(jsData.data.sum_card_data.total_income).to.eql(sum_table.total_income);",
											"            });",
											"",
											"            // total_expense",
											"            pm.test(\"total_expense must be \" + sum_table.total_expense, function () {",
											"                pm.expect(jsData.data.sum_card_data.total_expense).to.eql(sum_table.total_expense);",
											"            });",
											"",
											"            // total_gap = total_income - total_expense",
											"            pm.test(\"total_gap must be \" + (jsData.data.sum_card_data.total_income - jsData.data.sum_card_data.total_expense), function () {",
											"                pm.expect(jsData.data.sum_card_data.total_gap).to.eql(jsData.data.sum_card_data.total_income - jsData.data.sum_card_data.total_expense);",
											"            });",
											"",
											"            // total_profit => chưa define",
											"",
											"            postman.setNextRequest(\"get_cash_flow_table\"); // get_cash_flow_table",
											"            break;",
											"        case 4:",
											"            tnx_obj = pm.environment.get(\"C-tnx_obj\");",
											"            tnx_date = tnx_obj.value_at;",
											"            console.log(\"tnx_date: \" + tnx_date);",
											"            let old_chart_cash_flow = pm.environment.get(\"C-chart_cash_flow\");",
											"            chart_cash_flow = jsData.data;",
											"            // do thời gian lọc là tháng hiện tại => chỉ thay đổi khi value_at nằm trong tháng hiện tại",
											"            let today = new Date();",
											"            let today_tmp = Math.floor(today.getTime()/1000);",
											"            let firstDayOfThisMonth = getFirstDayOfMonth(today_tmp);",
											"            let lastDayOfThisMonth = getLastDayOfMonth(today_tmp);",
											"            if(tnx_date < firstDayOfThisMonth || tnx_date > lastDayOfThisMonth){",
											"                // nothing happen",
											"                pm.test(\"Nothing happen!!!\", function () {",
											"                    pm.expect(JSON.stringify(chart_cash_flow) == JSON.stringify(old_chart_cash_flow)).to.be.true;",
											"                });",
											"            } else {",
											"                tnx_date = tnx_date.substring(0,10);",
											"",
											"                let exp_change = tnx_obj.amount;",
											"                // có thay đổi => total_income increase",
											"                if(tnx_obj.txn_type == \"in\"){",
											"                    // total_income",
											"                    pm.test(\"total_income increase \" + exp_change, function () {",
											"                        pm.expect(chart_cash_flow.sum_card_data.total_income == old_chart_cash_flow.sum_card_data.total_income + exp_change).to.be.true;",
											"                    });",
											"",
											"                    // total_gap",
											"                    pm.test(\"total_gap increase \" + exp_change, function () {",
											"                        pm.expect(chart_cash_flow.sum_card_data.total_gap == old_chart_cash_flow.sum_card_data.total_gap + exp_change).to.be.true;",
											"                    });",
											"",
											"                    // thay đổi ngày tương ứng",
											"                    let old_date = null, act_date = null;",
											"                    for(let i in chart_cash_flow.dates_data){",
											"                        let day_i = chart_cash_flow.dates_data[i].date.substring(0,10);",
											"                        if(day_i == tnx_date){",
											"                            act_date = chart_cash_flow.dates_data[i];",
											"                            break;",
											"                        }",
											"                    }",
											"",
											"                    for(let i in old_chart_cash_flow.dates_data){",
											"                        let day_i = old_chart_cash_flow.dates_data[i].date.substring(0,10);",
											"                        if(day_i == tnx_date){",
											"                            old_date = old_chart_cash_flow.dates_data[i];",
											"                            break;",
											"                        }",
											"                    }",
											"",
											"                    if(old_date != null && act_date != null){",
											"                        console.log(\"act_date: \",act_date);",
											"                        console.log(\"old_date: \",old_date);",
											"                        // income",
											"                        pm.test(\"income at \" + tnx_date + \" increase \" + exp_change, function () {",
											"                            pm.expect(act_date.income == old_date.income + exp_change).to.be.true;",
											"                        });",
											"                        // gap",
											"                        pm.test(\"gap at \" + tnx_date + \" increase \" + exp_change, function () {",
											"                            pm.expect(act_date.gap == old_date.gap + exp_change).to.be.true;",
											"                        });",
											"                    }",
											"                } else {",
											"                    // total_expense",
											"                    pm.test(\"total_expense increase \" + exp_change, function () {",
											"                        pm.expect(chart_cash_flow.sum_card_data.total_expense == old_chart_cash_flow.sum_card_data.total_expense + exp_change).to.be.true;",
											"                    });",
											"",
											"                    // total_gap",
											"                    pm.test(\"total_gap decrease \" + exp_change, function () {",
											"                        pm.expect(chart_cash_flow.sum_card_data.total_gap == old_chart_cash_flow.sum_card_data.total_gap - exp_change).to.be.true;",
											"                    });",
											"",
											"                    // thay đổi ngày tương ứng",
											"                    let old_date = null, act_date = null;",
											"                    for(let i in chart_cash_flow.dates_data){",
											"                        let day_i = chart_cash_flow.dates_data[i].date.substring(0,10);",
											"                        if(day_i == tnx_date){",
											"                            act_date = chart_cash_flow.dates_data[i];",
											"                            break;",
											"                        }",
											"                    }",
											"",
											"                    for(let i in old_chart_cash_flow.dates_data){",
											"                        let day_i = old_chart_cash_flow.dates_data[i].date.substring(0,10);",
											"                        if(day_i == tnx_date){",
											"                            old_date = old_chart_cash_flow.dates_data[i];",
											"                            break;",
											"                        }",
											"                    }",
											"",
											"                    if(old_date != null && act_date != null){",
											"                        console.log(\"act_date: \",act_date);",
											"                        console.log(\"old_date: \",old_date);",
											"                        // expense",
											"                        pm.test(\"expense at \" + tnx_date + \" increase \" + exp_change, function () {",
											"                            pm.expect(act_date.expense == old_date.expense + exp_change).to.be.true;",
											"                        });",
											"                        // gap",
											"                        pm.test(\"gap at \" + tnx_date + \" decrease \" + exp_change, function () {",
											"                            pm.expect(act_date.gap == old_date.gap - exp_change).to.be.true;",
											"                        });",
											"                    }",
											"                }",
											"            }",
											"",
											"            postman.setNextRequest(\"get_cash_flow_table\"); // get_cash_flow_table",
											"            break;",
											"        default:",
											"            console.log(\"Missing flow, end test\");",
											"            postman.setNextRequest(null);",
											"            break;",
											"    }",
											"} else {",
											"    console.log(\"Can't get chart cash flow, end test\",jsData);",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "authorization",
										"value": "Bearer {{C-userToken}}"
									},
									{
										"key": "x-locale",
										"value": "en"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{C-payload}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{finone_url}}/fo-ledger/api/v1/report/cash-flow-period",
									"host": [
										"{{finone_url}}"
									],
									"path": [
										"fo-ledger",
										"api",
										"v1",
										"report",
										"cash-flow-period"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_cash_flow_chart_branch",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let testcase = pm.environment.get(\"C-testcase\");",
											"console.log(\"Testcase: \" + testcase);",
											"",
											"let payload = {",
											"    \"business_id\": parseInt(pm.environment.get(\"C-business_id\")),",
											"    \"branch_id\":pm.environment.get(\"C-branch_id\"),",
											"    \"period\": \"month\"",
											"}",
											"",
											"console.log(\"payload: \",payload);",
											"pm.environment.set(\"C-payload\",JSON.stringify(payload));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsData = pm.response.json();",
											"if(pm.response.code == 200){",
											"    let testcase = pm.environment.get(\"C-testcase\");",
											"",
											"    let chart_cash_flow = null;",
											"    let invoice_obj, invoice_date;",
											"    switch(testcase){",
											"        case 2:",
											"            chart_cash_flow = jsData.data;",
											"            pm.test(\"Got chart_cash_flow \", function () {",
											"                // sum_card_data.total_balance_amount",
											"                // dates_data",
											"                pm.environment.set(\"C-chart_cash_flow\",chart_cash_flow);",
											"                pm.expect(chart_cash_flow != null).to.be.true;",
											"            });",
											"",
											"            // check data chart & table",
											"            let sum_table = {",
											"                \"total_income\":0,",
											"                \"total_expense\":0,",
											"                \"total_gap\":0,",
											"                \"total_profit\":0",
											"            }",
											"            for(let i in jsData.data.dates_data){",
											"                sum_table.total_income += jsData.data.dates_data[i].income;",
											"                sum_table.total_expense += jsData.data.dates_data[i].expense;",
											"",
											"                console.log(\"Date: \" + jsData.data.dates_data[i].date);",
											"",
											"                // gap =  debit_amount - credit_amount",
											"                pm.test(\"--- gap must be \" + (jsData.data.dates_data[i].income - jsData.data.dates_data[i].expense), function () {",
											"                    // console.log(\"act gap: \" + jsData.data.dates_data[i].gap);",
											"                    pm.expect(jsData.data.dates_data[i].gap).to.eql(jsData.data.dates_data[i].income - jsData.data.dates_data[i].expense);",
											"                });",
											"",
											"                // profit => chưa define",
											"            }",
											"",
											"            // total_income",
											"            pm.test(\"total_income must be \" + sum_table.total_income, function () {",
											"                pm.expect(jsData.data.sum_card_data.total_income).to.eql(sum_table.total_income);",
											"            });",
											"",
											"            // total_expense",
											"            pm.test(\"total_expense must be \" + sum_table.total_expense, function () {",
											"                pm.expect(jsData.data.sum_card_data.total_expense).to.eql(sum_table.total_expense);",
											"            });",
											"",
											"            // total_gap = total_income - total_expense",
											"            pm.test(\"total_gap must be \" + (jsData.data.sum_card_data.total_income - jsData.data.sum_card_data.total_expense), function () {",
											"                pm.expect(jsData.data.sum_card_data.total_gap).to.eql(jsData.data.sum_card_data.total_income - jsData.data.sum_card_data.total_expense);",
											"            });",
											"",
											"            // total_profit => chưa define",
											"",
											"            postman.setNextRequest(\"get_cash_flow_table\"); // get_cash_flow_table",
											"            break;",
											"        case 5:",
											"            invoice_obj = pm.environment.get(\"C-invoice_obj\");",
											"            invoice_date = invoice_obj.value_at.substring(0,10);",
											"            // Invoice sẽ tăng profit (income), Bill sẽ tăng loss (chi phí)",
											"            ",
											"            if(full_check == 1){",
											"                let old_profit_period = pm.environment.get(\"C-profit_period\");",
											"                // console.log(\"debug old_loss_period: \", old_profit_period);",
											"                // console.log(\"debug loss_period: \", profit_period);",
											"",
											"                pm.test(\"Nothing happen!!!\", function () {",
											"                    pm.expect(JSON.stringify(profit_period) == JSON.stringify(old_profit_period)).to.be.true;",
											"                });",
											"",
											"                full_check++;",
											"                pm.environment.set(\"C-full_check\",full_check);",
											"                postman.setNextRequest(\"report_profit_loss_period\");",
											"            } else {",
											"                let old_loss_period = pm.environment.get(\"C-loss_period\");",
											"                // console.log(\"debug old_loss_period: \", old_loss_period);",
											"                // console.log(\"debug loss_period: \", loss_period);",
											"                ",
											"                pm.test(\"Nothing happen!!!\", function () {",
											"                    pm.expect(JSON.stringify(loss_period) == JSON.stringify(old_loss_period)).to.be.true;",
											"                });",
											"",
											"                pm.environment.unset(\"C-full_check\");",
											"",
											"                testcase++;",
											"                pm.environment.set(\"C-testcase\",testcase);",
											"                postman.setNextRequest(\"calculate_invoice\"); // calculate_invoice",
											"            }",
											"            break;",
											"        case 8:",
											"            invoice_obj = pm.environment.get(\"C-invoice_obj\");",
											"            invoice_date = invoice_obj.value_at;",
											"            console.log(\"invoice_date: \" + invoice_date);",
											"",
											"            if(full_check == 1){",
											"                let old_profit_period = pm.environment.get(\"C-profit_period\");",
											"                // console.log(\"debug old_loss_period: \", old_profit_period);",
											"                // console.log(\"debug loss_period: \", profit_period);",
											"",
											"                // do thời gian lọc là tháng hiện tại => chỉ thay đổi khi value_at nằm trong tháng hiện tại",
											"                let today = new Date();",
											"                let today_tmp = Math.floor(today.getTime()/1000);",
											"                let firstDayOfThisMonth = getFirstDayOfMonth(today_tmp);",
											"                let lastDayOfThisMonth = getLastDayOfMonth(today_tmp);",
											"                if(invoice_date < firstDayOfThisMonth || invoice_date > lastDayOfThisMonth){",
											"                    // nothing happen",
											"                    pm.test(\"Nothing happen!!!\", function () {",
											"                        pm.expect(JSON.stringify(profit_period) == JSON.stringify(old_profit_period)).to.be.true;",
											"                    });",
											"                } else {",
											"                    invoice_date = invoice_date.substring(0,10);",
											"",
											"                    let income_product = 0, income_discount = 0;",
											"                    for(let i in invoice_obj.items){",
											"                        income_product += invoice_obj.items[i].before_tax_amount;",
											"                        income_discount += invoice_obj.items[i].discount_amount;",
											"                    }",
											"                    let exp_change = income_product - income_discount;",
											"                    // có thay đổi => total_income increase",
											"                    pm.test(\"total_income increase \" + exp_change, function () {",
											"                        pm.expect(profit_period.sum_card_data.total_income == old_profit_period.sum_card_data.total_income + exp_change).to.be.true;",
											"                    });",
											"                    // thay đổi ngày tương ứng",
											"                    let old_date = null, act_date = null;",
											"                    for(let i in profit_period.dates_data){",
											"                        let day_i = profit_period.dates_data[i].date.substring(0,10);",
											"                        if(day_i == invoice_date){",
											"                            act_date = profit_period.dates_data[i];",
											"                            break;",
											"                        }",
											"                    }",
											"",
											"                    for(let i in old_profit_period.dates_data){",
											"                        let day_i = old_profit_period.dates_data[i].date.substring(0,10);",
											"                        if(day_i == invoice_date){",
											"                            old_date = old_profit_period.dates_data[i];",
											"                            break;",
											"                        }",
											"                    }",
											"",
											"                    if(old_date != null && act_date != null){",
											"                        console.log(\"act_date: \",act_date);",
											"                        console.log(\"old_date: \",old_date);",
											"                        pm.test(\"income at \" + invoice_date + \" increase \" + exp_change, function () {",
											"                            pm.expect(act_date.income == old_date.income + exp_change).to.be.true;",
											"                        });",
											"                    }",
											"                }",
											"",
											"                full_check++;",
											"                pm.environment.set(\"C-full_check\",full_check);",
											"                postman.setNextRequest(\"report_profit_loss_period\");",
											"            } else {",
											"                let old_loss_period = pm.environment.get(\"C-loss_period\");",
											"                // console.log(\"debug old_loss_period: \", old_loss_period);",
											"                // console.log(\"debug loss_period: \", loss_period);",
											"                ",
											"                pm.test(\"Nothing happen!!!\", function () {",
											"                    pm.expect(JSON.stringify(loss_period) == JSON.stringify(old_loss_period)).to.be.true;",
											"                });",
											"",
											"                pm.environment.unset(\"C-full_check\");",
											"",
											"                console.log(\"-------- End Testsuite 06 --------\");",
											"                postman.setNextRequest(null);",
											"            }",
											"            break;",
											"        default:",
											"            console.log(\"Missing flow, end test\");",
											"            postman.setNextRequest(null);",
											"            break;",
											"    }",
											"} else {",
											"    console.log(\"Can't get chart balance change, end test\",jsData);",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "authorization",
										"value": "Bearer {{C-userToken}}"
									},
									{
										"key": "x-locale",
										"value": "en"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{C-payload}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{finone_url}}/fo-ledger/api/v1/report/cash-flow-period",
									"host": [
										"{{finone_url}}"
									],
									"path": [
										"fo-ledger",
										"api",
										"v1",
										"report",
										"cash-flow-period"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_cash_flow_table",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsData = pm.response.json();",
											"if(pm.response.code == 200){",
											"    let testcase = pm.environment.get(\"C-testcase\");",
											"",
											"    let chart_cash_flow = pm.environment.get(\"C-chart_cash_flow\");",
											"    let table_cash_flow = null;",
											"    let invoice_obj, invoice_date;",
											"    switch(testcase){",
											"        case 2:",
											"            table_cash_flow = jsData.data;",
											"            pm.test(\"Got table_cash_flow \", function () {",
											"                // sum_card_data.total_balance_amount",
											"                // dates_data",
											"                pm.environment.set(\"C-table_cash_flow\",table_cash_flow);",
											"                pm.expect(table_cash_flow != null).to.be.true;",
											"            });",
											"",
											"            // compare data chart & table",
											"            // console.log(\"chart_cash_flow: \" , chart_cash_flow);",
											"            // console.log(\"table_cash_flow: \" , table_cash_flow);",
											"",
											"            // credit_amount",
											"            pm.test(\"credit_amount must be \" + chart_cash_flow.sum_card_data.total_income, function () {",
											"                console.log(\"act: \" + jsData.data.sum_card_data.credit_amount);",
											"                pm.expect(chart_cash_flow.sum_card_data.total_income).to.eql(jsData.data.sum_card_data.credit_amount);",
											"            });",
											"",
											"            // debit_amount",
											"            pm.test(\"debit_amount must be \" + chart_cash_flow.sum_card_data.total_expense, function () {",
											"                console.log(\"act: \" + jsData.data.sum_card_data.debit_amount);",
											"                pm.expect(chart_cash_flow.sum_card_data.total_expense).to.eql(jsData.data.sum_card_data.debit_amount);",
											"            });",
											"",
											"            let month_obj = pm.environment.get(\"C-month_obj\");",
											"            // start_amount",
											"            pm.test(\"start_amount must be \" + month_obj.start_amount, function () {",
											"                console.log(\"act: \" + jsData.data.sum_card_data.start_amount);",
											"                pm.expect(month_obj.start_amount).to.eql(jsData.data.sum_card_data.start_amount);",
											"            });",
											"",
											"            // end_amount",
											"            pm.test(\"end_amount must be \" + month_obj.end_amount, function () {",
											"                console.log(\"act: \" + jsData.data.sum_card_data.end_amount);",
											"                pm.expect(month_obj.end_amount).to.eql(jsData.data.sum_card_data.end_amount);",
											"            });",
											"",
											"            postman.setNextRequest(\"get_receivable_invoice\"); // get_receivable_invoice",
											"            break;",
											"        case 4:",
											"            let old_table_cash_flow = pm.environment.get(\"C-table_cash_flow\");",
											"            table_cash_flow = jsData.data;",
											"            let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
											"            console.log(\"old: \", old_table_cash_flow.sum_card_data);",
											"            console.log(\"new: \", table_cash_flow.sum_card_data);",
											"",
											"            if(tnx_obj.txn_type == \"in\"){",
											"                // tăng credit_amount (đầu phân loại ngược lại đầu quỹ)",
											"                pm.test(\"credit_amount increase \" + tnx_obj.amount, function () {",
											"                    console.log(\"act: \" + table_cash_flow.sum_card_data.credit_amount);",
											"                    pm.expect(old_table_cash_flow.sum_card_data.credit_amount + tnx_obj.amount).to.eql(table_cash_flow.sum_card_data.credit_amount);",
											"                });",
											"",
											"                // tăng end_amount",
											"                pm.test(\"end_amount increase \" + tnx_obj.amount, function () {",
											"                    console.log(\"act: \" + table_cash_flow.sum_card_data.end_amount);",
											"                    pm.expect(old_table_cash_flow.sum_card_data.end_amount + tnx_obj.amount).to.eql(table_cash_flow.sum_card_data.end_amount);",
											"                });",
											"",
											"                // income_categories_data",
											"                let new_cat = null, old_cat = null;",
											"                for(let i in old_table_cash_flow.income_categories_data){",
											"                    if(old_table_cash_flow.income_categories_data[i].id == tnx_obj.category_id){",
											"                        old_cat = old_table_cash_flow.income_categories_data[i];",
											"                        break;",
											"                    }",
											"                }",
											"",
											"                for(let i in table_cash_flow.income_categories_data){",
											"                    if(table_cash_flow.income_categories_data[i].id == tnx_obj.category_id){",
											"                        new_cat = table_cash_flow.income_categories_data[i];",
											"                        break;",
											"                    }",
											"                }",
											"",
											"                if(old_cat != null && new_cat != null){",
											"                    console.log(\"old_cat: \",old_cat);",
											"                    console.log(\"new_cat: \",new_cat);",
											"                    // balance = credit - debit",
											"                    pm.test(\"balance of \" + old_cat.account_name + \" increase \" + tnx_obj.amount, function () {",
											"                        pm.expect(new_cat.balance == old_cat.balance + tnx_obj.amount).to.be.true;",
											"                    });",
											"                }",
											"            } else {",
											"                // tăng debit_amount (đầu phân loại ngược lại đầu quỹ)",
											"                pm.test(\"debit_amount increase \" + tnx_obj.amount, function () {",
											"                    console.log(\"act: \" + table_cash_flow.sum_card_data.debit_amount);",
											"                    pm.expect(old_table_cash_flow.sum_card_data.debit_amount + tnx_obj.amount).to.eql(table_cash_flow.sum_card_data.debit_amount);",
											"                });",
											"",
											"                // giảm end_amount",
											"                pm.test(\"end_amount decrease \" + tnx_obj.amount, function () {",
											"                    console.log(\"act: \" + table_cash_flow.sum_card_data.end_amount);",
											"                    pm.expect(old_table_cash_flow.sum_card_data.end_amount - tnx_obj.amount).to.eql(table_cash_flow.sum_card_data.end_amount);",
											"                });",
											"",
											"                // expense_categories_data",
											"                let new_cat = null, old_cat = null;",
											"                for(let i in old_table_cash_flow.expense_categories_data){",
											"                    if(old_table_cash_flow.expense_categories_data[i].id == tnx_obj.category_id){",
											"                        old_cat = old_table_cash_flow.expense_categories_data[i];",
											"                        break;",
											"                    }",
											"                }",
											"",
											"                for(let i in table_cash_flow.expense_categories_data){",
											"                    if(table_cash_flow.expense_categories_data[i].id == tnx_obj.category_id){",
											"                        new_cat = table_cash_flow.expense_categories_data[i];",
											"                        break;",
											"                    }",
											"                }",
											"",
											"                if(old_cat != null && new_cat != null){",
											"                    console.log(\"old_cat: \",old_cat);",
											"                    console.log(\"new_cat: \",new_cat);",
											"                    // balance = debit - credit",
											"                    pm.test(\"balance of \" + old_cat.account_name + \" increase \" + tnx_obj.amount, function () {",
											"                        pm.expect(new_cat.balance == old_cat.balance + tnx_obj.amount).to.be.true;",
											"                    });",
											"                }",
											"            }",
											"",
											"            postman.setNextRequest(\"get_receivable_invoice\"); // get_receivable_invoice",
											"            break;",
											"        default:",
											"            console.log(\"Missing flow, end test\");",
											"            postman.setNextRequest(null);",
											"            break;",
											"    }",
											"} else {",
											"    console.log(\"Can't get table cash flow, end test\",jsData);",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let testcase = pm.environment.get(\"C-testcase\");",
											"console.log(\"Testcase: \" + testcase);",
											"",
											"let payload = {",
											"    \"business_id\": parseInt(pm.environment.get(\"C-business_id\")),",
											"    \"current_period_start\": pm.environment.get(\"C-current_period_start\"),",
											"    \"current_period_end\": pm.environment.get(\"C-current_period_end\")",
											"}",
											"",
											"console.log(\"payload: \",payload);",
											"pm.environment.set(\"C-payload\",JSON.stringify(payload));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "authorization",
										"value": "Bearer {{C-userToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{C-payload}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{finone_url}}/fo-ledger/api/v1/report/cash-flow-detail",
									"host": [
										"{{finone_url}}"
									],
									"path": [
										"fo-ledger",
										"api",
										"v1",
										"report",
										"cash-flow-detail"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_cash_flow_table_branch",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsData = pm.response.json();",
											"if(pm.response.code == 200){",
											"    let testcase = pm.environment.get(\"C-testcase\");",
											"",
											"    let chart_cash_flow = pm.environment.get(\"C-chart_cash_flow\");",
											"    let table_cash_flow = null;",
											"    let invoice_obj, invoice_date;",
											"    switch(testcase){",
											"        case 2:",
											"            table_cash_flow = jsData.data;",
											"            pm.test(\"Got table_cash_flow \", function () {",
											"                // sum_card_data.total_balance_amount",
											"                // dates_data",
											"                pm.environment.set(\"C-table_cash_flow\",table_cash_flow);",
											"                pm.expect(table_cash_flow != null).to.be.true;",
											"            });",
											"",
											"            // compare data chart & table",
											"            // console.log(\"chart_cash_flow: \" , chart_cash_flow);",
											"            // console.log(\"table_cash_flow: \" , table_cash_flow);",
											"",
											"            // credit_amount",
											"            pm.test(\"credit_amount must be \" + chart_cash_flow.sum_card_data.total_income, function () {",
											"                console.log(\"act: \" + jsData.data.sum_card_data.credit_amount);",
											"                pm.expect(chart_cash_flow.sum_card_data.total_income).to.eql(jsData.data.sum_card_data.credit_amount);",
											"            });",
											"",
											"            // debit_amount",
											"            pm.test(\"debit_amount must be \" + chart_cash_flow.sum_card_data.total_expense, function () {",
											"                console.log(\"act: \" + jsData.data.sum_card_data.debit_amount);",
											"                pm.expect(chart_cash_flow.sum_card_data.total_expense).to.eql(jsData.data.sum_card_data.debit_amount);",
											"            });",
											"",
											"            let month_obj = pm.environment.get(\"C-month_obj\");",
											"            // start_amount",
											"            pm.test(\"start_amount must be \" + month_obj.start_amount, function () {",
											"                console.log(\"act: \" + jsData.data.sum_card_data.start_amount);",
											"                pm.expect(month_obj.start_amount).to.eql(jsData.data.sum_card_data.start_amount);",
											"            });",
											"",
											"            // end_amount",
											"            pm.test(\"end_amount must be \" + month_obj.end_amount, function () {",
											"                console.log(\"act: \" + jsData.data.sum_card_data.end_amount);",
											"                pm.expect(month_obj.end_amount).to.eql(jsData.data.sum_card_data.end_amount);",
											"            });",
											"",
											"            postman.setNextRequest(\"\"); // get_receivable_invoice",
											"            break;",
											"        default:",
											"            console.log(\"Missing flow, end test\");",
											"            postman.setNextRequest(null);",
											"            break;",
											"    }",
											"} else {",
											"    console.log(\"Can't get table cash flow, end test\",jsData);",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let testcase = pm.environment.get(\"C-testcase\");",
											"console.log(\"Testcase: \" + testcase);",
											"",
											"let payload = {",
											"    \"business_id\": parseInt(pm.environment.get(\"C-business_id\")),",
											"    \"branch_id\":pm.environment.get(\"C-branch_id\"),",
											"    \"current_period_start\": pm.environment.get(\"C-current_period_start\"),",
											"    \"current_period_end\": pm.environment.get(\"C-current_period_end\")",
											"}",
											"",
											"console.log(\"payload: \",payload);",
											"pm.environment.set(\"C-payload\",JSON.stringify(payload));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "authorization",
										"value": "Bearer {{C-userToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{C-payload}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{finone_url}}/fo-ledger/api/v1/report/cash-flow-detail",
									"host": [
										"{{finone_url}}"
									],
									"path": [
										"fo-ledger",
										"api",
										"v1",
										"report",
										"cash-flow-detail"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "invoice_widget",
					"item": [
						{
							"name": "get_receivable_invoice",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let testcase = pm.environment.get(\"C-testcase\");",
											"console.log(\"Testcase: \" + testcase);",
											"",
											"let payload = {",
											"    \"account_key\": \"A3001\", // account_receivable => A3001, account_payable => B1001",
											"    // \"branch_id\": pm.environment.get(\"C-branch_id\"),",
											"    \"business_id\": parseInt(pm.environment.get(\"C-business_id\"))",
											"    //   \"current_period_end\": \"string\",",
											"    //   \"current_period_start\": \"string\",",
											"    // \"page\": 1,",
											"    // \"page_size\": 20,",
											"    //   \"period\": \"string\",  // old due_days",
											"    //   \"previous_period_end\": \"string\",",
											"    //   \"previous_period_start\": \"string\",",
											"    //   \"report_type\": \"string\",",
											"    // \"timezone\": \"UTC+07:00\"",
											"}",
											"",
											"console.log(\"payload: \",payload);",
											"pm.environment.set(\"C-payload\",JSON.stringify(payload));",
											"pm.environment.set(\"C-report_obj\",payload);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// ============================= get last day (Sun is end of Week)",
											"function getLastDayOfCurrentWeek() {",
											"    const now = new Date();",
											"    const lastDay = new Date(now);",
											"    const daysUntilSunday = 7 - now.getDay();  // if Saturday is end, change 7 => 6",
											"    lastDay.setDate(now.getDate() + daysUntilSunday);",
											"    return lastDay;",
											"}",
											"",
											"// ============================= get first day (Sun is end of Week)",
											"function getFirstDayOfCurrentWeek() {",
											"    const now = new Date();",
											"    const firstDay = new Date(now);",
											"    firstDay.setDate(now.getDate() - now.getDay() + 1);  // if Saturday is end, remove +1",
											"    return firstDay;",
											"}",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsData = pm.response.json();",
											"if(pm.response.code == 200){",
											"    let testcase = pm.environment.get(\"C-testcase\");",
											"    let unpaid_account_receivable = null;",
											"    try {",
											"        unpaid_account_receivable = jsData.data.unpaid_amount_lifetime_categories;",
											"    } catch {",
											"        console.log(\"Can't get data\");",
											"    }",
											"",
											"    switch(testcase){",
											"        case 2:",
											"            pm.test(\"Got unpaid_account_receivable data\", function () {",
											"                pm.environment.set(\"C-unpaid_account_receivable\",unpaid_account_receivable);",
											"                pm.expect(unpaid_account_receivable != null).to.be.true;",
											"            });",
											"            console.log(\"unpaid_account_receivable: \", unpaid_account_receivable);",
											"",
											"            postman.setNextRequest(\"get_receivable_customer\"); //get_receivable_customer",
											"            break;",
											"        case 4:",
											"            let old_data = pm.environment.get(\"C-unpaid_account_receivable\");",
											"",
											"            pm.test(\"Nothing happen!\", function () {",
											"                console.log(\"old: \", old_data);",
											"                console.log(\"new: \", unpaid_account_receivable);",
											"                pm.expect(JSON.stringify(unpaid_account_receivable) == JSON.stringify(old_data)).to.be.true;",
											"            });",
											"",
											"            // update new data",
											"            pm.environment.set(\"C-unpaid_account_receivable\",unpaid_account_receivable);",
											"",
											"            postman.setNextRequest(\"get_receivable_customer\"); // get_receivable_customer",
											"            break;",
											"        default:",
											"            console.log(\"Missing flow, end test\");",
											"            postman.setNextRequest(null);",
											"            break;",
											"    }",
											"} else {",
											"    console.log(\"Can't get report account receivable unpaid, end test\",jsData);",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{C-userToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{C-payload}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{finone_url}}/fo-order/api/v1/report/account-receivable-card-unpaid",
									"host": [
										"{{finone_url}}"
									],
									"path": [
										"fo-order",
										"api",
										"v1",
										"report",
										"account-receivable-card-unpaid"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_receivable_customer",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let testcase = pm.environment.get(\"C-testcase\");",
											"console.log(\"Testcase: \" + testcase);",
											"",
											"let page = pm.environment.get(\"C-page\");",
											"",
											"let page_size = 50;",
											"if(!page){",
											"    page = 1;",
											"    pm.environment.set(\"C-page\",page);",
											"    pm.environment.set(\"C-page_size\",page_size);",
											"}",
											"",
											"let payload = {",
											"    \"account_key\": \"A3001\",",
											"    // \"branch_id\": pm.environment.get(\"C-branch_id\"),",
											"    \"business_id\": parseInt(pm.environment.get(\"C-business_id\")),",
											"    \"page\": page,",
											"    \"page_size\": page_size",
											"}",
											"",
											"console.log(\"payload: \",payload);",
											"pm.environment.set(\"C-payload\",JSON.stringify(payload));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"let jsData = JSON.parse(responseBody);",
											"if(pm.response.code == 200){",
											"    let testcase = pm.environment.get(\"C-testcase\");",
											"    let total_pages = jsData.meta.total_pages;",
											"    let page = pm.environment.get(\"C-page\");",
											"",
											"    let list_report_customer, old_list_report_customer;",
											"    switch(testcase){",
											"        case 2:",
											"            list_report_customer = pm.environment.get(\"C-list_report_customer\");",
											"            if(!list_report_customer){",
											"                list_report_customer = [];",
											"            }",
											"            break;",
											"        case 4:",
											"            old_list_report_customer = pm.environment.get(\"C-old_list_report_customer\");",
											"            if(!old_list_report_customer){",
											"                old_list_report_customer = pm.environment.get(\"C-list_report_customer\");",
											"                pm.environment.unset(\"C-list_report_customer\");",
											"                pm.environment.set(\"C-old_list_report_customer\",old_list_report_customer);",
											"            }",
											"",
											"            list_report_customer = pm.environment.get(\"C-list_report_customer\");",
											"            if(!list_report_customer){",
											"                list_report_customer = [];",
											"            }",
											"            break;",
											"        default:",
											"            console.log(\"Missing flow\");",
											"            break;",
											"    }",
											"",
											"    for(let item in jsData.data){",
											"        list_report_customer[list_report_customer.length] = {",
											"            \"contact_id\":jsData.data[item].contact_id,",
											"            \"unpaid_total\":jsData.data[item].unpaid_total,",
											"            \"unpaid_due\":jsData.data[item].unpaid_due,",
											"            \"unpaid_overdue_less\":jsData.data[item].unpaid_overdue_less,",
											"            \"unpaid_overdue_between\":jsData.data[item].unpaid_overdue_between,",
											"            \"unpaid_overdue_over\":jsData.data[item].unpaid_overdue_over,",
											"            \"full_count\":jsData.data[item].full_count,",
											"            \"contact_name\":jsData.data[item].contact_info.contact_name,",
											"            \"contact_phone\":jsData.data[item].contact_info.contact_phone",
											"        }",
											"    }",
											"    pm.environment.set(\"C-list_report_customer\",list_report_customer);",
											"",
											"    if(page >= total_pages){",
											"        // must clear page & page_size",
											"        pm.environment.unset(\"C-page\");",
											"        pm.environment.unset(\"C-page_size\");",
											"",
											"        let contact_id = pm.environment.get(\"C-contact_id\");",
											"        let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
											"        let total_amount;",
											"        let isFound = false, hasRecord = false;",
											"        switch(testcase){",
											"            case 2:",
											"                pm.test(\"Got all record! \" + list_report_customer.length, function () {",
											"                    pm.expect(list_report_customer.length > 0).to.be.true;",
											"                });",
											"",
											"                postman.setNextRequest(\"get_payable_bill\"); // get_list_tnx, get_payable_bill",
											"                break;",
											"            case 4:",
											"                total_amount = tnx_obj.amount;",
											"                let record_obj = null;",
											"                let inList = false;",
											"                for(let i in old_list_report_customer){",
											"                    if(old_list_report_customer[i].contact_id == contact_id){",
											"                        inList = true;",
											"                        record_obj = old_list_report_customer[i];",
											"                        break;",
											"                    }",
											"                }",
											"",
											"                if(inList){",
											"                    pm.test(\"Nothing happen with total record\", function () {",
											"                        console.log(\"total old: \" + old_list_report_customer.length);",
											"                        console.log(\"total new: \" + list_report_customer.length);",
											"                        pm.expect(list_report_customer.length == old_list_report_customer.length).to.be.true;",
											"                    });",
											"                } else {",
											"                    pm.test(\"Total record increase 1\", function () {",
											"                        pm.expect(list_report_customer.length == old_list_report_customer.length + 1).to.be.true;",
											"                    });",
											"                    record_obj = {",
											"                        \"contact_id\":tnx_obj.contact_id,",
											"                        \"unpaid_total\":0,",
											"                        \"unpaid_due\":0,",
											"                        \"unpaid_overdue_less\":0,",
											"                        \"unpaid_overdue_between\":0,",
											"                        \"unpaid_overdue_over\":0,",
											"                        \"full_count\":0,",
											"                        \"contact_name\":null,",
											"                        \"contact_phone\":null",
											"                    }",
											"                }",
											"",
											"                // let due_type = pm.environment.get(\"C-due_type\");",
											"                // for(let i in list_report_customer){",
											"                //     if(list_report_customer[i].contact_id == contact_id){",
											"                //         isFound = true;",
											"                //         console.log(\"Found \" + list_report_customer[i].contact_name + ' - ' + list_report_customer[i].contact_phone);",
											"                        ",
											"                //         pm.test(\"unpaid_total increase \" + total_amount, function () {",
											"                //             console.log(\"old: \" + record_obj.unpaid_total);",
											"                //             console.log(\"expected: \" + (record_obj.unpaid_total + total_amount));",
											"                //             console.log(\"new: \" + list_report_customer[i].unpaid_total);",
											"                //             pm.expect(list_report_customer[i].unpaid_total.toFixed(2) == (record_obj.unpaid_total + total_amount).toFixed(2)).to.be.true;",
											"                //         });",
											"",
											"                //         switch(due_type){",
											"                //             case \"due\": case \"due_n_7d\":",
											"                //                 // unpaid_due",
											"                //                 pm.test(\"unpaid_due increase \" + total_amount, function () {",
											"                //                     console.log(\"old: \" + record_obj.unpaid_due);",
											"                //                     console.log(\"new: \" + list_report_customer[i].unpaid_due);",
											"                //                     pm.expect(list_report_customer[i].unpaid_due.toFixed(2) == (record_obj.unpaid_due + total_amount).toFixed(2)).to.be.true;",
											"                //                 });",
											"",
											"                //                 // unpaid_overdue_less",
											"                //                 pm.test(\"nothing happen unpaid_overdue_less\", function () {",
											"                //                     pm.expect(list_report_customer[i].unpaid_overdue_less == record_obj.unpaid_overdue_less).to.be.true;",
											"                //                 });",
											"",
											"                //                 // unpaid_overdue_between",
											"                //                 pm.test(\"nothing happen unpaid_overdue_between\", function () {",
											"                //                     pm.expect(list_report_customer[i].unpaid_overdue_between == record_obj.unpaid_overdue_between).to.be.true;",
											"                //                 });",
											"",
											"                //                 // unpaid_overdue_over",
											"                //                 pm.test(\"nothing happen unpaid_overdue_over\", function () {",
											"                //                     pm.expect(list_report_customer[i].unpaid_overdue_over == record_obj.unpaid_overdue_over).to.be.true;",
											"                //                 });",
											"                //                 break;",
											"                //             case \"overdue_less\":",
											"                //                 // unpaid_due",
											"                //                 pm.test(\"nothing happen unpaid_due\", function () {",
											"                //                     pm.expect(list_report_customer[i].unpaid_due == record_obj.unpaid_due).to.be.true;",
											"                //                 });",
											"",
											"                //                 // unpaid_overdue_less",
											"                //                 pm.test(\"unpaid_overdue_less increase \" + total_amount, function () {",
											"                //                     console.log(\"old: \" + record_obj.unpaid_overdue_less);",
											"                //                     console.log(\"new: \" + list_report_customer[i].unpaid_overdue_less);",
											"                //                     pm.expect(list_report_customer[i].unpaid_overdue_less.toFixed(2) == (total_amount + record_obj.unpaid_overdue_less).toFixed(2)).to.be.true;",
											"                //                 });",
											"",
											"                //                 // unpaid_overdue_between",
											"                //                 pm.test(\"nothing happen unpaid_overdue_between\", function () {",
											"                //                     pm.expect(list_report_customer[i].unpaid_overdue_between == record_obj.unpaid_overdue_between).to.be.true;",
											"                //                 });",
											"",
											"                //                 // unpaid_overdue_over",
											"                //                 pm.test(\"nothing happen unpaid_overdue_over\", function () {",
											"                //                     pm.expect(list_report_customer[i].unpaid_overdue_over == record_obj.unpaid_overdue_over).to.be.true;",
											"                //                 });",
											"                //                 break;",
											"                //             case \"overdue_between\":",
											"                //                 // unpaid_due",
											"                //                 pm.test(\"nothing happen unpaid_due\", function () {",
											"                //                     pm.expect(list_report_customer[i].unpaid_due == record_obj.unpaid_due).to.be.true;",
											"                //                 });",
											"",
											"                //                 // unpaid_overdue_less",
											"                //                 pm.test(\"nothing happen unpaid_overdue_less\", function () {",
											"                //                     pm.expect(list_report_customer[i].unpaid_overdue_less == record_obj.unpaid_overdue_less).to.be.true;",
											"                //                 });",
											"",
											"                //                 // unpaid_overdue_between",
											"                //                 pm.test(\"unpaid_overdue_between increase \" + total_amount, function () {",
											"                //                     console.log(\"old: \" + record_obj.unpaid_overdue_between);",
											"                //                     console.log(\"new: \" + list_report_customer[i].unpaid_overdue_between);",
											"                //                     pm.expect(list_report_customer[i].unpaid_overdue_between.toFixed(2) == (total_amount + record_obj.unpaid_overdue_between).toFixed(2)).to.be.true;",
											"                //                 });",
											"",
											"                //                 // unpaid_overdue_over",
											"                //                 pm.test(\"nothing happen unpaid_overdue_over\", function () {",
											"                //                     pm.expect(list_report_customer[i].unpaid_overdue_over == record_obj.unpaid_overdue_over).to.be.true;",
											"                //                 });",
											"                //                 break;",
											"                //             case \"overdue_over\":",
											"                //                 // unpaid_due",
											"                //                 pm.test(\"nothing happen unpaid_due\", function () {",
											"                //                     pm.expect(list_report_customer[i].unpaid_due == record_obj.unpaid_due).to.be.true;",
											"                //                 });",
											"",
											"                //                 // unpaid_overdue_less",
											"                //                 pm.test(\"nothing happen unpaid_overdue_less\", function () {",
											"                //                     pm.expect(list_report_customer[i].unpaid_overdue_less == record_obj.unpaid_overdue_less).to.be.true;",
											"                //                 });",
											"",
											"                //                 // unpaid_overdue_between",
											"                //                 pm.test(\"unpaid_overdue_between increase\", function () {",
											"                //                     pm.expect(list_report_customer[i].unpaid_overdue_between == record_obj.unpaid_overdue_between).to.be.true;",
											"                //                 });",
											"",
											"                //                 // unpaid_overdue_over",
											"                //                 pm.test(\"unpaid_overdue_over increase \" + total_amount, function () {",
											"                //                     console.log(\"old: \" + record_obj.unpaid_overdue_over);",
											"                //                     console.log(\"new: \" + list_report_customer[i].unpaid_overdue_over);",
											"                //                     pm.expect(list_report_customer[i].unpaid_overdue_over.toFixed(2) == (total_amount + record_obj.unpaid_overdue_over).toFixed(2)).to.be.true;",
											"                //                 });",
											"                //                 break;",
											"                //             default:",
											"                //                 // unpaid_due",
											"                //                 pm.test(\"nothing happen unpaid_due\", function () {",
											"                //                     pm.expect(list_report_customer[i].unpaid_due == record_obj.unpaid_due).to.be.true;",
											"                //                 });",
											"",
											"                //                 // unpaid_overdue_less",
											"                //                 pm.test(\"nothing happen unpaid_overdue_less\", function () {",
											"                //                     pm.expect(list_report_customer[i].unpaid_overdue_less == record_obj.unpaid_overdue_less).to.be.true;",
											"                //                 });",
											"",
											"                //                 // unpaid_overdue_between",
											"                //                 pm.test(\"nothing happen unpaid_overdue_between\", function () {",
											"                //                     pm.expect(list_report_customer[i].unpaid_overdue_between == record_obj.unpaid_overdue_between).to.be.true;",
											"                //                 });",
											"",
											"                //                 // unpaid_overdue_over",
											"                //                 pm.test(\"nothing happen unpaid_overdue_over\", function () {",
											"                //                     pm.expect(list_report_customer[i].unpaid_overdue_over == record_obj.unpaid_overdue_over).to.be.true;",
											"                //                 });",
											"                //                 break;",
											"                //         }",
											"                //         break;",
											"                //     }",
											"                // }",
											"                let new_record_obj = null;",
											"                for(let i in list_report_customer){",
											"                    if(list_report_customer[i].contact_id == contact_id){",
											"                        isFound = true;",
											"                        new_record_obj = list_report_customer[i];",
											"                        break;",
											"                    }",
											"                }",
											"",
											"                console.log(\"old: \" , record_obj);",
											"                console.log(\"new: \" , new_record_obj);",
											"",
											"                pm.test(\"Found customer \" + record_obj.contact_name, function () {",
											"                    pm.expect(isFound).to.be.true;",
											"                });",
											"",
											"                // clear old data to update at next case",
											"                pm.environment.unset(\"C-old_list_report_customer\");",
											"",
											"                postman.setNextRequest(\"get_payable_bill\"); // get_payable_bill",
											"                break;",
											"            default:",
											"                console.log(\"Missing flow, end test\");",
											"                postman.setNextRequest(null);",
											"                break;",
											"        }",
											"    } else {",
											"        page++;",
											"        pm.environment.set(\"C-page\",page);",
											"",
											"        console.log(\"view next page (\" + page + \") to get more product\");",
											"        postman.setNextRequest(\"get_report_account_receivable_customer\");",
											"    }",
											"} else {",
											"    console.log(\"Can't get list product, end test\",jsData);",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{C-userToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{C-payload}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{finone_url}}/fo-order/api/v1/report/account-receivable-customer-unpaid",
									"host": [
										"{{finone_url}}"
									],
									"path": [
										"fo-order",
										"api",
										"v1",
										"report",
										"account-receivable-customer-unpaid"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "bill_widget",
					"item": [
						{
							"name": "get_payable_bill",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let testcase = pm.environment.get(\"C-testcase\");",
											"console.log(\"Testcase: \" + testcase);",
											"",
											"let payload = {",
											"    \"account_key\": \"B1001\", // account_receivable => A3001, account_payable => B1001",
											"    // \"branch_id\": pm.environment.get(\"C-branch_id\"),",
											"    \"business_id\": parseInt(pm.environment.get(\"C-business_id\"))",
											"    //   \"current_period_end\": \"string\",",
											"    //   \"current_period_start\": \"string\",",
											"    // \"page\": 1,",
											"    // \"page_size\": 20,",
											"    //   \"period\": \"string\",  // old due_days",
											"    //   \"previous_period_end\": \"string\",",
											"    //   \"previous_period_start\": \"string\",",
											"    //   \"report_type\": \"string\",",
											"    // \"timezone\": \"UTC+07:00\"",
											"}",
											"",
											"console.log(\"payload: \",payload);",
											"pm.environment.set(\"C-payload\",JSON.stringify(payload));",
											"pm.environment.set(\"C-report_obj\",payload);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// ============================= get last day (Sun is end of Week)",
											"function getLastDayOfCurrentWeek() {",
											"    const now = new Date();",
											"    const lastDay = new Date(now);",
											"    const daysUntilSunday = 7 - now.getDay();  // if Saturday is end, change 7 => 6",
											"    lastDay.setDate(now.getDate() + daysUntilSunday);",
											"    return lastDay;",
											"}",
											"",
											"// ============================= get first day (Sun is end of Week)",
											"function getFirstDayOfCurrentWeek() {",
											"    const now = new Date();",
											"    const firstDay = new Date(now);",
											"    firstDay.setDate(now.getDate() - now.getDay() + 1);  // if Saturday is end, remove +1",
											"    return firstDay;",
											"}",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsData = pm.response.json();",
											"if(pm.response.code == 200){",
											"    let testcase = pm.environment.get(\"C-testcase\");",
											"    let unpaid_account_payable = null;",
											"    try {",
											"        unpaid_account_payable = jsData.data.unpaid_amount_lifetime_categories;",
											"    } catch {",
											"        console.log(\"Can't get data\");",
											"    }",
											"",
											"    switch(testcase){",
											"        case 2:",
											"            pm.test(\"Got unpaid_account_payable data\", function () {",
											"                pm.environment.set(\"C-unpaid_account_payable\",unpaid_account_payable);",
											"                pm.expect(unpaid_account_payable != null).to.be.true;",
											"            });",
											"            console.log(\"unpaid_account_payable: \", unpaid_account_payable);",
											"",
											"            postman.setNextRequest(\"get_payable_supplier\"); // get_payable_supplier",
											"            break;",
											"        case 4:",
											"            let old_data = pm.environment.get(\"C-unpaid_account_payable\");",
											"",
											"            pm.test(\"Nothing happen!!!\", function () {",
											"                console.log(\"old: \", old_data);",
											"                console.log(\"new: \", unpaid_account_payable);",
											"                pm.expect(JSON.stringify(unpaid_account_payable) == JSON.stringify(old_data)).to.be.true;",
											"            });",
											"",
											"            // update new data",
											"            // pm.environment.set(\"C-unpaid_account_payable\",unpaid_account_payable);",
											"",
											"            postman.setNextRequest(\"get_payable_supplier\"); // get_payable_supplier",
											"            break;",
											"        default:",
											"            console.log(\"Missing flow, end test\");",
											"            postman.setNextRequest(null);",
											"            break;",
											"    }",
											"} else {",
											"    console.log(\"Can't get report account receivable unpaid, end test\",jsData);",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{C-userToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{C-payload}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{finone_url}}/fo-order/api/v1/report/account-receivable-card-unpaid",
									"host": [
										"{{finone_url}}"
									],
									"path": [
										"fo-order",
										"api",
										"v1",
										"report",
										"account-receivable-card-unpaid"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_payable_supplier",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let testcase = pm.environment.get(\"C-testcase\");",
											"console.log(\"Testcase: \" + testcase);",
											"",
											"let page = pm.environment.get(\"C-page\");",
											"",
											"let page_size = 50;",
											"if(!page){",
											"    page = 1;",
											"    pm.environment.set(\"C-page\",page);",
											"    pm.environment.set(\"C-page_size\",page_size);",
											"}",
											"",
											"let payload = {",
											"    \"account_key\": \"B1001\",",
											"    // \"branch_id\": pm.environment.get(\"C-branch_id\"),",
											"    \"business_id\": parseInt(pm.environment.get(\"C-business_id\")),",
											"    \"page\": page,",
											"    \"page_size\": page_size",
											"}",
											"",
											"console.log(\"payload: \",payload);",
											"pm.environment.set(\"C-payload\",JSON.stringify(payload));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"let jsData = JSON.parse(responseBody);",
											"if(pm.response.code == 200){",
											"    let testcase = pm.environment.get(\"C-testcase\");",
											"    let total_pages = jsData.meta.total_pages;",
											"    let page = pm.environment.get(\"C-page\");",
											"",
											"    let list_report_supplier, old_list_report_supplier;",
											"    switch(testcase){",
											"        case 2:",
											"            list_report_supplier = pm.environment.get(\"C-list_report_supplier\");",
											"            if(!list_report_supplier){",
											"                list_report_supplier = [];",
											"            }",
											"            break;",
											"        case 4:",
											"            old_list_report_supplier = pm.environment.get(\"C-old_list_report_supplier\");",
											"            if(!old_list_report_supplier){",
											"                old_list_report_supplier = pm.environment.get(\"C-list_report_supplier\");",
											"                pm.environment.unset(\"C-list_report_supplier\");",
											"                pm.environment.set(\"C-old_list_report_supplier\",old_list_report_supplier);",
											"            }",
											"",
											"            list_report_supplier = pm.environment.get(\"C-list_report_supplier\");",
											"            if(!list_report_supplier){",
											"                list_report_supplier = [];",
											"            }",
											"            break;",
											"        default:",
											"            console.log(\"Missing flow\");",
											"            break;",
											"    }",
											"",
											"    for(let item in jsData.data){",
											"        list_report_supplier[list_report_supplier.length] = {",
											"            \"contact_id\":jsData.data[item].contact_id,",
											"            \"unpaid_total\":jsData.data[item].unpaid_total,",
											"            \"unpaid_due\":jsData.data[item].unpaid_due,",
											"            \"unpaid_overdue_less\":jsData.data[item].unpaid_overdue_less,",
											"            \"unpaid_overdue_between\":jsData.data[item].unpaid_overdue_between,",
											"            \"unpaid_overdue_over\":jsData.data[item].unpaid_overdue_over,",
											"            \"full_count\":jsData.data[item].full_count,",
											"            \"contact_name\":jsData.data[item].contact_info.contact_name,",
											"            \"contact_phone\":jsData.data[item].contact_info.contact_phone",
											"        }",
											"    }",
											"    pm.environment.set(\"C-list_report_supplier\",list_report_supplier);",
											"",
											"    if(page >= total_pages){",
											"        // must clear page & page_size",
											"        pm.environment.unset(\"C-page\");",
											"        pm.environment.unset(\"C-page_size\");",
											"",
											"        let contact_id = pm.environment.get(\"C-contact_id\");",
											"        let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
											"        let total_amount;",
											"        let isFound = false, hasRecord = false;",
											"        switch(testcase){",
											"            case 2:",
											"                pm.test(\"Got all record! \" + list_report_supplier.length, function () {",
											"                    pm.expect(list_report_supplier.length > 0).to.be.true;",
											"                });",
											"",
											"                postman.setNextRequest(\"get_profit_n_loss\"); // get_profit_n_loss",
											"                break;",
											"            case 4:",
											"                total_amount = tnx_obj.amount;",
											"                let record_obj = null;",
											"                let inList = false;",
											"                for(let i in old_list_report_supplier){",
											"                    if(old_list_report_supplier[i].contact_id == contact_id){",
											"                        inList = true;",
											"                        record_obj = old_list_report_supplier[i];",
											"                        break;",
											"                    }",
											"                }",
											"",
											"                if(inList){",
											"                    pm.test(\"Nothing happen with total record\", function () {",
											"                        pm.expect(list_report_supplier.length == old_list_report_supplier.length).to.be.true;",
											"                    });",
											"                } else {",
											"                    pm.test(\"Total record increase 1\", function () {",
											"                        pm.expect(list_report_supplier.length == old_list_report_supplier.length + 1).to.be.true;",
											"                    });",
											"                    record_obj = {",
											"                        \"contact_id\":tnx_obj.contact_id,",
											"                        \"unpaid_total\":0,",
											"                        \"unpaid_due\":0,",
											"                        \"unpaid_overdue_less\":0,",
											"                        \"unpaid_overdue_between\":0,",
											"                        \"unpaid_overdue_over\":0,",
											"                        \"full_count\":0,",
											"                        \"contact_name\":null,",
											"                        \"contact_phone\":null",
											"                    }",
											"                }",
											"",
											"                // let due_type = pm.environment.get(\"C-due_type\");",
											"                // for(let i in list_report_supplier){",
											"                //     if(list_report_supplier[i].contact_id == contact_id){",
											"                //         isFound = true;",
											"                //         console.log(\"Found \" + list_report_supplier[i].contact_name + ' - ' + list_report_supplier[i].contact_phone);",
											"                        ",
											"                //         pm.test(\"unpaid_total increase \" + total_amount, function () {",
											"                //             console.log(\"old: \" + record_obj.unpaid_total);",
											"                //             console.log(\"expected: \" + (record_obj.unpaid_total + total_amount));",
											"                //             console.log(\"new: \" + list_report_supplier[i].unpaid_total);",
											"                //             pm.expect(list_report_supplier[i].unpaid_total.toFixed(2) == (record_obj.unpaid_total + total_amount).toFixed(2)).to.be.true;",
											"                //         });",
											"",
											"                //         switch(due_type){",
											"                //             case \"due\": case \"due_n_7d\":",
											"                //                 // unpaid_due",
											"                //                 pm.test(\"unpaid_due increase \" + total_amount, function () {",
											"                //                     console.log(\"old: \" + record_obj.unpaid_due);",
											"                //                     console.log(\"new: \" + list_report_supplier[i].unpaid_due);",
											"                //                     pm.expect(list_report_supplier[i].unpaid_due.toFixed(2) == (record_obj.unpaid_due + total_amount).toFixed(2)).to.be.true;",
											"                //                 });",
											"",
											"                //                 // unpaid_overdue_less",
											"                //                 pm.test(\"nothing happen unpaid_overdue_less\", function () {",
											"                //                     pm.expect(list_report_supplier[i].unpaid_overdue_less == record_obj.unpaid_overdue_less).to.be.true;",
											"                //                 });",
											"",
											"                //                 // unpaid_overdue_between",
											"                //                 pm.test(\"nothing happen unpaid_overdue_between\", function () {",
											"                //                     pm.expect(list_report_supplier[i].unpaid_overdue_between == record_obj.unpaid_overdue_between).to.be.true;",
											"                //                 });",
											"",
											"                //                 // unpaid_overdue_over",
											"                //                 pm.test(\"nothing happen unpaid_overdue_over\", function () {",
											"                //                     pm.expect(list_report_supplier[i].unpaid_overdue_over == record_obj.unpaid_overdue_over).to.be.true;",
											"                //                 });",
											"                //                 break;",
											"                //             case \"overdue_less\":",
											"                //                 // unpaid_due",
											"                //                 pm.test(\"nothing happen unpaid_due\", function () {",
											"                //                     pm.expect(list_report_supplier[i].unpaid_due == record_obj.unpaid_due).to.be.true;",
											"                //                 });",
											"",
											"                //                 // unpaid_overdue_less",
											"                //                 pm.test(\"unpaid_overdue_less increase \" + total_amount, function () {",
											"                //                     console.log(\"old: \" + record_obj.unpaid_overdue_less);",
											"                //                     console.log(\"new: \" + list_report_supplier[i].unpaid_overdue_less);",
											"                //                     pm.expect(list_report_supplier[i].unpaid_overdue_less.toFixed(2) == (total_amount + record_obj.unpaid_overdue_less).toFixed(2)).to.be.true;",
											"                //                 });",
											"",
											"                //                 // unpaid_overdue_between",
											"                //                 pm.test(\"nothing happen unpaid_overdue_between\", function () {",
											"                //                     pm.expect(list_report_supplier[i].unpaid_overdue_between == record_obj.unpaid_overdue_between).to.be.true;",
											"                //                 });",
											"",
											"                //                 // unpaid_overdue_over",
											"                //                 pm.test(\"nothing happen unpaid_overdue_over\", function () {",
											"                //                     pm.expect(list_report_supplier[i].unpaid_overdue_over == record_obj.unpaid_overdue_over).to.be.true;",
											"                //                 });",
											"                //                 break;",
											"                //             case \"overdue_between\":",
											"                //                 // unpaid_due",
											"                //                 pm.test(\"nothing happen unpaid_due\", function () {",
											"                //                     pm.expect(list_report_supplier[i].unpaid_due == record_obj.unpaid_due).to.be.true;",
											"                //                 });",
											"",
											"                //                 // unpaid_overdue_less",
											"                //                 pm.test(\"nothing happen unpaid_overdue_less\", function () {",
											"                //                     pm.expect(list_report_supplier[i].unpaid_overdue_less == record_obj.unpaid_overdue_less).to.be.true;",
											"                //                 });",
											"",
											"                //                 // unpaid_overdue_between",
											"                //                 pm.test(\"unpaid_overdue_between increase \" + total_amount, function () {",
											"                //                     console.log(\"old: \" + record_obj.unpaid_overdue_between);",
											"                //                     console.log(\"new: \" + list_report_supplier[i].unpaid_overdue_between);",
											"                //                     pm.expect(list_report_supplier[i].unpaid_overdue_between.toFixed(2) == (total_amount + record_obj.unpaid_overdue_between).toFixed(2)).to.be.true;",
											"                //                 });",
											"",
											"                //                 // unpaid_overdue_over",
											"                //                 pm.test(\"nothing happen unpaid_overdue_over\", function () {",
											"                //                     pm.expect(list_report_supplier[i].unpaid_overdue_over == record_obj.unpaid_overdue_over).to.be.true;",
											"                //                 });",
											"                //                 break;",
											"                //             case \"overdue_over\":",
											"                //                 // unpaid_due",
											"                //                 pm.test(\"nothing happen unpaid_due\", function () {",
											"                //                     pm.expect(list_report_supplier[i].unpaid_due == record_obj.unpaid_due).to.be.true;",
											"                //                 });",
											"",
											"                //                 // unpaid_overdue_less",
											"                //                 pm.test(\"nothing happen unpaid_overdue_less\", function () {",
											"                //                     pm.expect(list_report_supplier[i].unpaid_overdue_less == record_obj.unpaid_overdue_less).to.be.true;",
											"                //                 });",
											"",
											"                //                 // unpaid_overdue_between",
											"                //                 pm.test(\"unpaid_overdue_between increase\", function () {",
											"                //                     pm.expect(list_report_supplier[i].unpaid_overdue_between == record_obj.unpaid_overdue_between).to.be.true;",
											"                //                 });",
											"",
											"                //                 // unpaid_overdue_over",
											"                //                 pm.test(\"unpaid_overdue_over increase \" + total_amount, function () {",
											"                //                     console.log(\"old: \" + record_obj.unpaid_overdue_over);",
											"                //                     console.log(\"new: \" + list_report_supplier[i].unpaid_overdue_over);",
											"                //                     pm.expect(list_report_supplier[i].unpaid_overdue_over.toFixed(2) == (total_amount + record_obj.unpaid_overdue_over).toFixed(2)).to.be.true;",
											"                //                 });",
											"                //                 break;",
											"                //             default:",
											"                //                 // unpaid_due",
											"                //                 pm.test(\"nothing happen unpaid_due\", function () {",
											"                //                     pm.expect(list_report_supplier[i].unpaid_due == record_obj.unpaid_due).to.be.true;",
											"                //                 });",
											"",
											"                //                 // unpaid_overdue_less",
											"                //                 pm.test(\"nothing happen unpaid_overdue_less\", function () {",
											"                //                     pm.expect(list_report_supplier[i].unpaid_overdue_less == record_obj.unpaid_overdue_less).to.be.true;",
											"                //                 });",
											"",
											"                //                 // unpaid_overdue_between",
											"                //                 pm.test(\"nothing happen unpaid_overdue_between\", function () {",
											"                //                     pm.expect(list_report_supplier[i].unpaid_overdue_between == record_obj.unpaid_overdue_between).to.be.true;",
											"                //                 });",
											"",
											"                //                 // unpaid_overdue_over",
											"                //                 pm.test(\"nothing happen unpaid_overdue_over\", function () {",
											"                //                     pm.expect(list_report_supplier[i].unpaid_overdue_over == record_obj.unpaid_overdue_over).to.be.true;",
											"                //                 });",
											"                //                 break;",
											"                //         }",
											"                //         break;",
											"                //     }",
											"                // }",
											"",
											"                let new_record_obj = null;",
											"                for(let i in list_report_supplier){",
											"                    if(list_report_supplier[i].contact_id == contact_id){",
											"                        isFound = true;",
											"                        new_record_obj = list_report_supplier[i];",
											"                        break;",
											"                    }",
											"                }",
											"",
											"                console.log(\"old: \" , record_obj);",
											"                console.log(\"new: \" , new_record_obj);",
											"",
											"                pm.test(\"Found supplier \" + record_obj.contact_name, function () {",
											"                    pm.expect(isFound).to.be.true;",
											"                });",
											"",
											"                // clear old data to update at next case",
											"                pm.environment.unset(\"C-old_list_report_supplier\");",
											"",
											"                postman.setNextRequest(\"get_profit_n_loss\"); // get_profit_n_loss",
											"                break;",
											"            default:",
											"                console.log(\"Missing flow, end test\");",
											"                postman.setNextRequest(null);",
											"                break;",
											"        }",
											"    } else {",
											"        page++;",
											"        pm.environment.set(\"C-page\",page);",
											"",
											"        console.log(\"view next page (\" + page + \") to get more product\");",
											"        postman.setNextRequest(\"get_report_account_receivable_customer\");",
											"    }",
											"} else {",
											"    console.log(\"Can't get list product, end test\",jsData);",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{C-userToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{C-payload}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{finone_url}}/fo-order/api/v1/report/account-receivable-customer-unpaid",
									"host": [
										"{{finone_url}}"
									],
									"path": [
										"fo-order",
										"api",
										"v1",
										"report",
										"account-receivable-customer-unpaid"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "P_n_L",
					"item": [
						{
							"name": "get_profit_n_loss",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let testcase = pm.environment.get(\"C-testcase\");",
											"console.log(\"Testcase: \" + testcase);",
											"",
											"let payload;",
											"switch(testcase){",
											"    case 2:",
											"        let is_get_last = pm.environment.get(\"C-is_get_last\");",
											"        if(!is_get_last){",
											"            is_get_last = false;",
											"            pm.environment.set(\"C-is_get_last\",is_get_last);",
											"            ",
											"            payload = {",
											"                \"business_id\": parseInt(pm.environment.get(\"C-business_id\")),",
											"                \"current_period_start\": pm.environment.get(\"C-previous_period_start\"), // current_period_start, previous_period_start 71069217",
											"                \"current_period_end\": pm.environment.get(\"C-previous_period_end\") // current_period_end, previous_period_end",
											"            }",
											"        } else {",
											"            payload = {",
											"                \"business_id\": parseInt(pm.environment.get(\"C-business_id\")),",
											"                \"current_period_start\": pm.environment.get(\"C-current_period_start\"), // current_period_start, previous_period_start 71069217",
											"                \"current_period_end\": pm.environment.get(\"C-current_period_end\") // current_period_end, previous_period_end",
											"            }",
											"        }",
											"        break;",
											"    case 4:",
											"        payload = {",
											"            \"business_id\": parseInt(pm.environment.get(\"C-business_id\")),",
											"            \"current_period_start\": pm.environment.get(\"C-current_period_start\"), // current_period_start, previous_period_start 71069217",
											"            \"current_period_end\": pm.environment.get(\"C-current_period_end\") // current_period_end, previous_period_end",
											"        }",
											"        break;",
											"    default:",
											"        console.log(\"Missing flow\");",
											"}",
											"",
											"console.log(\"payload: \",payload);",
											"pm.environment.set(\"C-payload\",JSON.stringify(payload));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// ============================= getFirstDayOfMonth",
											"function getFirstDayOfMonth(date_timestamp){",
											"  let setDate = new Date(date_timestamp*1000);",
											"  let getDate = new Date(setDate.getFullYear(), setDate.getMonth(), 1);",
											"  return getDate.toISOString();",
											"}",
											"",
											"// ============================= getLastDayOfMonth",
											"function getLastDayOfMonth(date_timestamp){",
											"  let setDate = new Date(date_timestamp*1000);",
											"  let firstDayOfNextMonth = new Date(setDate.getFullYear(), setDate.getMonth() + 1, 1);",
											"  let lastDayOfMonth = new Date(firstDayOfNextMonth - 1);",
											"  return lastDayOfMonth.toISOString();",
											"}",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsData = pm.response.json();",
											"if(pm.response.code == 200){",
											"    let testcase = pm.environment.get(\"C-testcase\");",
											"",
											"    let profit_n_loss_app = null;",
											"    let profit_n_loss_app_last_month;",
											"    switch(testcase){",
											"        case 2:",
											"            let is_get_last = pm.environment.get(\"C-is_get_last\");",
											"",
											"            if(!is_get_last){",
											"                is_get_last = true;",
											"                pm.environment.set(\"C-is_get_last\",is_get_last);",
											"",
											"                profit_n_loss_app_last_month = jsData.data.sum_card_data;",
											"                pm.environment.set(\"C-profit_n_loss_app_last_month\",profit_n_loss_app_last_month);",
											"",
											"                postman.setNextRequest(\"get_profit_n_loss\");",
											"            } else {",
											"                pm.environment.unset(\"C-is_get_last\");",
											"",
											"                profit_n_loss_app = jsData.data.sum_card_data; // chỉ check phần summary",
											"                pm.test(\"Got profit_n_loss_app \", function () {",
											"                    // sum_card_data.total_balance_amount",
											"                    // dates_data",
											"                    pm.environment.set(\"C-profit_n_loss_app\",profit_n_loss_app);",
											"                    pm.expect(profit_n_loss_app != null).to.be.true;",
											"                });",
											"                console.log(\"profit_n_loss_app: \" , profit_n_loss_app);",
											"",
											"                // check data chart & table",
											"                let sum_table = {",
											"                    \"total_profit\":0,",
											"                    \"total_income\":0,",
											"                    \"total_expense\":0,",
											"                    \"total_gap\":0",
											"                }",
											"                // let pnl_month_obj = {",
											"                //     \"start_amount\":0,",
											"                //     \"end_amount\":0",
											"                // }",
											"                for(let i in jsData.data.dates_data){",
											"                    sum_table.total_profit += jsData.data.dates_data[i].gap;",
											"                    sum_table.total_income += jsData.data.dates_data[i].income;",
											"                    sum_table.total_expense += jsData.data.dates_data[i].expense;",
											"",
											"                //     // gap =  income - expense",
											"                //     pm.test(\"Date: \" + jsData.data.dates_data[i].date + \"- gap must be \" + (jsData.data.dates_data[i].income - jsData.data.dates_data[i].expense), function () {",
											"                //         // console.log(\"act gap: \" + jsData.data.dates_data[i].gap);",
											"                //         pm.expect(jsData.data.dates_data[i].gap).to.eql(jsData.data.dates_data[i].income - jsData.data.dates_data[i].expense);",
											"                //     });",
											"                }",
											"",
											"                // // total_profit",
											"                // pm.test(\"total_profit must be \" + sum_table.total_profit, function () {",
											"                //     pm.expect(jsData.data.sum_card_data.total_profit).to.eql(sum_table.total_profit);",
											"                // });",
											"",
											"                // total_income",
											"                pm.test(\"total_income must be \" + sum_table.total_income, function () {",
											"                    pm.expect(jsData.data.sum_card_data.total_income).to.eql(sum_table.total_income);",
											"                });",
											"",
											"                // total_expense",
											"                pm.test(\"total_expense must be \" + sum_table.total_expense, function () {",
											"                    pm.expect(jsData.data.sum_card_data.total_expense).to.eql(sum_table.total_expense);",
											"                });",
											"",
											"                // total_gap = last_month.total_profit",
											"                profit_n_loss_app_last_month = pm.environment.get(\"C-profit_n_loss_app_last_month\");",
											"                pm.test(\"total_gap must be \" + profit_n_loss_app_last_month.total_profit, function () {",
											"                    pm.expect(jsData.data.sum_card_data.total_gap).to.eql(profit_n_loss_app_last_month.total_profit);",
											"                });",
											"",
											"                // pm.environment.set(\"C-month_obj\",month_obj);",
											"                postman.setNextRequest(\"get_profit_chart\"); // get_profit_chart",
											"            }",
											"            break;",
											"        case 4:",
											"            let old_profit_n_loss_app = pm.environment.get(\"C-profit_n_loss_app\");",
											"            profit_n_loss_app = jsData.data.sum_card_data;",
											"            console.log(\"old: \", old_profit_n_loss_app);",
											"            console.log(\"new: \", profit_n_loss_app);",
											"",
											"            let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
											"            tnx_obj = pm.environment.get(\"C-tnx_obj\");",
											"            tnx_date = tnx_obj.value_at;",
											"            console.log(\"tnx_date: \" + tnx_date);",
											"",
											"            // do thời gian lọc là tháng hiện tại => chỉ thay đổi khi value_at nằm trong tháng hiện tại",
											"            let today = new Date();",
											"            let today_tmp = Math.floor(today.getTime()/1000);",
											"            let firstDayOfThisMonth = getFirstDayOfMonth(today_tmp);",
											"            let lastDayOfThisMonth = getLastDayOfMonth(today_tmp);",
											"            if(tnx_date < firstDayOfThisMonth || tnx_date > lastDayOfThisMonth){",
											"                // nothing happen",
											"                pm.test(\"Nothing happen!!!\", function () {",
											"                    pm.expect(JSON.stringify(profit_n_loss_app) == JSON.stringify(old_profit_n_loss_app)).to.be.true;",
											"                });",
											"            } else {",
											"                tnx_date = tnx_date.substring(0,10);",
											"",
											"                let exp_change = tnx_obj.amount;",
											"                // có thay đổi => total_income increase",
											"                if(tnx_obj.txn_type == \"in\"){",
											"                    // total_income",
											"                    pm.test(\"total_income increase \" + exp_change, function () {",
											"                        console.log(\"expected: \" + (old_profit_n_loss_app.total_income + exp_change));",
											"                        pm.expect(profit_n_loss_app.total_income == old_profit_n_loss_app.total_income + exp_change).to.be.true;",
											"                    });",
											"",
											"                    // total_profit",
											"                    pm.test(\"total_profit increase \" + exp_change, function () {",
											"                        pm.expect(profit_n_loss_app.total_profit == old_profit_n_loss_app.total_profit + exp_change).to.be.true;",
											"                    });",
											"",
											"                    // thay đổi ngày tương ứng",
											"                    // let old_date = null, act_date = null;",
											"                    // for(let i in profit_n_loss_app.dates_data){",
											"                    //     let day_i = profit_n_loss_app.dates_data[i].date.substring(0,10);",
											"                    //     if(day_i == tnx_date){",
											"                    //         act_date = profit_n_loss_app.dates_data[i];",
											"                    //         break;",
											"                    //     }",
											"                    // }",
											"",
											"                    // for(let i in old_profit_n_loss_app.dates_data){",
											"                    //     let day_i = old_profit_n_loss_app.dates_data[i].date.substring(0,10);",
											"                    //     if(day_i == tnx_date){",
											"                    //         old_date = old_profit_n_loss_app.dates_data[i];",
											"                    //         break;",
											"                    //     }",
											"                    // }",
											"",
											"                    // if(old_date != null && act_date != null){",
											"                    //     console.log(\"act_date: \",act_date);",
											"                    //     console.log(\"old_date: \",old_date);",
											"                    //     // income",
											"                    //     pm.test(\"income at \" + tnx_date + \" increase \" + exp_change, function () {",
											"                    //         pm.expect(act_date.income == old_date.income + exp_change).to.be.true;",
											"                    //     });",
											"                    //     // gap",
											"                    //     pm.test(\"gap at \" + tnx_date + \" increase \" + exp_change, function () {",
											"                    //         pm.expect(act_date.gap == old_date.gap + exp_change).to.be.true;",
											"                    //     });",
											"                    // }",
											"                } else {",
											"                    // total_expense",
											"                    pm.test(\"total_expense increase \" + exp_change, function () {",
											"                        pm.expect(profit_n_loss_app.total_expense == old_profit_n_loss_app.total_expense + exp_change).to.be.true;",
											"                    });",
											"",
											"                    // total_profit",
											"                    pm.test(\"total_profit decrease \" + exp_change, function () {",
											"                        pm.expect(profit_n_loss_app.total_profit == old_profit_n_loss_app.total_profit - exp_change).to.be.true;",
											"                    });",
											"",
											"                    // // thay đổi ngày tương ứng",
											"                    // let old_date = null, act_date = null;",
											"                    // for(let i in profit_n_loss_app.dates_data){",
											"                    //     let day_i = profit_n_loss_app.dates_data[i].date.substring(0,10);",
											"                    //     if(day_i == tnx_date){",
											"                    //         act_date = profit_n_loss_app.dates_data[i];",
											"                    //         break;",
											"                    //     }",
											"                    // }",
											"",
											"                    // for(let i in old_profit_n_loss_app.dates_data){",
											"                    //     let day_i = old_profit_n_loss_app.dates_data[i].date.substring(0,10);",
											"                    //     if(day_i == tnx_date){",
											"                    //         old_date = old_profit_n_loss_app.dates_data[i];",
											"                    //         break;",
											"                    //     }",
											"                    // }",
											"",
											"                    // if(old_date != null && act_date != null){",
											"                    //     console.log(\"act_date: \",act_date);",
											"                    //     console.log(\"old_date: \",old_date);",
											"                    //     // expense",
											"                    //     pm.test(\"expense at \" + tnx_date + \" increase \" + exp_change, function () {",
											"                    //         pm.expect(act_date.expense == old_date.expense + exp_change).to.be.true;",
											"                    //     });",
											"                    //     // gap",
											"                    //     pm.test(\"gap at \" + tnx_date + \" decrease \" + exp_change, function () {",
											"                    //         pm.expect(act_date.gap == old_date.gap - exp_change).to.be.true;",
											"                    //     });",
											"                    // }",
											"                }",
											"            }",
											"",
											"            postman.setNextRequest(\"get_profit_chart\"); // get_profit_chart",
											"            break;",
											"        default:",
											"            console.log(\"Missing flow, end test\");",
											"            postman.setNextRequest(null);",
											"            break;",
											"    }",
											"} else {",
											"    console.log(\"Can't get profit and loss on app, end test\",jsData);",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "authorization",
										"value": "Bearer {{C-userToken}}",
										"type": "text"
									},
									{
										"key": "x-location-timezone",
										"value": "Asia/Saigon",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{C-payload}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{finone_url}}/fo-ledger/api/v1/report/chart-profit-loss-detail",
									"host": [
										"{{finone_url}}"
									],
									"path": [
										"fo-ledger",
										"api",
										"v1",
										"report",
										"chart-profit-loss-detail"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_profit_n_loss_branch",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let testcase = pm.environment.get(\"C-testcase\");",
											"console.log(\"Testcase: \" + testcase);",
											"",
											"let payload = {",
											"    \"business_id\": parseInt(pm.environment.get(\"C-business_id\")),",
											"    \"branch_id\": pm.environment.get(\"C-branch_id\"),",
											"    \"current_period_start\": pm.environment.get(\"C-current_period_start\"),",
											"    \"current_period_end\": pm.environment.get(\"C-current_period_end\")",
											"}",
											"",
											"console.log(\"payload: \",payload);",
											"pm.environment.set(\"C-payload\",JSON.stringify(payload));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsData = pm.response.json();",
											"if(pm.response.code == 200){",
											"    let testcase = pm.environment.get(\"C-testcase\");",
											"",
											"    let profit_n_loss_app = null;",
											"    let invoice_obj, invoice_date;",
											"    switch(testcase){",
											"        case 2:",
											"            profit_n_loss_app = jsData.data.sum_card_data; // chỉ check phần summary",
											"            pm.test(\"Got profit_n_loss_app \", function () {",
											"                // sum_card_data.total_balance_amount",
											"                // dates_data",
											"                pm.environment.set(\"C-profit_n_loss_app\",profit_n_loss_app);",
											"                pm.expect(profit_n_loss_app != null).to.be.true;",
											"            });",
											"            console.log(\"profit_n_loss_app: \" , profit_n_loss_app);",
											"",
											"            postman.setNextRequest(\"get_profit_chart\"); // get_profit_chart",
											"            break;",
											"        default:",
											"            console.log(\"Missing flow, end test\");",
											"            postman.setNextRequest(null);",
											"            break;",
											"    }",
											"} else {",
											"    console.log(\"Can't get profit and loss on app, end test\",jsData);",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "authorization",
										"value": "Bearer {{C-userToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{C-payload}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{finone_url}}/fo-ledger/api/v1/report/chart-profit-loss-detail",
									"host": [
										"{{finone_url}}"
									],
									"path": [
										"fo-ledger",
										"api",
										"v1",
										"report",
										"chart-profit-loss-detail"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "sales",
					"item": [
						{
							"name": "get_profit_chart",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let testcase = pm.environment.get(\"C-testcase\");",
											"console.log(\"Testcase: \" + testcase);",
											"",
											"let payload;",
											"switch(testcase){",
											"    case 2:",
											"        let is_get_last = pm.environment.get(\"C-is_get_last\");",
											"        if(!is_get_last){",
											"            is_get_last = false;",
											"            pm.environment.set(\"C-is_get_last\",is_get_last);",
											"            ",
											"            payload = {",
											"                \"business_id\": parseInt(pm.environment.get(\"C-business_id\")),",
											"                \"period\": \"last_month\",",
											"                \"report_type\": \"profit\" // expense, profit",
											"            }",
											"        } else {",
											"            payload = {",
											"                \"business_id\": parseInt(pm.environment.get(\"C-business_id\")),",
											"                \"period\": \"month\",",
											"                \"report_type\": \"profit\" // expense, profit",
											"            }",
											"        }",
											"        break;",
											"    case 4:",
											"        payload = {",
											"            \"business_id\": parseInt(pm.environment.get(\"C-business_id\")),",
											"            \"period\": \"month\",",
											"            \"report_type\": \"profit\" // expense, profit",
											"        }",
											"        break;",
											"    default:",
											"        console.log(\"Missing flow\");",
											"}",
											"",
											"console.log(\"payload: \",payload);",
											"pm.environment.set(\"C-payload\",JSON.stringify(payload));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// ============================= getFirstDayOfMonth",
											"function getFirstDayOfMonth(date_timestamp){",
											"  let setDate = new Date(date_timestamp*1000);",
											"  let getDate = new Date(setDate.getFullYear(), setDate.getMonth(), 1);",
											"  return getDate.toISOString();",
											"}",
											"",
											"// ============================= getLastDayOfMonth",
											"function getLastDayOfMonth(date_timestamp){",
											"  let setDate = new Date(date_timestamp*1000);",
											"  let firstDayOfNextMonth = new Date(setDate.getFullYear(), setDate.getMonth() + 1, 1);",
											"  let lastDayOfMonth = new Date(firstDayOfNextMonth - 1);",
											"  return lastDayOfMonth.toISOString();",
											"}",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsData = pm.response.json();",
											"if(pm.response.code == 200){",
											"    let testcase = pm.environment.get(\"C-testcase\");",
											"",
											"    let profit_period = null;",
											"    try {",
											"        profit_period = jsData.data;",
											"        /**",
											"         * period: week, month, year",
											"         * sum_card_data",
											"         * dates_data",
											"         */",
											"    } catch {",
											"        console.log(\"Can't get report cash_flow data\");",
											"    }",
											"",
											"    let tnx_obj, tnx_date;",
											"    switch(testcase){",
											"        case 2:",
											"            let is_get_last = pm.environment.get(\"C-is_get_last\");",
											"",
											"            if(!is_get_last){",
											"                is_get_last = true;",
											"                pm.environment.set(\"C-is_get_last\",is_get_last);",
											"",
											"                profit_period_last_month = jsData.data;",
											"                pm.environment.set(\"C-profit_period_last_month\",profit_period_last_month);",
											"",
											"                postman.setNextRequest(\"get_profit_chart\");",
											"            } else {",
											"                pm.environment.unset(\"C-is_get_last\");",
											"",
											"                profit_period = jsData.data;",
											"                pm.test(\"Got profit_period \", function () {",
											"                    // sum_card_data.total_balance_amount",
											"                    // dates_data",
											"                    pm.environment.set(\"C-profit_period\",profit_period);",
											"                    pm.expect(profit_period != null).to.be.true;",
											"                });",
											"                // console.log(\"profit_period: \" , profit_period);",
											"",
											"                // check data chart & table",
											"                let sum_table = {",
											"                    \"total_income\":0,",
											"                    \"total_expense\":0,",
											"                    \"total_gap\":0,",
											"                    \"total_profit\":0",
											"                }",
											"                // let pnl_month_obj = {",
											"                //     \"start_amount\":0,",
											"                //     \"end_amount\":0",
											"                // }",
											"                for(let i in jsData.data.dates_data){",
											"                    sum_table.total_income += jsData.data.dates_data[i].income;",
											"                    sum_table.total_expense += jsData.data.dates_data[i].expense;",
											"                    sum_table.total_gap += jsData.data.dates_data[i].gap;",
											"                    sum_table.total_profit += jsData.data.dates_data[i].profit;",
											"",
											"                    // previous_profit =  last_month.profit",
											"                    pm.test(\"Date: \" + jsData.data.dates_data[i].date + \"- previous_profit must be \" + profit_period_last_month.dates_data[i].profit, function () {",
											"                        // console.log(\"act gap: \" + jsData.data.dates_data[i].gap);",
											"                        pm.expect(jsData.data.dates_data[i].previous_profit).to.eql(profit_period_last_month.dates_data[i].profit);",
											"                    });",
											"",
											"                    // gap",
											"                    pm.test(\"--- gap must be \" + (jsData.data.dates_data[i].income - jsData.data.dates_data[i].expense), function () {",
											"                        // console.log(\"act gap: \" + jsData.data.dates_data[i].gap);",
											"                        pm.expect(jsData.data.dates_data[i].gap).to.eql(jsData.data.dates_data[i].income - jsData.data.dates_data[i].expense);",
											"                    });",
											"",
											"                    // profit",
											"                }",
											"",
											"                // total_profit",
											"                pm.test(\"total_profit must be \" + sum_table.total_profit, function () {",
											"                    pm.expect(jsData.data.sum_card_data.total_profit).to.eql(sum_table.total_profit);",
											"                });",
											"",
											"                // total_income",
											"                pm.test(\"total_income must be \" + sum_table.total_income, function () {",
											"                    pm.expect(jsData.data.sum_card_data.total_income).to.eql(sum_table.total_income);",
											"                });",
											"",
											"                // total_expense",
											"                pm.test(\"total_expense must be \" + sum_table.total_expense, function () {",
											"                    pm.expect(jsData.data.sum_card_data.total_expense).to.eql(sum_table.total_expense);",
											"                });",
											"",
											"                // total_previous_profit = last_month.total_profit",
											"                profit_period_last_month = pm.environment.get(\"C-profit_period_last_month\");",
											"                pm.test(\"total_previous_profit must be \" + profit_period_last_month.sum_card_data.total_profit, function () {",
											"                    pm.expect(jsData.data.sum_card_data.total_previous_profit).to.eql(profit_period_last_month.sum_card_data.total_profit);",
											"                });",
											"",
											"                // pm.environment.set(\"C-month_obj\",month_obj);",
											"                postman.setNextRequest(\"get_income_report\"); // get_income_report",
											"            }",
											"            break;",
											"        case 4:",
											"            tnx_obj = pm.environment.get(\"C-tnx_obj\");",
											"            tnx_date = tnx_obj.value_at;",
											"            console.log(\"tnx_date: \" + tnx_date);",
											"            // do thời gian lọc là tháng hiện tại => chỉ thay đổi khi value_at nằm trong tháng hiện tại",
											"",
											"            let old_profit_period = pm.environment.get(\"C-profit_period\");",
											"            profit_period = jsData.data;",
											"",
											"            let today = new Date();",
											"            let today_tmp = Math.floor(today.getTime()/1000);",
											"            let firstDayOfThisMonth = getFirstDayOfMonth(today_tmp);",
											"            let lastDayOfThisMonth = getLastDayOfMonth(today_tmp);",
											"            if(tnx_date < firstDayOfThisMonth || tnx_date > lastDayOfThisMonth){",
											"                // nothing happen",
											"                pm.test(\"Nothing happen!!!\", function () {",
											"                    pm.expect(JSON.stringify(profit_period) == JSON.stringify(old_profit_period)).to.be.true;",
											"                });",
											"            } else {",
											"                tnx_date = tnx_date.substring(0,10);",
											"",
											"                let exp_change = tnx_obj.amount;",
											"                if(tnx_obj.txn_type == \"in\"){",
											"                    // có thay đổi => total_income increase",
											"                    pm.test(\"total_income increase \" + exp_change, function () {",
											"                        pm.expect(profit_period.sum_card_data.total_income == old_profit_period.sum_card_data.total_income + exp_change).to.be.true;",
											"                    });",
											"",
											"                    // total_profit",
											"                    pm.test(\"total_profit increase \" + exp_change, function () {",
											"                        pm.expect(profit_period.sum_card_data.total_profit == old_profit_period.sum_card_data.total_profit + exp_change).to.be.true;",
											"                    });",
											"",
											"                    // thay đổi ngày tương ứng",
											"                    let old_date = null, act_date = null;",
											"                    for(let i in profit_period.dates_data){",
											"                        let day_i = profit_period.dates_data[i].date.substring(0,10);",
											"                        if(day_i == tnx_date){",
											"                            act_date = profit_period.dates_data[i];",
											"                            break;",
											"                        }",
											"                    }",
											"",
											"                    for(let i in old_profit_period.dates_data){",
											"                        let day_i = old_profit_period.dates_data[i].date.substring(0,10);",
											"                        if(day_i == tnx_date){",
											"                            old_date = old_profit_period.dates_data[i];",
											"                            break;",
											"                        }",
											"                    }",
											"",
											"                    if(old_date != null && act_date != null){",
											"                        console.log(\"act_date: \",act_date);",
											"                        console.log(\"old_date: \",old_date);",
											"                        // income",
											"                        pm.test(\"income at \" + tnx_date + \" increase \" + exp_change, function () {",
											"                            pm.expect(act_date.income == old_date.income + exp_change).to.be.true;",
											"                        });",
											"",
											"                        // profit",
											"                        pm.test(\"profit at \" + tnx_date + \" increase \" + exp_change, function () {",
											"                            pm.expect(act_date.profit == old_date.profit + exp_change).to.be.true;",
											"                        });",
											"                    }",
											"                } else {",
											"                    // có thay đổi => total_expense increase",
											"                    pm.test(\"total_expense increase \" + exp_change, function () {",
											"                        pm.expect(profit_period.sum_card_data.total_expense == old_profit_period.sum_card_data.total_expense + exp_change).to.be.true;",
											"                    });",
											"",
											"                    // total_profit descrease",
											"                    pm.test(\"total_profit decrease \" + exp_change, function () {",
											"                        pm.expect(profit_period.sum_card_data.total_profit == old_profit_period.sum_card_data.total_profit - exp_change).to.be.true;",
											"                    });",
											"",
											"                    // thay đổi ngày tương ứng",
											"                    let old_date = null, act_date = null;",
											"                    for(let i in profit_period.dates_data){",
											"                        let day_i = profit_period.dates_data[i].date.substring(0,10);",
											"                        if(day_i == tnx_date){",
											"                            act_date = profit_period.dates_data[i];",
											"                            break;",
											"                        }",
											"                    }",
											"",
											"                    for(let i in old_profit_period.dates_data){",
											"                        let day_i = old_profit_period.dates_data[i].date.substring(0,10);",
											"                        if(day_i == tnx_date){",
											"                            old_date = old_profit_period.dates_data[i];",
											"                            break;",
											"                        }",
											"                    }",
											"",
											"                    if(old_date != null && act_date != null){",
											"                        console.log(\"act_date: \",act_date);",
											"                        console.log(\"old_date: \",old_date);",
											"                        // expense",
											"                        pm.test(\"expense at \" + tnx_date + \" increase \" + exp_change, function () {",
											"                            pm.expect(act_date.expense == old_date.expense + exp_change).to.be.true;",
											"                        });",
											"",
											"                        // profit",
											"                        pm.test(\"profit at \" + tnx_date + \" decrease \" + exp_change, function () {",
											"                            pm.expect(act_date.profit == old_date.profit - exp_change).to.be.true;",
											"                        });",
											"                    }",
											"                }",
											"            }",
											"",
											"            postman.setNextRequest(\"get_income_report\"); // get_income_report",
											"            break;",
											"        default:",
											"            console.log(\"Missing flow, end test\");",
											"            postman.setNextRequest(null);",
											"            break;",
											"    }",
											"} else {",
											"    console.log(\"Can't get report P&L period, end test\",jsData);",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-location-timezone",
										"value": "UTC+07:00"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{C-userToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{C-payload}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{finone_url}}/fo-ledger/api/v1/report/profit-loss-period",
									"host": [
										"{{finone_url}}"
									],
									"path": [
										"fo-ledger",
										"api",
										"v1",
										"report",
										"profit-loss-period"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_profit_chart_branch",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let testcase = pm.environment.get(\"C-testcase\");",
											"console.log(\"Testcase: \" + testcase);",
											"",
											"let payload = {",
											"    \"business_id\": parseInt(pm.environment.get(\"C-business_id\")),",
											"    \"branch_id\": pm.environment.get(\"C-branch_id\"),",
											"    \"period\": \"month\",",
											"    \"report_type\": \"profit\" // expense, profit",
											"}",
											"",
											"console.log(\"payload: \",payload);",
											"pm.environment.set(\"C-payload\",JSON.stringify(payload));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// ============================= getFirstDayOfMonth",
											"function getFirstDayOfMonth(date_timestamp){",
											"  let setDate = new Date(date_timestamp*1000);",
											"  let getDate = new Date(setDate.getFullYear(), setDate.getMonth(), 1);",
											"  return getDate.toISOString();",
											"}",
											"",
											"// ============================= getLastDayOfMonth",
											"function getLastDayOfMonth(date_timestamp){",
											"  let setDate = new Date(date_timestamp*1000);",
											"  let firstDayOfNextMonth = new Date(setDate.getFullYear(), setDate.getMonth() + 1, 1);",
											"  let lastDayOfMonth = new Date(firstDayOfNextMonth - 1);",
											"  return lastDayOfMonth.toISOString();",
											"}",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsData = pm.response.json();",
											"if(pm.response.code == 200){",
											"    let testcase = pm.environment.get(\"C-testcase\");",
											"",
											"    let profit_period = null;",
											"    try {",
											"        profit_period = jsData.data;",
											"        /**",
											"         * period: week, month, year",
											"         * sum_card_data",
											"         * dates_data",
											"         */",
											"    } catch {",
											"        console.log(\"Can't get report cash_flow data\");",
											"    }",
											"",
											"    let invoice_obj, invoice_date;",
											"    switch(testcase){",
											"        case 2:",
											"            pm.test(\"Got profit_period \", function () {",
											"                pm.environment.set(\"C-profit_period\",profit_period);",
											"                pm.expect(profit_period != null).to.be.true;",
											"            });",
											"            pm.environment.set(\"C-profit_period\",profit_period);",
											"            console.log(\"profit_period: \", profit_period);",
											"",
											"",
											"            postman.setNextRequest(\"get_income_report\"); // get_income_report",
											"            break;",
											"        case 5:",
											"            invoice_obj = pm.environment.get(\"C-invoice_obj\");",
											"            invoice_date = invoice_obj.value_at.substring(0,10);",
											"            // Invoice sẽ tăng profit (income), Bill sẽ tăng loss (chi phí)",
											"            ",
											"            // if(full_check == 1){",
											"            //     let old_profit_period = pm.environment.get(\"C-profit_period\");",
											"            //     // console.log(\"debug old_loss_period: \", old_profit_period);",
											"            //     // console.log(\"debug loss_period: \", profit_period);",
											"",
											"            //     pm.test(\"Nothing happen!!!\", function () {",
											"            //         pm.expect(JSON.stringify(profit_period) == JSON.stringify(old_profit_period)).to.be.true;",
											"            //     });",
											"",
											"            //     full_check++;",
											"            //     pm.environment.set(\"C-full_check\",full_check);",
											"            //     postman.setNextRequest(\"report_profit_loss_period\");",
											"            // } else {",
											"            //     let old_loss_period = pm.environment.get(\"C-loss_period\");",
											"            //     // console.log(\"debug old_loss_period: \", old_loss_period);",
											"            //     // console.log(\"debug loss_period: \", loss_period);",
											"                ",
											"            //     pm.test(\"Nothing happen!!!\", function () {",
											"            //         pm.expect(JSON.stringify(loss_period) == JSON.stringify(old_loss_period)).to.be.true;",
											"            //     });",
											"",
											"            //     pm.environment.unset(\"C-full_check\");",
											"",
											"            //     testcase++;",
											"            //     pm.environment.set(\"C-testcase\",testcase);",
											"            //     postman.setNextRequest(\"calculate_invoice\"); // calculate_invoice",
											"            // }",
											"            break;",
											"        case 8:",
											"            invoice_obj = pm.environment.get(\"C-invoice_obj\");",
											"            invoice_date = invoice_obj.value_at;",
											"            console.log(\"invoice_date: \" + invoice_date);",
											"",
											"            // if(full_check == 1){",
											"            //     let old_profit_period = pm.environment.get(\"C-profit_period\");",
											"            //     // console.log(\"debug old_loss_period: \", old_profit_period);",
											"            //     // console.log(\"debug loss_period: \", profit_period);",
											"",
											"            //     // do thời gian lọc là tháng hiện tại => chỉ thay đổi khi value_at nằm trong tháng hiện tại",
											"            //     let today = new Date();",
											"            //     let today_tmp = Math.floor(today.getTime()/1000);",
											"            //     let firstDayOfThisMonth = getFirstDayOfMonth(today_tmp);",
											"            //     let lastDayOfThisMonth = getLastDayOfMonth(today_tmp);",
											"            //     if(invoice_date < firstDayOfThisMonth || invoice_date > lastDayOfThisMonth){",
											"            //         // nothing happen",
											"            //         pm.test(\"Nothing happen!!!\", function () {",
											"            //             pm.expect(JSON.stringify(profit_period) == JSON.stringify(old_profit_period)).to.be.true;",
											"            //         });",
											"            //     } else {",
											"            //         invoice_date = invoice_date.substring(0,10);",
											"",
											"            //         let income_product = 0, income_discount = 0;",
											"            //         for(let i in invoice_obj.items){",
											"            //             income_product += invoice_obj.items[i].before_tax_amount;",
											"            //             income_discount += invoice_obj.items[i].discount_amount;",
											"            //         }",
											"            //         let exp_change = income_product - income_discount;",
											"            //         // có thay đổi => total_income increase",
											"            //         pm.test(\"total_income increase \" + exp_change, function () {",
											"            //             pm.expect(profit_period.sum_card_data.total_income == old_profit_period.sum_card_data.total_income + exp_change).to.be.true;",
											"            //         });",
											"            //         // thay đổi ngày tương ứng",
											"            //         let old_date = null, act_date = null;",
											"            //         for(let i in profit_period.dates_data){",
											"            //             let day_i = profit_period.dates_data[i].date.substring(0,10);",
											"            //             if(day_i == invoice_date){",
											"            //                 act_date = profit_period.dates_data[i];",
											"            //                 break;",
											"            //             }",
											"            //         }",
											"",
											"            //         for(let i in old_profit_period.dates_data){",
											"            //             let day_i = old_profit_period.dates_data[i].date.substring(0,10);",
											"            //             if(day_i == invoice_date){",
											"            //                 old_date = old_profit_period.dates_data[i];",
											"            //                 break;",
											"            //             }",
											"            //         }",
											"",
											"            //         if(old_date != null && act_date != null){",
											"            //             console.log(\"act_date: \",act_date);",
											"            //             console.log(\"old_date: \",old_date);",
											"            //             pm.test(\"income at \" + invoice_date + \" increase \" + exp_change, function () {",
											"            //                 pm.expect(act_date.income == old_date.income + exp_change).to.be.true;",
											"            //             });",
											"            //         }",
											"            //     }",
											"",
											"            //     full_check++;",
											"            //     pm.environment.set(\"C-full_check\",full_check);",
											"            //     postman.setNextRequest(\"report_profit_loss_period\");",
											"            // } else {",
											"            //     let old_loss_period = pm.environment.get(\"C-loss_period\");",
											"            //     // console.log(\"debug old_loss_period: \", old_loss_period);",
											"            //     // console.log(\"debug loss_period: \", loss_period);",
											"                ",
											"            //     pm.test(\"Nothing happen!!!\", function () {",
											"            //         pm.expect(JSON.stringify(loss_period) == JSON.stringify(old_loss_period)).to.be.true;",
											"            //     });",
											"",
											"            //     pm.environment.unset(\"C-full_check\");",
											"",
											"            //     console.log(\"-------- End Testsuite 06 --------\");",
											"            //     postman.setNextRequest(null);",
											"            // }",
											"            break;",
											"        default:",
											"            console.log(\"Missing flow, end test\");",
											"            postman.setNextRequest(null);",
											"            break;",
											"    }",
											"} else {",
											"    console.log(\"Can't get report P&L period, end test\",jsData);",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-location-timezone",
										"value": "UTC+07:00"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{C-userToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{C-payload}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{finone_url}}/fo-ledger/api/v1/report/profit-loss-period",
									"host": [
										"{{finone_url}}"
									],
									"path": [
										"fo-ledger",
										"api",
										"v1",
										"report",
										"profit-loss-period"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_income_report",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let testcase = pm.environment.get(\"C-testcase\");",
											"console.log(\"Testcase: \" + testcase);",
											"",
											"let configs = pm.environment.get(\"C-configs\");",
											"let payload = {",
											"    // \"branch_id\": pm.environment.get(\"C-branch_id\"),",
											"    \"business_id\": parseInt(pm.environment.get(\"C-business_id\")),",
											"    \"report_type\": \"income\",",
											"    \"period\": configs.period",
											"    // \"current_period_start\": current_period_start,",
											"    // \"current_period_end\": current_period_end",
											"}",
											"",
											"console.log(\"payload: \",payload);",
											"pm.environment.set(\"C-payload\",JSON.stringify(payload));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// ============================= sort by key",
											"function sortByKey(array, key, type) {",
											"    if(type == \"asc\"){",
											"        return array.sort(function(a, b) {",
											"            var x = a[key]; var y = b[key];",
											"            return ((x > y) ? -1 : ((x < y) ? 1 : 0));",
											"        });",
											"    } else {",
											"        return array.sort(function(a, b) {",
											"            var x = a[key]; var y = b[key];",
											"            return ((x < y) ? -1 : ((x > y) ? 1 : 0));",
											"        });",
											"    }",
											"}",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsData = pm.response.json();",
											"if(pm.response.code == 200){",
											"    let testcase = pm.environment.get(\"C-testcase\");",
											"    let report_income = null;",
											"    try {",
											"        report_income = jsData.data;",
											"    } catch {",
											"        console.log(\"Can't get report cash_flow data\");",
											"    }",
											"",
											"    let old_report_income = pm.environment.get(\"C-report_income\");",
											"    switch(testcase){",
											"        case 2:",
											"            pm.test(\"Got report_income\", function () {",
											"                pm.expect(report_income != null).to.be.true;",
											"            });",
											"            pm.environment.set(\"C-report_income\",report_income);",
											"            console.log(\"report_income: \", report_income);",
											"",
											"            postman.setNextRequest(\"get_product_report\"); // get_product_report",
											"            break;",
											"        case 4:",
											"            console.log(\"old_report_income: \",old_report_income);",
											"            console.log(\"===================\");",
											"            console.log(\"report_income: \",report_income);",
											"",
											"            let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
											"            old_report_income = pm.environment.get(\"C-report_income\");",
											"",
											"            if(tnx_obj.txn_type == \"in\"){",
											"                let new_cat = null, old_cat = null;",
											"                for(let i in old_report_income){",
											"                    if(old_report_income[i].coa_id == tnx_obj.category_id){",
											"                        old_cat = old_report_income[i];",
											"                        break;",
											"                    }",
											"                }",
											"",
											"                for(let i in report_income){",
											"                    if(report_income[i].coa_id == tnx_obj.category_id){",
											"                        new_cat = report_income[i];",
											"                        break;",
											"                    }",
											"                }",
											"",
											"                console.log(\"old_cat: \",old_cat);",
											"                console.log(\"new_cat: \",new_cat);",
											"                if(old_cat != null && new_cat != null){",
											"                    // balance = debit - credit",
											"                    pm.test(\"balance of \" + old_cat.coa_name + \" increase \" + tnx_obj.amount, function () {",
											"                        pm.expect(new_cat.total_amount == old_cat.total_amount + tnx_obj.amount).to.be.true;",
											"                    });",
											"                } else {",
											"                    // CHỔ NÀY KHẢ NĂNG SẼ LỖI NẾU CATEGORY NHẢY VÀO TOP HOẶC BỊ OUT KHỎI TOP VÌ ACTION",
											"                    pm.test(\"Nothing happen!!\", function () {",
											"                        pm.expect(JSON.stringify(report_income) == JSON.stringify(old_report_income)).to.be.true;",
											"                    });",
											"                }",
											"            } else {",
											"                pm.test(\"Nothing happen!!\", function () {",
											"                    pm.expect(JSON.stringify(report_income) == JSON.stringify(old_report_income)).to.be.true;",
											"                });",
											"            }",
											"",
											"            postman.setNextRequest(\"get_product_report\"); // get_product_report",
											"            break;",
											"        default:",
											"            console.log(\"Missing flow, end test\");",
											"            postman.setNextRequest(null);",
											"            break;",
											"    }",
											"} else {",
											"    console.log(\"Can't get report cash_flow, end test\",jsData);",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{C-userToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{C-payload}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{finone_url}}/fo-ledger/api/v1/report/summary-by-category",
									"host": [
										"{{finone_url}}"
									],
									"path": [
										"fo-ledger",
										"api",
										"v1",
										"report",
										"summary-by-category"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_income_report_branch",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let testcase = pm.environment.get(\"C-testcase\");",
											"console.log(\"Testcase: \" + testcase);",
											"",
											"let payload = {",
											"    // \"branch_id\": pm.environment.get(\"C-branch_id\"),",
											"    \"business_id\": parseInt(pm.environment.get(\"C-business_id\")),",
											"    \"report_type\": \"income\",",
											"    \"period\": \"month\"",
											"    // \"current_period_start\": current_period_start,",
											"    // \"current_period_end\": current_period_end",
											"}",
											"",
											"console.log(\"payload: \",payload);",
											"pm.environment.set(\"C-payload\",JSON.stringify(payload));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// ============================= sort by key",
											"function sortByKey(array, key, type) {",
											"    if(type == \"asc\"){",
											"        return array.sort(function(a, b) {",
											"            var x = a[key]; var y = b[key];",
											"            return ((x > y) ? -1 : ((x < y) ? 1 : 0));",
											"        });",
											"    } else {",
											"        return array.sort(function(a, b) {",
											"            var x = a[key]; var y = b[key];",
											"            return ((x < y) ? -1 : ((x > y) ? 1 : 0));",
											"        });",
											"    }",
											"}",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsData = pm.response.json();",
											"if(pm.response.code == 200){",
											"    let testcase = pm.environment.get(\"C-testcase\");",
											"    let report_income = null;",
											"    try {",
											"        report_income = jsData.data;",
											"    } catch {",
											"        console.log(\"Can't get report cash_flow data\");",
											"    }",
											"",
											"    let old_report_income;",
											"    switch(testcase){",
											"        case 2:",
											"            pm.test(\"Got report_income\", function () {",
											"                pm.expect(report_income != null).to.be.true;",
											"            });",
											"            pm.environment.set(\"C-report_income\",report_income);",
											"            console.log(\"report_income: \", report_income);",
											"",
											"            postman.setNextRequest(\"\"); // get_product_report",
											"            break;",
											"        case 8:",
											"            let ranTimeCase = pm.environment.get(\"C-ranTimeCase\");",
											"            // hiện tại report đang lấy thời gian 1 tháng hiện tại => chỉ handle với case ranTimeCase == 2;",
											"            if(ranTimeCase == 2){",
											"                let invoice_obj = pm.environment.get(\"C-invoice_obj\");",
											"                old_report_income = pm.environment.get(\"C-report_income\");",
											"                /**",
											"                 * Check rule:",
											"                 * - Xử lý data cho invoice_obj: sum amount của tất cả product cùng coa",
											"                 * - IF line_item trong invoice_obj có tồn tại trong old_report_income => thay đổi total_amount tương ứng",
											"                 * - ELSE:",
											"                 *    - IF line_item trong invoice_obj có tồn tại trong report_income => so sánh total_amount của product tương ứng với old_report_income (*)",
											"                 * Note:",
											"                 * (*) Cách so sánh: report_income[i].total_amount - invoice_obj.items[item].before_tax_amount < min(old_report_income.amount)",
											"                 */",
											"",
											"                console.log(\"invoice_obj: \", invoice_obj);",
											"                console.log(\"===================\");",
											"                console.log(\"old_report_income: \",old_report_income);",
											"                console.log(\"===================\");",
											"                console.log(\"report_income: \",report_income);",
											"",
											"                let list_item_objs = [];",
											"                for(let item in invoice_obj.items){",
											"                    if(list_item_objs.length == 0){",
											"                        list_item_objs[list_item_objs.length] = {",
											"                            \"account_id\":invoice_obj.items[item].account_id,",
											"                            \"name\":invoice_obj.items[item].name,",
											"                            \"before_tax_amount\":invoice_obj.items[item].before_tax_amount",
											"                        }",
											"                    } else {",
											"                        let is_found_item = false;",
											"                        for(let i in list_item_objs){",
											"                            if(list_item_objs[i].account_id == invoice_obj.items[item].account_id){",
											"                                is_found_item = true;",
											"                                list_item_objs[i].before_tax_amount += invoice_obj.items[item].before_tax_amount;",
											"                                break;",
											"                            }",
											"                        }",
											"",
											"                        if(!is_found_item){",
											"                            list_item_objs[list_item_objs.length] = {",
											"                                \"account_id\":invoice_obj.items[item].account_id,",
											"                                \"name\":invoice_obj.items[item].name,",
											"                                \"before_tax_amount\":invoice_obj.items[item].before_tax_amount",
											"                            }",
											"                        }",
											"                    }",
											"                }",
											"                console.log(\"===================\");",
											"                console.log(\"list_item_objs: \",list_item_objs);",
											"",
											"                let old_list_objs = [];",
											"                for(let i in old_report_income){",
											"                    for(let item in list_item_objs){",
											"                        if(old_report_income[i].coa_id == list_item_objs[item].account_id){",
											"                            console.log(\"Find product \" + list_item_objs[item].name + \" with coa \" + old_report_income[i].coa_name + \" in report!\");",
											"                            old_list_objs[old_list_objs.length] = old_report_income[i];",
											"",
											"                            old_list_objs[old_list_objs.length - 1 ].amount = list_item_objs[item].before_tax_amount;",
											"                            // ở đây ko break vì có thể có nhiều product;",
											"                        }",
											"                    }",
											"                }",
											"",
											"                let count = 0;",
											"                if(old_list_objs.length > 0){",
											"                    for(let i in old_list_objs){",
											"                        for(let j in report_income){",
											"                            if(old_list_objs[i].coa_id == report_income[j].coa_id){",
											"                                count++;",
											"                                pm.test(\"coa_name \" + old_list_objs[i].coa_name + \" increase \" + old_list_objs[i].amount, function () {",
											"                                    pm.expect(report_income[j].total_amount).to.eql(old_list_objs[i].total_amount + old_list_objs[i].amount);",
											"                                });",
											"                                break;",
											"                            }",
											"                        }",
											"                    }",
											"",
											"                    // check total",
											"                } else {",
											"                    let new_list_objs = [];",
											"                    for(let i in report_income){",
											"                        for(let item in list_item_objs){",
											"                            if(report_income[i].coa_id == list_item_objs[item].account_id){",
											"                                new_list_objs[new_list_objs.length] = report_income[i];",
											"",
											"                                new_list_objs[new_list_objs.length - 1 ].amount = list_item_objs[item].before_tax_amount;",
											"                                // ở đây ko break vì có thể có nhiều product;",
											"                            }",
											"                        }",
											"                    }",
											"",
											"                    if(new_list_objs.length > 0){",
											"                        for(let i in new_list_objs){",
											"                            for(let j in report_income){",
											"                                if(new_list_objs[i].coa_id == report_income[j].coa_id){",
											"                                    pm.test(\"coa_name \" + new_list_objs[i].coa_name + \" increase \" + new_list_objs[i].amount, function () {",
											"                                        pm.expect(old_report_income[old_report_income.length - 1].total_amount > new_list_objs[i].total_amount + new_list_objs[i].amount).to.be.true;",
											"                                    });",
											"                                    break;",
											"                                }",
											"                            }",
											"                        }",
											"                    }",
											"                }",
											"            } else {",
											"                // pm.test(\"Nothing happen with report_income\", function () {",
											"                //     pm.expect(JSON.stringify(report_income) == JSON.stringify(old_report_income)).to.be.true;",
											"                // });",
											"            }",
											"         ",
											"            // console.log(\"-------- End Testsuite 06 --------\");",
											"            postman.setNextRequest(\"report_profit_loss_period\");",
											"            break;",
											"        case 5:",
											"            old_report_income = pm.environment.get(\"C-report_income\");",
											"            pm.test(\"Nothing happen with report_income\", function () {",
											"                console.log(\"old_report_income: \",old_report_income);",
											"                console.log(\"===================\");",
											"                console.log(\"report_income: \",report_income);",
											"                pm.expect(JSON.stringify(report_income) == JSON.stringify(old_report_income)).to.be.true;",
											"            });",
											"            ",
											"            postman.setNextRequest(\"report_profit_loss_period\"); // report_profit_loss_period",
											"            break;",
											"        default:",
											"            console.log(\"Missing flow, end test\");",
											"            postman.setNextRequest(null);",
											"            break;",
											"    }",
											"} else {",
											"    console.log(\"Can't get report cash_flow, end test\",jsData);",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{C-userToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{C-payload}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{finone_url}}/fo-ledger/api/v1/report/summary-by-category",
									"host": [
										"{{finone_url}}"
									],
									"path": [
										"fo-ledger",
										"api",
										"v1",
										"report",
										"summary-by-category"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_product_report",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let testcase = pm.environment.get(\"C-testcase\");",
											"console.log(\"Testcase: \" + testcase);",
											"",
											"let payload = {",
											"    // \"branch_id\": pm.environment.get(\"C-branch_id\"),",
											"    \"business_id\": parseInt(pm.environment.get(\"C-business_id\")),",
											"    \"current_period_start\": pm.environment.get(\"C-current_period_start\"),",
											"    \"current_period_end\": pm.environment.get(\"C-current_period_end\")",
											"}",
											"",
											"console.log(\"payload: \",payload);",
											"pm.environment.set(\"C-payload\",JSON.stringify(payload));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsData = pm.response.json();",
											"if(pm.response.code == 200){",
											"    let testcase = pm.environment.get(\"C-testcase\");",
											"    let report_product = null;",
											"    try {",
											"        report_product = jsData.data;",
											"    } catch {",
											"        console.log(\"Can't get report cash_flow data\");",
											"    }",
											"",
											"    let old_report_product;",
											"    switch(testcase){",
											"        case 2:",
											"            pm.test(\"Got report_product\", function () {",
											"                pm.expect(report_product != null).to.be.true;",
											"            });",
											"            pm.environment.set(\"C-report_product\",report_product);",
											"            // console.log(\"report_product: \", report_product);",
											"",
											"            postman.setNextRequest(\"get_expense_chart\"); // get_expense_chart",
											"            break;",
											"        case 4:",
											"            let old_report_product = pm.environment.get(\"C-report_product\");",
											"            report_product = jsData.data;",
											"",
											"            pm.test(\"Nothing happen!!!\", function () {",
											"                pm.expect(JSON.stringify(old_report_product) == JSON.stringify(report_product)).to.be.true;",
											"            });",
											"",
											"            postman.setNextRequest(\"get_expense_chart\"); // get_expense_chart",
											"            break;",
											"        default:",
											"            console.log(\"Missing flow, end test\");",
											"            postman.setNextRequest(null);",
											"            break;",
											"    }",
											"} else {",
											"    console.log(\"Can't get report product, end test\",jsData);",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "authorization",
										"value": "Bearer {{C-userToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{C-payload}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{finone_url}}/fo-order/api/v1/report/top-selling-product",
									"host": [
										"{{finone_url}}"
									],
									"path": [
										"fo-order",
										"api",
										"v1",
										"report",
										"top-selling-product"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "expenses",
					"item": [
						{
							"name": "get_expense_chart",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let testcase = pm.environment.get(\"C-testcase\");",
											"console.log(\"Testcase: \" + testcase);",
											"",
											"let configs = pm.environment.get(\"C-configs\");",
											"let payload = {",
											"    \"business_id\": parseInt(pm.environment.get(\"C-business_id\")),",
											"    \"period\": configs.period,",
											"    \"report_type\": \"expense\"",
											"}",
											"",
											"console.log(\"payload: \",payload);",
											"pm.environment.set(\"C-payload\",JSON.stringify(payload));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// ============================= getFirstDayOfMonth",
											"function getFirstDayOfMonth(date_timestamp){",
											"  let setDate = new Date(date_timestamp*1000);",
											"  let getDate = new Date(setDate.getFullYear(), setDate.getMonth(), 1);",
											"  return getDate.toISOString();",
											"}",
											"",
											"// ============================= getLastDayOfMonth",
											"function getLastDayOfMonth(date_timestamp){",
											"  let setDate = new Date(date_timestamp*1000);",
											"  let firstDayOfNextMonth = new Date(setDate.getFullYear(), setDate.getMonth() + 1, 1);",
											"  let lastDayOfMonth = new Date(firstDayOfNextMonth - 1);",
											"  return lastDayOfMonth.toISOString();",
											"}",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsData = pm.response.json();",
											"if(pm.response.code == 200){",
											"    let testcase = pm.environment.get(\"C-testcase\");",
											"",
											"    let loss_period = null;",
											"    try {",
											"        loss_period = jsData.data;",
											"        /**",
											"         * period: week, month, year",
											"         * sum_card_data",
											"         * dates_data",
											"         */",
											"    } catch {",
											"        console.log(\"Can't get expense chart data\");",
											"    }",
											"",
											"    let invoice_obj, invoice_date;",
											"    switch(testcase){",
											"        case 2:",
											"            pm.test(\"Got loss_period \", function () {",
											"                pm.environment.set(\"C-loss_period\",loss_period);",
											"                pm.expect(loss_period != null).to.be.true;",
											"            });",
											"            pm.environment.set(\"C-loss_period\",loss_period);",
											"            console.log(\"loss_period: \", loss_period);",
											"",
											"            postman.setNextRequest(\"get_expense_report\"); // get_expense_report",
											"            break;",
											"        case 4:",
											"            tnx_obj = pm.environment.get(\"C-tnx_obj\");",
											"            tnx_date = tnx_obj.value_at;",
											"            console.log(\"tnx_date: \" + tnx_date);",
											"            // do thời gian lọc là tháng hiện tại => chỉ thay đổi khi value_at nằm trong tháng hiện tại",
											"",
											"            let old_loss_period = pm.environment.get(\"C-loss_period\");",
											"            loss_period = jsData.data;",
											"",
											"            let today = new Date();",
											"            let today_tmp = Math.floor(today.getTime()/1000);",
											"            let firstDayOfThisMonth = getFirstDayOfMonth(today_tmp);",
											"            let lastDayOfThisMonth = getLastDayOfMonth(today_tmp);",
											"            if(tnx_date < firstDayOfThisMonth || tnx_date > lastDayOfThisMonth){",
											"                // nothing happen",
											"                pm.test(\"Nothing happen!!!\", function () {",
											"                    pm.expect(JSON.stringify(loss_period) == JSON.stringify(old_loss_period)).to.be.true;",
											"                });",
											"            } else {",
											"                tnx_date = tnx_date.substring(0,10);",
											"",
											"                let exp_change = tnx_obj.amount;",
											"                if(tnx_obj.txn_type == \"out\"){",
											"                    // có thay đổi => total_income increase",
											"                    pm.test(\"total_expense increase \" + exp_change, function () {",
											"                        pm.expect(loss_period.sum_card_data.total_expense == old_loss_period.sum_card_data.total_expense + exp_change).to.be.true;",
											"                    });",
											"",
											"                    // // total_profit",
											"                    // pm.test(\"total_profit decrease \" + exp_change, function () {",
											"                    //     pm.expect(loss_period.sum_card_data.total_profit == old_loss_period.sum_card_data.total_profit - exp_change).to.be.true;",
											"                    // });",
											"",
											"                    // thay đổi ngày tương ứng",
											"                    let old_date = null, act_date = null;",
											"                    for(let i in loss_period.dates_data){",
											"                        let day_i = loss_period.dates_data[i].date.substring(0,10);",
											"                        if(day_i == tnx_date){",
											"                            act_date = loss_period.dates_data[i];",
											"                            break;",
											"                        }",
											"                    }",
											"",
											"                    for(let i in old_loss_period.dates_data){",
											"                        let day_i = old_loss_period.dates_data[i].date.substring(0,10);",
											"                        if(day_i == tnx_date){",
											"                            old_date = old_loss_period.dates_data[i];",
											"                            break;",
											"                        }",
											"                    }",
											"",
											"                    if(old_date != null && act_date != null){",
											"                        console.log(\"act_date: \",act_date);",
											"                        console.log(\"old_date: \",old_date);",
											"                        // expense",
											"                        pm.test(\"expense at \" + tnx_date + \" increase \" + exp_change, function () {",
											"                            pm.expect(act_date.expense == old_date.expense + exp_change).to.be.true;",
											"                        });",
											"",
											"                        // // profit",
											"                        // pm.test(\"profit at \" + tnx_date + \" decrease \" + exp_change, function () {",
											"                        //     pm.expect(act_date.profit == old_date.profit - exp_change).to.be.true;",
											"                        // });",
											"                    }",
											"                } else {",
											"                    pm.test(\"Nothing happen!!\", function () {",
											"                        pm.expect(JSON.stringify(loss_period) == JSON.stringify(old_loss_period)).to.be.true;",
											"                    });",
											"                }",
											"            }",
											"",
											"            postman.setNextRequest(\"get_expense_report\"); // get_expense_report",
											"            break;",
											"        default:",
											"            console.log(\"Missing flow, end test\");",
											"            postman.setNextRequest(null);",
											"            break;",
											"    }",
											"} else {",
											"    console.log(\"Can't get report P&L period, end test\",jsData);",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-location-timezone",
										"value": "UTC+07:00"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{C-userToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{C-payload}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{finone_url}}/fo-ledger/api/v1/report/profit-loss-period",
									"host": [
										"{{finone_url}}"
									],
									"path": [
										"fo-ledger",
										"api",
										"v1",
										"report",
										"profit-loss-period"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_expense_report",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let testcase = pm.environment.get(\"C-testcase\");",
											"console.log(\"Testcase: \" + testcase);",
											"",
											"let payload = {",
											"    // \"branch_id\": pm.environment.get(\"C-branch_id\"),",
											"    \"business_id\": parseInt(pm.environment.get(\"C-business_id\")),",
											"    \"report_type\": \"expense\",",
											"    \"period\": \"month\"",
											"    // \"current_period_start\": current_period_start,",
											"    // \"current_period_end\": current_period_end",
											"}",
											"",
											"console.log(\"payload: \",payload);",
											"pm.environment.set(\"C-payload\",JSON.stringify(payload));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// ============================= sort by key",
											"function sortByKey(array, key, type) {",
											"    if(type == \"asc\"){",
											"        return array.sort(function(a, b) {",
											"            var x = a[key]; var y = b[key];",
											"            return ((x > y) ? -1 : ((x < y) ? 1 : 0));",
											"        });",
											"    } else {",
											"        return array.sort(function(a, b) {",
											"            var x = a[key]; var y = b[key];",
											"            return ((x < y) ? -1 : ((x > y) ? 1 : 0));",
											"        });",
											"    }",
											"}",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsData = pm.response.json();",
											"if(pm.response.code == 200){",
											"    let testcase = pm.environment.get(\"C-testcase\");",
											"    let report_expense = null;",
											"    try {",
											"        report_expense = jsData.data;",
											"    } catch {",
											"        console.log(\"Can't get report cash_flow data\");",
											"    }",
											"",
											"    let old_report_expense = pm.environment.get(\"C-report_expense\");",
											"    switch(testcase){",
											"        case 2:",
											"            pm.test(\"Got report_expense\", function () {",
											"                pm.expect(report_expense != null).to.be.true;",
											"            });",
											"            pm.environment.set(\"C-report_expense\",report_expense);",
											"            console.log(\"report_expense: \",report_expense);",
											"",
											"            postman.setNextRequest(\"get_list_transaction\"); // get_list_transaction",
											"            break;",
											"        case 4:",
											"            console.log(\"old_report_expense: \",old_report_expense);",
											"            console.log(\"===================\");",
											"            console.log(\"report_expense: \",report_expense);",
											"",
											"            let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
											"            old_report_expense = pm.environment.get(\"C-report_expense\");",
											"",
											"            if(tnx_obj.txn_type == \"out\"){",
											"                let new_cat = null, old_cat = null;",
											"                for(let i in old_report_expense){",
											"                    if(old_report_expense[i].coa_id == tnx_obj.category_id){",
											"                        old_cat = old_report_expense[i];",
											"                        break;",
											"                    }",
											"                }",
											"",
											"                for(let i in report_expense){",
											"                    if(report_expense[i].coa_id == tnx_obj.category_id){",
											"                        new_cat = report_expense[i];",
											"                        break;",
											"                    }",
											"                }",
											"",
											"                console.log(\"old_cat: \",old_cat);",
											"                console.log(\"new_cat: \",new_cat);",
											"                if(old_cat != null && new_cat != null){",
											"                    // balance = debit - credit",
											"                    pm.test(\"balance of \" + old_cat.coa_name + \" increase \" + tnx_obj.amount, function () {",
											"                        pm.expect(new_cat.total_amount == old_cat.total_amount + tnx_obj.amount).to.be.true;",
											"                    });",
											"                } else {",
											"                    // CHỔ NÀY KHẢ NĂNG SẼ LỖI NẾU CATEGORY NHẢY VÀO TOP HOẶC BỊ OUT KHỎI TOP VÌ ACTION",
											"                    pm.test(\"Nothing happen!!\", function () {",
											"                        pm.expect(JSON.stringify(report_expense) == JSON.stringify(old_report_expense)).to.be.true;",
											"                    });",
											"                }",
											"            } else {",
											"                pm.test(\"Nothing happen!!\", function () {",
											"                    pm.expect(JSON.stringify(report_expense) == JSON.stringify(old_report_expense)).to.be.true;",
											"                });",
											"            }",
											"         ",
											"            console.log(\"-------- End Testsuite 45 --------\");",
											"            postman.setNextRequest(null);",
											"            break;",
											"        default:",
											"            console.log(\"Missing flow, end test\");",
											"            postman.setNextRequest(null);",
											"            break;",
											"    }",
											"} else {",
											"    console.log(\"Can't get report cash_flow, end test\",jsData);",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{C-userToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{C-payload}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{finone_url}}/fo-ledger/api/v1/report/summary-by-category",
									"host": [
										"{{finone_url}}"
									],
									"path": [
										"fo-ledger",
										"api",
										"v1",
										"report",
										"summary-by-category"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "recent_transactions",
					"item": [],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"/**",
									" * chỉ cần check UI vì ở đây là API trả",
									" *  - list transaction",
									" *  - list invoice (!= fully_paid)",
									" *  - list bill (!= fully_paid)",
									" */"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"let configs = {",
					"    \"is_use_email\":true,",
					"    \"limit_page\":5,",
					"    \"timeout\":12000, // miliseconds => timeout to call API",
					"    \"is_buyer_gen\":false,",
					"    \"txn_type\":\"in\", // => in, out, mix",
					"    \"has_tax\":false, // => transaction có thuế hay không",
					"    \"credit_type\":\"cash\", // va, gp, cash, \"mb\" => loại credit account (mb là bank liên kết)",
					"    \"period\":\"month\", // ",
					"    \"test_payment_method\":\"va_galaxy\" // bank_transfer, viet_qr_pro_mb, va_galaxy",
					"}",
					"",
					"pm.environment.set(\"C-configs\",configs);",
					"// console.log(\"configs: \",configs);"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"// ====================================== parser cURL",
					"function parseCURL(request_api){",
					"    let curl = \"\";",
					"    switch(request_api.method){",
					"        case \"PUT\":",
					"            curl = \"curl --location --request PUT \";",
					"            break;",
					"        case \"PATCH\":",
					"            curl = \"curl --location --request PATCH \";",
					"            break;",
					"        case \"DELETE\":",
					"            curl = \"curl --location --request DELETE \";",
					"            break;",
					"        default:",
					"            curl = \"curl --location \";",
					"            break;",
					"    }",
					"    curl += \"'\" + request_api.url.protocol + \"://\"",
					"    // host",
					"    for(let i in request_api.url.host){",
					"        if(i >= request_api.url.host.length - 1){",
					"            curl += request_api.url.host[i] + \"/\";",
					"        } else {",
					"            curl += request_api.url.host[i] + \".\";",
					"        }",
					"    }",
					"    // path",
					"    for(let i in request_api.url.path){",
					"        if(i >= request_api.url.path.length - 1){",
					"            curl += request_api.url.path[i];",
					"        } else {",
					"            curl += request_api.url.path[i] + \"/\";",
					"        }",
					"    }",
					"    // query (if have)",
					"    if(\"query\" in request_api.url){",
					"        if(request_api.url.length > 0){",
					"            curl += \"? \";",
					"            for(let i in request_api.url.query){",
					"                if(i >= request_api.url.query.length - 1){",
					"                    curl += request_api.url.query[i].key + \"=\" + request_api.url.query[i].value + \"' \";",
					"                } else {",
					"                    curl += request_api.url.query[i].key + \"=\" + request_api.url.query[i].value + \"&\";",
					"                }",
					"            }",
					"        } else {",
					"            curl += \"' \";",
					"        }",
					"    } else {",
					"        curl += \"' \";",
					"    }",
					"    // header",
					"    for(let i in request_api.header){",
					"        if(i >= request_api.header.length - 1){",
					"            curl += \"--header '\" + request_api.header[i].key + \": \" + request_api.header[i].value + \"'\";",
					"        } else {",
					"            curl += \"--header '\" + request_api.header[i].key + \": \" + request_api.header[i].value + \"' \";",
					"        }",
					"    }",
					"    switch(request_api.method){",
					"        case \"POST\":",
					"            curl += \" --data '\" + request_api.body.raw + \"'\"",
					"            break;",
					"        case \"PUT\": case \"PATCH\":",
					"            curl += \" --data-raw '\" + request_api.body.raw + \"'\"",
					"            break;",
					"        default:",
					"            break;",
					"    }",
					"    console.log(curl);",
					"    return curl;",
					"}",
					"const request_api = pm.request.toJSON();",
					"parseCURL(request_api);"
				]
			}
		}
	]
}