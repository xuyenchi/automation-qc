{
	"info": {
		"_postman_id": "b7a0a16e-4d96-46ee-a2be-8ca785f5ea57",
		"name": "fo_97_verify_to_create_manual_payment_for_po",
		"description": "### Testsuite: Verify to create manual transaction\n\n###### Testcase:\n\n1. Login with owner account\n    \n2. Get data\n    \n    1. Account coa / Get list coa => get list debit account\n        \n    2. Account cash_n_bank / Get list account => get list credit\n        \n    3. po / Get list po => get un_paid po (get paid, partial_paid if needed) => pick 1 po to create tnx\n        \n    4. \\[New\\] po/ get po overview => get data\n        \n    5. Posting / Get list posting => get total posting\n        \n    6. payment / get list payment => get total\n        \n    7. Report / Get report AR unpaid => get data\n        \n    8. Report / Get report AR customer => get data\n        \n    9. Report / Get report cash_flow => get data\n        \n    10. Report / account lifetime => get data\n        \n    11. Report / cash flow period => get data\n        \n    12. Report/ profit loss period => get data\n        \n    13. Report / chart balance change => get data\n        \n    14. Transaction / Get transaction summary => get data\n        \n    15. Transaction / Get list transaction => get total transaction\n        \n3. Create transaction (partial_paid for an unpaid)\n    \n    1. Unhappy case: null data (except txn_type > default 'out', value_at)\n        \n    2. Unhappy case: amount < 0\n        \n    3. Unhappy case: missing credit ()\n        \n    4. Unhappy case: object_type is null\n        \n    5. Unhappy case: credit is not existed\n        \n    6. Unhappy case: object_key is null\n        \n    7. Unhappy case: value_at is later bill_created\n        \n    8. Happy case => check all data created\n        \n4. Check data\n    \n    1. Transaction / Get list transaction => have new record\n        \n    2. Transaction / Get transaction detail => data correctly\n        \n    3. Transaction / Get transaction summary => check data\n        \n    4. payment / get list payment => update total (increase 1)\n        \n    5. payment / view payment detail => data correctly\n        \n    6. Account cash_n_bank / Get list account => check respective banlance_amount\n        \n    7. po / Get list po => check po status at 2.c\n        \n    8. po / Get po detail => update data\n        \n    9. \\[New\\] po/ get po overview => check data\n        \n    10. Posting / get list posting => have 2 new posting (account receivable & account debit)\n        \n    11. Report / Get report AR unpaid => get data\n        \n    12. Report / Get report AR customer => get data\n        \n    13. Report / Get report cash_flow => get data\n        \n    14. Report / account lifetime => get data\n        \n    15. Report / cash flow period => get data\n        \n    16. Report/ profit loss period => get data\n        \n    17. Report / chart balance change => get data\n        \n5. Create transaction\n    \n    1. Happy case => fully paid for a partial_paid (/un_paid)\n        \n6. Check data\n    \n    1. Transaction / Get list transaction => have new record\n        \n    2. Transaction / Get transaction detail => data correctly\n        \n    3. Transaction / Get transaction summary => check data\n        \n    4. Account cash_n_bank / Get list account => check respective banlance_amount\n        \n    5. po / Get list po => check po status at 2.c\n        \n    6. po / Get po detail => update data\n        \n    7. \\[New\\] po/ get po overview => check data\n        \n    8. Posting / get list posting => have 2 new posting (account receivable & account debit)\n        \n    9. Report / Get report AR unpaid => get data\n        \n    10. Report / Get report AR customer => get data\n        \n    11. Report / Get report cash_flow => get data\n        \n    12. Report / account lifetime => get data\n        \n    13. Report / cash flow period => get data\n        \n    14. Report/ profit loss period => get data\n        \n    15. Report / chart balance change => get data\n        \n\n###### Note:\n\n- Account sẽ không có số liệu về amount, phần check balance_amount cần thực hiện ở các API về report\n    \n- debit account: payment for bill\n    \n- Tạm thời run case 1-2-3-4 hoặc 1-2-5-6, không run full vì phần data cần xử lý lại sau khi đã thực hiện tnx ở case 3",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "282640"
	},
	"item": [
		{
			"name": "authen",
			"item": [
				{
					"name": "login",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// ============================= random characters",
									"function randomChars(length) {",
									"    var result           = '';",
									"    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
									"    var charactersLength = characters.length;",
									"    for ( var i = 0; i < length; i++ ) {",
									"      result += characters.charAt(Math.floor(Math.random() * ",
									" charactersLength));",
									"   }",
									"   return result;",
									"}",
									"",
									"let testcase = 1;",
									"console.log(\"-------- Start Testsuite 97 --------\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let platform = [\"desktop-web\",\"mobile-web\",\"mobile-app\"];",
									"let configs = pm.environment.get(\"C-configs\");",
									"let payload;",
									"if(configs.is_use_email){",
									"    payload = {",
									"        \"app_version\": \"1.0.0\",",
									"        \"device_info\": {",
									"            \"id\": randomChars(7) + \"-\" + randomChars(4) + \"-\" + randomChars(4) + \"-\" + randomChars(4) + \"-\" + randomChars(12),",
									"            \"name\": \"IP name\",",
									"            \"os\": \"iphone\"",
									"        },",
									"        \"email\": pm.environment.get(\"SER-email\"), // pm.environment.get(\"SER-email\")",
									"        \"encrypted_password\": pm.environment.get(\"SER-password\"),",
									"        \"phone_number\": \"\",",
									"        \"platform_key\": platform[0]",
									"    }",
									"} else {",
									"    payload = {",
									"        \"app_version\": \"1.0.0\",",
									"        \"device_info\": {",
									"            \"id\": randomChars(7) + \"-\" + randomChars(4) + \"-\" + randomChars(4) + \"-\" + randomChars(4) + \"-\" + randomChars(12),",
									"            \"name\": \"IP name\",",
									"            \"os\": \"iphone\"",
									"        },",
									"        \"email\":\"\", // pm.environment.get(\"SER-email\")",
									"        \"encrypted_password\": pm.environment.get(\"SER-password\"),",
									"        \"phone_number\": pm.environment.get(\"SER-phone_number\"),",
									"        \"platform_key\": platform[0]",
									"    }",
									"}",
									"",
									"console.log(\"payload: \",payload);",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));",
									"pm.environment.set(\"C-testcase\",testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    pm.test(\"System code is 102000\", function () {",
									"        pm.expect(jsData.code).to.eql(102000);",
									"    });",
									"",
									"    if(jsData.code == 102000){",
									"        let userToken = null;",
									"        try {",
									"            userToken = jsData.data.access_token;",
									"            pm.environment.set(\"C-userToken\",userToken);",
									"        } catch {",
									"            console.log(\"Can't get userToken\");",
									"        }",
									"",
									"        pm.test(\"Got userToken\", function () {",
									"            pm.expect(userToken != null).to.be.true;",
									"        });",
									"",
									"        let userInfo = jsData.data.user_info;",
									"",
									"        // show log",
									"        console.log(\"userInfo:\",JSON.stringify(userInfo));",
									"        pm.environment.set(\"C-userInfo\",userInfo);",
									"",
									"        postman.setNextRequest(\"verify_token_to_get_business\");",
									"    } else {",
									"        console.log(\"Can't get Token, end test\",jsData);",
									"        postman.setNextRequest(null);",
									"    }",
									"} else {",
									"    console.log(\"Can't login new account, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "x-locale",
								"value": "<string>",
								"description": "locale",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-user/api/v1/auth/login",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-user",
								"api",
								"v1",
								"auth",
								"login"
							]
						},
						"description": "Login User"
					},
					"response": []
				},
				{
					"name": "verify_token_to_get_business",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// verify token to get business",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = JSON.parse(responseBody);",
									"if(pm.response.code == 200 && jsData.code == 102000){",
									"    const jsData = pm.response.json();",
									"    pm.environment.set(\"C-user_id\",jsData.data.user_id);",
									"",
									"    let business_id = jsData.data.headers[\"x-business-id\"];",
									"    console.log(\"business_id: \" + business_id);",
									"    pm.environment.set(\"C-business_id\",business_id);",
									"",
									"    postman.setNextRequest(\"get_current_business\");",
									"} else {",
									"    console.log(\"Can't check token to get business_id, end test\");",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"token\": \"{{C-userToken}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-user/api/v1/auth/verify-token",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-user",
								"api",
								"v1",
								"auth",
								"verify-token"
							]
						},
						"description": "Login User"
					},
					"response": []
				},
				{
					"name": "get_current_business",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ============================= random number between min and max",
									"function getRandomInt(min, max) {",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    // console.log(\"Current business info: \", jsData.data);",
									"    let configs = pm.environment.get(\"C-configs\");",
									"    let branch_id = null, filter_branch_id = null, list_branch = [];",
									"    try {",
									"        list_branch = jsData.data.current_business.list_branch;",
									"        branch_id = list_branch[getRandomInt(0,list_branch.length - 1)].id;",
									"        if(configs.is_the_same_branch){",
									"            filter_branch_id = branch_id;",
									"        } else {",
									"            while(1){",
									"                filter_branch_id = list_branch[getRandomInt(0,list_branch.length - 1)].id;",
									"",
									"                if(branch_id != filter_branch_id) break;",
									"            }",
									"            // for(let i in list_branch){",
									"            //     if(list_branch[i].id != branch_id){",
									"            //         filter_branch_id = list_branch[i].id;",
									"            //         break;",
									"            //     }",
									"            // }",
									"        }",
									"        console.log(\"branch_id: \" + branch_id);",
									"        console.log(\"filter_branch_id: \" + filter_branch_id);",
									"        pm.environment.set(\"C-branch_id\",branch_id);",
									"        pm.environment.set(\"C-filter_branch_id\",filter_branch_id);",
									"    } catch {",
									"        console.log(\"Can't get branch id\");",
									"    }",
									"",
									"    pm.test(\"Got all branch \" + list_branch.length, function () {",
									"        pm.expect(list_branch != null).to.be.true;",
									"    });",
									"    pm.environment.set(\"C-list_branch\",list_branch);",
									"",
									"    pm.test(\"Got branch id \" + branch_id, function () {",
									"        pm.expect(branch_id != null).to.be.true;",
									"    });",
									"",
									"    // debug",
									"    for(let i in list_branch){",
									"        if(list_branch[i].id == branch_id){",
									"            console.log(\"Will create PO at branch \" + list_branch[i].branch_name);",
									"            break;",
									"        }",
									"    }",
									"    for(let i in list_branch){",
									"        if (list_branch[i].id == filter_branch_id){",
									"            console.log(\"Will check PO, Batch, Inventory at branch \" + list_branch[i].branch_name);",
									"            break;",
									"        }",
									"    }",
									"",
									"    let payment_method_list = [];",
									"    for(let i in jsData.data.list_payment_method){",
									"        if(jsData.data.list_payment_method[i].is_active){",
									"            payment_method_list[payment_method_list.length] = jsData.data.list_payment_method[i];",
									"        }",
									"    }",
									"",
									"    pm.test(\"Got payment_method_list \" + payment_method_list.length, function () {",
									"        pm.expect(payment_method_list.length > 0).to.be.true;",
									"    });",
									"    pm.environment.set(\"C-payment_method_list\",payment_method_list);",
									"    ",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    testcase++;",
									"    pm.environment.set(\"C-testcase\",testcase);",
									"    postman.setNextRequest(\"get_list_internal_account\"); // get_list_internal_account",
									"} else {",
									"    console.log(\"Can't get business detail, end test\", jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-business/api/v1/business/get-current",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-business",
								"api",
								"v1",
								"business",
								"get-current"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "account coa",
			"item": [
				{
					"name": "get_list_internal_account",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let coa = [];",
									"    try {",
									"        for(let i in jsData.data){",
									"            let sub_group_i = [];",
									"            for(let j in jsData.data[i].sub_group){",
									"                let accounts_j = [];",
									"                for(let k in jsData.data[i].sub_group[j].accounts){",
									"                    accounts_j[accounts_j.length] = {",
									"                        \"account_name\":jsData.data[i].sub_group[j].accounts[k].account_name,",
									"                        \"account_name_custom\":jsData.data[i].sub_group[j].accounts[k].account_name_custom,",
									"                        \"account_id\":jsData.data[i].sub_group[j].accounts[k].id,",
									"                        \"business_id\":jsData.data[i].sub_group[j].accounts[k].business_id,",
									"                        \"account_source\":jsData.data[i].sub_group[j].accounts[k].account_source,",
									"                        \"account_type\":jsData.data[i].sub_group[j].accounts[k].account_type,",
									"                        \"account_key\":jsData.data[i].sub_group[j].accounts[k].account_key,",
									"                        \"account_number\":jsData.data[i].sub_group[j].accounts[k].account_number,",
									"                        \"coa_type\":jsData.data[i].sub_group[j].accounts[k].coa_type,",
									"                        \"status\":jsData.data[i].sub_group[j].accounts[k].status,",
									"                        \"parent_account_id\":jsData.data[i].sub_group[j].accounts[k].parent_account_id,",
									"                        \"description\":jsData.data[i].sub_group[j].accounts[k].description,",
									"                        \"open_amount\":jsData.data[i].sub_group[j].accounts[k].open_amount,",
									"                        \"currency\":jsData.data[i].sub_group[j].accounts[k].currency",
									"                    }",
									"",
									"                    if(jsData.data[i].sub_group[j].accounts[k].account_key == \"B1001\"){",
									"                        pm.environment.set(\"C-account_payable\",jsData.data[i].sub_group[j].accounts[k]);",
									"                    }",
									"                }",
									"",
									"                sub_group_i[sub_group_i.length] = {",
									"                    \"sub_group_name\":jsData.data[i].sub_group[j].name,",
									"                    \"sub_group_id\":jsData.data[i].sub_group[j].id,",
									"                    \"sub_group_value\":jsData.data[i].sub_group[j].value,",
									"                    \"sub_group_description\":jsData.data[i].sub_group[j].description,",
									"                    \"accounts\":accounts_j",
									"                }",
									"            }",
									"",
									"            coa[coa.length] = {",
									"                \"group_name\":jsData.data[i].name,",
									"                \"value\":jsData.data[i].value,",
									"                \"index\":jsData.data[i].index,",
									"                \"sub_group\":sub_group_i",
									"            }",
									"        }",
									"    } catch {",
									"        console.log(\"can't get all account in coa\");",
									"    }",
									"",
									"    pm.test(\"Got coa of this user's business\", function () {",
									"        pm.expect(coa.length > 0).to.be.true;",
									"    });",
									"",
									"    if(coa.length > 0){",
									"        // console.log(\"coa: \", coa);",
									"        pm.environment.set(\"C-coa\",coa);",
									"        let list_debit_account = [];",
									"        let list_credit_account = [];",
									"        /**",
									"         * lấy những account_id và phân loại thành debit/credit",
									"         * - credit: tài khoản (only cash & bank)",
									"         * - debit: phân loại (all)",
									"         */ ",
									"        for(let i in coa){",
									"            for(let j in coa[i].sub_group){",
									"                for(let k in coa[i].sub_group[j].accounts){",
									"                    // if(coa[i].group_name == \"income\" || coa[i].group_name == \"expense\"){ // mở điều kiện này khi cần debug tạo tnx có report cassh-flow",
									"                        list_debit_account[list_debit_account.length] = coa[i].sub_group[j].accounts[k];",
									"                    // }",
									"                    if(coa[i].sub_group[j].sub_group_value == \"A1\"){ ",
									"                        // console.log(\"debug: \", coa[i].sub_group[j].accounts[k]);",
									"                        if(coa[i].sub_group[j].accounts[k].account_name.includes(\"[API]\")){ // do 1 số name bị null (dev chưa validation dẫn đến report sẽ không biết của account nào - report ko trả về id)",
									"                            list_credit_account[list_credit_account.length] = coa[i].sub_group[j].accounts[k];",
									"                        }",
									"                    }",
									"                }",
									"            }",
									"        }",
									"",
									"        // console.log(\"list_debit_account: \", list_debit_account);",
									"        // console.log(\"list_credit_account: \", list_credit_account);",
									"",
									"        pm.environment.set(\"C-list_debit_account\",list_debit_account);",
									"        pm.environment.set(\"C-list_credit_account\",list_credit_account);",
									"        ",
									"        postman.setNextRequest(\"get_list_payment_account\"); // get_list_payment_account",
									"    } else {",
									"        console.log(\"Can't get list internal account, end test \");",
									"        postman.setNextRequest(null);",
									"    }",
									"} else {",
									"    console.log(\"Can't get list internal account, end test \", jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{finone_url}}​/fo-ledger/api/v1/account/get-list-setting?business_id={{C-business_id}}&coa_type=",
							"host": [
								"{{finone_url}}​"
							],
							"path": [
								"fo-ledger",
								"api",
								"v1",
								"account",
								"get-list-setting"
							],
							"query": [
								{
									"key": "business_id",
									"value": "{{C-business_id}}"
								},
								{
									"key": "coa_type",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get_internal_account_detail",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/**",
									" * Only check credit_account",
									" */",
									"",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let list_internal_account = pm.environment.get(\"C-list_internal_account\");",
									"let pos = pm.environment.get(\"C-pos\");",
									"if(!pos){",
									"    pos = 0;",
									"    pm.environment.set(\"C-pos\",pos);",
									"}",
									"",
									"let internal_account_id = list_internal_account[pos].account_id;",
									"console.log(\"view detail account: \" + account_id);",
									"",
									"pm.environment.set(\"C-internal_account_id\",internal_account_id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    const jsData = pm.response.json();",
									"    // let testcase = pm.environment.get(\"C-testcase\");",
									"    console.log(\"Debug: \" + JSON.stringify(jsData));",
									"",
									"    let list_internal_account = pm.environment.get(\"C-list_internal_account\");",
									"    let pos = pm.environment.get(\"C-pos\");",
									"",
									"    if(pos >= list_internal_account.length - 1){",
									"        pm.environment.unset(\"C-pos\");",
									"",
									"        postman.setNextRequest(\"get_list_tax\"); // get_list_tax",
									"    } else {",
									"        pos++;",
									"        pm.environment.set(\"C-pos\",pos);",
									"",
									"        postman.setNextRequest(\"get_internal_account_detail\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get internal account detail, end test\");",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{finan_base_url}}​​/finan-ledger/api/v1/account/detail/{{C-internal_account_id}}",
							"host": [
								"{{finan_base_url}}​​"
							],
							"path": [
								"finan-ledger",
								"api",
								"v1",
								"account",
								"detail",
								"{{C-internal_account_id}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.request.headers.add({",
							" key: \"authorization\",",
							" value: \"Bearer \" + pm.environment.get(\"C-userToken\")",
							"});",
							"",
							"pm.request.headers.add({",
							" key: \"Content-Type\",",
							" value: \"application/json\"",
							"});"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "account cash_n_bank",
			"item": [
				{
					"name": "get_list_payment_account",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    // let total_account = jsData.data[0].accounts.length;",
									"    let list_credit_account = pm.environment.get(\"C-list_credit_account\");",
									"",
									"    switch(testcase){",
									"        case 2:",
									"            for(let i in list_credit_account){",
									"                for(let j in jsData.data[0].accounts){",
									"                    if(list_credit_account[i].account_id == jsData.data[0].accounts[j].id){",
									"                        // list_credit_account[i].open_amount = jsData.data[0].accounts[j].open_amount;",
									"                        list_credit_account[i].total_balance_amount = jsData.data[0].accounts[j].total_balance_amount;",
									"                        // list_credit_account[i].status = jsData.data[0].accounts[j].status;",
									"                        break;",
									"                    }",
									"                }",
									"            }",
									"            pm.environment.set(\"C-list_credit_account\",list_credit_account);",
									"            // console.log(\"list_credit_account: \" + JSON.stringify(list_credit_account));",
									"",
									"            postman.setNextRequest(\"get_list_po\"); // get_list_po",
									"            break;",
									"        case 4: case 6:",
									"            let ranDebitPos = pm.environment.get(\"C-ranDebitPos\");",
									"            let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"            let isFound = false;",
									"            for(let j in jsData.data[0].accounts){",
									"                if(list_credit_account[ranDebitPos].account_id == jsData.data[0].accounts[j].id){",
									"                    isFound = true;",
									"",
									"                    pm.test(\"total_balance_amount descrease \" + tnx_obj.amount, function () {",
									"                        console.log(\"old: \" + list_credit_account[ranDebitPos].total_balance_amount);",
									"                        console.log(\"exp: \" + (list_credit_account[ranDebitPos].total_balance_amount - tnx_obj.amount));",
									"                        console.log(\"act: \" + jsData.data[0].accounts[j].total_balance_amount);",
									"                        pm.expect(jsData.data[0].accounts[j].total_balance_amount == list_credit_account[ranDebitPos].total_balance_amount - tnx_obj.amount).to.be.true;",
									"                    });",
									"                    break;",
									"                }",
									"            }",
									"",
									"            pm.test(\"Found account \" + list_credit_account[ranDebitPos].account_name, function () {",
									"                pm.expect(isFound).to.be.true;",
									"            });",
									"",
									"            postman.setNextRequest(\"get_list_po\"); // get_list_po",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get list payment account, end test\", jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-ledger/api/v1/account/get-list-sub?business_id={{C-business_id}}&sub_account_key=A1",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-ledger",
								"api",
								"v1",
								"account",
								"get-list-sub"
							],
							"query": [
								{
									"key": "business_id",
									"value": "{{C-business_id}}"
								},
								{
									"key": "sub_account_key",
									"value": "A1"
								},
								{
									"key": "account_type",
									"value": "manual",
									"description": "manual, link_bank,va_bank",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "contact",
			"item": [
				{
					"name": "get_list_contact",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// const clRandom = pm.require('@chaule2906/cl-random');",
									"// ============================= random number between min and max",
									"function getRandomInt(min, max) {",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = pm.response.json();",
									"if(pm.response.code == 200 && jsData.code == 102000){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let configs = pm.environment.get(\"C-configs\");",
									"    let total_pages = jsData.meta.total_pages;",
									"    let page = pm.environment.get(\"C-page\");",
									"",
									"    let list_contact = pm.environment.get(\"C-list_contact\");",
									"    if(!list_contact){",
									"        list_contact = [];",
									"    }",
									"",
									"    for(let item in jsData.data){",
									"        if(jsData.data[item].contact_name.includes(\"[API]\")){",
									"            list_contact[list_contact.length] = {",
									"                \"contact_id\":jsData.data[item].id,",
									"                \"name\":jsData.data[item].contact_name,",
									"                \"phone_number\":jsData.data[item].phone_number,",
									"                \"email\":jsData.data[item].email,",
									"                \"po_config\":jsData.data[item].po_config,",
									"                \"tax_code\":jsData.data[item].tax_code,",
									"                \"payment_methods\":jsData.data[item].payment_methods,",
									"                \"total_payable\":jsData.data[item].total_payable,",
									"                \"total_receivable\":jsData.data[item].total_receivable",
									"            }",
									"        }",
									"    }",
									"    pm.environment.set(\"C-list_contact\",list_contact);",
									"",
									"    if(page >= total_pages){",
									"        // must clear page & page_size",
									"        pm.environment.unset(\"C-page\");",
									"        pm.environment.unset(\"C-page_size\");",
									"",
									"        let contact_obj, old_contact_obj;",
									"        let po_obj = pm.environment.get(\"C-po_obj\"); ",
									"        switch(testcase){",
									"            case 2:",
									"                pm.test(\"Got all contact! \" + list_contact.length, function () {",
									"                    pm.environment.set(\"C-list_contact\",list_contact);",
									"                    pm.expect(list_contact.length > 0).to.be.true;",
									"                });",
									"",
									"                // let contact_obj = list_contact[clRandom.getRandomInt(0,list_contact.length - 1)];",
									"                contact_obj = list_contact[getRandomInt(0,list_contact.length - 1)];",
									"                console.log(\"will create po for contact: \", contact_obj);",
									"                pm.environment.set(\"C-contact_obj\",contact_obj);",
									"                pm.environment.set(\"C-contact_id\",contact_obj.contact_id);",
									"",
									"                postman.setNextRequest(\"get_list_sku\"); // get_list_sku",
									"                break;",
									"            case 5: case 8:",
									"                old_contact_obj = pm.environment.get(\"C-contact_obj\");",
									"                for(let i in list_contact){",
									"                    if(list_contact[i].contact_id == old_contact_obj.contact_id){",
									"                        contact_obj = list_contact[i];",
									"                        break;",
									"                    }",
									"                }",
									"",
									"                switch(configs.create_po_status){",
									"                    case \"saved\":",
									"                    case \"completed\":",
									"                        // tạo po sẽ tăng total_receivable cho customer",
									"                        pm.test(\"total_receivable increase \" + po_obj.exp_total_amount, function () {",
									"                            console.log(\"old: \" + old_contact_obj.total_receivable);",
									"                            console.log(\"new: \" + contact_obj.total_receivable);",
									"                            pm.expect(contact_obj.total_receivable).to.eql(old_contact_obj.total_receivable + po_obj.exp_total_amount);",
									"                        });",
									"",
									"                        break;",
									"                    case \"draft\":",
									"                    default:",
									"                        pm.test(\"Nothing happen!\", function () {",
									"                            pm.expect(JSON.stringify(old_contact_obj) == JSON.stringify(contact_obj)).to.be.true;",
									"                        });",
									"                        break;",
									"                }",
									"            ",
									"                postman.setNextRequest(\"get_list_batch\"); // get_list_batch",
									"                break;",
									"            default:",
									"                console.log(\"Missing flow, end test\");",
									"                postman.setNextRequest(null);",
									"                break;",
									"        }",
									"    } else {",
									"        page++;",
									"        pm.environment.set(\"C-page\",page);",
									"",
									"        console.log(\"view next page (\" + page + \") to get more contact\");",
									"        postman.setNextRequest(\"get_list_contact\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get list contact, end test\");",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let page = pm.environment.get(\"C-page\");",
									"",
									"if(!page){",
									"    page = 1;",
									"    pm.environment.set(\"C-page\",page);",
									"",
									"    let page_size = 50;",
									"    pm.environment.set(\"C-page_size\",page_size);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-business/api/v1/contact/get-list?business_id={{C-business_id}}&page={{C-page}}&page_size={{C-page_size}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-business",
								"api",
								"v1",
								"contact",
								"get-list"
							],
							"query": [
								{
									"key": "search",
									"value": "",
									"disabled": true
								},
								{
									"key": "business_id",
									"value": "{{C-business_id}}"
								},
								{
									"key": "page",
									"value": "{{C-page}}"
								},
								{
									"key": "page_size",
									"value": "{{C-page_size}}"
								},
								{
									"key": "sort",
									"value": "",
									"disabled": true
								},
								{
									"key": "option",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "purchase_order",
			"item": [
				{
					"name": "get_po_overview",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"let configs = pm.environment.get(\"C-configs\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let configs = pm.environment.get(\"C-configs\");",
									"",
									"    let po_overview = null;",
									"    try {",
									"        po_overview = jsData.data;",
									"    } catch {",
									"        console.log(\"missing data\");",
									"    }",
									"",
									"    let old_po_overview;",
									"    switch(testcase){",
									"        case 2:",
									"            pm.test(\"got po_overview data\", function () {",
									"                pm.expect(po_overview != null).to.be.true;",
									"            });",
									"            pm.environment.set(\"C-po_overview\",po_overview);",
									"",
									"            postman.setNextRequest(\"get_list_po\"); // get_list_po",
									"            break;",
									"        case 5: case 8:",
									"            let po_obj = pm.environment.get(\"C-po_obj\");",
									"",
									"            old_po_overview = pm.environment.get(\"C-po_overview\");",
									"            console.log(\"old_po_overview: \", old_po_overview);",
									"            console.log(\"po_overview: \", po_overview);",
									"",
									"            switch(configs.create_po_status){",
									"                case \"saved\":",
									"                    // total_processing",
									"                    pm.test(\"total_processing increase \" + po_obj.exp_total_amount, function () {",
									"                        pm.expect(old_po_overview.total_processing + po_obj.exp_total_amount).to.eql(po_overview.total_processing);",
									"                    });",
									"",
									"                    // count_processing",
									"                    pm.test(\"count_processing increase 1\", function () {",
									"                        pm.expect(old_po_overview.count_processing + 1).to.eql(po_overview.count_processing);",
									"                    });",
									"",
									"                    // total_today",
									"                    pm.test(\"nothing happen with total_today\", function () {",
									"                        pm.expect(old_po_overview.total_today).to.eql(po_overview.total_today);",
									"                    });",
									"",
									"                    // count_today",
									"                    pm.test(\"nothing happen with count_today \", function () {",
									"                        pm.expect(old_po_overview.count_today).to.eql(po_overview.count_today);",
									"                    });",
									"",
									"                    // total_unpaid => phụ thuộc payment gửi lên, tạm thời tính là chưa thanh toán => handle ở luồng thanh toán po",
									"                    pm.test(\"total_unpaid increase \" + po_obj.exp_total_amount, function () {",
									"                        pm.expect(old_po_overview.total_unpaid + po_obj.exp_total_amount).to.eql(po_overview.total_unpaid);",
									"                    });",
									"",
									"                    // count_unpaid => phụ thuộc payment gửi lên, tạm thời tính là chưa thanh toán",
									"                    pm.test(\"count_unpaid increase 1\", function () {",
									"                        pm.expect(old_po_overview.count_unpaid + 1).to.eql(po_overview.count_unpaid);",
									"                    });",
									"                    break;",
									"                case \"completed\":",
									"                    // total_processing",
									"                    pm.test(\"Nothing happen with total_processing\", function () {",
									"                        pm.expect(old_po_overview.total_processing).to.eql(po_overview.total_processing);",
									"                    });",
									"",
									"                    // count_processing",
									"                    pm.test(\"Nothing happen with count_processing\", function () {",
									"                        pm.expect(old_po_overview.count_processing).to.eql(po_overview.count_processing);",
									"                    });",
									"",
									"                    // total_today",
									"                    pm.test(\"count_today increase \" + po_obj.exp_total_amount, function () {",
									"                        pm.expect(old_po_overview.total_today + po_obj.exp_total_amount).to.eql(po_overview.total_today);",
									"                    });",
									"",
									"                    // count_today",
									"                    pm.test(\"count_today increase 1\", function () {",
									"                        pm.expect(old_po_overview.count_today + 1).to.eql(po_overview.count_today);",
									"                    });",
									"",
									"                    // total_unpaid => phụ thuộc payment gửi lên, tạm thời tính là chưa thanh toán",
									"                    pm.test(\"total_unpaid increase \" + po_obj.exp_total_amount, function () {",
									"                        pm.expect(old_po_overview.total_unpaid + po_obj.exp_total_amount).to.eql(po_overview.total_unpaid);",
									"                    });",
									"",
									"                    // count_unpaid => phụ thuộc payment gửi lên, tạm thời tính là chưa thanh toán",
									"                    pm.test(\"count_unpaid increase 1\", function () {",
									"                        pm.expect(old_po_overview.count_unpaid + 1).to.eql(po_overview.count_unpaid);",
									"                    });",
									"                    break;",
									"                case \"draft\":",
									"                default:",
									"                    pm.test(\"nothing happen with po_overview\", function () {",
									"                        pm.expect(JSON.stringify(old_po_overview)).to.eql(JSON.stringify(po_overview));",
									"                    });",
									"                    break;",
									"            }",
									"",
									"            postman.setNextRequest(\"get_list_contact\"); // get_list_contact",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get po overview\");",
									"    postman.setNextRequest(null);",
									"    // postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/po/overview?list_contact_ids={{C-filter_contact_ids}}&option=&payment_status=&search=&status=",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"po",
								"overview"
							],
							"query": [
								{
									"key": "branch_id",
									"value": "{{C-filter_branch_id}}",
									"disabled": true
								},
								{
									"key": "start_time_created_at",
									"value": "",
									"disabled": true
								},
								{
									"key": "end_time_created_at",
									"value": "",
									"disabled": true
								},
								{
									"key": "start_time_due_at",
									"value": "",
									"disabled": true
								},
								{
									"key": "end_time_due_at",
									"value": "",
									"disabled": true
								},
								{
									"key": "list_contact_ids",
									"value": "{{C-filter_contact_ids}}"
								},
								{
									"key": "option",
									"value": ""
								},
								{
									"key": "payment_status",
									"value": ""
								},
								{
									"key": "search",
									"value": ""
								},
								{
									"key": "sort",
									"value": "asc",
									"disabled": true
								},
								{
									"key": "status",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get_list_po",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let page = pm.environment.get(\"C-page\");",
									"",
									"if(!page){",
									"    page = 1;",
									"    pm.environment.set(\"C-page\",page);",
									"",
									"    let page_size = 50;",
									"    pm.environment.set(\"C-page_size\",page_size);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ============================= random number between min and max",
									"function getRandomInt(min, max) {",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = JSON.parse(responseBody);",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let total_pages = 1;",
									"    try {",
									"        total_pages = jsData.meta.total_pages;",
									"    } catch {",
									"        console.log(\"currently, this branch with null data\");",
									"    }",
									"    let page = pm.environment.get(\"C-page\");",
									"",
									"    let list_po, old_list_po;",
									"    let list_un_paid_po, list_partial_paid_po, list_fully_paid_po;",
									"    switch(testcase){",
									"        case 2:",
									"            list_po = pm.environment.get(\"C-list_po\");",
									"            list_un_paid_po = pm.environment.get(\"C-list_un_paid_po\");",
									"            list_partial_paid_po = pm.environment.get(\"C-list_partial_paid_po\");",
									"            list_fully_paid_po = pm.environment.get(\"C-list_fully_paid_po\");",
									"",
									"            if(!list_po){",
									"                list_po = [];",
									"                list_un_paid_po = [];",
									"                list_partial_paid_po = [];",
									"                list_fully_paid_po = [];",
									"            }",
									"            break;",
									"        case 4: case 6:",
									"            old_list_po = pm.environment.get(\"C-old_list_po\");",
									"            if(!old_list_po){",
									"                old_list_po = pm.environment.get(\"C-list_po\");",
									"                pm.environment.unset(\"C-list_po\");",
									"                pm.environment.unset(\"C-list_un_paid_po\");",
									"                pm.environment.unset(\"C-list_partial_paid_po\");",
									"                pm.environment.unset(\"C-list_fully_paid_po\");",
									"                pm.environment.set(\"C-old_list_po\",old_list_po);",
									"            }",
									"",
									"            list_po = pm.environment.get(\"C-list_po\");",
									"            list_un_paid_po = pm.environment.get(\"C-list_un_paid_po\");",
									"            list_partial_paid_po = pm.environment.get(\"C-list_partial_paid_po\");",
									"            list_fully_paid_po = pm.environment.get(\"C-list_fully_paid_po\");",
									"            if(!list_po){",
									"                list_po = [];",
									"                list_un_paid_po = [];",
									"                list_partial_paid_po = [];",
									"                list_fully_paid_po = [];",
									"            }",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow\");",
									"            break;",
									"    }",
									"",
									"    let test_date = new Date(\"2024-03-24\"); // lấy po từ 24",
									"    for(let item in jsData.data){",
									"        if((jsData.data[item].cart_status == \"completed\" || jsData.data[item].cart_status == \"saved\") && jsData.data[item].total_amount != 0 && new Date(jsData.data[item].created_at) > test_date){",
									"            /** ",
									"             * Status docs: https://sobanhang.larksuite.com/wiki/K42mwQN7hifMjxktLQVuu2Kqszg",
									"             * include:",
									"             *  - General status: status (draft, active => approved, overdue if current > due_at)",
									"             *  - Email status: send_at (!= null => sent, other is unsent)",
									"             *  - Payment status: payment_status (unpaid - un_paid, partial_paid, paid - fully_paid)",
									"            */",
									"            switch(jsData.data[item].payment_status){",
									"                case \"fully_paid\":",
									"                    // console.log(\"po \" + jsData.data[item].order_code + \" - fully_paid\");",
									"                    list_fully_paid_po[list_fully_paid_po.length] = {",
									"                        \"po_id\":jsData.data[item].id,",
									"                        \"po_code\":jsData.data[item].po_code,",
									"                        \"system_code\":jsData.data[item].system_code,",
									"                        // \"status\":jsData.data[item].status,",
									"                        \"payment_status\":jsData.data[item].payment_status,",
									"                        \"sub_total_amount\":jsData.data[item].sub_total_amount,",
									"                        \"total_amount\":jsData.data[item].total_amount,",
									"                        // \"discount_amount\":jsData.data[item].discount_amount,",
									"                        // \"total_tax_amount\":jsData.data[item].total_tax_amount,",
									"                        \"payment_due_amount\":jsData.data[item].payment_due_amount,",
									"                        \"paid_amount\":jsData.data[item].paid_amount,",
									"                        // \"entry_type\":jsData.data[item].entry_type,",
									"                        \"note\":jsData.data[item].note,",
									"                        \"value_at\":jsData.data[item].value_at,",
									"                        \"due_at\":jsData.data[item].due_at,",
									"                        // \"send_at\":jsData.data[item].send_at,",
									"                        \"account_id\":jsData.data[item].account_id,",
									"                        \"tax_type\":jsData.data[item].tax_type,",
									"                        // \"email\":jsData.data[item].email,",
									"                        // \"payment_info\":jsData.data[item].payment_info,",
									"                        \"contact_id\":jsData.data[item].contact_id,",
									"                        // \"contact_name\":jsData.data[item].contact_info.contact_name,",
									"                        // \"contact_phone\":jsData.data[item].contact_info.contact_phone",
									"                    }",
									"                    break;",
									"                case \"un_paid\":",
									"                    // console.log(\"po \" + jsData.data[item].order_code + \" - un_paid\");",
									"                    list_un_paid_po[list_un_paid_po.length] = {",
									"                        \"po_id\":jsData.data[item].id,",
									"                        \"po_code\":jsData.data[item].po_code,",
									"                        \"system_code\":jsData.data[item].system_code,",
									"                        // \"status\":jsData.data[item].status,",
									"                        \"payment_status\":jsData.data[item].payment_status,",
									"                        \"sub_total_amount\":jsData.data[item].sub_total_amount,",
									"                        \"total_amount\":jsData.data[item].total_amount,",
									"                        // \"discount_amount\":jsData.data[item].discount_amount,",
									"                        // \"total_tax_amount\":jsData.data[item].total_tax_amount,",
									"                        \"payment_due_amount\":jsData.data[item].payment_due_amount,",
									"                        \"paid_amount\":jsData.data[item].paid_amount,",
									"                        // \"entry_type\":jsData.data[item].entry_type,",
									"                        \"note\":jsData.data[item].note,",
									"                        \"value_at\":jsData.data[item].value_at,",
									"                        \"due_at\":jsData.data[item].due_at,",
									"                        // \"send_at\":jsData.data[item].send_at,",
									"                        \"account_id\":jsData.data[item].account_id,",
									"                        \"tax_type\":jsData.data[item].tax_type,",
									"                        // \"email\":jsData.data[item].email,",
									"                        // \"payment_info\":jsData.data[item].payment_info,",
									"                        \"contact_id\":jsData.data[item].contact_id,",
									"                        // \"contact_name\":jsData.data[item].contact_info.contact_name,",
									"                        // \"contact_phone\":jsData.data[item].contact_info.contact_phone",
									"                    }",
									"                    break;",
									"                case \"partial_paid\":",
									"                    // console.log(\"po \" + jsData.data[item].order_code + \" - partial_paid\");",
									"                    list_partial_paid_po[list_partial_paid_po.length] = {",
									"                        \"po_id\":jsData.data[item].id,",
									"                        \"po_code\":jsData.data[item].po_code,",
									"                        \"system_code\":jsData.data[item].system_code,",
									"                        // \"status\":jsData.data[item].status,",
									"                        \"payment_status\":jsData.data[item].payment_status,",
									"                        \"sub_total_amount\":jsData.data[item].sub_total_amount,",
									"                        \"total_amount\":jsData.data[item].total_amount,",
									"                        // \"discount_amount\":jsData.data[item].discount_amount,",
									"                        // \"total_tax_amount\":jsData.data[item].total_tax_amount,",
									"                        \"payment_due_amount\":jsData.data[item].payment_due_amount,",
									"                        \"paid_amount\":jsData.data[item].paid_amount,",
									"                        // \"entry_type\":jsData.data[item].entry_type,",
									"                        \"note\":jsData.data[item].note,",
									"                        \"value_at\":jsData.data[item].value_at,",
									"                        \"due_at\":jsData.data[item].due_at,",
									"                        // \"send_at\":jsData.data[item].send_at,",
									"                        \"account_id\":jsData.data[item].account_id,",
									"                        \"tax_type\":jsData.data[item].tax_type,",
									"                        // \"email\":jsData.data[item].email,",
									"                        // \"payment_info\":jsData.data[item].payment_info,",
									"                        \"contact_id\":jsData.data[item].contact_id,",
									"                        // \"contact_name\":jsData.data[item].contact_info.contact_name,",
									"                        // \"contact_phone\":jsData.data[item].contact_info.contact_phone",
									"                    }",
									"                    break;",
									"                default:",
									"                    console.log(\"po \" + jsData.data[item].order_code + \" \" + jsData.data[item].payment_status);",
									"                    break;",
									"            }",
									"            // console.log(\"--- value_at \" + jsData.data[item].value_at);",
									"            // console.log(\"--- due_at \" + jsData.data[item].due_at);",
									"",
									"            list_po[list_po.length] = {",
									"                \"po_id\":jsData.data[item].id,",
									"                \"po_code\":jsData.data[item].po_code,",
									"                \"system_code\":jsData.data[item].system_code,",
									"                // \"status\":jsData.data[item].status,",
									"                \"payment_status\":jsData.data[item].payment_status,",
									"                \"sub_total_amount\":jsData.data[item].sub_total_amount,",
									"                \"total_amount\":jsData.data[item].total_amount,",
									"                // \"discount_amount\":jsData.data[item].discount_amount,",
									"                // \"total_tax_amount\":jsData.data[item].total_tax_amount,",
									"                \"payment_due_amount\":jsData.data[item].payment_due_amount,",
									"                \"paid_amount\":jsData.data[item].paid_amount,",
									"                // \"entry_type\":jsData.data[item].entry_type,",
									"                \"note\":jsData.data[item].note,",
									"                \"value_at\":jsData.data[item].value_at,",
									"                \"due_at\":jsData.data[item].due_at,",
									"                // \"send_at\":jsData.data[item].send_at,",
									"                \"account_id\":jsData.data[item].account_id,",
									"                \"tax_type\":jsData.data[item].tax_type,",
									"                // \"email\":jsData.data[item].email,",
									"                // \"payment_info\":jsData.data[item].payment_info,",
									"                \"contact_id\":jsData.data[item].contact_id,",
									"                // \"contact_name\":jsData.data[item].contact_info.contact_name,",
									"                // \"contact_phone\":jsData.data[item].contact_info.contact_phone",
									"            }",
									"        }",
									"    }",
									"    pm.environment.set(\"C-list_po\",list_po);",
									"    pm.environment.set(\"C-list_un_paid_po\",list_un_paid_po);",
									"    pm.environment.set(\"C-list_partial_paid_po\",list_partial_paid_po);",
									"    pm.environment.set(\"C-list_fully_paid_po\",list_fully_paid_po);",
									"",
									"    if(page >= total_pages){",
									"        // must clear page & page_size",
									"        pm.environment.unset(\"C-page\");",
									"        pm.environment.unset(\"C-page_size\");",
									"",
									"        let po_obj;",
									"        switch(testcase){",
									"            case 2:",
									"                pm.test(\"Got all po! \" + list_po.length, function () {",
									"                    pm.expect(list_po.length > 0).to.be.true;",
									"                });",
									"",
									"                let poPos;",
									"                switch(1){ // getRandomInt(1,3)",
									"                    case 1:",
									"                        console.log(\"create transaction for un_paid po \" + list_un_paid_po.length);",
									"                        poPos = getRandomInt(0,list_un_paid_po.length - 1);",
									"                        po_obj = list_un_paid_po[poPos];",
									"                        break;",
									"                    case 2:",
									"                        console.log(\"create transaction for partial_paid po \" + list_partial_paid_po.length);",
									"                        poPos = getRandomInt(0,list_partial_paid_po.length - 1);",
									"                        po_obj = list_partial_paid_po[poPos];",
									"                        break;",
									"                    case 3:",
									"                    default:",
									"                        console.log(\"create transaction for fully_paid po \" + list_fully_paid_po.length);",
									"                        poPos = getRandomInt(0,list_fully_paid_po.length - 1);",
									"                        po_obj = list_fully_paid_po[poPos];",
									"                        break;",
									"                }",
									"                pm.environment.set(\"C-po_obj\",po_obj);",
									"                console.log(\"=============================================\");",
									"                console.log(\"Will create transaction with po \", po_obj);",
									"                console.log(\"=============================================\");",
									"",
									"                postman.setNextRequest(\"get_list_posting\"); // get_list_posting",
									"                break;",
									"            case 4: case 6:",
									"                po_obj = pm.environment.get(\"C-po_obj\");",
									"                let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"                let isFound = false;",
									"                for(let i in list_po){",
									"                    if(list_po[i].po_id == po_obj.po_id){",
									"                        isFound = true;",
									"",
									"                        pm.test(\"Update paid_amount \" + tnx_obj.amount, function () {",
									"                            console.log(\"old: \", po_obj);",
									"                            console.log(\"new: \", list_po[i]);",
									"                            pm.expect((po_obj.paid_amount + tnx_obj.amount).toFixed(2) == list_po[i].paid_amount.toFixed(2)).to.be.true;",
									"                        });",
									"",
									"                        pm.test(\"Update payment_due_amount (số tiền còn nợ) - decrease \" + tnx_obj.amount, function () {",
									"                            console.log(\"act: \" + list_po[i].payment_due_amount);",
									"                            console.log(\"exp: \" + (po_obj.payment_due_amount - tnx_obj.amount));",
									"                            pm.expect((po_obj.payment_due_amount - tnx_obj.amount).toFixed(2) == list_po[i].payment_due_amount.toFixed(2)).to.be.true;",
									"                        });",
									"",
									"                        if(testcase == 6){",
									"                            pm.test(\"Update payment_status to fully_paid\", function () {",
									"                                pm.expect(\"fully_paid\" == list_po[i].payment_status).to.be.true;",
									"                            });",
									"                        } else {",
									"                            pm.test(\"Update payment_status to partial_paid\", function () {",
									"                                pm.expect(\"partial_paid\" == list_po[i].payment_status).to.be.true;",
									"                            });",
									"                        }",
									"                        break;",
									"                    }",
									"                }",
									"",
									"                pm.test(\"Found po\", function () {",
									"                    pm.expect(isFound).to.be.true;",
									"                });",
									"",
									"                postman.setNextRequest(\"get_po_detail\"); // get_po_detail",
									"                break;",
									"            default:",
									"                console.log(\"Missing flow, end test\");",
									"                postman.setNextRequest(null);",
									"                break;",
									"        }",
									"    } else {",
									"        page++;",
									"        pm.environment.set(\"C-page\",page);",
									"",
									"        console.log(\"view next page (\" + page + \") to get more po\");",
									"        postman.setNextRequest(\"get_list_po\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get list po, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}",
									"            "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/po/get-list?branch_id={{C-branch_id}}&page={{C-page}}&page_size={{C-page_size}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"po",
								"get-list"
							],
							"query": [
								{
									"key": "branch_id",
									"value": "{{C-branch_id}}"
								},
								{
									"key": "contact_id",
									"value": "",
									"disabled": true
								},
								{
									"key": "start_time_created_at",
									"value": "",
									"disabled": true
								},
								{
									"key": "end_time_created_at",
									"value": "",
									"disabled": true
								},
								{
									"key": "start_time_due_at",
									"value": "",
									"disabled": true
								},
								{
									"key": "end_time_due_at",
									"value": "",
									"disabled": true
								},
								{
									"key": "list_contact_ids",
									"value": "",
									"disabled": true
								},
								{
									"key": "option",
									"value": null,
									"disabled": true
								},
								{
									"key": "page",
									"value": "{{C-page}}"
								},
								{
									"key": "page_size",
									"value": "{{C-page_size}}"
								},
								{
									"key": "payment_status",
									"value": null,
									"disabled": true
								},
								{
									"key": "search",
									"value": null,
									"disabled": true
								},
								{
									"key": "sort",
									"value": "",
									"disabled": true
								},
								{
									"key": "status",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get_po_detail",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let po_obj = pm.environment.get(\"C-po_obj\");",
									"let po_id = po_obj.po_id;",
									"console.log(\"view detail po: \" + po_id);",
									"",
									"pm.environment.set(\"C-po_id\",po_id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    console.log(\"Debug: \" + JSON.stringify(jsData));",
									"",
									"    let po_obj = pm.environment.get(\"C-po_obj\");",
									"    let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"    ",
									"    pm.test(\"Update paid_amount \" + tnx_obj.amount, function () {",
									"        // console.log(\"old: \", po_obj);",
									"        // console.log(\"new: \", jsData.data);",
									"        pm.expect((po_obj.paid_amount + tnx_obj.amount).toFixed(2) == jsData.data.paid_amount.toFixed(2)).to.be.true;",
									"    });",
									"",
									"    pm.test(\"Update payment_due_amount (số tiền còn nợ) - decrease \" + tnx_obj.amount, function () {",
									"        pm.expect((po_obj.payment_due_amount - tnx_obj.amount).toFixed(2) == jsData.data.payment_due_amount.toFixed(2)).to.be.true;",
									"    });",
									"",
									"    if(testcase == 6){",
									"        pm.test(\"Update payment_status to fully_paid\", function () {",
									"             pm.expect(\"fully_paid\" == jsData.data.payment_status).to.be.true;",
									"        });",
									"    } else {",
									"        pm.test(\"Update payment_status to partial_paid \", function () {",
									"            pm.expect(\"partial_paid\" == jsData.data.payment_status).to.be.true;",
									"        });",
									"    }",
									"",
									"    postman.setNextRequest(\"get_list_posting\"); // get_list_posting",
									"} else {",
									"    console.log(\"Can't get po detail, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/po/get-one/{{C-po_id}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"po",
								"get-one",
								"{{C-po_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_po_overview_branch",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"let configs = pm.environment.get(\"C-configs\");",
									"",
									"let filter_branch_id = \"\"; // nếu ko chọn branch thì truyền rỗng để lấy all",
									"filter_branch_id = configs.none_uuid; // fix tạm để by pass",
									"let filter_contact_ids = \"\";",
									"pm.environment.set(\"C-filter_branch_id\",filter_branch_id);",
									"pm.environment.set(\"C-filter_contact_ids\",filter_contact_ids);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200 || pm.response.code == 400){ // tạm thời để 404 vì BE chưa push code",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let po_overview = null;",
									"    try {",
									"        po_overview = jsData.data;",
									"    } catch {",
									"        console.log(\"missing data\");",
									"    }",
									"",
									"    let old_po_overview;",
									"    switch(testcase){",
									"        case 2:",
									"            pm.test(\"got po_overview data\", function () {",
									"                pm.expect(po_overview != null).to.be.true;",
									"            });",
									"            pm.environment.set(\"C-po_overview\",po_overview);",
									"",
									"            postman.setNextRequest(\"\"); // get_list_po",
									"            break;",
									"        case 5:",
									"            old_po_overview = pm.environment.get(\"C-po_overview\");",
									"            pm.test(\"Nothing happen with po_overview data\", function () {",
									"                pm.expect(JSON.stringify(old_po_overview)).to.eql(JSON.stringify(po_overview));",
									"            });",
									"            ",
									"            postman.setNextRequest(\"\"); // get_list_contact",
									"            break;",
									"        case 8:",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get po overview\");",
									"    postman.setNextRequest(null);",
									"    // postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/po/overview?branch_id={{C-filter_branch_id}}&list_contact_ids={{C-filter_contact_ids}}&option=&payment_status=&search=&status=",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"po",
								"overview"
							],
							"query": [
								{
									"key": "branch_id",
									"value": "{{C-filter_branch_id}}"
								},
								{
									"key": "start_time_created_at",
									"value": "",
									"disabled": true
								},
								{
									"key": "end_time_created_at",
									"value": "",
									"disabled": true
								},
								{
									"key": "start_time_due_at",
									"value": "",
									"disabled": true
								},
								{
									"key": "end_time_due_at",
									"value": "",
									"disabled": true
								},
								{
									"key": "list_contact_ids",
									"value": "{{C-filter_contact_ids}}"
								},
								{
									"key": "option",
									"value": ""
								},
								{
									"key": "payment_status",
									"value": ""
								},
								{
									"key": "search",
									"value": ""
								},
								{
									"key": "sort",
									"value": "asc",
									"disabled": true
								},
								{
									"key": "status",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get_list_po_branch",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let page = pm.environment.get(\"C-page\");",
									"",
									"if(!page){",
									"    page = 1;",
									"    pm.environment.set(\"C-page\",page);",
									"",
									"    let page_size = 50;",
									"    pm.environment.set(\"C-page_size\",page_size);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ============================= random number between min and max",
									"function getRandomInt(min, max) {",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = pm.response.json();",
									"if(pm.response.code == 200 || pm.response.code == 400){ // tạm thời handle 404 vì BE chưa push code",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let total_pages = 0, total_po = 0;",
									"    try {",
									"        total_pages = jsData.meta.total_pages;",
									"        total_po = jsData.meta.total_rows;",
									"    } catch {",
									"        console.log(\"Missing meta data\");",
									"    }",
									"    let page = pm.environment.get(\"C-page\");",
									"",
									"    let list_po, old_total_po;",
									"    switch(testcase){",
									"        case 2:",
									"            pm.environment.unset(\"C-page\");",
									"            pm.environment.unset(\"C-page_size\");",
									"            pm.test(\"Got total po! \" + total_po, function () {",
									"                pm.expect(total_po > 0).to.be.true;",
									"            });",
									"            pm.environment.set(\"C-total_po\",total_po);",
									"",
									"            for(let i in jsData.data){",
									"                if(jsData.data[i].cart_status == \"active\"){",
									"                    pm.environment.set(\"C-existed_po_code\",jsData.data[i].po_code);",
									"                    break;",
									"                }",
									"            }",
									" ",
									"            testcase++;",
									"            // testcase = 6;",
									"            pm.environment.set(\"C-testcase\",testcase);",
									"            postman.setNextRequest(\"calculate_po\"); // calculate_po",
									"            break;",
									"        case 5: case 8:",
									"            list_po = pm.environment.get(\"C-list_po\");",
									"            if(!list_po){",
									"                list_po = [];",
									"            }",
									"",
									"            for(let item in jsData.data){",
									"                list_po[list_po.length] = {",
									"                    \"po_id\":jsData.data[item].id,",
									"                    \"created_at\":jsData.data[item].created_at,",
									"                    \"po_code\":jsData.data[item].po_code,",
									"                    \"system_code\":jsData.data[item].system_code,",
									"                    \"cart_status\":jsData.data[item].cart_status,",
									"                    \"payment_status\":jsData.data[item].payment_status,",
									"                    \"items_amount\":jsData.data[item].items_amount,",
									"                    \"sub_total_amount\":jsData.data[item].sub_total_amount,",
									"                    \"paid_amount\":jsData.data[item].paid_amount,",
									"                    \"currency\":jsData.data[item].currency,",
									"                    \"contact_id\":jsData.data[item].contact_id,",
									"                    \"entry_type\":jsData.data[item].entry_type,",
									"                    \"note\":jsData.data[item].note,",
									"                    \"value_at\":jsData.data[item].value_at,",
									"                    \"due_at\":jsData.data[item].due_at,",
									"                    \"send_at\":jsData.data[item].send_at,",
									"                    \"account_id\":jsData.data[item].account_id,",
									"                    \"tax_type\":jsData.data[item].tax_type,",
									"                    \"final_status\":jsData.data[item].final_status,",
									"                    \"sales_rep_info\":jsData.data[item].sales_rep_info",
									"                }",
									"                // list_po[list_po.length] = jsData.data[item];",
									"            }",
									"            pm.environment.set(\"C-list_po\",list_po);",
									"",
									"            let configs = pm.environment.get(\"C-configs\");",
									"            if(page >= total_pages || page >= configs.limit_page){",
									"                // must clear page & page_size",
									"                pm.environment.unset(\"C-page\");",
									"                pm.environment.unset(\"C-page_size\");",
									"",
									"                let po_obj = pm.environment.get(\"C-po_obj\");",
									"                // console.log(\"po_obj: \", po_obj);",
									"                old_total_po = pm.environment.get(\"C-total_po\");",
									"",
									"                pm.test(\"Total po increase 1\", function () {",
									"                    pm.expect(total_po == old_total_po + 1).to.be.true;",
									"                });",
									"",
									"                let isFound = false;",
									"                for(let i in list_po){",
									"                    if(list_po[i].po_id == po_obj.po_id){",
									"                        isFound = true;",
									"                        console.log(\"debug: \" + JSON.stringify(list_po[i]));",
									"",
									"                        pm.test(\"po_code of po correctly! \" + po_obj.po_code, function () {",
									"                            pm.expect(po_obj.po_code == list_po[i].po_code).to.be.true;",
									"                        });",
									"",
									"                        pm.test(\"sub_total_amount of po correctly! \" + po_obj.sub_total_amount, function () {",
									"                            pm.expect(po_obj.sub_total_amount == list_po[i].sub_total_amount).to.be.true;",
									"                        });",
									"",
									"                        pm.test(\"contact_id of po correctly! \" + po_obj.contact_id, function () {",
									"                            pm.expect(po_obj.contact_id == list_po[i].contact_id).to.be.true;",
									"                        });",
									"",
									"                        pm.test(\"value_at of po correctly! \" + po_obj.value_at, function () {",
									"                            console.log(\"exp value_at: \" + po_obj.value_at);",
									"                            console.log(\"act value_at: \" + list_po[i].value_at);",
									"                            pm.expect(po_obj.value_at.substring(0,17) == list_po[i].value_at.substring(0,17)).to.be.true;",
									"                        });",
									"",
									"                        pm.test(\"due_at of po correctly! \" + po_obj.due_at, function () {",
									"                            console.log(\"exp due_at: \" + po_obj.due_at);",
									"                            console.log(\"act due_at: \" + list_po[i].due_at);",
									"                            pm.expect(po_obj.due_at.substring(0,17) == list_po[i].due_at.substring(0,17)).to.be.true;",
									"                        });",
									"",
									"                        pm.test(\"note of po correctly! \" + po_obj.note, function () {",
									"                            // console.log(\"po at i: \",list_po[i]);",
									"                            pm.expect(po_obj.note == list_po[i].note).to.be.true;",
									"                        });",
									"",
									"                        pm.test(\"tax_type of po correctly! \" + po_obj.tax_type, function () {",
									"                            pm.expect(po_obj.tax_type == list_po[i].tax_type).to.be.true;",
									"                        });",
									"",
									"                        pm.test(\"status of po correctly! \" + po_obj.cart_status, function () {",
									"                            pm.expect(po_obj.cart_status == list_po[i].cart_status).to.be.true;",
									"                        });",
									"",
									"                        // final_status",
									"                        let exp_final_status;",
									"                        if(testcase == 8){",
									"                            let ranTimeCase = pm.environment.get(\"C-ranTimeCase\");",
									"                            if(ranTimeCase == 2 || ranTimeCase == 3){",
									"                                exp_final_status = \"unsent\";",
									"                            } else {",
									"                                exp_final_status = \"overdue\"; // khả năng sẽ sai do đã thay đổi ranTimeCase => update sau",
									"                            }",
									"                        } else {",
									"                            exp_final_status = po_obj.cart_status;",
									"                        }",
									"                        pm.test(\"final_status of po is \" + exp_final_status, function () {",
									"                            console.log(\"act final_status:  \" + list_po[i].final_status);",
									"                            console.log(\"exp final_status:  \" + exp_final_status);",
									"                            pm.expect(exp_final_status == list_po[i].final_status).to.be.true;",
									"                        });",
									"                        po_obj.exp_final_status = exp_final_status;",
									"",
									"                        // sales_rep_info.id => user_id, sales_rep_info.full_name",
									"                        let userInfo = pm.environment.get(\"C-userInfo\");",
									"                        console.log(\"userInfo: \", userInfo);",
									"                        pm.test(\"sales_rep_info.id of po is \" + userInfo.id, function () {",
									"                            console.log(\"act final_status:  \" + list_po[i].sales_rep_info.id);",
									"                            pm.expect(list_po[i].sales_rep_info.id == userInfo.id).to.be.true;",
									"                        });",
									"",
									"                        pm.test(\"sales_rep_info.full_name of po is \" + userInfo.first_name, function () {",
									"                            console.log(\"act final_status:  \" + list_po[i].sales_rep_info.full_name);",
									"                            pm.expect(list_po[i].sales_rep_info.full_name == userInfo.first_name).to.be.true;",
									"                        });",
									"                        break;",
									"                    }",
									"                }",
									"",
									"                pm.test(\"Found new product\", function () {",
									"                    pm.expect(isFound).to.be.true;",
									"                });",
									"",
									"                // update total records",
									"                pm.environment.set(\"C-total_po\",total_po);",
									"                pm.environment.set(\"C-po_obj\",po_obj);",
									"                pm.environment.unset(\"C-list_po\");",
									"",
									"                postman.setNextRequest(\"get_po_detail\"); // get_po_detail",
									"            } else {",
									"                page++;",
									"                pm.environment.set(\"C-page\",page);",
									"",
									"                console.log(\"view next page (\" + page + \") to get more po on branch \" + pm.environment.get(\"C-filter_branch_id\"));",
									"                postman.setNextRequest(\"get_list_po_branch\");",
									"            }",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get list po, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/po/get-list?branch_id={{C-filter_branch_id}}&page={{C-page}}&page_size={{C-page_size}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"po",
								"get-list"
							],
							"query": [
								{
									"key": "branch_id",
									"value": "{{C-filter_branch_id}}"
								},
								{
									"key": "contact_id",
									"value": "",
									"disabled": true
								},
								{
									"key": "start_time_created_at",
									"value": "",
									"disabled": true
								},
								{
									"key": "end_time_created_at",
									"value": "",
									"disabled": true
								},
								{
									"key": "start_time_due_at",
									"value": "",
									"disabled": true
								},
								{
									"key": "end_time_due_at",
									"value": "",
									"disabled": true
								},
								{
									"key": "list_contact_ids",
									"value": "",
									"disabled": true
								},
								{
									"key": "option",
									"value": "",
									"disabled": true
								},
								{
									"key": "page",
									"value": "{{C-page}}"
								},
								{
									"key": "page_size",
									"value": "{{C-page_size}}"
								},
								{
									"key": "payment_status",
									"value": "",
									"disabled": true
								},
								{
									"key": "search",
									"value": "",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "",
									"disabled": true
								},
								{
									"key": "status",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "payment",
			"item": [
				{
					"name": "get_list_payment",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = JSON.parse(responseBody);",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let total_payment = null;",
									"    try {",
									"        total_payment = jsData.meta.total_rows;",
									"    } catch {",
									"        console.log(\"Can't get total payment\");",
									"    }",
									"",
									"    switch(testcase){",
									"        case 2:",
									"            pm.test(\"Got total payment! \" + total_payment, function () {",
									"                pm.expect(total_payment != null).to.be.true;",
									"            });",
									"            pm.environment.set(\"C-total_payment\",total_payment);",
									"            console.log(\"total_payment: \" + total_payment);",
									"",
									"            postman.setNextRequest(\"get_report_income_expense\"); // get_report_income_expense",
									"            break;",
									"        case 4: case 6:",
									"            let old_total_payment = pm.environment.get(\"C-total_payment\");",
									"            let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"            let po_obj = pm.environment.get(\"C-po_obj\");",
									"",
									"            pm.test(\"Total payment increase 1\", function () {",
									"                console.log(\"Actual: \" + total_payment);",
									"                console.log(\"old: \" + old_total_payment);",
									"                pm.expect(total_payment == old_total_payment + 1).to.be.true;",
									"            });",
									"",
									"            let isFound = false;",
									"            for(let i in jsData.data){",
									"                if(jsData.data[i].description.includes(po_obj.system_code)){",
									"                    isFound = true;",
									"                    tnx_obj.payment_id = jsData.data[i].id;",
									"",
									"                    pm.test(\"before_fee_amount of payment correctly! \" + tnx_obj.amount, function () {",
									"                        pm.expect(tnx_obj.amount == jsData.data[i].before_fee_amount).to.be.true;",
									"                    });",
									"",
									"                    pm.test(\"after_fee_amount of payment correctly! \" + tnx_obj.amount, function () {",
									"                        pm.expect(tnx_obj.amount == jsData.data[i].after_fee_amount).to.be.true;",
									"                    });",
									"                    tnx_obj.after_fee_amount = jsData.data[i].after_fee_amount;",
									"",
									"                    pm.test(\"fee_amount of payment is 0\", function () { // sẽ handle fee_amount ở va",
									"                        pm.expect(0 == jsData.data[i].fee_amount).to.be.true;",
									"                    });",
									"                    tnx_obj.fee_amount = jsData.data[i].fee_amount;",
									"",
									"                    pm.test(\"description of payment correctly! \" + tnx_obj.description, function () {",
									"                        pm.expect(tnx_obj.description == jsData.data[i].description).to.be.true;",
									"                    });",
									"",
									"                    pm.test(\"value_at of payment correctly! \" + tnx_obj.value_at, function () {",
									"                        let act_value_at = new Date(jsData.data[i].value_at);",
									"                        console.log(\"actual value_at: \" + act_value_at.toISOString());",
									"                        pm.expect(tnx_obj.value_at == act_value_at.toISOString()).to.be.true; // tạm thời lấy mốc giờ +7 nên fix cứng, sau này sẽ dùng biến",
									"                    });",
									"",
									"                    pm.test(\"object_type of payment correctly! \" + tnx_obj.object_type, function () {",
									"                        pm.expect(tnx_obj.object_type).to.eql(jsData.data[i].object_type);",
									"                    });",
									"",
									"                    pm.test(\"object_id of payment correctly! \" + tnx_obj.object_id, function () {",
									"                        pm.expect(tnx_obj.object_id).to.eql(jsData.data[i].object_id);",
									"                    });",
									"                    break;",
									"                }",
									"            }",
									"",
									"            pm.test(\"Found new payment\", function () {",
									"                pm.expect(isFound).to.be.true;",
									"            });",
									"            pm.environment.set(\"C-tnx_obj\",tnx_obj);",
									"",
									"            // postman.setNextRequest(\"get_payment_detail\"); // get_payment_detail, get_list_payment_account",
									"            postman.setNextRequest(\"get_list_payment_account\"); // get_list_payment_account",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get list payment, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-ledger/api/v1/payment/get-list?business_id={{C-business_id}}&page=1&page_size=20&sort",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-ledger",
								"api",
								"v1",
								"payment",
								"get-list"
							],
							"query": [
								{
									"key": "business_id",
									"value": "{{C-business_id}}"
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "page_size",
									"value": "20"
								},
								{
									"key": "sort",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get_payment_detail",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"let payment_id = tnx_obj.payment_id;",
									"console.log(\"view detail payment: \" + payment_id);",
									"",
									"pm.environment.set(\"C-payment_id\",payment_id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    // let testcase = pm.environment.get(\"C-testcase\");",
									"    console.log(\"Debug: \" + JSON.stringify(jsData));",
									"",
									"    let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"",
									"    pm.test(\"after_fee_amount of payment correctly! \" + tnx_obj.after_fee_amount, function () {",
									"        pm.expect(tnx_obj.after_fee_amount == jsData.data.after_fee_amount).to.be.true;",
									"    });",
									"",
									"    pm.test(\"fee_amount of payment is 0\", function () { // sẽ handle fee_amount ở va",
									"        pm.expect(0 == jsData.data.fee_amount).to.be.true;",
									"    });",
									"",
									"    pm.test(\"description of payment correctly! \" + tnx_obj.description, function () {",
									"        pm.expect(tnx_obj.description == jsData.data.description).to.be.true;",
									"    });",
									"",
									"    pm.test(\"value_at of payment correctly! \" + tnx_obj.value_at, function () {",
									"        let act_value_at = new Date(jsData.data.value_at);",
									"        console.log(\"actual value_at: \" + act_value_at.toISOString());",
									"        pm.expect(tnx_obj.value_at == act_value_at.toISOString()).to.be.true;",
									"    });",
									"",
									"    pm.test(\"object_type of payment correctly! \" + tnx_obj.object_type, function () {",
									"        pm.expect(tnx_obj.object_type).to.eql(jsData.data.object_type);",
									"    });",
									"",
									"    pm.test(\"object_id of payment correctly! \" + tnx_obj.object_id, function () {",
									"        pm.expect(tnx_obj.object_id).to.eql(jsData.data.object_id);",
									"    });",
									"",
									"    postman.setNextRequest(\"get_list_payment_account\"); // get_list_payment_account",
									"} else {",
									"    console.log(\"Can't get internal contact detail, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-ledger/api/v1/payment/get-one/{{C-payment_id}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-ledger",
								"api",
								"v1",
								"payment",
								"get-one",
								"{{C-payment_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "transaction",
			"item": [
				{
					"name": "get_list_transaction",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = JSON.parse(responseBody);",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let total_tnx = null;",
									"    try {",
									"        total_tnx = jsData.meta.total_rows;",
									"    } catch {",
									"        console.log(\"Can't get total tnx\");",
									"    }",
									"",
									"    switch(testcase){",
									"        case 2:",
									"            pm.test(\"Got total tnx! \" + total_tnx, function () {",
									"                pm.expect(total_tnx != null).to.be.true;",
									"            });",
									"            pm.environment.set(\"C-total_tnx\",total_tnx);",
									"            console.log(\"total_tnx: \" + total_tnx);",
									"",
									"            testcase++;",
									"            // testcase = 5;",
									"            pm.environment.set(\"C-testcase\",testcase);",
									"            postman.setNextRequest(\"create_transaction\"); // create_transaction",
									"            break;",
									"        case 4: case 6:",
									"            let old_total_tnx = pm.environment.get(\"C-total_tnx\");",
									"            let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"",
									"            pm.test(\"Total tnx increase 1\", function () {",
									"                console.log(\"Actual: \" + total_tnx);",
									"                console.log(\"Expected: \" + (old_total_tnx + 1));",
									"                pm.expect(total_tnx == old_total_tnx + 1).to.be.true;",
									"            });",
									"",
									"            let isFound = false;",
									"            for(let i in jsData.data){",
									"                if(jsData.data[i].id == tnx_obj.tnx_id){",
									"                    isFound = true;",
									"                    pm.test(\"amount of tnx correctly! \" + tnx_obj.amount, function () {",
									"                        pm.expect(tnx_obj.amount == jsData.data[i].amount).to.be.true;",
									"                    });",
									"",
									"                    pm.test(\"txn_type of tnx correctly! \" + tnx_obj.txn_type, function () {",
									"                        pm.expect(tnx_obj.txn_type == jsData.data[i].txn_type).to.be.true;",
									"                    });",
									"",
									"                    pm.test(\"description of tnx correctly! \" + tnx_obj.description, function () {",
									"                        pm.expect(tnx_obj.description == jsData.data[i].description).to.be.true;",
									"                    });",
									"",
									"                    pm.test(\"value_at of tnx correctly! \" + tnx_obj.value_at, function () {",
									"                        let act_value_at = new Date(jsData.data[i].value_at);",
									"                        console.log(\"actual value_at: \" + act_value_at.toISOString());",
									"                        pm.expect(tnx_obj.value_at == act_value_at.toISOString()).to.be.true; // tạm thời lấy mốc giờ +7 nên fix cứng, sau này sẽ dùng biến",
									"                    });",
									"",
									"                    pm.test(\"object_type of tnx correctly! \" + tnx_obj.object_type, function () {",
									"                        pm.expect(tnx_obj.object_type).to.eql(jsData.data[i].object_type);",
									"                    });",
									"",
									"                    pm.test(\"object_id of tnx correctly! \" + tnx_obj.object_id, function () {",
									"                        pm.expect(tnx_obj.object_id).to.eql(jsData.data[i].object_id);",
									"                    });",
									"                    break;",
									"                }",
									"            }",
									"",
									"            pm.test(\"Found new tnx\", function () {",
									"                pm.expect(isFound).to.be.true;",
									"            });",
									"",
									"            // lưu lại data mới",
									"            pm.environment.set(\"C-total_tnx\",total_tnx);",
									"",
									"            postman.setNextRequest(\"get_transaction_detail\"); // get_transaction_detail (get tnx detail đang lỗi nên tạm thời skip) get_report_cash_flow",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get list tnx, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-ledger/api/v1/transaction/get-list?page=1&page_size=50",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-ledger",
								"api",
								"v1",
								"transaction",
								"get-list"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "page_size",
									"value": "50",
									"description": "20 is limit"
								},
								{
									"key": "sort",
									"value": null,
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get_transaction_detail",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"let tnx_id = tnx_obj.tnx_id;",
									"console.log(\"view detail tnx: \" + tnx_id);",
									"",
									"pm.environment.set(\"C-tnx_id\",tnx_id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    // let testcase = pm.environment.get(\"C-testcase\");",
									"    console.log(\"Debug: \" + JSON.stringify(jsData));",
									"",
									"    let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"",
									"    pm.test(\"amount of tnx correctly! \" + tnx_obj.amount, function () {",
									"        pm.expect(tnx_obj.amount == jsData.data.amount).to.be.true;",
									"    });",
									"",
									"    pm.test(\"txn_type of tnx correctly! \" + tnx_obj.txn_type, function () {",
									"        pm.expect(tnx_obj.txn_type == jsData.data.txn_type).to.be.true;",
									"    });",
									"",
									"    pm.test(\"description of tnx correctly! \" + tnx_obj.description, function () {",
									"        pm.expect(tnx_obj.description == jsData.data.description).to.be.true;",
									"    });",
									"",
									"    pm.test(\"value_at of tnx correctly! \" + tnx_obj.value_at, function () {",
									"        let act_value_at = new Date(jsData.data.value_at);",
									"        console.log(\"actual value_at: \" + act_value_at.toISOString());",
									"        pm.expect(tnx_obj.value_at == act_value_at.toISOString()).to.be.true;",
									"    });",
									"",
									"    pm.test(\"object_type of tnx correctly! \" + tnx_obj.object_type, function () {",
									"        pm.expect(tnx_obj.object_type).to.eql(jsData.data.object_type);",
									"    });",
									"",
									"    pm.test(\"object_id of tnx correctly! \" + tnx_obj.object_id, function () {",
									"        pm.expect(tnx_obj.object_id).to.eql(jsData.data.object_id);",
									"    });",
									"",
									"    postman.setNextRequest(\"get_transaction_summary\"); // get_list_payment",
									"} else {",
									"    console.log(\"Can't get internal contact detail, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-ledger/api/v1/transaction/get-one/{{C-tnx_id}}?business_id={{C-business_id}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-ledger",
								"api",
								"v1",
								"transaction",
								"get-one",
								"{{C-tnx_id}}"
							],
							"query": [
								{
									"key": "business_id",
									"value": "{{C-business_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get_transaction_summary",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let transaction_summary = null;",
									"    try {",
									"        transaction_summary = jsData.data;",
									"    } catch {",
									"        console.log(\"Can't get transaction_summary\");",
									"    }",
									"    switch(testcase) {",
									"        case 2:",
									"            pm.test(\"Got all transaction_summary \" , function () {",
									"                pm.expect(transaction_summary != null).to.be.true;",
									"            });",
									"            console.log(\"debug: \", jsData);",
									"",
									"            pm.environment.set(\"C-transaction_summary\", transaction_summary);",
									"            postman.setNextRequest(\"get_list_transaction\");",
									"            break;",
									"",
									"        case 4: ",
									"            let old_transaction_summary = pm.environment.get(\"C-transaction_summary\");",
									"            let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"",
									"            pm.test(\"count_expense increase 1\", function () {",
									"                pm.expect(transaction_summary.count_expense).to.eql(old_transaction_summary.count_expense + 1);",
									"            });",
									"            pm.test(\"transaction summary total_expense increase \" + tnx_obj.amount, function () {",
									"                pm.expect(transaction_summary.total_expense).to.eql(old_transaction_summary.total_expense + tnx_obj.amount);",
									"            });",
									"            pm.test(\"transaction summary count_not_categorized increase 1: \", function () {",
									"                pm.expect(transaction_summary.count_not_categorized).to.eql(old_transaction_summary.count_not_categorized + 1);",
									"            });",
									"",
									"            pm.environment.set(\"C-transaction_summary\", transaction_summary);",
									"            console.log(\"debug: \", jsData);",
									"",
									"            postman.setNextRequest(\"get_list_payment\");",
									"            break;",
									"",
									"        case 6:",
									"            let old_tnx_summary = pm.environment.get(\"C-transaction_summary\");",
									"            let transaction_obj = pm.environment.get(\"C-tnx_obj\");",
									"",
									"            pm.test(\"count_expense increase 1\", function () {",
									"                pm.expect(transaction_summary.count_expense).to.eql(old_tnx_summary.count_expense + 1);",
									"            });",
									"            pm.test(\"transaction summary count_expense increase: \" + tnx_obj.amount, function () {",
									"                pm.expect(transaction_summary.total_expense).to.eql(old_tnx_summary.total_expense + transaction_obj.amount);",
									"            });",
									"            pm.test(\"transaction summary count_not_categorized increase 1: \" , function () {",
									"                pm.expect(transaction_summary.count_not_categorized).to.eql(old_tnx_summary.count_not_categorized + 1);",
									"            });",
									"",
									"            pm.environment.set(\"C-transaction_summary\", transaction_summary);",
									"            console.log(\"debug: \", jsData);",
									"",
									"            postman.setNextRequest(\"get_list_payment_account\");",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"}   else {",
									"    console.log(\"Can't get transaction summary, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-ledger/api/v1/transaction/get-summary?txn_type=&account_ids=&category_ids=",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-ledger",
								"api",
								"v1",
								"transaction",
								"get-summary"
							],
							"query": [
								{
									"key": "txn_type",
									"value": ""
								},
								{
									"key": "account_ids",
									"value": ""
								},
								{
									"key": "category_ids",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "create_transaction",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// ============================= random number between min and max",
									"function getRandomInt(min, max) {",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"",
									"// ============================= random characters",
									"function randomChars(length) {",
									"    var result           = '';",
									"    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
									"    var charactersLength = characters.length;",
									"    for ( var i = 0; i < length; i++ ) {",
									"      result += characters.charAt(Math.floor(Math.random() * charactersLength));",
									"   }",
									"   return result;",
									"}",
									"",
									"/**",
									" * txn_type: in/out => Tạo Thu/ Tạo Chi",
									" * account_credit: Tài khoản => only cash&bank sub_group",
									" */",
									"",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"let case_ = pm.environment.get(\"C-case_\");",
									"if(!case_){",
									"    case_ = 9;",
									"    pm.environment.set(\"C-case_\",case_);",
									"}",
									"console.log(\"Testcase: \" + testcase + \".\" + case_);",
									"",
									"let today = new Date();",
									"let next_date_stp = Math.floor(today.getTime()/1000) + 24*60*60;",
									"let next_date = new Date(next_date_stp*1000);",
									"",
									"// let list_debit_account = pm.environment.get(\"C-list_debit_account\");",
									"let list_credit_account = pm.environment.get(\"C-list_credit_account\");",
									"let ranDebitPos = getRandomInt(0,list_credit_account.length - 1);",
									"let list_po = pm.environment.get(\"C-list_un_paid_po\");",
									"let ranpoPos = getRandomInt(0,list_po.length -  1);",
									"let txn_types = [\"in\",\"out\"];",
									"let account_debit, amount, po_id, object_type;",
									"let value_at, txn_type, description;",
									"switch(case_){",
									"    case 1:",
									"        console.log(\"Unhappy case: null data (except txn_type > default 'out', value_at)\");",
									"        account_debit = null;",
									"        amount = \"\";",
									"        po_id = list_po[getRandomInt(0,list_po.length - 1)].po_id;",
									"        object_type = \"po\";",
									"        value_at = today.toISOString();",
									"        txn_type = \"out\"; // \"\" == \"out\"",
									"        description = \"\";",
									"        break;",
									"    case 2:",
									"        console.log(\"Unhappy case: amount < 0\");",
									"        account_debit = list_credit_account[ranDebitPos].account_id;",
									"        if(list_po[ranpoPos].total_amount > 100000){",
									"            amount = -getRandomInt(list_po[ranpoPos].total_amount/3,list_po[ranpoPos].total_amount/2);",
									"        } else {",
									"            amount = -getRandomInt(10,20)*1000;",
									"        }",
									"        value_at = today.toISOString();",
									"        po_id = list_po[getRandomInt(0,list_po.length - 1)].po_id;",
									"        object_type = \"po\";",
									"        txn_type = \"out\";",
									"        description = \"[API][\" + txn_type + \"] transaction \" + randomChars(6);",
									"        break;",
									"    case 3:",
									"        console.log(\"Unhappy case: missing credit\");",
									"        account_debit = null;",
									"        if(list_po[ranpoPos].total_amount > 100000){",
									"            amount = getRandomInt(list_po[ranpoPos].total_amount/3,list_po[ranpoPos].total_amount/2);",
									"        } else {",
									"            amount = getRandomInt(10,20)*1000;",
									"        }",
									"        value_at = today.toISOString();",
									"        po_id = list_po[getRandomInt(0,list_po.length - 1)].po_id;",
									"        object_type = \"po\";",
									"        txn_type = \"out\";",
									"        description = \"[API][\" + txn_type + \"] transaction \" + randomChars(6);",
									"        break;",
									"    case 4:",
									"        console.log(\"Unhappy case: missing object_key\");",
									"        account_debit = list_credit_account[ranDebitPos].account_id;",
									"        if(list_po[ranpoPos].total_amount > 100000){",
									"            amount = getRandomInt(list_po[ranpoPos].total_amount/3,list_po[ranpoPos].total_amount/2);",
									"        } else {",
									"            amount = getRandomInt(10,20)*1000;",
									"        }",
									"        value_at = today.toISOString();",
									"        po_id = \"\";",
									"        object_type = \"po\";",
									"        txn_type = \"out\";",
									"        description = \"[API][\" + txn_type + \"] transaction \" + randomChars(6);",
									"        break;",
									"    case 5:",
									"        console.log(\"Unhappy case: credit is not existed\");",
									"        account_debit = 9999999999999;",
									"        if(list_po[ranpoPos].total_amount > 100000){",
									"            amount = getRandomInt(list_po[ranpoPos].total_amount/3,list_po[ranpoPos].total_amount/2);",
									"        } else {",
									"            amount = getRandomInt(10,20)*1000;",
									"        }",
									"        value_at = today.toISOString();",
									"        po_id = list_po[getRandomInt(0,list_po.length - 1)].po_id;",
									"        object_type = \"po\";",
									"        txn_type = \"out\";",
									"        description = \"[API][\" + txn_type + \"] transaction \" + randomChars(6);",
									"        break;",
									"    case 6:",
									"        console.log(\"Unhappy case: missing object_type\");",
									"        account_debit = list_credit_account[ranDebitPos].account_id;",
									"        if(list_po[ranpoPos].total_amount > 100000){",
									"            amount = getRandomInt(list_po[ranpoPos].total_amount/3,list_po[ranpoPos].total_amount/2);",
									"        } else {",
									"            amount = getRandomInt(10,20)*1000;",
									"        }",
									"        value_at = today.toISOString();",
									"        po_id = list_po[getRandomInt(0,list_po.length - 1)].po_id;",
									"        object_type = \"\";",
									"        txn_type = \"out\";",
									"        description = \"[API][\" + txn_type + \"] transaction \" + randomChars(6);",
									"        break;",
									"    case 8:",
									"        console.log(\"Unhappy case: value_at is later than po_created\");",
									"        account_debit = list_credit_account[ranDebitPos].account_id;",
									"        if(list_po[ranpoPos].total_amount > 100000){",
									"            amount = getRandomInt(list_po[ranpoPos].total_amount/3,list_po[ranpoPos].total_amount/2);",
									"        } else {",
									"            amount = getRandomInt(10,20)*1000;",
									"        }",
									"        let po_date = new Date(list_po[ranpoPos].value_at);",
									"        next_date = Math.floor(po_date.getTime()/1000) - 24*60*60;",
									"        next_date = new Date(next_date*1000);",
									"        value_at = next_date.toISOString();",
									"        po_id = list_po[getRandomInt(0,list_po.length - 1)].po_id;",
									"        object_type = \"po\";",
									"        txn_type = \"out\";",
									"        description = \"[API][\" + txn_type + \"] transaction \" + randomChars(6);",
									"        break;",
									"    case 9:",
									"        console.log(\"Happy case\");",
									"        let po_obj = pm.environment.get(\"C-po_obj\");",
									"        account_debit = list_credit_account[ranDebitPos].account_id;",
									"        pm.environment.set(\"C-ranDebitPos\",ranDebitPos);",
									"        if(testcase == 3){",
									"            if(po_obj.total_amount > 100000){",
									"                amount = Math.round(getRandomInt(po_obj.total_amount/3,po_obj.total_amount/2));",
									"            } else {",
									"                amount = getRandomInt(10,20)*1000;",
									"            }",
									"        } else {",
									"            if(\"new_due_amount\" in po_obj){",
									"                amount = po_obj.new_due_amount;",
									"            } else {",
									"                amount = po_obj.due_amount;",
									"            }",
									"        }",
									"        value_at = today.toISOString();",
									"        po_id = po_obj.po_id;",
									"        object_type = \"po\";",
									"        txn_type = \"out\";",
									"        description = \"[API][\" + txn_type + \"][po] transaction \" + po_obj.system_code;",
									"        break;",
									"    default:",
									"        console.log(\"Missing flow\");",
									"        break;",
									"}",
									"",
									"let payload = {",
									"    \"account_id\":account_debit,",
									"    \"amount\":amount,",
									"    \"attachment_url\": {},",
									"    \"branch_id\":parseInt(pm.environment.get(\"C-business_id\")),",
									"    // \"category_id\": 0,",
									"    // \"contact_id\": \"string\",",
									"    \"currency\": \"vnd\",",
									"    \"txn_type\":txn_type,",
									"    \"description\":description,",
									"    \"object_id\": po_id,",
									"    \"object_type\": object_type,",
									"    // \"payment_method\": \"string\",",
									"    \"value_at\":value_at",
									"}",
									"",
									"console.log(\"payload: \",payload);",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));",
									"pm.environment.set(\"C-tnx_obj\",payload);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"let case_ = pm.environment.get(\"C-case_\");",
									"",
									"let jsData = pm.response.json();",
									"switch(case_){",
									"    case 1: case 2:",
									"        pm.test(\"Status code is 400\", function () {",
									"            pm.response.to.have.status(400);",
									"        });",
									"",
									"        console.log(\"debug: \", jsData);",
									"",
									"        // case_++;",
									"        case_ = 9;",
									"        pm.environment.set(\"C-case_\",case_);",
									"        postman.setNextRequest(\"create_transaction\"); // create_transaction",
									"        break;",
									"    case 3: case 4:",
									"        pm.test(\"Status code is 400\", function () {",
									"            pm.response.to.have.status(400);",
									"        });",
									"",
									"        console.log(\"debug: \", jsData);",
									"",
									"        case_++;",
									"        pm.environment.set(\"C-case_\",case_);",
									"        postman.setNextRequest(\"create_transaction\"); // create_transaction",
									"        break;",
									"    case 5: case 6:",
									"        pm.test(\"Status code is 400\", function () {",
									"            pm.response.to.have.status(400);",
									"        });",
									"",
									"        console.log(\"debug: \", jsData);",
									"",
									"        case_++;",
									"        pm.environment.set(\"C-case_\",case_);",
									"        postman.setNextRequest(\"create_transaction\"); // create_transaction",
									"        break;",
									"    case 7: case 8:",
									"        pm.test(\"Status code is 400\", function () {",
									"            pm.response.to.have.status(400);",
									"        });",
									"",
									"        console.log(\"debug: \", jsData);",
									"",
									"        case_++;",
									"        pm.environment.set(\"C-case_\",case_);",
									"        postman.setNextRequest(\"create_transaction\"); // create_transaction",
									"        break;",
									"    case 9:",
									"        // console.log(\"debug: \" + JSON.stringify(jsData));",
									"        // pm.test(\"Status code is 200\", function () {",
									"        //     pm.response.to.have.status(200);",
									"        // });",
									"        pm.test(\"Status code is 200\", () => {",
									"            pm.expect(pm.response.code).to.be.oneOf([200,201]);",
									"        });",
									"",
									"        pm.environment.unset(\"C-case_\");",
									"        console.log(\"debug: \", jsData);",
									"        let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"",
									"        // update tnx_id for tnx_obj",
									"        try {",
									"            tnx_obj.tnx_id = jsData.data.id;",
									"        } catch {",
									"            console.log(\"Can't get tnx_id\");",
									"        }",
									"",
									"        pm.test(\"amount of tnx correctly! \" + tnx_obj.amount, function () {",
									"            pm.expect(tnx_obj.amount == jsData.data.amount).to.be.true;",
									"        });",
									"",
									"        pm.test(\"txn_type of tnx correctly! \" + tnx_obj.txn_type, function () {",
									"            pm.expect(tnx_obj.txn_type == jsData.data.txn_type).to.be.true;",
									"        });",
									"",
									"        pm.test(\"description of tnx correctly! \" + tnx_obj.description, function () {",
									"            pm.expect(tnx_obj.description == jsData.data.description).to.be.true;",
									"        });",
									"",
									"        pm.test(\"value_at of tnx correctly! \" + tnx_obj.value_at, function () {",
									"            console.log('act value_at: ' + jsData.data.value_at);",
									"            console.log('exp value_at: ' + tnx_obj.value_at);",
									"            pm.expect(tnx_obj.value_at).to.eql(jsData.data.value_at);",
									"        });",
									"",
									"        pm.test(\"object_type of tnx correctly! \" + tnx_obj.object_type, function () {",
									"            pm.expect(tnx_obj.object_type).to.eql(jsData.data.object_type);",
									"        });",
									"",
									"        pm.test(\"object_id of tnx correctly! \" + tnx_obj.object_id, function () {",
									"            pm.expect(tnx_obj.object_id).to.eql(jsData.data.object_id);",
									"        });",
									"",
									"        // update lại payment_due_amount cho po_obj sau khi tạo thành công",
									"        let po_obj = pm.environment.get(\"C-po_obj\");",
									"        po_obj.new_payment_due_amount = po_obj.payment_due_amount - tnx_obj.amount;",
									"        console.log(\"po_obj.new_payment_due_amount: \" + po_obj.new_payment_due_amount);",
									"        pm.environment.set(\"C-po_obj\",po_obj);",
									"",
									"        testcase++;",
									"        pm.environment.set(\"C-testcase\",testcase);",
									"        pm.environment.set(\"C-tnx_obj\",tnx_obj);",
									"        postman.setNextRequest(\"get_list_transaction\"); // get_list_transaction",
									"        break;",
									"    default:",
									"        console.log(\"missing flow, end test\");",
									"        postman.setNextRequest(null);",
									"        break;",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-ledger/api/v1/transaction/create",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-ledger",
								"api",
								"v1",
								"transaction",
								"create"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// pm.request.headers.add({",
							"//  key: \"authorization\",",
							"//  value: \"Bearer \" + pm.environment.get(\"C-userToken\")",
							"// });",
							"",
							"// pm.request.headers.add({",
							"//  key: \"Content-Type\",",
							"//  value: \"application/json\"",
							"// });"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "posting",
			"item": [
				{
					"name": "get_list_posting",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let page = pm.environment.get(\"C-page\");",
									"",
									"if(!page){",
									"    page = 1;",
									"    pm.environment.set(\"C-page\",page);",
									"",
									"    let page_size = 50;",
									"    pm.environment.set(\"C-page_size\",page_size);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"/**",
									" * object_type: transaction, bill",
									" * object_id => id respective with object_type (tnx_id, bill_id)",
									" * object_id_ref => use for bill with product/item (product_id, item_id)",
									" * is_credit",
									" * created_at",
									" * value_at",
									" */",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = JSON.parse(responseBody);",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let total_pages = 1;",
									"    let total_records = 0;",
									"    try {",
									"        total_pages = jsData.meta.total_pages;",
									"        total_records = jsData.meta.total_rows;",
									"    } catch {",
									"        console.log(\"currently, this branch with null data\");",
									"    }",
									"    let page = pm.environment.get(\"C-page\");",
									"",
									"    let list_posting, old_list_posting;",
									"    switch(testcase){",
									"        case 2:",
									"            list_posting = pm.environment.get(\"C-list_posting\");",
									"            if(!list_posting){",
									"                list_posting = [];",
									"            }",
									"            break;",
									"        case 4: case 6:",
									"            old_list_posting = pm.environment.get(\"C-old_list_posting\");",
									"            if(!old_list_posting){",
									"                old_list_posting = pm.environment.get(\"C-list_posting\");",
									"                pm.environment.unset(\"C-list_posting\");",
									"                pm.environment.set(\"C-old_list_posting\",old_list_posting);",
									"            }",
									"",
									"            list_posting = pm.environment.get(\"C-list_posting\");",
									"            if(!list_posting){",
									"                list_posting = [];",
									"            }",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow\");",
									"            break;",
									"    }",
									"",
									"    for(let item in jsData.data){",
									"        list_posting[list_posting.length] = {",
									"            \"posting_id\":jsData.data[item].id,",
									"            \"account_id\":jsData.data[item].account_id,",
									"            \"amount\":jsData.data[item].amount,",
									"            \"branch_id\":jsData.data[item].branch_id,",
									"            \"created_at\":jsData.data[item].created_at,",
									"            \"currency\":jsData.data[item].currency,",
									"            \"deleted_at\":jsData.data[item].deleted_at,",
									"            \"is_credit\":jsData.data[item].is_credit,",
									"            \"is_final_status\":jsData.data[item].is_final_status,",
									"            \"object_id_ref\":jsData.data[item].object_id_ref,",
									"            \"object_id\":jsData.data[item].object_id,",
									"            \"object_type\":jsData.data[item].object_type,",
									"            // \"value_at\":jsData.data[item].value_at,",
									"            \"short_desc\":jsData.data[item].short_desc",
									"        }",
									"    }",
									"    pm.environment.set(\"C-list_posting\",list_posting);",
									"",
									"    let configs = pm.environment.get(\"C-configs\");",
									"    if(page >= total_pages || page >= configs.limit_page){",
									"        // must clear page & page_size",
									"        pm.environment.unset(\"C-page\");",
									"        pm.environment.unset(\"C-page_size\");",
									"",
									"        switch(testcase){",
									"            case 2:",
									"                pm.test(\"Got all posting! \" + list_posting.length, function () {",
									"                    pm.expect(list_posting.length > 0).to.be.true;",
									"                });",
									"                pm.environment.set(\"C-total_records\",total_records);",
									"",
									"                postman.setNextRequest(\"get_list_payment\"); // get_list_payment",
									"                break;",
									"            case 4: case 6:",
									"                let old_total_records = pm.environment.get(\"C-total_records\");",
									"",
									"                pm.test(\"Have 2 new records\", function () {",
									"                    console.log(\"old: \" + old_total_records);",
									"                    console.log(\"new: \" + total_records);",
									"                    pm.expect(total_records == old_total_records + 2).to.be.true;",
									"                });",
									"",
									"                let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"                let account_payable = pm.environment.get(\"C-account_payable\");",
									"                console.log(\"account_payable: \",account_payable);",
									"                let count = 0;",
									"                let foundAll = false;",
									"                for(let i in list_posting){",
									"                    if(list_posting[i].object_type == \"transaction\" && list_posting[i].object_id == tnx_obj.tnx_id){",
									"                        // console.log(\"list_posting[i]: \", list_posting[i]);",
									"                        if(!list_posting[i].is_credit){",
									"                            count++;",
									"                            pm.test(\"Found account_payable for debit\", function () {",
									"                                pm.expect(list_posting[i].account_id == account_payable.id).to.be.true;",
									"                            });",
									"",
									"                            pm.test(\"--- amount correctly \" + tnx_obj.amount, function () {",
									"                                console.log(\"actual: \" + list_posting[i].amount);",
									"                                pm.expect(list_posting[i].amount.toFixed(2) == tnx_obj.amount.toFixed(2)).to.be.true;",
									"                            });",
									"                        } else {",
									"                            count++;",
									"                            pm.test(\"Found account_debit for credit\", function () {",
									"                                // console.log(\"account_debit: \" + tnx_obj.account_id);",
									"                                pm.expect(list_posting[i].account_id == tnx_obj.account_id).to.be.true;",
									"                            });",
									"",
									"                            pm.test(\"--- amount correctly \" + tnx_obj.amount, function () {",
									"                                console.log(\"actual: \" + list_posting[i].amount);",
									"                                pm.expect(list_posting[i].amount.toFixed(2) == tnx_obj.amount.toFixed(2)).to.be.true;",
									"                            });",
									"                        }",
									"",
									"                        if(count == 2){",
									"                            foundAll = true;",
									"                            break;",
									"                        }",
									"                    }",
									"                }",
									"",
									"                pm.test(\"Found all posting\", function () {",
									"                    pm.expect(foundAll).to.be.true;",
									"                });",
									"",
									"                // clear old data",
									"                pm.environment.unset(\"C-old_list_posting\");",
									"",
									"                postman.setNextRequest(\"get_report_income_expense\"); // get_report_income_expense",
									"                break;",
									"            default:",
									"                console.log(\"Missing flow, end test\");",
									"                postman.setNextRequest(null);",
									"                break;",
									"        }",
									"    } else {",
									"        page++;",
									"        pm.environment.set(\"C-page\",page);",
									"",
									"        console.log(\"view next page (\" + page + \") to get more posting\");",
									"        postman.setNextRequest(\"get_list_posting\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get list posting, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-ledger/api/v1/posting/get-list?page={{C-page}}&page_size={{C-page_size}}&search=&sort=",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-ledger",
								"api",
								"v1",
								"posting",
								"get-list"
							],
							"query": [
								{
									"key": "page",
									"value": "{{C-page}}"
								},
								{
									"key": "page_size",
									"value": "{{C-page_size}}"
								},
								{
									"key": "search",
									"value": ""
								},
								{
									"key": "sort",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.request.headers.add({",
							" key: \"authorization\",",
							" value: \"Bearer \" + pm.environment.get(\"C-userToken\")",
							"});",
							"",
							"pm.request.headers.add({",
							" key: \"Content-Type\",",
							" value: \"application/json\"",
							"});"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "report",
			"item": [
				{
					"name": "get_report_income_expense",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"// lấy full tháng hiện tại",
									"let today = new Date();",
									"let start_current_month = new Date(today.getFullYear(), today.getMonth(), 1);",
									"let end_current_month = new Date(today.getFullYear(), today.getMonth() + 1, 1);",
									"",
									"// lấy full tháng trước",
									"let start_last_month = new Date(today.getFullYear(), today.getMonth() - 1, 1);",
									"let end_last_month = new Date(today.getFullYear(), today.getMonth(), 1);",
									"",
									"// lấy full ngày hiện tại",
									"// let firstDay = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0 ,0, 0);",
									"// let lastDay = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 23, 59 ,59, 0);",
									"",
									"// lấy n ngày đến hiện tại",
									"// let firstDayTimestamp = Math.floor(firstDay.getTime()/1000) - 2*24*60*60;",
									"// let start_day_ago = new Date(firstDayTimestamp*1000);",
									"",
									"let current_period_start = start_current_month.toISOString();",
									"let current_period_end = end_current_month.toISOString();",
									"let previous_period_start = start_last_month.toISOString();",
									"let previous_period_end = end_last_month.toISOString();",
									"",
									"/**",
									"/**",
									" * \"report_type\": sum,income,expense",
									" * Note: report_type = sum => hiện tại bị null dates_data => ko có type này",
									" * - C1: call từng loại income, expense dể lấy dates_data",
									" * - C2: wait fixing from dev",
									" * => tạm thời xử lý case sum, 2 case còn lại sẽ handle sau",
									" */",
									"",
									"let report_type;",
									"let period = \"month\";",
									"let full_check = pm.environment.get(\"C-full_check\");",
									"if(!full_check){",
									"    full_check = 1;",
									"    pm.environment.set(\"C-full_check\",full_check);",
									"    report_type = \"income\";",
									"} else {",
									"    report_type = \"expense\";",
									"}",
									"console.log(\"full_check: \" + full_check);",
									"pm.environment.set(\"C-period\",period);",
									"",
									"let payload = {",
									"    \"branch_id\": pm.environment.get(\"C-branch_id\"),",
									"    \"business_id\": parseInt(pm.environment.get(\"C-business_id\")),",
									"    \"report_type\": report_type,",
									"    \"period\": period",
									"    // \"current_period_start\": current_period_start,",
									"    // \"current_period_end\": current_period_end",
									"}",
									"",
									"console.log(\"payload: \",payload);",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));",
									"",
									"pm.environment.set(\"C-current_period_start\",current_period_start);",
									"pm.environment.set(\"C-current_period_end\",current_period_end);",
									"pm.environment.set(\"C-previous_period_start\",previous_period_start);",
									"pm.environment.set(\"C-previous_period_end\",previous_period_end);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ============================= sort by key",
									"function sortByKey(array, key, type) {",
									"    if(type == \"asc\"){",
									"        return array.sort(function(a, b) {",
									"            var x = a[key]; var y = b[key];",
									"            return ((x > y) ? -1 : ((x < y) ? 1 : 0));",
									"        });",
									"    } else {",
									"        return array.sort(function(a, b) {",
									"            var x = a[key]; var y = b[key];",
									"            return ((x < y) ? -1 : ((x > y) ? 1 : 0));",
									"        });",
									"    }",
									"}",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let full_check = pm.environment.get(\"C-full_check\");",
									"    let report_income = null, report_expense = null;",
									"    try {",
									"        if(full_check == 1){",
									"            report_income = jsData.data;",
									"        } else {",
									"            report_expense = jsData.data;",
									"        }",
									"    } catch {",
									"        console.log(\"Can't get report cash_flow data\");",
									"    }",
									"",
									"    let list_debit_account = pm.environment.get(\"C-list_debit_account\");",
									"    let list_credit_account = pm.environment.get(\"C-list_credit_account\");",
									"    let list_income_account = pm.environment.get(\"C-list_income_account\");",
									"    let list_expense_account = pm.environment.get(\"C-list_expense_account\");",
									"    switch(testcase){",
									"        case 2:",
									"            // thay đổi lại list_income_account & list_expense_account, chỉ lấy những account nào có trong top 5 để check",
									"            if(full_check == 1){",
									"                pm.test(\"Got report_income\", function () {",
									"                    pm.expect(report_income != null).to.be.true;",
									"                });",
									"                pm.environment.set(\"C-report_income\",report_income);",
									"                // console.log(\"report_income: \" + JSON.stringify(report_income));",
									"                let new_list_income_account = [];",
									"                for(let i in report_income){",
									"                    for(let j in list_income_account){",
									"                        if(report_income[i].coa_id == list_income_account[j].account_id){",
									"                            new_list_income_account[new_list_income_account.length] = list_income_account[j];",
									"                            break;",
									"                        }",
									"                    }",
									"                }",
									"                list_income_account = new_list_income_account;",
									"                pm.environment.set(\"C-list_income_account\",list_income_account);",
									"                // console.log(\"list_income_account: \" + JSON.stringify(list_income_account));",
									"",
									"                full_check++;",
									"                pm.environment.set(\"C-full_check\",full_check);",
									"                postman.setNextRequest(\"get_report_income_expense\");",
									"            } else {",
									"                pm.test(\"Got report_expense\", function () {",
									"                    pm.expect(report_expense != null).to.be.true;",
									"                });",
									"                pm.environment.set(\"C-report_expense\",report_expense);",
									"                // console.log(\"report_expense: \" + JSON.stringify(report_expense));",
									"                let new_list_expense_account = [];",
									"                for(let i in report_expense){",
									"                    for(let j in list_expense_account){",
									"                        if(report_expense[i].coa_id == list_expense_account[j].account_id){",
									"                            new_list_expense_account[new_list_expense_account.length] = list_expense_account[j];",
									"                            break;",
									"                        }",
									"                    }",
									"                }",
									"                list_expense_account = new_list_expense_account;",
									"                pm.environment.set(\"C-list_expense_account\",list_expense_account);",
									"                // console.log(\"list_expense_account: \" + JSON.stringify(list_expense_account));",
									"",
									"                pm.environment.unset(\"C-full_check\");",
									"                postman.setNextRequest(\"get_report_account_receivable_unpaid\"); // get_report_account_receivable_unpaid",
									"            }",
									"            break;",
									"        case 4:",
									"            let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"            for(let i in list_credit_account){",
									"                if(list_credit_account[i].account_id == tnx_obj.account_id){",
									"                    console.log(\"Tnx được thực hiện ở tài khoản: \" + list_credit_account[i].account_name);",
									"                    tnx_obj.account_name = list_credit_account[i].account_name;",
									"                    break;",
									"                }",
									"            }",
									"            // console.log(\"list_debit_account:\",list_debit_account);",
									"            for(let i in list_debit_account){",
									"                if(list_debit_account[i].account_id == tnx_obj.category_id){",
									"                    console.log(\"Tnx được thực hiện ở phân loại: \" + list_debit_account[i].account_name);",
									"                    tnx_obj.category_name = list_debit_account[i].account_name;",
									"                    tnx_obj.coa_type = list_debit_account[i].coa_type;",
									"                    break;",
									"                }",
									"            }",
									"            pm.environment.set(\"C-tnx_obj\",tnx_obj);",
									"            console.log(\"tnx_obj after update: \", tnx_obj);",
									"",
									"            let old_report_expense, old_report_income;",
									"            let hasAccountInOldDB = false, hasAccoountInNewDB = false;",
									"            let old_amount, new_amount;",
									"            if(full_check == 1){",
									"                old_report_income = pm.environment.get(\"C-report_income\");",
									"                for(let i in old_report_income){",
									"                    if(old_report_income[i].coa_name == tnx_obj.category_name){",
									"                        hasAccountInOldDB = true;",
									"                        old_amount = old_report_income[i].total_amount;",
									"                        break;",
									"                    }",
									"                }",
									"",
									"                for(let i in report_income){",
									"                    if(report_income[i].coa_name == tnx_obj.category_name){",
									"                        hasAccoountInNewDB = true;",
									"                        new_amount = report_income[i].total_amount;",
									"                        break;",
									"                    }",
									"                }",
									"",
									"                if(tnx_obj.coa_type == \"income\"){",
									"                    console.log(\"Tnx thực hiện với coa_type là income, tăng income tương ứng trong tk\");",
									"",
									"                    // check db_data",
									"                    if(hasAccountInOldDB){",
									"                        pm.test(\"inscrease account \" + tnx_obj.category_name + \" with amount \" + tnx_obj.amount, function () {",
									"                            console.log(\"old: \" + old_amount);",
									"                            console.log(\"new: \" + new_amount);",
									"                            pm.expect(new_amount == old_amount + tnx_obj.amount).to.be.true;",
									"                        });",
									"                    } else {",
									"                        pm.test(\"had new record of account \" + tnx_obj.category_name + \" with amount \" + tnx_obj.amount, function () {",
									"                            pm.expect(hasAccoountInNewDB && new_amount == tnx_obj.amount).to.be.true;",
									"                        });",
									"                    }",
									"                } else {",
									"                    console.log(\"Tnx thực hiện với coa_type khác income, nothing happen with report cash-flow\");",
									"",
									"                    pm.test(\"Nothing happen!!!\", function () {",
									"                        pm.expect(JSON.stringify(report_income) == JSON.stringify(old_report_income)).to.be.true;",
									"                    });",
									"                }",
									"",
									"                full_check++;",
									"                pm.environment.set(\"C-full_check\",full_check);",
									"                postman.setNextRequest(\"get_report_income_expense\");",
									"            } else {",
									"                old_report_expense = pm.environment.get(\"C-report_expense\");",
									"                for(let i in old_report_expense){",
									"                    if(old_report_expense[i].coa_name == tnx_obj.category_name){",
									"                        hasAccountInOldDB = true;",
									"                        old_amount = old_report_expense[i].total_amount;",
									"                        break;",
									"                    }",
									"                }",
									"",
									"                for(let i in report_expense){",
									"                    if(report_expense[i].coa_id == tnx_obj.category_id){",
									"                        hasAccoountInNewDB = true;",
									"                        new_amount = report_expense[i].total_amount;",
									"                        break;",
									"                    }",
									"                }",
									"",
									"                if(tnx_obj.coa_type == \"expense\"){",
									"                    console.log(\"Tnx thực hiện với coa_type là expense, giảm expense tương ứng trong tk\");",
									"",
									"                    // check db_data",
									"                    if(hasAccountInOldDB){",
									"                        pm.test(\"increase account \" + tnx_obj.category_name + \" with amount \" + tnx_obj.amount, function () {",
									"                            console.log(\"old: \" + old_amount);",
									"                            console.log(\"new: \" + new_amount);",
									"                            pm.expect(new_amount == old_amount + tnx_obj.amount).to.be.true;",
									"                        });",
									"                    } else {",
									"                        pm.test(\"had new record of account \" + tnx_obj.category_name + \" with amount \" + tnx_obj.amount, function () {",
									"                            pm.expect(hasAccoountInNewDB && new_amount == tnx_obj.amount).to.be.true;",
									"                        });",
									"                    }",
									"                } else {",
									"                    console.log(\"Tnx thực hiện với coa_type khác expense, nothing happen with report cash-flow\");",
									"",
									"                    pm.test(\"Nothing happen!!!\", function () {",
									"                        pm.expect(JSON.stringify(report_expense) == JSON.stringify(old_report_expense)).to.be.true;",
									"                    });",
									"                }",
									"",
									"                pm.environment.unset(\"C-full_check\");",
									"                postman.setNextRequest(\"get_report_account_receivable_unpaid\"); // get_report_account_receivable_unpaid",
									"            }",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get report cash_flow, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-ledger/api/v1/report/summary-by-category",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-ledger",
								"api",
								"v1",
								"report",
								"summary-by-category"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_report_account_receivable_unpaid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ============================= get last day (Sun is end of Week)",
									"function getLastDayOfCurrentWeek() {",
									"    const now = new Date();",
									"    const lastDay = new Date(now);",
									"    const daysUntilSunday = 7 - now.getDay();  // if Saturday is end, change 7 => 6",
									"    lastDay.setDate(now.getDate() + daysUntilSunday);",
									"    return lastDay;",
									"}",
									"",
									"// ============================= get first day (Sun is end of Week)",
									"function getFirstDayOfCurrentWeek() {",
									"    const now = new Date();",
									"    const firstDay = new Date(now);",
									"    firstDay.setDate(now.getDate() - now.getDay() + 1);  // if Saturday is end, remove +1",
									"    return firstDay;",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let unpaid_account_payable = null;",
									"    try {",
									"        unpaid_account_payable = jsData.data.unpaid_amount_lifetime_categories;",
									"    } catch {",
									"        console.log(\"Can't get data\");",
									"    }",
									"",
									"    switch(testcase){",
									"        case 2:",
									"            pm.test(\"Got unpaid_account_payable data\", function () {",
									"                pm.expect(unpaid_account_payable != null).to.be.true;",
									"            });",
									"            pm.environment.set(\"C-unpaid_account_payable\",unpaid_account_payable);",
									"            // console.log(\"unpaid_account_payable: \",unpaid_account_payable);",
									"",
									"            postman.setNextRequest(\"get_report_account_receivable_customer\"); //get_report_account_receivable_customer",
									"            break;",
									"        case 4: case 6:",
									"            let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"            let po_obj = pm.environment.get(\"C-po_obj\");",
									"            let old_data = pm.environment.get(\"C-unpaid_account_payable\");",
									"            let paid_amount = parseFloat(tnx_obj.amount);",
									"",
									"            // unpaid_total",
									"            pm.test(\"Total unpaid decrease \" + paid_amount, function () {",
									"                console.log(\"old: \" + old_data.unpaid_total);",
									"                console.log(\"new: \" + unpaid_account_payable.unpaid_total);",
									"                pm.expect(unpaid_account_payable.unpaid_total.toFixed(2) == (old_data.unpaid_total - paid_amount).toFixed(2)).to.be.true;",
									"            });",
									"",
									"            let due_date = new Date(po_obj.due_at);",
									"            let due_date_timestamp = Math.floor(due_date.getTime()/1000);",
									"            let today = new Date();",
									"            let today_timestamp = Math.floor(today.getTime()/1000);",
									"            let last_day_of_current_week = getLastDayOfCurrentWeek();",
									"            let last_day_of_current_week_stp = Math.floor(last_day_of_current_week.getTime()/1000);",
									"            let first_day_of_current_week = getFirstDayOfCurrentWeek();",
									"            let first_day_of_current_week_stp = Math.floor(first_day_of_current_week.getTime()/1000);",
									"            let due_type;",
									"            // console.log(\"debug: \" + (due_date_timestamp - today_timestamp));",
									"            if(due_date_timestamp > today_timestamp){",
									"                if(due_date_timestamp < last_day_of_current_week_stp){",
									"                    due_type = \"undue_n_7d\";",
									"                } else {",
									"                    due_type = \"undue\";",
									"                }",
									"            } else {",
									"                if(today_timestamp - due_date_timestamp > 90*24*60*60){",
									"                    due_type = \"overdue_over\";",
									"                } else if (today_timestamp - due_date_timestamp > 60*24*60*60){",
									"                    due_type = \"overdue_between\";",
									"                } else if (today_timestamp - due_date_timestamp > 30*24*60*60){",
									"                    due_type = \"overdue_less\";",
									"                } else {",
									"                    if(due_date_timestamp > first_day_of_current_week_stp){",
									"                        due_type = \"due_n_7d\";",
									"                    } else {",
									"                        due_type = \"due\";",
									"                    }",
									"                }",
									"            }",
									"            pm.environment.set(\"C-due_type\",due_type);",
									"",
									"            console.log(\"old: \",old_data);",
									"            console.log(\"new: \",unpaid_account_payable);",
									"            switch(due_type){",
									"                case \"due\": case \"due_n_7d\":",
									"                    // unpaid_due",
									"                    pm.test(\"unpaid_due decrease \" + paid_amount, function () {",
									"                        console.log(\"old: \" + old_data.unpaid_due);",
									"                        console.log(\"expected: \" + (old_data.unpaid_due - paid_amount));",
									"                        console.log(\"new: \" + unpaid_account_payable.unpaid_due);",
									"                        pm.expect(unpaid_account_payable.unpaid_due.toFixed(2) == (old_data.unpaid_due - paid_amount).toFixed(2)).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_less",
									"                    pm.test(\"nothing happen unpaid_overdue_less\", function () {",
									"                        pm.expect(unpaid_account_payable.unpaid_overdue_less == old_data.unpaid_overdue_less).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_between",
									"                    pm.test(\"nothing happen unpaid_overdue_between\", function () {",
									"                        pm.expect(unpaid_account_payable.unpaid_overdue_between == old_data.unpaid_overdue_between).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_over",
									"                    pm.test(\"nothing happen unpaid_overdue_over\", function () {",
									"                        pm.expect(unpaid_account_payable.unpaid_overdue_over == old_data.unpaid_overdue_over).to.be.true;",
									"                    });",
									"                    break;",
									"                case \"overdue_less\":",
									"                    // unpaid_due",
									"                    pm.test(\"nothing happen unpaid_due\", function () {",
									"                        pm.expect(unpaid_account_payable.unpaid_due == old_data.unpaid_due).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_less",
									"                    pm.test(\"unpaid_overdue_less decrease \" + paid_amount, function () {",
									"                        console.log(\"old: \" + old_data.unpaid_overdue_less);",
									"                        console.log(\"new: \" + unpaid_account_payable.unpaid_overdue_less);",
									"                        pm.expect(unpaid_account_payable.unpaid_overdue_less.toFixed(2) == (old_data.unpaid_overdue_less - paid_amount).toFixed(2)).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_between",
									"                    pm.test(\"nothing happen unpaid_overdue_between\", function () {",
									"                        pm.expect(unpaid_account_payable.unpaid_overdue_between == old_data.unpaid_overdue_between).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_over",
									"                    pm.test(\"nothing happen unpaid_overdue_over\", function () {",
									"                        pm.expect(unpaid_account_payable.unpaid_overdue_over == old_data.unpaid_overdue_over).to.be.true;",
									"                    });",
									"                    break;",
									"                case \"overdue_between\":",
									"                    // unpaid_due",
									"                    pm.test(\"nothing happen unpaid_due\", function () {",
									"                        pm.expect(unpaid_account_payable.unpaid_due == old_data.unpaid_due).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_less",
									"                    pm.test(\"nothing happen unpaid_overdue_less\", function () {",
									"                        pm.expect(unpaid_account_payable.unpaid_overdue_less == old_data.unpaid_overdue_less).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_between",
									"                    pm.test(\"unpaid_overdue_between decrease \" + paid_amount, function () {",
									"                        console.log(\"old: \" + old_data.unpaid_overdue_between);",
									"                        console.log(\"new: \" + unpaid_account_payable.unpaid_overdue_between);",
									"                        pm.expect(unpaid_account_payable.unpaid_overdue_between.toFixed(2) == (old_data.unpaid_overdue_between - paid_amount).toFixed(2)).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_over",
									"                    pm.test(\"nothing happen unpaid_overdue_over\", function () {",
									"                        pm.expect(unpaid_account_payable.unpaid_overdue_over == old_data.unpaid_overdue_over).to.be.true;",
									"                    });",
									"                    break;",
									"                case \"overdue_over\":",
									"                    // unpaid_due",
									"                    pm.test(\"nothing happen unpaid_due\", function () {",
									"                        pm.expect(unpaid_account_payable.unpaid_due == old_data.unpaid_due).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_less",
									"                    pm.test(\"nothing happen unpaid_overdue_less\", function () {",
									"                        pm.expect(unpaid_account_payable.unpaid_overdue_less == old_data.unpaid_overdue_less).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_between",
									"                    pm.test(\"unpaid_overdue_between decrease\", function () {",
									"                        pm.expect(unpaid_account_payable.unpaid_overdue_between == old_data.unpaid_overdue_between).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_over",
									"                    pm.test(\"unpaid_overdue_over decrease \" + paid_amount, function () {",
									"                        console.log(\"old: \" + old_data.unpaid_overdue_over);",
									"                        console.log(\"new: \" + unpaid_account_payable.unpaid_overdue_over);",
									"                        pm.expect(unpaid_account_payable.unpaid_overdue_over.toFixed(2) == (old_data.unpaid_overdue_over - paid_amount).toFixed(2)).to.be.true;",
									"                    });",
									"                    break;",
									"                default:",
									"                    // unpaid_due",
									"                    pm.test(\"nothing happen unpaid_due\", function () {",
									"                        pm.expect(unpaid_account_payable.unpaid_due == old_data.unpaid_due).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_less",
									"                    pm.test(\"nothing happen unpaid_overdue_less\", function () {",
									"                        pm.expect(unpaid_account_payable.unpaid_overdue_less == old_data.unpaid_overdue_less).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_between",
									"                    pm.test(\"nothing happen unpaid_overdue_between\", function () {",
									"                        pm.expect(unpaid_account_payable.unpaid_overdue_between == old_data.unpaid_overdue_between).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_over",
									"                    pm.test(\"nothing happen unpaid_overdue_over\", function () {",
									"                        pm.expect(unpaid_account_payable.unpaid_overdue_over == old_data.unpaid_overdue_over).to.be.true;",
									"                    });",
									"                    break;",
									"            }",
									"",
									"            if(due_type == \"undue_n_7d\"){",
									"                // unpaid_overdue_more_than_today",
									"                pm.test(\"nothing happen unpaid_overdue_more_than_today\", function () {",
									"                    pm.expect(unpaid_account_payable.unpaid_overdue_more_than_today == old_data.unpaid_overdue_more_than_today).to.be.true;",
									"                });",
									"",
									"                // unpaid_overdue_less_than_today",
									"                pm.test(\"unpaid_overdue_less_than_today decrease \" + paid_amount, function () {",
									"                    console.log(\"old: \" + old_data.unpaid_overdue_less_than_today);",
									"                    console.log(\"expected: \" + (old_data.unpaid_overdue_less_than_today - paid_amount));",
									"                    console.log(\"new: \" + unpaid_account_payable.unpaid_overdue_less_than_today);",
									"                    pm.expect(unpaid_account_payable.unpaid_overdue_less_than_today == old_data.unpaid_overdue_less_than_today - paid_amount).to.be.true;",
									"                });",
									"",
									"                // unpaid_overdue_in_week",
									"                pm.test(\"unpaid_overdue_in_week decrease \" + paid_amount, function () {",
									"                    console.log(\"old: \" + old_data.unpaid_overdue_in_week);",
									"                    console.log(\"expected: \" + (old_data.unpaid_overdue_in_week - paid_amount));",
									"                    console.log(\"new: \" + unpaid_account_payable.unpaid_overdue_in_week);",
									"                    pm.expect(unpaid_account_payable.unpaid_overdue_in_week == old_data.unpaid_overdue_in_week - paid_amount).to.be.true;",
									"                });",
									"            } else if(due_type == \"due_n_7d\"){",
									"                // unpaid_overdue_more_than_today",
									"                pm.test(\"unpaid_overdue_more_than_today decrease \" + paid_amount, function () {",
									"                    console.log(\"old: \" + old_data.unpaid_overdue_more_than_today);",
									"                    console.log(\"expected: \" + (old_data.unpaid_overdue_more_than_today - paid_amount));",
									"                    console.log(\"new: \" + unpaid_account_payable.unpaid_overdue_more_than_today);",
									"                    pm.expect(unpaid_account_payable.unpaid_overdue_more_than_today == old_data.unpaid_overdue_more_than_today - paid_amount).to.be.true;",
									"                });",
									"",
									"                // unpaid_overdue_less_than_today",
									"                pm.test(\"nothing happen unpaid_overdue_less_than_today\", function () {",
									"                    pm.expect(unpaid_account_payable.unpaid_overdue_less_than_today == old_data.unpaid_overdue_less_than_today).to.be.true;",
									"                });",
									"",
									"                // unpaid_overdue_in_week",
									"                pm.test(\"unpaid_overdue_in_week increase \" + paid_amount, function () {",
									"                    console.log(\"old: \" + old_data.unpaid_overdue_in_week);",
									"                    console.log(\"expected: \" + (old_data.unpaid_overdue_in_week - paid_amount));",
									"                    console.log(\"new: \" + unpaid_account_payable.unpaid_overdue_in_week);",
									"                    pm.expect(unpaid_account_payable.unpaid_overdue_in_week == old_data.unpaid_overdue_in_week - paid_amount).to.be.true;",
									"                });",
									"            } else if (due_type == \"undue\"){",
									"                // unpaid_overdue_more_than_today",
									"                pm.test(\"nothing happen unpaid_overdue_more_than_today\", function () {",
									"                    pm.expect(unpaid_account_payable.unpaid_overdue_more_than_today == old_data.unpaid_overdue_more_than_today).to.be.true;",
									"                });",
									"",
									"                // unpaid_overdue_less_than_today",
									"                pm.test(\"unpaid_overdue_less_than_today increase \" + paid_amount, function () {",
									"                    console.log(\"old: \" + old_data.unpaid_overdue_less_than_today);",
									"                    console.log(\"expected: \" + (old_data.unpaid_overdue_less_than_today - paid_amount));",
									"                    console.log(\"new: \" + unpaid_account_payable.unpaid_overdue_less_than_today);",
									"                    pm.expect(unpaid_account_payable.unpaid_overdue_less_than_today == old_data.unpaid_overdue_less_than_today - paid_amount).to.be.true;",
									"                });",
									"",
									"                // unpaid_overdue_in_week",
									"                pm.test(\"nothing happen unpaid_overdue_in_week\", function () {",
									"                    pm.expect(unpaid_account_payable.unpaid_overdue_in_week == old_data.unpaid_overdue_in_week).to.be.true;",
									"                });",
									"            } else {",
									"                // unpaid_overdue_more_than_today",
									"                pm.test(\"unpaid_overdue_more_than_today increase \" + paid_amount, function () {",
									"                    console.log(\"old: \" + old_data.unpaid_overdue_more_than_today);",
									"                    console.log(\"expected: \" + (old_data.unpaid_overdue_more_than_today - paid_amount));",
									"                    console.log(\"new: \" + unpaid_account_payable.unpaid_overdue_more_than_today);",
									"                    pm.expect(unpaid_account_payable.unpaid_overdue_more_than_today == old_data.unpaid_overdue_more_than_today - paid_amount).to.be.true;",
									"                });",
									"",
									"                // unpaid_overdue_less_than_today",
									"                pm.test(\"nothing happen unpaid_overdue_less_than_today\", function () {",
									"                    pm.expect(unpaid_account_payable.unpaid_overdue_less_than_today == old_data.unpaid_overdue_less_than_today).to.be.true;",
									"                });",
									"",
									"                // unpaid_overdue_in_week",
									"                pm.test(\"nothing happen unpaid_overdue_in_week\", function () {",
									"                    pm.expect(unpaid_account_payable.unpaid_overdue_in_week == old_data.unpaid_overdue_in_week).to.be.true;",
									"                });",
									"            }",
									"",
									"            postman.setNextRequest(\"get_report_account_receivable_customer\"); // get_report_account_receivable_customer",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get report account receivable unpaid, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let payload = {",
									"    \"account_key\": \"B1001\",",
									"    \"branch_id\": pm.environment.get(\"C-branch_id\"),",
									"    \"business_id\": parseInt(pm.environment.get(\"C-business_id\"))",
									"    //   \"current_period_end\": \"string\",",
									"    //   \"current_period_start\": \"string\",",
									"    // \"page\": 1,",
									"    // \"page_size\": 20,",
									"    //   \"period\": \"string\",  // old due_days",
									"    //   \"previous_period_end\": \"string\",",
									"    //   \"previous_period_start\": \"string\",",
									"    //   \"report_type\": \"string\",",
									"    // \"timezone\": \"UTC+07:00\"",
									"}",
									"",
									"console.log(\"payload: \",payload);",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));",
									"pm.environment.set(\"C-report_obj\",payload);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/report/account-receivable-card-unpaid",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"report",
								"account-receivable-card-unpaid"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_report_account_receivable_customer",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"if(testcase != 2){",
									"    // timeout 2s to sync elastic search",
									"    setTimeout(function(){}, 2000);",
									"}",
									"",
									"let page = pm.environment.get(\"C-page\");",
									"",
									"if(!page){",
									"    page = 1;",
									"    pm.environment.set(\"C-page\",page);",
									"",
									"    let page_size = 20;",
									"    pm.environment.set(\"C-page_size\",page_size);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = JSON.parse(responseBody);",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let total_pages = jsData.meta.total_pages;",
									"    let page = pm.environment.get(\"C-page\");",
									"",
									"    let list_report_customer, old_list_report_customer;",
									"    switch(testcase){",
									"        case 2:",
									"            list_report_customer = pm.environment.get(\"C-list_report_customer\");",
									"            if(!list_report_customer){",
									"                list_report_customer = [];",
									"            }",
									"            break;",
									"        case 4: case 6:",
									"            old_list_report_customer = pm.environment.get(\"C-old_list_report_customer\");",
									"            if(!old_list_report_customer){",
									"                old_list_report_customer = pm.environment.get(\"C-list_report_customer\");",
									"                pm.environment.unset(\"C-list_report_customer\");",
									"                pm.environment.set(\"C-old_list_report_customer\",old_list_report_customer);",
									"            }",
									"",
									"            list_report_customer = pm.environment.get(\"C-list_report_customer\");",
									"            if(!list_report_customer){",
									"                list_report_customer = [];",
									"            }",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow\");",
									"            break;",
									"    }",
									"",
									"    for(let item in jsData.data){",
									"        list_report_customer[list_report_customer.length] = {",
									"            \"contact_id\":jsData.data[item].contact_id,",
									"            \"unpaid_total\":jsData.data[item].unpaid_total,",
									"            \"unpaid_due\":jsData.data[item].unpaid_due,",
									"            \"unpaid_overdue_less\":jsData.data[item].unpaid_overdue_less,",
									"            \"unpaid_overdue_between\":jsData.data[item].unpaid_overdue_between,",
									"            \"unpaid_overdue_over\":jsData.data[item].unpaid_overdue_over,",
									"            \"full_count\":jsData.data[item].full_count,",
									"            \"contact_name\":jsData.data[item].contact_info.contact_name,",
									"            \"contact_phone\":jsData.data[item].contact_info.contact_phone",
									"        }",
									"    }",
									"    pm.environment.set(\"C-list_report_customer\",list_report_customer);",
									"",
									"    if(page >= total_pages){",
									"        // must clear page & page_size",
									"        pm.environment.unset(\"C-page\");",
									"        pm.environment.unset(\"C-page_size\");",
									"",
									"        let po_obj = pm.environment.get(\"C-po_obj\");",
									"        let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"        let isFound = false, hasRecord = false;",
									"        switch(testcase){",
									"            case 2:",
									"                pm.test(\"Got all record! \" + list_report_customer.length, function () {",
									"                    pm.expect(list_report_customer.length > 0).to.be.true;",
									"                });",
									"",
									"                // console.log(\"list_report_customer: \",list_report_customer);",
									"",
									"                postman.setNextRequest(\"report_cash_flow_period\"); // report_cash_flow_period",
									"                break;",
									"            case 4: case 6:",
									"                let record_obj = null;",
									"                console.log(\"contact_id: \" + po_obj.contact_id);",
									"                for(let i in old_list_report_customer){",
									"                    if(old_list_report_customer[i].contact_id == po_obj.contact_id){",
									"                        record_obj = old_list_report_customer[i];",
									"                        break;",
									"                    }",
									"                }",
									"                // console.log(\"old_list_report_customer: \", old_list_report_customer);",
									"",
									"                pm.test(\"Nothing happen with total record\", function () {",
									"                    pm.expect(list_report_customer.length == old_list_report_customer.length).to.be.true;",
									"                });",
									"",
									"                let due_type = pm.environment.get(\"C-due_type\");",
									"                for(let i in list_report_customer){",
									"                    if(list_report_customer[i].contact_id == po_obj.contact_id){",
									"                        isFound = true;",
									"                        console.log(\"Found \" + list_report_customer[i].contact_name + ' - ' + list_report_customer[i].contact_phone);",
									"                        ",
									"                        pm.test(\"unpaid_total decrease \" + tnx_obj.amount, function () {",
									"                            console.log(\"exp: \" + (record_obj.unpaid_total - tnx_obj.amount));",
									"                            console.log(\"new: \" + list_report_customer[i].unpaid_total);",
									"                            pm.expect(list_report_customer[i].unpaid_total == record_obj.unpaid_total - tnx_obj.amount).to.be.true;",
									"                        });",
									"",
									"                        switch(due_type){",
									"                            case \"due\": case \"due_n_7d\":",
									"                                // unpaid_due",
									"                                pm.test(\"unpaid_due decrease \" + tnx_obj.amount, function () {",
									"                                    console.log(\"old: \" + record_obj.unpaid_due);",
									"                                    console.log(\"new: \" + list_report_customer[i].unpaid_due);",
									"                                    pm.expect(list_report_customer[i].unpaid_due == (record_obj.unpaid_due - tnx_obj.amount).toFixed(2)).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_less",
									"                                pm.test(\"nothing happen unpaid_overdue_less\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_less == record_obj.unpaid_overdue_less).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_between",
									"                                pm.test(\"nothing happen unpaid_overdue_between\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_between == record_obj.unpaid_overdue_between).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_over",
									"                                pm.test(\"nothing happen unpaid_overdue_over\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_over == record_obj.unpaid_overdue_over).to.be.true;",
									"                                });",
									"                                break;",
									"                            case \"overdue_less\":",
									"                                // unpaid_due",
									"                                pm.test(\"nothing happen unpaid_due\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_due == record_obj.unpaid_due).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_less",
									"                                pm.test(\"unpaid_overdue_less decrease \" + tnx_obj.amount, function () {",
									"                                    console.log(\"old: \" + record_obj.unpaid_overdue_less);",
									"                                    console.log(\"new: \" + list_report_customer[i].unpaid_overdue_less);",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_less == (record_obj.unpaid_overdue_less - tnx_obj.amount).toFixed(2)).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_between",
									"                                pm.test(\"nothing happen unpaid_overdue_between\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_between == record_obj.unpaid_overdue_between).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_over",
									"                                pm.test(\"nothing happen unpaid_overdue_over\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_over == record_obj.unpaid_overdue_over).to.be.true;",
									"                                });",
									"                                break;",
									"                            case \"overdue_between\":",
									"                                // unpaid_due",
									"                                pm.test(\"nothing happen unpaid_due\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_due == record_obj.unpaid_due).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_less",
									"                                pm.test(\"nothing happen unpaid_overdue_less\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_less == record_obj.unpaid_overdue_less).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_between",
									"                                pm.test(\"unpaid_overdue_between decrease \" + tnx_obj.amount, function () {",
									"                                    console.log(\"old: \" + record_obj.unpaid_overdue_between);",
									"                                    console.log(\"new: \" + list_report_customer[i].unpaid_overdue_between);",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_between == (record_obj.unpaid_overdue_between - tnx_obj.amount).toFixed(2)).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_over",
									"                                pm.test(\"nothing happen unpaid_overdue_over\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_over == record_obj.unpaid_overdue_over).to.be.true;",
									"                                });",
									"                                break;",
									"                            case \"overdue_over\":",
									"                                // unpaid_due",
									"                                pm.test(\"nothing happen unpaid_due\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_due == record_obj.unpaid_due).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_less",
									"                                pm.test(\"nothing happen unpaid_overdue_less\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_less == record_obj.unpaid_overdue_less).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_between",
									"                                pm.test(\"nothing happen unpaid_overdue_between\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_between == record_obj.unpaid_overdue_between).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_over",
									"                                pm.test(\"unpaid_overdue_over decrease \" + tnx_obj.amount, function () {",
									"                                    console.log(\"old: \" + record_obj.unpaid_overdue_over);",
									"                                    console.log(\"new: \" + list_report_customer[i].unpaid_overdue_over);",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_over == (record_obj.unpaid_overdue_over - tnx_obj.amount).toFixed(2)).to.be.true;",
									"                                });",
									"                                break;",
									"                            default:",
									"                                // unpaid_due",
									"                                pm.test(\"nothing happen unpaid_due\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_due == record_obj.unpaid_due).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_less",
									"                                pm.test(\"nothing happen unpaid_overdue_less\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_less == record_obj.unpaid_overdue_less).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_between",
									"                                pm.test(\"nothing happen unpaid_overdue_between\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_between == record_obj.unpaid_overdue_between).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_over",
									"                                pm.test(\"nothing happen unpaid_overdue_over\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_over == record_obj.unpaid_overdue_over).to.be.true;",
									"                                });",
									"                                break;",
									"                        }",
									"                        break;",
									"                    }",
									"                }",
									"",
									"                pm.test(\"Found new product\", function () {",
									"                    pm.expect(isFound).to.be.true;",
									"                });",
									"",
									"                postman.setNextRequest(\"report_cash_flow_period\"); // report_cash_flow_period",
									"                break;",
									"            default:",
									"                console.log(\"Missing flow, end test\");",
									"                postman.setNextRequest(null);",
									"                break;",
									"        }",
									"    } else {",
									"        page++;",
									"        pm.environment.set(\"C-page\",page);",
									"",
									"        console.log(\"view next page (\" + page + \") to get more customer report\");",
									"        postman.setNextRequest(\"get_report_account_receivable_customer\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get list product, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"account_key\": \"B1001\",\n    \"branch_id\": \"{{C-branch_id}}\",\n    \"business_id\": {{C-business_id}},\n    \"page\": {{C-page}},\n    \"page_size\": {{C-page_size}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/report/account-receivable-customer-unpaid",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"report",
								"account-receivable-customer-unpaid"
							]
						}
					},
					"response": []
				},
				{
					"name": "report_cash_flow_period",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/**",
									" * period: year, month, week",
									" */",
									"",
									"let period = \"month\";",
									"pm.environment.set(\"C-period\",period);",
									"",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"console.log(\"period: \" + period);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let cash_flow_period = null;",
									"    try {",
									"        cash_flow_period = jsData.data;",
									"        /**",
									"         * period: week, month, year",
									"         * sum_card_data",
									"         * dates_data",
									"         */",
									"    } catch {",
									"        console.log(\"Can't get report cash_flow data\");",
									"    }",
									"",
									"    switch(testcase){",
									"        case 2:",
									"            pm.test(\"Got cash_flow_period \", function () {",
									"                pm.environment.set(\"C-cash_flow_period\",cash_flow_period);",
									"                pm.expect(cash_flow_period != null).to.be.true;",
									"            });",
									"",
									"            console.log(\"cash_flow_period: \", cash_flow_period);",
									"",
									"            // ================================================ bonus check current data",
									"            // waiting logic updated at phase 2",
									"            // ================================================ ",
									"",
									"            postman.setNextRequest(\"report_profit_loss_period\"); // report_profit_loss_period",
									"            break;",
									"        case 4: case 6:",
									"            let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"            let list_income_account = pm.environment.get(\"C-list_income_account\");",
									"            let list_expense_account = pm.environment.get(\"C-list_expense_account\");",
									"            let old_cash_flow_period = pm.environment.get(\"C-cash_flow_period\");",
									"",
									"            // hiện tại chưa chốt login nên tạm thời check phần sum_card_data",
									"            if(tnx_obj.txn_type == \"in\"){",
									"                // tăng income",
									"                pm.test(\"total_income increase \" + tnx_obj.amount, function () {",
									"                    pm.expect(cash_flow_period.sum_card_data.total_income == old_cash_flow_period.sum_card_data.total_income + parseFloat(tnx_obj.amount)).to.be.true;",
									"                });",
									"",
									"                pm.test(\"nothing happen with total_expense\", function () {",
									"                    pm.expect(cash_flow_period.sum_card_data.total_expense == old_cash_flow_period.sum_card_data.total_expense).to.be.true;",
									"                });",
									"",
									"                pm.test(\"total_gap increase \" + tnx_obj.amount, function () {",
									"                    pm.expect(cash_flow_period.sum_card_data.total_gap == old_cash_flow_period.sum_card_data.total_gap + parseFloat(tnx_obj.amount)).to.be.true;",
									"                });",
									"            } else {",
									"                // tăng expense",
									"                pm.test(\"nothing happen with total_income\", function () {",
									"                    pm.expect(cash_flow_period.sum_card_data.total_income == old_cash_flow_period.sum_card_data.total_income).to.be.true;",
									"                });",
									"",
									"                pm.test(\"total_expense increase \"  + tnx_obj.amount, function () {",
									"                    pm.expect(cash_flow_period.sum_card_data.total_expense == old_cash_flow_period.sum_card_data.total_expense + tnx_obj.amount).to.be.true;",
									"                });",
									"",
									"                pm.test(\"total_gap decrease \" + tnx_obj.amount, function () {",
									"                    pm.expect(cash_flow_period.sum_card_data.total_gap == old_cash_flow_period.sum_card_data.total_gap - tnx_obj.amount).to.be.true;",
									"                });",
									"            }",
									"",
									"            postman.setNextRequest(\"report_profit_loss_period\"); // report_profit_loss_period",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get report cash_flow, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-location-timezone",
								"value": "UTC+07:00"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"branch_id\": \"{{C-branch_id}}\",\n    \"business_id\": {{C-business_id}},\n    \"period\": \"{{C-period}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-ledger/api/v1/report/cash-flow-period",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-ledger",
								"api",
								"v1",
								"report",
								"cash-flow-period"
							]
						}
					},
					"response": []
				},
				{
					"name": "report_profit_loss_period",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/**",
									" * \"report_type\": sum,income,expense",
									" * Note: report_type = sum => hiện tại bị null dates_data",
									" * - C1: call từng loại income, expense dể lấy dates_data",
									" * - C2: wait fixing from dev",
									" * => tạm thời xử lý case sum, 2 case còn lại sẽ handle sau",
									" */",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let full_check = pm.environment.get(\"C-full_check\");",
									"if(!full_check){",
									"    full_check = 1;",
									"    pm.environment.set(\"C-full_check\",full_check);",
									"    report_type = \"income\";",
									"} else {",
									"    report_type = \"expense\";",
									"}",
									"pm.environment.set(\"C-report_type\",report_type);",
									"console.log(\"full_check: \" + full_check);",
									"console.log(\"report_type: \" + report_type);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let full_check = pm.environment.get(\"C-full_check\");",
									"    let profit_period = null, loss_period = null;",
									"    try {",
									"        if(full_check == 1){",
									"            profit_period = jsData.data;",
									"        } else {",
									"            loss_period = jsData.data;",
									"        }",
									"        /**",
									"         * period: week, month, year",
									"         * sum_card_data",
									"         * dates_data",
									"         */",
									"    } catch {",
									"        console.log(\"Can't get report cash_flow data\");",
									"    }",
									"",
									"    switch(testcase){",
									"        case 2:",
									"            if(full_check == 1){",
									"                pm.test(\"Got profit_period \", function () {",
									"                    pm.environment.set(\"C-profit_period\",profit_period);",
									"                    pm.expect(profit_period != null).to.be.true;",
									"                });",
									"                pm.environment.set(\"C-profit_period\",profit_period);",
									"                // console.log(\"profit_period: \", profit_period);",
									"",
									"                full_check++;",
									"                pm.environment.set(\"C-full_check\",full_check);",
									"                postman.setNextRequest(\"report_profit_loss_period\");",
									"            } else {",
									"                pm.test(\"Got loss_period \", function () {",
									"                    pm.environment.set(\"C-loss_period\",loss_period);",
									"                    pm.expect(loss_period != null).to.be.true;",
									"                });",
									"                pm.environment.set(\"C-loss_period\",loss_period);",
									"                // console.log(\"loss_period: \", loss_period);",
									"",
									"                pm.environment.unset(\"C-full_check\");",
									"                postman.setNextRequest(\"report_chart_balance_change\"); // report_chart_balance_change",
									"            }",
									"            break;",
									"        case 4: case 6:",
									"            let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"            let tnx_date = tnx_obj.value_at.substring(0,10);",
									"            ",
									"            if(full_check == 1){",
									"                let old_profit_period = pm.environment.get(\"C-profit_period\");",
									"                // console.log(\"old_profit_period: \", old_profit_period);",
									"                // console.log(\"===============================\");",
									"                // console.log(\"profit_period: \", profit_period);",
									"                // nothing happen",
									"                pm.test(\"Nothing happen!!!\", function () {",
									"                    pm.expect(JSON.stringify(profit_period) == JSON.stringify(old_profit_period)).to.be.true;",
									"                });",
									"",
									"                full_check++;",
									"                pm.environment.set(\"C-full_check\",full_check);",
									"                postman.setNextRequest(\"report_profit_loss_period\");",
									"            } else {",
									"                let old_loss_period = pm.environment.get(\"C-loss_period\");",
									"                // console.log(\"old_loss_period: \", old_loss_period);",
									"                // console.log(\"===============================\");",
									"                // console.log(\"loss_period: \", loss_period);",
									"   ",
									"                pm.test(\"Nothing happen!!!\", function () {",
									"                    pm.expect(JSON.stringify(loss_period) == JSON.stringify(old_loss_period)).to.be.true;",
									"                });",
									"",
									"                pm.environment.unset(\"C-full_check\");",
									"                postman.setNextRequest(\"report_chart_balance_change\"); // report_chart_balance_change",
									"            }",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get report cash_flow, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-location-timezone",
								"value": "UTC+07:00"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"branch_id\": \"{{C-branch_id}}\",\n    \"business_id\": {{C-business_id}},\n    \"period\": \"{{C-period}}\",\n    \"report_type\": \"{{C-report_type}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-ledger/api/v1/report/profit-loss-period",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-ledger",
								"api",
								"v1",
								"report",
								"profit-loss-period"
							]
						}
					},
					"response": []
				},
				{
					"name": "report_chart_balance_change",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/**",
									" * \"report_type\": sum,income,expense",
									" * Note: report_type = sum => hiện tại bị null dates_data",
									" * - C1: call từng loại income, expense dể lấy dates_data",
									" * - C2: wait fixing from dev",
									" * => tạm thời xử lý case sum, 2 case còn lại sẽ handle sau",
									" * period thêm 1 số filter: quarter, l7d, l30d, l90d",
									" */",
									"let report_type = \"sum\";",
									"pm.environment.set(\"C-report_type\",report_type);",
									"",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"console.log(\"report_type: \" + report_type);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let chart_balance_change = null;",
									"    try {",
									"        chart_balance_change = jsData.data;",
									"        /**",
									"         * period: week, month, year",
									"         * sum_card_data",
									"         * dates_data",
									"         */",
									"    } catch {",
									"        console.log(\"Can't get report cash_flow data\");",
									"    }",
									"",
									"    switch(testcase){",
									"        case 2:",
									"            pm.test(\"Got chart_balance_change \", function () {",
									"                pm.environment.set(\"C-chart_balance_change\",chart_balance_change);",
									"                pm.expect(chart_balance_change != null).to.be.true;",
									"            });",
									"",
									"            console.log(\"chart_balance_change: \", chart_balance_change);",
									"",
									"            // ================================================ bonus check current data",
									"            // waiting logic updated at phase 2",
									"            // ================================================ ",
									"",
									"            postman.setNextRequest(\"get_transaction_summary\"); // get_list_transaction",
									"            break;",
									"        case 4: case 6:",
									"            let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"            let old_chart_balance_change = pm.environment.get(\"C-chart_balance_change\");",
									"            // console.log(\"debug old_chart_balance_change: \", old_chart_balance_change);",
									"            // console.log(\"debug chart_balance_change: \", chart_balance_change);",
									"",
									"            let tnx_date = tnx_obj.value_at.substring(0,10);",
									"            let old_date = null, act_date = null;",
									"            for(let i in chart_balance_change.dates_data){",
									"                let day_i = chart_balance_change.dates_data[i].date.substring(0,10);",
									"                if(day_i == tnx_date){",
									"                    act_date = chart_balance_change.dates_data[i];",
									"                    break;",
									"                }",
									"            }",
									"",
									"            for(let i in old_chart_balance_change.dates_data){",
									"                let day_i = old_chart_balance_change.dates_data[i].date.substring(0,10);",
									"                if(day_i == tnx_date){",
									"                    old_date = old_chart_balance_change.dates_data[i];",
									"                    break;",
									"                }",
									"            }",
									"",
									"            // có thay đổi => total_credit increase",
									"            pm.test(\"total_credit increase \" + tnx_obj.amount, function () {",
									"                pm.expect(chart_balance_change.sum_card_data.total_credit == old_chart_balance_change.sum_card_data.total_credit + tnx_obj.amount).to.be.true;",
									"            });",
									"            // thay đổi ngày tương ứng",
									"            if(old_date != null && act_date != null){",
									"                console.log(\"act_date: \",act_date);",
									"                console.log(\"old_date: \",old_date);",
									"                pm.test(\"credit_amount at \" + tnx_date + \" increase \" + tnx_obj.amount, function () {",
									"                    pm.expect(act_date.credit_amount == old_date.credit_amount + tnx_obj.amount).to.be.true;",
									"                });",
									"",
									"                pm.test(\"end_amount at \" + tnx_date + \" decrease \" + tnx_obj.amount, function () {",
									"                    pm.expect(act_date.end_amount == old_date.end_amount - tnx_obj.amount).to.be.true;",
									"                });",
									"",
									"                pm.test(\"gap at \" + tnx_date + \" decrease \" + tnx_obj.amount, function () {",
									"                    pm.expect(act_date.gap == old_date.gap - tnx_obj.amount).to.be.true;",
									"                });",
									"            }",
									"",
									"            console.log(\"-------- End Testsuite 77 --------\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get report cash_flow, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-location-timezone",
								"value": "UTC+07:00"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"branch_id\": \"{{C-branch_id}}\",\n    \"business_id\": {{C-business_id}},\n    \"period\": \"{{C-period}}\",\n    \"report_type\": \"{{C-report_type}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-ledger/api/v1/report/chart-balance-change",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-ledger",
								"api",
								"v1",
								"report",
								"chart-balance-change"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.request.headers.add({",
							" key: \"authorization\",",
							" value: \"Bearer \" + pm.environment.get(\"C-userToken\")",
							"});",
							"",
							"pm.request.headers.add({",
							" key: \"Content-Type\",",
							" value: \"application/json\"",
							"});"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"let configs = {",
					"    \"is_use_email\":true,",
					"    \"limit_page\":5,",
					"    \"timeout\":12000, // miliseconds => timeout to call API",
					"    \"is_buyer_gen\":false,",
					"    \"test_payment_method\":\"bank_transfer\" // bank_transfer, viet_qr_pro_mb, va_galaxy",
					"}",
					"",
					"pm.environment.set(\"C-configs\",configs);",
					"// console.log(\"configs: \",configs);"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"// ====================================== parser cURL",
					"function parseCURL(request_api){",
					"    let curl = \"\";",
					"    if(request_api.method == \"PUT\"){",
					"        curl = \"curl --location --request PUT \";",
					"    } else if(request_api.method == \"DELETE\"){",
					"        curl = \"curl --location --request DELETE \";",
					"    } else {",
					"        curl = \"curl --location \";",
					"    }",
					"    curl += \"'\" + request_api.url.protocol + \"://\"",
					"    // host",
					"    for(let i in request_api.url.host){",
					"        if(i >= request_api.url.host.length - 1){",
					"            curl += request_api.url.host[i] + \"/\";",
					"        } else {",
					"            curl += request_api.url.host[i] + \".\";",
					"        }",
					"    }",
					"    // path",
					"    for(let i in request_api.url.path){",
					"        if(i >= request_api.url.path.length - 1){",
					"            curl += request_api.url.path[i];",
					"        } else {",
					"            curl += request_api.url.path[i] + \"/\";",
					"        }",
					"    }",
					"    // query (if have)",
					"    if(\"query\" in request_api.url){",
					"        if(request_api.url.length > 0){",
					"            curl += \"? \";",
					"            for(let i in request_api.url.query){",
					"                if(i >= request_api.url.query.length - 1){",
					"                    curl += request_api.url.query[i].key + \"=\" + request_api.url.query[i].value + \"' \";",
					"                } else {",
					"                    curl += request_api.url.query[i].key + \"=\" + request_api.url.query[i].value + \"&\";",
					"                }",
					"            }",
					"        } else {",
					"            curl += \"' \";",
					"        }",
					"    } else {",
					"        curl += \"' \";",
					"    }",
					"    // header",
					"    for(let i in request_api.header){",
					"        if(i >= request_api.header.length - 1){",
					"            curl += \"--header '\" + request_api.header[i].key + \": \" + request_api.header[i].value + \"'\";",
					"        } else {",
					"            curl += \"--header '\" + request_api.header[i].key + \": \" + request_api.header[i].value + \"' \";",
					"        }",
					"    }",
					"    switch(request_api.method){",
					"        case \"POST\":",
					"            curl += \" --data '\" + request_api.body.raw + \"'\"",
					"            break;",
					"        case \"PUT\":",
					"            curl += \" --data-raw '\" + request_api.body.raw + \"'\"",
					"            break;",
					"        default:",
					"            break;",
					"    }",
					"    console.log(curl);",
					"    return curl;",
					"}",
					"const request_api = pm.request.toJSON();",
					"parseCURL(request_api);"
				]
			}
		}
	]
}