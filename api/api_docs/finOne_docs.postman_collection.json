{
	"info": {
		"_postman_id": "6199687f-e142-41af-b289-de5ec4652929",
		"name": "finOne_docs",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "282640"
	},
	"item": [
		{
			"name": "register",
			"item": [
				{
					"name": "verify_account",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/**",
									" * switch(code)",
									" * - case 102000: already has this user",
									" * - case 104000: failed to validate request payload",
									" * - case 104004: not found",
									" * - case 105000: internal server",
									" */",
									"",
									"let testcase = 1;",
									"console.log(\"Testcase: \" + testcase);",
									"pm.environment.set(\"C-testcase\",testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"",
									"} else {",
									"    console.log(\"Can't verify otp for register new account, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-user-id",
								"value": "{{$guid}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "x-locale",
								"value": "{{x-locale}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"qctestapi.a5srR8LxPB@finanteam.testinator.com\",\n    \"phone_number\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-user/api/v1/auth/has-user",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-user",
								"api",
								"v1",
								"auth",
								"has-user"
							]
						}
					},
					"response": []
				},
				{
					"name": "register_new_account",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/**",
									" * switch(code)",
									" * - case 102001: success & wait for confirmation",
									" * - case 104000: failed to validate request payload",
									" * - case 105000: internal server",
									" */",
									"// ============================= random characters",
									"function randomChars(length) {",
									"    var result           = '';",
									"    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
									"    var charactersLength = characters.length;",
									"    for ( var i = 0; i < length; i++ ) {",
									"      result += characters.charAt(Math.floor(Math.random() * ",
									" charactersLength));",
									"   }",
									"   return result;",
									"}",
									"",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let payload = {",
									"  \"device_info\": {",
									"    \"id\": \"C9102FC6-466C-4980-B795-A91A2FD7F97F\",",
									"    \"name\": \"IP name\",",
									"    \"os\": \"iphone\"",
									"  },",
									"  \"email\": \"aaaaaa@finanteam.testinator.com\",",
									"  \"password\": \"12345678\",",
									"  \"phone_number\": \"\",",
									"  \"platform_key\": \"deskstop-web\"",
									"}",
									"",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));",
									"pm.environment.set(\"C-user_obj\",payload);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"",
									"} else {",
									"    console.log(\"Can't register new account, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "x-user-id",
								"value": "<string>",
								"description": "(Required) user id",
								"disabled": true
							},
							{
								"key": "x-locale",
								"value": "<string>",
								"description": "locale",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-user/api/v1/auth/register-user",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-user",
								"api",
								"v1",
								"auth",
								"register-user"
							]
						},
						"description": "Register User"
					},
					"response": []
				},
				{
					"name": "confirm_otp",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let payload = {",
									"  \"device_info\": {",
									"    \"id\": \"string\",",
									"    \"name\": \"string\",",
									"    \"os\": \"string\"",
									"  },",
									"  \"email\": \"string\",",
									"  \"passcode\": \"string\",",
									"  \"phone_number\": \"string\",",
									"  \"platform_key\": \"string\"",
									"}",
									"",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"",
									"} else {",
									"    console.log(\"Can't verify otp for register new account, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								},
								{
									"key": "value",
									"value": "{{apiKey}}",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "x-user-id",
								"value": "<string>",
								"description": "(Required) user id"
							},
							{
								"key": "x-locale",
								"value": "<string>",
								"description": "locale"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-user/api/v1/auth/verify-user",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-user",
								"api",
								"v1",
								"auth",
								"verify-user"
							]
						},
						"description": "Verify User"
					},
					"response": []
				},
				{
					"name": "invite_staff",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "authority",
								"value": "dev-api.finan.one"
							},
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "accept-language",
								"value": "en-US,en;q=0.9,vi;q=0.8"
							},
							{
								"key": "cache-control",
								"value": "no-cache"
							},
							{
								"key": "content-type",
								"value": "application/json"
							},
							{
								"key": "origin",
								"value": "https://id-dev.finan.one"
							},
							{
								"key": "pragma",
								"value": "no-cache"
							},
							{
								"key": "referer",
								"value": "https://id-dev.finan.one/"
							},
							{
								"key": "sec-ch-ua",
								"value": "\"Google Chrome\";v=\"113\", \"Chromium\";v=\"113\", \"Not-A.Brand\";v=\"24\""
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?0"
							},
							{
								"key": "sec-ch-ua-platform",
								"value": "\"macOS\""
							},
							{
								"key": "sec-fetch-dest",
								"value": "empty"
							},
							{
								"key": "sec-fetch-mode",
								"value": "cors"
							},
							{
								"key": "sec-fetch-site",
								"value": "same-site"
							},
							{
								"key": "user-agent",
								"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.0.0 Safari/537.36"
							},
							{
								"key": "x-locale-code",
								"value": "en_US"
							},
							{
								"key": "x-location-timezone",
								"value": "UTC+07:00"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"staff_invite_token\": \"O5SDKPQB2T\",\n    \"password\": \"72d1716371ccda1a4348a3b409d1a22ae2f32c4385c7c67ada91dd1d3bf8685cf5eb90a1\",\n    \"staff_id\": \"ff4fedb2-5c9f-4dc6-83f9-00173882f379\",\n    \"user_id\": \"86b36def-5983-443d-aaca-485438be9d89\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dev-api.finan.one/fo-user/api/v1/auth/create-password-staff",
							"protocol": "https",
							"host": [
								"dev-api",
								"finan",
								"one"
							],
							"path": [
								"fo-user",
								"api",
								"v1",
								"auth",
								"create-password-staff"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "authen",
			"item": [
				{
					"name": "renew-token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/**",
									" * currently, manual to create account pwd & use charles to get it",
									" * default pwd created: 21112007 (prod with default account & no need pwd)",
									" */",
									"",
									"let email = pm.environment.get(\"SER-email\");",
									"let phone_number = pm.environment.get(\"SER-phone_number\");",
									"",
									"console.log(\"--- Start Testsuite ---\");",
									"let testcase = 1;",
									"",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let isPhone = true;",
									"",
									"let payload;",
									"if(isPhone){",
									"    console.log(\"login with phone_number: \" + phone_number);",
									"    payload = {",
									"        \"phone_number\": phone_number",
									"    }",
									"} else {",
									"    console.log(\"login with email: \" + email);",
									"    payload = {",
									"        \"email\": email",
									"    }",
									"}",
									"",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));",
									"pm.environment.set(\"C-testcase\",testcase);",
									"pm.environment.set(\"C-isPhone\",isPhone);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    let jsData = pm.response.json();",
									"",
									"    if(jsData.data.is_existed && jsData.data.has_password){",
									"        postman.setNextRequest(\"login_with_pwd\");",
									"    } else if(jsData.data.is_existed) {",
									"        console.log(\"This account doesn't create pwd, please manual create!!!\");",
									"        postman.setNextRequest(null);",
									"    } else {",
									"        console.log(\"Error:\", JSON.stringify(jsData));",
									"        console.log(\"THIS ACCOUNT IS NOT EXISTED IN SYSTEM, WILL MANUAL CREATE IT\");",
									"        postman.setNextRequest(null);",
									"    }",
									"} else {",
									"    console.log(\"Error, end test\");",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"refresh_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJGTyBVc2VyIiwic3ViIjoiMGEzNWU4ZTMtZjhmZi00ODhlLWJmMzYtZTExMTA5N2RkMTY5IiwiYXVkIjpbIkZPIFVzZXIiXSwiZXhwIjoxNzE3MjM1NTM0LCJuYmYiOjE3MTQ2NDM1MzQsImlhdCI6MTcxNDY0MzUzNCwiYnVzaW5lc3NfaWQiOiIxNCIsImRldmljZV9pZCI6IkM5MTAyRkM2LTQ2NkMtNDk4MC1CNzk1LUE5MUEyRkQ3Rjk3RiIsInBsYXRmb3JtX2tleSI6ImRlc2tzdG9wLXdlYiIsInVzZXJfaWQiOiIwYTM1ZThlMy1mOGZmLTQ4OGUtYmYzNi1lMTExMDk3ZGQxNjkiLCJsb2dpbl9tZXRob2QiOiJvdHAiLCJhcHBfdmVyc2lvbiI6IiIsInJlZnJlc2hfdG9rZW5faWQiOiI0OTgyNGZiMS00YWI5LTRlOTQtOTc4MS0xNWE4ODJhMzYyNDIiLCJpc19yZWZyZXNoX3Rva2VuIjp0cnVlfQ.q-UZNtQDz7zvbcsj1fvpoUEf-rfNwfvz097Zsx8djY4\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-user/api/v1/auth/account/renew-token",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-user",
								"api",
								"v1",
								"auth",
								"account",
								"renew-token"
							]
						}
					},
					"response": []
				},
				{
					"name": "login",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "x-locale",
								"value": "<string>",
								"description": "locale",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"disabled": true
							},
							{
								"key": "Accept",
								"value": "application/json",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"app_version\": \"1.0.0\",\n    \"device_info\": {\n        \"id\": \"C9102FC6-466C-4980-B795-A91A2FD7F97F\",\n        \"name\": \"IP name\",\n        \"os\": \"iphone\"\n    },\n    \"email\": \"qctestapi.dm9tn4e0yu@finanteam.testinator.com\",\n    \"password\": \"12345678\",\n    \"phone_number\": \"\",\n    \"platform_key\": \"mobile-app\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-user/api/v1/auth/login",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-user",
								"api",
								"v1",
								"auth",
								"login"
							]
						},
						"description": "Login User"
					},
					"response": []
				},
				{
					"name": "logout",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "x-locale",
								"value": "<string>",
								"description": "locale",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"app_version\": \"1.0.0\",\n    \"device_info\": {\n        \"id\": \"C9102FC6-466C-4980-B795-A91A2FD7F97F\",\n        \"name\": \"IP name\",\n        \"os\": \"iphone\"\n    },\n  \"email\": \"aaaaaa@finanteam.testinator.com\",\n  \"password\": \"12345678\",\n  \"phone_number\": \"\",\n  \"platform_key\": \"deskstop-web\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-user/api/v1/auth/logout",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-user",
								"api",
								"v1",
								"auth",
								"logout"
							]
						},
						"description": "Login User"
					},
					"response": []
				}
			]
		},
		{
			"name": "reset-pwd",
			"item": [
				{
					"name": "request_reset_pwd",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "x-locale",
								"value": "<string>",
								"description": "locale",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"device_info\": {\n    \"id\": \"string\",\n    \"name\": \"string\",\n    \"os\": \"string\"\n  },\n  \"email\": \"string\",\n  \"phone_number\": \"string\",\n  \"platform_key\": \"string\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-user/api/v1/auth/request-reset-password",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-user",
								"api",
								"v1",
								"auth",
								"request-reset-password"
							]
						},
						"description": "Login User"
					},
					"response": []
				},
				{
					"name": "reset_pwd",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "x-locale",
								"value": "<string>",
								"description": "locale",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"string\",\n  \"new_password\": \"string\",\n  \"phone_number\": \"string\",\n  \"reset_password_token\": \"string\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-user/api/v1/auth/reset-password",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-user",
								"api",
								"v1",
								"auth",
								"reset-password"
							]
						},
						"description": "Login User"
					},
					"response": []
				},
				{
					"name": "confirm_reset_pwd",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "x-locale",
								"value": "<string>",
								"description": "locale",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"device_id\": \"string\",\n  \"email\": \"string\",\n  \"passcode\": \"string\",\n  \"phone_number\": \"string\",\n  \"platform_key\": \"string\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-user/api/v1/auth/confirm-reset-password",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-user",
								"api",
								"v1",
								"auth",
								"confirm-reset-password"
							]
						},
						"description": "Login User"
					},
					"response": []
				},
				{
					"name": "verify_token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// verify token to get business"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsData = pm.response.json();",
									"pm.environment.set(\"C-user_id\",jsData.data[0].user_id);",
									"",
									"let business_id = jsData.data[0].headers[\"x-business-id\"];",
									"console.log(\"business_id: \" + business_id);",
									"pm.environment.set(\"C-business_id\",business_id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "x-locale",
								"value": "<string>",
								"description": "locale",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJGTyBVc2VyIiwic3ViIjoiY2MyMDZmNWMtOGEwMi00ZjBmLTg3NTgtMzFiY2EwNjg2N2I0IiwiYXVkIjpbIkZPIFVzZXIiXSwiZXhwIjoxNzE0NzAzNjY1LCJuYmYiOjE3MTQ3MDE4NjUsImlhdCI6MTcxNDcwMTg2NSwiYnVzaW5lc3NfaWQiOiIyNyIsImRldmljZV9pZCI6IkM5MTAyRkM2LTQ2NkMtNDk4MC1CNzk1LUE5MUEyRkQ3Rjk3RiIsInBsYXRmb3JtX2tleSI6ImRlc2tzdG9wLXdlYiIsInVzZXJfaWQiOiJjYzIwNmY1Yy04YTAyLTRmMGYtODc1OC0zMWJjYTA2ODY3YjQiLCJsb2dpbl9tZXRob2QiOiJwYXNzd29yZCIsImFwcF92ZXJzaW9uIjoiMS4wLjAiLCJyZWZyZXNoX3Rva2VuX2lkIjoiOTQ4YWI2NjAtZGZmNy00ZTU5LTgxZjEtZjc4YjQ5MzViOTk5In0.dntQeVpYntv0s0P34PJNms_BLrsqffEgMZ8Mtq8w2AE\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-user/api/v1/auth/verify-token",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-user",
								"api",
								"v1",
								"auth",
								"verify-token"
							]
						},
						"description": "Login User"
					},
					"response": []
				}
			]
		},
		{
			"name": "branch",
			"item": [
				{
					"name": "create_branch",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let city_obj = pm.environment.get(\"C-district_obj\");",
									"let district_obj = pm.environment.get(\"C-district_obj\");",
									"let ward_obj = pm.environment.get(\"C-ward_obj\");",
									"",
									"let payload = {",
									"    \"branch_code\": \"\",",
									"    \"branch_name\": \"[API] branch Tây Ninh\",",
									"    \"business_id\": parseInt(pm.environment.get(\"C-business_id\")),",
									"    \"city\": city_obj.name,",
									"    \"detail_address\": ward_obj.full_name,",
									"    \"district\": district_obj.name,",
									"    \"email\": \"\",",
									"    // \"id\": \"string\",",
									"    // \"org_id\": 0,",
									"    \"phone_number\": \"\",",
									"    \"reopening_date\": \"\",",
									"    \"suspension_date\": \"\",",
									"    \"status\": \"active\",",
									"    \"ward\": ward_obj.name",
									"}",
									"",
									"console.log(\"payload: \",payload);",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));",
									"pm.environment.set(\"C-product_obj\",payload);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-business/api/v1/branch/create",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-business",
								"api",
								"v1",
								"branch",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_list_branch",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-business/api/v1/branch/get-list?business_id={{C-business_id}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-business",
								"api",
								"v1",
								"branch",
								"get-list"
							],
							"query": [
								{
									"key": "business_id",
									"value": "{{C-business_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "edit_branch",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"branch_code\": \"string\",\n  \"branch_name\": \"string\",\n  \"business_id\": 0,\n  \"city\": \"string\",\n  \"detail_address\": \"string\",\n  \"district\": \"string\",\n  \"email\": \"string\",\n  \"id\": \"string\",\n  \"org_id\": 0,\n  \"phone_number\": \"string\",\n  \"reopening_date\": \"string\",\n  \"suspension_date\": \"string\",\n  \"ward\": \"string\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-business/api/v1/branch/update/{{C-branch_id}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-business",
								"api",
								"v1",
								"branch",
								"update",
								"{{C-branch_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete_branch",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{finone_url}}/fo-business/api/v1/branch/delete/{{C-branch_id}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-business",
								"api",
								"v1",
								"branch",
								"delete",
								"{{C-branch_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "business",
			"item": [
				{
					"name": "create_default_business",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"avatar_url\": \"string\",\n  \"country_code\": \"string\",\n  \"currency\": \"string\",\n  \"email\": \"string\",\n  \"name\": \"string\",\n  \"number_decimal\": 0,\n  \"ops_type\": \"string\",\n  \"org_id\": 0,\n  \"phone_number\": \"string\",\n  \"tax_type\": \"string\",\n  \"timezone\": \"string\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-business/api/v1/business/create-default",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-business",
								"api",
								"v1",
								"business",
								"create-default"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_business_detail",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{finone_url}}/fo-business/api/v1/business/{{C-business_id}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-business",
								"api",
								"v1",
								"business",
								"{{C-business_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_last_visited_business",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{finone_url}}/fo-business/api/v1/business/get-last-visited",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-business",
								"api",
								"v1",
								"business",
								"get-last-visited"
							]
						}
					},
					"response": []
				},
				{
					"name": "edit_business",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"avatar_url\": \"string\",\n  \"country_code\": \"string\",\n  \"currency\": \"string\",\n  \"email\": \"string\",\n  \"name\": \"string\",\n  \"number_decimal\": 0,\n  \"ops_type\": \"string\",\n  \"org_id\": 0,\n  \"phone_number\": \"string\",\n  \"tax_type\": \"string\",\n  \"timezone\": \"string\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-business/api/v1/business/update/{{C-business_id}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-business",
								"api",
								"v1",
								"business",
								"update",
								"{{C-business_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "switch_business",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"business_id\": 0,\n  \"user_id\": \"string\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-business/api/v1/business/switch",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-business",
								"api",
								"v1",
								"business",
								"switch"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_current_business",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    console.log(\"Current business info: \", jsData.data[0]);",
									"    ",
									"    postman.setNextRequest(\"edit_business\");",
									"} else {",
									"    console.log(\"Can't get business detail, end test\", jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-business/api/v1/business/get-current",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-business",
								"api",
								"v1",
								"business",
								"get-current"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "tax",
			"item": [
				{
					"name": "create_tax",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"business_id\": 0,\n  \"description\": \"string\",\n  \"displays_id\": \"string\",\n  \"id\": \"string\",\n  \"name\": \"string\",\n  \"rate\": 0\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-business/api/v1/tax/create",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-business",
								"api",
								"v1",
								"tax",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_list_tax",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{finone_url}}/fo-business/api/v1/tax/get-list",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-business",
								"api",
								"v1",
								"tax",
								"get-list"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_tax_detail",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{finone_url}}/fo-business/api/v1/tax/get-one/{{C-tax_id}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-business",
								"api",
								"v1",
								"tax",
								"get-one",
								"{{C-tax_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "edit_tax",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"business_id\": 0,\n  \"description\": \"string\",\n  \"displays_id\": \"string\",\n  \"id\": \"string\",\n  \"name\": \"string\",\n  \"rate\": 0\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-business/api/v1/tax/update/{{C-tax_id}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-business",
								"api",
								"v1",
								"tax",
								"update",
								"{{C-tax_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete_tax",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{finone_url}}/fo-business/api/v1/tax/delete/{{C-tax_id}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-business",
								"api",
								"v1",
								"tax",
								"delete",
								"{{C-tax_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_list_tax_by_ids",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"business_id\": 0,\n  \"id\": \"string\",\n  \"option\": \"string\",\n  \"page\": 0,\n  \"page_size\": 0,\n  \"search\": \"string\",\n  \"sort\": \"string\",\n  \"status\": \"string\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-business/api/v1/tax/get-list-by-ids",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-business",
								"api",
								"v1",
								"tax",
								"get-list-by-ids"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "contact",
			"item": [
				{
					"name": "get_list_contact",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    let jsData = JSON.parse(responseBody);",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let total_pages = jsData.meta.total_pages;",
									"    let page = pm.environment.get(\"C-page\");",
									"",
									"    let list_contact = pm.environment.get(\"C-list_contact\");",
									"    if(!list_contact){",
									"        list_contact = [];",
									"    }",
									"",
									"    for(let item in jsData.data){",
									"        if(jsData.data[item].debt_amount == \"null\"){",
									"            list_contact[list_contact.length] = {",
									"                \"contact_id\":jsData.data[item].id,",
									"                \"name\":jsData.data[item].name,",
									"                \"phone_number\":jsData.data[item].phone_number,",
									"                \"is_expired\":jsData.data[item].is_expired,",
									"                \"debt_amount\":0,",
									"                \"option\":jsData.data[item].option,",
									"                \"customer_point\":jsData.data[item].customer_point,",
									"                \"state\":jsData.data[item].state,",
									"                \"last_order\":jsData.data[item].last_order",
									"            }",
									"        } else {",
									"            list_contact[list_contact.length] = {",
									"                \"contact_id\":jsData.data[item].id,",
									"                \"name\":jsData.data[item].name,",
									"                \"phone_number\":jsData.data[item].phone_number,",
									"                \"is_expired\":jsData.data[item].is_expired,",
									"                \"debt_amount\":jsData.data[item].debt_amount,",
									"                \"option\":jsData.data[item].option,",
									"                \"customer_point\":jsData.data[item].customer_point,",
									"                \"state\":jsData.data[item].state,",
									"                \"last_order\":jsData.data[item].last_order",
									"            }",
									"        }",
									"    }",
									"    pm.environment.set(\"C-list_contact\",list_contact);",
									"",
									"    if(page >= total_pages){",
									"        // must clear page & page_size",
									"        pm.environment.unset(\"C-page\");",
									"        pm.environment.unset(\"C-page_size\");",
									"",
									"        switch(testcase){",
									"            case 2:",
									"                pm.test(\"Got all contact! \" + list_contact.length, function () {",
									"                    pm.environment.set(\"C-list_contact\",list_contact);",
									"                    pm.expect(list_contact.length > 0).to.be.true;",
									"                });",
									"",
									"                postman.setNextRequest(\"get_debt_amount\"); // get_debt_amount",
									"                break;",
									"            case 4:",
									"                let contact_obj = pm.environment.get(\"C-contact_obj\");",
									"                console.log(\"contact_obj: \" + JSON.stringify(contact_obj))",
									"                let inbound_order_obj = pm.environment.get(\"C-inbound_order_obj\");",
									"                let act_debt_amount, exp_debt_amount;",
									"                // console.log(\"list_contact: \" + JSON.stringify(list_contact))",
									"                for(let item in list_contact){",
									"                    if(list_contact[item].contact_id == contact_obj.contact_id){",
									"                        if(inbound_order_obj.is_debit){",
									"                            act_debt_amount = list_contact[item].debt_amount;",
									"                            exp_debt_amount = contact_obj.debt_amount - (pm.environment.get(\"C-total_amount\") - inbound_order_obj.buyer_pay);",
									"                            console.log(\"debt_amount before: \" + contact_obj.debt_amount);",
									"                            console.log(\"total_amount: \" + pm.environment.get(\"C-total_amount\"));",
									"                            console.log(\"buyer_pay: \" + inbound_order_obj.buyer_pay);",
									"                            // if(contact_obj.option == \"in\"){",
									"                            //     check_debt_amount = ((list_contact[item].debt_amount + pm.environment.get(\"C-total_amount\") - inbound_order_obj.buyer_pay) == list_contact[item].debt_amount);",
									"                            // } else {",
									"                            //     check_debt_amount",
									"                            // }",
									"                        } else {",
									"                            act_debt_amount = list_contact[item].debt_amount;",
									"                            exp_debt_amount = contact_obj.debt_amount;",
									"                        }",
									"                        break;",
									"                    }",
									"                }",
									"",
									"                console.log(\"is_debit: \" + inbound_order_obj.is_debit);",
									"                pm.test(\"debt_amount is correctly! \", function () {",
									"                    console.log(\"Expected: \" + exp_debt_amount);",
									"                    console.log(\"Actual: \" + act_debt_amount);",
									"                    pm.expect(act_debt_amount.toFixed(0) == exp_debt_amount.toFixed(0)).to.be.true;",
									"                });",
									"",
									"                console.log(\"--- End Testsuite 6 ---\");",
									"                postman.setNextRequest(null);",
									"                break;",
									"            default:",
									"                console.log(\"Missing flow, end test\");",
									"                postman.setNextRequest(null);",
									"                break;",
									"        }",
									"    } else {",
									"        page++;",
									"        pm.environment.set(\"C-page\",page);",
									"",
									"        console.log(\"view next page (\" + page + \") to get more contact\");",
									"        postman.setNextRequest(\"seller_view_list_contact\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get list contact, end test\");",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let page = pm.environment.get(\"C-page\");",
									"",
									"if(!page){",
									"    page = 1;",
									"    pm.environment.set(\"C-page\",page);",
									"",
									"    let page_size = 50;",
									"    pm.environment.set(\"C-page_size\",page_size);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-business/api/v1/contact/get-list?type=&search=&business_id={{C-business_id}}&page={{C-page}}&page_size={{C-page_size}}&sort=&option=&state=waiting_confirm,delivering&is_active=true",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-business",
								"api",
								"v1",
								"contact",
								"get-list"
							],
							"query": [
								{
									"key": "type",
									"value": ""
								},
								{
									"key": "search",
									"value": ""
								},
								{
									"key": "business_id",
									"value": "{{C-business_id}}"
								},
								{
									"key": "page",
									"value": "{{C-page}}"
								},
								{
									"key": "page_size",
									"value": "{{C-page_size}}"
								},
								{
									"key": "sort",
									"value": ""
								},
								{
									"key": "option",
									"value": ""
								},
								{
									"key": "state",
									"value": "waiting_confirm,delivering"
								},
								{
									"key": "is_active",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get_contact_detail",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "x-location-timezone",
								"value": "UTC+07:00"
							},
							{
								"key": "x-current-version",
								"value": "2.14.3"
							},
							{
								"key": "authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-business/api/v1/contact/get-one/{{C-contact_id}}?business_id={{C-business_id}}&contact_id={{C-contact_id}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-business",
								"api",
								"v1",
								"contact",
								"get-one",
								"{{C-contact_id}}"
							],
							"query": [
								{
									"key": "address",
									"value": "",
									"disabled": true
								},
								{
									"key": "business_id",
									"value": "{{C-business_id}}"
								},
								{
									"key": "end_time",
									"value": "2024-02-16T08%3A12%3A00Z",
									"disabled": true
								},
								{
									"key": "field",
									"value": "contact_tag%2Cmost_order_product",
									"disabled": true
								},
								{
									"key": "name",
									"value": "Chau%20Le%20Test",
									"disabled": true
								},
								{
									"key": "phone_number",
									"value": "",
									"disabled": true
								},
								{
									"key": "start_time",
									"value": "2024-01-16T17%3A00%3A00Z",
									"disabled": true
								},
								{
									"key": "contact_id",
									"value": "{{C-contact_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "create_contact",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "authorization",
								"value": "Bearer {{C-userToken}}"
							},
							{
								"key": "content-type",
								"value": "application/json"
							},
							{
								"key": "x-location-timezone",
								"value": "UTC+07:00"
							},
							{
								"key": "x-platform-key",
								"value": "pro_web"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\":\"Chau Le Test\",\n    \"phone_number\":\"\",\n    \"email\":\"\",\n    \"birthday\":\"\",\n    \"gender\":\"\",\n    \"address_info\":null,\n    \"group_of_contact_ids\":[],\n    \"tags\":[]\n}"
						},
						"url": {
							"raw": "{{finone_url}}/fo-business/api/v1/contact/create",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-business",
								"api",
								"v1",
								"contact",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete_contact",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "authorization",
								"value": "Bearer {{C-userToken}}"
							},
							{
								"key": "content-type",
								"value": "application/json"
							},
							{
								"key": "x-location-timezone",
								"value": "UTC+07:00"
							},
							{
								"key": "x-platform-key",
								"value": "pro_web"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\":\"Chau Le Test\",\n    \"phone_number\":\"\",\n    \"email\":\"\",\n    \"birthday\":\"\",\n    \"gender\":\"\",\n    \"address_info\":null,\n    \"group_of_contact_ids\":[],\n    \"tags\":[]\n}"
						},
						"url": {
							"raw": "{{finone_url}}/fo-business/api/v1/contact/delete",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-business",
								"api",
								"v1",
								"contact",
								"delete"
							]
						}
					},
					"response": []
				},
				{
					"name": "edit_contact",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "authorization",
								"value": "Bearer {{C-userToken}}"
							},
							{
								"key": "content-type",
								"value": "application/json"
							},
							{
								"key": "x-location-timezone",
								"value": "UTC+07:00"
							},
							{
								"key": "x-platform-key",
								"value": "pro_web"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\":\"Chau Le Test\",\n    \"phone_number\":\"\",\n    \"email\":\"\",\n    \"birthday\":\"\",\n    \"gender\":\"\",\n    \"address_info\":null,\n    \"group_of_contact_ids\":[],\n    \"tags\":[]\n}"
						},
						"url": {
							"raw": "{{finone_url}}/fo-business/api/v1/contact/update/{{C-contact_id}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-business",
								"api",
								"v1",
								"contact",
								"update",
								"{{C-contact_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_list_contact_by_internal_ids",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "authorization",
								"value": "Bearer {{C-userToken}}"
							},
							{
								"key": "content-type",
								"value": "application/json"
							},
							{
								"key": "x-location-timezone",
								"value": "UTC+07:00"
							},
							{
								"key": "x-platform-key",
								"value": "pro_web"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"business_id\": 0,\n  \"id\": \"string\",\n  \"page\": 0,\n  \"page_size\": 0,\n  \"search\": \"string\",\n  \"sort\": \"string\"\n}"
						},
						"url": {
							"raw": "{{finone_url}}/fo-business/api/v1/contact/get-list-by-ids",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-business",
								"api",
								"v1",
								"contact",
								"get-list-by-ids"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "account",
			"item": [
				{
					"name": "get_list_payment_method",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkZXZpY2VfaWQiOiJmYjU3OGJlOS1hOTcyLTRkODctYjc2Yy0xNjhmYTM3ZWY2MzkiLCJidXNpbmVzc19pZCI6ImRjMWIwOTY2LWYzNGYtNDZhNi1iMWYxLTg2Y2FjYWI4Y2M2NyIsInBlcm1pc3Npb25fa2V5cyI6InNob3Bfb3duZXIiLCJyZWZyZXNoX3Rva2VuX2lkIjoiMDEyMTM0OWQtZWI3Zi00Yjc1LTgyOGYtZWYzZmVmMTdkZjUxIiwic2VjdXJpdHlfcm9sZXMiOjY2LCJhcHBfdmVyc2lvbiI6IjEuMS4xIiwidXNlcl9pZCI6IjAwYzFiZGM5LWE0MTItNGU1MC1iMDY2LTEzNjJlYzFlMGE2MyIsImV4cCI6MTcxMDkwOTYwNiwiaXNzIjoicHJvX3dlYiIsInN1YiI6IjAwYzFiZGM5LWE0MTItNGU1MC1iMDY2LTEzNjJlYzFlMGE2M3xmYjU3OGJlOS1hOTcyLTRkODctYjc2Yy0xNjhmYTM3ZWY2Mzl8ZmI1NzhiZTktYTk3Mi00ZDg3LWI3NmMtMTY4ZmEzN2VmNjM5In0.ZR_EunDnV2UUluhSkk8SrdPhDpSZ1u2oJMi3XN4G-QY"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-ledger/api/v1/payment/list-payment-method?branch_id={{C-business_id}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-ledger",
								"api",
								"v1",
								"payment",
								"list-payment-method"
							],
							"query": [
								{
									"key": "branch_id",
									"value": "{{C-business_id}}"
								},
								{
									"key": "coa_type",
									"value": "cash_and_hand",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "coa account",
			"item": [
				{
					"name": "create_default_coa",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/**",
									" * this API use for internal call to generate coa-setting",
									" */"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"business_id\": {{C-business_id}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-ledger/api/v1/account/create-default",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-ledger",
								"api",
								"v1",
								"account",
								"create-default"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_list_internal_account",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"",
									"    let coa = [];",
									"    try {",
									"        for(let i in jsData.data){",
									"            let sub_group_i = [];",
									"            for(let j in jsData.data[i].sub_group){",
									"                let accounts_j = [];",
									"                for(let k in jsData.data[i].sub_group[j].accounts){",
									"                    accounts_j[accounts_j.length] = {",
									"                        \"account_name\":jsData.data[i].sub_group[j].accounts[k].name,",
									"                        \"account_id\":jsData.data[i].sub_group[j].accounts[k].id,",
									"                        \"group_name\":jsData.data[i].sub_group[j].accounts[k].group_name,",
									"                        \"sub_group_name\":jsData.data[i].sub_group[j].accounts[k].sub_name,",
									"                        \"branch_id\":jsData.data[i].sub_group[j].accounts[k].branch_id,",
									"                        \"displays_id\":jsData.data[i].sub_group[j].accounts[k].displays_id,",
									"                        \"account_source\":jsData.data[i].sub_group[j].accounts[k].account_source,",
									"                        \"account_type\":jsData.data[i].sub_group[j].accounts[k].account_type,",
									"                        \"account_code\":jsData.data[i].sub_group[j].accounts[k].account_code,",
									"                        \"coa_type\":jsData.data[i].sub_group[j].accounts[k].coa_type,",
									"                        \"sub_coa_deepest\":jsData.data[i].sub_group[j].accounts[k].sub_coa_deepest,",
									"                        \"name_en\":jsData.data[i].sub_group[j].accounts[k].name_en,",
									"                        \"status\":jsData.data[i].sub_group[j].accounts[k].status,",
									"                        \"parent_id\":jsData.data[i].sub_group[j].accounts[k].parent_id,",
									"                        \"description\":jsData.data[i].sub_group[j].accounts[k].description,",
									"                        \"open_amount\":jsData.data[i].sub_group[j].accounts[k].open_amount,",
									"                        \"currency\":jsData.data[i].sub_group[j].accounts[k].currency",
									"                        // \"opening_at\":jsData.data[i].sub_group[j].accounts[k].opening_at",
									"                        // \"closing_at\":jsData.data[i].sub_group[j].accounts[k].closing_at",
									"                    }",
									"                }",
									"",
									"                sub_group_i[sub_group_i.length] = {",
									"                    \"sub_group_name\":jsData.data[i].sub_group[j].name,",
									"                    \"sub_group_id\":jsData.data[i].sub_group[j].id,",
									"                    \"sub_group_description\":jsData.data[i].sub_group[j].description,",
									"                    \"accounts\":accounts_j",
									"                }",
									"            }",
									"",
									"            coa[coa.length] = {",
									"                \"group_name\":jsData.data[i].name,",
									"                \"value\":jsData.data[i].value,",
									"                \"index\":jsData.data[i].index,",
									"                \"sub_group\":sub_group_i",
									"            }",
									"        }",
									"    } catch {",
									"        console.log(\"can't get all account in coa\");",
									"    }",
									"",
									"",
									"    let account_obj = pm.environment.get(\"C-account_obj\");",
									"    let isFound = false;",
									"    switch(testcase){",
									"        case 2:",
									"            pm.test(\"Got coa of this user's business\", function () {",
									"                pm.expect(coa.length > 0).to.be.true;",
									"            });",
									"",
									"            if(coa.length > 0){",
									"                // console.log(\"coa: \", coa);",
									"                pm.environment.set(\"C-coa\",coa);",
									"",
									"                testcase++;",
									"                pm.environment.set(\"C-testcase\",testcase);",
									"                postman.setNextRequest(\"create_account\"); // create_account",
									"            } else {",
									"                console.log(\"Can't get list internal account, end test\");",
									"                postman.setNextRequest(null);",
									"            }",
									"            break;",
									"        case 4:",
									"            loop:",
									"            for(let j in coa[0].sub_group){",
									"                for(let k in coa[0].sub_group[j].accounts){",
									"                    if(coa[0].sub_group[j].accounts[k].account_id == account_obj.account_id){",
									"                        isFound = true;",
									"                        // console.log(\"debug: \",coa[0].sub_group[j].accounts);",
									"                        pm.test(\"name of account correctly! \" + account_obj.name, function () {",
									"                            console.log(\"Actual name: \" + coa[0].sub_group[j].accounts[k].account_name);",
									"                            pm.expect(account_obj.name == coa[0].sub_group[j].accounts[k].account_name).to.be.true;",
									"                        });",
									"",
									"                        pm.test(\"parent_id of account correctly! \" + account_obj.parent_id, function () {",
									"                            pm.expect(account_obj.parent_id == coa[0].sub_group[j].accounts[k].parent_id).to.be.true;",
									"                        });",
									"",
									"                        pm.test(\"open_amount of account correctly! \" + account_obj.open_amount, function () {",
									"                            pm.expect(account_obj.open_amount == coa[0].sub_group[j].accounts[k].open_amount).to.be.true;",
									"                        });",
									"                        break loop;",
									"                    }",
									"                }",
									"            }",
									"",
									"            pm.test(\"Found new account!\", function () {",
									"                pm.expect(isFound).to.be.true;",
									"            });",
									"",
									"            postman.setNextRequest(\"get_account_detail\"); // get_account_detail",
									"            break;",
									"        case 6:",
									"            loop:",
									"            for(let i in coa){",
									"                for(let j in coa[i].sub_group){",
									"                    for(let k in coa[i].sub_group[j].accounts){",
									"                        if(coa[i].sub_group[j].accounts[k].account_id == account_obj.account_id){",
									"                            isFound = true;",
									"                            // console.log(\"debug: \",coa[i].sub_group[j].accounts);",
									"                            pm.test(\"name of account correctly! \" + account_obj.name, function () {",
									"                                console.log(\"Actual name: \" + coa[i].sub_group[j].accounts[k].account_name);",
									"                                pm.expect(account_obj.name == coa[i].sub_group[j].accounts[k].account_name).to.be.true;",
									"                            });",
									"",
									"                            pm.test(\"account_code of account correctly! \" + account_obj.account_code, function () {",
									"                                pm.expect(account_obj.account_code == coa[i].sub_group[j].accounts[k].account_code).to.be.true;",
									"                            });",
									"",
									"                            pm.test(\"description of account correctly! \" + account_obj.description, function () {",
									"                                pm.expect(account_obj.description == coa[i].sub_group[j].accounts[k].description).to.be.true;",
									"                            });",
									"",
									"                            pm.test(\"parent_id of account correctly! \" + account_obj.parent_id, function () {",
									"                                pm.expect(account_obj.parent_id == coa[i].sub_group[j].accounts[k].parent_id).to.be.true;",
									"                            });",
									"                            break loop;",
									"                        }",
									"                    }",
									"                }",
									"            }",
									"",
									"            pm.test(\"Found new account!\", function () {",
									"                pm.expect(isFound).to.be.true;",
									"            });",
									"",
									"            postman.setNextRequest(\"get_account_detail\"); // get_account_detail",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get list internal account, end test \", jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-ledger/api/v1/account/list-setting?business_id={{C-business_id}}&coa_type=",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-ledger",
								"api",
								"v1",
								"account",
								"list-setting"
							],
							"query": [
								{
									"key": "business_id",
									"value": "{{C-business_id}}"
								},
								{
									"key": "coa_type",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get_account_detail",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let account_obj = pm.environment.get(\"C-account_obj\");",
									"let account_id = account_obj.account_id;",
									"console.log(\"view detail account: \" + account_id);",
									"",
									"pm.environment.set(\"C-account_id\",account_id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    console.log(\"Debug: \" + JSON.stringify(jsData));",
									"",
									"    let account_obj = pm.environment.get(\"C-account_obj\");",
									"",
									"    switch(testcase){",
									"        case 4:",
									"            pm.test(\"name of account correctly! \" + account_obj.name, function () {",
									"                pm.expect(account_obj.name == jsData.data.name).to.be.true;",
									"            });",
									"",
									"            pm.test(\"parent_id of account correctly! \" + account_obj.parent_id, function () {",
									"                pm.expect(account_obj.parent_id == jsData.data.parent_id).to.be.true;",
									"            });",
									"",
									"            pm.test(\"open_amount of account correctly! \" + account_obj.open_amount, function () {",
									"                pm.expect(account_obj.open_amount == jsData.data.open_amount).to.be.true;",
									"            });",
									"",
									"            testcase++;",
									"            pm.environment.set(\"C-testcase\",testcase);",
									"            postman.setNextRequest(\"create_account\"); // create_account",
									"            break;",
									"        case 6:",
									"            pm.test(\"name of account correctly! \" + account_obj.name, function () {",
									"                pm.expect(account_obj.name == jsData.data.name).to.be.true;",
									"            });",
									"",
									"            pm.test(\"account_code of account correctly! \" + account_obj.account_code, function () {",
									"                pm.expect(account_obj.account_code == jsData.data.account_code).to.be.true;",
									"            });",
									"",
									"            pm.test(\"description of account correctly! \" + account_obj.description, function () {",
									"                pm.expect(account_obj.description == jsData.data.description).to.be.true;",
									"            });",
									"",
									"            pm.test(\"parent_id of account correctly! \" + account_obj.parent_id, function () {",
									"                pm.expect(account_obj.parent_id == jsData.data.parent_id).to.be.true;",
									"            });",
									"",
									"            console.log(\"--- End Testsuite 26 ---\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get internal account detail, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-ledger/api/v1/account/detail/{{C-account_id}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-ledger",
								"api",
								"v1",
								"account",
								"detail",
								"{{C-account_id}}"
							],
							"query": [
								{
									"key": "business_id",
									"value": "{{C-business_id}}",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "create_account",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// ============================= random number between min and max",
									"function getRandomInt(min, max) {",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"",
									"// ============================= random characters",
									"function randomChars(length) {",
									"    var result           = '';",
									"    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
									"    var charactersLength = characters.length;",
									"    for ( var i = 0; i < length; i++ ) {",
									"      result += characters.charAt(Math.floor(Math.random() * ",
									" charactersLength));",
									"   }",
									"   return result;",
									"}",
									"",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"let case_ = pm.environment.get(\"C-case_\");",
									"if(!case_){",
									"    case_ = 1;",
									"    pm.environment.set(\"C-case_\",case_);",
									"}",
									"console.log(\"Testcase: \" + testcase + \".\" + case_);",
									"",
									"let coa = pm.environment.get(\"C-coa\");",
									"let branch_id = parseInt(pm.environment.get(\"C-business_id\"));",
									"let name, parent_id, description, account_code;",
									"let open_amount = null;",
									"let payload;",
									"switch(testcase){",
									"    case 3:",
									"        switch(case_){",
									"            case 1:",
									"                console.log(\"Cash and Bank - parent_id = null\");",
									"                parent_id = null;",
									"                name = \"[API] Cash and Bank \" + randomChars(8);",
									"                open_amount = getRandomInt(1,9)*10000000;",
									"                break;",
									"            case 2:",
									"                console.log(\"Cash and Bank - name = ``\");",
									"                parent_id = coa[0].sub_group[0].sub_group_id;",
									"                name = \"\";",
									"                open_amount = getRandomInt(1,9)*10000000;",
									"                break;",
									"            case 3:",
									"                console.log(\"Cash and Bank - open_amount = ``\");",
									"                parent_id = coa[0].sub_group[0].sub_group_id;",
									"                name = \"[API] Cash and Bank \" + randomChars(8);",
									"                open_amount = \"\";",
									"                break;",
									"            case 4:",
									"                console.log(\"Cash and Bank - open_amount < 0\");",
									"                parent_id = coa[0].sub_group[0].sub_group_id;",
									"                name = \"[API] Cash and Bank \" + randomChars(8);",
									"                open_amount = -1;",
									"                break;",
									"            case 5:",
									"                console.log(\"Cash and Bank - happy case\");",
									"                name = \"[API] Cash and Bank \" + randomChars(8);",
									"                open_amount = getRandomInt(1,9)*10000000; // 10 ~ 90 M",
									"                parent_id = coa[0].sub_group[0].sub_group_id;",
									"                break;",
									"            default:",
									"                console.log(\"Missing flow\");",
									"                break;",
									"        }",
									"",
									"        payload = {",
									"            \"name\":name,",
									"            \"open_amount\":open_amount,",
									"            \"parent_id\":parent_id,",
									"            \"branch_id\":branch_id",
									"        }",
									"        break;",
									"    case 5:",
									"        switch(case_){",
									"            case 1:",
									"                console.log(\"Other sub_group - parent_id = null\");",
									"                parent_id = null;",
									"                account_code = randomChars(6);",
									"                name = \"[API] Other sub_group \" + account_code;",
									"                description = \"Auto API - description create Other sub_group \" + account_code;",
									"                break;",
									"            case 2:",
									"                console.log(\"Other sub_group - name = ``\");",
									"                parent_id = coa[getRandomInt(1,coa.length - 1)].sub_group[0].sub_group_id;",
									"                account_code = randomChars(6);",
									"                name = \"\";",
									"                description = \"\";",
									"                break;",
									"            case 3:",
									"                console.log(\"Other sub_group - exsited account_code\");",
									"                parent_id = coa[getRandomInt(1,coa.length - 1)].sub_group[0].sub_group_id;",
									"                loopFind:",
									"                for(let i = 1; i < coa.length; i++){",
									"                    for(let j in coa[i].sub_group){",
									"                        for(let k in coa[i].sub_group[j].accounts){",
									"                            if(coa[i].sub_group[j].accounts[k].account_code != null && coa[i].sub_group[j].accounts[k].account_code != \"\"){",
									"                                account_code = coa[i].sub_group[j].accounts[k].account_code;",
									"                                break loopFind;",
									"                            }",
									"                        }",
									"                    }",
									"                }",
									"                name = \"[API] Other sub_group \" + account_code;",
									"                description = \"Auto API - description create Other sub_group \" + account_code;",
									"                break;",
									"            case 4:",
									"                switch(getRandomInt(1,coa.length - 1)){ //getRandomInt(1,coa.length)",
									"                    case 1:",
									"                        console.log(\"Create new account in group liabilities\");",
									"                        switch(getRandomInt(1,coa[0].sub_group.length - 1)){",
									"                            case 1:",
									"                                console.log(\"- sub_group Other Current Asset\");",
									"                                account_code = randomChars(6);",
									"                                name = \"[API] Other Current Asset \" + account_code;",
									"                                description = \"Auto API - description create Other Current Asset \" + account_code;",
									"                                parent_id = coa[0].sub_group[1].sub_group_id;",
									"                                break;",
									"                            case 2:",
									"                            default:",
									"                                console.log(\"- sub_group Long-term Assets\");",
									"                                account_code = randomChars(6);",
									"                                name = \"[API] Long-term Assets \" + account_code;",
									"                                description = \"Auto API - description create Long-term Assets \" + account_code;",
									"                                parent_id = coa[0].sub_group[2].sub_group_id;",
									"                                break;",
									"                        }",
									"                        break;",
									"                    case 2:",
									"                        console.log(\"Create new account in group liabilities\");",
									"                        switch(getRandomInt(1,coa[1].sub_group.length)){",
									"                            case 1:",
									"                                console.log(\"- sub_group Current Liabilities\");",
									"                                account_code = randomChars(6);",
									"                                name = \"[API] Current Liabilities \" + account_code;",
									"                                description = \"Auto API - description create Current Liabilities \" + account_code;",
									"                                parent_id = coa[1].sub_group[0].sub_group_id;",
									"                                break;",
									"                            case 2:",
									"                            default:",
									"                                console.log(\"- sub_group Long-term Liabilities\");",
									"                                account_code = randomChars(6);",
									"                                name = \"[API] Long-term Liabilities \" + account_code;",
									"                                description = \"Auto API - description create Long-term Liabilities \" + account_code;",
									"                                parent_id = coa[1].sub_group[1].sub_group_id;",
									"                                break;",
									"                        }",
									"                        break;",
									"                    case 3:",
									"                        console.log(\"Create new account in group equity\");",
									"                        switch(getRandomInt(1,coa[2].sub_group.length)){",
									"                            case 1:",
									"                                console.log(\"- sub_group Owner's Equity\");",
									"                                account_code = randomChars(6);",
									"                                name = \"[API] Owner's Equity \" + account_code;",
									"                                description = \"Auto API - description create Owner's Equity \" + account_code;",
									"                                parent_id = coa[2].sub_group[0].sub_group_id;",
									"                                break;",
									"                            case 2:",
									"                            default:",
									"                                console.log(\"- sub_group Retained Earning\");",
									"                                account_code = randomChars(6);",
									"                                name = \"[API] Retained Equity \" + account_code;",
									"                                description = \"Auto API - description create Retained Equity \" + account_code;",
									"                                parent_id = coa[2].sub_group[1].sub_group_id;",
									"                                break;",
									"                        }",
									"                        break;",
									"                    case 4:",
									"                        console.log(\"Create new account in group income\");",
									"                        switch(getRandomInt(1,coa[3].sub_group.length)){",
									"                            case 1:",
									"                                console.log(\"- sub_group Sale\");",
									"                                account_code = randomChars(6);",
									"                                name = \"[API] Sale \" + account_code;",
									"                                description = \"Auto API - description create Sale \" + account_code;",
									"                                parent_id = coa[3].sub_group[0].sub_group_id;",
									"                                break;",
									"                            case 2:",
									"                                console.log(\"- sub_group Other Income\");",
									"                                account_code = randomChars(6);",
									"                                name = \"[API] Other Income \" + account_code;",
									"                                description = \"Auto API - description create Other Income \" + account_code;",
									"                                parent_id = coa[3].sub_group[1].sub_group_id;",
									"                                break;",
									"                            case 3:",
									"                            default:",
									"                                console.log(\"- sub_group Uncategorized Income\");",
									"                                account_code = randomChars(6);",
									"                                name = \"[API] Uncategorized Income \" + account_code;",
									"                                description = \"Auto API - description create Uncategorized Income \" + account_code;",
									"                                parent_id = coa[3].sub_group[2].sub_group_id;",
									"                                break;",
									"                        }",
									"                        break;",
									"                    case 5:",
									"                    default:",
									"                        console.log(\"Create new account in group expense\");",
									"                        switch(getRandomInt(1,coa[4].sub_group.length)){",
									"                            case 1:",
									"                                console.log(\"- sub_group Cost of Goods Sold\");",
									"                                account_code = randomChars(6);",
									"                                name = \"[API] Cost of Goods Sold \" + account_code;",
									"                                description = \"Auto API - description create Cost of Goods Sold \" + account_code;",
									"                                parent_id = coa[4].sub_group[0].sub_group_id;",
									"                                break;",
									"                            case 2:",
									"                                console.log(\"- sub_group Operating Expense\");",
									"                                account_code = randomChars(6);",
									"                                name = \"[API] Operating Expense \" + account_code;",
									"                                description = \"Auto API - description create Operating Expense \" + account_code;",
									"                                parent_id = coa[4].sub_group[1].sub_group_id;",
									"                                break;",
									"                            case 3:",
									"                                console.log(\"- sub_group Other Expense\");",
									"                                account_code = randomChars(6);",
									"                                name = \"[API] Other Expense \" + account_code;",
									"                                description = \"Auto API - description create Other Expense \" + account_code;",
									"                                parent_id = coa[4].sub_group[2].sub_group_id;",
									"                                break;",
									"                            case 4:",
									"                            default:",
									"                                console.log(\"- sub_group Uncategorized Expense\");",
									"                                account_code = randomChars(6);",
									"                                name = \"[API] Uncategorized Expense \" + account_code;",
									"                                description = \"Auto API - description create Uncategorized Expense \" + account_code;",
									"                                parent_id = coa[4].sub_group[3].sub_group_id;",
									"                                break;",
									"                        }",
									"                        break;",
									"                }",
									"                break;",
									"            default:",
									"                console.log(\"Missing flow\");",
									"                break;",
									"        }",
									"",
									"        payload = {",
									"            \"name\":name,",
									"            \"account_code\":account_code,",
									"            \"parent_id\":parent_id,",
									"            \"description\":description,",
									"            \"branch_id\":branch_id",
									"        }",
									"        break;",
									"    default:",
									"        console.log(\"Missing flow\");",
									"        break;",
									"}",
									"",
									"// New payload:",
									"// {",
									"//   \"account_key\": \"string\",",
									"//   \"account_name\": \"string\",",
									"//   \"account_name_custom\": \"string\",",
									"//   \"account_number\": \"string\",",
									"//   \"account_source\": \"string\",",
									"//   \"account_type\": \"string\",",
									"//   \"business_id\": 0,",
									"//   \"currency\": \"string\",",
									"//   \"description\": \"string\",",
									"//   \"external_account_id\": \"string\",",
									"//   \"id\": 0,",
									"//   \"open_amount\": 0,",
									"//   \"parent_account_id\": 0,",
									"//   \"provider_id\": \"string\",",
									"//   \"status\": \"string\"",
									"// }",
									"",
									"console.log(\"payload: \",payload);",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));",
									"pm.environment.set(\"C-account_obj\",payload);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"let case_ = pm.environment.get(\"C-case_\");",
									"",
									"let jsData = pm.response.json();",
									"switch(testcase){",
									"    case 3:",
									"        switch(case_){",
									"            case 1: case 2: case 3: case 4:",
									"                pm.test(\"Status code is 400\", function () {",
									"                    pm.response.to.have.status(400);",
									"                });",
									"                console.log(\"Error: \",jsData);",
									"",
									"                case_++;",
									"                pm.environment.set(\"C-case_\",case_);",
									"                postman.setNextRequest(\"create_account\");",
									"                break;",
									"            case 5:",
									"                pm.test(\"Status code is 200\", function () {",
									"                    pm.response.to.have.status(200);",
									"                });",
									"                console.log(\"debug: \",jsData);",
									"",
									"                pm.environment.unset(\"C-case_\");",
									"                let account_obj = pm.environment.get(\"C-account_obj\");",
									"",
									"                // update account_id for account_obj",
									"                account_obj.account_id = jsData.data.id;",
									"",
									"                pm.test(\"name of account correctly! \" + account_obj.name, function () {",
									"                    pm.expect(account_obj.name == jsData.data.name).to.be.true;",
									"                });",
									"",
									"                pm.test(\"parent_id of account correctly! \" + account_obj.parent_id, function () {",
									"                    pm.expect(account_obj.parent_id == jsData.data.parent_id).to.be.true;",
									"                });",
									"",
									"                pm.test(\"open_amount of account correctly! \" + account_obj.open_amount, function () {",
									"                    pm.expect(account_obj.open_amount == jsData.data.open_amount).to.be.true;",
									"                });",
									"",
									"                testcase++;",
									"                pm.environment.set(\"C-testcase\",testcase);",
									"                pm.environment.set(\"C-account_obj\",account_obj);",
									"                postman.setNextRequest(\"get_list_internal_account\"); // get_list_internal_account",
									"                break;",
									"            default:",
									"                console.log(\"missing flow, end test\");",
									"                postman.setNextRequest(null);",
									"                break;",
									"        }",
									"        break;",
									"    case 5:",
									"        switch(case_){",
									"            case 1: case 2: case 3:",
									"                pm.test(\"Status code is 400\", function () {",
									"                    pm.response.to.have.status(400);",
									"                });",
									"                console.log(\"Error: \",jsData);",
									"",
									"                case_++;",
									"                pm.environment.set(\"C-case_\",case_);",
									"                postman.setNextRequest(\"create_account\");",
									"                break;",
									"            case 4:",
									"                pm.test(\"Status code is 200\", function () {",
									"                    pm.response.to.have.status(200);",
									"                });",
									"                console.log(\"debug: \",jsData);",
									"",
									"                pm.environment.unset(\"C-case_\");",
									"                let account_obj = pm.environment.get(\"C-account_obj\");",
									"",
									"                // update account_id for account_obj",
									"                account_obj.account_id = jsData.data.id;",
									"",
									"                pm.test(\"name of account correctly! \" + account_obj.name, function () {",
									"                    pm.expect(account_obj.name == jsData.data.name).to.be.true;",
									"                });",
									"",
									"                pm.test(\"account_code of account correctly! \" + account_obj.rate, function () {",
									"                    pm.expect(account_obj.account_code == jsData.data.account_code).to.be.true;",
									"                });",
									"",
									"                pm.test(\"description of account correctly! \" + account_obj.description, function () {",
									"                    pm.expect(account_obj.description == jsData.data.description).to.be.true;",
									"                });",
									"",
									"                pm.test(\"parent_id of account correctly! \" + account_obj.parent_id, function () {",
									"                    pm.expect(account_obj.parent_id == jsData.data.parent_id).to.be.true;",
									"                });",
									"",
									"                testcase++;",
									"                pm.environment.set(\"C-testcase\",testcase);",
									"                pm.environment.set(\"C-account_obj\",account_obj);",
									"                postman.setNextRequest(\"get_list_internal_account\"); // get_list_internal_account",
									"                break;",
									"            default:",
									"                console.log(\"missing flow, end test\");",
									"                postman.setNextRequest(null);",
									"                break;",
									"        }",
									"        break;",
									"    default:",
									"        console.log(\"missing flow, end test\");",
									"        postman.setNextRequest(null);",
									"        break;",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "authorization",
								"value": "Bearer {{C-userToken}}"
							},
							{
								"key": "content-type",
								"value": "application/json"
							},
							{
								"key": "x-platform-key",
								"value": "pro_web"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-ledger/api/v1/account/create",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-ledger",
								"api",
								"v1",
								"account",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "edit_account",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// ============================= random number between min and max",
									"function getRandomInt(min, max) {",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"",
									"// ============================= random characters",
									"function randomChars(length) {",
									"    var result           = '';",
									"    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
									"    var charactersLength = characters.length;",
									"    for ( var i = 0; i < length; i++ ) {",
									"      result += characters.charAt(Math.floor(Math.random() * ",
									" charactersLength));",
									"   }",
									"   return result;",
									"}",
									"",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"let case_ = pm.environment.get(\"C-case_\");",
									"if(!case_){",
									"    case_ = 1;",
									"    pm.environment.set(\"C-case_\",case_);",
									"}",
									"console.log(\"Testcase: \" + testcase + \".\" + case_);",
									"",
									"let coa = pm.environment.get(\"C-coa\");",
									"// console.log(\"debug: \" + JSON.stringify(coa));",
									"let branch_id = parseInt(pm.environment.get(\"C-business_id\"));",
									"let name, parent_id, description, account_code;",
									"let open_amount = null;",
									"let account_id, payload;",
									"switch(testcase){",
									"    case 3:",
									"        account_id = pm.environment.get(\"C-cash_in_bank_account_id\");",
									"        switch(case_){",
									"            case 1:",
									"                console.log(\"Cash and Bank - parent_id = null\");",
									"                parent_id = null;",
									"                name = \"[API][Edit] Cash and Bank \" + randomChars(8);",
									"                open_amount = getRandomInt(1,9)*10000000;",
									"                break;",
									"            case 2:",
									"                console.log(\"Cash and Bank - change parent_id\");",
									"                parent_id = coa[getRandomInt(1,coa.length - 1)].sub_group[0].sub_group_id;",
									"                name = \"[API][Edit] Cash and Bank \" + randomChars(8);",
									"                open_amount = getRandomInt(1,9)*10000000;",
									"                break;",
									"            case 3:",
									"                console.log(\"Cash and Bank - name = ``\");",
									"                parent_id = coa[0].sub_group[0].sub_group_id;",
									"                name = \"\";",
									"                open_amount = getRandomInt(1,9)*10000000;",
									"                break;",
									"            case 4:",
									"                console.log(\"Cash and Bank - open_amount = null\");",
									"                parent_id = coa[0].sub_group[0].sub_group_id;",
									"                name = \"[API][Edit] Cash and Bank \" + randomChars(8);",
									"                open_amount = null;",
									"                break;",
									"            case 5:",
									"                console.log(\"Cash and Bank - open_amount < 0\");",
									"                parent_id = coa[0].sub_group[0].sub_group_id;",
									"                name = \"[API][Edit] Cash and Bank \" + randomChars(8);",
									"                open_amount = -1;",
									"                break;",
									"            case 6:",
									"                console.log(\"Cash and Bank - happy case\");",
									"                name = \"[API][Edit] Cash and Bank \" + randomChars(8);",
									"                open_amount = getRandomInt(1,9)*10000000; // 10 ~ 90 M",
									"                parent_id = coa[0].sub_group[0].sub_group_id;",
									"                break;",
									"            default:",
									"                console.log(\"Missing flow\");",
									"                break;",
									"        }",
									"",
									"        payload = {",
									"            \"name\":name,",
									"            \"id\":account_id,",
									"            \"open_amount\":open_amount,",
									"            \"parent_id\":parent_id,",
									"            \"branch_id\":branch_id",
									"        }",
									"        break;",
									"    case 5:",
									"        account_id = pm.environment.get(\"C-other_account_id\");",
									"        let other_account = pm.environment.get(\"C-other_account\");",
									"        switch(case_){",
									"            case 1:",
									"                console.log(\"Other sub_group - parent_id = null\");",
									"                parent_id = null;",
									"                account_code = randomChars(6);",
									"                name = \"[API][Edit] Other sub_group \" + account_code;",
									"                description = \"Auto API - description edit Other sub_group \" + account_code;",
									"                break;",
									"            case 2:",
									"                console.log(\"Other sub_group - change parent_id\");",
									"                parent_id = coa[0].sub_group[0].sub_group_id;",
									"                account_code = randomChars(6);",
									"                name = \"[API][Edit] Other sub_group \" + account_code;",
									"                description = \"Auto API - description edit Other sub_group \" + account_code;",
									"                break;",
									"            case 3:",
									"                console.log(\"Other sub_group - name = ``\");",
									"                parent_id = coa[getRandomInt(1,coa.length - 1)].sub_group[0].sub_group_id;",
									"                account_code = randomChars(6);",
									"                name = \"\";",
									"                description = \"\";",
									"                break;",
									"            case 4:",
									"                console.log(\"Other sub_group - exsited account_code\");",
									"                parent_id = coa[getRandomInt(1,coa.length - 1)].sub_group[0].sub_group_id;",
									"                loopFind:",
									"                for(let i = 1; i < coa.length; i++){",
									"                    for(let j in coa[i].sub_group){",
									"                        for(let k in coa[i].sub_group[j].accounts){",
									"                            if(coa[i].sub_group[j].accounts[k].account_code != null && coa[i].sub_group[j].accounts[k].account_code != \"\"){",
									"                                account_code = coa[i].sub_group[j].accounts[k].account_code;",
									"                                break loopFind;",
									"                            }",
									"                        }",
									"                    }",
									"                }",
									"                name = \"[API][Edit] Other sub_group \" + account_code;",
									"                description = \"Auto API - description edit Other sub_group \" + account_code;",
									"                break;",
									"            case 5:",
									"                parent_id = other_account.parent_id;",
									"                switch(other_account.group_name){",
									"                    case \"asset\":",
									"                        console.log(\"Edit account in group asset\");",
									"                        switch(other_account.sub_group_name){",
									"                            case \"Other Current Asset\":",
									"                                console.log(\"- sub_group Other Current Asset\");",
									"                                account_code = randomChars(6);",
									"                                name = \"[API][Edit] Other Current Asset \" + account_code;",
									"                                description = \"Auto API - description edit Other Current Asset \" + account_code;",
									"                                // parent_id = coa[0].sub_group[1].sub_group_id;",
									"                                break;",
									"                            case \"Long-term Assets\":",
									"                            default:",
									"                                console.log(\"- sub_group Long-term Assets\");",
									"                                account_code = randomChars(6);",
									"                                name = \"[API][Edit] Long-term Assets \" + account_code;",
									"                                description = \"Auto API - description edit Long-term Assets \" + account_code;",
									"                                // parent_id = coa[0].sub_group[2].sub_group_id;",
									"                                break;",
									"                        }",
									"                        break;",
									"                    case \"liabilities\":",
									"                        console.log(\"Edit account in group liabilities\");",
									"                        switch(other_account.sub_group_name){",
									"                            case \"Current Liabilities\":",
									"                                console.log(\"- sub_group Current Liabilities\");",
									"                                account_code = randomChars(6);",
									"                                name = \"[API][Edit] Current Liabilities \" + account_code;",
									"                                description = \"Auto API - description edit Current Liabilities \" + account_code;",
									"                                // parent_id = coa[1].sub_group[0].sub_group_id;",
									"                                break;",
									"                            case \"Long-term Liabilities\":",
									"                            default:",
									"                                console.log(\"- sub_group Long-term Liabilities\");",
									"                                account_code = randomChars(6);",
									"                                name = \"[API][Edit] Long-term Liabilities \" + account_code;",
									"                                description = \"Auto API - description edit Long-term Liabilities \" + account_code;",
									"                                // parent_id = coa[1].sub_group[1].sub_group_id;",
									"                                break;",
									"                        }",
									"                        break;",
									"                    case \"equity\":",
									"                        console.log(\"Edit account in group equity\");",
									"                        switch(other_account.sub_group_name){",
									"                            case \"Owner's Equity\":",
									"                                console.log(\"- sub_group Owner's Equity\");",
									"                                account_code = randomChars(6);",
									"                                name = \"[API][Edit] Owner's Equity \" + account_code;",
									"                                description = \"Auto API - description edit Owner's Equity \" + account_code;",
									"                                // parent_id = coa[2].sub_group[0].sub_group_id;",
									"                                break;",
									"                            case \"Retained Earning\":",
									"                            default:",
									"                                console.log(\"- sub_group Retained Earning\");",
									"                                account_code = randomChars(6);",
									"                                name = \"[API][Edit] Retained Equity \" + account_code;",
									"                                description = \"Auto API - description edit Retained Equity \" + account_code;",
									"                                // parent_id = coa[2].sub_group[1].sub_group_id;",
									"                                break;",
									"                        }",
									"                        break;",
									"                    case \"income\":",
									"                        console.log(\"Edit account in group income\");",
									"                        switch(other_account.sub_group_name){",
									"                            case \"Sale\":",
									"                                console.log(\"- sub_group Sale\");",
									"                                account_code = randomChars(6);",
									"                                name = \"[API][Edit] Sale \" + account_code;",
									"                                description = \"Auto API - description edit Sale \" + account_code;",
									"                                // parent_id = coa[3].sub_group[0].sub_group_id;",
									"                                break;",
									"                            case \"Other Income\":",
									"                                console.log(\"- sub_group Other Income\");",
									"                                account_code = randomChars(6);",
									"                                name = \"[API][Edit] Other Income \" + account_code;",
									"                                description = \"Auto API - description edit Other Income \" + account_code;",
									"                                // parent_id = coa[3].sub_group[1].sub_group_id;",
									"                                break;",
									"                            case \"Uncategorized Income\":",
									"                            default:",
									"                                console.log(\"- sub_group Uncategorized Income\");",
									"                                account_code = randomChars(6);",
									"                                name = \"[API][Edit] Uncategorized Income \" + account_code;",
									"                                description = \"Auto API - description edit Uncategorized Income \" + account_code;",
									"                                // parent_id = coa[3].sub_group[2].sub_group_id;",
									"                                break;",
									"                        }",
									"                        break;",
									"                    case \"expense\":",
									"                    default:",
									"                        console.log(\"Edit account in group expense\");",
									"                        switch(other_account.sub_group_name){",
									"                            case \"Cost of Goods Sold\":",
									"                                console.log(\"- sub_group Cost of Goods Sold\");",
									"                                account_code = randomChars(6);",
									"                                name = \"[API][Edit] Cost of Goods Sold \" + account_code;",
									"                                description = \"Auto API - description edit Cost of Goods Sold \" + account_code;",
									"                                // parent_id = coa[4].sub_group[0].sub_group_id;",
									"                                break;",
									"                            case \"Operating Expense\":",
									"                                console.log(\"- sub_group Operating Expense\");",
									"                                account_code = randomChars(6);",
									"                                name = \"[API][Edit] Operating Expense \" + account_code;",
									"                                description = \"Auto API - description edit Operating Expense \" + account_code;",
									"                                // parent_id = coa[4].sub_group[1].sub_group_id;",
									"                                break;",
									"                            case \"Other Expense\":",
									"                                console.log(\"- sub_group Other Expense\");",
									"                                account_code = randomChars(6);",
									"                                name = \"[API][Edit] Other Expense \" + account_code;",
									"                                description = \"Auto API - description edit Other Expense \" + account_code;",
									"                                // parent_id = coa[4].sub_group[2].sub_group_id;",
									"                                break;",
									"                            case \"Uncategorized Expense\":",
									"                            default:",
									"                                console.log(\"- sub_group Uncategorized Expense\");",
									"                                account_code = randomChars(6);",
									"                                name = \"[API][Edit] Uncategorized Expense \" + account_code;",
									"                                description = \"Auto API - description edit Uncategorized Expense \" + account_code;",
									"                                // parent_id = coa[4].sub_group[3].sub_group_id;",
									"                                break;",
									"                        }",
									"                        break;",
									"                }",
									"                break;",
									"            default:",
									"                console.log(\"Missing flow\");",
									"                break;",
									"        }",
									"",
									"        payload = {",
									"            \"name\":name,",
									"            \"id\":account_id,",
									"            \"account_code\":account_code,",
									"            \"parent_id\":parent_id,",
									"            \"description\":description,",
									"            \"branch_id\":branch_id",
									"        }",
									"        break;",
									"    default:",
									"        console.log(\"Missing flow\");",
									"        break;",
									"}",
									"",
									"console.log(\"payload: \",payload);",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));",
									"pm.environment.set(\"C-account_obj\",payload);",
									"pm.environment.set(\"C-account_id\",account_id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"let case_ = pm.environment.get(\"C-case_\");",
									"",
									"let jsData = pm.response.json();",
									"switch(testcase){",
									"    case 3:",
									"        switch(case_){",
									"            case 1: case 2: case 3: case 4: case 5:",
									"                pm.test(\"Status code is 400\", function () {",
									"                    pm.response.to.have.status(400);",
									"                });",
									"                console.log(\"Error: \",jsData);",
									"",
									"                case_++;",
									"                pm.environment.set(\"C-case_\",case_);",
									"                postman.setNextRequest(\"edit_account\");",
									"                break;",
									"            case 6:",
									"                pm.test(\"Status code is 200\", function () {",
									"                    pm.response.to.have.status(200);",
									"                });",
									"                console.log(\"debug: \",jsData);",
									"                pm.environment.unset(\"C-case_\");",
									"",
									"                if(pm.response.code == 200){",
									"                    let account_obj = pm.environment.get(\"C-account_obj\");",
									"",
									"                    pm.test(\"name of account correctly! \" + account_obj.name, function () {",
									"                        pm.expect(account_obj.name == jsData.data.name).to.be.true;",
									"                    });",
									"",
									"                    pm.test(\"parent_id of account correctly! \" + account_obj.parent_id, function () {",
									"                        pm.expect(account_obj.parent_id == jsData.data.parent_id).to.be.true;",
									"                    });",
									"",
									"                    pm.test(\"open_amount of account correctly! \" + account_obj.open_amount, function () {",
									"                        pm.expect(account_obj.open_amount == jsData.data.open_amount).to.be.true;",
									"                    });",
									"                    ",
									"                    testcase++;",
									"                    pm.environment.set(\"C-testcase\",testcase);",
									"                    pm.environment.set(\"C-account_obj\",account_obj);",
									"                    postman.setNextRequest(\"get_list_internal_account\"); // get_list_internal_account",
									"                } else {",
									"                    console.log(\"Can't edit account, end test\");",
									"                    postman.setNextRequest(null);",
									"                }",
									"                break;",
									"            default:",
									"                console.log(\"missing flow, end test\");",
									"                postman.setNextRequest(null);",
									"                break;",
									"        }",
									"        break;",
									"    case 5:",
									"        switch(case_){",
									"            case 1: case 2: case 3: case 4:",
									"                pm.test(\"Status code is 400\", function () {",
									"                    pm.response.to.have.status(400);",
									"                });",
									"                console.log(\"Error: \",jsData);",
									"",
									"                case_++;",
									"                pm.environment.set(\"C-case_\",case_);",
									"                postman.setNextRequest(\"edit_account\");",
									"                break;",
									"            case 5:",
									"                pm.test(\"Status code is 200\", function () {",
									"                    pm.response.to.have.status(200);",
									"                });",
									"                console.log(\"debug: \",jsData);",
									"                pm.environment.unset(\"C-case_\");",
									"",
									"                if(pm.response.code == 200){",
									"                    let account_obj = pm.environment.get(\"C-account_obj\");",
									"",
									"                    pm.test(\"name of account correctly! \" + account_obj.name, function () {",
									"                        pm.expect(account_obj.name == jsData.data.name).to.be.true;",
									"                    });",
									"",
									"                    pm.test(\"account_code of account correctly! \" + account_obj.rate, function () {",
									"                        pm.expect(account_obj.account_code == jsData.data.account_code).to.be.true;",
									"                    });",
									"",
									"                    pm.test(\"description of account correctly! \" + account_obj.description, function () {",
									"                        pm.expect(account_obj.description == jsData.data.description).to.be.true;",
									"                    });",
									"",
									"                    pm.test(\"parent_id of account correctly! \" + account_obj.parent_id, function () {",
									"                        pm.expect(account_obj.parent_id == jsData.data.parent_id).to.be.true;",
									"                    });",
									"                    ",
									"                    testcase++;",
									"                    pm.environment.set(\"C-testcase\",testcase);",
									"                    pm.environment.set(\"C-account_obj\",account_obj);",
									"                    postman.setNextRequest(\"get_list_internal_account\"); // get_list_internal_account",
									"                } else {",
									"                    console.log(\"Can't edit account, end test\");",
									"                    postman.setNextRequest(null);",
									"                }",
									"                break;",
									"            default:",
									"                console.log(\"missing flow, end test\");",
									"                postman.setNextRequest(null);",
									"                break;",
									"        }",
									"        break;",
									"    default:",
									"        console.log(\"missing flow, end test\");",
									"        postman.setNextRequest(null);",
									"        break;",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "content-type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-ledger/api/v1/account/update/{{C-account_id}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-ledger",
								"api",
								"v1",
								"account",
								"update",
								"{{C-account_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete_account",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\":{{C-account_id}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-ledger/api/v1/account/delete/{{C-account_id}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-ledger",
								"api",
								"v1",
								"account",
								"delete",
								"{{C-account_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "product",
			"item": [
				{
					"name": "main",
					"item": [
						{
							"name": "get_list_product",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let testcase = pm.environment.get(\"C-testcase\");",
											"console.log(\"Testcase: \" + testcase);",
											"",
											"let page = pm.environment.get(\"C-page\");",
											"",
											"if(!page){",
											"    page = 1;",
											"    pm.environment.set(\"C-page\",page);",
											"",
											"    let page_size = 50;",
											"    pm.environment.set(\"C-page_size\",page_size);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"let jsData = JSON.parse(responseBody);",
											"if(pm.response.code == 200){",
											"    let testcase = pm.environment.get(\"C-testcase\");",
											"    let total_pages = jsData.meta.total_pages;",
											"    let page = pm.environment.get(\"C-page\");",
											"",
											"    let list_product, old_list_product;",
											"    switch(testcase){",
											"        case 2:",
											"            list_product = pm.environment.get(\"C-list_product\");",
											"            if(!list_product){",
											"                list_product = [];",
											"            }",
											"            break;",
											"        case 4:",
											"            old_list_product = pm.environment.get(\"C-old_list_product\");",
											"            if(!old_list_product){",
											"                old_list_product = pm.environment.get(\"C-list_product\");",
											"                pm.environment.unset(\"C-list_product\");",
											"                pm.environment.set(\"C-old_list_product\",old_list_product);",
											"            }",
											"",
											"            list_product = pm.environment.get(\"C-list_product\");",
											"            if(!list_product){",
											"                list_product = [];",
											"            }",
											"            break;",
											"        default:",
											"            console.log(\"Missing flow\");",
											"            break;",
											"    }",
											"",
											"    for(let item in jsData.data){",
											"        list_product[list_product.length] = {",
											"            \"product_id\":jsData.data[item].id,",
											"            \"account_id\":jsData.data[item].account_id,",
											"            \"amount\":jsData.data[item].amount,",
											"            \"branch_id\":jsData.data[item].branch_id,",
											"            \"created_at\":jsData.data[item].created_at,",
											"            \"currency\":jsData.data[item].currency,",
											"            \"deleted_at\":jsData.data[item].deleted_at,",
											"            \"is_credit\":jsData.data[item].is_credit,",
											"            \"is_final_status\":jsData.data[item].is_final_status,",
											"            \"object_id_ref\":jsData.data[item].object_id_ref,",
											"            \"object_type\":jsData.data[item].object_type,",
											"            \"value_at\":jsData.data[item].value_at,",
											"            \"short_desc\":jsData.data[item].short_desc",
											"        }",
											"    }",
											"    pm.environment.set(\"C-list_product\",list_product);",
											"",
											"    if(page >= total_pages){",
											"        // must clear page & page_size",
											"        pm.environment.unset(\"C-page\");",
											"        pm.environment.unset(\"C-page_size\");",
											"",
											"        switch(testcase){",
											"            case 2:",
											"                pm.test(\"Got all product! \" + list_product.length, function () {",
											"                    pm.expect(list_product.length > 0).to.be.true;",
											"                });",
											"",
											"                testcase++;",
											"                pm.environment.set(\"C-testcase\",testcase);",
											"                postman.setNextRequest(\"create_product\"); // create_product",
											"                break;",
											"            case 4:",
											"                let product_obj = pm.environment.get(\"C-product_obj\");",
											"",
											"                pm.test(\"Total product increase 1\", function () {",
											"                    pm.expect(list_product.length == old_list_product.length + 1).to.be.true;",
											"                });",
											"",
											"                let isFound = false;",
											"                for(let i in jsData.data){",
											"                    if(jsData.data[i].id == product_obj.product_id){",
											"                        isFound = true;",
											"                        pm.test(\"name of product correctly! \" + product_obj.name, function () {",
											"                            pm.expect(product_obj.name == jsData.data[i].name).to.be.true;",
											"                        });",
											"",
											"                        pm.test(\"price of product correctly! \" + product_obj.price, function () {",
											"                            pm.expect(product_obj.price == jsData.data[i].price).to.be.true;",
											"                        });",
											"",
											"                        pm.test(\"sku_code of product correctly! \" + product_obj.sku_code, function () {",
											"                            pm.expect(product_obj.sku_code == jsData.data[i].sku_code).to.be.true;",
											"                        });",
											"",
											"                        pm.test(\"income_account_id of product correctly! \" + product_obj.income_account_id, function () {",
											"                            pm.expect(product_obj.income_account_id == jsData.data[i].income_account_id).to.be.true;",
											"                        });",
											"",
											"                        pm.test(\"income_taxes of product correctly! \" + product_obj.income_taxes, function () {",
											"                            pm.expect(JSON.stringify(product_obj.income_taxes) == JSON.stringify(jsData.data[i].income_taxes)).to.be.true;",
											"                        });",
											"                        break;",
											"                    }",
											"                }",
											"",
											"                pm.test(\"Found new product\", function () {",
											"                    pm.expect(isFound).to.be.true;",
											"                });",
											"",
											"                console.log(\"--- Start Testsuite 34 ---\");",
											"                postman.setNextRequest(null);",
											"                break;",
											"            default:",
											"                console.log(\"Missing flow, end test\");",
											"                postman.setNextRequest(null);",
											"                break;",
											"        }",
											"    } else {",
											"        page++;",
											"        pm.environment.set(\"C-page\",page);",
											"",
											"        console.log(\"view next page (\" + page + \") to get more product\");",
											"        postman.setNextRequest(\"get_list_product\");",
											"    }",
											"} else {",
											"    console.log(\"Can't get list product, end test\",jsData);",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "authorization",
										"value": "Bearer {{C-userToken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{finone_url}}/fo-business/api/v1/product/get-list?branch_id={{C-business_id}}&page={{C-page}}&page_size={{C-page_size}}&search=&sort=",
									"host": [
										"{{finone_url}}"
									],
									"path": [
										"fo-business",
										"api",
										"v1",
										"product",
										"get-list"
									],
									"query": [
										{
											"key": "branch_id",
											"value": "{{C-business_id}}"
										},
										{
											"key": "page",
											"value": "{{C-page}}"
										},
										{
											"key": "page_size",
											"value": "{{C-page_size}}"
										},
										{
											"key": "search",
											"value": ""
										},
										{
											"key": "sort",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "get_product_detail",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let testcase = pm.environment.get(\"C-testcase\");",
											"console.log(\"Testcase: \" + testcase);",
											"",
											"let page = pm.environment.get(\"C-page\");",
											"",
											"if(!page){",
											"    page = 1;",
											"    pm.environment.set(\"C-page\",page);",
											"",
											"    let page_size = 50;",
											"    pm.environment.set(\"C-page_size\",page_size);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"let jsData = JSON.parse(responseBody);",
											"if(pm.response.code == 200){",
											"    let testcase = pm.environment.get(\"C-testcase\");",
											"    let total_pages = jsData.meta.total_pages;",
											"    let page = pm.environment.get(\"C-page\");",
											"",
											"    let list_product, old_list_product;",
											"    switch(testcase){",
											"        case 2:",
											"            list_product = pm.environment.get(\"C-list_product\");",
											"            if(!list_product){",
											"                list_product = [];",
											"            }",
											"            break;",
											"        case 4:",
											"            old_list_product = pm.environment.get(\"C-old_list_product\");",
											"            if(!old_list_product){",
											"                old_list_product = pm.environment.get(\"C-list_product\");",
											"                pm.environment.unset(\"C-list_product\");",
											"                pm.environment.set(\"C-old_list_product\",old_list_product);",
											"            }",
											"",
											"            list_product = pm.environment.get(\"C-list_product\");",
											"            if(!list_product){",
											"                list_product = [];",
											"            }",
											"            break;",
											"        default:",
											"            console.log(\"Missing flow\");",
											"            break;",
											"    }",
											"",
											"    for(let item in jsData.data){",
											"        list_product[list_product.length] = {",
											"            \"product_id\":jsData.data[item].id,",
											"            \"account_id\":jsData.data[item].account_id,",
											"            \"amount\":jsData.data[item].amount,",
											"            \"branch_id\":jsData.data[item].branch_id,",
											"            \"created_at\":jsData.data[item].created_at,",
											"            \"currency\":jsData.data[item].currency,",
											"            \"deleted_at\":jsData.data[item].deleted_at,",
											"            \"is_credit\":jsData.data[item].is_credit,",
											"            \"is_final_status\":jsData.data[item].is_final_status,",
											"            \"object_id_ref\":jsData.data[item].object_id_ref,",
											"            \"object_type\":jsData.data[item].object_type,",
											"            \"value_at\":jsData.data[item].value_at,",
											"            \"short_desc\":jsData.data[item].short_desc",
											"        }",
											"    }",
											"    pm.environment.set(\"C-list_product\",list_product);",
											"",
											"    if(page >= total_pages){",
											"        // must clear page & page_size",
											"        pm.environment.unset(\"C-page\");",
											"        pm.environment.unset(\"C-page_size\");",
											"",
											"        switch(testcase){",
											"            case 2:",
											"                pm.test(\"Got all product! \" + list_product.length, function () {",
											"                    pm.expect(list_product.length > 0).to.be.true;",
											"                });",
											"",
											"                testcase++;",
											"                pm.environment.set(\"C-testcase\",testcase);",
											"                postman.setNextRequest(\"create_product\"); // create_product",
											"                break;",
											"            case 4:",
											"                let product_obj = pm.environment.get(\"C-product_obj\");",
											"",
											"                pm.test(\"Total product increase 1\", function () {",
											"                    pm.expect(list_product.length == old_list_product.length + 1).to.be.true;",
											"                });",
											"",
											"                let isFound = false;",
											"                for(let i in jsData.data){",
											"                    if(jsData.data[i].id == product_obj.product_id){",
											"                        isFound = true;",
											"                        pm.test(\"name of product correctly! \" + product_obj.name, function () {",
											"                            pm.expect(product_obj.name == jsData.data[i].name).to.be.true;",
											"                        });",
											"",
											"                        pm.test(\"price of product correctly! \" + product_obj.price, function () {",
											"                            pm.expect(product_obj.price == jsData.data[i].price).to.be.true;",
											"                        });",
											"",
											"                        pm.test(\"sku_code of product correctly! \" + product_obj.sku_code, function () {",
											"                            pm.expect(product_obj.sku_code == jsData.data[i].sku_code).to.be.true;",
											"                        });",
											"",
											"                        pm.test(\"income_account_id of product correctly! \" + product_obj.income_account_id, function () {",
											"                            pm.expect(product_obj.income_account_id == jsData.data[i].income_account_id).to.be.true;",
											"                        });",
											"",
											"                        pm.test(\"income_taxes of product correctly! \" + product_obj.income_taxes, function () {",
											"                            pm.expect(JSON.stringify(product_obj.income_taxes) == JSON.stringify(jsData.data[i].income_taxes)).to.be.true;",
											"                        });",
											"                        break;",
											"                    }",
											"                }",
											"",
											"                pm.test(\"Found new product\", function () {",
											"                    pm.expect(isFound).to.be.true;",
											"                });",
											"",
											"                console.log(\"--- Start Testsuite 34 ---\");",
											"                postman.setNextRequest(null);",
											"                break;",
											"            default:",
											"                console.log(\"Missing flow, end test\");",
											"                postman.setNextRequest(null);",
											"                break;",
											"        }",
											"    } else {",
											"        page++;",
											"        pm.environment.set(\"C-page\",page);",
											"",
											"        console.log(\"view next page (\" + page + \") to get more product\");",
											"        postman.setNextRequest(\"get_list_product\");",
											"    }",
											"} else {",
											"    console.log(\"Can't get list product, end test\",jsData);",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "authorization",
										"value": "Bearer {{C-userToken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{finone_url}}/fo-business/api/v1/product/get-detail/{{C-product_id}}",
									"host": [
										"{{finone_url}}"
									],
									"path": [
										"fo-business",
										"api",
										"v1",
										"product",
										"get-detail",
										"{{C-product_id}}"
									],
									"query": [
										{
											"key": "branch_id",
											"value": "{{C-business_id}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "create_product",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"branch_id\": 0,\n  \"business_id\": \"string\",\n  \"expense_account_id\": 0,\n  \"expense_taxes\": [\n    \"string\"\n  ],\n  \"incom_account_id\": 0,\n  \"incom_taxes\": [\n    \"string\"\n  ],\n  \"name\": \"string\",\n  \"price\": 0,\n  \"sku_code\": \"string\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{finone_url}}/fo-business/api/v1/product/create",
									"host": [
										"{{finone_url}}"
									],
									"path": [
										"fo-business",
										"api",
										"v1",
										"product",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "edit_product",
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{finone_url}}/fo-business/api/v1/product/update/{{C-product_id}}",
									"host": [
										"{{finone_url}}"
									],
									"path": [
										"fo-business",
										"api",
										"v1",
										"product",
										"update",
										"{{C-product_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete_product",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{finone_url}}/fo-business/api/v1/product/delete/{{C-product_id}}",
									"host": [
										"{{finone_url}}"
									],
									"path": [
										"fo-business",
										"api",
										"v1",
										"product",
										"delete",
										"{{C-product_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_list_sku",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let testcase = pm.environment.get(\"C-testcase\");",
											"console.log(\"Testcase: \" + testcase);",
											"",
											"let page = pm.environment.get(\"C-page\");",
											"",
											"if(!page){",
											"    page = 1;",
											"    pm.environment.set(\"C-page\",page);",
											"",
											"    let page_size = 50;",
											"    pm.environment.set(\"C-page_size\",page_size);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"let jsData = JSON.parse(responseBody);",
											"if(pm.response.code == 200){",
											"    let testcase = pm.environment.get(\"C-testcase\");",
											"    let total_pages = jsData.meta.total_pages;",
											"    let page = pm.environment.get(\"C-page\");",
											"",
											"    let list_product, old_list_product;",
											"    switch(testcase){",
											"        case 2:",
											"            list_product = pm.environment.get(\"C-list_product\");",
											"            if(!list_product){",
											"                list_product = [];",
											"            }",
											"            break;",
											"        case 4:",
											"            old_list_product = pm.environment.get(\"C-old_list_product\");",
											"            if(!old_list_product){",
											"                old_list_product = pm.environment.get(\"C-list_product\");",
											"                pm.environment.unset(\"C-list_product\");",
											"                pm.environment.set(\"C-old_list_product\",old_list_product);",
											"            }",
											"",
											"            list_product = pm.environment.get(\"C-list_product\");",
											"            if(!list_product){",
											"                list_product = [];",
											"            }",
											"            break;",
											"        default:",
											"            console.log(\"Missing flow\");",
											"            break;",
											"    }",
											"",
											"    for(let item in jsData.data){",
											"        list_product[list_product.length] = {",
											"            \"product_id\":jsData.data[item].id,",
											"            \"account_id\":jsData.data[item].account_id,",
											"            \"amount\":jsData.data[item].amount,",
											"            \"branch_id\":jsData.data[item].branch_id,",
											"            \"created_at\":jsData.data[item].created_at,",
											"            \"currency\":jsData.data[item].currency,",
											"            \"deleted_at\":jsData.data[item].deleted_at,",
											"            \"is_credit\":jsData.data[item].is_credit,",
											"            \"is_final_status\":jsData.data[item].is_final_status,",
											"            \"object_id_ref\":jsData.data[item].object_id_ref,",
											"            \"object_type\":jsData.data[item].object_type,",
											"            \"value_at\":jsData.data[item].value_at,",
											"            \"short_desc\":jsData.data[item].short_desc",
											"        }",
											"    }",
											"    pm.environment.set(\"C-list_product\",list_product);",
											"",
											"    if(page >= total_pages){",
											"        // must clear page & page_size",
											"        pm.environment.unset(\"C-page\");",
											"        pm.environment.unset(\"C-page_size\");",
											"",
											"        switch(testcase){",
											"            case 2:",
											"                pm.test(\"Got all product! \" + list_product.length, function () {",
											"                    pm.expect(list_product.length > 0).to.be.true;",
											"                });",
											"",
											"                testcase++;",
											"                pm.environment.set(\"C-testcase\",testcase);",
											"                postman.setNextRequest(\"create_product\"); // create_product",
											"                break;",
											"            case 4:",
											"                let product_obj = pm.environment.get(\"C-product_obj\");",
											"",
											"                pm.test(\"Total product increase 1\", function () {",
											"                    pm.expect(list_product.length == old_list_product.length + 1).to.be.true;",
											"                });",
											"",
											"                let isFound = false;",
											"                for(let i in jsData.data){",
											"                    if(jsData.data[i].id == product_obj.product_id){",
											"                        isFound = true;",
											"                        pm.test(\"name of product correctly! \" + product_obj.name, function () {",
											"                            pm.expect(product_obj.name == jsData.data[i].name).to.be.true;",
											"                        });",
											"",
											"                        pm.test(\"price of product correctly! \" + product_obj.price, function () {",
											"                            pm.expect(product_obj.price == jsData.data[i].price).to.be.true;",
											"                        });",
											"",
											"                        pm.test(\"sku_code of product correctly! \" + product_obj.sku_code, function () {",
											"                            pm.expect(product_obj.sku_code == jsData.data[i].sku_code).to.be.true;",
											"                        });",
											"",
											"                        pm.test(\"income_account_id of product correctly! \" + product_obj.income_account_id, function () {",
											"                            pm.expect(product_obj.income_account_id == jsData.data[i].income_account_id).to.be.true;",
											"                        });",
											"",
											"                        pm.test(\"income_taxes of product correctly! \" + product_obj.income_taxes, function () {",
											"                            pm.expect(JSON.stringify(product_obj.income_taxes) == JSON.stringify(jsData.data[i].income_taxes)).to.be.true;",
											"                        });",
											"                        break;",
											"                    }",
											"                }",
											"",
											"                pm.test(\"Found new product\", function () {",
											"                    pm.expect(isFound).to.be.true;",
											"                });",
											"",
											"                console.log(\"--- Start Testsuite 34 ---\");",
											"                postman.setNextRequest(null);",
											"                break;",
											"            default:",
											"                console.log(\"Missing flow, end test\");",
											"                postman.setNextRequest(null);",
											"                break;",
											"        }",
											"    } else {",
											"        page++;",
											"        pm.environment.set(\"C-page\",page);",
											"",
											"        console.log(\"view next page (\" + page + \") to get more product\");",
											"        postman.setNextRequest(\"get_list_product\");",
											"    }",
											"} else {",
											"    console.log(\"Can't get list product, end test\",jsData);",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "authorization",
										"value": "Bearer {{C-userToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{finone_url}}/fo-business/api/v1/sku/get-list?business_id={{C-business_id}}&page={{C-page}}&page_size={{C-page_size}}&search=&sort=",
									"host": [
										"{{finone_url}}"
									],
									"path": [
										"fo-business",
										"api",
										"v1",
										"sku",
										"get-list"
									],
									"query": [
										{
											"key": "business_id",
											"value": "{{C-business_id}}"
										},
										{
											"key": "page",
											"value": "{{C-page}}"
										},
										{
											"key": "page_size",
											"value": "{{C-page_size}}"
										},
										{
											"key": "search",
											"value": ""
										},
										{
											"key": "sort",
											"value": ""
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "other-info",
					"item": [
						{
							"name": "brand",
							"item": [
								{
									"name": "create_new_brand",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let payload = {",
													"    \"brand_name\": \"string\",",
													"    \"images\": [",
													"        \"string\"",
													"    ]",
													"}",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "authorization",
												"value": "Bearer {{C-userToken}}"
											}
										],
										"url": {
											"raw": "{{finone_url}}/fo-business/api/v1/brand/create",
											"host": [
												"{{finone_url}}"
											],
											"path": [
												"fo-business",
												"api",
												"v1",
												"brand",
												"create"
											]
										}
									},
									"response": []
								},
								{
									"name": "edit_brand",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let payload = {",
													"    \"brand_name\": \"string\",",
													"    \"images\": [",
													"        \"string\"",
													"    ]",
													"}",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "authorization",
												"value": "Bearer {{C-userToken}}"
											}
										],
										"url": {
											"raw": "{{finone_url}}/fo-business/api/v1/brand/update/{{C-brand_id}}",
											"host": [
												"{{finone_url}}"
											],
											"path": [
												"fo-business",
												"api",
												"v1",
												"brand",
												"update",
												"{{C-brand_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete_brand",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "authorization",
												"value": "Bearer {{C-userToken}}"
											}
										],
										"url": {
											"raw": "{{finone_url}}/fo-business/api/v1/brand/delete/{{C-brand_id}}",
											"host": [
												"{{finone_url}}"
											],
											"path": [
												"fo-business",
												"api",
												"v1",
												"brand",
												"delete",
												"{{C-brand_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "get_list_brand",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let testcase = pm.environment.get(\"C-testcase\");",
													"console.log(\"Testcase: \" + testcase);",
													"",
													"let page = pm.environment.get(\"C-page\");",
													"",
													"if(!page){",
													"    page = 1;",
													"    pm.environment.set(\"C-page\",page);",
													"",
													"    let page_size = 50;",
													"    pm.environment.set(\"C-page_size\",page_size);",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"let jsData = JSON.parse(responseBody);",
													"if(pm.response.code == 200){",
													"    let testcase = pm.environment.get(\"C-testcase\");",
													"    let total_pages = jsData.meta.total_pages;",
													"    let page = pm.environment.get(\"C-page\");",
													"",
													"    let list_product, old_list_product;",
													"    switch(testcase){",
													"        case 2:",
													"            list_product = pm.environment.get(\"C-list_product\");",
													"            if(!list_product){",
													"                list_product = [];",
													"            }",
													"            break;",
													"        case 4:",
													"            old_list_product = pm.environment.get(\"C-old_list_product\");",
													"            if(!old_list_product){",
													"                old_list_product = pm.environment.get(\"C-list_product\");",
													"                pm.environment.unset(\"C-list_product\");",
													"                pm.environment.set(\"C-old_list_product\",old_list_product);",
													"            }",
													"",
													"            list_product = pm.environment.get(\"C-list_product\");",
													"            if(!list_product){",
													"                list_product = [];",
													"            }",
													"            break;",
													"        default:",
													"            console.log(\"Missing flow\");",
													"            break;",
													"    }",
													"",
													"    for(let item in jsData.data){",
													"        list_product[list_product.length] = {",
													"            \"product_id\":jsData.data[item].id,",
													"            \"account_id\":jsData.data[item].account_id,",
													"            \"amount\":jsData.data[item].amount,",
													"            \"branch_id\":jsData.data[item].branch_id,",
													"            \"created_at\":jsData.data[item].created_at,",
													"            \"currency\":jsData.data[item].currency,",
													"            \"deleted_at\":jsData.data[item].deleted_at,",
													"            \"is_credit\":jsData.data[item].is_credit,",
													"            \"is_final_status\":jsData.data[item].is_final_status,",
													"            \"object_id_ref\":jsData.data[item].object_id_ref,",
													"            \"object_type\":jsData.data[item].object_type,",
													"            \"value_at\":jsData.data[item].value_at,",
													"            \"short_desc\":jsData.data[item].short_desc",
													"        }",
													"    }",
													"    pm.environment.set(\"C-list_product\",list_product);",
													"",
													"    if(page >= total_pages){",
													"        // must clear page & page_size",
													"        pm.environment.unset(\"C-page\");",
													"        pm.environment.unset(\"C-page_size\");",
													"",
													"        switch(testcase){",
													"            case 2:",
													"                pm.test(\"Got all product! \" + list_product.length, function () {",
													"                    pm.expect(list_product.length > 0).to.be.true;",
													"                });",
													"",
													"                testcase++;",
													"                pm.environment.set(\"C-testcase\",testcase);",
													"                postman.setNextRequest(\"create_product\"); // create_product",
													"                break;",
													"            case 4:",
													"                let product_obj = pm.environment.get(\"C-product_obj\");",
													"",
													"                pm.test(\"Total product increase 1\", function () {",
													"                    pm.expect(list_product.length == old_list_product.length + 1).to.be.true;",
													"                });",
													"",
													"                let isFound = false;",
													"                for(let i in jsData.data){",
													"                    if(jsData.data[i].id == product_obj.product_id){",
													"                        isFound = true;",
													"                        pm.test(\"name of product correctly! \" + product_obj.name, function () {",
													"                            pm.expect(product_obj.name == jsData.data[i].name).to.be.true;",
													"                        });",
													"",
													"                        pm.test(\"price of product correctly! \" + product_obj.price, function () {",
													"                            pm.expect(product_obj.price == jsData.data[i].price).to.be.true;",
													"                        });",
													"",
													"                        pm.test(\"sku_code of product correctly! \" + product_obj.sku_code, function () {",
													"                            pm.expect(product_obj.sku_code == jsData.data[i].sku_code).to.be.true;",
													"                        });",
													"",
													"                        pm.test(\"income_account_id of product correctly! \" + product_obj.income_account_id, function () {",
													"                            pm.expect(product_obj.income_account_id == jsData.data[i].income_account_id).to.be.true;",
													"                        });",
													"",
													"                        pm.test(\"income_taxes of product correctly! \" + product_obj.income_taxes, function () {",
													"                            pm.expect(JSON.stringify(product_obj.income_taxes) == JSON.stringify(jsData.data[i].income_taxes)).to.be.true;",
													"                        });",
													"                        break;",
													"                    }",
													"                }",
													"",
													"                pm.test(\"Found new product\", function () {",
													"                    pm.expect(isFound).to.be.true;",
													"                });",
													"",
													"                console.log(\"--- Start Testsuite 34 ---\");",
													"                postman.setNextRequest(null);",
													"                break;",
													"            default:",
													"                console.log(\"Missing flow, end test\");",
													"                postman.setNextRequest(null);",
													"                break;",
													"        }",
													"    } else {",
													"        page++;",
													"        pm.environment.set(\"C-page\",page);",
													"",
													"        console.log(\"view next page (\" + page + \") to get more product\");",
													"        postman.setNextRequest(\"get_list_product\");",
													"    }",
													"} else {",
													"    console.log(\"Can't get list product, end test\",jsData);",
													"    postman.setNextRequest(null);",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "authorization",
												"value": "Bearer {{C-userToken}}"
											}
										],
										"url": {
											"raw": "{{finone_url}}/fo-business/api/v1/brand/get-list?page={{C-page}}&page_size={{C-page_size}}&search=&sort=",
											"host": [
												"{{finone_url}}"
											],
											"path": [
												"fo-business",
												"api",
												"v1",
												"brand",
												"get-list"
											],
											"query": [
												{
													"key": "business_id",
													"value": "{{C-business_id}}",
													"disabled": true
												},
												{
													"key": "page",
													"value": "{{C-page}}"
												},
												{
													"key": "page_size",
													"value": "{{C-page_size}}"
												},
												{
													"key": "search",
													"value": ""
												},
												{
													"key": "sort",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "get_brand_detail",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let testcase = pm.environment.get(\"C-testcase\");",
													"console.log(\"Testcase: \" + testcase);",
													"",
													"let page = pm.environment.get(\"C-page\");",
													"",
													"if(!page){",
													"    page = 1;",
													"    pm.environment.set(\"C-page\",page);",
													"",
													"    let page_size = 50;",
													"    pm.environment.set(\"C-page_size\",page_size);",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"let jsData = JSON.parse(responseBody);",
													"if(pm.response.code == 200){",
													"    let testcase = pm.environment.get(\"C-testcase\");",
													"    let total_pages = jsData.meta.total_pages;",
													"    let page = pm.environment.get(\"C-page\");",
													"",
													"    let list_product, old_list_product;",
													"    switch(testcase){",
													"        case 2:",
													"            list_product = pm.environment.get(\"C-list_product\");",
													"            if(!list_product){",
													"                list_product = [];",
													"            }",
													"            break;",
													"        case 4:",
													"            old_list_product = pm.environment.get(\"C-old_list_product\");",
													"            if(!old_list_product){",
													"                old_list_product = pm.environment.get(\"C-list_product\");",
													"                pm.environment.unset(\"C-list_product\");",
													"                pm.environment.set(\"C-old_list_product\",old_list_product);",
													"            }",
													"",
													"            list_product = pm.environment.get(\"C-list_product\");",
													"            if(!list_product){",
													"                list_product = [];",
													"            }",
													"            break;",
													"        default:",
													"            console.log(\"Missing flow\");",
													"            break;",
													"    }",
													"",
													"    for(let item in jsData.data){",
													"        list_product[list_product.length] = {",
													"            \"product_id\":jsData.data[item].id,",
													"            \"account_id\":jsData.data[item].account_id,",
													"            \"amount\":jsData.data[item].amount,",
													"            \"branch_id\":jsData.data[item].branch_id,",
													"            \"created_at\":jsData.data[item].created_at,",
													"            \"currency\":jsData.data[item].currency,",
													"            \"deleted_at\":jsData.data[item].deleted_at,",
													"            \"is_credit\":jsData.data[item].is_credit,",
													"            \"is_final_status\":jsData.data[item].is_final_status,",
													"            \"object_id_ref\":jsData.data[item].object_id_ref,",
													"            \"object_type\":jsData.data[item].object_type,",
													"            \"value_at\":jsData.data[item].value_at,",
													"            \"short_desc\":jsData.data[item].short_desc",
													"        }",
													"    }",
													"    pm.environment.set(\"C-list_product\",list_product);",
													"",
													"    if(page >= total_pages){",
													"        // must clear page & page_size",
													"        pm.environment.unset(\"C-page\");",
													"        pm.environment.unset(\"C-page_size\");",
													"",
													"        switch(testcase){",
													"            case 2:",
													"                pm.test(\"Got all product! \" + list_product.length, function () {",
													"                    pm.expect(list_product.length > 0).to.be.true;",
													"                });",
													"",
													"                testcase++;",
													"                pm.environment.set(\"C-testcase\",testcase);",
													"                postman.setNextRequest(\"create_product\"); // create_product",
													"                break;",
													"            case 4:",
													"                let product_obj = pm.environment.get(\"C-product_obj\");",
													"",
													"                pm.test(\"Total product increase 1\", function () {",
													"                    pm.expect(list_product.length == old_list_product.length + 1).to.be.true;",
													"                });",
													"",
													"                let isFound = false;",
													"                for(let i in jsData.data){",
													"                    if(jsData.data[i].id == product_obj.product_id){",
													"                        isFound = true;",
													"                        pm.test(\"name of product correctly! \" + product_obj.name, function () {",
													"                            pm.expect(product_obj.name == jsData.data[i].name).to.be.true;",
													"                        });",
													"",
													"                        pm.test(\"price of product correctly! \" + product_obj.price, function () {",
													"                            pm.expect(product_obj.price == jsData.data[i].price).to.be.true;",
													"                        });",
													"",
													"                        pm.test(\"sku_code of product correctly! \" + product_obj.sku_code, function () {",
													"                            pm.expect(product_obj.sku_code == jsData.data[i].sku_code).to.be.true;",
													"                        });",
													"",
													"                        pm.test(\"income_account_id of product correctly! \" + product_obj.income_account_id, function () {",
													"                            pm.expect(product_obj.income_account_id == jsData.data[i].income_account_id).to.be.true;",
													"                        });",
													"",
													"                        pm.test(\"income_taxes of product correctly! \" + product_obj.income_taxes, function () {",
													"                            pm.expect(JSON.stringify(product_obj.income_taxes) == JSON.stringify(jsData.data[i].income_taxes)).to.be.true;",
													"                        });",
													"                        break;",
													"                    }",
													"                }",
													"",
													"                pm.test(\"Found new product\", function () {",
													"                    pm.expect(isFound).to.be.true;",
													"                });",
													"",
													"                console.log(\"--- Start Testsuite 34 ---\");",
													"                postman.setNextRequest(null);",
													"                break;",
													"            default:",
													"                console.log(\"Missing flow, end test\");",
													"                postman.setNextRequest(null);",
													"                break;",
													"        }",
													"    } else {",
													"        page++;",
													"        pm.environment.set(\"C-page\",page);",
													"",
													"        console.log(\"view next page (\" + page + \") to get more product\");",
													"        postman.setNextRequest(\"get_list_product\");",
													"    }",
													"} else {",
													"    console.log(\"Can't get list product, end test\",jsData);",
													"    postman.setNextRequest(null);",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "authorization",
												"value": "Bearer {{C-userToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{finone_url}}/fo-business/api/v1/brand/get-detail/{{C-brand_id}}",
											"host": [
												"{{finone_url}}"
											],
											"path": [
												"fo-business",
												"api",
												"v1",
												"brand",
												"get-detail",
												"{{C-brand_id}}"
											],
											"query": [
												{
													"key": "branch_id",
													"value": "{{C-business_id}}",
													"disabled": true
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											"// Thương hiệu"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "category",
							"item": [
								{
									"name": "create_new_category",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let payload = {",
													"    \"category_name\": \"string\"",
													"}",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "authorization",
												"value": "Bearer {{C-userToken}}"
											}
										],
										"url": {
											"raw": "{{finone_url}}/fo-business/api/v1/category/create",
											"host": [
												"{{finone_url}}"
											],
											"path": [
												"fo-business",
												"api",
												"v1",
												"category",
												"create"
											]
										}
									},
									"response": []
								},
								{
									"name": "edit_category",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let payload = {",
													"    \"category_name\": \"string\"",
													"}",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "authorization",
												"value": "Bearer {{C-userToken}}"
											}
										],
										"url": {
											"raw": "{{finone_url}}/fo-business/api/v1/category/update/{{C-category_id}}",
											"host": [
												"{{finone_url}}"
											],
											"path": [
												"fo-business",
												"api",
												"v1",
												"category",
												"update",
												"{{C-category_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete_category",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "authorization",
												"value": "Bearer {{C-userToken}}"
											}
										],
										"url": {
											"raw": "{{finone_url}}/fo-business/api/v1/category/delete/{{C-category_id}}",
											"host": [
												"{{finone_url}}"
											],
											"path": [
												"fo-business",
												"api",
												"v1",
												"category",
												"delete",
												"{{C-category_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "get_list_category",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let testcase = pm.environment.get(\"C-testcase\");",
													"console.log(\"Testcase: \" + testcase);",
													"",
													"let page = pm.environment.get(\"C-page\");",
													"",
													"if(!page){",
													"    page = 1;",
													"    pm.environment.set(\"C-page\",page);",
													"",
													"    let page_size = 50;",
													"    pm.environment.set(\"C-page_size\",page_size);",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"let jsData = JSON.parse(responseBody);",
													"if(pm.response.code == 200){",
													"    let testcase = pm.environment.get(\"C-testcase\");",
													"    let total_pages = jsData.meta.total_pages;",
													"    let page = pm.environment.get(\"C-page\");",
													"",
													"    let list_product, old_list_product;",
													"    switch(testcase){",
													"        case 2:",
													"            list_product = pm.environment.get(\"C-list_product\");",
													"            if(!list_product){",
													"                list_product = [];",
													"            }",
													"            break;",
													"        case 4:",
													"            old_list_product = pm.environment.get(\"C-old_list_product\");",
													"            if(!old_list_product){",
													"                old_list_product = pm.environment.get(\"C-list_product\");",
													"                pm.environment.unset(\"C-list_product\");",
													"                pm.environment.set(\"C-old_list_product\",old_list_product);",
													"            }",
													"",
													"            list_product = pm.environment.get(\"C-list_product\");",
													"            if(!list_product){",
													"                list_product = [];",
													"            }",
													"            break;",
													"        default:",
													"            console.log(\"Missing flow\");",
													"            break;",
													"    }",
													"",
													"    for(let item in jsData.data){",
													"        list_product[list_product.length] = {",
													"            \"product_id\":jsData.data[item].id,",
													"            \"account_id\":jsData.data[item].account_id,",
													"            \"amount\":jsData.data[item].amount,",
													"            \"branch_id\":jsData.data[item].branch_id,",
													"            \"created_at\":jsData.data[item].created_at,",
													"            \"currency\":jsData.data[item].currency,",
													"            \"deleted_at\":jsData.data[item].deleted_at,",
													"            \"is_credit\":jsData.data[item].is_credit,",
													"            \"is_final_status\":jsData.data[item].is_final_status,",
													"            \"object_id_ref\":jsData.data[item].object_id_ref,",
													"            \"object_type\":jsData.data[item].object_type,",
													"            \"value_at\":jsData.data[item].value_at,",
													"            \"short_desc\":jsData.data[item].short_desc",
													"        }",
													"    }",
													"    pm.environment.set(\"C-list_product\",list_product);",
													"",
													"    if(page >= total_pages){",
													"        // must clear page & page_size",
													"        pm.environment.unset(\"C-page\");",
													"        pm.environment.unset(\"C-page_size\");",
													"",
													"        switch(testcase){",
													"            case 2:",
													"                pm.test(\"Got all product! \" + list_product.length, function () {",
													"                    pm.expect(list_product.length > 0).to.be.true;",
													"                });",
													"",
													"                testcase++;",
													"                pm.environment.set(\"C-testcase\",testcase);",
													"                postman.setNextRequest(\"create_product\"); // create_product",
													"                break;",
													"            case 4:",
													"                let product_obj = pm.environment.get(\"C-product_obj\");",
													"",
													"                pm.test(\"Total product increase 1\", function () {",
													"                    pm.expect(list_product.length == old_list_product.length + 1).to.be.true;",
													"                });",
													"",
													"                let isFound = false;",
													"                for(let i in jsData.data){",
													"                    if(jsData.data[i].id == product_obj.product_id){",
													"                        isFound = true;",
													"                        pm.test(\"name of product correctly! \" + product_obj.name, function () {",
													"                            pm.expect(product_obj.name == jsData.data[i].name).to.be.true;",
													"                        });",
													"",
													"                        pm.test(\"price of product correctly! \" + product_obj.price, function () {",
													"                            pm.expect(product_obj.price == jsData.data[i].price).to.be.true;",
													"                        });",
													"",
													"                        pm.test(\"sku_code of product correctly! \" + product_obj.sku_code, function () {",
													"                            pm.expect(product_obj.sku_code == jsData.data[i].sku_code).to.be.true;",
													"                        });",
													"",
													"                        pm.test(\"income_account_id of product correctly! \" + product_obj.income_account_id, function () {",
													"                            pm.expect(product_obj.income_account_id == jsData.data[i].income_account_id).to.be.true;",
													"                        });",
													"",
													"                        pm.test(\"income_taxes of product correctly! \" + product_obj.income_taxes, function () {",
													"                            pm.expect(JSON.stringify(product_obj.income_taxes) == JSON.stringify(jsData.data[i].income_taxes)).to.be.true;",
													"                        });",
													"                        break;",
													"                    }",
													"                }",
													"",
													"                pm.test(\"Found new product\", function () {",
													"                    pm.expect(isFound).to.be.true;",
													"                });",
													"",
													"                console.log(\"--- Start Testsuite 34 ---\");",
													"                postman.setNextRequest(null);",
													"                break;",
													"            default:",
													"                console.log(\"Missing flow, end test\");",
													"                postman.setNextRequest(null);",
													"                break;",
													"        }",
													"    } else {",
													"        page++;",
													"        pm.environment.set(\"C-page\",page);",
													"",
													"        console.log(\"view next page (\" + page + \") to get more product\");",
													"        postman.setNextRequest(\"get_list_product\");",
													"    }",
													"} else {",
													"    console.log(\"Can't get list product, end test\",jsData);",
													"    postman.setNextRequest(null);",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "authorization",
												"value": "Bearer {{C-userToken}}"
											}
										],
										"url": {
											"raw": "{{finone_url}}/fo-business/api/v1/category/get-list?page={{C-page}}&page_size={{C-page_size}}&search=&sort=",
											"host": [
												"{{finone_url}}"
											],
											"path": [
												"fo-business",
												"api",
												"v1",
												"category",
												"get-list"
											],
											"query": [
												{
													"key": "business_id",
													"value": "{{C-business_id}}",
													"disabled": true
												},
												{
													"key": "page",
													"value": "{{C-page}}"
												},
												{
													"key": "page_size",
													"value": "{{C-page_size}}"
												},
												{
													"key": "search",
													"value": ""
												},
												{
													"key": "sort",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "get_category_detail",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let testcase = pm.environment.get(\"C-testcase\");",
													"console.log(\"Testcase: \" + testcase);",
													"",
													"let page = pm.environment.get(\"C-page\");",
													"",
													"if(!page){",
													"    page = 1;",
													"    pm.environment.set(\"C-page\",page);",
													"",
													"    let page_size = 50;",
													"    pm.environment.set(\"C-page_size\",page_size);",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"let jsData = JSON.parse(responseBody);",
													"if(pm.response.code == 200){",
													"    let testcase = pm.environment.get(\"C-testcase\");",
													"    let total_pages = jsData.meta.total_pages;",
													"    let page = pm.environment.get(\"C-page\");",
													"",
													"    let list_product, old_list_product;",
													"    switch(testcase){",
													"        case 2:",
													"            list_product = pm.environment.get(\"C-list_product\");",
													"            if(!list_product){",
													"                list_product = [];",
													"            }",
													"            break;",
													"        case 4:",
													"            old_list_product = pm.environment.get(\"C-old_list_product\");",
													"            if(!old_list_product){",
													"                old_list_product = pm.environment.get(\"C-list_product\");",
													"                pm.environment.unset(\"C-list_product\");",
													"                pm.environment.set(\"C-old_list_product\",old_list_product);",
													"            }",
													"",
													"            list_product = pm.environment.get(\"C-list_product\");",
													"            if(!list_product){",
													"                list_product = [];",
													"            }",
													"            break;",
													"        default:",
													"            console.log(\"Missing flow\");",
													"            break;",
													"    }",
													"",
													"    for(let item in jsData.data){",
													"        list_product[list_product.length] = {",
													"            \"product_id\":jsData.data[item].id,",
													"            \"account_id\":jsData.data[item].account_id,",
													"            \"amount\":jsData.data[item].amount,",
													"            \"branch_id\":jsData.data[item].branch_id,",
													"            \"created_at\":jsData.data[item].created_at,",
													"            \"currency\":jsData.data[item].currency,",
													"            \"deleted_at\":jsData.data[item].deleted_at,",
													"            \"is_credit\":jsData.data[item].is_credit,",
													"            \"is_final_status\":jsData.data[item].is_final_status,",
													"            \"object_id_ref\":jsData.data[item].object_id_ref,",
													"            \"object_type\":jsData.data[item].object_type,",
													"            \"value_at\":jsData.data[item].value_at,",
													"            \"short_desc\":jsData.data[item].short_desc",
													"        }",
													"    }",
													"    pm.environment.set(\"C-list_product\",list_product);",
													"",
													"    if(page >= total_pages){",
													"        // must clear page & page_size",
													"        pm.environment.unset(\"C-page\");",
													"        pm.environment.unset(\"C-page_size\");",
													"",
													"        switch(testcase){",
													"            case 2:",
													"                pm.test(\"Got all product! \" + list_product.length, function () {",
													"                    pm.expect(list_product.length > 0).to.be.true;",
													"                });",
													"",
													"                testcase++;",
													"                pm.environment.set(\"C-testcase\",testcase);",
													"                postman.setNextRequest(\"create_product\"); // create_product",
													"                break;",
													"            case 4:",
													"                let product_obj = pm.environment.get(\"C-product_obj\");",
													"",
													"                pm.test(\"Total product increase 1\", function () {",
													"                    pm.expect(list_product.length == old_list_product.length + 1).to.be.true;",
													"                });",
													"",
													"                let isFound = false;",
													"                for(let i in jsData.data){",
													"                    if(jsData.data[i].id == product_obj.product_id){",
													"                        isFound = true;",
													"                        pm.test(\"name of product correctly! \" + product_obj.name, function () {",
													"                            pm.expect(product_obj.name == jsData.data[i].name).to.be.true;",
													"                        });",
													"",
													"                        pm.test(\"price of product correctly! \" + product_obj.price, function () {",
													"                            pm.expect(product_obj.price == jsData.data[i].price).to.be.true;",
													"                        });",
													"",
													"                        pm.test(\"sku_code of product correctly! \" + product_obj.sku_code, function () {",
													"                            pm.expect(product_obj.sku_code == jsData.data[i].sku_code).to.be.true;",
													"                        });",
													"",
													"                        pm.test(\"income_account_id of product correctly! \" + product_obj.income_account_id, function () {",
													"                            pm.expect(product_obj.income_account_id == jsData.data[i].income_account_id).to.be.true;",
													"                        });",
													"",
													"                        pm.test(\"income_taxes of product correctly! \" + product_obj.income_taxes, function () {",
													"                            pm.expect(JSON.stringify(product_obj.income_taxes) == JSON.stringify(jsData.data[i].income_taxes)).to.be.true;",
													"                        });",
													"                        break;",
													"                    }",
													"                }",
													"",
													"                pm.test(\"Found new product\", function () {",
													"                    pm.expect(isFound).to.be.true;",
													"                });",
													"",
													"                console.log(\"--- Start Testsuite 34 ---\");",
													"                postman.setNextRequest(null);",
													"                break;",
													"            default:",
													"                console.log(\"Missing flow, end test\");",
													"                postman.setNextRequest(null);",
													"                break;",
													"        }",
													"    } else {",
													"        page++;",
													"        pm.environment.set(\"C-page\",page);",
													"",
													"        console.log(\"view next page (\" + page + \") to get more product\");",
													"        postman.setNextRequest(\"get_list_product\");",
													"    }",
													"} else {",
													"    console.log(\"Can't get list product, end test\",jsData);",
													"    postman.setNextRequest(null);",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "authorization",
												"value": "Bearer {{C-userToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{finone_url}}/fo-business/api/v1/category/get-detail/{{C-category_id}}",
											"host": [
												"{{finone_url}}"
											],
											"path": [
												"fo-business",
												"api",
												"v1",
												"category",
												"get-detail",
												"{{C-category_id}}"
											],
											"query": [
												{
													"key": "branch_id",
													"value": "{{C-business_id}}",
													"disabled": true
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "placement",
							"item": [
								{
									"name": "create_new_placement",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let payload = {",
													"    \"placement_name\": \"string\"",
													"}",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "authorization",
												"value": "Bearer {{C-userToken}}"
											}
										],
										"url": {
											"raw": "{{finone_url}}/fo-business/api/v1/placement/create",
											"host": [
												"{{finone_url}}"
											],
											"path": [
												"fo-business",
												"api",
												"v1",
												"placement",
												"create"
											]
										}
									},
									"response": []
								},
								{
									"name": "edit_placement",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let payload = {",
													"    \"placement_name\": \"string\"",
													"}",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "authorization",
												"value": "Bearer {{C-userToken}}"
											}
										],
										"url": {
											"raw": "{{finone_url}}/fo-business/api/v1/placement/update/{{C-placement_id}}",
											"host": [
												"{{finone_url}}"
											],
											"path": [
												"fo-business",
												"api",
												"v1",
												"placement",
												"update",
												"{{C-placement_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete_placement",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "authorization",
												"value": "Bearer {{C-userToken}}"
											}
										],
										"url": {
											"raw": "{{finone_url}}/fo-business/api/v1/placement/delete/{{C-placement_id}}",
											"host": [
												"{{finone_url}}"
											],
											"path": [
												"fo-business",
												"api",
												"v1",
												"placement",
												"delete",
												"{{C-placement_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "get_list_placement",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let testcase = pm.environment.get(\"C-testcase\");",
													"console.log(\"Testcase: \" + testcase);",
													"",
													"let page = pm.environment.get(\"C-page\");",
													"",
													"if(!page){",
													"    page = 1;",
													"    pm.environment.set(\"C-page\",page);",
													"",
													"    let page_size = 50;",
													"    pm.environment.set(\"C-page_size\",page_size);",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"let jsData = JSON.parse(responseBody);",
													"if(pm.response.code == 200){",
													"    let testcase = pm.environment.get(\"C-testcase\");",
													"    let total_pages = jsData.meta.total_pages;",
													"    let page = pm.environment.get(\"C-page\");",
													"",
													"    let list_product, old_list_product;",
													"    switch(testcase){",
													"        case 2:",
													"            list_product = pm.environment.get(\"C-list_product\");",
													"            if(!list_product){",
													"                list_product = [];",
													"            }",
													"            break;",
													"        case 4:",
													"            old_list_product = pm.environment.get(\"C-old_list_product\");",
													"            if(!old_list_product){",
													"                old_list_product = pm.environment.get(\"C-list_product\");",
													"                pm.environment.unset(\"C-list_product\");",
													"                pm.environment.set(\"C-old_list_product\",old_list_product);",
													"            }",
													"",
													"            list_product = pm.environment.get(\"C-list_product\");",
													"            if(!list_product){",
													"                list_product = [];",
													"            }",
													"            break;",
													"        default:",
													"            console.log(\"Missing flow\");",
													"            break;",
													"    }",
													"",
													"    for(let item in jsData.data){",
													"        list_product[list_product.length] = {",
													"            \"product_id\":jsData.data[item].id,",
													"            \"account_id\":jsData.data[item].account_id,",
													"            \"amount\":jsData.data[item].amount,",
													"            \"branch_id\":jsData.data[item].branch_id,",
													"            \"created_at\":jsData.data[item].created_at,",
													"            \"currency\":jsData.data[item].currency,",
													"            \"deleted_at\":jsData.data[item].deleted_at,",
													"            \"is_credit\":jsData.data[item].is_credit,",
													"            \"is_final_status\":jsData.data[item].is_final_status,",
													"            \"object_id_ref\":jsData.data[item].object_id_ref,",
													"            \"object_type\":jsData.data[item].object_type,",
													"            \"value_at\":jsData.data[item].value_at,",
													"            \"short_desc\":jsData.data[item].short_desc",
													"        }",
													"    }",
													"    pm.environment.set(\"C-list_product\",list_product);",
													"",
													"    if(page >= total_pages){",
													"        // must clear page & page_size",
													"        pm.environment.unset(\"C-page\");",
													"        pm.environment.unset(\"C-page_size\");",
													"",
													"        switch(testcase){",
													"            case 2:",
													"                pm.test(\"Got all product! \" + list_product.length, function () {",
													"                    pm.expect(list_product.length > 0).to.be.true;",
													"                });",
													"",
													"                testcase++;",
													"                pm.environment.set(\"C-testcase\",testcase);",
													"                postman.setNextRequest(\"create_product\"); // create_product",
													"                break;",
													"            case 4:",
													"                let product_obj = pm.environment.get(\"C-product_obj\");",
													"",
													"                pm.test(\"Total product increase 1\", function () {",
													"                    pm.expect(list_product.length == old_list_product.length + 1).to.be.true;",
													"                });",
													"",
													"                let isFound = false;",
													"                for(let i in jsData.data){",
													"                    if(jsData.data[i].id == product_obj.product_id){",
													"                        isFound = true;",
													"                        pm.test(\"name of product correctly! \" + product_obj.name, function () {",
													"                            pm.expect(product_obj.name == jsData.data[i].name).to.be.true;",
													"                        });",
													"",
													"                        pm.test(\"price of product correctly! \" + product_obj.price, function () {",
													"                            pm.expect(product_obj.price == jsData.data[i].price).to.be.true;",
													"                        });",
													"",
													"                        pm.test(\"sku_code of product correctly! \" + product_obj.sku_code, function () {",
													"                            pm.expect(product_obj.sku_code == jsData.data[i].sku_code).to.be.true;",
													"                        });",
													"",
													"                        pm.test(\"income_account_id of product correctly! \" + product_obj.income_account_id, function () {",
													"                            pm.expect(product_obj.income_account_id == jsData.data[i].income_account_id).to.be.true;",
													"                        });",
													"",
													"                        pm.test(\"income_taxes of product correctly! \" + product_obj.income_taxes, function () {",
													"                            pm.expect(JSON.stringify(product_obj.income_taxes) == JSON.stringify(jsData.data[i].income_taxes)).to.be.true;",
													"                        });",
													"                        break;",
													"                    }",
													"                }",
													"",
													"                pm.test(\"Found new product\", function () {",
													"                    pm.expect(isFound).to.be.true;",
													"                });",
													"",
													"                console.log(\"--- Start Testsuite 34 ---\");",
													"                postman.setNextRequest(null);",
													"                break;",
													"            default:",
													"                console.log(\"Missing flow, end test\");",
													"                postman.setNextRequest(null);",
													"                break;",
													"        }",
													"    } else {",
													"        page++;",
													"        pm.environment.set(\"C-page\",page);",
													"",
													"        console.log(\"view next page (\" + page + \") to get more product\");",
													"        postman.setNextRequest(\"get_list_product\");",
													"    }",
													"} else {",
													"    console.log(\"Can't get list product, end test\",jsData);",
													"    postman.setNextRequest(null);",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "authorization",
												"value": "Bearer {{C-userToken}}"
											}
										],
										"url": {
											"raw": "{{finone_url}}/fo-business/api/v1/placement/get-list?page={{C-page}}&page_size={{C-page_size}}&search=&sort=",
											"host": [
												"{{finone_url}}"
											],
											"path": [
												"fo-business",
												"api",
												"v1",
												"placement",
												"get-list"
											],
											"query": [
												{
													"key": "business_id",
													"value": "{{C-business_id}}",
													"disabled": true
												},
												{
													"key": "page",
													"value": "{{C-page}}"
												},
												{
													"key": "page_size",
													"value": "{{C-page_size}}"
												},
												{
													"key": "search",
													"value": ""
												},
												{
													"key": "sort",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "get_placement_detail",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let testcase = pm.environment.get(\"C-testcase\");",
													"console.log(\"Testcase: \" + testcase);",
													"",
													"let page = pm.environment.get(\"C-page\");",
													"",
													"if(!page){",
													"    page = 1;",
													"    pm.environment.set(\"C-page\",page);",
													"",
													"    let page_size = 50;",
													"    pm.environment.set(\"C-page_size\",page_size);",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"let jsData = JSON.parse(responseBody);",
													"if(pm.response.code == 200){",
													"    let testcase = pm.environment.get(\"C-testcase\");",
													"    let total_pages = jsData.meta.total_pages;",
													"    let page = pm.environment.get(\"C-page\");",
													"",
													"    let list_product, old_list_product;",
													"    switch(testcase){",
													"        case 2:",
													"            list_product = pm.environment.get(\"C-list_product\");",
													"            if(!list_product){",
													"                list_product = [];",
													"            }",
													"            break;",
													"        case 4:",
													"            old_list_product = pm.environment.get(\"C-old_list_product\");",
													"            if(!old_list_product){",
													"                old_list_product = pm.environment.get(\"C-list_product\");",
													"                pm.environment.unset(\"C-list_product\");",
													"                pm.environment.set(\"C-old_list_product\",old_list_product);",
													"            }",
													"",
													"            list_product = pm.environment.get(\"C-list_product\");",
													"            if(!list_product){",
													"                list_product = [];",
													"            }",
													"            break;",
													"        default:",
													"            console.log(\"Missing flow\");",
													"            break;",
													"    }",
													"",
													"    for(let item in jsData.data){",
													"        list_product[list_product.length] = {",
													"            \"product_id\":jsData.data[item].id,",
													"            \"account_id\":jsData.data[item].account_id,",
													"            \"amount\":jsData.data[item].amount,",
													"            \"branch_id\":jsData.data[item].branch_id,",
													"            \"created_at\":jsData.data[item].created_at,",
													"            \"currency\":jsData.data[item].currency,",
													"            \"deleted_at\":jsData.data[item].deleted_at,",
													"            \"is_credit\":jsData.data[item].is_credit,",
													"            \"is_final_status\":jsData.data[item].is_final_status,",
													"            \"object_id_ref\":jsData.data[item].object_id_ref,",
													"            \"object_type\":jsData.data[item].object_type,",
													"            \"value_at\":jsData.data[item].value_at,",
													"            \"short_desc\":jsData.data[item].short_desc",
													"        }",
													"    }",
													"    pm.environment.set(\"C-list_product\",list_product);",
													"",
													"    if(page >= total_pages){",
													"        // must clear page & page_size",
													"        pm.environment.unset(\"C-page\");",
													"        pm.environment.unset(\"C-page_size\");",
													"",
													"        switch(testcase){",
													"            case 2:",
													"                pm.test(\"Got all product! \" + list_product.length, function () {",
													"                    pm.expect(list_product.length > 0).to.be.true;",
													"                });",
													"",
													"                testcase++;",
													"                pm.environment.set(\"C-testcase\",testcase);",
													"                postman.setNextRequest(\"create_product\"); // create_product",
													"                break;",
													"            case 4:",
													"                let product_obj = pm.environment.get(\"C-product_obj\");",
													"",
													"                pm.test(\"Total product increase 1\", function () {",
													"                    pm.expect(list_product.length == old_list_product.length + 1).to.be.true;",
													"                });",
													"",
													"                let isFound = false;",
													"                for(let i in jsData.data){",
													"                    if(jsData.data[i].id == product_obj.product_id){",
													"                        isFound = true;",
													"                        pm.test(\"name of product correctly! \" + product_obj.name, function () {",
													"                            pm.expect(product_obj.name == jsData.data[i].name).to.be.true;",
													"                        });",
													"",
													"                        pm.test(\"price of product correctly! \" + product_obj.price, function () {",
													"                            pm.expect(product_obj.price == jsData.data[i].price).to.be.true;",
													"                        });",
													"",
													"                        pm.test(\"sku_code of product correctly! \" + product_obj.sku_code, function () {",
													"                            pm.expect(product_obj.sku_code == jsData.data[i].sku_code).to.be.true;",
													"                        });",
													"",
													"                        pm.test(\"income_account_id of product correctly! \" + product_obj.income_account_id, function () {",
													"                            pm.expect(product_obj.income_account_id == jsData.data[i].income_account_id).to.be.true;",
													"                        });",
													"",
													"                        pm.test(\"income_taxes of product correctly! \" + product_obj.income_taxes, function () {",
													"                            pm.expect(JSON.stringify(product_obj.income_taxes) == JSON.stringify(jsData.data[i].income_taxes)).to.be.true;",
													"                        });",
													"                        break;",
													"                    }",
													"                }",
													"",
													"                pm.test(\"Found new product\", function () {",
													"                    pm.expect(isFound).to.be.true;",
													"                });",
													"",
													"                console.log(\"--- Start Testsuite 34 ---\");",
													"                postman.setNextRequest(null);",
													"                break;",
													"            default:",
													"                console.log(\"Missing flow, end test\");",
													"                postman.setNextRequest(null);",
													"                break;",
													"        }",
													"    } else {",
													"        page++;",
													"        pm.environment.set(\"C-page\",page);",
													"",
													"        console.log(\"view next page (\" + page + \") to get more product\");",
													"        postman.setNextRequest(\"get_list_product\");",
													"    }",
													"} else {",
													"    console.log(\"Can't get list product, end test\",jsData);",
													"    postman.setNextRequest(null);",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "authorization",
												"value": "Bearer {{C-userToken}}"
											}
										],
										"url": {
											"raw": "{{finone_url}}/fo-business/api/v1/placement/get-detail/{{C-placement_id}}",
											"host": [
												"{{finone_url}}"
											],
											"path": [
												"fo-business",
												"api",
												"v1",
												"placement",
												"get-detail",
												"{{C-placement_id}}"
											],
											"query": [
												{
													"key": "branch_id",
													"value": "{{C-business_id}}",
													"disabled": true
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											"// Vị trí (kệ 1, dãy 1, ...)"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "tag",
							"item": [
								{
									"name": "create_new_tag",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let payload = {",
													"    \"tag_name\": \"string\"",
													"}",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "authorization",
												"value": "Bearer {{C-userToken}}"
											}
										],
										"url": {
											"raw": "{{finone_url}}/fo-business/api/v1/tag/create",
											"host": [
												"{{finone_url}}"
											],
											"path": [
												"fo-business",
												"api",
												"v1",
												"tag",
												"create"
											]
										}
									},
									"response": []
								},
								{
									"name": "edit_tag",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let payload = {",
													"    \"tag_name\": \"string\"",
													"}",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "authorization",
												"value": "Bearer {{C-userToken}}"
											}
										],
										"url": {
											"raw": "{{finone_url}}/fo-business/api/v1/tag/update/{{C-tag_id}}",
											"host": [
												"{{finone_url}}"
											],
											"path": [
												"fo-business",
												"api",
												"v1",
												"tag",
												"update",
												"{{C-tag_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete_tag",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "authorization",
												"value": "Bearer {{C-userToken}}"
											}
										],
										"url": {
											"raw": "{{finone_url}}/fo-business/api/v1/tag/delete/{{C-tag_id}}",
											"host": [
												"{{finone_url}}"
											],
											"path": [
												"fo-business",
												"api",
												"v1",
												"tag",
												"delete",
												"{{C-tag_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "get_list_tag",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let testcase = pm.environment.get(\"C-testcase\");",
													"console.log(\"Testcase: \" + testcase);",
													"",
													"let page = pm.environment.get(\"C-page\");",
													"",
													"if(!page){",
													"    page = 1;",
													"    pm.environment.set(\"C-page\",page);",
													"",
													"    let page_size = 50;",
													"    pm.environment.set(\"C-page_size\",page_size);",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"let jsData = JSON.parse(responseBody);",
													"if(pm.response.code == 200){",
													"    let testcase = pm.environment.get(\"C-testcase\");",
													"    let total_pages = jsData.meta.total_pages;",
													"    let page = pm.environment.get(\"C-page\");",
													"",
													"    let list_product, old_list_product;",
													"    switch(testcase){",
													"        case 2:",
													"            list_product = pm.environment.get(\"C-list_product\");",
													"            if(!list_product){",
													"                list_product = [];",
													"            }",
													"            break;",
													"        case 4:",
													"            old_list_product = pm.environment.get(\"C-old_list_product\");",
													"            if(!old_list_product){",
													"                old_list_product = pm.environment.get(\"C-list_product\");",
													"                pm.environment.unset(\"C-list_product\");",
													"                pm.environment.set(\"C-old_list_product\",old_list_product);",
													"            }",
													"",
													"            list_product = pm.environment.get(\"C-list_product\");",
													"            if(!list_product){",
													"                list_product = [];",
													"            }",
													"            break;",
													"        default:",
													"            console.log(\"Missing flow\");",
													"            break;",
													"    }",
													"",
													"    for(let item in jsData.data){",
													"        list_product[list_product.length] = {",
													"            \"product_id\":jsData.data[item].id,",
													"            \"account_id\":jsData.data[item].account_id,",
													"            \"amount\":jsData.data[item].amount,",
													"            \"branch_id\":jsData.data[item].branch_id,",
													"            \"created_at\":jsData.data[item].created_at,",
													"            \"currency\":jsData.data[item].currency,",
													"            \"deleted_at\":jsData.data[item].deleted_at,",
													"            \"is_credit\":jsData.data[item].is_credit,",
													"            \"is_final_status\":jsData.data[item].is_final_status,",
													"            \"object_id_ref\":jsData.data[item].object_id_ref,",
													"            \"object_type\":jsData.data[item].object_type,",
													"            \"value_at\":jsData.data[item].value_at,",
													"            \"short_desc\":jsData.data[item].short_desc",
													"        }",
													"    }",
													"    pm.environment.set(\"C-list_product\",list_product);",
													"",
													"    if(page >= total_pages){",
													"        // must clear page & page_size",
													"        pm.environment.unset(\"C-page\");",
													"        pm.environment.unset(\"C-page_size\");",
													"",
													"        switch(testcase){",
													"            case 2:",
													"                pm.test(\"Got all product! \" + list_product.length, function () {",
													"                    pm.expect(list_product.length > 0).to.be.true;",
													"                });",
													"",
													"                testcase++;",
													"                pm.environment.set(\"C-testcase\",testcase);",
													"                postman.setNextRequest(\"create_product\"); // create_product",
													"                break;",
													"            case 4:",
													"                let product_obj = pm.environment.get(\"C-product_obj\");",
													"",
													"                pm.test(\"Total product increase 1\", function () {",
													"                    pm.expect(list_product.length == old_list_product.length + 1).to.be.true;",
													"                });",
													"",
													"                let isFound = false;",
													"                for(let i in jsData.data){",
													"                    if(jsData.data[i].id == product_obj.product_id){",
													"                        isFound = true;",
													"                        pm.test(\"name of product correctly! \" + product_obj.name, function () {",
													"                            pm.expect(product_obj.name == jsData.data[i].name).to.be.true;",
													"                        });",
													"",
													"                        pm.test(\"price of product correctly! \" + product_obj.price, function () {",
													"                            pm.expect(product_obj.price == jsData.data[i].price).to.be.true;",
													"                        });",
													"",
													"                        pm.test(\"sku_code of product correctly! \" + product_obj.sku_code, function () {",
													"                            pm.expect(product_obj.sku_code == jsData.data[i].sku_code).to.be.true;",
													"                        });",
													"",
													"                        pm.test(\"income_account_id of product correctly! \" + product_obj.income_account_id, function () {",
													"                            pm.expect(product_obj.income_account_id == jsData.data[i].income_account_id).to.be.true;",
													"                        });",
													"",
													"                        pm.test(\"income_taxes of product correctly! \" + product_obj.income_taxes, function () {",
													"                            pm.expect(JSON.stringify(product_obj.income_taxes) == JSON.stringify(jsData.data[i].income_taxes)).to.be.true;",
													"                        });",
													"                        break;",
													"                    }",
													"                }",
													"",
													"                pm.test(\"Found new product\", function () {",
													"                    pm.expect(isFound).to.be.true;",
													"                });",
													"",
													"                console.log(\"--- Start Testsuite 34 ---\");",
													"                postman.setNextRequest(null);",
													"                break;",
													"            default:",
													"                console.log(\"Missing flow, end test\");",
													"                postman.setNextRequest(null);",
													"                break;",
													"        }",
													"    } else {",
													"        page++;",
													"        pm.environment.set(\"C-page\",page);",
													"",
													"        console.log(\"view next page (\" + page + \") to get more product\");",
													"        postman.setNextRequest(\"get_list_product\");",
													"    }",
													"} else {",
													"    console.log(\"Can't get list product, end test\",jsData);",
													"    postman.setNextRequest(null);",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "authorization",
												"value": "Bearer {{C-userToken}}"
											}
										],
										"url": {
											"raw": "{{finone_url}}/fo-business/api/v1/tag/get-list?page={{C-page}}&page_size={{C-page_size}}&search=&sort=",
											"host": [
												"{{finone_url}}"
											],
											"path": [
												"fo-business",
												"api",
												"v1",
												"tag",
												"get-list"
											],
											"query": [
												{
													"key": "business_id",
													"value": "{{C-business_id}}",
													"disabled": true
												},
												{
													"key": "page",
													"value": "{{C-page}}"
												},
												{
													"key": "page_size",
													"value": "{{C-page_size}}"
												},
												{
													"key": "search",
													"value": ""
												},
												{
													"key": "sort",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "get_tag_detail",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let testcase = pm.environment.get(\"C-testcase\");",
													"console.log(\"Testcase: \" + testcase);",
													"",
													"let page = pm.environment.get(\"C-page\");",
													"",
													"if(!page){",
													"    page = 1;",
													"    pm.environment.set(\"C-page\",page);",
													"",
													"    let page_size = 50;",
													"    pm.environment.set(\"C-page_size\",page_size);",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"let jsData = JSON.parse(responseBody);",
													"if(pm.response.code == 200){",
													"    let testcase = pm.environment.get(\"C-testcase\");",
													"    let total_pages = jsData.meta.total_pages;",
													"    let page = pm.environment.get(\"C-page\");",
													"",
													"    let list_product, old_list_product;",
													"    switch(testcase){",
													"        case 2:",
													"            list_product = pm.environment.get(\"C-list_product\");",
													"            if(!list_product){",
													"                list_product = [];",
													"            }",
													"            break;",
													"        case 4:",
													"            old_list_product = pm.environment.get(\"C-old_list_product\");",
													"            if(!old_list_product){",
													"                old_list_product = pm.environment.get(\"C-list_product\");",
													"                pm.environment.unset(\"C-list_product\");",
													"                pm.environment.set(\"C-old_list_product\",old_list_product);",
													"            }",
													"",
													"            list_product = pm.environment.get(\"C-list_product\");",
													"            if(!list_product){",
													"                list_product = [];",
													"            }",
													"            break;",
													"        default:",
													"            console.log(\"Missing flow\");",
													"            break;",
													"    }",
													"",
													"    for(let item in jsData.data){",
													"        list_product[list_product.length] = {",
													"            \"product_id\":jsData.data[item].id,",
													"            \"account_id\":jsData.data[item].account_id,",
													"            \"amount\":jsData.data[item].amount,",
													"            \"branch_id\":jsData.data[item].branch_id,",
													"            \"created_at\":jsData.data[item].created_at,",
													"            \"currency\":jsData.data[item].currency,",
													"            \"deleted_at\":jsData.data[item].deleted_at,",
													"            \"is_credit\":jsData.data[item].is_credit,",
													"            \"is_final_status\":jsData.data[item].is_final_status,",
													"            \"object_id_ref\":jsData.data[item].object_id_ref,",
													"            \"object_type\":jsData.data[item].object_type,",
													"            \"value_at\":jsData.data[item].value_at,",
													"            \"short_desc\":jsData.data[item].short_desc",
													"        }",
													"    }",
													"    pm.environment.set(\"C-list_product\",list_product);",
													"",
													"    if(page >= total_pages){",
													"        // must clear page & page_size",
													"        pm.environment.unset(\"C-page\");",
													"        pm.environment.unset(\"C-page_size\");",
													"",
													"        switch(testcase){",
													"            case 2:",
													"                pm.test(\"Got all product! \" + list_product.length, function () {",
													"                    pm.expect(list_product.length > 0).to.be.true;",
													"                });",
													"",
													"                testcase++;",
													"                pm.environment.set(\"C-testcase\",testcase);",
													"                postman.setNextRequest(\"create_product\"); // create_product",
													"                break;",
													"            case 4:",
													"                let product_obj = pm.environment.get(\"C-product_obj\");",
													"",
													"                pm.test(\"Total product increase 1\", function () {",
													"                    pm.expect(list_product.length == old_list_product.length + 1).to.be.true;",
													"                });",
													"",
													"                let isFound = false;",
													"                for(let i in jsData.data){",
													"                    if(jsData.data[i].id == product_obj.product_id){",
													"                        isFound = true;",
													"                        pm.test(\"name of product correctly! \" + product_obj.name, function () {",
													"                            pm.expect(product_obj.name == jsData.data[i].name).to.be.true;",
													"                        });",
													"",
													"                        pm.test(\"price of product correctly! \" + product_obj.price, function () {",
													"                            pm.expect(product_obj.price == jsData.data[i].price).to.be.true;",
													"                        });",
													"",
													"                        pm.test(\"sku_code of product correctly! \" + product_obj.sku_code, function () {",
													"                            pm.expect(product_obj.sku_code == jsData.data[i].sku_code).to.be.true;",
													"                        });",
													"",
													"                        pm.test(\"income_account_id of product correctly! \" + product_obj.income_account_id, function () {",
													"                            pm.expect(product_obj.income_account_id == jsData.data[i].income_account_id).to.be.true;",
													"                        });",
													"",
													"                        pm.test(\"income_taxes of product correctly! \" + product_obj.income_taxes, function () {",
													"                            pm.expect(JSON.stringify(product_obj.income_taxes) == JSON.stringify(jsData.data[i].income_taxes)).to.be.true;",
													"                        });",
													"                        break;",
													"                    }",
													"                }",
													"",
													"                pm.test(\"Found new product\", function () {",
													"                    pm.expect(isFound).to.be.true;",
													"                });",
													"",
													"                console.log(\"--- Start Testsuite 34 ---\");",
													"                postman.setNextRequest(null);",
													"                break;",
													"            default:",
													"                console.log(\"Missing flow, end test\");",
													"                postman.setNextRequest(null);",
													"                break;",
													"        }",
													"    } else {",
													"        page++;",
													"        pm.environment.set(\"C-page\",page);",
													"",
													"        console.log(\"view next page (\" + page + \") to get more product\");",
													"        postman.setNextRequest(\"get_list_product\");",
													"    }",
													"} else {",
													"    console.log(\"Can't get list product, end test\",jsData);",
													"    postman.setNextRequest(null);",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "authorization",
												"value": "Bearer {{C-userToken}}"
											}
										],
										"url": {
											"raw": "{{finone_url}}/fo-business/api/v1/tag/get-detail/{{C-placement_id}}",
											"host": [
												"{{finone_url}}"
											],
											"path": [
												"fo-business",
												"api",
												"v1",
												"tag",
												"get-detail",
												"{{C-placement_id}}"
											],
											"query": [
												{
													"key": "branch_id",
													"value": "{{C-business_id}}",
													"disabled": true
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "invoice",
			"item": [
				{
					"name": "create_invoice",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"amount\": 0,\n  \"branch_id\": 0,\n  \"contact_id\": \"string\",\n  \"created_order_at\": \"string\",\n  \"currency\": \"string\",\n  \"description\": \"string\",\n  \"displays_id\": \"string\",\n  \"id\": \"string\",\n  \"identify_id\": \"string\",\n  \"items\": [\n    {\n      \"account_id\": 0,\n      \"amount\": 0,\n      \"currency\": \"string\",\n      \"id\": \"string\",\n      \"name\": \"string\",\n      \"note\": \"string\",\n      \"quantity\": 0,\n      \"sku_id\": \"string\"\n    }\n  ],\n  \"status\": \"string\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-order/api​/v1/invoice​/create",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api​",
								"v1",
								"invoice​",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_list_invoice",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"branch_id\": {{C-business_id}},\n  \"option\": \"\",\n  \"page\": 1,\n  \"page_size\": 15,\n  \"search\": \"\",\n  \"sort\": \"\",\n  \"status\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-order​/api​/v1/​invoice​/get-list",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order​",
								"api​",
								"v1",
								"​invoice​",
								"get-list"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_invoice_detail",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/invoice/get-one/{{C-invoice_id}}?branch_id={{C-business_id}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"invoice",
								"get-one",
								"{{C-invoice_id}}"
							],
							"query": [
								{
									"key": "branch_id",
									"value": "{{C-business_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "edit_invoice",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"amount\": 0,\n  \"branch_id\": 0,\n  \"contact_id\": \"string\",\n  \"created_order_at\": \"string\",\n  \"currency\": \"string\",\n  \"description\": \"string\",\n  \"displays_id\": \"string\",\n  \"id\": \"string\",\n  \"identify_id\": \"string\",\n  \"items\": [\n    {\n      \"account_id\": 0,\n      \"amount\": 0,\n      \"currency\": \"string\",\n      \"id\": \"string\",\n      \"name\": \"string\",\n      \"note\": \"string\",\n      \"quantity\": 0,\n      \"sku_id\": \"string\"\n    }\n  ],\n  \"status\": \"string\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/invoice/update/{{C-invoice_id}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"invoice",
								"update",
								"{{C-invoice_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete_invoice",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/invoice/delete/{{C-invoice_id}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"invoice",
								"delete",
								"{{C-invoice_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "buyer_view_invoice",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/{{C-business_id}}/invoice/e7313bf7-a6d2-40da-aaa3-9c8026bdca51",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"{{C-business_id}}",
								"invoice",
								"e7313bf7-a6d2-40da-aaa3-9c8026bdca51"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "recurring invoice",
			"item": [
				{
					"name": "create_recurring_invoice",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"cart_status\": \"draft\",\n  \"contact_id\": \"string\",\n  \"day_of_type\": 0,\n  \"end_date\": \"string\",\n  \"notes\": \"string\",\n  \"recurrence_type\": \"string\",\n  \"sale_order_info\": [\n    {}\n  ],\n  \"start_date\": \"string\",\n  \"status\": \"draft\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-order/api​/v1/recurring​/create",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api​",
								"v1",
								"recurring​",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "edit_recurring_invoice",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"cart_status\": \"draft\",\n  \"contact_id\": \"string\",\n  \"day_of_type\": 0,\n  \"end_date\": \"string\",\n  \"notes\": \"string\",\n  \"recurrence_type\": \"string\",\n  \"sale_order_info\": [\n    {}\n  ],\n  \"start_date\": \"string\",\n  \"status\": \"draft\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-order/api​/v1/recurring​/update/{{C-recurring_invoice_id}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api​",
								"v1",
								"recurring​",
								"update",
								"{{C-recurring_invoice_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete_recurring_invoice",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-order/api​/v1/recurring​/delete/{{C-recurring_invoice_id}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api​",
								"v1",
								"recurring​",
								"delete",
								"{{C-recurring_invoice_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_list_recurring_invoice",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-order/api​/v1/recurring​/get-list",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api​",
								"v1",
								"recurring​",
								"get-list"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_detail_recurring_invoice",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-order/api​/v1/recurring​/get-one/{{C-recurring_invoice_id}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api​",
								"v1",
								"recurring​",
								"get-one",
								"{{C-recurring_invoice_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "note",
			"item": [
				{
					"name": "get_list_note",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{finone_url}}/fo-ledger/api/v1/note/get-list",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-ledger",
								"api",
								"v1",
								"note",
								"get-list"
							]
						}
					},
					"response": []
				},
				{
					"name": "create_note",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"content\": \"string\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-ledger/api/v1/note/create",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-ledger",
								"api",
								"v1",
								"note",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_note_detail",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{finone_url}}/fo-ledger/api/v1/note/get-one/{{C-note_id}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-ledger",
								"api",
								"v1",
								"note",
								"get-one",
								"{{C-note_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete_note",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{finone_url}}/fo-ledger/api/v1/note/note/{{C-note_id}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-ledger",
								"api",
								"v1",
								"note",
								"note",
								"{{C-note_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "transaction",
			"item": [
				{
					"name": "get_list_transaction",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let page = pm.environment.get(\"C-page\");",
									"",
									"if(!page){",
									"    page = 1;",
									"    pm.environment.set(\"C-page\",page);",
									"",
									"    let page_size = 50;",
									"    pm.environment.set(\"C-page_size\",page_size);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = JSON.parse(responseBody);",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let total_pages = jsData.meta.total_pages;",
									"    let page = pm.environment.get(\"C-page\");",
									"",
									"    let list_tnx, old_list_tnx;",
									"    switch(testcase){",
									"        case 2:",
									"            list_tnx = pm.environment.get(\"C-list_tnx\");",
									"            if(!list_tnx){",
									"                list_tnx = [];",
									"            }",
									"            break;",
									"        case 4:",
									"            old_list_tnx = pm.environment.get(\"C-old_list_tnx\");",
									"            if(!old_list_tnx){",
									"                old_list_tnx = pm.environment.get(\"C-list_tnx\");",
									"                pm.environment.unset(\"C-list_tnx\");",
									"                pm.environment.set(\"C-old_list_tnx\",old_list_tnx);",
									"            }",
									"",
									"            list_tnx = pm.environment.get(\"C-list_tnx\");",
									"            if(!list_tnx){",
									"                list_tnx = [];",
									"            }",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow\");",
									"            break;",
									"    }",
									"",
									"    for(let item in jsData.data){",
									"        list_tnx[list_tnx.length] = {",
									"            \"tnx_id\":jsData.data[item].id,",
									"            \"creator_id\":jsData.data[item].creator_id,",
									"            \"created_at\":jsData.data[item].created_at,",
									"            \"amount\":jsData.data[item].amount,",
									"            \"currency\":jsData.data[item].currency,",
									"            \"contact_id\":jsData.data[item].contact_id,",
									"            \"payment_method\":jsData.data[item].payment_method,",
									"            \"tnx_type\":jsData.data[item].tnx_type,",
									"            \"description\":jsData.data[item].description,",
									"            \"value_at\":jsData.data[item].value_at,",
									"            \"object_type\":jsData.data[item].object_type,",
									"            \"object_key\":jsData.data[item].object_key",
									"        }",
									"    }",
									"    pm.environment.set(\"C-list_tnx\",list_tnx);",
									"",
									"    if(page >= total_pages){",
									"        // must clear page & page_size",
									"        pm.environment.unset(\"C-page\");",
									"        pm.environment.unset(\"C-page_size\");",
									"",
									"        switch(testcase){",
									"            case 2:",
									"                pm.test(\"Got all tnx! \" + list_tnx.length, function () {",
									"                    pm.expect(list_tnx.length > 0).to.be.true;",
									"                });",
									"                console.log(\"total tnx: \", list_tnx.length);",
									"                console.log(\"-- include: \", list_tnx);",
									"",
									"                testcase++;",
									"                pm.environment.set(\"C-testcase\",testcase);",
									"                postman.setNextRequest(\"create_transaction\"); // create_transaction",
									"                break;",
									"            case 4:",
									"                let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"",
									"                pm.test(\"Total tnx increase 1\", function () {",
									"                    pm.expect(list_tnx.length == old_list_tnx.length + 1).to.be.true;",
									"                });",
									"",
									"                let isFound = false;",
									"                for(let i in jsData.data){",
									"                    if(jsData.data[i].id == tnx_obj.tnx_id){",
									"                        isFound = true;",
									"                        pm.test(\"amount of tax correctly! \" + tnx_obj.amount, function () {",
									"                            pm.expect(tnx_obj.amount == jsData.data[i].amount).to.be.true;",
									"                        });",
									"",
									"                        pm.test(\"tnx_type of tax correctly! \" + tnx_obj.tnx_type, function () {",
									"                            pm.expect(tnx_obj.tnx_type == jsData.data[i].tnx_type).to.be.true;",
									"                        });",
									"",
									"                        pm.test(\"description of tax correctly! \" + tnx_obj.description, function () {",
									"                            pm.expect(tnx_obj.description == jsData.data[i].description).to.be.true;",
									"                        });",
									"",
									"                        pm.test(\"value_at of tax correctly! \" + tnx_obj.value_at, function () {",
									"                            pm.expect(tnx_obj.value_at == jsData.data[i].value_at).to.be.true;",
									"                        });",
									"                        break;",
									"                    }",
									"                }",
									"",
									"                pm.test(\"Found new tnx\", function () {",
									"                    pm.expect(isFound).to.be.true;",
									"                });",
									"",
									"                postman.setNextRequest(\"get_transaction_detail\"); //get_transaction_detail",
									"                break;",
									"            default:",
									"                console.log(\"Missing flow, end test\");",
									"                postman.setNextRequest(null);",
									"                break;",
									"        }",
									"    } else {",
									"        page++;",
									"        pm.environment.set(\"C-page\",page);",
									"",
									"        console.log(\"view next page (\" + page + \") to get more tnx\");",
									"        postman.setNextRequest(\"get_list_transaction\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get list tnx, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{finone_url}}/fo-ledger/api/v1/transaction/list?branch_id={{C-branch_id}}&page={{C-page}}&page_size={{C-page_size}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-ledger",
								"api",
								"v1",
								"transaction",
								"list"
							],
							"query": [
								{
									"key": "branch_id",
									"value": "{{C-branch_id}}"
								},
								{
									"key": "page",
									"value": "{{C-page}}"
								},
								{
									"key": "page_size",
									"value": "{{C-page_size}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get_transaction_detail",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-ledger/api/v1/transaction/detail/{{C-transaction_id}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-ledger",
								"api",
								"v1",
								"transaction",
								"detail",
								"{{C-transaction_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "create_transaction",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"account_credit\": 0,\n  \"account_debit\": 0,\n  \"amount\": 0,\n  \"branch_id\": 0,\n  \"contact_id\": \"string\",\n  \"currency\": \"string\",\n  \"description\": \"string\",\n  \"displays_id\": \"string\",\n  \"id\": \"string\",\n  \"identify_id\": \"string\",\n  \"object_key\": \"string\",\n  \"object_type\": \"string\",\n  \"payment_method\": \"string\",\n  \"ref_id\": \"string\",\n  \"tnx_type\": \"string\",\n  \"value_at\": \"string\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-ledger/api/v1/transaction/create",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-ledger",
								"api",
								"v1",
								"transaction",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "edit_transaction",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"account_credit\": 0,\n  \"account_debit\": 0,\n  \"amount\": 0,\n  \"branch_id\": 0,\n  \"contact_id\": \"string\",\n  \"currency\": \"string\",\n  \"description\": \"string\",\n  \"displays_id\": \"string\",\n  \"id\": \"string\",\n  \"identify_id\": \"string\",\n  \"object_key\": \"string\",\n  \"object_type\": \"string\",\n  \"payment_method\": \"string\",\n  \"ref_id\": \"string\",\n  \"tnx_type\": \"string\",\n  \"value_at\": \"string\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-ledger/api/v1/transaction/update/{{C-transaction_id}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-ledger",
								"api",
								"v1",
								"transaction",
								"update",
								"{{C-transaction_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete_transaction",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{finone_url}}/fo-ledger/api/v1/transaction/delete/{{C-transaction_id}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-ledger",
								"api",
								"v1",
								"transaction",
								"delete",
								"{{C-transaction_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "payment",
			"item": [
				{
					"name": "manual",
					"item": [
						{
							"name": "create_payment",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"account_id\": 0,\n  \"account_number\": \"string\",\n  \"after_fee_amount\": 0,\n  \"attachment_url\": {},\n  \"bank_transaction_id\": \"string\",\n  \"before_fee_amount\": 0,\n  \"beneficiary_info\": {},\n  \"branch_id\": 0,\n  \"category_id\": 0,\n  \"currency\": \"string\",\n  \"description\": \"string\",\n  \"fee_amount\": 0,\n  \"id\": \"string\",\n  \"is_tnx_bank\": true,\n  \"object_key\": \"string\",\n  \"object_type\": \"string\",\n  \"payment_account_id\": 0,\n  \"payment_method\": \"string\",\n  \"status\": \"string\",\n  \"total_fee\": 0,\n  \"value_at\": \"string\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{finone_url}}/fo-ledger/api/v1/payment/create",
									"host": [
										"{{finone_url}}"
									],
									"path": [
										"fo-ledger",
										"api",
										"v1",
										"payment",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "update_payment",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"account_id\": 0,\n  \"account_number\": \"string\",\n  \"after_fee_amount\": 0,\n  \"attachment_url\": {},\n  \"bank_transaction_id\": \"string\",\n  \"before_fee_amount\": 0,\n  \"beneficiary_info\": {},\n  \"branch_id\": 0,\n  \"category_id\": 0,\n  \"currency\": \"string\",\n  \"description\": \"string\",\n  \"fee_amount\": 0,\n  \"id\": \"string\",\n  \"is_tnx_bank\": true,\n  \"object_key\": \"string\",\n  \"object_type\": \"string\",\n  \"payment_account_id\": 0,\n  \"payment_method\": \"string\",\n  \"status\": \"string\",\n  \"total_fee\": 0,\n  \"value_at\": \"string\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{finone_url}}/fo-ledger/api/v1/payment/update/{{C-payment_id}}",
									"host": [
										"{{finone_url}}"
									],
									"path": [
										"fo-ledger",
										"api",
										"v1",
										"payment",
										"update",
										"{{C-payment_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_list_payment",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{finone_url}}/fo-ledger/api/v1/payment/get-list?branch_id&id&object_key&object_type&page&page_size&payment_id",
									"host": [
										"{{finone_url}}"
									],
									"path": [
										"fo-ledger",
										"api",
										"v1",
										"payment",
										"get-list"
									],
									"query": [
										{
											"key": "branch_id",
											"value": null
										},
										{
											"key": "id",
											"value": null
										},
										{
											"key": "object_key",
											"value": null
										},
										{
											"key": "object_type",
											"value": null
										},
										{
											"key": "page",
											"value": null
										},
										{
											"key": "page_size",
											"value": null
										},
										{
											"key": "payment_id",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "get_payment_detail",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{finone_url}}/fo-ledger/api/v1/detail/{{C-payment_id}}?branch_id&id&object_key&object_type&page&page_size&payment_id",
									"host": [
										"{{finone_url}}"
									],
									"path": [
										"fo-ledger",
										"api",
										"v1",
										"detail",
										"{{C-payment_id}}"
									],
									"query": [
										{
											"key": "branch_id",
											"value": null
										},
										{
											"key": "id",
											"value": null
										},
										{
											"key": "object_key",
											"value": null
										},
										{
											"key": "object_type",
											"value": null
										},
										{
											"key": "page",
											"value": null
										},
										{
											"key": "page_size",
											"value": null
										},
										{
											"key": "payment_id",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "delete_payment",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{finone_url}}/fo-ledger/api/v1/payment/delete/{{C-payment_id}}",
									"host": [
										"{{finone_url}}"
									],
									"path": [
										"fo-ledger",
										"api",
										"v1",
										"payment",
										"delete",
										"{{C-payment_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "other",
					"item": [
						{
							"name": "get_payment_detail",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{finone_url}}/fo-ledger/api/v1/payment-number/{{C-payment_id}}?branch_id&id&object_key&object_type&page&page_size&payment_id",
									"host": [
										"{{finone_url}}"
									],
									"path": [
										"fo-ledger",
										"api",
										"v1",
										"payment-number",
										"{{C-payment_id}}"
									],
									"query": [
										{
											"key": "branch_id",
											"value": null
										},
										{
											"key": "id",
											"value": null
										},
										{
											"key": "object_key",
											"value": null
										},
										{
											"key": "object_type",
											"value": null
										},
										{
											"key": "page",
											"value": null
										},
										{
											"key": "page_size",
											"value": null
										},
										{
											"key": "payment_id",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "get_payment_method",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{C-userToken}}"
									}
								],
								"url": {
									"raw": "{{finone_url}}/fo-banking/api/v1/payment-method-linked/get-list?page=1&page_size=20&sort",
									"host": [
										"{{finone_url}}"
									],
									"path": [
										"fo-banking",
										"api",
										"v1",
										"payment-method-linked",
										"get-list"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "page_size",
											"value": "20"
										},
										{
											"key": "sort",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "create_payment",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"account_number\": \"string\",\n  \"branch_id\": 0,\n  \"callback_url\": \"string\",\n  \"object_code\": \"string\",\n  \"object_type\": \"string\",\n  \"payment_method\": \"string\",\n  \"payment_note\": \"string\",\n  \"provider_id\": \"string\",\n  \"request_amount\": 0\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{finone_url}}/fo-ledger/api/v1/payment/verify-account-by-bank",
									"host": [
										"{{finone_url}}"
									],
									"path": [
										"fo-ledger",
										"api",
										"v1",
										"payment",
										"verify-account-by-bank"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "reminder",
			"item": [
				{
					"name": "get_list_reminder",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/reminder/get-list?entry_id={{C-invoice_id}}&branch_id={{C-branch_id}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"reminder",
								"get-list"
							],
							"query": [
								{
									"key": "entry_id",
									"value": "{{C-invoice_id}}",
									"description": "{{C-invoice_id}}"
								},
								{
									"key": "branch_id",
									"value": "{{C-branch_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get_reminder_detail",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/reminder/get-one/{{C-reminder_id}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"reminder",
								"get-one",
								"{{C-reminder_id}}"
							],
							"query": [
								{
									"key": "id",
									"value": "{{C-invoice_id}}",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "create_reminder",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"string\",\n  \"object_id\": \"string\",\n  \"sent_at\": \"string\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/reminder/create",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"reminder",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "edit_reminder",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"string\",\n  \"object_id\": \"string\",\n  \"sent_at\": \"string\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/reminder/update/{{C-reminder_id}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"reminder",
								"update",
								"{{C-reminder_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete_reminder",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/reminder/delete/{{C-reminder_id}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"reminder",
								"delete",
								"{{C-reminder_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "email-google",
			"item": [
				{
					"name": "getOTP_sent_to_email",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/**",
									" * Vy: https://script.google.com/macros/s/AKfycbztZP5lcU2NnyYbAIwihL_27Nl01hZ7pDu-nJPCOuEgm7TgiODXMcK0ct7luuSxVjCh/exec - mail: tranvy991020@gmail.com",
									" * Châu: https://script.google.com/macros/s/AKfycbwhGiSTvNyuu1_M3nfS0Rooj9mCVJhKE2j7LzBjcesMef6B4OhMQVjhLKT2OvufypAr/exec",
									" */"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://script.google.com/macros/s/AKfycbztZP5lcU2NnyYbAIwihL_27Nl01hZ7pDu-nJPCOuEgm7TgiODXMcK0ct7luuSxVjCh/exec",
							"protocol": "https",
							"host": [
								"script",
								"google",
								"com"
							],
							"path": [
								"macros",
								"s",
								"AKfycbztZP5lcU2NnyYbAIwihL_27Nl01hZ7pDu-nJPCOuEgm7TgiODXMcK0ct7luuSxVjCh",
								"exec"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_list_invoice_sent_to_buyer_in_today",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/**",
									" * Note: only call invoice sent to mail: tranvy991020@gmail.com",
									" */",
									"// setTimeout(function(){}, 5000);",
									"",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    // let testcase = pm.environment.get(\"C-testcase\");",
									"    let sent_obj = pm.environment.get(\"C-sent_obj\");",
									"    console.log(\"sent_obj: \",sent_obj);",
									"    let invoice_obj = pm.environment.get(\"C-invoice_obj\");",
									"    console.log(\"invoice_obj: \",invoice_obj);",
									"",
									"    console.log(\"Debug: \",jsData);",
									"    let isFound = false;",
									"    for(let i in jsData.data){",
									"        if(jsData.data[i].invoice_number == invoice_obj.entry_code){",
									"            isFound = true;",
									"            pm.test(\"due_date correctly!\", function () {",
									"                pm.expect(jsData.data[i].due_date.substring(0,17) == invoice_obj.due_at.substring(0,17)).to.be.true;",
									"            });",
									"",
									"            pm.test(\"due_amount correctly!\", function () {",
									"                pm.expect(jsData.data[i].due_amount == invoice_obj.due_amount).to.be.true;",
									"            });",
									"",
									"            pm.test(\"sent_at is valid (max 5min)!\", function () { // will edit max after apply best practice to retry",
									"                let expected = new Date(sent_obj.sent_at);",
									"                let act = new Date(jsData.data[i].sent_at);",
									"                pm.expect(Math.floor(expected.getTime()/1000) <= Math.floor(act.getTime()/1000) &&  Math.floor(act.getTime()/1000) < Math.floor(expected.getTime()/1000) + 5*60).to.be.true;",
									"            });",
									"            break;",
									"        }",
									"    }",
									"",
									"    pm.test(\"Had sent invoice to buyer\", function () {",
									"        pm.expect(isFound).to.be.true;",
									"    });",
									"",
									"    console.log(\"------------ End Testsuite 14 ---------------\");",
									"    postman.setNextRequest(null);",
									"} else {",
									"    console.log(\"Can't call google app script to check email, end test\", jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://script.google.com/macros/s/AKfycbyZBtctdfYa450lmBvgCELpmo0KM9lGmRpV5RXOjUhOnNxLqdR71YLyyz7XH9m_KFzP/exec",
							"protocol": "https",
							"host": [
								"script",
								"google",
								"com"
							],
							"path": [
								"macros",
								"s",
								"AKfycbyZBtctdfYa450lmBvgCELpmo0KM9lGmRpV5RXOjUhOnNxLqdR71YLyyz7XH9m_KFzP",
								"exec"
							]
						}
					},
					"response": []
				},
				{
					"name": "make_read_invoice",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://script.google.com/macros/s/AKfycbxtLr5mlPNjdHXNmC1hkGjtN9blZw7Lmj2GDRYT28uLbI7A1wi44UdLBoAInu327O8m/exec?invoice_number=HD-gwoRXv&domain=notifications@finan.one",
							"protocol": "https",
							"host": [
								"script",
								"google",
								"com"
							],
							"path": [
								"macros",
								"s",
								"AKfycbxtLr5mlPNjdHXNmC1hkGjtN9blZw7Lmj2GDRYT28uLbI7A1wi44UdLBoAInu327O8m",
								"exec"
							],
							"query": [
								{
									"key": "invoice_number",
									"value": "HD-gwoRXv"
								},
								{
									"key": "domain",
									"value": "notifications@finan.one"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "email-mailinator",
			"item": [
				{
					"name": "get_list_email",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsData = pm.response.json();",
									"",
									"for(let i in jsData.msgs){",
									"    ",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.mailinator.com/api/v2/domains/private/inboxes?token={{token}}",
							"protocol": "https",
							"host": [
								"api",
								"mailinator",
								"com"
							],
							"path": [
								"api",
								"v2",
								"domains",
								"private",
								"inboxes"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "sent_mail",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsData = pm.response.json();",
									"",
									"for(let i in jsData.msgs){",
									"    ",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"from\": \"someplace@xyz.com\",\n    \"subject\": \"testing\",\n    \"text\": \"helloworld\",\n    \"to\": \"jack\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://www.mailinator.com/api/v2/domains/{{token}}/webhook/bob/",
							"protocol": "https",
							"host": [
								"www",
								"mailinator",
								"com"
							],
							"path": [
								"api",
								"v2",
								"domains",
								"{{token}}",
								"webhook",
								"bob",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "get_list_email_for_an_account",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"inbox\",\"qagRbIAnmD\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.mailinator.com/api/v2/domains/private/inboxes/{{inbox}}?token={{token}}",
							"protocol": "https",
							"host": [
								"api",
								"mailinator",
								"com"
							],
							"path": [
								"api",
								"v2",
								"domains",
								"private",
								"inboxes",
								"{{inbox}}"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get_email_detail",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"msg_id\",\"qagrbianmd-1713262047-34026770902\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// var jsdom = require('jsdom');",
									"// global.document = jsdom();",
									"",
									"// function parseHTML(markup) {",
									"//   var doc = document.createElement('html');",
									"//   doc.innerHTML = markup;",
									"//   return doc;",
									"// }",
									"",
									"const jsData = pm.response.json();",
									"let message_body = jsData.parts[1].body;",
									"",
									"// var jsonObject = xml2Json(jsData.parts[1].body);",
									"// console.log(\"jsonObject: \",jsonObject);",
									"",
									"// console.log(\"html_content: \" + parseHTML(html_content).getElementsByTagName( 'title' )[0].innerHTML);",
									"let email_type = \"otp\"; // invoice",
									"switch(email_type){",
									"    case \"invoice\":",
									"        let invoice_obj;",
									"        try {",
									"            // Logger.log(message_body);",
									"            let new_mess = message_body.slice(message_body.search(\"Hóa đơn\"),message_body.length);",
									"            // Logger.log(new_mess);",
									"            let sent_at = new Date(jsData.headers.date);",
									"            // Hoá đơn",
									"            invoice_obj = {",
									"                \"invoice_number\":new_mess.substring(new_mess.search(\"Hóa đơn\") + 9,new_mess.search(\"\\r\\n\")),",
									"                \"due_date\":new_mess.substring(new_mess.search(\"Hạn thanh toán\") + 15,new_mess.search(\"Hạn thanh toán\") + 34),",
									"                \"due_amount\":parseInt(new_mess.substring(new_mess.search(\"Tổng còn phải trả là\") + 21,new_mess.search(\"đ và\"))),",
									"                \"sent_at\":sent_at.toISOString().substring(0,19)",
									"            };",
									"        } catch {",
									"            console.log(\"error\");",
									"        }",
									"        console.log(\"invoice_obj: \",invoice_obj);",
									"        break;",
									"    case \"otp\":",
									"        let otp_obj;",
									"        try {",
									"            let new_mess = message_body.slice(message_body.search(\"hoàn tất xác minh bằng mã sau:\"),message_body.search(\"hoàn tất xác minh bằng mã sau:\") + 1000).replace(/ /g, '');",
									"            let otp = new_mess.slice(new_mess.search(\"\\\">\\r\\n\") + 4,new_mess.search(\"\\\">\\r\\n\") + 10);",
									"            // Logger.log(JSON.stringify(otp));",
									"            // OTP",
									"            otp_obj = {",
									"                \"otp\":otp",
									"            };",
									"        } catch {",
									"            console.log(\"error\");",
									"        }",
									"        console.log(\"otp_obj: \",otp_obj);",
									"        break;",
									"    default:",
									"        console.log(\"missing flow\");",
									"        break;",
									"}",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://mailinator.com/api/v2/domains/{{domain}}/inboxes/{{inbox}}/messages/{{msg_id}}?token={{token}}",
							"protocol": "https",
							"host": [
								"mailinator",
								"com"
							],
							"path": [
								"api",
								"v2",
								"domains",
								"{{domain}}",
								"inboxes",
								"{{inbox}}",
								"messages",
								"{{msg_id}}"
							],
							"query": [
								{
									"key": "token",
									"value": "{{token}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"/**",
							" * url: https://www.mailinator.com/v4/private/inboxes.jsp?to=qctest01",
							" * account: chau.lth@finan.me / 1234qwer",
							" * token: 8c02880666d1491cb657f92c7022c3a1",
							" * domain: finanteam.testinator.com",
							" * inbox: qctest01 => có thể tạo thêm để support case sign new account",
							" */",
							"pm.environment.set(\"token\",\"4675ee5fca294748ab0b0d724701bb87\");",
							"pm.environment.set(\"domain\",\"finanteam.testinator.com\");"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "email template",
			"item": [
				{
					"name": "create_email_template",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"business_id\": 0,\n  \"email_content\": \"string\",\n  \"email_subject\": \"string\",\n  \"id\": \"string\",\n  \"is_default\": true,\n  \"template_name\": \"string\",\n  \"template_type\": \"string\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-business/api/v1/email-template/create",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-business",
								"api",
								"v1",
								"email-template",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_list_email_template",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{finone_url}}/fo-business/api/v1/email-template/get-list?business_id={{C-business_id}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-business",
								"api",
								"v1",
								"email-template",
								"get-list"
							],
							"query": [
								{
									"key": "business_id",
									"value": "{{C-business_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "delete_email_template",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{finone_url}}/fo-business/api/v1/email-template/delete/{{C-email_template_id}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-business",
								"api",
								"v1",
								"email-template",
								"delete",
								"{{C-email_template_id}}"
							],
							"query": [
								{
									"key": "business_id",
									"value": "{{C-business_id}}",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "edit_email_template",
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{finone_url}}/fo-business/api/v1/email-template/update/{{C-email_template_id}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-business",
								"api",
								"v1",
								"email-template",
								"update",
								"{{C-email_template_id}}"
							],
							"query": [
								{
									"key": "business_id",
									"value": "{{C-business_id}}",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "role & permission",
			"item": [
				{
					"name": "create_role",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-business/api/v1/role/create",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-business",
								"api",
								"v1",
								"role",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "edit_role",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-business/api/v1/role/edit/{{C-role_id}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-business",
								"api",
								"v1",
								"role",
								"edit",
								"{{C-role_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete_role",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-business/api/v1/role/delete/{{C-role_id}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-business",
								"api",
								"v1",
								"role",
								"delete",
								"{{C-role_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_list_role",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-business/api/v1/role/get-list?page=1&page_size=20&business_id={{C-business_id}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-business",
								"api",
								"v1",
								"role",
								"get-list"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "page_size",
									"value": "20"
								},
								{
									"key": "business_id",
									"value": "{{C-business_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get_list_permission",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-business/api/v1/permission/get-list-group",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-business",
								"api",
								"v1",
								"permission",
								"get-list-group"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "staff",
			"item": [
				{
					"name": "create_staff",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-business/api/v1/staff/create",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-business",
								"api",
								"v1",
								"staff",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "edit_staff",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-business/api/v1/staff/edit/{{C-staff_id}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-business",
								"api",
								"v1",
								"staff",
								"edit",
								"{{C-staff_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete_ staff",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-business/api/v1/staff/delete/{{C-staff_id}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-business",
								"api",
								"v1",
								"staff",
								"delete",
								"{{C-staff_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_list_staff",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-business/api/v1/staff/get-list",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-business",
								"api",
								"v1",
								"staff",
								"get-list"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "location tree",
			"item": [
				{
					"name": "get_location",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/**",
									" * loc_lvl: 1 = Thành Phố/Tỉnh, 2 = Quận/Huyện, 3 = Phường Xã",
									" * parent_short_id",
									" */",
									"",
									"let loc_lvl, parent_short_id;",
									"",
									"let case_ = pm.environment.get(\"C-case_\");",
									"if(!case_){",
									"    case_ = 1;",
									"    pm.environment.set(\"C-case_\",case_);",
									"}",
									"",
									"switch(case_){",
									"    case 1:",
									"        // get City",
									"        console.log(\"Lấy danh sách Tỉnh/Thành\");",
									"        loc_lvl = 1;",
									"        parent_short_id = \"\";",
									"        break;",
									"    case 2:",
									"        // get District in City at case 1",
									"        let city_obj = pm.environment.get(\"C-city_obj\");",
									"        console.log(\"Lấy danh sách Quận/Huyện tương ứng với Tỉnh/Thành: \" + city_obj.name);",
									"        loc_lvl = 2;",
									"        parent_short_id = city_obj.short_id;",
									"        break;",
									"    case 3:",
									"        // get ward",
									"        let district_obj = pm.environment.get(\"C-district_obj\");",
									"        console.log(\"Lấy danh sách Phường/Xã tương ứng với Quận/Huyện: \" + district_obj.name);",
									"        loc_lvl = 3;",
									"        parent_short_id = district_obj.short_id;",
									"        break;",
									"    default:",
									"        console.log(\"Missing flow\");",
									"        break;",
									"}",
									"",
									"pm.environment.set(\"C-loc_lvl\",loc_lvl);",
									"pm.environment.set(\"C-parent_short_id\",parent_short_id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ============================= random number between min and max",
									"function getRandomInt(min, max) {",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let case_ = pm.environment.get(\"C-case_\");",
									"",
									"    let city_obj;",
									"    switch(case_){",
									"        case 1:",
									"            console.log(\"Total city: \" + jsData.meta.total_rows);",
									"            city_obj = jsData.data[getRandomInt(0, jsData.meta.total_rows - 1)];",
									"            console.log(\"Random city: \", city_obj);",
									"            // fix city",
									"            // for(let i in jsData.data){",
									"            //     if(jsData.data[i].name.includes(\"Tiền Giang\")){",
									"            //         city_obj = jsData.data[i];",
									"            //         break;",
									"            //     }",
									"            // }",
									"            // console.log(\"Fix city: \", city_obj);",
									"            pm.environment.set(\"C-city_obj\",city_obj);",
									"",
									"            case_++;",
									"            pm.environment.set(\"C-case_\",case_);",
									"            postman.setNextRequest(\"get_location\");",
									"            break;",
									"        case 2:",
									"            city_obj = pm.environment.get(\"C-city_obj\");",
									"            console.log(\"Total district: \" + jsData.meta.total_rows + \" of city \" + city_obj.name);",
									"            district_obj = jsData.data[getRandomInt(0, jsData.meta.total_rows - 1)];",
									"            console.log(\"Random district: \", district_obj);",
									"            // fix district",
									"            // for(let i in jsData.data){",
									"            //     if(jsData.data[i].name.includes(\"Tân Phú\")){",
									"            //         district_obj = jsData.data[i];",
									"            //         break;",
									"            //     }",
									"            // }",
									"            console.log(\"Fix district: \", district_obj);",
									"            pm.environment.set(\"C-district_obj\",district_obj);",
									"",
									"            case_++;",
									"            pm.environment.set(\"C-case_\",case_);",
									"            postman.setNextRequest(\"get_location\");",
									"            break;",
									"        case 3:",
									"            // ward",
									"            district_obj = pm.environment.get(\"C-district_obj\");",
									"            console.log(\"Total ward: \" + jsData.meta.total_rows + \" of district \" + district_obj.name);",
									"            ward_obj = jsData.data[getRandomInt(0, jsData.meta.total_rows - 1)];",
									"            console.log(\"Random ward_obj: \", ward_obj);",
									"            pm.environment.set(\"C-ward_obj\",ward_obj);",
									"",
									"            pm.environment.unset(\"C-case_\");",
									"            postman.setNextRequest(\"\");",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);        ",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get location tree, end test\", jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "authorization",
								"value": "Bearer {{C-userToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-common/api/v1/vn-location/get-list?loc_lvl={{C-loc_lvl}}&parent_short_id={{C-parent_short_id}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-common",
								"api",
								"v1",
								"vn-location",
								"get-list"
							],
							"query": [
								{
									"key": "loc_lvl",
									"value": "{{C-loc_lvl}}"
								},
								{
									"key": "parent_short_id",
									"value": "{{C-parent_short_id}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "common",
			"item": [
				{
					"name": "get_list_system_code",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/message-codes?locale=vi",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"message-codes"
							],
							"query": [
								{
									"key": "locale",
									"value": "vi"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"const dev_env = {",
							"    \"base_url\": \"https://dev-cms.finan.one\",",
							"    \"token\":\"0b2b4b5aa42dd8c2ef3b66e53e1f2e2e194be4113ca2da7e687c9553f6948c45d7d406742c194dcb06ed37f58a3af6811c0d0b263e1be6803017a628e123d6ed6559decf0797ca3c396ae1a1601f821daffb72b023b05c8a3518e58d978f78dd277a31eba9a854863966c2a4b3c5d2b29786610005ea6855cbd110017f19a9cb\"",
							"}",
							"",
							"const stg_env = {",
							"    \"base_url\": \"https://stg-cms.finan.one\",",
							"    \"token\":\"1e1d8fed347a457dc48968ad8a5e0988e26d1a4ece902594e1d9051cde47b194f503692788a5b78f52c67953d6906b2b621df95d58b92593b02cdc02fa3a79f692df96edfab41702b9ace1b6e8786039fe51ec1b43f2e70de54bdb50b0cb3109b83ea3612ec8827d93e6b1e6083233e425a87f555de4c744052836bc43192f32\"",
							"}",
							"",
							"let is_dev = true;",
							"if(is_dev){",
							"    pm.environment.set(\"base_url\",dev_env.base_url);",
							"    pm.environment.set(\"token\",dev_env.token);",
							"} else {",
							"    pm.environment.set(\"base_url\",stg_env.base_url);",
							"    pm.environment.set(\"token\",stg_env.token);",
							"}"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "home-report",
			"item": [
				{
					"name": "get_report_cash_flow",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ============================= sort by key",
									"function sortByKey(array, key, type) {",
									"    if(type == \"asc\"){",
									"        return array.sort(function(a, b) {",
									"            var x = a[key]; var y = b[key];",
									"            return ((x > y) ? -1 : ((x < y) ? 1 : 0));",
									"        });",
									"    } else {",
									"        return array.sort(function(a, b) {",
									"            var x = a[key]; var y = b[key];",
									"            return ((x < y) ? -1 : ((x > y) ? 1 : 0));",
									"        });",
									"    }",
									"}",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let report_cash_flow = null;",
									"    try {",
									"        report_cash_flow = jsData.data;",
									"        /**",
									"         * db_data",
									"         * sum_card_data",
									"         * top_income_categories_data",
									"         * full_income_categories_data",
									"         * top_expense_categories_data",
									"         * full_expense_categories_data",
									"         */",
									"    } catch {",
									"        console.log(\"Can't get report cash_flow data\");",
									"    }",
									"",
									"    let total_income = 0, total_expense = 0;",
									"    let income_list = [], expense_list = [];",
									"    let exp_sum_card_data;",
									"    let full_income_categories_data;",
									"    if(\"full_income_categories_data\" in jsData.data){",
									"        full_income_categories_data = JSON.parse(JSON.stringify(jsData.data.full_income_categories_data));",
									"    } else {",
									"        full_income_categories_data = [];",
									"    }",
									"    let full_expense_categories_data;",
									"    if(\"full_expense_categories_data\" in jsData.data){",
									"        full_expense_categories_data = JSON.parse(JSON.stringify(jsData.data.full_expense_categories_data));",
									"    } else {",
									"        full_expense_categories_data = [];",
									"    }",
									"    switch(testcase){",
									"        case 2:",
									"            pm.environment.set(\"C-report_cash_flow\",report_cash_flow);",
									"            // console.log(\"report_cash_flow: \",report_cash_flow);",
									"",
									"            // ================================================ bonus check current data",
									"            // try {",
									"            //     for(let i in jsData.data.db_data){",
									"            //         if(jsData.data.db_data[i].coa_type == \"income\"){",
									"            //             income_list[income_list.length] = JSON.parse(JSON.stringify(jsData.data.db_data[i]));",
									"            //             total_income += jsData.data.db_data[i].current_income;",
									"            //         } else if (jsData.data.db_data[i].coa_type == \"expense\"){",
									"            //             expense_list[expense_list.length] = JSON.parse(JSON.stringify(jsData.data.db_data[i]));",
									"            //             total_expense += jsData.data.db_data[i].current_expense;",
									"            //         }",
									"            //     }",
									"            //     exp_sum_card_data = {",
									"            //         \"total_current_income\": total_income,",
									"            //         \"total_current_expense\": total_expense,",
									"            //         \"total_current_gap\": (total_income - total_expense)",
									"            //     }",
									"            //     console.log(\"exp_sum_card_data: \", exp_sum_card_data);",
									"",
									"            //     for(let i in income_list){",
									"            //         income_list[i].percentage = parseFloat((income_list[i].current_income/total_income*100).toFixed(2));",
									"            //         delete income_list[i]['coa_type'];",
									"            //         delete income_list[i]['current_income'];",
									"            //     }",
									"            //     console.log(\"income_list: \", sortByKey(income_list,\"percentage\",\"asc\"));",
									"",
									"            //     for(let i in expense_list){",
									"            //         expense_list[i].percentage = parseFloat((expense_list[i].current_expense/total_expense*100).toFixed(2));",
									"            //         delete expense_list[i]['coa_type'];",
									"            //         delete expense_list[i]['current_expense'];",
									"            //     }",
									"            //     console.log(\"expense_list: \", sortByKey(expense_list,\"percentage\",\"asc\"));",
									"",
									"            //     pm.test(\"sum_card_data correctly\", function () {",
									"            //         console.log(\"act data: \",JSON.stringify(jsData.data.sum_card_data));",
									"            //         console.log(\"exp data: \",JSON.stringify(exp_sum_card_data));",
									"            //         pm.expect(JSON.stringify(jsData.data.sum_card_data) == JSON.stringify(exp_sum_card_data)).to.be.true;",
									"            //     });",
									"",
									"            //     for(let i in full_income_categories_data){",
									"            //         delete full_income_categories_data[i]['current_amount'];",
									"            //     }",
									"            //     pm.test(\"full_income_categories_data correctly\", function () {",
									"            //         console.log(\"act data: \",JSON.stringify(full_income_categories_data));",
									"            //         console.log(\"exp data: \",JSON.stringify(income_list));",
									"            //         pm.expect(JSON.stringify(full_income_categories_data) == JSON.stringify(income_list)).to.be.true;",
									"            //     });",
									"",
									"            //     for(let i in full_expense_categories_data){",
									"            //         delete full_expense_categories_data[i]['current_amount'];",
									"            //     }",
									"            //     pm.test(\"full_expense_categories_data correctly\", function () {",
									"            //         console.log(\"act data: \",JSON.stringify(full_expense_categories_data));",
									"            //         console.log(\"exp data: \",JSON.stringify(expense_list));",
									"            //         pm.expect(JSON.stringify(full_expense_categories_data) == JSON.stringify(expense_list)).to.be.true;",
									"            //         // pm.expect(jsData.data.full_expense_categories_data).to.deep.include(expense_list);",
									"            //     });",
									"            // } catch {",
									"            //     console.log(\"Null data\");",
									"            // }",
									"            // ================================================ ",
									"",
									"            postman.setNextRequest(\"get_report_account_receivable_unpaid\"); // get_report_account_receivable_unpaid",
									"            break;",
									"        case 4: case 6:",
									"            let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"            let old_report_cash_flow = pm.environment.get(\"C-report_cash_flow\");",
									"",
									"            /**",
									"             * Đạt PO update 22Mar: đầu lấy COA ko phải từ income & expense nữa mà lấy từ cash & Bank",
									"             * => đợi PO update lại rule",
									"             */",
									"            // pm.test(\"Nothing happen!!!\", function () {",
									"            //     console.log(\"old: \" + JSON.stringify(old_report_cash_flow));",
									"            //     console.log(\"new: \" + JSON.stringify(report_cash_flow));",
									"            //     pm.expect(JSON.stringify(report_cash_flow) == JSON.stringify(old_report_cash_flow)).to.be.true;",
									"            // });",
									"",
									"            postman.setNextRequest(\"get_report_account_receivable_unpaid\"); // get_report_account_receivable_unpaid",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get report cash_flow, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"// lấy full tháng hiện tại",
									"let today = new Date();",
									"let start_current_month = new Date(today.getFullYear(), today.getMonth(), 1);",
									"let end_current_month = new Date(today.getFullYear(), today.getMonth() + 1, 1);",
									"",
									"// lấy full tháng trước",
									"let start_last_month = new Date(today.getFullYear(), today.getMonth() - 1, 1);",
									"let end_last_month = new Date(today.getFullYear(), today.getMonth(), 1);",
									"",
									"// lấy full ngày hiện tại",
									"// let firstDay = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0 ,0, 0);",
									"// let lastDay = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 23, 59 ,59, 0);",
									"",
									"// lấy n ngày đến hiện tại",
									"// let firstDayTimestamp = Math.floor(firstDay.getTime()/1000) - 2*24*60*60;",
									"// let start_day_ago = new Date(firstDayTimestamp*1000);",
									"",
									"let current_period_start = start_current_month.toISOString();",
									"let current_period_end = end_current_month.toISOString();",
									"let previous_period_start = start_last_month.toISOString();",
									"let previous_period_end = end_last_month.toISOString();",
									"",
									"/**",
									" * currently, display error if missing previous_period_start & previous_period_end or them = \"\";",
									" */",
									"let payload = {",
									"    \"branch_id\": pm.environment.get(\"C-branch_id\"),",
									"    \"business_id\": parseInt(pm.environment.get(\"C-business_id\")),",
									"    \"current_period_start\": current_period_start,",
									"    \"current_period_end\": current_period_end,",
									"    \"previous_period_start\": previous_period_start,",
									"    \"previous_period_end\": previous_period_end",
									"    // \"timezone\": \"Asia/Ho_Chi_Minh\" // UTC, Asia/Ho_Chi_Minh == UTC+07:00",
									"}",
									"",
									"console.log(\"payload: \",payload);",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));",
									"",
									"pm.environment.set(\"C-current_period_start\",current_period_start);",
									"pm.environment.set(\"C-current_period_end\",current_period_end);",
									"pm.environment.set(\"C-previous_period_start\",previous_period_start);",
									"pm.environment.set(\"C-previous_period_end\",previous_period_end);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-ledger/api/v1/report/cash-flow",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-ledger",
								"api",
								"v1",
								"report",
								"cash-flow"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_report_account_receivable_unpaid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ============================= get last day (Sun is end of Week)",
									"function getLastDayOfCurrentWeek() {",
									"    const now = new Date();",
									"    const lastDay = new Date(now);",
									"    const daysUntilSunday = 7 - now.getDay();  // if Saturday is end, change 7 => 6",
									"    lastDay.setDate(now.getDate() + daysUntilSunday);",
									"    return lastDay;",
									"}",
									"",
									"// ============================= get first day (Sun is end of Week)",
									"function getFirstDayOfCurrentWeek() {",
									"    const now = new Date();",
									"    const firstDay = new Date(now);",
									"    firstDay.setDate(now.getDate() - now.getDay() + 1);  // if Saturday is end, remove +1",
									"    return firstDay;",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let unpaid_account_receivable = null;",
									"    try {",
									"        unpaid_account_receivable = jsData.data[0].unpaid_amount_lifetime_categories;",
									"    } catch {",
									"        console.log(\"Can't get data\");",
									"    }",
									"",
									"    switch(testcase){",
									"        case 2:",
									"            pm.test(\"Got unpaid_account_receivable data\", function () {",
									"                pm.expect(unpaid_account_receivable != null).to.be.true;",
									"            });",
									"            pm.environment.set(\"C-unpaid_account_receivable\",unpaid_account_receivable);",
									"            // console.log(\"unpaid_account_receivable: \",unpaid_account_receivable);",
									"",
									"            postman.setNextRequest(\"get_report_account_receivable_customer\"); //get_report_account_receivable_customer",
									"            break;",
									"        case 4: case 6:",
									"            let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"            let invoice_obj = pm.environment.get(\"C-invoice_obj\");",
									"            let old_data = pm.environment.get(\"C-unpaid_account_receivable\");",
									"            let paid_amount = parseFloat(tnx_obj.amount);",
									"",
									"            // unpaid_total",
									"            pm.test(\"Total unpaid decrease \" + paid_amount, function () {",
									"                console.log(\"old: \" + old_data.unpaid_total);",
									"                console.log(\"new: \" + unpaid_account_receivable.unpaid_total);",
									"                pm.expect(unpaid_account_receivable.unpaid_total.toFixed(2) == (old_data.unpaid_total - paid_amount).toFixed(2)).to.be.true;",
									"            });",
									"",
									"            let due_date = new Date(invoice_obj.due_at);",
									"            let due_date_timestamp = Math.floor(due_date.getTime()/1000);",
									"            let today = new Date();",
									"            let today_timestamp = Math.floor(today.getTime()/1000);",
									"            let last_day_of_current_week = getLastDayOfCurrentWeek();",
									"            let last_day_of_current_week_stp = Math.floor(last_day_of_current_week.getTime()/1000);",
									"            let first_day_of_current_week = getFirstDayOfCurrentWeek();",
									"            let first_day_of_current_week_stp = Math.floor(first_day_of_current_week.getTime()/1000);",
									"            let due_type;",
									"            // console.log(\"debug: \" + (due_date_timestamp - today_timestamp));",
									"            if(due_date_timestamp > today_timestamp){",
									"                if(due_date_timestamp < last_day_of_current_week_stp){",
									"                    due_type = \"undue_n_7d\";",
									"                } else {",
									"                    due_type = \"undue\";",
									"                }",
									"            } else {",
									"                if(today_timestamp - due_date_timestamp > 90*24*60*60){",
									"                    due_type = \"overdue_over\";",
									"                } else if (today_timestamp - due_date_timestamp > 60*24*60*60){",
									"                    due_type = \"overdue_between\";",
									"                } else if (today_timestamp - due_date_timestamp > 30*24*60*60){",
									"                    due_type = \"overdue_less\";",
									"                } else {",
									"                    if(due_date_timestamp > first_day_of_current_week_stp){",
									"                        due_type = \"due_n_7d\";",
									"                    } else {",
									"                        due_type = \"due\";",
									"                    }",
									"                }",
									"            }",
									"            pm.environment.set(\"C-due_type\",due_type);",
									"",
									"            console.log(\"old: \",old_data);",
									"            console.log(\"new: \",unpaid_account_receivable);",
									"            switch(due_type){",
									"                case \"due\": case \"due_n_7d\":",
									"                    // unpaid_due",
									"                    pm.test(\"unpaid_due decrease \" + paid_amount, function () {",
									"                        console.log(\"old: \" + old_data.unpaid_due);",
									"                        console.log(\"expected: \" + (old_data.unpaid_due - paid_amount));",
									"                        console.log(\"new: \" + unpaid_account_receivable.unpaid_due);",
									"                        pm.expect(unpaid_account_receivable.unpaid_due.toFixed(2) == (old_data.unpaid_due - paid_amount).toFixed(2)).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_less",
									"                    pm.test(\"nothing happen unpaid_overdue_less\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_less == old_data.unpaid_overdue_less).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_between",
									"                    pm.test(\"nothing happen unpaid_overdue_between\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_between == old_data.unpaid_overdue_between).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_over",
									"                    pm.test(\"nothing happen unpaid_overdue_over\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_over == old_data.unpaid_overdue_over).to.be.true;",
									"                    });",
									"                    break;",
									"                case \"overdue_less\":",
									"                    // unpaid_due",
									"                    pm.test(\"nothing happen unpaid_due\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_due == old_data.unpaid_due).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_less",
									"                    pm.test(\"unpaid_overdue_less decrease \" + paid_amount, function () {",
									"                        console.log(\"old: \" + old_data.unpaid_overdue_less);",
									"                        console.log(\"new: \" + unpaid_account_receivable.unpaid_overdue_less);",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_less.toFixed(2) == (old_data.unpaid_overdue_less - paid_amount).toFixed(2)).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_between",
									"                    pm.test(\"nothing happen unpaid_overdue_between\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_between == old_data.unpaid_overdue_between).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_over",
									"                    pm.test(\"nothing happen unpaid_overdue_over\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_over == old_data.unpaid_overdue_over).to.be.true;",
									"                    });",
									"                    break;",
									"                case \"overdue_between\":",
									"                    // unpaid_due",
									"                    pm.test(\"nothing happen unpaid_due\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_due == old_data.unpaid_due).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_less",
									"                    pm.test(\"nothing happen unpaid_overdue_less\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_less == old_data.unpaid_overdue_less).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_between",
									"                    pm.test(\"unpaid_overdue_between decrease \" + paid_amount, function () {",
									"                        console.log(\"old: \" + old_data.unpaid_overdue_between);",
									"                        console.log(\"new: \" + unpaid_account_receivable.unpaid_overdue_between);",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_between.toFixed(2) == (old_data.unpaid_overdue_between - paid_amount).toFixed(2)).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_over",
									"                    pm.test(\"nothing happen unpaid_overdue_over\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_over == old_data.unpaid_overdue_over).to.be.true;",
									"                    });",
									"                    break;",
									"                case \"overdue_over\":",
									"                    // unpaid_due",
									"                    pm.test(\"nothing happen unpaid_due\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_due == old_data.unpaid_due).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_less",
									"                    pm.test(\"nothing happen unpaid_overdue_less\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_less == old_data.unpaid_overdue_less).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_between",
									"                    pm.test(\"unpaid_overdue_between decrease\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_between == old_data.unpaid_overdue_between).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_over",
									"                    pm.test(\"unpaid_overdue_over decrease \" + paid_amount, function () {",
									"                        console.log(\"old: \" + old_data.unpaid_overdue_over);",
									"                        console.log(\"new: \" + unpaid_account_receivable.unpaid_overdue_over);",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_over.toFixed(2) == (old_data.unpaid_overdue_over - paid_amount).toFixed(2)).to.be.true;",
									"                    });",
									"                    break;",
									"                default:",
									"                    // unpaid_due",
									"                    pm.test(\"nothing happen unpaid_due\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_due == old_data.unpaid_due).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_less",
									"                    pm.test(\"nothing happen unpaid_overdue_less\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_less == old_data.unpaid_overdue_less).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_between",
									"                    pm.test(\"nothing happen unpaid_overdue_between\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_between == old_data.unpaid_overdue_between).to.be.true;",
									"                    });",
									"",
									"                    // unpaid_overdue_over",
									"                    pm.test(\"nothing happen unpaid_overdue_over\", function () {",
									"                        pm.expect(unpaid_account_receivable.unpaid_overdue_over == old_data.unpaid_overdue_over).to.be.true;",
									"                    });",
									"                    break;",
									"            }",
									"",
									"            if(due_type == \"undue_n_7d\"){",
									"                // unpaid_overdue_more_than_today",
									"                pm.test(\"nothing happen unpaid_overdue_more_than_today\", function () {",
									"                    pm.expect(unpaid_account_receivable.unpaid_overdue_more_than_today == old_data.unpaid_overdue_more_than_today).to.be.true;",
									"                });",
									"",
									"                // unpaid_overdue_less_than_today",
									"                pm.test(\"unpaid_overdue_less_than_today decrease \" + paid_amount, function () {",
									"                    console.log(\"old: \" + old_data.unpaid_overdue_less_than_today);",
									"                    console.log(\"expected: \" + (old_data.unpaid_overdue_less_than_today - paid_amount));",
									"                    console.log(\"new: \" + unpaid_account_receivable.unpaid_overdue_less_than_today);",
									"                    pm.expect(unpaid_account_receivable.unpaid_overdue_less_than_today == old_data.unpaid_overdue_less_than_today - paid_amount).to.be.true;",
									"                });",
									"",
									"                // unpaid_overdue_in_week",
									"                pm.test(\"unpaid_overdue_in_week decrease \" + paid_amount, function () {",
									"                    console.log(\"old: \" + old_data.unpaid_overdue_in_week);",
									"                    console.log(\"expected: \" + (old_data.unpaid_overdue_in_week - paid_amount));",
									"                    console.log(\"new: \" + unpaid_account_receivable.unpaid_overdue_in_week);",
									"                    pm.expect(unpaid_account_receivable.unpaid_overdue_in_week == old_data.unpaid_overdue_in_week - paid_amount).to.be.true;",
									"                });",
									"            } else if(due_type == \"due_n_7d\"){",
									"                // unpaid_overdue_more_than_today",
									"                pm.test(\"unpaid_overdue_more_than_today decrease \" + paid_amount, function () {",
									"                    console.log(\"old: \" + old_data.unpaid_overdue_more_than_today);",
									"                    console.log(\"expected: \" + (old_data.unpaid_overdue_more_than_today - paid_amount));",
									"                    console.log(\"new: \" + unpaid_account_receivable.unpaid_overdue_more_than_today);",
									"                    pm.expect(unpaid_account_receivable.unpaid_overdue_more_than_today == old_data.unpaid_overdue_more_than_today - paid_amount).to.be.true;",
									"                });",
									"",
									"                // unpaid_overdue_less_than_today",
									"                pm.test(\"nothing happen unpaid_overdue_less_than_today\", function () {",
									"                    pm.expect(unpaid_account_receivable.unpaid_overdue_less_than_today == old_data.unpaid_overdue_less_than_today).to.be.true;",
									"                });",
									"",
									"                // unpaid_overdue_in_week",
									"                pm.test(\"unpaid_overdue_in_week increase \" + paid_amount, function () {",
									"                    console.log(\"old: \" + old_data.unpaid_overdue_in_week);",
									"                    console.log(\"expected: \" + (old_data.unpaid_overdue_in_week - paid_amount));",
									"                    console.log(\"new: \" + unpaid_account_receivable.unpaid_overdue_in_week);",
									"                    pm.expect(unpaid_account_receivable.unpaid_overdue_in_week == old_data.unpaid_overdue_in_week - paid_amount).to.be.true;",
									"                });",
									"            } else if (due_type == \"undue\"){",
									"                // unpaid_overdue_more_than_today",
									"                pm.test(\"nothing happen unpaid_overdue_more_than_today\", function () {",
									"                    pm.expect(unpaid_account_receivable.unpaid_overdue_more_than_today == old_data.unpaid_overdue_more_than_today).to.be.true;",
									"                });",
									"",
									"                // unpaid_overdue_less_than_today",
									"                pm.test(\"unpaid_overdue_less_than_today increase \" + paid_amount, function () {",
									"                    console.log(\"old: \" + old_data.unpaid_overdue_less_than_today);",
									"                    console.log(\"expected: \" + (old_data.unpaid_overdue_less_than_today - paid_amount));",
									"                    console.log(\"new: \" + unpaid_account_receivable.unpaid_overdue_less_than_today);",
									"                    pm.expect(unpaid_account_receivable.unpaid_overdue_less_than_today == old_data.unpaid_overdue_less_than_today - paid_amount).to.be.true;",
									"                });",
									"",
									"                // unpaid_overdue_in_week",
									"                pm.test(\"nothing happen unpaid_overdue_in_week\", function () {",
									"                    pm.expect(unpaid_account_receivable.unpaid_overdue_in_week == old_data.unpaid_overdue_in_week).to.be.true;",
									"                });",
									"            } else {",
									"                // unpaid_overdue_more_than_today",
									"                pm.test(\"unpaid_overdue_more_than_today increase \" + paid_amount, function () {",
									"                    console.log(\"old: \" + old_data.unpaid_overdue_more_than_today);",
									"                    console.log(\"expected: \" + (old_data.unpaid_overdue_more_than_today - paid_amount));",
									"                    console.log(\"new: \" + unpaid_account_receivable.unpaid_overdue_more_than_today);",
									"                    pm.expect(unpaid_account_receivable.unpaid_overdue_more_than_today == old_data.unpaid_overdue_more_than_today - paid_amount).to.be.true;",
									"                });",
									"",
									"                // unpaid_overdue_less_than_today",
									"                pm.test(\"nothing happen unpaid_overdue_less_than_today\", function () {",
									"                    pm.expect(unpaid_account_receivable.unpaid_overdue_less_than_today == old_data.unpaid_overdue_less_than_today).to.be.true;",
									"                });",
									"",
									"                // unpaid_overdue_in_week",
									"                pm.test(\"nothing happen unpaid_overdue_in_week\", function () {",
									"                    pm.expect(unpaid_account_receivable.unpaid_overdue_in_week == old_data.unpaid_overdue_in_week).to.be.true;",
									"                });",
									"            }",
									"",
									"            postman.setNextRequest(\"get_report_account_receivable_customer\"); // get_report_account_receivable_customer",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get report account receivable unpaid, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let payload = {",
									"    \"account_key\": \"account_receivable\",",
									"    \"branch_id\": pm.environment.get(\"C-branch_id\"),",
									"    \"business_id\": parseInt(pm.environment.get(\"C-business_id\"))",
									"    //   \"current_period_end\": \"string\",",
									"    //   \"current_period_start\": \"string\",",
									"    // \"page\": 1,",
									"    // \"page_size\": 20,",
									"    //   \"period\": \"string\",  // old due_days",
									"    //   \"previous_period_end\": \"string\",",
									"    //   \"previous_period_start\": \"string\",",
									"    //   \"report_type\": \"string\",",
									"    // \"timezone\": \"UTC+07:00\"",
									"}",
									"",
									"console.log(\"payload: \",payload);",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));",
									"pm.environment.set(\"C-report_obj\",payload);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/report/account-receivable-card-unpaid",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"report",
								"account-receivable-card-unpaid"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_report_account_receivable_customer",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"if(testcase != 2){",
									"    // timeout 2s to sync elastic search",
									"    setTimeout(function(){}, 2000);",
									"}",
									"",
									"let page = pm.environment.get(\"C-page\");",
									"",
									"if(!page){",
									"    page = 1;",
									"    pm.environment.set(\"C-page\",page);",
									"",
									"    let page_size = 20;",
									"    pm.environment.set(\"C-page_size\",page_size);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = JSON.parse(responseBody);",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let total_pages = jsData.meta.total_pages;",
									"    let page = pm.environment.get(\"C-page\");",
									"",
									"    let list_report_customer, old_list_report_customer;",
									"    switch(testcase){",
									"        case 2:",
									"            list_report_customer = pm.environment.get(\"C-list_report_customer\");",
									"            if(!list_report_customer){",
									"                list_report_customer = [];",
									"            }",
									"            break;",
									"        case 4: case 6:",
									"            old_list_report_customer = pm.environment.get(\"C-old_list_report_customer\");",
									"            if(!old_list_report_customer){",
									"                old_list_report_customer = pm.environment.get(\"C-list_report_customer\");",
									"                pm.environment.unset(\"C-list_report_customer\");",
									"                pm.environment.set(\"C-old_list_report_customer\",old_list_report_customer);",
									"            }",
									"",
									"            list_report_customer = pm.environment.get(\"C-list_report_customer\");",
									"            if(!list_report_customer){",
									"                list_report_customer = [];",
									"            }",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow\");",
									"            break;",
									"    }",
									"",
									"    for(let item in jsData.data){",
									"        list_report_customer[list_report_customer.length] = {",
									"            \"contact_id\":jsData.data[item].contact_id,",
									"            \"unpaid_total\":jsData.data[item].unpaid_total,",
									"            \"unpaid_due\":jsData.data[item].unpaid_due,",
									"            \"unpaid_overdue_less\":jsData.data[item].unpaid_overdue_less,",
									"            \"unpaid_overdue_between\":jsData.data[item].unpaid_overdue_between,",
									"            \"unpaid_overdue_over\":jsData.data[item].unpaid_overdue_over,",
									"            \"full_count\":jsData.data[item].full_count,",
									"            \"contact_name\":jsData.data[item].contact_info.contact_name,",
									"            \"contact_phone\":jsData.data[item].contact_info.contact_phone",
									"        }",
									"    }",
									"    pm.environment.set(\"C-list_report_customer\",list_report_customer);",
									"",
									"    if(page >= total_pages){",
									"        // must clear page & page_size",
									"        pm.environment.unset(\"C-page\");",
									"        pm.environment.unset(\"C-page_size\");",
									"",
									"        let invoice_obj = pm.environment.get(\"C-invoice_obj\");",
									"        let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"        let isFound = false, hasRecord = false;",
									"        switch(testcase){",
									"            case 2:",
									"                pm.test(\"Got all record! \" + list_report_customer.length, function () {",
									"                    pm.expect(list_report_customer.length > 0).to.be.true;",
									"                });",
									"",
									"                // console.log(\"list_report_customer: \",list_report_customer);",
									"",
									"                postman.setNextRequest(\"report_account_lifetime\"); // report_account_lifetime",
									"                break;",
									"            case 4: case 6:",
									"                let record_obj = null;",
									"                console.log(\"contact_id: \" + invoice_obj.contact_id);",
									"                for(let i in old_list_report_customer){",
									"                    if(old_list_report_customer[i].contact_id == invoice_obj.contact_id){",
									"                        record_obj = old_list_report_customer[i];",
									"                        break;",
									"                    }",
									"                }",
									"                // console.log(\"old_list_report_customer: \", old_list_report_customer);",
									"",
									"                pm.test(\"Nothing happen with total record\", function () {",
									"                    pm.expect(list_report_customer.length == old_list_report_customer.length).to.be.true;",
									"                });",
									"",
									"                let due_type = pm.environment.get(\"C-due_type\");",
									"                for(let i in list_report_customer){",
									"                    if(list_report_customer[i].contact_id == invoice_obj.contact_id){",
									"                        isFound = true;",
									"                        console.log(\"Found \" + list_report_customer[i].contact_name + ' - ' + list_report_customer[i].contact_phone);",
									"                        ",
									"                        pm.test(\"unpaid_total decrease \" + tnx_obj.amount, function () {",
									"                            console.log(\"exp: \" + (record_obj.unpaid_total - tnx_obj.amount));",
									"                            console.log(\"new: \" + list_report_customer[i].unpaid_total);",
									"                            pm.expect(list_report_customer[i].unpaid_total == record_obj.unpaid_total - tnx_obj.amount).to.be.true;",
									"                        });",
									"",
									"                        switch(due_type){",
									"                            case \"due\": case \"due_n_7d\":",
									"                                // unpaid_due",
									"                                pm.test(\"unpaid_due decrease \" + tnx_obj.amount, function () {",
									"                                    console.log(\"old: \" + record_obj.unpaid_due);",
									"                                    console.log(\"new: \" + list_report_customer[i].unpaid_due);",
									"                                    pm.expect(list_report_customer[i].unpaid_due == record_obj.unpaid_due - tnx_obj.amount).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_less",
									"                                pm.test(\"nothing happen unpaid_overdue_less\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_less == record_obj.unpaid_overdue_less).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_between",
									"                                pm.test(\"nothing happen unpaid_overdue_between\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_between == record_obj.unpaid_overdue_between).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_over",
									"                                pm.test(\"nothing happen unpaid_overdue_over\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_over == record_obj.unpaid_overdue_over).to.be.true;",
									"                                });",
									"                                break;",
									"                            case \"overdue_less\":",
									"                                // unpaid_due",
									"                                pm.test(\"nothing happen unpaid_due\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_due == record_obj.unpaid_due).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_less",
									"                                pm.test(\"unpaid_overdue_less decrease \" + tnx_obj.amount, function () {",
									"                                    console.log(\"old: \" + record_obj.unpaid_overdue_less);",
									"                                    console.log(\"new: \" + list_report_customer[i].unpaid_overdue_less);",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_less == (record_obj.unpaid_overdue_less - tnx_obj.amount).toFixed(2)).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_between",
									"                                pm.test(\"nothing happen unpaid_overdue_between\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_between == record_obj.unpaid_overdue_between).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_over",
									"                                pm.test(\"nothing happen unpaid_overdue_over\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_over == record_obj.unpaid_overdue_over).to.be.true;",
									"                                });",
									"                                break;",
									"                            case \"overdue_between\":",
									"                                // unpaid_due",
									"                                pm.test(\"nothing happen unpaid_due\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_due == record_obj.unpaid_due).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_less",
									"                                pm.test(\"nothing happen unpaid_overdue_less\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_less == record_obj.unpaid_overdue_less).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_between",
									"                                pm.test(\"unpaid_overdue_between decrease \" + tnx_obj.amount, function () {",
									"                                    console.log(\"old: \" + record_obj.unpaid_overdue_between);",
									"                                    console.log(\"new: \" + list_report_customer[i].unpaid_overdue_between);",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_between == (record_obj.unpaid_overdue_between - tnx_obj.amount).toFixed(2)).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_over",
									"                                pm.test(\"nothing happen unpaid_overdue_over\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_over == record_obj.unpaid_overdue_over).to.be.true;",
									"                                });",
									"                                break;",
									"                            case \"overdue_over\":",
									"                                // unpaid_due",
									"                                pm.test(\"nothing happen unpaid_due\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_due == record_obj.unpaid_due).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_less",
									"                                pm.test(\"nothing happen unpaid_overdue_less\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_less == record_obj.unpaid_overdue_less).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_between",
									"                                pm.test(\"nothing happen unpaid_overdue_between\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_between == record_obj.unpaid_overdue_between).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_over",
									"                                pm.test(\"unpaid_overdue_over decrease \" + tnx_obj.amount, function () {",
									"                                    console.log(\"old: \" + record_obj.unpaid_overdue_over);",
									"                                    console.log(\"new: \" + list_report_customer[i].unpaid_overdue_over);",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_over == (record_obj.unpaid_overdue_over - tnx_obj.amount).toFixed(2)).to.be.true;",
									"                                });",
									"                                break;",
									"                            default:",
									"                                // unpaid_due",
									"                                pm.test(\"nothing happen unpaid_due\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_due == record_obj.unpaid_due).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_less",
									"                                pm.test(\"nothing happen unpaid_overdue_less\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_less == record_obj.unpaid_overdue_less).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_between",
									"                                pm.test(\"nothing happen unpaid_overdue_between\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_between == record_obj.unpaid_overdue_between).to.be.true;",
									"                                });",
									"",
									"                                // unpaid_overdue_over",
									"                                pm.test(\"nothing happen unpaid_overdue_over\", function () {",
									"                                    pm.expect(list_report_customer[i].unpaid_overdue_over == record_obj.unpaid_overdue_over).to.be.true;",
									"                                });",
									"                                break;",
									"                        }",
									"                        break;",
									"                    }",
									"                }",
									"",
									"                pm.test(\"Found new customer\", function () {",
									"                    pm.expect(isFound).to.be.true;",
									"                });",
									"",
									"                postman.setNextRequest(\"report_account_lifetime\"); // report_account_lifetime",
									"                break;",
									"            default:",
									"                console.log(\"Missing flow, end test\");",
									"                postman.setNextRequest(null);",
									"                break;",
									"        }",
									"    } else {",
									"        page++;",
									"        pm.environment.set(\"C-page\",page);",
									"",
									"        console.log(\"view next page (\" + page + \") to get more product\");",
									"        postman.setNextRequest(\"get_report_account_receivable_customer\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get list product, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"account_key\": \"account_receivable\",\n    \"branch_id\": \"{{C-branch_id}}\",\n    \"business_id\": {{C-business_id}},\n    \"page\": {{C-page}},\n    \"page_size\": {{C-page_size}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/report/account-receivable-customer-unpaid",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"report",
								"account-receivable-customer-unpaid"
							]
						}
					},
					"response": []
				},
				{
					"name": "report_account_lifetime",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ====================================== parser cURL",
									"function parseCURL(request_api){",
									"    let curl = \"\";",
									"    switch(request_api.method){",
									"        case \"PUT\":",
									"            curl = \"curl --location --request PUT \";",
									"            break;",
									"        case \"PATCH\":",
									"            curl = \"curl --location --request PATCH \";",
									"            break;",
									"        case \"DELETE\":",
									"            curl = \"curl --location --request DELETE \";",
									"            break;",
									"        default:",
									"            curl = \"curl --location \";",
									"            break;",
									"    }",
									"    curl += \"'\" + request_api.url.protocol + \"://\"",
									"    // host",
									"    for(let i in request_api.url.host){",
									"        if(i >= request_api.url.host.length - 1){",
									"            curl += request_api.url.host[i] + \"/\";",
									"        } else {",
									"            curl += request_api.url.host[i] + \".\";",
									"        }",
									"    }",
									"    // path",
									"    for(let i in request_api.url.path){",
									"        if(i >= request_api.url.path.length - 1){",
									"            curl += request_api.url.path[i];",
									"        } else {",
									"            curl += request_api.url.path[i] + \"/\";",
									"        }",
									"    }",
									"    // query (if have)",
									"    if(\"query\" in request_api.url){",
									"        if(request_api.url.length > 0){",
									"            curl += \"? \";",
									"            for(let i in request_api.url.query){",
									"                if(i >= request_api.url.query.length - 1){",
									"                    curl += request_api.url.query[i].key + \"=\" + request_api.url.query[i].value + \"' \";",
									"                } else {",
									"                    curl += request_api.url.query[i].key + \"=\" + request_api.url.query[i].value + \"&\";",
									"                }",
									"            }",
									"        } else {",
									"            curl += \"' \";",
									"        }",
									"    } else {",
									"        curl += \"' \";",
									"    }",
									"    // header",
									"    for(let i in request_api.header){",
									"        if(i >= request_api.header.length - 1){",
									"            curl += \"--header '\" + request_api.header[i].key + \": \" + request_api.header[i].value + \"'\";",
									"        } else {",
									"            curl += \"--header '\" + request_api.header[i].key + \": \" + request_api.header[i].value + \"' \";",
									"        }",
									"    }",
									"    switch(request_api.method){",
									"        case \"POST\":",
									"            curl += \" --data '\" + request_api.body.raw + \"'\"",
									"            break;",
									"        case \"PUT\": case \"PATCH\":",
									"            curl += \" --data-raw '\" + request_api.body.raw + \"'\"",
									"            break;",
									"        default:",
									"            break;",
									"    }",
									"    console.log(curl);",
									"    return curl;",
									"}",
									"const request_api = pm.request.toJSON();",
									"parseCURL(request_api);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let account_lifetime = null;",
									"    try {",
									"        account_lifetime = jsData.data[0];",
									"    } catch {",
									"        console.log(\"Can't get data\");",
									"    }",
									"",
									"    let old_account_lifetime = pm.environment.get(\"C-account_lifetime\");",
									"    switch(testcase){",
									"        case 2:",
									"            pm.test(\"Got account_lifetime \" + account_lifetime.sum_balance, function () {",
									"                pm.environment.set(\"C-account_lifetime\",account_lifetime);",
									"                pm.expect(account_lifetime != null).to.be.true;",
									"            });",
									"",
									"            // check data",
									"            let total_balance = 0;",
									"            for(let i in jsData.data[0].data){",
									"                total_balance += jsData.data[0].data[i].balance;",
									"            }",
									"            pm.test(\"Data correctly \" + total_balance, function () {",
									"                pm.expect(total_balance.toFixed(2) == jsData.data[0].sum_balance).to.be.true;",
									"            });",
									"",
									"            postman.setNextRequest(\"report_cash_flow_period\"); // report_cash_flow_period, get_list_transaction",
									"            break;",
									"        case 4: case 6:",
									"            /**",
									"             * - nếu tnx_obj.account_id (in - credit) tnx_obj.account_id (out - debit) trong list tăng lên => tăng tương ứng",
									"             * - ngược lại, name (remaining_accounts) sẽ tăng tương ứng",
									"            */",
									"            let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"            // sum_balance",
									"            console.log(\"old: \" + old_account_lifetime.sum_balance);",
									"            console.log(\"exp: \" + (old_account_lifetime.sum_balance + tnx_obj.amount));",
									"            console.log(\"act: \" + account_lifetime.sum_balance);",
									"            if(tnx_obj.tnx_type == \"in\"){",
									"                // case tăng debit => tăng sum_balance",
									"                pm.test(\"sum_balance increase \" + tnx_obj.amount, function () {",
									"                    pm.expect(account_lifetime.sum_balance == old_account_lifetime.sum_balance + tnx_obj.amount).to.be.true;",
									"                });",
									"            } else {",
									"                // case tăng credit => giảm sum_balance",
									"                pm.test(\"sum_balance decrease \" + tnx_obj.amount, function () {",
									"                    pm.expect(account_lifetime.sum_balance == old_account_lifetime.sum_balance - tnx_obj.amount).to.be.true;",
									"                });",
									"            }",
									"",
									"            // data cũ",
									"            let account_obj = null;",
									"            for(let i = 0; i < old_account_lifetime.data.length; i++){",
									"                if(old_account_lifetime.data[i].id == tnx_obj.account_id){",
									"                    account_obj = old_account_lifetime.data[i];",
									"                    break;",
									"                }",
									"",
									"                if(i == old_account_lifetime.data.length - 1){",
									"                    // remaining_accounts",
									"                    account_obj = old_account_lifetime.data[i];",
									"                    break;",
									"                }",
									"            }",
									"",
									"            // data mới",
									"            let isFound = false;",
									"            for(let i in account_lifetime.data){",
									"                if(account_lifetime.data[i].id == account_obj.id){",
									"                    isFound = true;",
									"                    console.log(\"old: \" + account_obj.balance);",
									"                    console.log(\"act: \" + account_lifetime.data[i].balance);",
									"                    if(tnx_obj.tnx_type == \"in\"){",
									"                        // case tăng debit => balance = debit - credit",
									"                        pm.test(\"balance of \" + account_lifetime.data[i].account_name + \" increase \" + tnx_obj.amount, function () {",
									"                            pm.expect(account_lifetime.data[i].balance == account_obj.balance + tnx_obj.amount).to.be.true;",
									"                        });",
									"                    } else {",
									"                        // case tăng credit",
									"                        pm.test(\"balance of \" + account_lifetime.data[i].account_name + \" decrease \" + tnx_obj.amount, function () {",
									"                            pm.expect(account_lifetime.data[i].balance == account_obj.balance - tnx_obj.amount).to.be.true;",
									"                        });",
									"                    }",
									"                    break;",
									"                }",
									"            }",
									"",
									"            pm.test(\"Found exchange account\", function () {",
									"                pm.expect(isFound).to.be.true;",
									"            });",
									"            ",
									"            postman.setNextRequest(\"report_cash_flow_period\"); // report_cash_flow_period",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get report account receivable unpaid, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/**",
									" * case handle:",
									" * - Nếu account tăng balance ko nằm trong top 5:",
									" *   + TH1: balance tăng làm cho account nhảy vào top 5 => phải show account trong top 5",
									" *   + TH2: balance tăng ko làm cho account nhảy vào top 5 => chỉ thay đổi số của remaining_accounts",
									" * Note: tạo invoice sẽ ko ảnh hưởng, chỉ ảnh hưởng bởi tnx",
									" */",
									"",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"if(testcase == 4){",
									"    // setTimeout(function(){}, 5000); // timeout 5s khi chưa có đủ 5 records",
									"}",
									"",
									"let payload = {",
									"    \"branch_id\": pm.environment.get(\"C-branch_id\"),",
									"    \"business_id\": parseInt(pm.environment.get(\"C-business_id\"))",
									"}",
									"",
									"console.log(\"payload: \",payload);",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-location-timezone",
								"value": "UTC+07:00",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-ledger/api/v1/report/account-lifetime",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-ledger",
								"api",
								"v1",
								"report",
								"account-lifetime"
							]
						}
					},
					"response": []
				},
				{
					"name": "report_cash_flow_period",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/**",
									" * period: year, month, week",
									" */",
									"",
									"let period = \"month\";",
									"pm.environment.set(\"C-period\",period);",
									"",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"console.log(\"period: \" + period);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let cash_flow_period = null;",
									"    try {",
									"        cash_flow_period = jsData.data[0];",
									"        /**",
									"         * period: week, month, year",
									"         * sum_card_data",
									"         * dates_data",
									"         */",
									"    } catch {",
									"        console.log(\"Can't get report cash_flow data\");",
									"    }",
									"",
									"    switch(testcase){",
									"        case 2:",
									"            pm.test(\"Got cash_flow_period \", function () {",
									"                pm.expect(cash_flow_period != null).to.be.true;",
									"            });",
									"            pm.environment.set(\"C-cash_flow_period\",cash_flow_period);",
									"            console.log(\"cash_flow_period: \", cash_flow_period);",
									"",
									"            // ================================================ bonus check current data",
									"            // waiting logic updated at phase 2",
									"            // ================================================ ",
									"",
									"            postman.setNextRequest(\"report_profit_loss_period\"); // report_profit_loss_period, get_list_transaction",
									"            break;",
									"        case 4: case 6:",
									"            let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"            let old_cash_flow_period = pm.environment.get(\"C-cash_flow_period\");",
									"            // console.log(\"old_cash_flow_period:\",old_cash_flow_period);",
									"            // console.log(\"===================\");",
									"            // console.log(\"cash_flow_period:\",cash_flow_period);",
									"",
									"            // tăng income",
									"            pm.test(\"total_income increase \" + tnx_obj.amount, function () {",
									"                console.log(\"old: \" + old_cash_flow_period.sum_card_data.total_income);",
									"                console.log(\"new: \" + cash_flow_period.sum_card_data.total_income);",
									"                pm.expect(cash_flow_period.sum_card_data.total_income == old_cash_flow_period.sum_card_data.total_income + tnx_obj.amount).to.be.true;",
									"            });",
									"",
									"            pm.test(\"nothing happen with total_expense\", function () {",
									"                console.log(\"old: \" + old_cash_flow_period.sum_card_data.total_expense);",
									"                console.log(\"new: \" + cash_flow_period.sum_card_data.total_expense);",
									"                pm.expect(cash_flow_period.sum_card_data.total_expense == old_cash_flow_period.sum_card_data.total_expense).to.be.true;",
									"            });",
									"",
									"            pm.test(\"total_gap increase \" + tnx_obj.amount, function () {",
									"                console.log(\"old: \" + old_cash_flow_period.sum_card_data.total_gap);",
									"                console.log(\"new: \" + cash_flow_period.sum_card_data.total_gap);",
									"                pm.expect(cash_flow_period.sum_card_data.total_gap == old_cash_flow_period.sum_card_data.total_gap + tnx_obj.amount).to.be.true;",
									"            });",
									"",
									"            // thay đổi ngày tương ứng",
									"            let tnx_date = tnx_obj.value_at.substring(0,10);",
									"            let old_date = null, act_date = null;",
									"            for(let i in cash_flow_period.dates_data){",
									"                let day_i = cash_flow_period.dates_data[i].date.substring(0,10);",
									"                if(day_i == tnx_date){",
									"                    act_date = cash_flow_period.dates_data[i];",
									"                    break;",
									"                }",
									"            }",
									"",
									"            for(let i in old_cash_flow_period.dates_data){",
									"                let day_i = old_cash_flow_period.dates_data[i].date.substring(0,10);",
									"                if(day_i == tnx_date){",
									"                    old_date = old_cash_flow_period.dates_data[i];",
									"                    break;",
									"                }",
									"            }",
									"",
									"            if(old_date != null && act_date != null){",
									"                console.log(\"act_date: \",act_date);",
									"                console.log(\"old_date: \",old_date);",
									"                pm.test(\"income at \" + tnx_date + \" increase \" + tnx_obj.amount, function () {",
									"                    pm.expect(act_date.income == old_date.income + tnx_obj.amount).to.be.true;",
									"                });",
									"",
									"                pm.test(\"gap at \" + tnx_date + \" increase \" + tnx_obj.amount, function () {",
									"                    pm.expect(act_date.gap == old_date.gap + tnx_obj.amount).to.be.true;",
									"                });",
									"            }",
									"",
									"            postman.setNextRequest(\"report_profit_loss_period\"); // report_profit_loss_period",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get report cash_flow, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-location-timezone",
								"value": "UTC+07:00"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"branch_id\": \"{{C-branch_id}}\",\n    \"business_id\": {{C-business_id}},\n    \"period\": \"{{C-period}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-ledger/api/v1/report/cash-flow-period",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-ledger",
								"api",
								"v1",
								"report",
								"cash-flow-period"
							]
						}
					},
					"response": []
				},
				{
					"name": "report_profit_loss_period",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/**",
									" * \"report_type\": sum,income,expense",
									" * Note: report_type = sum => hiện tại bị null dates_data",
									" * - C1: call từng loại income, expense dể lấy dates_data",
									" * - C2: wait fixing from dev",
									" * => tạm thời xử lý case sum, 2 case còn lại sẽ handle sau",
									" */",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let full_check = pm.environment.get(\"C-full_check\");",
									"if(!full_check){",
									"    full_check = 1;",
									"    pm.environment.set(\"C-full_check\",full_check);",
									"    report_type = \"income\";",
									"} else {",
									"    report_type = \"expense\";",
									"}",
									"pm.environment.set(\"C-report_type\",report_type);",
									"console.log(\"full_check: \" + full_check);",
									"console.log(\"report_type: \" + report_type);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let full_check = pm.environment.get(\"C-full_check\");",
									"    let profit_period = null, loss_period = null;",
									"    try {",
									"        if(full_check == 1){",
									"            profit_period = jsData.data[0];",
									"        } else {",
									"            loss_period = jsData.data[0];",
									"        }",
									"        /**",
									"         * period: week, month, year",
									"         * sum_card_data",
									"         * dates_data",
									"         */",
									"    } catch {",
									"        console.log(\"Can't get report cash_flow data\");",
									"    }",
									"",
									"    switch(testcase){",
									"        case 2:",
									"            if(full_check == 1){",
									"                pm.test(\"Got profit_period \", function () {",
									"                    pm.environment.set(\"C-profit_period\",profit_period);",
									"                    pm.expect(profit_period != null).to.be.true;",
									"                });",
									"                pm.environment.set(\"C-profit_period\",profit_period);",
									"                // console.log(\"profit_period: \", profit_period);",
									"",
									"                full_check++;",
									"                pm.environment.set(\"C-full_check\",full_check);",
									"                postman.setNextRequest(\"report_profit_loss_period\");",
									"            } else {",
									"                pm.test(\"Got loss_period \", function () {",
									"                    pm.environment.set(\"C-loss_period\",loss_period);",
									"                    pm.expect(loss_period != null).to.be.true;",
									"                });",
									"                pm.environment.set(\"C-loss_period\",loss_period);",
									"                // console.log(\"loss_period: \", loss_period);",
									"",
									"                pm.environment.unset(\"C-full_check\");",
									"                postman.setNextRequest(\"report_chart_balance_change\"); // report_chart_balance_change",
									"            }",
									"            break;",
									"        case 4: case 6:",
									"            let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"            let tnx_date = tnx_obj.value_at.substring(0,10);",
									"            ",
									"            if(full_check == 1){",
									"                let old_profit_period = pm.environment.get(\"C-profit_period\");",
									"                // KHÔNG THAY ĐỔI INCOME KHI TẠO TRANSACTION CHO INVOICE, VÌ KHI TẠO INVOICE ĐÃ GHI RỒI",
									"                // nothing happen",
									"                pm.test(\"Nothing happen!!!\", function () {",
									"                    pm.expect(JSON.stringify(profit_period) == JSON.stringify(old_profit_period)).to.be.true;",
									"                });",
									"",
									"                // // có thay đổi => total_income increase",
									"                // pm.test(\"total_income increase \" + tnx_obj.amount, function () {",
									"                //     pm.expect(profit_period.sum_card_data.total_income == old_profit_period.sum_card_data.total_income + tnx_obj.amount).to.be.true;",
									"                // });",
									"                // // thay đổi ngày tương ứng",
									"                // let old_date = null, act_date = null;",
									"                // for(let i in profit_period.dates_data){",
									"                //     let day_i = profit_period.dates_data[i].date.substring(0,10);",
									"                //     if(day_i == tnx_date){",
									"                //         act_date = profit_period.dates_data[i];",
									"                //         break;",
									"                //     }",
									"                // }",
									"",
									"                // for(let i in old_profit_period.dates_data){",
									"                //     let day_i = old_profit_period.dates_data[i].date.substring(0,10);",
									"                //     if(day_i == tnx_date){",
									"                //         old_date = old_profit_period.dates_data[i];",
									"                //         break;",
									"                //     }",
									"                // }",
									"",
									"                // if(old_date != null && act_date != null){",
									"                //     console.log(\"act_date: \",act_date);",
									"                //     console.log(\"old_date: \",old_date);",
									"                //     pm.test(\"income at \" + tnx_date + \" increase \" + tnx_obj.amount, function () {",
									"                //         pm.expect(act_date.income == old_date.income + tnx_obj.amount).to.be.true;",
									"                //     });",
									"                // }",
									"",
									"                full_check++;",
									"                pm.environment.set(\"C-full_check\",full_check);",
									"                postman.setNextRequest(\"report_profit_loss_period\");",
									"            } else {",
									"                let old_loss_period = pm.environment.get(\"C-loss_period\");",
									"                // console.log(\"debug old_loss_period: \", old_loss_period);",
									"                // console.log(\"debug loss_period: \", loss_period);",
									"                if(tnx_obj.tnx_type == \"out\"){",
									"                    // có thay đổi => total_expense increase",
									"                    pm.test(\"total_expense increase \" + tnx_obj.amount, function () {",
									"                        pm.expect(loss_period.sum_card_data.total_expense == old_loss_period.sum_card_data.total_expense + tnx_obj.amount).to.be.true;",
									"                    });",
									"                    // thay đổi ngày tương ứng",
									"                    let old_date = null, act_date = null;",
									"                    for(let i in loss_period.dates_data){",
									"                        let day_i = loss_period.dates_data[i].date.substring(0,10);",
									"                        if(day_i == tnx_date){",
									"                            act_date = loss_period.dates_data[i];",
									"                            break;",
									"                        }",
									"                    }",
									"",
									"                    for(let i in old_loss_period.dates_data){",
									"                        let day_i = old_loss_period.dates_data[i].date.substring(0,10);",
									"                        if(day_i == tnx_date){",
									"                            old_date = old_loss_period.dates_data[i];",
									"                            break;",
									"                        }",
									"                    }",
									"",
									"                    if(old_date != null && act_date != null){",
									"                        console.log(\"act_date: \",act_date);",
									"                        console.log(\"old_date: \",old_date);",
									"                        pm.test(\"expense at \" + tnx_date + \" increase \" + tnx_obj.amount, function () {",
									"                            pm.expect(act_date.expense == old_date.expense + tnx_obj.amount).to.be.true;",
									"                        });",
									"                    }",
									"                } else {",
									"                    // nothing happen",
									"                    pm.test(\"Nothing happen!!!\", function () {",
									"                        pm.expect(JSON.stringify(loss_period) == JSON.stringify(old_loss_period)).to.be.true;",
									"                    });",
									"                }",
									"",
									"                pm.environment.unset(\"C-full_check\");",
									"                postman.setNextRequest(\"report_chart_balance_change\"); // report_chart_balance_change",
									"            }",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get report cash_flow, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-location-timezone",
								"value": "UTC+07:00"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"branch_id\": \"{{C-branch_id}}\",\n    \"business_id\": {{C-business_id}},\n    \"period\": \"{{C-period}}\",\n    \"report_type\": \"{{C-report_type}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-ledger/api/v1/report/profit-loss-period",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-ledger",
								"api",
								"v1",
								"report",
								"profit-loss-period"
							]
						}
					},
					"response": []
				},
				{
					"name": "report_chart_balance_change",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/**",
									" * \"report_type\": sum,income,expense",
									" * Note: report_type = sum => hiện tại bị null dates_data",
									" * - C1: call từng loại income, expense dể lấy dates_data",
									" * - C2: wait fixing from dev",
									" * => tạm thời xử lý case sum, 2 case còn lại sẽ handle sau",
									" * period thêm 1 số filter: quarter, l7d, l30d, l90d",
									" */",
									"let report_type = \"sum\";",
									"pm.environment.set(\"C-report_type\",report_type);",
									"",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"console.log(\"report_type: \" + report_type);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let chart_balance_change = null;",
									"    try {",
									"        chart_balance_change = jsData.data[0];",
									"        /**",
									"         * period: week, month, year",
									"         * sum_card_data",
									"         * dates_data",
									"         */",
									"    } catch {",
									"        console.log(\"Can't get report cash_flow data\");",
									"    }",
									"",
									"    switch(testcase){",
									"        case 2:",
									"            pm.test(\"Got chart_balance_change \", function () {",
									"                pm.environment.set(\"C-chart_balance_change\",chart_balance_change);",
									"                pm.expect(chart_balance_change != null).to.be.true;",
									"            });",
									"",
									"            console.log(\"chart_balance_change: \", chart_balance_change);",
									"",
									"            // ================================================ bonus check current data",
									"            // waiting logic updated at phase 2",
									"            // ================================================ ",
									"",
									"            postman.setNextRequest(\"get_list_transaction\"); // get_list_transaction",
									"            break;",
									"        case 4: case 6:",
									"            let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"            let old_chart_balance_change = pm.environment.get(\"C-chart_balance_change\");",
									"            // console.log(\"debug old_chart_balance_change: \", old_chart_balance_change);",
									"            // console.log(\"debug chart_balance_change: \", chart_balance_change);",
									"",
									"            let tnx_date = tnx_obj.value_at.substring(0,10);",
									"            let old_date = null, act_date = null;",
									"            for(let i in chart_balance_change.dates_data){",
									"                let day_i = chart_balance_change.dates_data[i].date.substring(0,10);",
									"                if(day_i == tnx_date){",
									"                    act_date = chart_balance_change.dates_data[i];",
									"                    break;",
									"                }",
									"            }",
									"",
									"            for(let i in old_chart_balance_change.dates_data){",
									"                let day_i = old_chart_balance_change.dates_data[i].date.substring(0,10);",
									"                if(day_i == tnx_date){",
									"                    old_date = old_chart_balance_change.dates_data[i];",
									"                    break;",
									"                }",
									"            }",
									"",
									"            // có thay đổi => total_debit increase",
									"            pm.test(\"total_debit increase \" + tnx_obj.amount, function () {",
									"                pm.expect(chart_balance_change.sum_card_data.total_debit == old_chart_balance_change.sum_card_data.total_debit + tnx_obj.amount).to.be.true;",
									"            });",
									"            // thay đổi ngày tương ứng",
									"            if(old_date != null && act_date != null){",
									"                console.log(\"act_date: \",act_date);",
									"                console.log(\"old_date: \",old_date);",
									"                pm.test(\"debit_amount at \" + tnx_date + \" increase \" + tnx_obj.amount, function () {",
									"                    pm.expect(act_date.debit_amount == old_date.debit_amount + tnx_obj.amount).to.be.true;",
									"                });",
									"",
									"                pm.test(\"end_amount at \" + tnx_date + \" increase \" + tnx_obj.amount, function () {",
									"                    pm.expect(act_date.end_amount == old_date.end_amount + tnx_obj.amount).to.be.true;",
									"                });",
									"",
									"                pm.test(\"gap at \" + tnx_date + \" increase \" + tnx_obj.amount, function () {",
									"                    pm.expect(act_date.gap == old_date.gap + tnx_obj.amount).to.be.true;",
									"                });",
									"            }",
									"",
									"            console.log(\"-------- End Testsuite 48 --------\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get report cash_flow, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-location-timezone",
								"value": "UTC+07:00"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"branch_id\": \"{{C-branch_id}}\",\n    \"business_id\": {{C-business_id}},\n    \"period\": \"{{C-period}}\",\n    \"report_type\": \"{{C-report_type}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-ledger/api/v1/report/chart-balance-change",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-ledger",
								"api",
								"v1",
								"report",
								"chart-balance-change"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.request.headers.add({",
							" key: \"authorization\",",
							" value: \"Bearer \" + pm.environment.get(\"C-userToken\")",
							"});",
							"",
							"pm.request.headers.add({",
							" key: \"Content-Type\",",
							" value: \"application/json\"",
							"});"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "report-web",
			"item": [
				{
					"name": "cash-flow",
					"item": [
						{
							"name": "get_cash_flow_detail",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "authorization",
										"value": "Bearer {{C-userToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"business_id\": {{C-business_id}},\n    \"current_period_start\": \"{{C-current_period_start}}\",\n    \"current_period_end\": \"{{C-current_period_end}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{finone_url}}/fo-ledger/api/v1/report/cash-flow-detail",
									"host": [
										"{{finone_url}}"
									],
									"path": [
										"fo-ledger",
										"api",
										"v1",
										"report",
										"cash-flow-detail"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_report_account",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "authorization",
										"value": "Bearer {{C-userToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"business_id\": {{C-business_id}},\n    \"current_period_start\": \"{{C-current_period_start}}\",\n    \"current_period_end\": \"{{C-current_period_end}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{finone_url}}/fo-ledger/api/v1/report/account",
									"host": [
										"{{finone_url}}"
									],
									"path": [
										"fo-ledger",
										"api",
										"v1",
										"report",
										"account"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "profit-loss",
					"item": [
						{
							"name": "get_chart_profit_loss_detail",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "authorization",
										"value": "Bearer {{C-userToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"business_id\": {{C-business_id}},\n    \"current_period_start\": \"{{C-current_period_start}}\",\n    \"current_period_end\": \"{{C-current_period_end}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev-api.finan.one/fo-ledger/api/v1/report/chart-profit-loss-detail",
									"protocol": "https",
									"host": [
										"dev-api",
										"finan",
										"one"
									],
									"path": [
										"fo-ledger",
										"api",
										"v1",
										"report",
										"chart-profit-loss-detail"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_report_top_selling_product",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "authorization",
										"value": "Bearer {{C-userToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"business_id\": {{C-business_id}},\n    \"current_period_start\": \"{{C-current_period_start}}\",\n    \"current_period_end\": \"{{C-current_period_end}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev-api.finan.one/fo-order/api/v1/report/top-selling-product",
									"protocol": "https",
									"host": [
										"dev-api",
										"finan",
										"one"
									],
									"path": [
										"fo-order",
										"api",
										"v1",
										"report",
										"top-selling-product"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_report_profit_loss_detail",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "authorization",
										"value": "Bearer {{C-userToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"business_id\": {{C-business_id}},\n    \"current_period_start\": \"{{C-current_period_start}}\",\n    \"current_period_end\": \"{{C-current_period_end}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{finone_url}}/fo-ledger/api/v1/report/profit-loss-detail",
									"host": [
										"{{finone_url}}"
									],
									"path": [
										"fo-ledger",
										"api",
										"v1",
										"report",
										"profit-loss-detail"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "account-receivable-payable",
					"item": [
						{
							"name": "get_chart_balance_change_account",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "authorization",
										"value": "Bearer {{C-userToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"business_id\": {{C-business_id}},\n    \"report_type\": \"B1001\",\n    \"current_period_start\": \"{{C-current_period_start}}\",\n    \"current_period_end\": \"{{C-current_period_end}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{finone_url}}/fo-ledger/api/v1/report/chart-balance-change-account",
									"host": [
										"{{finone_url}}"
									],
									"path": [
										"fo-ledger",
										"api",
										"v1",
										"report",
										"chart-balance-change-account"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "unuse_this_suite",
			"item": [
				{
					"name": "report_chart_balance_change",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/**",
									" * \"report_type\": sum,income,expense",
									" * Note: report_type = sum => hiện tại bị null dates_data",
									" * - C1: call từng loại income, expense dể lấy dates_data",
									" * - C2: wait fixing from dev",
									" * => tạm thời xử lý case sum, 2 case còn lại sẽ handle sau",
									" * period thêm 1 số filter: quarter, l7d, l30d, l90d",
									" */",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let chart_balance_change = null;",
									"    try {",
									"        chart_balance_change = jsData.data;",
									"        /**",
									"         * period: week, month, year",
									"         * sum_card_data",
									"         * dates_data",
									"         */",
									"    } catch {",
									"        console.log(\"Can't get report cash_flow data\");",
									"    }",
									"",
									"    switch(testcase){",
									"        case 2:",
									"            pm.test(\"Got chart_balance_change \", function () {",
									"                pm.environment.set(\"C-chart_balance_change\",chart_balance_change);",
									"                pm.expect(chart_balance_change != null).to.be.true;",
									"            });",
									"            // console.log(\"chart_balance_change: \", chart_balance_change);",
									"",
									"            postman.setNextRequest(\"get_list_transaction\"); // get_list_transaction",
									"            break;",
									"        case 4:",
									"            let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"            let old_chart_balance_change = pm.environment.get(\"C-chart_balance_change\");",
									"            // console.log(\"debug old_chart_balance_change: \", old_chart_balance_change);",
									"            // console.log(\"debug chart_balance_change: \", chart_balance_change);",
									"",
									"            let tnx_date = tnx_obj.value_at.substring(0,10);",
									"",
									"            let old_date = null, act_date = null;",
									"            for(let i in chart_balance_change.dates_data){",
									"                let day_i = chart_balance_change.dates_data[i].date.substring(0,10);",
									"                if(day_i == tnx_date){",
									"                    act_date = chart_balance_change.dates_data[i];",
									"                    break;",
									"                }",
									"            }",
									"",
									"            for(let i in old_chart_balance_change.dates_data){",
									"                let day_i = old_chart_balance_change.dates_data[i].date.substring(0,10);",
									"                if(day_i == tnx_date){",
									"                    old_date = old_chart_balance_change.dates_data[i];",
									"                    break;",
									"                }",
									"            }",
									"            ",
									"            if(tnx_obj.tnx_type == \"in\"){",
									"                // có thay đổi => total_debit increase",
									"                pm.test(\"total_debit increase \" + tnx_obj.amount, function () {",
									"                    pm.expect(chart_balance_change.sum_card_data.total_debit == old_chart_balance_change.sum_card_data.total_debit + tnx_obj.amount).to.be.true;",
									"                });",
									"                // thay đổi ngày tương ứng",
									"                if(old_date != null && act_date != null){",
									"                    console.log(\"act_date: \",act_date);",
									"                    console.log(\"old_date: \",old_date);",
									"                    pm.test(\"debit_amount at \" + tnx_date + \" increase \" + tnx_obj.amount, function () {",
									"                        pm.expect(act_date.debit_amount == old_date.debit_amount + tnx_obj.amount).to.be.true;",
									"                    });",
									"",
									"                    pm.test(\"end_amount at \" + tnx_date + \" increase \" + tnx_obj.amount, function () {",
									"                        pm.expect(act_date.end_amount == old_date.end_amount + tnx_obj.amount).to.be.true;",
									"                    });",
									"",
									"                    pm.test(\"gap at \" + tnx_date + \" increase \" + tnx_obj.amount, function () {",
									"                        pm.expect(act_date.gap == old_date.gap + tnx_obj.amount).to.be.true;",
									"                    });",
									"                }",
									"            } else {",
									"                // có thay đổi => total_credit increase",
									"                pm.test(\"total_credit increase \" + tnx_obj.amount, function () {",
									"                    pm.expect(chart_balance_change.sum_card_data.total_credit == old_chart_balance_change.sum_card_data.total_credit + tnx_obj.amount).to.be.true;",
									"                });",
									"",
									"                if(old_date != null && act_date != null){",
									"                    console.log(\"act_date: \",act_date);",
									"                    console.log(\"old_date: \",old_date);",
									"                    pm.test(\"credit_amount at \" + tnx_date + \" increase \" + tnx_obj.amount, function () {",
									"                        pm.expect(act_date.credit_amount == old_date.credit_amount + tnx_obj.amount).to.be.true;",
									"                    });",
									"",
									"                    pm.test(\"end_amount at \" + tnx_date + \" decrease \" + tnx_obj.amount, function () {",
									"                        pm.expect(act_date.end_amount == old_date.end_amount - tnx_obj.amount).to.be.true;",
									"                    });",
									"",
									"                    pm.test(\"gap at \" + tnx_date + \" decrease \" + tnx_obj.amount, function () {",
									"                        pm.expect(act_date.gap == old_date.gap - tnx_obj.amount).to.be.true;",
									"                    });",
									"                }",
									"            }",
									"",
									"            console.log(\"-------- End Testsuite 45 --------\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get report cash_flow, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-location-timezone",
								"value": "UTC+07:00"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"branch_id\": \"{{C-branch_id}}\",\n    \"business_id\": {{C-business_id}},\n    \"period\": \"{{C-period}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-ledger/api/v1/report/chart-balance-change",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-ledger",
								"api",
								"v1",
								"report",
								"chart-balance-change"
							]
						}
					},
					"response": []
				},
				{
					"name": "report_cash_flow_period",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/**",
									" * period: year, month, week",
									" */",
									"",
									"let period = \"month\";",
									"pm.environment.set(\"C-period\",period);",
									"",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"console.log(\"period: \" + period);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let cash_flow_period = null;",
									"    try {",
									"        cash_flow_period = jsData.data;",
									"        /**",
									"         * period: week, month, year",
									"         * sum_card_data",
									"         * dates_data",
									"         */",
									"    } catch {",
									"        console.log(\"Can't get report cash_flow data\");",
									"    }",
									"",
									"    switch(testcase){",
									"        case 2:",
									"            pm.test(\"Got cash_flow_period \", function () {",
									"                pm.environment.set(\"C-cash_flow_period\",cash_flow_period);",
									"                pm.expect(cash_flow_period != null).to.be.true;",
									"            });",
									"",
									"            console.log(\"cash_flow_period: \", cash_flow_period);",
									"",
									"            // ================================================ bonus check current data",
									"            // waiting logic updated at phase 2",
									"            // ================================================ ",
									"",
									"            postman.setNextRequest(\"report_profit_loss_period\"); // report_profit_loss_period",
									"            break;",
									"        case 4:",
									"            let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"            let list_income_account = pm.environment.get(\"C-list_income_account\");",
									"            let list_expense_account = pm.environment.get(\"C-list_expense_account\");",
									"            let old_cash_flow_period = pm.environment.get(\"C-cash_flow_period\");",
									"",
									"            // hiện tại chưa chốt login nên tạm thời check phần sum_card_data",
									"            if(tnx_obj.tnx_type == \"in\"){",
									"                // tăng income",
									"                pm.test(\"total_income increase \" + tnx_obj.amount, function () {",
									"                    pm.expect(cash_flow_period.sum_card_data.total_income == old_cash_flow_period.sum_card_data.total_income + tnx_obj.amount).to.be.true;",
									"                });",
									"",
									"                pm.test(\"nothing happen with total_expense\", function () {",
									"                    pm.expect(cash_flow_period.sum_card_data.total_expense == old_cash_flow_period.sum_card_data.total_expense).to.be.true;",
									"                });",
									"",
									"                pm.test(\"total_gap increase \" + tnx_obj.amount, function () {",
									"                    pm.expect(cash_flow_period.sum_card_data.total_gap == old_cash_flow_period.sum_card_data.total_gap + tnx_obj.amount).to.be.true;",
									"                });",
									"            } else {",
									"                // tăng expense",
									"                pm.test(\"nothing happen with total_income\", function () {",
									"                    pm.expect(cash_flow_period.sum_card_data.total_income == old_cash_flow_period.sum_card_data.total_income).to.be.true;",
									"                });",
									"",
									"                pm.test(\"total_expense increase \"  + tnx_obj.amount, function () {",
									"                    pm.expect(cash_flow_period.sum_card_data.total_expense == old_cash_flow_period.sum_card_data.total_expense + tnx_obj.amount).to.be.true;",
									"                });",
									"",
									"                pm.test(\"total_gap decrease \" + tnx_obj.amount, function () {",
									"                    pm.expect(cash_flow_period.sum_card_data.total_gap == old_cash_flow_period.sum_card_data.total_gap - tnx_obj.amount).to.be.true;",
									"                });",
									"            }",
									"",
									"            postman.setNextRequest(\"report_profit_loss_period\"); // report_profit_loss_period",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get report cash_flow, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-location-timezone",
								"value": "UTC+07:00"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"branch_id\": \"{{C-branch_id}}\",\n    \"business_id\": {{C-business_id}},\n    \"period\": \"{{C-period}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-ledger/api/v1/report/cash-flow-period",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-ledger",
								"api",
								"v1",
								"report",
								"cash-flow-period"
							]
						}
					},
					"response": []
				},
				{
					"name": "report_profit_loss_period",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/**",
									" * \"report_type\": sum,income,expense",
									" * Note: report_type = sum => hiện tại bị null dates_data",
									" * - C1: call từng loại income, expense dể lấy dates_data",
									" * - C2: wait fixing from dev",
									" * => tạm thời xử lý case sum, 2 case còn lại sẽ handle sau",
									" */",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let full_check = pm.environment.get(\"C-full_check\");",
									"if(!full_check){",
									"    full_check = 1;",
									"    pm.environment.set(\"C-full_check\",full_check);",
									"    report_type = \"income\";",
									"} else {",
									"    report_type = \"expense\";",
									"}",
									"pm.environment.set(\"C-report_type\",report_type);",
									"console.log(\"full_check: \" + full_check);",
									"console.log(\"report_type: \" + report_type);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let full_check = pm.environment.get(\"C-full_check\");",
									"    let profit_period = null, loss_period = null;",
									"    try {",
									"        if(full_check == 1){",
									"            profit_period = jsData.data;",
									"        } else {",
									"            loss_period = jsData.data;",
									"        }",
									"        /**",
									"         * period: week, month, year",
									"         * sum_card_data",
									"         * dates_data",
									"         */",
									"    } catch {",
									"        console.log(\"Can't get report cash_flow data\");",
									"    }",
									"",
									"    switch(testcase){",
									"        case 2:",
									"            if(full_check == 1){",
									"                pm.test(\"Got profit_period \", function () {",
									"                    pm.environment.set(\"C-profit_period\",profit_period);",
									"                    pm.expect(profit_period != null).to.be.true;",
									"                });",
									"                pm.environment.set(\"C-profit_period\",profit_period);",
									"                // console.log(\"profit_period: \", profit_period);",
									"",
									"                full_check++;",
									"                pm.environment.set(\"C-full_check\",full_check);",
									"                postman.setNextRequest(\"report_profit_loss_period\");",
									"            } else {",
									"                pm.test(\"Got loss_period \", function () {",
									"                    pm.environment.set(\"C-loss_period\",loss_period);",
									"                    pm.expect(loss_period != null).to.be.true;",
									"                });",
									"                pm.environment.set(\"C-loss_period\",loss_period);",
									"                // console.log(\"loss_period: \", loss_period);",
									"",
									"                pm.environment.unset(\"C-full_check\");",
									"                postman.setNextRequest(\"report_chart_balance_change\"); // report_chart_balance_change",
									"            }",
									"            break;",
									"        case 4:",
									"            let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"            let tnx_date = tnx_obj.value_at.substring(0,10);",
									"            ",
									"            if(full_check == 1){",
									"                let old_profit_period = pm.environment.get(\"C-profit_period\");",
									"                // console.log(\"debug old_profit_period: \", old_profit_period);",
									"                // console.log(\"debug profit_period: \", profit_period);",
									"                if(tnx_obj.tnx_type == \"in\"){",
									"                    // có thay đổi => total_income increase",
									"                    pm.test(\"total_income increase \" + tnx_obj.amount, function () {",
									"                        pm.expect(profit_period.sum_card_data.total_income == old_profit_period.sum_card_data.total_income + tnx_obj.amount).to.be.true;",
									"                    });",
									"                    // thay đổi ngày tương ứng",
									"                    let old_date = null, act_date = null;",
									"                    for(let i in profit_period.dates_data){",
									"                        let day_i = profit_period.dates_data[i].date.substring(0,10);",
									"                        if(day_i == tnx_date){",
									"                            act_date = profit_period.dates_data[i];",
									"                            break;",
									"                        }",
									"                    }",
									"",
									"                    for(let i in old_profit_period.dates_data){",
									"                        let day_i = old_profit_period.dates_data[i].date.substring(0,10);",
									"                        if(day_i == tnx_date){",
									"                            old_date = old_profit_period.dates_data[i];",
									"                            break;",
									"                        }",
									"                    }",
									"",
									"                    if(old_date != null && act_date != null){",
									"                        console.log(\"act_date: \",act_date);",
									"                        console.log(\"old_date: \",old_date);",
									"                        pm.test(\"income at \" + tnx_date + \" increase \" + tnx_obj.amount, function () {",
									"                            pm.expect(act_date.income == old_date.income + tnx_obj.amount).to.be.true;",
									"                        });",
									"                    }",
									"                } else {",
									"                    // nothing happen",
									"                    pm.test(\"Nothing happen!!!\", function () {",
									"                        pm.expect(JSON.stringify(profit_period) == JSON.stringify(old_profit_period)).to.be.true;",
									"                    });",
									"                }",
									"",
									"                full_check++;",
									"                pm.environment.set(\"C-full_check\",full_check);",
									"                postman.setNextRequest(\"report_profit_loss_period\");",
									"            } else {",
									"                let old_loss_period = pm.environment.get(\"C-loss_period\");",
									"                // console.log(\"debug old_loss_period: \", old_loss_period);",
									"                // console.log(\"debug loss_period: \", loss_period);",
									"                if(tnx_obj.tnx_type == \"out\"){",
									"                    // có thay đổi => total_expense increase",
									"                    pm.test(\"total_expense increase \" + tnx_obj.amount, function () {",
									"                        pm.expect(loss_period.sum_card_data.total_expense == old_loss_period.sum_card_data.total_expense + tnx_obj.amount).to.be.true;",
									"                    });",
									"                    // thay đổi ngày tương ứng",
									"                    let old_date = null, act_date = null;",
									"                    for(let i in loss_period.dates_data){",
									"                        let day_i = loss_period.dates_data[i].date.substring(0,10);",
									"                        if(day_i == tnx_date){",
									"                            act_date = loss_period.dates_data[i];",
									"                            break;",
									"                        }",
									"                    }",
									"",
									"                    for(let i in old_loss_period.dates_data){",
									"                        let day_i = old_loss_period.dates_data[i].date.substring(0,10);",
									"                        if(day_i == tnx_date){",
									"                            old_date = old_loss_period.dates_data[i];",
									"                            break;",
									"                        }",
									"                    }",
									"",
									"                    if(old_date != null && act_date != null){",
									"                        console.log(\"act_date: \",act_date);",
									"                        console.log(\"old_date: \",old_date);",
									"                        pm.test(\"expense at \" + tnx_date + \" increase \" + tnx_obj.amount, function () {",
									"                            pm.expect(act_date.expense == old_date.expense + tnx_obj.amount).to.be.true;",
									"                        });",
									"                    }",
									"                } else {",
									"                    // nothing happen",
									"                    pm.test(\"Nothing happen!!!\", function () {",
									"                        pm.expect(JSON.stringify(loss_period) == JSON.stringify(old_loss_period)).to.be.true;",
									"                    });",
									"                }",
									"",
									"                pm.environment.unset(\"C-full_check\");",
									"                postman.setNextRequest(\"report_chart_balance_change\"); // report_chart_balance_change",
									"            }",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get report cash_flow, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-location-timezone",
								"value": "UTC+07:00"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"branch_id\": \"{{C-branch_id}}\",\n    \"business_id\": {{C-business_id}},\n    \"period\": \"{{C-period}}\",\n    \"report_type\": \"{{C-report_type}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-ledger/api/v1/report/profit-loss-period",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-ledger",
								"api",
								"v1",
								"report",
								"profit-loss-period"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "topup-for-finan-account",
			"item": [
				{
					"name": "gen_token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsData = pm.response.json();",
									"let token = jsData.results[0].access_token;",
									"pm.environment.set(\"finesys_token\",token);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"trung@fintechhq.solutions\",\n    \"password\": \"ez1xaapEad0J7TkZ\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://stg-finesys.finan.vn/api/v1/tenant/admin/auth",
							"protocol": "https",
							"host": [
								"stg-finesys",
								"finan",
								"vn"
							],
							"path": [
								"api",
								"v1",
								"tenant",
								"admin",
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "topup",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// ============================= random characters",
									"function randomChars(length) {",
									"    var result           = '';",
									"    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
									"    var charactersLength = characters.length;",
									"    for ( var i = 0; i < length; i++ ) {",
									"      result += characters.charAt(Math.floor(Math.random() * ",
									" charactersLength));",
									"   }",
									"   return result;",
									"}",
									"",
									"/**",
									" * REPRST_VRTL_AC_NO : Là STK mún nhận tiền",
									" * TRANSACTION_ID : Random ko trùng",
									" * TRX_AMT: số tiền",
									" */",
									"",
									"let REPRST_VRTL_AC_NO = \"1AM002110000044\";",
									"let TRX_AMT = 1000000;",
									"let TRANSACTION_ID = randomChars(27);",
									"",
									"pm.environment.set(\"REPRST_VRTL_AC_NO\",REPRST_VRTL_AC_NO);",
									"pm.environment.set(\"TRANSACTION_ID\",TRANSACTION_ID);",
									"pm.environment.set(\"TRX_AMT\",TRX_AMT);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"/**",
									" * ",
									" */"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{finesys_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"CFM_PARTNER_ID\": \"FINA1\",\n    \"CFM_TRX_DT\": \"20230807\",\n    \"CFM_TRX_TIME\": \"110251\",\n    \"SND_TIME\": \"110441\",\n    \"DEP_AC_LEDG_TRX_AFT_BLC\": 1066021943,\n    \"TRX_AMT\": {{TRX_AMT}},\n    \"LCL_AC_NO\": \"700028276350\",\n    \"REPRST_VRTL_AC_NO\": \"{{REPRST_VRTL_AC_NO}}\",\n    \"REFNO\": \"0976870126\",\n    \"DEP_TRX_MEMO_CTT1\": \"Test cash-in\",\n    \"DEP_TRX_RNP_D\": \"C\",\n    \"DEP_TRX_CRT_CANC_D\": \"10\",\n    \"CCY_C\": \"VND\",\n    \"GLB_ID\": \"70002827635000000000330020230807\",\n    \"TRANSACTION_ID\": \"{{TRANSACTION_ID}}\",\n    \"DEP_TRX_HIS_NO\": 33\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://stg-finesys.finan.vn/api/v1/adapter/bo/shinhan-notify-balance",
							"protocol": "https",
							"host": [
								"stg-finesys",
								"finan",
								"vn"
							],
							"path": [
								"api",
								"v1",
								"adapter",
								"bo",
								"shinhan-notify-balance"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "connect-db",
			"item": [
				{
					"name": "get_list_product",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// API này được tạo ra để gọi vào DB, cần setup để start server trước khi call"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-database",
								"value": "business",
								"type": "text"
							},
							{
								"key": "base-url",
								"value": "{{finone_url}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{local_url}}/product/get-list?business_id=6",
							"host": [
								"{{local_url}}"
							],
							"path": [
								"product",
								"get-list"
							],
							"query": [
								{
									"key": "business_id",
									"value": "6"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get_list_bank_merchant",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// API này được tạo ra để gọi vào DB, cần setup để start server trước khi call"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-database",
								"value": "banking",
								"type": "text"
							},
							{
								"key": "base-url",
								"value": "{{finone_url}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{local_url}}/bank-merchant/get-list?business_id=35",
							"host": [
								"{{local_url}}"
							],
							"path": [
								"bank-merchant",
								"get-list"
							],
							"query": [
								{
									"key": "business_id",
									"value": "35"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "create_shinhan_kyc",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// API này được tạo ra để gọi vào DB, cần setup để start server trước khi call",
									"const currentDate = new Date();",
									"let setDate = currentDate.toISOString().replace(\"T\",\" \").replace(\"Z\",\"\");",
									"console.log(\"setDate: \" + setDate);",
									"",
									"let payload = {",
									"    \"creator_id\":\"375dfd5b-387b-4169-a786-052a977814b8\",",
									"    \"created_at\":setDate,",
									"    \"updated_at\":setDate,",
									"    \"deleted_at\":null,",
									"    \"description\":\"[API] SHINHAN MERCHANT\",",
									"    \"name\":\"[API] SHINHAN MERCHANT\",",
									"    \"provider_code\":\"finesys\",",
									"    \"provider_owner_id\":\"chaule\",",
									"    \"provider_business_id\":\"B00200000001\",",
									"    \"provider_business_kyc_number\":0,",
									"    \"business_id\":35,",
									"    \"kyc_status\":\"approved\",",
									"    \"sme_id\":\"806102bc-9883-44d9-ac09-39d573ba4f98\",",
									"    \"client_bank_id\":\"gHLxJaKPp97lCW5gD0oIBTWK\",",
									"    \"usage_type\":\"merchant_host\"",
									"}",
									"",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-database",
								"value": "banking"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{local_url}}/bank-merchant/kyc-shinhan/create",
							"host": [
								"{{local_url}}"
							],
							"path": [
								"bank-merchant",
								"kyc-shinhan",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_business_detail",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-database",
								"value": "business",
								"type": "text"
							},
							{
								"key": "base-url",
								"value": "{{finone_url}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{local_url}}/business/134",
							"host": [
								"{{local_url}}"
							],
							"path": [
								"business",
								"134"
							]
						}
					},
					"response": []
				},
				{
					"name": "edit_business",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "x-database",
								"value": "business",
								"type": "text"
							},
							{
								"key": "base-url",
								"value": "{{finone_url}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"language\":\"vn\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{local_url}}/business/134",
							"host": [
								"{{local_url}}"
							],
							"path": [
								"business",
								"134"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "purchase_order",
			"item": [
				{
					"name": "buyer_view_po_detail",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/{{C-business_id}}/po/{{C-po_id}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"{{C-business_id}}",
								"po",
								"{{C-po_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_list_po",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/po/get-list?branch_id&contact_id&start_time_created_at&end_time_created_at&start_time_due_at&end_time_due_at&list_contact_ids&option&page&page_size&payment_status&search&sort&status",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"po",
								"get-list"
							],
							"query": [
								{
									"key": "branch_id",
									"value": null
								},
								{
									"key": "contact_id",
									"value": null
								},
								{
									"key": "start_time_created_at",
									"value": null
								},
								{
									"key": "end_time_created_at",
									"value": null
								},
								{
									"key": "start_time_due_at",
									"value": null
								},
								{
									"key": "end_time_due_at",
									"value": null
								},
								{
									"key": "list_contact_ids",
									"value": null
								},
								{
									"key": "option",
									"value": null
								},
								{
									"key": "page",
									"value": null
								},
								{
									"key": "page_size",
									"value": null
								},
								{
									"key": "payment_status",
									"value": null
								},
								{
									"key": "search",
									"value": null
								},
								{
									"key": "sort",
									"value": null
								},
								{
									"key": "status",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get_po_detail",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/po/get-one/{{C-po_id}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"po",
								"get-one",
								"{{C-po_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "gen_next_order_code",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/po/get-next-gen-order-code",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"po",
								"get-next-gen-order-code"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_po_overview",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/po/overview?branch_id=&contact_id=&start_time_created_at=&end_time_created_at=&start_time_due_at=&end_time_due_at=&list_contact_ids=&option=&page=&page_size=&payment_status=&search=&sort=&status=",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"po",
								"overview"
							],
							"query": [
								{
									"key": "branch_id",
									"value": ""
								},
								{
									"key": "contact_id",
									"value": ""
								},
								{
									"key": "start_time_created_at",
									"value": ""
								},
								{
									"key": "end_time_created_at",
									"value": ""
								},
								{
									"key": "start_time_due_at",
									"value": ""
								},
								{
									"key": "end_time_due_at",
									"value": ""
								},
								{
									"key": "list_contact_ids",
									"value": ""
								},
								{
									"key": "option",
									"value": ""
								},
								{
									"key": "page",
									"value": ""
								},
								{
									"key": "page_size",
									"value": ""
								},
								{
									"key": "payment_status",
									"value": ""
								},
								{
									"key": "search",
									"value": ""
								},
								{
									"key": "sort",
									"value": ""
								},
								{
									"key": "status",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "calculate_po",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"account_id\": 0,\n  \"attachment_url\": \"string\",\n  \"business_id\": 0,\n  \"cart_status\": \"string\",\n  \"contact_id\": \"string\",\n  \"contact_info\": \"string\",\n  \"currency\": \"string\",\n  \"custom_field\": \"string\",\n  \"delivery_fee_amount\": 0,\n  \"discount_amount\": 0,\n  \"discounts\": \"string\",\n  \"due_at\": \"string\",\n  \"inspection_fees\": 0,\n  \"is_pre_tax\": true,\n  \"items\": [\n    {\n      \"account_id\": 0,\n      \"after_tax_amount\": 0,\n      \"batchs\": [\n        {\n          \"batch_code\": \"string\",\n          \"expiration_date\": \"string\",\n          \"id\": \"string\",\n          \"is_batch_managed\": true,\n          \"name\": \"string\",\n          \"po_item_id\": \"string\",\n          \"product_id\": \"string\",\n          \"production_date\": \"string\",\n          \"quantity\": \"string\",\n          \"sku_id\": \"string\"\n        }\n      ],\n      \"before_tax_amount\": 0,\n      \"currency\": \"string\",\n      \"discount_amount\": 0,\n      \"id\": \"string\",\n      \"item_amount\": 0,\n      \"item_tax_amount\": 0,\n      \"note\": \"string\",\n      \"product_id\": \"string\",\n      \"quantity\": 0,\n      \"sku_id\": \"string\",\n      \"sku_info\": [\n        {}\n      ],\n      \"taxes\": [\n        {\n          \"account_id\": 0,\n          \"amount\": 0,\n          \"name\": \"string\",\n          \"rate\": 0,\n          \"tax_id\": \"string\"\n        }\n      ],\n      \"total_item_amount\": 0,\n      \"total_line_item_amount\": 0\n    }\n  ],\n  \"items_amount\": 0,\n  \"note\": \"string\",\n  \"ops_status\": \"string\",\n  \"other_fees\": 0,\n  \"paid_amount\": 0,\n  \"payment_config\": [\n    \"string\"\n  ],\n  \"payment_due_amount\": 0,\n  \"payment_status\": \"string\",\n  \"po_code\": \"string\",\n  \"po_pic_id\": \"string\",\n  \"po_pic_info\": \"string\",\n  \"po_type\": \"string\",\n  \"reference_code\": \"string\",\n  \"short_des\": \"string\",\n  \"sub_total_amount\": 0,\n  \"system_code\": \"string\",\n  \"tax_amount\": 0,\n  \"tax_type\": \"string\",\n  \"total_amount\": 0,\n  \"value_at\": \"string\",\n  \"warehouse_id\": \"string\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/po/calculate",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"po",
								"calculate"
							]
						}
					},
					"response": []
				},
				{
					"name": "create_po",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"account_id\": 0,\n  \"attachment_url\": \"string\",\n  \"business_id\": 0,\n  \"cart_status\": \"string\",\n  \"contact_id\": \"string\",\n  \"contact_info\": \"string\",\n  \"currency\": \"string\",\n  \"custom_field\": \"string\",\n  \"delivery_fee_amount\": 0,\n  \"discount_amount\": 0,\n  \"discounts\": \"string\",\n  \"due_at\": \"string\",\n  \"inspection_fees\": 0,\n  \"is_pre_tax\": true,\n  \"items\": [\n    {\n      \"account_id\": 0,\n      \"after_tax_amount\": 0,\n      \"batchs\": [\n        {\n          \"batch_code\": \"string\",\n          \"expiration_date\": \"string\",\n          \"id\": \"string\",\n          \"is_batch_managed\": true,\n          \"name\": \"string\",\n          \"po_item_id\": \"string\",\n          \"product_id\": \"string\",\n          \"production_date\": \"string\",\n          \"quantity\": \"string\",\n          \"sku_id\": \"string\"\n        }\n      ],\n      \"before_tax_amount\": 0,\n      \"currency\": \"string\",\n      \"discount_amount\": 0,\n      \"id\": \"string\",\n      \"item_amount\": 0,\n      \"item_tax_amount\": 0,\n      \"note\": \"string\",\n      \"product_id\": \"string\",\n      \"quantity\": 0,\n      \"sku_id\": \"string\",\n      \"sku_info\": [\n        {}\n      ],\n      \"taxes\": [\n        {\n          \"account_id\": 0,\n          \"amount\": 0,\n          \"name\": \"string\",\n          \"rate\": 0,\n          \"tax_id\": \"string\"\n        }\n      ],\n      \"total_item_amount\": 0,\n      \"total_line_item_amount\": 0\n    }\n  ],\n  \"items_amount\": 0,\n  \"note\": \"string\",\n  \"ops_status\": \"string\",\n  \"other_fees\": 0,\n  \"paid_amount\": 0,\n  \"payment_config\": [\n    \"string\"\n  ],\n  \"payment_due_amount\": 0,\n  \"payment_status\": \"string\",\n  \"po_code\": \"string\",\n  \"po_pic_id\": \"string\",\n  \"po_pic_info\": \"string\",\n  \"po_type\": \"string\",\n  \"reference_code\": \"string\",\n  \"short_des\": \"string\",\n  \"sub_total_amount\": 0,\n  \"system_code\": \"string\",\n  \"tax_amount\": 0,\n  \"tax_type\": \"string\",\n  \"total_amount\": 0,\n  \"value_at\": \"string\",\n  \"warehouse_id\": \"string\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/po/create",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"po",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "edit_po",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"account_id\": 0,\n  \"attachment_url\": \"string\",\n  \"business_id\": 0,\n  \"cart_status\": \"string\",\n  \"contact_id\": \"string\",\n  \"contact_info\": \"string\",\n  \"currency\": \"string\",\n  \"custom_field\": \"string\",\n  \"delivery_fee_amount\": 0,\n  \"discount_amount\": 0,\n  \"discounts\": \"string\",\n  \"due_at\": \"string\",\n  \"inspection_fees\": 0,\n  \"is_pre_tax\": true,\n  \"items\": [\n    {\n      \"account_id\": 0,\n      \"after_tax_amount\": 0,\n      \"batchs\": [\n        {\n          \"batch_code\": \"string\",\n          \"expiration_date\": \"string\",\n          \"id\": \"string\",\n          \"is_batch_managed\": true,\n          \"name\": \"string\",\n          \"po_item_id\": \"string\",\n          \"product_id\": \"string\",\n          \"production_date\": \"string\",\n          \"quantity\": \"string\",\n          \"sku_id\": \"string\"\n        }\n      ],\n      \"before_tax_amount\": 0,\n      \"currency\": \"string\",\n      \"discount_amount\": 0,\n      \"id\": \"string\",\n      \"item_amount\": 0,\n      \"item_tax_amount\": 0,\n      \"note\": \"string\",\n      \"product_id\": \"string\",\n      \"quantity\": 0,\n      \"sku_id\": \"string\",\n      \"sku_info\": [\n        {}\n      ],\n      \"taxes\": [\n        {\n          \"account_id\": 0,\n          \"amount\": 0,\n          \"name\": \"string\",\n          \"rate\": 0,\n          \"tax_id\": \"string\"\n        }\n      ],\n      \"total_item_amount\": 0,\n      \"total_line_item_amount\": 0\n    }\n  ],\n  \"items_amount\": 0,\n  \"note\": \"string\",\n  \"ops_status\": \"string\",\n  \"other_fees\": 0,\n  \"paid_amount\": 0,\n  \"payment_config\": [\n    \"string\"\n  ],\n  \"payment_due_amount\": 0,\n  \"payment_status\": \"string\",\n  \"po_code\": \"string\",\n  \"po_pic_id\": \"string\",\n  \"po_pic_info\": \"string\",\n  \"po_type\": \"string\",\n  \"reference_code\": \"string\",\n  \"short_des\": \"string\",\n  \"sub_total_amount\": 0,\n  \"system_code\": \"string\",\n  \"tax_amount\": 0,\n  \"tax_type\": \"string\",\n  \"total_amount\": 0,\n  \"value_at\": \"string\",\n  \"warehouse_id\": \"string\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/po/update/{{C-po_id}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"po",
								"update",
								"{{C-po_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete_po",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/po/delete/{{C-po_id}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"po",
								"delete",
								"{{C-po_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "batch",
			"item": [
				{
					"name": "delete_batch",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/batch/delete/{{C-batch_id}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"batch",
								"delete",
								"{{C-batch_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_list_batch",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/batch/get-list?list_contact_ids&page&page_size&search&sort&status",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"batch",
								"get-list"
							],
							"query": [
								{
									"key": "list_contact_ids",
									"value": null
								},
								{
									"key": "page",
									"value": null
								},
								{
									"key": "page_size",
									"value": null
								},
								{
									"key": "search",
									"value": null
								},
								{
									"key": "sort",
									"value": null
								},
								{
									"key": "status",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get_batch_detail",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/batch/get-one/{{C-batch_id}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"batch",
								"get-one",
								"{{C-batch_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_batch_overview",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/batch/overview",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"batch",
								"overview"
							]
						}
					},
					"response": []
				},
				{
					"name": "edit_batch",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"batch_code\": \"string\",\n  \"expiration_date\": \"string\",\n  \"id\": \"string\",\n  \"is_batch_managed\": true,\n  \"name\": \"string\",\n  \"po_item_id\": \"string\",\n  \"product_id\": \"string\",\n  \"production_date\": \"string\",\n  \"quantity\": \"string\",\n  \"sku_id\": \"string\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/batch/update/{{C-batch_id}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"batch",
								"update",
								"{{C-batch_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "inventory",
			"item": [
				{
					"name": "delete_inventory",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/inventory/delete/{{C-inventory_id}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"inventory",
								"delete",
								"{{C-inventory_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_list_inventory",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/inventory/get-list?list_contact_ids&page&page_size&search&sort&status&branch_id&category_ids",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"inventory",
								"get-list"
							],
							"query": [
								{
									"key": "list_contact_ids",
									"value": null
								},
								{
									"key": "page",
									"value": null
								},
								{
									"key": "page_size",
									"value": null
								},
								{
									"key": "search",
									"value": null
								},
								{
									"key": "sort",
									"value": null
								},
								{
									"key": "status",
									"value": null
								},
								{
									"key": "branch_id",
									"value": null
								},
								{
									"key": "category_ids",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get_inventory_detail",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/inventory/get-one/{{C-inventory_id}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"inventory",
								"get-one",
								"{{C-inventory_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_inventory_overview",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/inventory/overview",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"inventory",
								"overview"
							]
						}
					},
					"response": []
				},
				{
					"name": "edit_inventory",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"batch_code\": \"string\",\n  \"expiration_date\": \"string\",\n  \"id\": \"string\",\n  \"is_batch_managed\": true,\n  \"name\": \"string\",\n  \"po_item_id\": \"string\",\n  \"product_id\": \"string\",\n  \"production_date\": \"string\",\n  \"quantity\": \"string\",\n  \"sku_id\": \"string\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/inventory/update/{{C-inventory_id}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"inventory",
								"update",
								"{{C-inventory_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "pos-order",
			"item": [
				{
					"name": "calculate_pos_order",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let payload = {",
									"  \"attachment_url\": [",
									"    {}",
									"  ],",
									"  \"branch_id\": \"string\",",
									"  \"cart_status\": \"string\",",
									"  \"contact_id\": \"string\",",
									"  \"currency\": \"string\",",
									"  \"discount_amount\": 0,",
									"  \"discounts\": [",
									"    {",
									"      \"is_rate\": true,",
									"      \"note\": \"string\",",
									"      \"value\": 0",
									"    }",
									"  ],",
									"  \"due_at\": \"string\",",
									"  \"email\": \"string\",",
									"  \"is_pre_tax\": true,",
									"  \"items\": [",
									"    {",
									"      \"account_id\": 0,",
									"      \"after_tax_amount\": 0,",
									"      \"batchs\": [",
									"        {",
									"          \"batch_id\": \"string\",",
									"          \"quantity\": 0",
									"        }",
									"      ],",
									"      \"before_tax_amount\": 0,",
									"      \"currency\": \"string\",",
									"      \"discount_amount\": 0,",
									"      \"id\": \"string\",",
									"      \"item_amount\": 0,",
									"      \"item_tax_amount\": 0,",
									"      \"note\": \"string\",",
									"      \"product_id\": \"string\",",
									"      \"quantity\": 0,",
									"      \"sku_id\": \"string\",",
									"      \"sku_info\": [",
									"        \"string\"",
									"      ],",
									"      \"taxes\": [",
									"        {",
									"          \"account_id\": 0,",
									"          \"amount\": 0,",
									"          \"name\": \"string\",",
									"          \"rate\": 0,",
									"          \"tax_id\": \"string\"",
									"        }",
									"      ],",
									"      \"total_item_amount\": 0,",
									"      \"total_line_item_amount\": 0,",
									"      \"uom\": \"string\",",
									"      \"uom_id\": \"string\"",
									"    }",
									"  ],",
									"  \"items_amount\": 0,",
									"  \"note\": \"string\",",
									"  \"order_code\": \"string\",",
									"  \"payment_config\": [",
									"    \"string\"",
									"  ],",
									"  \"promotion\": {",
									"    \"code\": \"string\",",
									"    \"id\": \"string\",",
									"    \"is_rate\": true,",
									"    \"max_price_discount\": 0,",
									"    \"min_order_price\": 0,",
									"    \"name\": \"string\",",
									"    \"value\": 0",
									"  },",
									"  \"promotion_amount\": 0,",
									"  \"reference_code\": \"string\",",
									"  \"sales_rep_id\": \"string\",",
									"  \"sub_total_amount\": 0,",
									"  \"surcharge_amount\": 0,",
									"  \"surcharges\": [",
									"    {",
									"      \"id\": \"string\",",
									"      \"is_rate\": true,",
									"      \"name\": \"string\",",
									"      \"value\": 0",
									"    }",
									"  ],",
									"  \"tax_amount\": 0,",
									"  \"tax_type\": \"string\",",
									"  \"total_amount\": 0,",
									"  \"value_at\": \"string\"",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/pos-order/calculate",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"pos-order",
								"calculate"
							]
						}
					},
					"response": []
				},
				{
					"name": "create_pos_order",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let payload = {",
									"  \"attachment_url\": [",
									"    {}",
									"  ],",
									"  \"branch_id\": \"string\",",
									"  \"cart_status\": \"string\",",
									"  \"contact_id\": \"string\",",
									"  \"currency\": \"string\",",
									"  \"discount_amount\": 0,",
									"  \"discounts\": [",
									"    {",
									"      \"is_rate\": true,",
									"      \"note\": \"string\",",
									"      \"value\": 0",
									"    }",
									"  ],",
									"  \"due_at\": \"string\",",
									"  \"email\": \"string\",",
									"  \"is_pre_tax\": true,",
									"  \"items\": [",
									"    {",
									"      \"account_id\": 0,",
									"      \"after_tax_amount\": 0,",
									"      \"batchs\": [",
									"        {",
									"          \"batch_id\": \"string\",",
									"          \"quantity\": 0",
									"        }",
									"      ],",
									"      \"before_tax_amount\": 0,",
									"      \"currency\": \"string\",",
									"      \"discount_amount\": 0,",
									"      \"id\": \"string\",",
									"      \"item_amount\": 0,",
									"      \"item_tax_amount\": 0,",
									"      \"note\": \"string\",",
									"      \"product_id\": \"string\",",
									"      \"quantity\": 0,",
									"      \"sku_id\": \"string\",",
									"      \"sku_info\": [",
									"        \"string\"",
									"      ],",
									"      \"taxes\": [",
									"        {",
									"          \"account_id\": 0,",
									"          \"amount\": 0,",
									"          \"name\": \"string\",",
									"          \"rate\": 0,",
									"          \"tax_id\": \"string\"",
									"        }",
									"      ],",
									"      \"total_item_amount\": 0,",
									"      \"total_line_item_amount\": 0,",
									"      \"uom\": \"string\",",
									"      \"uom_id\": \"string\"",
									"    }",
									"  ],",
									"  \"items_amount\": 0,",
									"  \"note\": \"string\",",
									"  \"order_code\": \"string\",",
									"  \"payment_config\": [",
									"    \"string\"",
									"  ],",
									"  \"promotion\": {",
									"    \"code\": \"string\",",
									"    \"id\": \"string\",",
									"    \"is_rate\": true,",
									"    \"max_price_discount\": 0,",
									"    \"min_order_price\": 0,",
									"    \"name\": \"string\",",
									"    \"value\": 0",
									"  },",
									"  \"promotion_amount\": 0,",
									"  \"reference_code\": \"string\",",
									"  \"sales_rep_id\": \"string\",",
									"  \"sub_total_amount\": 0,",
									"  \"surcharge_amount\": 0,",
									"  \"surcharges\": [",
									"    {",
									"      \"id\": \"string\",",
									"      \"is_rate\": true,",
									"      \"name\": \"string\",",
									"      \"value\": 0",
									"    }",
									"  ],",
									"  \"tax_amount\": 0,",
									"  \"tax_type\": \"string\",",
									"  \"total_amount\": 0,",
									"  \"value_at\": \"string\"",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/pos-order/create",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"pos-order",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_list_pos_order",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let page = pm.environment.get(\"C-page\");",
									"",
									"if(!page){",
									"    page = 1;",
									"    pm.environment.set(\"C-page\",page);",
									"",
									"    let page_size = 50;",
									"    pm.environment.set(\"C-page_size\",page_size);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/pos-order/get-list?page={{C-page}}&page_size={{C-page_size}}&search&sort&status",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"pos-order",
								"get-list"
							],
							"query": [
								{
									"key": "list_contact_ids",
									"value": null,
									"disabled": true
								},
								{
									"key": "page",
									"value": "{{C-page}}"
								},
								{
									"key": "page_size",
									"value": "{{C-page_size}}"
								},
								{
									"key": "search",
									"value": null
								},
								{
									"key": "sort",
									"value": null
								},
								{
									"key": "status",
									"value": null
								},
								{
									"key": "branch_id",
									"value": "{{C-filter_branch_id}}",
									"disabled": true
								},
								{
									"key": "category_ids",
									"value": null,
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get_pos_order_detail",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/pos-order/get-one/{{C-pos_order_id}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"pos-order",
								"get-one",
								"{{C-pos_order_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "buyer_view_pos_order",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/{{C-business_id}}/pos-order/{{C-pos_order_system}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"{{C-business_id}}",
								"pos-order",
								"{{C-pos_order_system}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "edit_pos_order",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let payload = {",
									"  \"attachment_url\": [",
									"    {}",
									"  ],",
									"  \"branch_id\": \"string\",",
									"  \"cart_status\": \"string\",",
									"  \"contact_id\": \"string\",",
									"  \"currency\": \"string\",",
									"  \"discount_amount\": 0,",
									"  \"discounts\": [",
									"    {",
									"      \"is_rate\": true,",
									"      \"note\": \"string\",",
									"      \"value\": 0",
									"    }",
									"  ],",
									"  \"due_at\": \"string\",",
									"  \"email\": \"string\",",
									"  \"is_pre_tax\": true,",
									"  \"items\": [",
									"    {",
									"      \"account_id\": 0,",
									"      \"after_tax_amount\": 0,",
									"      \"batchs\": [",
									"        {",
									"          \"batch_id\": \"string\",",
									"          \"quantity\": 0",
									"        }",
									"      ],",
									"      \"before_tax_amount\": 0,",
									"      \"currency\": \"string\",",
									"      \"discount_amount\": 0,",
									"      \"id\": \"string\",",
									"      \"item_amount\": 0,",
									"      \"item_tax_amount\": 0,",
									"      \"note\": \"string\",",
									"      \"product_id\": \"string\",",
									"      \"quantity\": 0,",
									"      \"sku_id\": \"string\",",
									"      \"sku_info\": [",
									"        \"string\"",
									"      ],",
									"      \"taxes\": [",
									"        {",
									"          \"account_id\": 0,",
									"          \"amount\": 0,",
									"          \"name\": \"string\",",
									"          \"rate\": 0,",
									"          \"tax_id\": \"string\"",
									"        }",
									"      ],",
									"      \"total_item_amount\": 0,",
									"      \"total_line_item_amount\": 0,",
									"      \"uom\": \"string\",",
									"      \"uom_id\": \"string\"",
									"    }",
									"  ],",
									"  \"items_amount\": 0,",
									"  \"note\": \"string\",",
									"  \"order_code\": \"string\",",
									"  \"payment_config\": [",
									"    \"string\"",
									"  ],",
									"  \"promotion\": {",
									"    \"code\": \"string\",",
									"    \"id\": \"string\",",
									"    \"is_rate\": true,",
									"    \"max_price_discount\": 0,",
									"    \"min_order_price\": 0,",
									"    \"name\": \"string\",",
									"    \"value\": 0",
									"  },",
									"  \"promotion_amount\": 0,",
									"  \"reference_code\": \"string\",",
									"  \"sales_rep_id\": \"string\",",
									"  \"sub_total_amount\": 0,",
									"  \"surcharge_amount\": 0,",
									"  \"surcharges\": [",
									"    {",
									"      \"id\": \"string\",",
									"      \"is_rate\": true,",
									"      \"name\": \"string\",",
									"      \"value\": 0",
									"    }",
									"  ],",
									"  \"tax_amount\": 0,",
									"  \"tax_type\": \"string\",",
									"  \"total_amount\": 0,",
									"  \"value_at\": \"string\"",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/pos-order/update/{{C-pos_order_id}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"pos-order",
								"update",
								"{{C-pos_order_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete_pos_order",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/pos-order/delete/{{C-pos_order_id}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"pos-order",
								"delete",
								"{{C-pos_order_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "surcharge",
			"item": [
				{
					"name": "create_surcharge",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"code\": \"string\",\n  \"description\": \"string\",\n  \"is_rate\": true,\n  \"name\": \"string\",\n  \"setting\": [\n    \"string\"\n  ],\n  \"value\": 0\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/surcharge/create",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"surcharge",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_list_surcharge",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/surcharge/get-list?list_contact_ids&page&page_size&search&sort&status",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"surcharge",
								"get-list"
							],
							"query": [
								{
									"key": "list_contact_ids",
									"value": null
								},
								{
									"key": "page",
									"value": null
								},
								{
									"key": "page_size",
									"value": null
								},
								{
									"key": "search",
									"value": null
								},
								{
									"key": "sort",
									"value": null
								},
								{
									"key": "status",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get_surcharge_detail",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/surcharge/get-one/{{C-batch_id}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"surcharge",
								"get-one",
								"{{C-batch_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete_surcharge",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/surcharge/delete/{{C-surcharge_id}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"surcharge",
								"delete",
								"{{C-surcharge_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "edit_surcharge",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"code\": \"string\",\n  \"description\": \"string\",\n  \"is_rate\": true,\n  \"name\": \"string\",\n  \"setting\": [\n    \"string\"\n  ],\n  \"value\": 0\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/surcharge/update/{{C-batch_id}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"surcharge",
								"update",
								"{{C-batch_id}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"// phụ phí"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "promotion",
			"item": [
				{
					"name": "create_promotion",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"code\": \"string\",\n  \"description\": \"string\",\n  \"is_active\": true,\n  \"is_rate\": true,\n  \"max_price_discount\": 0,\n  \"min_order_price\": 0,\n  \"name\": \"string\",\n  \"value\": 0\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/surcharge/create",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"surcharge",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_list_promotion",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/promotion/get-list?list_contact_ids&page&page_size&search&sort&status",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"promotion",
								"get-list"
							],
							"query": [
								{
									"key": "list_contact_ids",
									"value": null
								},
								{
									"key": "page",
									"value": null
								},
								{
									"key": "page_size",
									"value": null
								},
								{
									"key": "search",
									"value": null
								},
								{
									"key": "sort",
									"value": null
								},
								{
									"key": "status",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get_promotion_detail",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/promotion/get-one/{{C-promotion_id}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"promotion",
								"get-one",
								"{{C-promotion_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete_promotion",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/promotion/delete/{{C-promotion_id}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"promotion",
								"delete",
								"{{C-promotion_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "edit_promotion",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"code\": \"string\",\n  \"description\": \"string\",\n  \"is_active\": true,\n  \"is_rate\": true,\n  \"max_price_discount\": 0,\n  \"min_order_price\": 0,\n  \"name\": \"string\",\n  \"value\": 0\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/promotion/update/{{C-promotion_id}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"promotion",
								"update",
								"{{C-promotion_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "logistic",
			"item": [
				{
					"name": "ghn",
					"item": [
						{
							"name": "verify_ghn_token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"/**",
											" * Step 1: dk tài khoản từ trang https://5sao.ghn.dev => nhớ nhập đúng SDT để nhận OTP",
											" * Step 2: login > chủ cửa hàng > xem token",
											" */",
											"",
											"let ghn_token = \"5ca8348c-3538-11ef-8e53-0a00184fe694\";",
											"pm.environment.set(\"ghn_token\",ghn_token);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsData = pm.response.json();",
											"pm.environment.set(\"ghn_partner_id\",jsData.data[0]._id);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "authorization",
										"value": "Bearer {{C-userToken}}"
									}
								],
								"url": {
									"raw": "{{finone_url}}/fo-logistics/api/v1/ghn/shop/get-list?token={{ghn_token}}",
									"host": [
										"{{finone_url}}"
									],
									"path": [
										"fo-logistics",
										"api",
										"v1",
										"ghn",
										"shop",
										"get-list"
									],
									"query": [
										{
											"key": "token",
											"value": "{{ghn_token}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "request_to_link",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// số dt thật để nhận otp",
											"",
											"let ghn_phone_number = \"0907470430\";",
											"pm.environment.set(\"ghn_phone_number\",ghn_phone_number);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "authorization",
										"value": "Bearer {{C-userToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"partner_type\": \"ghn\",\n    \"phone_number\": \"{{ghn_phone_number}}\",\n    \"token\": \"{{ghn_token}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{finone_url}}/fo-logistics/api/v1/shop/request-link",
									"host": [
										"{{finone_url}}"
									],
									"path": [
										"fo-logistics",
										"api",
										"v1",
										"shop",
										"request-link"
									]
								}
							},
							"response": []
						},
						{
							"name": "confirm_otp_to_link",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "authorization",
										"value": "Bearer {{C-userToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{ghn_phone_number}}\",\n    \"otp\": \"628182\",\n    \"partner_id\": \"{{ghn_partner_id}}\",\n    \"partner_type\": \"ghn\",\n    \"phone_number\": \"{{ghn_phone_number}}\",\n    \"token\": \"{{ghn_token}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev-api.finan.one/fo-logistics/api/v1/shop/link",
									"protocol": "https",
									"host": [
										"dev-api",
										"finan",
										"one"
									],
									"path": [
										"fo-logistics",
										"api",
										"v1",
										"shop",
										"link"
									]
								}
							},
							"response": []
						},
						{
							"name": "verify_ghn_account",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "authorization",
										"value": "Bearer {{C-userToken}}"
									}
								],
								"url": {
									"raw": "https://dev-api.finan.one/fo-logistics/api/v1/business-has-shop/get-list?ref_type=finan-one&ref_id=241",
									"protocol": "https",
									"host": [
										"dev-api",
										"finan",
										"one"
									],
									"path": [
										"fo-logistics",
										"api",
										"v1",
										"business-has-shop",
										"get-list"
									],
									"query": [
										{
											"key": "ref_type",
											"value": "finan-one"
										},
										{
											"key": "ref_id",
											"value": "241"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "calculate_ghn_fee",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "authorization",
										"value": "Bearer {{C-userToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"ref_id\": \"241\",\n    \"ref_type\": \"finan-one\",\n    \"pickup_address\": {\n        // \"name\": \"[API][Business] CL qRwhXxFS96\",\n        // \"phone_number\": \"0907470430\",\n        \"area_level1_name\": \"Phường Phú Thọ Hòa\",\n        \"area_level2_name\": \"Quận Tân Phú\",\n        \"area_level3_name\": \"Thành phố Hồ Chí Minh\",\n        \"detail_address\": \"68 Phú Thọ Hoà\"\n    },\n    \"shipping_address\": {\n        // \"name\": \"Test receiver\",\n        // \"phone_number\": \"0983080145\",\n        \"detail_address\": \"15\",\n        \"area_level3_name\": \"Thành phố Hồ Chí Minh\",\n        \"area_level2_name\": \"Huyện Bình Chánh\",\n        \"area_level1_name\": \"Xã An Phú Tây\"\n    },\n    \"package_specification\": {\n        \"weight\": 109,\n        \"length\": 10,\n        \"width\": 20,\n        \"height\": 10\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev-api.finan.one/fo-logistics/api/v1/service/get-list-fee",
									"protocol": "https",
									"host": [
										"dev-api",
										"finan",
										"one"
									],
									"path": [
										"fo-logistics",
										"api",
										"v1",
										"service",
										"get-list-fee"
									]
								}
							},
							"response": []
						},
						{
							"name": "[]create_pos_order_include_fee",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "authorization",
										"value": "Bearer {{C-userToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"order_code\": \"HD6\",\n    \"branch_id\": \"1ce9ad9a-5ea7-4175-8b2c-ccec4d88f144\",\n    \"cart_status\": \"waiting_confirm\",\n    \"contact_id\": \"517c772a-dcc3-4033-94d1-976168bb41c3\",\n    \"discount_amount\": 0,\n    \"discounts\": [\n        {\n            \"is_rate\": true,\n            \"value\": 0\n        }\n    ],\n    \"is_pre_tax\": false,\n    \"items\": [\n        {\n            \"product_id\": \"081855f6-141b-4abf-b242-1d48f254cccf\",\n            \"account_id\": 0,\n            \"batches\": [],\n            \"currency\": \"\",\n            \"item_amount\": 183000,\n            \"before_tax_amount\": 183000,\n            \"discount_amount\": 0,\n            \"item_tax_amount\": 0,\n            \"total_item_amount\": 183000,\n            \"total_line_item_amount\": 183000,\n            \"after_tax_amount\": 183000,\n            \"sku_id\": \"743ccce5-6c90-4cbe-ad4d-eb4477672b7e\",\n            \"sku_name\": \"[API] imei non_variant di51pqMB - [API] imei non_variant di51pqMB\",\n            \"note\": \"\",\n            \"uom\": \"\",\n            \"uom_id\": null,\n            \"quantity\": 1,\n            \"taxes\": []\n        }\n    ],\n    \"items_amount\": 183000,\n    \"sub_total_amount\": 183000,\n    \"surcharge_amount\": 183000,\n    \"surcharges\": [],\n    \"tax_amount\": 0,\n    \"tax_type\": \"price_excluding_tax\",\n    \"total_amount\": 183000,\n    \"shipping_fee_amount\": 112201,\n    \"value_at\": \"2024-06-28T04:57:52.011Z\",\n    \"shipping\": {\n        \"ref_id\": \"241\",\n        \"ref_type\": \"finan-one\",\n        \"service_id\": \"53320\",\n        \"shipping_fee\": 112201,\n        \"pickup_address\": {\n            \"name\": \"[API][Business] CL qRwhXxFS96\",\n            \"phone_number\": \"0907470430\",\n            \"area_level1_name\": \"Phường Phú Thọ Hòa\",\n            \"area_level2_name\": \"Quận Tân Phú\",\n            \"area_level3_name\": \"Thành phố Hồ Chí Minh\",\n            \"detail_address\": \"68 Phú Thọ Hoà\"\n        },\n        \"shipping_address\": {\n            \"name\": \"Test receiver\",\n            \"phone_number\": \"0983080145\",\n            \"detail_address\": \"15\",\n            \"area_level3_name\": \"Thành phố Hồ Chí Minh\",\n            \"area_level2_name\": \"Huyện Củ Chi\",\n            \"area_level1_name\": \"Xã An Nhơn Tây\"\n        },\n        \"cod_amount\": 295201,\n        \"is_paid_by_receiver\": true,\n        \"note\": \"Test logistic note\",\n        \"requirement\": \"allow_check\",\n        \"partner_type\": \"ghn\",\n        \"package_specification\": {\n            \"weight\": \"109\",\n            \"length\": 10,\n            \"width\": 20,\n            \"height\": 10\n        },\n        \"package_fee\": {\n            \"name\": \"Hàng nhẹ\",\n            \"description\": \"\",\n            \"partner_type\": \"ghn\",\n            \"partner_id\": \"53320\",\n            \"shipping_fee\": 112201\n        },\n        \"weight_unit\": \"gram\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dev-api.finan.one/fo-order/api/v1/pos-order/create",
									"protocol": "https",
									"host": [
										"dev-api",
										"finan",
										"one"
									],
									"path": [
										"fo-order",
										"api",
										"v1",
										"pos-order",
										"create"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "ahamove",
					"item": []
				}
			]
		},
		{
			"name": "banking",
			"item": [
				{
					"name": "viet_qr_MB",
					"item": [
						{
							"name": "verify_account_by_bank",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// xài chung cho liên kết, cả BIDV và MB"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"account_name\": \"string\",\n  \"account_number\": \"string\",\n  \"provider_code\": \"string\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{finone_url}}/fo-banking/api/v1/viet-qr-pro/verify-account",
									"host": [
										"{{finone_url}}"
									],
									"path": [
										"fo-banking",
										"api",
										"v1",
										"viet-qr-pro",
										"verify-account"
									]
								}
							},
							"response": []
						},
						{
							"name": "link_viet_qr_pro",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"account_name\": \"string\",\n  \"account_number\": \"string\",\n  \"provider_code\": \"string\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{finone_url}}/fo-ledger/api/v1/viet-qr-pro/linking",
									"host": [
										"{{finone_url}}"
									],
									"path": [
										"fo-ledger",
										"api",
										"v1",
										"viet-qr-pro",
										"linking"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "shinhan",
					"item": [
						{
							"name": "verify_shinhan_card",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{C-userToken}}"
									}
								],
								"url": {
									"raw": "{{finone_url}}/fo-banking/api/v1/beneficiary-account/verify?account_number=700071059955&bank_id=616",
									"host": [
										"{{finone_url}}"
									],
									"path": [
										"fo-banking",
										"api",
										"v1",
										"beneficiary-account",
										"verify"
									],
									"query": [
										{
											"key": "account_number",
											"value": "700071059955"
										},
										{
											"key": null,
											"value": "NGUYEN NGOC SON",
											"disabled": true
										},
										{
											"key": "bank_id",
											"value": "616"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "get_list_bank_account",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{C-userToken}}"
									}
								],
								"url": {
									"raw": "{{finone_url}}/fo-banking/api/v1/beneficiary-account/get-list",
									"host": [
										"{{finone_url}}"
									],
									"path": [
										"fo-banking",
										"api",
										"v1",
										"beneficiary-account",
										"get-list"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "common",
					"item": [
						{
							"name": "get_bank_list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsData = pm.response.json();",
											"console.log(\"total banks: \" + jsData.data.length);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{C-userToken}}"
									}
								],
								"url": {
									"raw": "{{finone_url}}/fo-banking/api/v1/bank-support/get-list",
									"host": [
										"{{finone_url}}"
									],
									"path": [
										"fo-banking",
										"api",
										"v1",
										"bank-support",
										"get-list"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_bank_setting",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsData = pm.response.json();",
											"console.log(\"total banks: \" + jsData.data.length);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{C-userToken}}"
									}
								],
								"url": {
									"raw": "{{finone_url}}/fo-business/api/v1/bank-setting/get-bank-setting",
									"host": [
										"{{finone_url}}"
									],
									"path": [
										"fo-business",
										"api",
										"v1",
										"bank-setting",
										"get-bank-setting"
									]
								}
							},
							"response": []
						},
						{
							"name": "edit_bank_setting",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsData = pm.response.json();",
											"console.log(\"total banks: \" + jsData.data.length);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{C-userToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"string\",\n  \"qc_amount_default\": 0,\n  \"qc_coa_id_default\": 0,\n  \"qc_note_default\": \"string\",\n  \"using_voice_setting\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{finone_url}}/fo-business/api/v1/bank-setting/update",
									"host": [
										"{{finone_url}}"
									],
									"path": [
										"fo-business",
										"api",
										"v1",
										"bank-setting",
										"update"
									]
								}
							},
							"response": []
						},
						{
							"name": "gen_buyer_payment_via_qr",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"/**",
											" * encryptString",
											" */",
											"function encryptString(keyHex, plaintext) {",
											"    const key = CryptoJS.enc.Utf8.parse(keyHex);",
											"    const iv = CryptoJS.lib.WordArray.random(128 / 8);",
											"",
											"    const encrypted = CryptoJS.AES.encrypt(CryptoJS.enc.Utf8.parse(plaintext), key, {",
											"        iv: iv,",
											"        mode: CryptoJS.mode.CFB,",
											"        padding: CryptoJS.pad.NoPadding",
											"    });",
											"",
											"    const ciphertextWithIVHex = iv.toString() + encrypted.ciphertext.toString();",
											"    return ciphertextWithIVHex;",
											"}",
											"",
											"const key = pm.environment.get(\"secret_key\"); // Make sure your key is 32 bytes long",
											"// console.log(\"key: \" + key);",
											"",
											"let invoice_obj = pm.environment.get(\"C-invoice_obj\");",
											"const payload_data = {",
											"    \"object_code\": invoice_obj.system_code,",
											"    \"object_type\": \"invoice\",",
											"    \"branch_id\": pm.environment.get(\"C-business_id\"),",
											"    \"payment_account_id\": invoice_obj.payment_account_id",
											"};",
											"console.log(\"payload_data:\", payload_data);",
											"",
											"const raw_data = JSON.stringify(payload_data);",
											"",
											"const encryptedText = encryptString(key, raw_data);",
											"// console.log(\"Encrypted:\" + encryptedText);",
											"let payload = {",
											"    \"payload\":encryptedText",
											"}",
											"pm.environment.set(\"C-payload\",JSON.stringify(payload));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// ====================================== parser cURL",
											"function parseCURL(request_api){",
											"    let curl = \"\";",
											"    if(request_api.method == \"PUT\"){",
											"        curl = \"curl --location --request PUT \";",
											"    } else if(request_api.method == \"DELETE\"){",
											"        curl = \"curl --location --request DELETE \";",
											"    } else {",
											"        curl = \"curl --location \";",
											"    }",
											"    curl += \"'\" + request_api.url.protocol + \"://\"",
											"    // host",
											"    for(let i in request_api.url.host){",
											"        if(i >= request_api.url.host.length - 1){",
											"            curl += request_api.url.host[i] + \"/\";",
											"        } else {",
											"            curl += request_api.url.host[i] + \".\";",
											"        }",
											"    }",
											"    // path",
											"    for(let i in request_api.url.path){",
											"        if(i >= request_api.url.path.length - 1){",
											"            curl += request_api.url.path[i];",
											"        } else {",
											"            curl += request_api.url.path[i] + \"/\";",
											"        }",
											"    }",
											"    // query (if have)",
											"    if(\"query\" in request_api.url){",
											"        if(request_api.url.length > 0){",
											"            curl += \"? \";",
											"            for(let i in request_api.url.query){",
											"                if(i >= request_api.url.query.length - 1){",
											"                    curl += request_api.url.query[i].key + \"=\" + request_api.url.query[i].value + \"' \";",
											"                } else {",
											"                    curl += request_api.url.query[i].key + \"=\" + request_api.url.query[i].value + \"&\";",
											"                }",
											"            }",
											"        } else {",
											"            curl += \"' \";",
											"        }",
											"    } else {",
											"        curl += \"' \";",
											"    }",
											"    // header",
											"    for(let i in request_api.header){",
											"        if(i >= request_api.header.length - 1){",
											"            curl += \"--header '\" + request_api.header[i].key + \": \" + request_api.header[i].value + \"'\";",
											"        } else {",
											"            curl += \"--header '\" + request_api.header[i].key + \": \" + request_api.header[i].value + \"' \";",
											"        }",
											"    }",
											"    switch(request_api.method){",
											"        case \"POST\":",
											"            curl += \" --data '\" + request_api.body.raw + \"'\"",
											"            break;",
											"        case \"PUT\":",
											"            curl += \" --data-raw '\" + request_api.body.raw + \"'\"",
											"            break;",
											"        default:",
											"            break;",
											"    }",
											"    console.log(curl);",
											"    return curl;",
											"}",
											"const request_api = pm.request.toJSON();",
											"parseCURL(request_api);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"let jsData = JSON.parse(responseBody);",
											"if(pm.response.code == 200){",
											"    console.log(\"debug: \", jsData); // hook",
											"    let testcase = pm.environment.get(\"C-testcase\");",
											"    let invoice_obj = pm.environment.get(\"C-invoice_obj\");",
											"    let list_bank_account = pm.environment.get(\"C-list_bank_account\");",
											"",
											"    let expected_amount;",
											"    if(invoice_obj.total_amount > invoice_obj.paid_amount){",
											"        expected_amount = Math.ceil(invoice_obj.total_amount - invoice_obj.paid_amount);",
											"    } else {",
											"        expected_amount = 0;",
											"    }",
											"",
											"    pm.test(\"amount correctly \" + expected_amount, function () {",
											"        console.log(\"act: \" + jsData.data.amount);",
											"        pm.expect(expected_amount == jsData.data.amount).to.be.true;",
											"    });",
											"",
											"    let expected_account = null;",
											"    for(let i in list_bank_account){",
											"        if(list_bank_account[i].account_id == invoice_obj.payment_account_id){",
											"            expected_account = list_bank_account[i].account_name;",
											"            break;",
											"        }",
											"    }",
											"",
											"    let bank_holder_name = null;",
											"    try {",
											"        bank_holder_name = jsData.data.bank_holder_name;",
											"    } catch {",
											"        console.log(\"Nothing data response\");",
											"    }",
											"    pm.test(\"bank_holder_name correctly \" + expected_account, function () {",
											"        console.log(\"act: \" + bank_holder_name);",
											"        pm.expect(expected_account == bank_holder_name).to.be.true;",
											"    });",
											"",
											"    let today = new Date();",
											"    let account_receivable = pm.environment.get(\"C-account_receivable\");",
											"    let tnx_obj = {",
											"        \"object_key\":invoice_obj.invoice_id,",
											"        \"object_type\":\"invoice\",",
											"        \"account_credit\":account_receivable.id,",
											"        \"account_debit\":invoice_obj.payment_account_id,",
											"        \"amount\":expected_amount,",
											"        \"branch_id\":parseInt(pm.environment.get(\"C-business_id\")),",
											"        \"tnx_type\":\"in\",",
											"        // \"description\":\"TTINV \" + invoice_obj.system_code,",
											"        \"value_at\":today.toISOString()",
											"    }",
											"    pm.environment.set(\"C-tnx_obj\",tnx_obj);",
											"    console.log(\"tnx_obj\",tnx_obj);",
											"",
											"    if(bank_holder_name != null){",
											"        testcase++;",
											"        pm.environment.set(\"C-testcase\",testcase);",
											"        postman.setNextRequest(\"get_list_transaction\"); // get_list_transaction",
											"    } else {",
											"        console.log(\"Can't get banking QR, end test\");",
											"        postman.setNextRequest(null);",
											"    }",
											"} else {",
											"    console.log(\"Can't get list posting, end test\",jsData);",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{C-userToken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{C-payload}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{finone_url}}/fo-ledger/api/v1/payment/create-payment-buyer",
									"host": [
										"{{finone_url}}"
									],
									"path": [
										"fo-ledger",
										"api",
										"v1",
										"payment",
										"create-payment-buyer"
									]
								}
							},
							"response": []
						},
						{
							"name": "hook_payment_via_viet_qr",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let testcase = pm.environment.get(\"C-testcase\");",
											"console.log(\"Testcase: \" + testcase);",
											"",
											"let viet_qr_payment = pm.environment.get(\"C-viet_qr_payment\");",
											"let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
											"",
											"let payload = {",
											"  \"additional\": {",
											"    \"customer_account\": \"\",",
											"    \"customer_name\": \"string\"",
											"  },",
											"  \"amount\": tnx_obj.amount,",
											"  \"bank_account_number\": viet_qr_payment.bank_account.account_number,",
											"  \"bank_holder_name\": viet_qr_payment.bank_account.account_name,",
											"  \"bank_note\": tnx_obj.payment_note,",
											"  \"bank_ref_code\": \"\",",
											"  \"bank_virtual_account_number\": \"\",",
											"  \"bin_code\": \"970422\",",
											"  \"created_at\": tnx_obj.value_at,",
											"  \"merchant_bank_account_id\": viet_qr_payment.bank_account.id,",
											"  \"order_paid_amount\": 0,",
											"  \"order_status\": 0,",
											"  \"order_total_amount\": 0,",
											"  \"partner_code\": \"\",",
											"  \"partner_order_id\": \"\",",
											"  \"txn_id\": \"\",",
											"  \"txn_time\": \"\"",
											"}",
											"",
											"console.log(\"payload: \",payload);",
											"pm.environment.set(\"C-payload\",JSON.stringify(payload));",
											"pm.environment.set(\"C-payment_obj\",payload);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// ====================================== parser cURL",
											"function parseCURL(request_api){",
											"    let curl = \"\";",
											"    switch(request_api.method){",
											"        case \"PUT\":",
											"            curl = \"curl --location --request PUT \";",
											"            break;",
											"        case \"PATCH\":",
											"            curl = \"curl --location --request PATCH \";",
											"            break;",
											"        case \"DELETE\":",
											"            curl = \"curl --location --request DELETE \";",
											"            break;",
											"        default:",
											"            curl = \"curl --location \";",
											"            break;",
											"    }",
											"    curl += \"'\" + request_api.url.protocol + \"://\"",
											"    // host",
											"    for(let i in request_api.url.host){",
											"        if(i >= request_api.url.host.length - 1){",
											"            curl += request_api.url.host[i] + \"/\";",
											"        } else {",
											"            curl += request_api.url.host[i] + \".\";",
											"        }",
											"    }",
											"    // path",
											"    for(let i in request_api.url.path){",
											"        if(i >= request_api.url.path.length - 1){",
											"            curl += request_api.url.path[i];",
											"        } else {",
											"            curl += request_api.url.path[i] + \"/\";",
											"        }",
											"    }",
											"    // query (if have)",
											"    if(\"query\" in request_api.url){",
											"        if(request_api.url.length > 0){",
											"            curl += \"? \";",
											"            for(let i in request_api.url.query){",
											"                if(i >= request_api.url.query.length - 1){",
											"                    curl += request_api.url.query[i].key + \"=\" + request_api.url.query[i].value + \"' \";",
											"                } else {",
											"                    curl += request_api.url.query[i].key + \"=\" + request_api.url.query[i].value + \"&\";",
											"                }",
											"            }",
											"        } else {",
											"            curl += \"' \";",
											"        }",
											"    } else {",
											"        curl += \"' \";",
											"    }",
											"    // header",
											"    for(let i in request_api.header){",
											"        if(i >= request_api.header.length - 1){",
											"            curl += \"--header '\" + request_api.header[i].key + \": \" + request_api.header[i].value + \"'\";",
											"        } else {",
											"            curl += \"--header '\" + request_api.header[i].key + \": \" + request_api.header[i].value + \"' \";",
											"        }",
											"    }",
											"    switch(request_api.method){",
											"        case \"POST\":",
											"            curl += \" --data '\" + request_api.body.raw + \"'\"",
											"            break;",
											"        case \"PUT\": case \"PATCH\":",
											"            curl += \" --data-raw '\" + request_api.body.raw + \"'\"",
											"            break;",
											"        default:",
											"            break;",
											"    }",
											"    console.log(curl);",
											"    return curl;",
											"}",
											"const request_api = pm.request.toJSON();",
											"parseCURL(request_api);",
											"",
											"let jsData = pm.response.json();",
											"if(pm.response.code == 200){",
											"    console.log(\"debug: \", jsData); // hook",
											"    let testcase = pm.environment.get(\"C-testcase\");",
											"",
											"    testcase++;",
											"    pm.environment.set(\"C-testcase\",testcase);",
											"    postman.setNextRequest(\"get_list_transaction\"); // get_list_transaction",
											"} else {",
											"    console.log(\"Can't call hook, end test\",jsData);",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{C-payload}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{finone_url}}/fo-banking/hook/v1/viet-qr-pro",
									"host": [
										"{{finone_url}}"
									],
									"path": [
										"fo-banking",
										"hook",
										"v1",
										"viet-qr-pro"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "bidv",
					"item": [
						{
							"name": "create_bidv_account",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"account_id\": \"string\",\n  \"bank_id\": \"string\",\n  \"coa_name\": \"string\",\n  \"init_balance_amount\": 0,\n  \"otp\": \"string\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{finone_url}}/fo-banking/api/v1/viet-qr-pro/account/confirm",
									"host": [
										"{{finone_url}}"
									],
									"path": [
										"fo-banking",
										"api",
										"v1",
										"viet-qr-pro",
										"account",
										"confirm"
									]
								}
							},
							"response": []
						},
						{
							"name": "unlink_bidv_account",
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"account_id\": \"string\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{finone_url}}/fo-banking/api/v1/viet-qr-pro/account/cancel",
									"host": [
										"{{finone_url}}"
									],
									"path": [
										"fo-banking",
										"api",
										"v1",
										"viet-qr-pro",
										"account",
										"cancel"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "mb-alias",
			"item": [
				{
					"name": "get_list_mb_alias",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"",
									"    let list_bank_account = [];",
									"    for(let j in jsData.data[0].accounts){",
									"        // if(jsData.data[0].accounts[j].provider_id != \"\"){ // remove va bank account out list",
									"            list_bank_account[list_bank_account.length] = {",
									"                \"account_id\":jsData.data[0].accounts[j].id,",
									"                \"account_name\":jsData.data[0].accounts[j].account_name,",
									"                \"account_number\":jsData.data[0].accounts[j].account_number,",
									"                \"account_name_custom\":jsData.data[0].accounts[j].account_name_custom,",
									"                \"account_key\":jsData.data[0].accounts[j].account_key,",
									"                \"account_type\":jsData.data[0].accounts[j].account_type,",
									"                \"status\":jsData.data[0].accounts[j].status,",
									"                \"external_account_id\":jsData.data[0].accounts[j].external_account_id,",
									"                \"provider_id\":jsData.data[0].accounts[j].provider_id,",
									"                \"total_balance_amount\":jsData.data[0].accounts[j].total_balance_amount",
									"            }",
									"        // }",
									"    }",
									"",
									"    switch(testcase){",
									"        case 2:",
									"            pm.test(\"Got list bank account\", function () {",
									"                pm.expect(list_bank_account.length > 0).to.be.true;",
									"            });",
									"",
									"            pm.environment.set(\"C-list_bank_account\",list_bank_account);",
									"",
									"            postman.setNextRequest(\"get_list_pos_order\"); // get_list_pos_order",
									"            break;",
									"        case 4:",
									"            let old_list_bank_account = pm.environment.get(\"C-list_bank_account\");",
									"            let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"            let configs = pm.environment.get(\"C-configs\");",
									"",
									"            let expected_balance_amout, expected_account_name;",
									"            for(let j in old_list_bank_account){",
									"                if(tnx_obj.account_debit == old_list_bank_account[j].account_id){",
									"                    if(configs.test_payment_method == \"viet_qr_pro_mb\"){",
									"                        expected_balance_amout = old_list_bank_account[j].total_balance_amount + tnx_obj.amount;",
									"                    } else {",
									"                        expected_balance_amout = old_list_bank_account[j].total_balance_amount + tnx_obj.after_fee_amount;",
									"                    }",
									"                    expected_account_name = old_list_bank_account[j].account_name;",
									"                    break;",
									"                }",
									"            }",
									"",
									"            let actual_balance_amout;",
									"            for(let j in jsData.data[0].accounts){",
									"                if(tnx_obj.account_debit == jsData.data[0].accounts[j].id){",
									"                    actual_balance_amout = jsData.data[0].accounts[j].total_balance_amount;",
									"                    break;",
									"                }",
									"            }",
									"",
									"            pm.test(\"total_balance_amount of \" + expected_account_name + \" increase \" + tnx_obj.amount, function () {",
									"                console.log(\"act: \" + actual_balance_amout);",
									"                console.log(\"exp: \" + expected_balance_amout);",
									"                pm.expect(actual_balance_amout == expected_balance_amout).to.be.true;",
									"            });",
									"",
									"            postman.setNextRequest(\"get_list_pos_order\"); // get_list_pos_order",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get list payment account, end test\", jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-ledger/api/v1/account/get-list?is_alias=true&parent_account_id=1004389",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-ledger",
								"api",
								"v1",
								"account",
								"get-list"
							],
							"query": [
								{
									"key": "account_key",
									"value": "",
									"disabled": true
								},
								{
									"key": "business_id",
									"value": "",
									"disabled": true
								},
								{
									"key": "coa_type",
									"value": "",
									"disabled": true
								},
								{
									"key": "id",
									"value": "",
									"disabled": true
								},
								{
									"key": "is_alias",
									"value": "true"
								},
								{
									"key": "parent_account_id",
									"value": "1004389"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get_list_bank_transaction",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"if(testcase == 4){",
									"    let configs = pm.environment.get(\"C-configs\");",
									"    if(configs.test_payment_method == \"viet_qr_pro_mb\"){",
									"        setTimeout(function(){}, configs.timeout);",
									"    }",
									"}",
									"",
									"// Add or modify query parameters",
									"let queryParams = pm.request.url.query;",
									"queryParams.add({key: 'account_alias_id', value: ''});",
									"pm.request.url.query = queryParams;"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let configs = pm.environment.get(\"C-configs\");",
									"    let total_tnx = null;",
									"    try {",
									"        total_tnx = jsData.meta.total_rows;",
									"    } catch {",
									"        console.log(\"Can't get total tnx\");",
									"    }",
									"",
									"    switch(testcase){",
									"        case 2:",
									"            pm.test(\"Got total tnx! \" + total_tnx, function () {",
									"                pm.expect(total_tnx != null).to.be.true;",
									"            });",
									"            pm.environment.set(\"C-total_tnx\",total_tnx);",
									"            console.log(\"total_tnx: \" + total_tnx);",
									"",
									"            testcase++;",
									"            pm.environment.set(\"C-testcase\",testcase);",
									"            ",
									"            if(configs.is_buyer_gen){",
									"                postman.setNextRequest(\"gen_viet_qr_by_buyer\"); // gen_viet_qr_by_buyer",
									"            } else {",
									"                postman.setNextRequest(\"gen_viet_qr\"); // gen_viet_qr",
									"            }",
									"            break;",
									"        case 4:",
									"            let old_total_tnx = pm.environment.get(\"C-total_tnx\");",
									"            let tnx_obj = pm.environment.get(\"C-tnx_obj\");",
									"",
									"            let isFound = false;",
									"            if(configs.test_payment_method == \"viet_qr_pro_mb\"){",
									"                pm.test(\"Total tnx increase 1\", function () {",
									"                    console.log(\"Actual: \" + total_tnx);",
									"                    console.log(\"Expected: \" + (old_total_tnx + 1));",
									"                    pm.expect(total_tnx == old_total_tnx + 1).to.be.true;",
									"                });",
									"                ",
									"                for(let i in jsData.data){",
									"                    if(tnx_obj.object_id == jsData.data[i].object_id && jsData.data[i].is_txn_bank){ // jsData.data[i].description == tnx_obj.description => hiện tại ko ghi discription cho tnx bank nữa",
									"                        tnx_obj.tnx_id = jsData.data[i].id;",
									"                        tnx_obj.payment_id = jsData.data[i].payment_id;",
									"                        pm.environment.set(\"C-tnx_obj\",tnx_obj);",
									"                        isFound = true;",
									"                        pm.test(\"amount of tnx correctly! \" + tnx_obj.amount, function () {",
									"                            pm.expect(tnx_obj.amount == jsData.data[i].amount).to.be.true;",
									"                        });",
									"",
									"                        pm.test(\"txn_type of tnx correctly! \" + tnx_obj.txn_type, function () {",
									"                            pm.expect(tnx_obj.txn_type == jsData.data[i].txn_type).to.be.true;",
									"                        });",
									"",
									"                        pm.test(\"account_id of tnx correctly! \" + tnx_obj.account_debit, function () {",
									"                            pm.expect(tnx_obj.account_debit == jsData.data[i].account_id).to.be.true;",
									"                        });",
									"",
									"                        pm.test(\"category_id of tnx correctly! \" + tnx_obj.account_credit, function () {",
									"                            pm.expect(tnx_obj.account_credit == jsData.data[i].category_id).to.be.true;",
									"                        });",
									"",
									"                        pm.test(\"value_at of tnx correctly! \" + tnx_obj.value_at.substring(0,19), function () {",
									"                            let act_value_at = jsData.data[i].value_at.substring(0,19);",
									"                            console.log(\"actual value_at: \" + act_value_at);",
									"                            pm.expect(tnx_obj.value_at.substring(0,16) == act_value_at.substring(0,16)).to.be.true; // tạm thời lấy mốc giờ +7 nên fix cứng, sau này sẽ dùng biến",
									"                        });",
									"",
									"                        pm.test(\"object_id of tnx correctly! \" + tnx_obj.object_id, function () {",
									"                            pm.expect(tnx_obj.object_type).to.eql(jsData.data[i].object_type);",
									"                        });",
									"",
									"                        // payment_method => chỉ trả trong payment object",
									"                        // pm.test(\"payment_method of tnx is ! `bank_transfer`\", function () {",
									"                        //     pm.expect(\"bank_transfer\").to.eql(jsData.data[i].payment_method);",
									"                        // });",
									"                        break;",
									"                    }",
									"                }",
									"            } else {",
									"                pm.test(\"Total tnx increase 2\", function () {",
									"                    console.log(\"Actual: \" + total_tnx);",
									"                    console.log(\"Expected: \" + (old_total_tnx + 2));",
									"                    pm.expect(total_tnx == old_total_tnx + 2).to.be.true;",
									"                });",
									"                ",
									"                let payment_tnx = null, fee_tnx = null;",
									"                let count_tnx = 0;",
									"                for(let i in jsData.data){",
									"                    if(jsData.data[i].payment != null){",
									"                        if((tnx_obj.object_id == jsData.data[i].object_id || tnx_obj.object_id == jsData.data[i].payment.object_id) && jsData.data[i].is_txn_bank){ // xử lý tạm vì có thể bị miss payment",
									"                            count_tnx++;",
									"                            if(jsData.data[i].txn_type == \"in\"){",
									"                                payment_tnx = jsData.data[i];",
									"                                // console.log(\"payment_tnx:\",payment_tnx);",
									"                            } else {",
									"                                fee_tnx = jsData.data[i];",
									"                                // console.log(\"fee_tnx:\",fee_tnx);",
									"                            }",
									"                        }",
									"                    } else {",
									"                        if(tnx_obj.object_id == jsData.data[i].object_id && jsData.data[i].is_txn_bank){ // xử lý tạm vì có thể bị miss payment",
									"                            count_tnx++;",
									"                            if(jsData.data[i].txn_type == \"in\"){",
									"                                payment_tnx = jsData.data[i];",
									"                                // console.log(\"payment_tnx:\",payment_tnx);",
									"                            } else {",
									"                                fee_tnx = jsData.data[i];",
									"                                // console.log(\"fee_tnx:\",fee_tnx);",
									"                            }",
									"                        }",
									"                    }",
									"",
									"                    if(count_tnx == 2){",
									"                        isFound = true;",
									"                        break;",
									"                    }",
									"                }",
									"",
									"                tnx_obj.tnx_payment_id = payment_tnx.id;",
									"                tnx_obj.tnx_fee_id = fee_tnx.id;",
									"                tnx_obj.payment_id = payment_tnx.payment_id;",
									"                pm.environment.set(\"C-tnx_obj\",tnx_obj);",
									"                ",
									"                pm.test(\"amount of tnx correctly! \" + tnx_obj.amount, function () {",
									"                    pm.expect(tnx_obj.amount == payment_tnx.amount).to.be.true;",
									"                });",
									"",
									"                pm.test(\"base_fee_amount of tnx correctly! \" + tnx_obj.base_fee_amount, function () {",
									"                    pm.expect(tnx_obj.base_fee_amount == fee_tnx.amount).to.be.true;",
									"                });",
									"",
									"                pm.test(\"account_id of payment_tnx correctly! \" + tnx_obj.account_debit, function () {",
									"                    pm.expect(tnx_obj.account_debit == payment_tnx.account_id).to.be.true;",
									"                });",
									"",
									"                pm.test(\"category_id of payment_tnx correctly! \" + tnx_obj.account_credit, function () {",
									"                    pm.expect(tnx_obj.account_credit == payment_tnx.category_id).to.be.true;",
									"                });",
									"",
									"                pm.test(\"account_id of fee_tnx correctly! \" + tnx_obj.account_debit, function () {",
									"                    pm.expect(tnx_obj.account_debit == fee_tnx.account_id).to.be.true;",
									"                });",
									"",
									"                let account_fee = pm.environment.get(\"C-account_fee\");",
									"                pm.test(\"category_id of fee_tnx correctly! \" + tnx_obj.account_credit, function () {",
									"                    pm.expect(account_fee.id == fee_tnx.category_id).to.be.true;",
									"                });",
									"",
									"                pm.test(\"value_at of tnx correctly! \" + tnx_obj.value_at.substring(0,19), function () {",
									"                    let act_value_at = payment_tnx.value_at.substring(0,19);",
									"                    console.log(\"actual value_at: \" + act_value_at);",
									"                    pm.expect(tnx_obj.value_at.substring(0,16) == act_value_at.substring(0,16)).to.be.true; // tạm thời lấy mốc giờ +7 nên fix cứng, sau này sẽ dùng biến",
									"                });",
									"",
									"                pm.test(\"object_type of payment_tnx correctly! \" + tnx_obj.object_type, function () {",
									"                    pm.expect(tnx_obj.object_type).to.eql(payment_tnx.object_type);",
									"                });",
									"",
									"                pm.test(\"object_type of fee_tnx correctly! \", function () {",
									"                    pm.expect(\"transaction\").to.eql(fee_tnx.object_type);",
									"                });",
									"",
									"                pm.test(\"object_id of payment_tnx correctly! \" + tnx_obj.object_id, function () {",
									"                    pm.expect(tnx_obj.object_id).to.eql(payment_tnx.object_id);",
									"                });",
									"",
									"                pm.test(\"object_id of fee_tnx correctly! \" + tnx_obj.object_id, function () {",
									"                    pm.expect(tnx_obj.tnx_payment_id).to.eql(fee_tnx.object_id);",
									"                });",
									"            }",
									"",
									"            pm.test(\"Found new(2) tnx\", function () {",
									"                pm.expect(isFound).to.be.true;",
									"            });",
									"",
									"            if(isFound){",
									"                postman.setNextRequest(\"get_transaction_detail\"); // get_transaction_detail (get tnx detail đang lỗi nên tạm thời skip) get_report_cash_flow",
									"            } else {",
									"                postman.setNextRequest(null);",
									"            }",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get list tnx, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-ledger/api/v1/transaction/get-list?page=1&page_size=50&sort&account_alias_id",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-ledger",
								"api",
								"v1",
								"transaction",
								"get-list"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "page_size",
									"value": "50"
								},
								{
									"key": "sort",
									"value": null
								},
								{
									"key": "account_alias_id",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "create_mb_alias",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"alias_name\": \"[API] MB Alias 01\",\n    \"master_account_id\": \"71d053b4-976a-48dc-957d-b92d0f18f075\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-banking/api/v1/bank-account/create-new-alias",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-banking",
								"api",
								"v1",
								"bank-account",
								"create-new-alias"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "forecast",
			"item": [
				{
					"name": "get_chart_forecast_balance",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Host",
								"value": "dev-api.finan.one",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"period\": \"month\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-ledger/api/v1/report/chart-forecast-balance",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-ledger",
								"api",
								"v1",
								"report",
								"chart-forecast-balance"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_forecast_cash_flow_summary",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "x-location-timezone",
								"value": "Asia/Ho_Chi_Minh",
								"type": "text",
								"disabled": true
							},
							{
								"key": "x-locale",
								"value": "en",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Host",
								"value": "dev-api.finan.one",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"period\": \"month\",\n    \"business_id\": {{C-business_id}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-ledger/api/v1/report/forecast-cash-flow-summary",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-ledger",
								"api",
								"v1",
								"report",
								"forecast-cash-flow-summary"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_forecast_cash_flow_detail",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Host",
								"value": "dev-api.finan.one",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"period\": \"month\",\n    \"business_id\": {{C-business_id}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-ledger/api/v1/report/forecast-cash-flow-detail",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-ledger",
								"api",
								"v1",
								"report",
								"forecast-cash-flow-detail"
							]
						}
					},
					"response": []
				},
				{
					"name": "recommend_action",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Host",
								"value": "dev-api.finan.one",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"period\": \"month\",\n    \"business_id\": {{C-business_id}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/forecast/recommend-action",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"forecast",
								"recommend-action"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_over_due",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Host",
								"value": "dev-api.finan.one",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/forecast/get_over_due",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"forecast",
								"get_over_due"
							]
						}
					},
					"response": []
				},
				{
					"name": "save_over_due",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Host",
								"value": "dev-api.finan.one",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"amount\": 0,\n  \"brand_id\": \"string\",\n  \"due_at\": \"string\",\n  \"object_id\": \"string\",\n  \"scenario_id\": \"string\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/forecast/get_over_due",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"forecast",
								"get_over_due"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_scenario",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Host",
								"value": "dev-api.finan.one",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/scenario/get-scenario?page=1&page_size=50",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"scenario",
								"get-scenario"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "page_size",
									"value": "50"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "save_scenario",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Host",
								"value": "dev-api.finan.one",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"string\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/scenario/save-scenario",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"scenario",
								"save-scenario"
							]
						}
					},
					"response": []
				},
				{
					"name": "create_expected_plan",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Host",
								"value": "dev-api.finan.one",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"account_id\": \"string\",\n  \"amount\": 0,\n  \"branch_id\": \"string\",\n  \"currency\": \"string\",\n  \"expected_at\": \"string\",\n  \"expected_name\": \"string\",\n  \"object_id\": \"string\",\n  \"object_type\": \"string\",\n  \"scenario_id\": \"string\",\n  \"txn_type\": \"string\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-ledger/api/v1/expected-plan/create",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-ledger",
								"api",
								"v1",
								"expected-plan",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "edit_expected_plan",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Host",
								"value": "dev-api.finan.one",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"account_id\": \"string\",\n  \"amount\": 0,\n  \"branch_id\": \"string\",\n  \"currency\": \"string\",\n  \"expected_at\": \"string\",\n  \"expected_name\": \"string\",\n  \"object_id\": \"string\",\n  \"object_type\": \"string\",\n  \"scenario_id\": \"string\",\n  \"txn_type\": \"string\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-ledger/api/v1/expected-plan/update/{{C-expected_plan_id}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-ledger",
								"api",
								"v1",
								"expected-plan",
								"update",
								"{{C-expected_plan_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete_expected_plan",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Host",
								"value": "dev-api.finan.one",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-ledger/api/v1/expected-plan/delete/{{C-expected_plan_id}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-ledger",
								"api",
								"v1",
								"expected-plan",
								"delete",
								"{{C-expected_plan_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_expected_plan_detail",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Host",
								"value": "dev-api.finan.one",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-ledger/api/v1/expected-plan/get-one/{{C-expected_plan_id}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-ledger",
								"api",
								"v1",
								"expected-plan",
								"get-one",
								"{{C-expected_plan_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_expected_plan_list",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Host",
								"value": "dev-api.finan.one",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-ledger/api/v1/expected-plan/get-list",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-ledger",
								"api",
								"v1",
								"expected-plan",
								"get-list"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "AP",
			"item": [
				{
					"name": "https://api.finan.one/fo-business/api/v1/admin-portal/business/get-list-own/8a3330c2-5faa-4c59-8f35-35bf055985dd",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "authority",
								"value": "api.finan.one"
							},
							{
								"key": "accept",
								"value": "application/json, text/plain, */*"
							},
							{
								"key": "accept-language",
								"value": "en-US,en;q=0.9,vi;q=0.8"
							},
							{
								"key": "access-control-allow-origin",
								"value": "*"
							},
							{
								"key": "authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJGTyBVc2VyIiwic3ViIjoiNDhmNjgxOGItNWZmNC00MTZhLThjODktODA3MjY1ZDJhN2MzIiwiYXVkIjpbIkZPIFVzZXIiXSwiZXhwIjoxNzI2MTI0NTEzLCJuYmYiOjE3MjM1MzI1MTMsImlhdCI6MTcyMzUzMjUxMywib3JnX2lkIjoiIiwiYnVzaW5lc3NfaWQiOiIiLCJkZXZpY2VfaWQiOiI2NjcxYWM4ZGU3MzY5ODJkMjg1Y2NmNjdiZjJjMDJlOCIsInBsYXRmb3JtX2tleSI6ImRlc2t0b3Atd2ViIiwidXNlcl9pZCI6IjQ4ZjY4MThiLTVmZjQtNDE2YS04Yzg5LTgwNzI2NWQyYTdjMyIsImxvZ2luX21ldGhvZCI6InBhc3N3b3JkIiwiYXBwX3ZlcnNpb24iOiIxLjEuMSIsInNlY3VyaXR5X3JvbGUiOjY0LCJyZWZyZXNoX3Rva2VuX2lkIjoiNjc5OGEyNzMtMWVkMy00ODFiLTk4OWUtYjU0MmIxYzVlMzQwIn0.a6G93wNDKpI06XQigJe5t-CvI8ZF6ZrWHk4ML5qkE7s"
							},
							{
								"key": "origin",
								"value": "https://admin.finan.one"
							},
							{
								"key": "referer",
								"value": "https://admin.finan.one/"
							},
							{
								"key": "sec-ch-ua",
								"value": "\"Google Chrome\";v=\"113\", \"Chromium\";v=\"113\", \"Not-A.Brand\";v=\"24\""
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?0"
							},
							{
								"key": "sec-ch-ua-platform",
								"value": "\"macOS\""
							},
							{
								"key": "sec-fetch-dest",
								"value": "empty"
							},
							{
								"key": "sec-fetch-mode",
								"value": "cors"
							},
							{
								"key": "sec-fetch-site",
								"value": "same-site"
							},
							{
								"key": "user-agent",
								"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.0.0 Safari/537.36"
							},
							{
								"key": "x-locale-code",
								"value": "en_US"
							},
							{
								"key": "x-location-timezone",
								"value": "UTC+07:00"
							}
						],
						"url": {
							"raw": "https://api.finan.one/fo-business/api/v1/admin-portal/business/get-list-own/8a3330c2-5faa-4c59-8f35-35bf055985dd",
							"protocol": "https",
							"host": [
								"api",
								"finan",
								"one"
							],
							"path": [
								"fo-business",
								"api",
								"v1",
								"admin-portal",
								"business",
								"get-list-own",
								"8a3330c2-5faa-4c59-8f35-35bf055985dd"
							]
						}
					},
					"response": []
				},
				{
					"name": "https://api.finan.one/fo-user/api/v1/user/get-current",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "authority",
								"value": "api.finan.one"
							},
							{
								"key": "accept",
								"value": "application/json, text/plain, */*"
							},
							{
								"key": "accept-language",
								"value": "en-US,en;q=0.9,vi;q=0.8"
							},
							{
								"key": "access-control-allow-origin",
								"value": "*"
							},
							{
								"key": "authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJGTyBVc2VyIiwic3ViIjoiNDhmNjgxOGItNWZmNC00MTZhLThjODktODA3MjY1ZDJhN2MzIiwiYXVkIjpbIkZPIFVzZXIiXSwiZXhwIjoxNzI2MTI0NTEzLCJuYmYiOjE3MjM1MzI1MTMsImlhdCI6MTcyMzUzMjUxMywib3JnX2lkIjoiIiwiYnVzaW5lc3NfaWQiOiIiLCJkZXZpY2VfaWQiOiI2NjcxYWM4ZGU3MzY5ODJkMjg1Y2NmNjdiZjJjMDJlOCIsInBsYXRmb3JtX2tleSI6ImRlc2t0b3Atd2ViIiwidXNlcl9pZCI6IjQ4ZjY4MThiLTVmZjQtNDE2YS04Yzg5LTgwNzI2NWQyYTdjMyIsImxvZ2luX21ldGhvZCI6InBhc3N3b3JkIiwiYXBwX3ZlcnNpb24iOiIxLjEuMSIsInNlY3VyaXR5X3JvbGUiOjY0LCJyZWZyZXNoX3Rva2VuX2lkIjoiNjc5OGEyNzMtMWVkMy00ODFiLTk4OWUtYjU0MmIxYzVlMzQwIn0.a6G93wNDKpI06XQigJe5t-CvI8ZF6ZrWHk4ML5qkE7s"
							},
							{
								"key": "origin",
								"value": "https://admin.finan.one"
							},
							{
								"key": "referer",
								"value": "https://admin.finan.one/"
							},
							{
								"key": "sec-ch-ua",
								"value": "\"Google Chrome\";v=\"113\", \"Chromium\";v=\"113\", \"Not-A.Brand\";v=\"24\""
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?0"
							},
							{
								"key": "sec-ch-ua-platform",
								"value": "\"macOS\""
							},
							{
								"key": "sec-fetch-dest",
								"value": "empty"
							},
							{
								"key": "sec-fetch-mode",
								"value": "cors"
							},
							{
								"key": "sec-fetch-site",
								"value": "same-site"
							},
							{
								"key": "user-agent",
								"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.0.0 Safari/537.36"
							},
							{
								"key": "x-locale-code",
								"value": "en_US"
							},
							{
								"key": "x-location-timezone",
								"value": "UTC+07:00"
							}
						],
						"url": {
							"raw": "https://api.finan.one/fo-user/api/v1/user/get-current",
							"protocol": "https",
							"host": [
								"api",
								"finan",
								"one"
							],
							"path": [
								"fo-user",
								"api",
								"v1",
								"user",
								"get-current"
							]
						}
					},
					"response": []
				},
				{
					"name": "https://api.finan.one/fo-user/api/v1/admin-portal/user/get-list?page=1&page_size=40&platform=&search=&search_type=email&sort=created_at%20desc&state=all",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "authority",
								"value": "api.finan.one"
							},
							{
								"key": "accept",
								"value": "application/json, text/plain, */*"
							},
							{
								"key": "accept-language",
								"value": "en-US,en;q=0.9,vi;q=0.8"
							},
							{
								"key": "access-control-allow-origin",
								"value": "*"
							},
							{
								"key": "authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJGTyBVc2VyIiwic3ViIjoiNDhmNjgxOGItNWZmNC00MTZhLThjODktODA3MjY1ZDJhN2MzIiwiYXVkIjpbIkZPIFVzZXIiXSwiZXhwIjoxNzI2MTI0NTEzLCJuYmYiOjE3MjM1MzI1MTMsImlhdCI6MTcyMzUzMjUxMywib3JnX2lkIjoiIiwiYnVzaW5lc3NfaWQiOiIiLCJkZXZpY2VfaWQiOiI2NjcxYWM4ZGU3MzY5ODJkMjg1Y2NmNjdiZjJjMDJlOCIsInBsYXRmb3JtX2tleSI6ImRlc2t0b3Atd2ViIiwidXNlcl9pZCI6IjQ4ZjY4MThiLTVmZjQtNDE2YS04Yzg5LTgwNzI2NWQyYTdjMyIsImxvZ2luX21ldGhvZCI6InBhc3N3b3JkIiwiYXBwX3ZlcnNpb24iOiIxLjEuMSIsInNlY3VyaXR5X3JvbGUiOjY0LCJyZWZyZXNoX3Rva2VuX2lkIjoiNjc5OGEyNzMtMWVkMy00ODFiLTk4OWUtYjU0MmIxYzVlMzQwIn0.a6G93wNDKpI06XQigJe5t-CvI8ZF6ZrWHk4ML5qkE7s"
							},
							{
								"key": "origin",
								"value": "https://admin.finan.one"
							},
							{
								"key": "referer",
								"value": "https://admin.finan.one/"
							},
							{
								"key": "sec-ch-ua",
								"value": "\"Google Chrome\";v=\"113\", \"Chromium\";v=\"113\", \"Not-A.Brand\";v=\"24\""
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?0"
							},
							{
								"key": "sec-ch-ua-platform",
								"value": "\"macOS\""
							},
							{
								"key": "sec-fetch-dest",
								"value": "empty"
							},
							{
								"key": "sec-fetch-mode",
								"value": "cors"
							},
							{
								"key": "sec-fetch-site",
								"value": "same-site"
							},
							{
								"key": "user-agent",
								"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.0.0 Safari/537.36"
							},
							{
								"key": "x-locale-code",
								"value": "en_US"
							},
							{
								"key": "x-location-timezone",
								"value": "UTC+07:00"
							}
						],
						"url": {
							"raw": "https://api.finan.one/fo-user/api/v1/admin-portal/user/get-list?page=1&page_size=40&platform=&search=&search_type=email&sort=created_at%20desc&state=all",
							"protocol": "https",
							"host": [
								"api",
								"finan",
								"one"
							],
							"path": [
								"fo-user",
								"api",
								"v1",
								"admin-portal",
								"user",
								"get-list"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "page_size",
									"value": "40"
								},
								{
									"key": "platform",
									"value": ""
								},
								{
									"key": "search",
									"value": ""
								},
								{
									"key": "search_type",
									"value": "email"
								},
								{
									"key": "sort",
									"value": "created_at%20desc"
								},
								{
									"key": "state",
									"value": "all"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "https://api.finan.one/fo-user/api/v1/admin-portal/role/get-list?page=0&page_size=100&sort=created_at%20desc",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "authority",
								"value": "api.finan.one"
							},
							{
								"key": "accept",
								"value": "application/json, text/plain, */*"
							},
							{
								"key": "accept-language",
								"value": "en-US,en;q=0.9,vi;q=0.8"
							},
							{
								"key": "access-control-allow-origin",
								"value": "*"
							},
							{
								"key": "authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJGTyBVc2VyIiwic3ViIjoiNDhmNjgxOGItNWZmNC00MTZhLThjODktODA3MjY1ZDJhN2MzIiwiYXVkIjpbIkZPIFVzZXIiXSwiZXhwIjoxNzI2MTI0NTEzLCJuYmYiOjE3MjM1MzI1MTMsImlhdCI6MTcyMzUzMjUxMywib3JnX2lkIjoiIiwiYnVzaW5lc3NfaWQiOiIiLCJkZXZpY2VfaWQiOiI2NjcxYWM4ZGU3MzY5ODJkMjg1Y2NmNjdiZjJjMDJlOCIsInBsYXRmb3JtX2tleSI6ImRlc2t0b3Atd2ViIiwidXNlcl9pZCI6IjQ4ZjY4MThiLTVmZjQtNDE2YS04Yzg5LTgwNzI2NWQyYTdjMyIsImxvZ2luX21ldGhvZCI6InBhc3N3b3JkIiwiYXBwX3ZlcnNpb24iOiIxLjEuMSIsInNlY3VyaXR5X3JvbGUiOjY0LCJyZWZyZXNoX3Rva2VuX2lkIjoiNjc5OGEyNzMtMWVkMy00ODFiLTk4OWUtYjU0MmIxYzVlMzQwIn0.a6G93wNDKpI06XQigJe5t-CvI8ZF6ZrWHk4ML5qkE7s"
							},
							{
								"key": "origin",
								"value": "https://admin.finan.one"
							},
							{
								"key": "referer",
								"value": "https://admin.finan.one/"
							},
							{
								"key": "sec-ch-ua",
								"value": "\"Google Chrome\";v=\"113\", \"Chromium\";v=\"113\", \"Not-A.Brand\";v=\"24\""
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?0"
							},
							{
								"key": "sec-ch-ua-platform",
								"value": "\"macOS\""
							},
							{
								"key": "sec-fetch-dest",
								"value": "empty"
							},
							{
								"key": "sec-fetch-mode",
								"value": "cors"
							},
							{
								"key": "sec-fetch-site",
								"value": "same-site"
							},
							{
								"key": "user-agent",
								"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.0.0 Safari/537.36"
							},
							{
								"key": "x-locale-code",
								"value": "en_US"
							},
							{
								"key": "x-location-timezone",
								"value": "UTC+07:00"
							}
						],
						"url": {
							"raw": "https://api.finan.one/fo-user/api/v1/admin-portal/role/get-list?page=0&page_size=100&sort=created_at%20desc",
							"protocol": "https",
							"host": [
								"api",
								"finan",
								"one"
							],
							"path": [
								"fo-user",
								"api",
								"v1",
								"admin-portal",
								"role",
								"get-list"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "page_size",
									"value": "100"
								},
								{
									"key": "sort",
									"value": "created_at%20desc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "https://api.finan.one/fo-subscription/api/v1/admin-portal/package/get-list?search=&type=addon%7Cbase%7Ccombo",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "authority",
								"value": "api.finan.one"
							},
							{
								"key": "accept",
								"value": "application/json, text/plain, */*"
							},
							{
								"key": "accept-language",
								"value": "en-US,en;q=0.9,vi;q=0.8"
							},
							{
								"key": "access-control-allow-origin",
								"value": "*"
							},
							{
								"key": "authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJGTyBVc2VyIiwic3ViIjoiNDhmNjgxOGItNWZmNC00MTZhLThjODktODA3MjY1ZDJhN2MzIiwiYXVkIjpbIkZPIFVzZXIiXSwiZXhwIjoxNzI2MTI0NTEzLCJuYmYiOjE3MjM1MzI1MTMsImlhdCI6MTcyMzUzMjUxMywib3JnX2lkIjoiIiwiYnVzaW5lc3NfaWQiOiIiLCJkZXZpY2VfaWQiOiI2NjcxYWM4ZGU3MzY5ODJkMjg1Y2NmNjdiZjJjMDJlOCIsInBsYXRmb3JtX2tleSI6ImRlc2t0b3Atd2ViIiwidXNlcl9pZCI6IjQ4ZjY4MThiLTVmZjQtNDE2YS04Yzg5LTgwNzI2NWQyYTdjMyIsImxvZ2luX21ldGhvZCI6InBhc3N3b3JkIiwiYXBwX3ZlcnNpb24iOiIxLjEuMSIsInNlY3VyaXR5X3JvbGUiOjY0LCJyZWZyZXNoX3Rva2VuX2lkIjoiNjc5OGEyNzMtMWVkMy00ODFiLTk4OWUtYjU0MmIxYzVlMzQwIn0.a6G93wNDKpI06XQigJe5t-CvI8ZF6ZrWHk4ML5qkE7s"
							},
							{
								"key": "origin",
								"value": "https://admin.finan.one"
							},
							{
								"key": "referer",
								"value": "https://admin.finan.one/"
							},
							{
								"key": "sec-ch-ua",
								"value": "\"Google Chrome\";v=\"113\", \"Chromium\";v=\"113\", \"Not-A.Brand\";v=\"24\""
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?0"
							},
							{
								"key": "sec-ch-ua-platform",
								"value": "\"macOS\""
							},
							{
								"key": "sec-fetch-dest",
								"value": "empty"
							},
							{
								"key": "sec-fetch-mode",
								"value": "cors"
							},
							{
								"key": "sec-fetch-site",
								"value": "same-site"
							},
							{
								"key": "user-agent",
								"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.0.0 Safari/537.36"
							},
							{
								"key": "x-locale-code",
								"value": "en_US"
							},
							{
								"key": "x-location-timezone",
								"value": "UTC+07:00"
							}
						],
						"url": {
							"raw": "https://api.finan.one/fo-subscription/api/v1/admin-portal/package/get-list?search=&type=addon%7Cbase%7Ccombo",
							"protocol": "https",
							"host": [
								"api",
								"finan",
								"one"
							],
							"path": [
								"fo-subscription",
								"api",
								"v1",
								"admin-portal",
								"package",
								"get-list"
							],
							"query": [
								{
									"key": "search",
									"value": ""
								},
								{
									"key": "type",
									"value": "addon%7Cbase%7Ccombo"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "https://api.finan.one/fo-subscription/api/v1/admin-portal/package/get-list?search=&type=addon%7Cbase%7Ccombo",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "authority",
								"value": "api.finan.one"
							},
							{
								"key": "accept",
								"value": "application/json, text/plain, */*"
							},
							{
								"key": "accept-language",
								"value": "en-US,en;q=0.9,vi;q=0.8"
							},
							{
								"key": "access-control-allow-origin",
								"value": "*"
							},
							{
								"key": "authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJGTyBVc2VyIiwic3ViIjoiNDhmNjgxOGItNWZmNC00MTZhLThjODktODA3MjY1ZDJhN2MzIiwiYXVkIjpbIkZPIFVzZXIiXSwiZXhwIjoxNzI2MTI0NTEzLCJuYmYiOjE3MjM1MzI1MTMsImlhdCI6MTcyMzUzMjUxMywib3JnX2lkIjoiIiwiYnVzaW5lc3NfaWQiOiIiLCJkZXZpY2VfaWQiOiI2NjcxYWM4ZGU3MzY5ODJkMjg1Y2NmNjdiZjJjMDJlOCIsInBsYXRmb3JtX2tleSI6ImRlc2t0b3Atd2ViIiwidXNlcl9pZCI6IjQ4ZjY4MThiLTVmZjQtNDE2YS04Yzg5LTgwNzI2NWQyYTdjMyIsImxvZ2luX21ldGhvZCI6InBhc3N3b3JkIiwiYXBwX3ZlcnNpb24iOiIxLjEuMSIsInNlY3VyaXR5X3JvbGUiOjY0LCJyZWZyZXNoX3Rva2VuX2lkIjoiNjc5OGEyNzMtMWVkMy00ODFiLTk4OWUtYjU0MmIxYzVlMzQwIn0.a6G93wNDKpI06XQigJe5t-CvI8ZF6ZrWHk4ML5qkE7s"
							},
							{
								"key": "origin",
								"value": "https://admin.finan.one"
							},
							{
								"key": "referer",
								"value": "https://admin.finan.one/"
							},
							{
								"key": "sec-ch-ua",
								"value": "\"Google Chrome\";v=\"113\", \"Chromium\";v=\"113\", \"Not-A.Brand\";v=\"24\""
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?0"
							},
							{
								"key": "sec-ch-ua-platform",
								"value": "\"macOS\""
							},
							{
								"key": "sec-fetch-dest",
								"value": "empty"
							},
							{
								"key": "sec-fetch-mode",
								"value": "cors"
							},
							{
								"key": "sec-fetch-site",
								"value": "same-site"
							},
							{
								"key": "user-agent",
								"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.0.0 Safari/537.36"
							},
							{
								"key": "x-locale-code",
								"value": "en_US"
							},
							{
								"key": "x-location-timezone",
								"value": "UTC+07:00"
							}
						],
						"url": {
							"raw": "https://api.finan.one/fo-subscription/api/v1/admin-portal/package/get-list?search=&type=addon%7Cbase%7Ccombo",
							"protocol": "https",
							"host": [
								"api",
								"finan",
								"one"
							],
							"path": [
								"fo-subscription",
								"api",
								"v1",
								"admin-portal",
								"package",
								"get-list"
							],
							"query": [
								{
									"key": "search",
									"value": ""
								},
								{
									"key": "type",
									"value": "addon%7Cbase%7Ccombo"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	]
}