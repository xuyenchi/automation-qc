{
	"info": {
		"_postman_id": "143d1304-01d4-44a8-ab2f-87fdc433001e",
		"name": "verify_to_delete_contact",
		"description": "1. authen\n    \n2. get data\n    \n    1. invoice -> get 1 contact link w invoice\n        \n    2. contact -> get contact obj not link w invoice\n        \n3. delete\n    \n    1. contact -> delete contact\n        \n4. check data\n    \n    1. contact -> check list contact -1",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "17535207",
		"_collection_link": "https://warped-spaceship-122945.postman.co/workspace/Learn_API_Testing~870ffb9e-5962-40b3-8d91-530fbf3c4242/collection/17535207-143d1304-01d4-44a8-ab2f-87fdc433001e?action=share&source=collection_link&creator=17535207"
	},
	"item": [
		{
			"name": "authen",
			"item": [
				{
					"name": "login",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// ============================= random characters",
									"function randomChars(length) {",
									"    var result           = '';",
									"    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
									"    var charactersLength = characters.length;",
									"    for ( var i = 0; i < length; i++ ) {",
									"      result += characters.charAt(Math.floor(Math.random() * ",
									" charactersLength));",
									"   }",
									"   return result;",
									"} ",
									"",
									"let testcase = 1;",
									"console.log(\"-------- Start Testsuite 48 --------\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let platform = [\"desktop-web\",\"mobile-web\",\"mobile-app\"];",
									"let configs = pm.environment.get(\"C-configs\");",
									"let payload;",
									"if(configs.is_use_email){",
									"    payload = {",
									"        \"app_version\": \"1.0.0\",",
									"        \"device_info\": {",
									"            \"id\": randomChars(7) + \"-\" + randomChars(4) + \"-\" + randomChars(4) + \"-\" + randomChars(4) + \"-\" + randomChars(12),",
									"            \"name\": \"IP name\",",
									"            \"os\": \"iphone\"",
									"        },",
									"        \"email\": pm.environment.get(\"SER-email\"), // pm.environment.get(\"SER-email\")",
									"        \"encrypted_password\": pm.environment.get(\"SER-password\"),",
									"        \"phone_number\": \"\",",
									"        \"platform_key\": platform[0]",
									"    }",
									"} else {",
									"    payload = {",
									"        \"app_version\": \"1.0.0\",",
									"        \"device_info\": {",
									"            \"id\": randomChars(7) + \"-\" + randomChars(4) + \"-\" + randomChars(4) + \"-\" + randomChars(4) + \"-\" + randomChars(12),",
									"            \"name\": \"IP name\",",
									"            \"os\": \"iphone\"",
									"        },",
									"        \"email\": pm.environment.get(\"SER-email\"),",
									"        \"encrypted_password\": pm.environment.get(\"SER-password\"),",
									"        \"phone_number\": pm.environment.get(\"SER-phone_number\"),",
									"        \"platform_key\": platform[0]",
									"    }",
									"}",
									"",
									"console.log(\"payload: \",payload);",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));",
									"pm.environment.set(\"C-testcase\",testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    pm.test(\"System code is 102000\", function () {",
									"        pm.expect(jsData.code).to.eql(102000);",
									"    });",
									"",
									"    if(jsData.code == 102000){",
									"        let userToken = null;",
									"        try {",
									"            userToken = jsData.data.access_token;",
									"            pm.environment.set(\"C-userToken\",userToken);",
									"        } catch {",
									"            console.log(\"Can't get userToken\");",
									"        }",
									"",
									"        pm.test(\"Got userToken\", function () {",
									"            pm.expect(userToken != null).to.be.true;",
									"        });",
									"",
									"        let userInfo = jsData.data.user_info;",
									"",
									"        // show log",
									"        console.log(\"userInfo:\",JSON.stringify(userInfo));",
									"        pm.environment.set(\"C-userInfo\",userInfo);",
									"",
									"        postman.setNextRequest(\"verify_token_to_get_business\");",
									"    } else {",
									"        console.log(\"Can't get Token, end test\",jsData);",
									"        postman.setNextRequest(null);",
									"    }",
									"} else {",
									"    console.log(\"Can't login new account, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "x-locale",
								"value": "<string>",
								"description": "locale",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-user/api/v1/auth/login",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-user",
								"api",
								"v1",
								"auth",
								"login"
							]
						},
						"description": "Login User"
					},
					"response": []
				},
				{
					"name": "verify_token_to_get_business",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// verify token to get business",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = JSON.parse(responseBody);",
									"if(pm.response.code == 200 && jsData.code == 102000){",
									"    const jsData = pm.response.json();",
									"    pm.environment.set(\"C-user_id\",jsData.data.user_id);",
									"",
									"    let business_id = jsData.data.headers[\"x-business-id\"];",
									"    console.log(\"business_id: \" + business_id);",
									"    pm.environment.set(\"C-business_id\",business_id);",
									"",
									"    postman.setNextRequest(\"get_current_business\");",
									"} else {",
									"    console.log(\"Can't check token to get business_id, end test\");",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"token\": \"{{C-userToken}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-user/api/v1/auth/verify-token",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-user",
								"api",
								"v1",
								"auth",
								"verify-token"
							]
						},
						"description": "Login User"
					},
					"response": []
				},
				{
					"name": "get_business_detail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    console.log(\"Current business info: \", jsData.data);",
									"    let branch_id = null;",
									"    try {",
									"        branch_id = jsData.data.current_business.list_branch[0].id;",
									"        pm.environment.set(\"C-branch_id\",branch_id);",
									"    } catch {",
									"        console.log(\"Can't get branch id\");",
									"    }",
									"",
									"    pm.test(\"Got branch id \" + branch_id, function () {",
									"        pm.expect(branch_id != null).to.be.true;",
									"    });",
									"    ",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    testcase++;",
									"    pm.environment.set(\"C-testcase\",testcase);",
									"    postman.setNextRequest(\"get_list_contact\");",
									"} else {",
									"    console.log(\"Can't get business detail, end test\", jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-business/api/v1/business/get-one/{{C-business_id}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-business",
								"api",
								"v1",
								"business",
								"get-one",
								"{{C-business_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_current_business",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    // console.log(\"Current business info: \", jsData.data);",
									"    let branch_id = null;",
									"    try {",
									"        branch_id = jsData.data.current_business.list_branch[0].id;",
									"        pm.environment.set(\"C-branch_id\",branch_id);",
									"    } catch {",
									"        console.log(\"Can't get branch id\");",
									"    }",
									"",
									"    pm.test(\"Got branch id \" + branch_id, function () {",
									"        pm.expect(branch_id != null).to.be.true;",
									"    });",
									"",
									"    let payment_method_list = [];",
									"    for(let i in jsData.data.list_payment_method){",
									"        if(jsData.data.list_payment_method[i].is_active){",
									"            payment_method_list[payment_method_list.length] = jsData.data.list_payment_method[i];",
									"        }",
									"    }",
									"",
									"    pm.test(\"Got payment_method_list \" + payment_method_list.length, function () {",
									"        pm.expect(payment_method_list.length > 0).to.be.true;",
									"    });",
									"    pm.environment.set(\"C-payment_method_list\",payment_method_list);",
									"    ",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    testcase++;",
									"    pm.environment.set(\"C-testcase\",testcase);",
									"    postman.setNextRequest(\"get_list_invoice\");",
									"} else {",
									"    console.log(\"Can't get business detail, end test\", jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-business/api/v1/business/get-current",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-business",
								"api",
								"v1",
								"business",
								"get-current"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "contact",
			"item": [
				{
					"name": "get_list_contact",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase is: \"+ testcase);",
									"",
									"let page = pm.environment.get(\"C-page\");",
									"",
									"if(!page){",
									"    page = 1;",
									"    pm.environment.set(\"C-page\", page)",
									"",
									"    let page_size = 50;",
									"    pm.environment.set(\"C-page_size\", page_size);",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"function getRandomInt(min, max) {",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"let jsData = pm.response.json();",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"if(pm.response.code == 200 && jsData.code == 102000){",
									"    let total_contact = null;",
									"    try {",
									"        total_contact = jsData.meta.total_rows;",
									"    } catch {",
									"        console.log(\"Can't get total contact\");",
									"    }",
									"    let list_contact = [];",
									"    for(i in jsData.data){",
									"        list_contact[list_contact.length] = {",
									"            \"contact_id\" : jsData.data[i].id,",
									"            \"contact_name\" : jsData.data[i].contact_name",
									"        }",
									"    }",
									"    pm.environment.set(\"C-list_contact\", list_contact);  ",
									"    let total_pages = jsData.meta.total_pages;",
									"    let page = pm.environment.get(\"C-page\");",
									"    if(page >= total_pages){",
									"        pm.environment.unset(\"C-page\");",
									"        pm.environment.unset(\"C-page_size\");    ",
									"         ",
									"    }else{",
									"        page ++;",
									"        pm.environment.set(\"C-page\", page);",
									"        postman.setNextRequest(\"get_list_contact\");",
									"    }",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    console.log(\"C-testcase: \" + testcase);",
									"    switch(testcase){",
									"        case 2:",
									"            let list_contact = pm.environment.get(\"C-list_contact\");",
									"            let list_contact_invoice = pm.environment.get(\"C-list_contact_invoice\");",
									"            let list_contact_can_delete = [];",
									"            for (let i in list_contact) {",
									"                let isExist = false;",
									"                for (let j in list_contact_invoice) {",
									"                    if (list_contact_invoice[j].contact_id === list_contact[i].contact_id) {",
									"                        isExist = true;",
									"                        break;",
									"                    }",
									"                }",
									"                if (!isExist) {",
									"                    list_contact_can_delete.push(list_contact[i]);",
									"                }",
									"            }",
									"            console.log(\"list_contact_can_delete\", list_contact_can_delete);",
									"            let contact_obj = list_contact_can_delete[getRandomInt(0, list_contact_can_delete.length -1)];",
									"            pm.environment.set(\"C-contact_obj \", contact_obj); ",
									"            console.log(\"contact_obj: \", contact_obj);",
									"  ",
									"            testcase ++ ",
									"            pm.environment.set(\"C-testcase\", testcase);",
									"            //postman.setNextRequest(null);",
									"            postman.setNextRequest(\"delete_contact\");",
									"            break;",
									"        ",
									"        case 4:",
									"            let old_list_contact = total_contact; ",
									"            pm.test(\"List contact decrease 1: \" + old_list_contact + \" | \" + jsData.meta.total_rows, function () {",
									"                pm.expect(list_contact.length == old_list_contact.length - 1).to.be.true;",
									"            });",
									"            console.log(\"Bé Vy end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"",
									"        default:",
									"            console.log(\"Sai sai đâu đó rồi! \")",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "accept-language",
								"value": "en-US,en;q=0.9,vi-VN;q=0.8,vi;q=0.7"
							},
							{
								"key": "authorization",
								"value": "Bearer {{C-userToken}}"
							},
							{
								"key": "origin",
								"value": "https://book-stg.finan.one"
							},
							{
								"key": "priority",
								"value": "u=1, i"
							},
							{
								"key": "referer",
								"value": "https://book-stg.finan.one/"
							},
							{
								"key": "sec-ch-ua",
								"value": "\"Not)A;Brand\";v=\"99\", \"Google Chrome\";v=\"127\", \"Chromium\";v=\"127\""
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?0"
							},
							{
								"key": "sec-ch-ua-platform",
								"value": "\"macOS\""
							},
							{
								"key": "sec-fetch-dest",
								"value": "empty"
							},
							{
								"key": "sec-fetch-mode",
								"value": "cors"
							},
							{
								"key": "sec-fetch-site",
								"value": "same-site"
							},
							{
								"key": "user-agent",
								"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.0.0 Safari/537.36"
							},
							{
								"key": "x-locale",
								"value": "vi"
							},
							{
								"key": "x-location-timezone",
								"value": "Asia/Ho_Chi_Minh"
							},
							{
								"key": "x-platform-key",
								"value": "desktop-web"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-business/api/v1/contact/get-list?page={{C-page}}&page_size={{C-page_size}}&business_id={{C-business_id}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-business",
								"api",
								"v1",
								"contact",
								"get-list"
							],
							"query": [
								{
									"key": "page",
									"value": "{{C-page}}"
								},
								{
									"key": "page_size",
									"value": "{{C-page_size}}"
								},
								{
									"key": "sort",
									"value": "",
									"disabled": true
								},
								{
									"key": "search",
									"value": "",
									"disabled": true
								},
								{
									"key": "business_id",
									"value": "{{C-business_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "delete_contact",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase action delete contact is: \" + testcase);",
									"",
									"let contact_id_invoice = pm.environment.get(\"C-contact_id_invoice\");",
									"let contact_id_can_delete = pm.environment.get(\"C-contact_id_can_delete\");",
									"let contact_obj = pm.environment.get(\"C-contact_obj\");",
									"console.log(\"contact_obj: \", contact_obj);",
									"let case_ = pm.environment.get(\"C-case_\");",
									"let contact_id;",
									"if(!case_){",
									"    case_ = 1",
									"    pm.environment.set(\"C-case_\", case_);",
									"}",
									"",
									"switch(case_){",
									"    case 1: ",
									"        contact_id = contact_id_invoice;",
									"        pm.environment.set(\"C-contact_id\", contact_id);",
									"        console.log(\"Case_ = 1: contact_id\"+ contact_id)",
									"        break;",
									"",
									"    case 2:",
									"        console.log(\"Debug\" ,  contact_obj);",
									"        contact_id = contact_obj.contact_id;",
									"        console.log(\"Debug\" + contact_id + \"|\"+ contact_obj.contact_id);",
									"        pm.environment.set(\"C-contact_id\", contact_id);",
									"        console.log(\"Case_ = :\" + case_ + \"contact_id \"+ contact_id)",
									"        break;",
									"    ",
									"    default:",
									"        console.log(\"Missing flow\");",
									"        console.log(\"contact_id_link_invoice: \"+ contact_id_invoice);",
									"        console.log(\"contact_id_can_delete: \" + contact_id_can_delete);",
									"        break;",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase check delete contact is: \" + testcase);",
									"let jsData = pm.response.json();",
									"let contact_id = pm.environment.get(\"C-contact_id\");",
									"let contact_name_invoice = pm.environment.get(\"C-contact_name_invoice\");",
									"let contact_obj = pm.environment.get(\"C-contact_obj\")",
									"let case_ = pm.environment.get(\"C-case_\");",
									"console.log(\"case_: \"+ case_);",
									"",
									"switch(case_){",
									"    case 1:",
									"        if(jsData.code == 15400102){",
									"            pm.test(\"Status code is 400\", function () {",
									"                pm.response.to.have.status(400);",
									"            });",
									"            pm.test(\"Error contact stil has sale order \" + contact_id+ \" | \" + contact_name_invoice  , function () {",
									"                pm.expect(jsData.message.content.includes(\"Liên hệ này đang được gắn với ít nhất một hóa đơn\"));",
									"            });",
									"            pm.test(\"Response code is correctly \" + jsData.code, function () {",
									"                pm.expect(jsData.code == 15400102).to.be.true;",
									"            });",
									"            case_ ++ ",
									"            pm.environment.set(\"C-case_\", case_);",
									"            postman.setNextRequest(\"delete_contact\");",
									"        }else{",
									"            console.log(\"sai sai đâu đó rồi! \", jsData);",
									"            postman.setNextRequest(null);",
									"        }",
									"        ",
									"        break;",
									"    ",
									"    case 2: ",
									"        if(pm.response.code == 200 && jsData.code == 102000){",
									"            pm.test(\"Contact deleted successfully\" + contact_id+ \" | \" + contact_obj.contact_name  , function () {",
									"            pm.expect(jsData.message.content.includes(\"Thực thi API thành công\"));",
									"            });",
									"            testcase ++;",
									"            pm.environment.set(\"C-testcase\", testcase);",
									"            postman.setNextRequest(\"get_list_contact\");",
									"        }else{  ",
									"            console.log(\"sai sai đâu đó rồi! \", jsData);",
									"            postman.setNextRequest(null);",
									"        }   ",
									"        break;",
									"    default:",
									"        console.log(\"Missing flow\", jsData)",
									"        postman.setNextRequest(null);",
									"        break;",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "accept-language",
								"value": "en-US,en;q=0.9,vi-VN;q=0.8,vi;q=0.7"
							},
							{
								"key": "authorization",
								"value": "Bearer {{C-userToken}}"
							},
							{
								"key": "origin",
								"value": "https://book-stg.finan.one"
							},
							{
								"key": "priority",
								"value": "u=1, i"
							},
							{
								"key": "referer",
								"value": "https://book-stg.finan.one/"
							},
							{
								"key": "sec-ch-ua",
								"value": "\"Chromium\";v=\"128\", \"Not;A=Brand\";v=\"24\", \"Google Chrome\";v=\"128\""
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?0"
							},
							{
								"key": "sec-ch-ua-platform",
								"value": "\"macOS\""
							},
							{
								"key": "sec-fetch-dest",
								"value": "empty"
							},
							{
								"key": "sec-fetch-mode",
								"value": "cors"
							},
							{
								"key": "sec-fetch-site",
								"value": "same-site"
							},
							{
								"key": "user-agent",
								"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36"
							},
							{
								"key": "x-locale",
								"value": "vi"
							},
							{
								"key": "x-location-timezone",
								"value": "Asia/Ho_Chi_Minh"
							},
							{
								"key": "x-platform-key",
								"value": "desktop-web"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-business/api/v1/contact/delete/{{C-contact_id}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-business",
								"api",
								"v1",
								"contact",
								"delete",
								"{{C-contact_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "invoice",
			"item": [
				{
					"name": "get_list_invoice",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"get list invoice testcase is \"+ testcase );",
									"function getRandomInt(min, max) {",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"let jsData = pm.response.json();",
									"let page = pm.environment.get(\"C-page\");",
									"let total_pages = jsData.meta.total_rows;",
									"",
									"if(pm.response.code == 200 && jsData.code == 102000){",
									"    let list_contact_invoice = pm.environment.get(\"C-list_contact_invoice\");",
									"        if(!list_contact_invoice){",
									"            list_contact_invoice = [];",
									"        } ",
									"        for(i in jsData.data){",
									"            list_contact_invoice[list_contact_invoice.length] = {",
									"                \"contact_id\": jsData.data[i].contact_info.id,",
									"                \"contact_name\" : jsData.data[i].contact_info.contact_name",
									"            }",
									"        }",
									"    pm.environment.set(\"C-list_contact_invoice\" , list_contact_invoice);",
									"    if(page >= total_pages){",
									"        pm.environment.unset(\"C-page\");",
									"        pm.environment.unset(\"page_size\");",
									"        let contact_id_invoice = list_contact_invoice[0].contact_id;",
									"        console.log(\"contact_id_invoice \" + contact_id_invoice);",
									"        let contact_name_invoice = list_contact_invoice[0].contact_name;",
									"        console.log(\"contact_name_invoice \" + contact_name_invoice);",
									"        pm.environment.set(\"C-contact_id_invoice\", contact_id_invoice);",
									"        pm.environment.set(\"C-contact_name_invoice\", contact_name_invoice);",
									"        postman.setNextRequest(\"get_list_contact\");",
									"    }else{      ",
									"        page ++;",
									"        pm.environment.set(\"C-page\", page);",
									"        postman.setNextRequest(\"get_list_invoice\");   ",
									"    }",
									"}else{",
									"    console.log(\"can't get list invoice \", jsData);",
									"    postman.setNextRequest(null);",
									"}   ",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");\r",
									"let page = pm.environment.get(\"C-page\");\r",
									"\r",
									"if(!page){\r",
									"    page = 1,\r",
									"    pm.environment.set(\"C-page\", page);\r",
									"\r",
									"    page_size = 50;\r",
									"    pm.environment.set(\"C-page_size\", page_size);\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "accept-language",
								"value": "en-US,en;q=0.9,vi-VN;q=0.8,vi;q=0.7"
							},
							{
								"key": "authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJGTyBVc2VyIiwic3ViIjoiNmE5NGZjNDUtZWNlZi00OWExLWFkOTAtYmY5ZWQ3NGM1NWExIiwiYXVkIjpbIkZPIFVzZXIiXSwiZXhwIjoxNzI3NjA4ODY5LCJuYmYiOjE3MjUwMTY4NjksImlhdCI6MTcyNTAxNjg2OSwib3JnX2lkIjoiNiIsImJ1c2luZXNzX2lkIjoiNiIsImRldmljZV9pZCI6IjZkZGJiMzEzLWJmNzUtNDllYi05ZmYwLTA4NTNkM2IyMDZhYSIsInBsYXRmb3JtX2tleSI6IndlYi1ib29rIiwidXNlcl9pZCI6IjZhOTRmYzQ1LWVjZWYtNDlhMS1hZDkwLWJmOWVkNzRjNTVhMSIsImxvZ2luX21ldGhvZCI6InBhc3N3b3JkIiwiYXBwX3ZlcnNpb24iOiIxLjEuMSIsInNlY3VyaXR5X3JvbGUiOjAsInJlZnJlc2hfdG9rZW5faWQiOiJkMzgyZmM1NS1hZDFjLTQ0NGMtOWUwZS1lZTZhYjg4YTQ5Y2QifQ.SnpLCmYVMs0DuIZnh7ld9AY_C6Hyp5VyhX4hJDpkGWM"
							},
							{
								"key": "origin",
								"value": "https://book-stg.finan.one"
							},
							{
								"key": "priority",
								"value": "u=1, i"
							},
							{
								"key": "referer",
								"value": "https://book-stg.finan.one/"
							},
							{
								"key": "sec-ch-ua",
								"value": "\"Not)A;Brand\";v=\"99\", \"Google Chrome\";v=\"127\", \"Chromium\";v=\"127\""
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?0"
							},
							{
								"key": "sec-ch-ua-platform",
								"value": "\"macOS\""
							},
							{
								"key": "sec-fetch-dest",
								"value": "empty"
							},
							{
								"key": "sec-fetch-mode",
								"value": "cors"
							},
							{
								"key": "sec-fetch-site",
								"value": "same-site"
							},
							{
								"key": "user-agent",
								"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.0.0 Safari/537.36"
							},
							{
								"key": "x-locale",
								"value": "vi"
							},
							{
								"key": "x-location-timezone",
								"value": "Asia/Ho_Chi_Minh"
							},
							{
								"key": "x-platform-key",
								"value": "desktop-web"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-order/api/v1/invoice/get-list?page_size={{C-page_size}}&business_id={{C-business_id}}&page={{C-page}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-order",
								"api",
								"v1",
								"invoice",
								"get-list"
							],
							"query": [
								{
									"key": "page_size",
									"value": "{{C-page_size}}"
								},
								{
									"key": "search",
									"value": "",
									"disabled": true
								},
								{
									"key": "status",
									"value": "",
									"disabled": true
								},
								{
									"key": "payment_status",
									"value": "",
									"disabled": true
								},
								{
									"key": "contact_id",
									"value": "",
									"disabled": true
								},
								{
									"key": "business_id",
									"value": "{{C-business_id}}"
								},
								{
									"key": "page",
									"value": "{{C-page}}"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"let configs = {",
					"    \"is_use_email\":true,",
					"    \"limit_page\":5,",
					"    \"timeout\":12000, // miliseconds => timeout to call API",
					"    \"is_buyer_gen\":false,",
					"    \"test_payment_method\":\"va_galaxy\" // bank_transfer, viet_qr_pro_mb, va_galaxy",
					"}",
					"",
					"pm.environment.set(\"C-configs\",configs);",
					"// console.log(\"configs: \",configs);"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"// ====================================== parser cURL",
					"function parseCURL(request_api){",
					"    let curl = \"\";",
					"    switch(request_api.method){",
					"        case \"PUT\":",
					"            curl = \"curl --location --request PUT \";",
					"            break;",
					"        case \"PATCH\":",
					"            curl = \"curl --location --request PATCH \";",
					"            break;",
					"        case \"DELETE\":",
					"            curl = \"curl --location --request DELETE \";",
					"            break;",
					"        default:",
					"            curl = \"curl --location \";",
					"            break;",
					"    }",
					"    curl += \"'\" + request_api.url.protocol + \"://\"",
					"    // host",
					"    for(let i in request_api.url.host){",
					"        if(i >= request_api.url.host.length - 1){",
					"            curl += request_api.url.host[i] + \"/\";",
					"        } else {",
					"            curl += request_api.url.host[i] + \".\";",
					"        }",
					"    }",
					"    // path",
					"    for(let i in request_api.url.path){",
					"        if(i >= request_api.url.path.length - 1){",
					"            curl += request_api.url.path[i];",
					"        } else {",
					"            curl += request_api.url.path[i] + \"/\";",
					"        }",
					"    }",
					"    // query (if have)",
					"    if(\"query\" in request_api.url){",
					"        if(request_api.url.length > 0){",
					"            curl += \"? \";",
					"            for(let i in request_api.url.query){",
					"                if(i >= request_api.url.query.length - 1){",
					"                    curl += request_api.url.query[i].key + \"=\" + request_api.url.query[i].value + \"' \";",
					"                } else {",
					"                    curl += request_api.url.query[i].key + \"=\" + request_api.url.query[i].value + \"&\";",
					"                }",
					"            }",
					"        } else {",
					"            curl += \"' \";",
					"        }",
					"    } else {",
					"        curl += \"' \";",
					"    }",
					"    // header",
					"    for(let i in request_api.header){",
					"        if(i >= request_api.header.length - 1){",
					"            curl += \"--header '\" + request_api.header[i].key + \": \" + request_api.header[i].value + \"'\";",
					"        } else {",
					"            curl += \"--header '\" + request_api.header[i].key + \": \" + request_api.header[i].value + \"' \";",
					"        }",
					"    }",
					"    switch(request_api.method){",
					"        case \"POST\":",
					"            curl += \" --data '\" + request_api.body.raw + \"'\"",
					"            break;",
					"        case \"PUT\": case \"PATCH\":",
					"            curl += \" --data-raw '\" + request_api.body.raw + \"'\"",
					"            break;",
					"        default:",
					"            break;",
					"    }",
					"    console.log(curl);",
					"    return curl;",
					"}",
					"console.log(\"======================================\");",
					"const request_api = pm.request.toJSON();",
					"parseCURL(request_api);"
				]
			}
		}
	]
}