{
	"info": {
		"_postman_id": "03baee9c-2398-413b-964c-1a4e3c6a0c24",
		"name": "role_permission",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "17535207",
		"_collection_link": "https://warped-spaceship-122945.postman.co/workspace/Learn_API_Testing~870ffb9e-5962-40b3-8d91-530fbf3c4242/collection/17535207-03baee9c-2398-413b-964c-1a4e3c6a0c24?action=share&source=collection_link&creator=17535207"
	},
	"item": [
		{
			"name": "authen",
			"item": [
				{
					"name": "login",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// ============================= random characters",
									"function randomChars(length) {",
									"    var result           = '';",
									"    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
									"    var charactersLength = characters.length;",
									"    for ( var i = 0; i < length; i++ ) {",
									"      result += characters.charAt(Math.floor(Math.random() * ",
									" charactersLength));",
									"   }",
									"   return result;",
									"}",
									"",
									"let testcase = 1;",
									"//console.log(\"-------- Start Testsuite 51 --------\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let platform = [\"desktop-web\",\"mobile-web\",\"mobile-app\"];",
									"let configs = pm.environment.get(\"C-configs\");",
									"let login_type = configs.login_type;",
									"let payload;",
									"",
									"",
									"",
									"",
									"switch(login_type){",
									"    case \"email\":",
									"        payload = {",
									"            \"app_version\": \"1.0.0\",",
									"            \"device_info\": {",
									"                \"id\": randomChars(7) + \"-\" + randomChars(4) + \"-\" + randomChars(4) + \"-\" + randomChars(4) + \"-\" + randomChars(12),",
									"                \"name\": \"IP name\",",
									"                \"os\": \"iphone\"",
									"            },",
									"            \"email\": pm.environment.get(\"SER-email\"),",
									"            \"encrypted_password\": pm.environment.get(\"SER-password\"),",
									"            \"phone_number\": \"\",",
									"            \"platform_key\": platform[0]",
									"        }",
									"        break;",
									"    case \"phone\":",
									"        payload = {",
									"            \"app_version\": \"1.0.0\",",
									"            \"device_info\": {",
									"                \"id\": randomChars(7) + \"-\" + randomChars(4) + \"-\" + randomChars(4) + \"-\" + randomChars(4) + \"-\" + randomChars(12),",
									"                \"name\": \"IP name\",",
									"                \"os\": \"iphone\"",
									"            },",
									"            \"email\":\"\",",
									"            \"encrypted_password\": \"5316a0d668e03a30487a7e9fc9718670495db8688f374c2f7939f7f37fdd8c893a0f\",",
									"            \"phone_number\": pm.environment.get(\"SER-phone_number\"),",
									"            \"platform_key\": platform[0]",
									"        }",
									"        break;",
									"    case \"username\":",
									"    default:",
									"        payload = {",
									"            \"app_version\": \"1.0.0\",",
									"            \"device_info\": {",
									"                \"id\": randomChars(7) + \"-\" + randomChars(4) + \"-\" + randomChars(4) + \"-\" + randomChars(4) + \"-\" + randomChars(12),",
									"                \"name\": \"IP name\",",
									"                \"os\": \"iphone\"",
									"            },",
									"            \"encrypted_password\": pm.environment.get(\"SER-password\"),",
									"            \"username\": pm.environment.get(\"SER-username\"),",
									"            \"platform_key\": platform[0]",
									"        }",
									"}",
									"",
									"console.log(\"payload: \",payload);",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));",
									"pm.environment.set(\"X-testcase\",testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    pm.test(\"System code is 102000\", function () {",
									"        pm.expect(jsData.code).to.eql(102000);",
									"    });",
									"",
									"    if(jsData.code == 102000){",
									"        let userToken = null;",
									"        try {",
									"            userToken = jsData.data.access_token;",
									"            pm.environment.set(\"C-userToken\",userToken);",
									"        } catch {",
									"            console.log(\"Can't get userToken\");",
									"        }",
									"",
									"        pm.test(\"Got userToken\", function () {",
									"            pm.expect(userToken != null).to.be.true;",
									"        });",
									"",
									"        let userInfo = jsData.data.user_info;",
									"",
									"        // show log",
									"        console.log(\"userInfo:\",JSON.stringify(userInfo));",
									"        pm.environment.set(\"C-userInfo\",userInfo);",
									"",
									"        postman.setNextRequest(\"verify_token_to_get_business\");",
									"    } else {",
									"        console.log(\"Can't get Token, end test\",jsData);",
									"        postman.setNextRequest(null);",
									"    }",
									"} else {",
									"    console.log(\"Can't login new account, end test\",jsData);",
									"    postman.setNextRequest(null);",
									"}",
									"let testcase = 2;",
									"pm.environment.set(\"X-testcase\", testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-user/api/v1/auth/login",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-user",
								"api",
								"v1",
								"auth",
								"login"
							]
						},
						"description": "Login User"
					},
					"response": []
				},
				{
					"name": "verify_token_to_get_business",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// verify token to get business",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsData = JSON.parse(responseBody);",
									"if(pm.response.code == 200 && jsData.code == 102000){",
									"    const jsData = pm.response.json();",
									"    pm.environment.set(\"C-user_id\",jsData.data.user_id);",
									"",
									"    let business_id = jsData.data.headers[\"x-business-id\"];",
									"    console.log(\"business_id: \" + business_id);",
									"    pm.environment.set(\"C-business_id\",business_id);",
									"",
									"    postman.setNextRequest(\"get_current_business\");",
									"} else {",
									"    console.log(\"Can't check token to get business_id, end test\");",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"token\": \"{{C-userToken}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-user/api/v1/auth/verify-token",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-user",
								"api",
								"v1",
								"auth",
								"verify-token"
							]
						},
						"description": "Login User"
					},
					"response": []
				},
				{
					"name": "get_business_detail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ============================= random number between min and max",
									"function getRandomInt(min, max) {",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    // console.log(\"Current business info: \", jsData.data);",
									"    let branch_id = null;",
									"    try {",
									"        branch_id = jsData.data.current_business.list_branch[0].id;",
									"        pm.environment.set(\"C-branch_id\",branch_id);",
									"    } catch {",
									"        console.log(\"Can't get branch id\");",
									"    }",
									"",
									"    pm.test(\"Got branch id \" + branch_id, function () {",
									"        pm.expect(branch_id != null).to.be.true;",
									"    });",
									"",
									"    let payment_method = null;",
									"    let list_payment_method = [];",
									"    let configs = pm.environment.get(\"C-configs\");",
									"    let test_payment_method = configs.test_payment_method;",
									"    try {",
									"        switch(test_payment_method){",
									"            case \"viet_qr_pro_mb\":",
									"                for(let i in jsData.data.list_payment_method){",
									"                    if(jsData.data.list_payment_method[i].key == test_payment_method){ ",
									"                        payment_method = jsData.data.list_payment_method[i];",
									"                        break;",
									"                    }",
									"                }",
									"                break;",
									"            case \"va_galaxy\":",
									"                for(let i in jsData.data.list_payment_method){",
									"                    if(jsData.data.list_payment_method[i].bank_account.account_number.includes(\"SBB\")){ ",
									"                        list_payment_method[list_payment_method.length] = jsData.data.list_payment_method[i];",
									"                    }",
									"                }",
									"                payment_method = list_payment_method[getRandomInt(0,list_payment_method.length -1)];",
									"                break;",
									"            case \"bank_transfer\":",
									"                for(let i in jsData.data.list_payment_method){",
									"                    if(jsData.data.list_payment_method[i].key == test_payment_method){ ",
									"                        list_payment_method[list_payment_method.length] = jsData.data.list_payment_method[i];",
									"                    }",
									"                }",
									"                payment_method = list_payment_method[getRandomInt(0,list_payment_method.length -1)];",
									"                break;",
									"            default:",
									"                console.log(\"Missing flow\");",
									"                break;",
									"        }",
									"    } catch {",
									"        console.log(\"Can't get branch id\");",
									"    }",
									"    pm.environment.set(\"C-viet_qr_payment\",payment_method);",
									"",
									"    pm.test(\"Got branch id \" + branch_id, function () {",
									"        pm.expect(branch_id != null).to.be.true;",
									"    });",
									"    ",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    testcase++;",
									"    pm.environment.set(\"C-testcase\",testcase);",
									"    postman.setNextRequest(\"get_list_internal_account\");",
									"} else {",
									"    console.log(\"Can't get business detail, end test\", jsData);",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-business/api/v1/business/get-one/{{C-business_id}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-business",
								"api",
								"v1",
								"business",
								"get-one",
								"{{C-business_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_current_business",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ============================= random number between min and max",
									"function getRandomInt(min, max) {",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    // console.log(\"Current business info: \", jsData.data);",
									"    let branch_id = null;",
									"    try {",
									"        branch_id = jsData.data.current_business.list_branch[0].id;",
									"        pm.environment.set(\"C-branch_id\",branch_id);",
									"    } catch {",
									"        console.log(\"Can't get branch id\");",
									"    }",
									"",
									"    pm.test(\"Got branch id \" + branch_id, function () {",
									"        pm.expect(branch_id != null).to.be.true;",
									"    });",
									"",
									"    let payment_method = null;",
									"    let list_payment_method = [];",
									"    let configs = pm.environment.get(\"C-configs\");",
									"    let test_payment_method = configs.test_payment_method;",
									"    try {",
									"        switch(test_payment_method){",
									"            case \"viet_qr_pro_mb\":",
									"                for(let i in jsData.data.list_payment_method){",
									"                    if(jsData.data.list_payment_method[i].key == test_payment_method && ! jsData.data.list_payment_method[i].bank_account.account_number.includes(\"VQRQ\")){ ",
									"                        // payment_method = jsData.data.list_payment_method[i];",
									"                        // break;",
									"                        list_payment_method[list_payment_method.length] = jsData.data.list_payment_method[i];",
									"                    }",
									"                }",
									"                payment_method = list_payment_method[getRandomInt(0,list_payment_method.length -1)];",
									"                break;",
									"            case \"va_galaxy\":",
									"                for(let i in jsData.data.list_payment_method){",
									"                    if(jsData.data.list_payment_method[i].bank_account.account_number.includes(\"SBB\")){ ",
									"                        list_payment_method[list_payment_method.length] = jsData.data.list_payment_method[i];",
									"                    }",
									"                }",
									"                payment_method = list_payment_method[getRandomInt(0,list_payment_method.length -1)];",
									"                break;",
									"            case \"bank_transfer\":",
									"                for(let i in jsData.data.list_payment_method){",
									"                    if(jsData.data.list_payment_method[i].key == test_payment_method){ ",
									"                        list_payment_method[list_payment_method.length] = jsData.data.list_payment_method[i];",
									"                    }",
									"                }",
									"                payment_method = list_payment_method[getRandomInt(0,list_payment_method.length -1)];",
									"                break;",
									"            case \"bidv\":",
									"                for(let i in jsData.data.list_payment_method){",
									"                    if('bank_account' in jsData.data.list_payment_method[i] ){",
									"                         if(jsData.data.list_payment_method[i].bank_account.bank_code == \"BIDV\"){ ",
									"                        list_payment_method[list_payment_method.length] = jsData.data.list_payment_method[i];",
									"                         }",
									"",
									"                        // console.log(\" -----list_payment_method[list_payment_method.length]:\",  list_payment_method );",
									"                    }",
									"                }",
									"                   ",
									"                   ",
									"                console.log(\"debug\");",
									"               payment_method = list_payment_method[getRandomInt(0,list_payment_method.length -1)];",
									"               console.log(\"payment method:\",payment_method);",
									"              // payment_method = list_payment_method[list_payment_method.length -1];",
									"              break;",
									"            default:",
									"                console.log(\"Missing flow\");",
									"                break;",
									"        }",
									"    } catch {",
									"        console.log(\"Can't get branch id\");",
									"    }",
									"    pm.environment.set(\"C-viet_qr_payment\",payment_method);",
									"    //console.log(\"payment method :\", payment_method);",
									"",
									"    pm.test(\"Got branch id \" + branch_id, function () {",
									"        pm.expect(branch_id != null).to.be.true;",
									"    });",
									"    ",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    testcase++;",
									"    pm.environment.set(\"C-testcase\",testcase);",
									"    postman.setNextRequest(\"get_list_internal_account\");",
									"} else {",
									"    console.log(\"Can't get business detail, end test\", jsData);",
									"   postman.setNextRequest(\"\");",
									"}",
									" postman.setNextRequest(\"get_role_list\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "authorization",
								"value": "Bearer {{C-userToken}}"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-business/api/v1/business/get-current",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-business",
								"api",
								"v1",
								"business",
								"get-current"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "role",
			"item": [
				{
					"name": "get_role_list",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let page = pm.environment.get(\"page\");",
									"if(!page)",
									"    page = 1;",
									"let page_size = 50;",
									"",
									"pm.environment.set(\"page\", page);",
									"pm.environment.set(\"page_size\", page_size);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"X-testcase\");",
									"let responeJSON = pm.response.json();",
									"let total_pages = responeJSON.meta.total_pages;",
									"let page = pm.environment.get(\"page\");",
									"",
									"switch(testcase){",
									"    case 2:",
									"        let total_role_old = pm.environment.get(\"total_role_old\");",
									"        if(!total_role_old)",
									"            total_role_old = 0;",
									"        total_role_old += responeJSON.data.length;",
									"",
									"       if(page >= total_pages){",
									"        pm.environment.unset(\"page\");",
									"        console.log(\"total_payment_old \", total_role_old);",
									"        pm.environment.set(\"X-total_payment_old\", total_role_old);",
									"        pm.test(\"Status code is 200\", function () {",
									"               pm.response.to.have.status(200);",
									"           });",
									"        postman.setNextRequest(\"create_role\");",
									"       }",
									"       else{",
									"        page++;",
									"        postman.setNextRequest(\"get_role_list\");",
									"       }",
									"",
									"        break;",
									"    case 4:",
									"        let total_role_new = pm.environment.get(\"total_role_new\");",
									"        if(!total_role_new)",
									"            total_role_new = 0;",
									"        total_role_new += responeJSON.data.length;",
									"",
									"       if(page >= total_pages){",
									"        pm.environment.unset(\"page\");",
									"        console.log(\"total_payment_new \", total_role_new);",
									"        pm.environment.set(\"X-total_payment_new\", total_role_new);",
									"        pm.test(\"Status code is 200\", function () {",
									"               pm.response.to.have.status(200);",
									"           });",
									"        pm.test(\"Check total role increase 1 item\", function(){",
									"            pm.expect(pm.environment.get(\"X-total_payment_new\")).to.eql(pm.environment.get(\"X-total_payment_old\") + 1);",
									"        })",
									"        postman.setNextRequest(\"get_role_detail\");",
									"       }",
									"       else{",
									"        page++;",
									"        postman.setNextRequest(\"get_role_list\");",
									"       }",
									"        break;",
									"    case 5:",
									"    let total_role_after_delete = pm.environment.get(\"total_role_after_delete\");",
									"        if(!total_role_after_delete)",
									"            total_role_after_delete = 0;",
									"        total_role_after_delete += responeJSON.data.length;",
									"    if(page >= total_pages){",
									"        pm.environment.unset(\"page\");",
									"        console.log(\"total_role_after_delete \", total_role_after_delete);",
									"        pm.environment.set(\"X-total_role_after_delete\", total_role_after_delete);",
									"",
									"        pm.test(\"Status code is 200\", function () {",
									"               pm.response.to.have.status(200);",
									"           });",
									"",
									"        pm.test(\"Check after delete total item decrease 1\", function(){",
									"            pm.expect(pm.environment.get(\"X-total_role_after_delete\")).to.eql(pm.environment.get(\"X-total_payment_old\"));",
									"        })",
									"        //check id đã xóa không còn tồn tại",
									"        pm.test(\"Role is deleted not exist\", function(){",
									"            let is_exist = true;",
									"            for(let i in responeJSON.data){",
									"                if(responeJSON.data[i].id == pm.environment.get(\"X-role_id\"))",
									"                    is_exist = true;",
									"                else",
									"                    is_exist = false;",
									"            }",
									"            pm.expect(is_exist).to.be.false;",
									"        ",
									"        })",
									"        ",
									"",
									"        //end check id đã xóa",
									"        postman.setNextRequest(\"\");",
									"       }",
									"    else{",
									"        page++;",
									"        postman.setNextRequest(\"get_role_list\");",
									"       }",
									"        ",
									"        break;",
									"    default:",
									"        break;",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-business/api/v1/role/get-list?x-user-id={{C-user_id}}&page={{page}}&page_size={{page_size}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-business",
								"api",
								"v1",
								"role",
								"get-list"
							],
							"query": [
								{
									"key": "x-user-id",
									"value": "{{C-user_id}}"
								},
								{
									"key": "page",
									"value": "{{page}}"
								},
								{
									"key": "page_size",
									"value": "{{page_size}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "create_role",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function getRandomInt(min, max) {",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"",
									"function randomChars(length) {",
									"    var result           = '';",
									"    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
									"    var charactersLength = characters.length;",
									"    for ( var i = 0; i < length; i++ ) {",
									"      result += characters.charAt(Math.floor(Math.random() * ",
									" charactersLength));",
									"   }",
									"   return result;",
									"}",
									"",
									"let permissions_default = [",
									"            {",
									"               ",
									"                \"permission_key\": \"quote\",",
									"                \"can_view_all\": false,",
									"                \"can_view_only\": false,",
									"                \"can_create\": false,",
									"                \"can_update\": false,",
									"                \"can_delete\": false,",
									"                \"can_export\": false",
									"            },",
									"            {",
									"               ",
									"                \"permission_key\": \"invoice\",",
									"                \"can_view_all\": false,",
									"                \"can_view_only\": false,",
									"                \"can_create\": false,",
									"                \"can_update\": false,",
									"                \"can_delete\": false,",
									"                \"can_export\": false",
									"            },",
									"            {",
									"                ",
									"                \"permission_key\": \"recurring_invoice\",",
									"                \"can_view_all\": false,",
									"                \"can_view_only\": false,",
									"                \"can_create\": false,",
									"                \"can_update\": false,",
									"                \"can_delete\": false,",
									"                \"can_export\": false",
									"            },",
									"            {",
									"                ",
									"                \"permission_key\": \"e_invoice\",",
									"                \"can_view_all\": false,",
									"                \"can_view_only\": false,",
									"                \"can_create\": false,",
									"                \"can_update\": false,",
									"                \"can_delete\": false,",
									"                \"can_export\": false",
									"            },",
									"            {",
									"               ",
									"                \"permission_key\": \"customer\",",
									"                \"can_view_all\": false,",
									"                \"can_view_only\": false,",
									"                \"can_create\": false,",
									"                \"can_update\": false,",
									"                \"can_delete\": false,",
									"                \"can_export\": false",
									"            },",
									"            {",
									"                ",
									"                \"permission_key\": \"bill\",",
									"                \"can_view_all\": false,",
									"                \"can_view_only\": false,",
									"                \"can_create\": false,",
									"                \"can_update\": false,",
									"                \"can_delete\": false,",
									"                \"can_export\": false",
									"            },",
									"            {",
									"                \"permission_key\": \"supplier\",",
									"                \"can_view_all\": false,",
									"                \"can_view_only\": false,",
									"                \"can_create\": false,",
									"                \"can_update\": false,",
									"                \"can_delete\": false,",
									"                \"can_export\": false",
									"            },",
									"            {",
									"               ",
									"                \"permission_key\": \"fund\",",
									"                \"can_view_all\": false,",
									"                \"can_view_only\": false,",
									"                \"can_create\": false,",
									"                \"can_update\": false,",
									"                \"can_delete\": false,",
									"                \"can_export\": false",
									"            },",
									"            {",
									"               ",
									"                \"permission_key\": \"transaction\",",
									"                \"can_view_all\": false,",
									"                \"can_view_only\": false,",
									"                \"can_create\": false,",
									"                \"can_update\": false,",
									"                \"can_delete\": false,",
									"                \"can_export\": false",
									"            },",
									"            {",
									"               ",
									"                \"permission_key\": \"homepage\",",
									"                \"can_view_all\": false,",
									"                \"can_view_only\": false,",
									"                \"can_create\": false,",
									"                \"can_update\": false,",
									"                \"can_delete\": false,",
									"                \"can_export\": false",
									"            },",
									"            {",
									"                ",
									"                \"permission_key\": \"pl_report\",",
									"                \"can_view_all\": false,",
									"                \"can_view_only\": false,",
									"                \"can_create\": false,",
									"                \"can_update\": false,",
									"                \"can_delete\": false,",
									"                \"can_export\": false",
									"            },",
									"            {",
									"                ",
									"                \"permission_key\": \"cash_flow_report\",",
									"                \"can_view_all\": false,",
									"                \"can_view_only\": false,",
									"                \"can_create\": false,",
									"                \"can_update\": false,",
									"                \"can_delete\": false,",
									"                \"can_export\": false",
									"            },",
									"            {",
									"                ",
									"                \"permission_key\": \"ar_report\",",
									"                \"can_view_all\": false,",
									"                \"can_view_only\": false,",
									"                \"can_create\": false,",
									"                \"can_update\": false,",
									"                \"can_delete\": false,",
									"                \"can_export\": false",
									"            },",
									"            {",
									"                ",
									"                \"permission_key\": \"ap_report\",",
									"                \"can_view_all\": false,",
									"                \"can_view_only\": false,",
									"                \"can_create\": false,",
									"                \"can_update\": false,",
									"                \"can_delete\": false,",
									"                \"can_export\": false",
									"            },",
									"            {",
									"                ",
									"                \"permission_key\": \"business_info\",",
									"                \"can_view_all\": false,",
									"                \"can_view_only\": false,",
									"                \"can_create\": false,",
									"                \"can_update\": false,",
									"                \"can_delete\": false,",
									"                \"can_export\": false",
									"            },",
									"            {",
									"               ",
									"                \"permission_key\": \"item\",",
									"                \"can_view_all\": false,",
									"                \"can_view_only\": false,",
									"                \"can_create\": false,",
									"                \"can_update\": false,",
									"                \"can_delete\": false,",
									"                \"can_export\": false",
									"            },",
									"            {",
									"               ",
									"                \"permission_key\": \"member\",",
									"                \"can_view_all\": false,",
									"                \"can_view_only\": false,",
									"                \"can_create\": false,",
									"                \"can_update\": false,",
									"                \"can_delete\": false,",
									"                \"can_export\": false",
									"            },",
									"            {",
									"              ",
									"                \"permission_key\": \"branch\",",
									"                \"can_view_all\": false,",
									"                \"can_view_only\": false,",
									"                \"can_create\": false,",
									"                \"can_update\": false,",
									"                \"can_delete\": false,",
									"                \"can_export\": false",
									"            },",
									"            {",
									"               ",
									"                \"permission_key\": \"tax\",",
									"                \"can_view_all\": false,",
									"                \"can_view_only\": false,",
									"                \"can_create\": false,",
									"                \"can_update\": false,",
									"                \"can_delete\": false,",
									"                \"can_export\": false",
									"            },",
									"            {",
									"                ",
									"                \"permission_key\": \"integrate_zns\",",
									"                \"can_view_all\": false,",
									"                \"can_view_only\": false,",
									"                \"can_create\": false,",
									"                \"can_update\": false,",
									"                \"can_delete\": false,",
									"                \"can_export\": false",
									"            },",
									"            {",
									"                \"permission_key\": \"integrate_e_invoice\",",
									"                \"can_view_all\": false,",
									"                \"can_view_only\": false,",
									"                \"can_create\": false,",
									"                \"can_update\": false,",
									"                \"can_delete\": false,",
									"                \"can_export\": false",
									"            }",
									"        ]",
									"//tim ptu quyen duoc random",
									"let quantity_permission = getRandomInt(3, 3)//permissions_default.length);",
									"let permissions = new Array(quantity_permission);",
									"//console.log(\"permissions length:\", permissions.length);",
									"for(let i = 0; i < permissions.length; i++){",
									"    let index = getRandomInt(0, permissions_default.length - 1);",
									"    //console.log(\"permissions_default index\", permissions_default[index]);",
									"    if(i == 0){",
									"        permissions[i] = permissions_default[index];",
									"    }",
									"    else {",
									"        for(let j= 0; j < i; j++){",
									"            if(permissions_default[index].permission_key == permissions[j].permission_key){",
									"                i--;",
									"            }",
									"            else {",
									"                permissions[i] = permissions_default[index];",
									"            }",
									"        }",
									"    }",
									"}",
									"console.log(\"--------permissions : \", permissions);",
									"",
									"//set các quyền cho permissions đều = true",
									"for (let i in permissions){",
									"    permissions[i].can_create = true;",
									"    permissions[i].can_delete = true;",
									"    permissions[i].can_export = true;",
									"    permissions[i].can_update = true;",
									"    permissions[i].can_view_all = true;",
									"    permissions[i].can_view_only = true;",
									"}",
									"console.log(\"--------permissions : \", permissions);",
									"pm.environment.set(\"X-permissions\", permissions);",
									"",
									"//end set quyền",
									"",
									"let X_payload = {",
									"  \"business_id\": parseInt(pm.environment.get(\"C-business_id\")),",
									"  \"description\": \"string\",",
									"  \"permissions\": permissions,",
									"  \"role_name\": \"Nhân viên \" + randomChars(3)",
									"}",
									"pm.environment.set(\"X-payload\", JSON.stringify(X_payload));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responeJSON = pm.response.json();",
									"let role_id = responeJSON.data.id;",
									"pm.environment.set(\"X-role_id\", role_id);",
									"",
									"let role_name = responeJSON.data.role_name;",
									"pm.environment.set(\"X-role_name\", role_name);",
									"",
									"let testcase = 4;",
									"pm.environment.set(\"X-testcase\", testcase);",
									"postman.setNextRequest(\"get_role_list\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{X-payload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{finone_url}}/fo-business/api/v1/role/create?x-user-id={{C-user_id}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-business",
								"api",
								"v1",
								"role",
								"create"
							],
							"query": [
								{
									"key": "x-user-id",
									"value": "{{C-user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get_role_detail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responeJSON = pm.response.json();",
									"let permissions_detail = responeJSON.data.permissions;",
									"let permissions = pm.environment.get(\"X-permissions\");",
									"//console.log(\"--------X PERMISSION-------\",permissions);",
									"let index_arr = []; // chứa vị trí các phần tử được set permission",
									"",
									"if(pm.response.code == 200){",
									"pm.test(\"Check role name correct \" + responeJSON.data.role_name, function (){",
									"    pm.expect(responeJSON.data.role_name).to.eql(pm.environment.get(\"X-role_name\"));",
									"});",
									"//check các permission được chọn set",
									"for(let i = 0;  i < permissions_detail.length; i++){",
									"    //console.log(\"permission_key \", permissions_detail[i].permission_key);",
									"   ",
									"    for(let j = 0;  j < permissions.length; j++){",
									"       ",
									"        if(permissions_detail[i].permission_key == permissions[j].permission_key){",
									"          ",
									"            index_arr.push(i);",
									"            ",
									"            pm.test(\"check permission can_view_all \" + permissions_detail[i].permission_key, function(){",
									"                pm.expect(permissions_detail[i].can_view_all).to.eql(permissions[j].can_view_all);",
									"            });",
									"",
									"           ",
									"            pm.test(\"check permission can_view_only \"+ permissions_detail[i].permission_key, function(){",
									"                pm.expect(permissions_detail[i].can_view_only).to.eql(permissions[j].can_view_only);",
									"            });",
									"",
									"            pm.test(\"check permission can_create \"+ permissions_detail[i].permission_key, function(){",
									"                pm.expect(permissions_detail[i].can_create).to.eql(permissions[j].can_create);",
									"            });",
									"",
									"            pm.test(\"check permission can_update \"+ permissions_detail[i].permission_key, function(){",
									"                pm.expect(permissions_detail[i].can_update).to.eql(permissions[j].can_update);",
									"            });",
									"            ",
									"            pm.test(\"check permission can_delete \"+ permissions_detail[i].permission_key, function(){",
									"                pm.expect(permissions_detail[i].can_delete).to.eql(permissions[j].can_delete);",
									"            });",
									"",
									"            pm.test(\"check permission can_export \"+ permissions_detail[i].permission_key, function(){",
									"                pm.expect(permissions_detail[i].can_export).to.eql(permissions[j].can_export);",
									"            });",
									"        }",
									"        ",
									"    }",
									"}",
									"//end check các role được set",
									"//check các permission không được set,  = false",
									"for(let i = 0; i < permissions_detail.length; i++){",
									"    if(index_arr.includes(i)){",
									"        continue;",
									"    }",
									"        pm.test(\"check permission can_view_all \" + permissions_detail[i].permission_key, function(){",
									"                pm.expect(permissions_detail[i].can_view_all).to.be.false;",
									"            });",
									"",
									"           ",
									"        pm.test(\"check permission can_view_only \"+ permissions_detail[i].permission_key, function(){",
									"                pm.expect(permissions_detail[i].can_view_only).to.be.false;",
									"            });",
									"",
									"        pm.test(\"check permission can_create \"+ permissions_detail[i].permission_key, function(){",
									"                pm.expect(permissions_detail[i].can_create).to.be.false;",
									"            });",
									"",
									"        pm.test(\"check permission can_update \"+ permissions_detail[i].permission_key, function(){",
									"                pm.expect(permissions_detail[i].can_update).to.be.false;",
									"            });",
									"            ",
									"        pm.test(\"check permission can_delete \"+ permissions_detail[i].permission_key, function(){",
									"                pm.expect(permissions_detail[i].can_delete).to.be.false;",
									"            });",
									"",
									"        pm.test(\"check permission can_export \"+ permissions_detail[i].permission_key, function(){",
									"                pm.expect(permissions_detail[i].can_export).to.be.false;",
									"            });",
									"    ",
									"}",
									"}",
									"//end check các role không được set",
									"else{",
									"    console.log(\"Can't get role detail\");",
									"}",
									"",
									"postman.setNextRequest(\"delete_role\");",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "id",
								"value": "dec4ce5b-1bec-46ea-bc71-49051262882e",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-business/api/v1/role/get-one/{{X-role_id}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-business",
								"api",
								"v1",
								"role",
								"get-one",
								"{{X-role_id}}"
							],
							"query": [
								{
									"key": "x-user-id",
									"value": "{{C-user_id}}",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "delete_role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"let testcase = 5;",
									"pm.environment.set(\"X-testcase\", testcase);",
									"postman.setNextRequest(\"get_role_list\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "id",
								"value": "dec4ce5b-1bec-46ea-bc71-49051262882e",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{finone_url}}/fo-business/api/v1/role/delete/{{X-role_id}}",
							"host": [
								"{{finone_url}}"
							],
							"path": [
								"fo-business",
								"api",
								"v1",
								"role",
								"delete",
								"{{X-role_id}}"
							],
							"query": [
								{
									"key": "x-user-id",
									"value": "{{C-user_id}}",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"let configs = {",
					"    \"login_type\" : \"phone\", //phone, email, username",
					"    \"limit_page\":5,",
					"    \"timeout\":1000, // miliseconds => timeout to call API",
					"    \"is_buyer_gen\":false,",
					"    \"is_the_same_branch\":true, // true: branch tạo invoice và branch check là giống nhau, false: khác nhau",
					"    \"is_check_report\":true,",
					"    \"test_payment_method\":\"va_galaxy\" // bank_transfer, viet_qr_pro_mb, va_galaxy",
					"}",
					"",
					"pm.environment.set(\"C-configs\",configs);",
					"// console.log(\"configs: \",configs);"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"// ====================================== parser cURL",
					"function parseCURL(request_api){",
					"    let curl = \"\";",
					"    switch(request_api.method){",
					"        case \"PUT\":",
					"            curl = \"curl --location --request PUT \";",
					"            break;",
					"        case \"PATCH\":",
					"            curl = \"curl --location --request PATCH \";",
					"            break;",
					"        case \"DELETE\":",
					"            curl = \"curl --location --request DELETE \";",
					"            break;",
					"        default:",
					"            curl = \"curl --location \";",
					"            break;",
					"    }",
					"    curl += \"'\" + request_api.url.protocol + \"://\"",
					"",
					"    // host",
					"    for(let i in request_api.url.host){",
					"        if(i >= request_api.url.host.length - 1){",
					"            curl += request_api.url.host[i] + \"/\";",
					"        } else {",
					"            curl += request_api.url.host[i] + \".\";",
					"        }",
					"    }",
					"    // path",
					"    for(let i in request_api.url.path){",
					"        if(i >= request_api.url.path.length - 1){",
					"            curl += request_api.url.path[i];",
					"        } else {",
					"            curl += request_api.url.path[i] + \"/\";",
					"        }",
					"    }",
					"    // query (if have)",
					"    if(\"query\" in request_api.url){",
					"        if(request_api.url.query.length > 0){",
					"            curl += \"?\";",
					"            for(let i in request_api.url.query){",
					"                if(i >= request_api.url.query.length - 1){",
					"                    curl += request_api.url.query[i].key + \"=\" + request_api.url.query[i].value + \"' \";",
					"                } else {",
					"                    curl += request_api.url.query[i].key + \"=\" + request_api.url.query[i].value + \"&\";",
					"                }",
					"            }",
					"        } else {",
					"            curl += \"' \";",
					"        }",
					"    } else {",
					"        curl += \"' \";",
					"    }",
					"    // header",
					"    for(let i in request_api.header){",
					"        if(i >= request_api.header.length - 1){",
					"            curl += \"--header '\" + request_api.header[i].key + \": \" + request_api.header[i].value + \"'\";",
					"        } else {",
					"            curl += \"--header '\" + request_api.header[i].key + \": \" + request_api.header[i].value + \"' \";",
					"        }",
					"    }",
					"    switch(request_api.method){",
					"        case \"POST\":",
					"            curl += \" --data '\" + request_api.body.raw + \"'\"",
					"            break;",
					"        case \"PUT\": case \"PATCH\":",
					"            curl += \" --data-raw '\" + request_api.body.raw + \"'\"",
					"            break;",
					"        default:",
					"            break;",
					"    }",
					"    console.log(curl);",
					"    return curl;",
					"}",
					"const request_api = pm.request.toJSON();",
					"// console.log(\"request_api\",request_api);",
					"parseCURL(request_api);"
				]
			}
		}
	]
}